
HackerspaceSG Lighting Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022110  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005c74  080222e0  080222e0  000322e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027f54  08027f54  000400c0  2**0
                  CONTENTS
  4 .ARM          00000008  08027f54  08027f54  00037f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027f5c  08027f5c  000400c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027f5c  08027f5c  00037f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027f60  08027f60  00037f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08027f64  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014614  200000c0  08028024  000400c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200146d4  08028024  000446d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006e1a8  00000000  00000000  000400f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000bf0e  00000000  00000000  000ae298  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00004070  00000000  00000000  000ba1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003cb8  00000000  00000000  000be218  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00045182  00000000  00000000  000c1ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00050a7d  00000000  00000000  00107052  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00144cdd  00000000  00000000  00157acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0029c7ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011424  00000000  00000000  0029c828  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080222c8 	.word	0x080222c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	080222c8 	.word	0x080222c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <hw_init>:
***********************************************************************************************************************/

#include "hw_init.h"

void hw_init()
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	af00      	add	r7, sp, #0
	// Initialize System Clock
	SystemClock_Config();
 80005e6:	f000 f831 	bl	800064c <SystemClock_Config>

	// Initialize Hardware Peripherals
	GPIO_Init();
 80005ea:	f001 f82f 	bl	800164c <GPIO_Init>
	ADC3_Init();
 80005ee:	f000 f8ed 	bl	80007cc <ADC3_Init>
	CRC_Init();
 80005f2:	f000 f93d 	bl	8000870 <CRC_Init>
	DCMI_Init();
 80005f6:	f000 f95d 	bl	80008b4 <DCMI_Init>
	DMA2D_Init();
 80005fa:	f000 f98f 	bl	800091c <DMA2D_Init>
	FMC_Init();
 80005fe:	f000 ffd5 	bl	80015ac <FMC_Init>
	I2C1_Init();
 8000602:	f000 f9bd 	bl	8000980 <I2C1_Init>
	I2C3_Init();
 8000606:	f000 f9fb 	bl	8000a00 <I2C3_Init>
	LTDC_Init();
 800060a:	f000 fa39 	bl	8000a80 <LTDC_Init>
	QUADSPI_Init();
 800060e:	f000 fab9 	bl	8000b84 <QUADSPI_Init>
	RTC_Init();
 8000612:	f000 fae3 	bl	8000bdc <RTC_Init>
	SAI2_Init();
 8000616:	f000 fb87 	bl	8000d28 <SAI2_Init>
	SDMMC1_SD_Init();
 800061a:	f000 fc2d 	bl	8000e78 <SDMMC1_SD_Init>
	SPDIFRX_Init();
 800061e:	f000 fc4b 	bl	8000eb8 <SPDIFRX_Init>
	SPI2_Init();
 8000622:	f000 fc79 	bl	8000f18 <SPI2_Init>
	TIM1_Init();
 8000626:	f000 fcb5 	bl	8000f94 <TIM1_Init>
	TIM2_Init();
 800062a:	f000 fd5f 	bl	80010ec <TIM2_Init>
	TIM3_Init();
 800062e:	f000 fdd3 	bl	80011d8 <TIM3_Init>
	TIM5_Init();
 8000632:	f000 fe49 	bl	80012c8 <TIM5_Init>
	TIM8_Init();
 8000636:	f000 febf 	bl	80013b8 <TIM8_Init>
	TIM12_Init();
 800063a:	f000 ff11 	bl	8001460 <TIM12_Init>
	USART1_UART_Init();
 800063e:	f000 ff55 	bl	80014ec <USART1_UART_Init>
	USART6_UART_Init();
 8000642:	f000 ff83 	bl	800154c <USART6_UART_Init>
	//IWDG_Init();
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b0b4      	sub	sp, #208	; 0xd0
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f020 feb0 	bl	80213c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2284      	movs	r2, #132	; 0x84
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f020 fea1 	bl	80213c0 <memset>

  // Configure LSE Drive Capability
  HAL_PWR_EnableBkUpAccess();
 800067e:	f008 f99d 	bl	80089bc <HAL_PWR_EnableBkUpAccess>

  // Configure the main internal regulator output voltage
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	4b4f      	ldr	r3, [pc, #316]	; (80007c0 <SystemClock_Config+0x174>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	4a4e      	ldr	r2, [pc, #312]	; (80007c0 <SystemClock_Config+0x174>)
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068c:	6413      	str	r3, [r2, #64]	; 0x40
 800068e:	4b4c      	ldr	r3, [pc, #304]	; (80007c0 <SystemClock_Config+0x174>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069a:	4b4a      	ldr	r3, [pc, #296]	; (80007c4 <SystemClock_Config+0x178>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a49      	ldr	r2, [pc, #292]	; (80007c4 <SystemClock_Config+0x178>)
 80006a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a4:	6013      	str	r3, [r2, #0]
 80006a6:	4b47      	ldr	r3, [pc, #284]	; (80007c4 <SystemClock_Config+0x178>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  // Initializes the RCC Oscillators according to the specified parameters
  // in the RCC_OscInitTypeDef structure.
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006b2:	2309      	movs	r3, #9
 80006b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006d4:	2319      	movs	r3, #25
 80006d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80006da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80006de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006e8:	2309      	movs	r3, #9
 80006ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f008 fa84 	bl	8008c00 <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006fe:	f001 f9e3 	bl	8001ac8 <Error_Handler>
  }
  // Activate the Over-Drive mode
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000702:	f008 f96b 	bl	80089dc <HAL_PWREx_EnableOverDrive>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800070c:	f001 f9dc 	bl	8001ac8 <Error_Handler>
  }
  // Initializes the CPU, AHB and APB buses clocks
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000722:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000726:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000732:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000736:	2106      	movs	r1, #6
 8000738:	4618      	mov	r0, r3
 800073a:	f008 fd05 	bl	8009148 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000744:	f001 f9c0 	bl	8001ac8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <SystemClock_Config+0x17c>)
 800074a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800074c:	2364      	movs	r3, #100	; 0x64
 800074e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800075c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000760:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000762:	2305      	movs	r3, #5
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800076a:	2303      	movs	r3, #3
 800076c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800076e:	2301      	movs	r3, #1
 8000770:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000772:	2301      	movs	r3, #1
 8000774:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000776:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800077c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000780:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000782:	2300      	movs	r3, #0
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000786:	2300      	movs	r3, #0
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800078a:	2300      	movs	r3, #0
 800078c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800078e:	2300      	movs	r3, #0
 8000790:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000792:	2300      	movs	r3, #0
 8000794:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000796:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800079a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	4618      	mov	r0, r3
 80007aa:	f008 fed1 	bl	8009550 <HAL_RCCEx_PeriphCLKConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 80007b4:	f001 f988 	bl	8001ac8 <Error_Handler>
  }
}
 80007b8:	bf00      	nop
 80007ba:	37d0      	adds	r7, #208	; 0xd0
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000
 80007c8:	01b14868 	.word	0x01b14868

080007cc <ADC3_Init>:

// ADC3 Peripheral Initialization
void ADC3_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80007d2:	463b      	mov	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]

  // Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  hadc3.Instance = ADC3;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <ADC3_Init+0x98>)
 80007e0:	4a21      	ldr	r2, [pc, #132]	; (8000868 <ADC3_Init+0x9c>)
 80007e2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <ADC3_Init+0x98>)
 80007e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ea:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <ADC3_Init+0x98>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <ADC3_Init+0x98>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <ADC3_Init+0x98>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <ADC3_Init+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <ADC3_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <ADC3_Init+0x98>)
 800080e:	4a17      	ldr	r2, [pc, #92]	; (800086c <ADC3_Init+0xa0>)
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <ADC3_Init+0x98>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <ADC3_Init+0x98>)
 800081a:	2201      	movs	r2, #1
 800081c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <ADC3_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <ADC3_Init+0x98>)
 8000828:	2201      	movs	r2, #1
 800082a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800082c:	480d      	ldr	r0, [pc, #52]	; (8000864 <ADC3_Init+0x98>)
 800082e:	f003 f93d 	bl	8003aac <HAL_ADC_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <ADC3_Init+0x70>
  {
    Error_Handler();
 8000838:	f001 f946 	bl	8001ac8 <Error_Handler>
  }
  // Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  sConfig.Channel = ADC_CHANNEL_4;
 800083c:	2304      	movs	r3, #4
 800083e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000840:	2301      	movs	r3, #1
 8000842:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <ADC3_Init+0x98>)
 800084e:	f003 f971 	bl	8003b34 <HAL_ADC_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <ADC3_Init+0x90>
  {
    Error_Handler();
 8000858:	f001 f936 	bl	8001ac8 <Error_Handler>
  }

}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200095a4 	.word	0x200095a4
 8000868:	40012200 	.word	0x40012200
 800086c:	0f000001 	.word	0x0f000001

08000870 <CRC_Init>:

// CRC Peripheral Initialization
 void CRC_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  hcrc.Instance = CRC;
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <CRC_Init+0x3c>)
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <CRC_Init+0x40>)
 8000878:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <CRC_Init+0x3c>)
 800087c:	2200      	movs	r2, #0
 800087e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <CRC_Init+0x3c>)
 8000882:	2200      	movs	r2, #0
 8000884:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <CRC_Init+0x3c>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <CRC_Init+0x3c>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <CRC_Init+0x3c>)
 8000894:	2201      	movs	r2, #1
 8000896:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <CRC_Init+0x3c>)
 800089a:	f003 fc71 	bl	8004180 <HAL_CRC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <CRC_Init+0x38>
  {
    Error_Handler();
 80008a4:	f001 f910 	bl	8001ac8 <Error_Handler>
  }
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200093bc 	.word	0x200093bc
 80008b0:	40023000 	.word	0x40023000

080008b4 <DCMI_Init>:

// DCMI Peripheral Initialization
 void DCMI_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  hdcmi.Instance = DCMI;
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <DCMI_Init+0x60>)
 80008ba:	4a17      	ldr	r2, [pc, #92]	; (8000918 <DCMI_Init+0x64>)
 80008bc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <DCMI_Init+0x60>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <DCMI_Init+0x60>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <DCMI_Init+0x60>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80008d0:	4b10      	ldr	r3, [pc, #64]	; (8000914 <DCMI_Init+0x60>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <DCMI_Init+0x60>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <DCMI_Init+0x60>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <DCMI_Init+0x60>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <DCMI_Init+0x60>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <DCMI_Init+0x60>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <DCMI_Init+0x60>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <DCMI_Init+0x60>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <DCMI_Init+0x60>)
 8000902:	f003 fd27 	bl	8004354 <HAL_DCMI_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <DCMI_Init+0x5c>
  {
    Error_Handler();
 800090c:	f001 f8dc 	bl	8001ac8 <Error_Handler>
  }
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200095ec 	.word	0x200095ec
 8000918:	50050000 	.word	0x50050000

0800091c <DMA2D_Init>:

// DMA2D Peripheral Initialization
void DMA2D_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  hdma2d.Instance = DMA2D;
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <DMA2D_Init+0x5c>)
 8000922:	4a16      	ldr	r2, [pc, #88]	; (800097c <DMA2D_Init+0x60>)
 8000924:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <DMA2D_Init+0x5c>)
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <DMA2D_Init+0x5c>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <DMA2D_Init+0x5c>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <DMA2D_Init+0x5c>)
 800093a:	2200      	movs	r2, #0
 800093c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <DMA2D_Init+0x5c>)
 8000940:	2200      	movs	r2, #0
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <DMA2D_Init+0x5c>)
 8000946:	2200      	movs	r2, #0
 8000948:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <DMA2D_Init+0x5c>)
 800094c:	2200      	movs	r2, #0
 800094e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <DMA2D_Init+0x5c>)
 8000952:	f003 ff35 	bl	80047c0 <HAL_DMA2D_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <DMA2D_Init+0x44>
  {
    Error_Handler();
 800095c:	f001 f8b4 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000960:	2101      	movs	r1, #1
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <DMA2D_Init+0x5c>)
 8000964:	f004 f99a 	bl	8004c9c <HAL_DMA2D_ConfigLayer>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <DMA2D_Init+0x56>
  {
    Error_Handler();
 800096e:	f001 f8ab 	bl	8001ac8 <Error_Handler>
  }

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200097b0 	.word	0x200097b0
 800097c:	4002b000 	.word	0x4002b000

08000980 <I2C1_Init>:

// I2C1 Peripheral Initialization
void I2C1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <I2C1_Init+0x74>)
 8000986:	4a1c      	ldr	r2, [pc, #112]	; (80009f8 <I2C1_Init+0x78>)
 8000988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <I2C1_Init+0x74>)
 800098c:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <I2C1_Init+0x7c>)
 800098e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <I2C1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <I2C1_Init+0x74>)
 8000998:	2201      	movs	r2, #1
 800099a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <I2C1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <I2C1_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <I2C1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <I2C1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <I2C1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ba:	480e      	ldr	r0, [pc, #56]	; (80009f4 <I2C1_Init+0x74>)
 80009bc:	f007 fb4e 	bl	800805c <HAL_I2C_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <I2C1_Init+0x4a>
  {
    Error_Handler();
 80009c6:	f001 f87f 	bl	8001ac8 <Error_Handler>
  }
  // Configure Analog filter
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <I2C1_Init+0x74>)
 80009ce:	f007 fbd5 	bl	800817c <HAL_I2CEx_ConfigAnalogFilter>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <I2C1_Init+0x5c>
  {
    Error_Handler();
 80009d8:	f001 f876 	bl	8001ac8 <Error_Handler>
  }
  // Configure Digital filter
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009dc:	2100      	movs	r1, #0
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <I2C1_Init+0x74>)
 80009e0:	f007 fc17 	bl	8008212 <HAL_I2CEx_ConfigDigitalFilter>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ea:	f001 f86d 	bl	8001ac8 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20009360 	.word	0x20009360
 80009f8:	40005400 	.word	0x40005400
 80009fc:	00c0eaff 	.word	0x00c0eaff

08000a00 <I2C3_Init>:

// I2C3 Peripheral Initialization
void I2C3_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <I2C3_Init+0x74>)
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <I2C3_Init+0x78>)
 8000a08:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <I2C3_Init+0x74>)
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <I2C3_Init+0x7c>)
 8000a0e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <I2C3_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <I2C3_Init+0x74>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <I2C3_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <I2C3_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <I2C3_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <I2C3_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <I2C3_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a3a:	480e      	ldr	r0, [pc, #56]	; (8000a74 <I2C3_Init+0x74>)
 8000a3c:	f007 fb0e 	bl	800805c <HAL_I2C_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a46:	f001 f83f 	bl	8001ac8 <Error_Handler>
  }
  // Configure Analogue filter
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <I2C3_Init+0x74>)
 8000a4e:	f007 fb95 	bl	800817c <HAL_I2CEx_ConfigAnalogFilter>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a58:	f001 f836 	bl	8001ac8 <Error_Handler>
  }
  // Configure Digital filter
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <I2C3_Init+0x74>)
 8000a60:	f007 fbd7 	bl	8008212 <HAL_I2CEx_ConfigDigitalFilter>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a6a:	f001 f82d 	bl	8001ac8 <Error_Handler>
  }
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20009194 	.word	0x20009194
 8000a78:	40005c00 	.word	0x40005c00
 8000a7c:	00c0eaff 	.word	0x00c0eaff

08000a80 <LTDC_Init>:

}

// LTDC Peripheral Initialization
 void LTDC_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	; 0x38
 8000a84:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2234      	movs	r2, #52	; 0x34
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f020 fc97 	bl	80213c0 <memset>

  hltdc.Instance = LTDC;
 8000a92:	4b3a      	ldr	r3, [pc, #232]	; (8000b7c <LTDC_Init+0xfc>)
 8000a94:	4a3a      	ldr	r2, [pc, #232]	; (8000b80 <LTDC_Init+0x100>)
 8000a96:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a98:	4b38      	ldr	r3, [pc, #224]	; (8000b7c <LTDC_Init+0xfc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a9e:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <LTDC_Init+0xfc>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000aa4:	4b35      	ldr	r3, [pc, #212]	; (8000b7c <LTDC_Init+0xfc>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000aaa:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <LTDC_Init+0xfc>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000ab0:	4b32      	ldr	r3, [pc, #200]	; (8000b7c <LTDC_Init+0xfc>)
 8000ab2:	2228      	movs	r2, #40	; 0x28
 8000ab4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000ab6:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <LTDC_Init+0xfc>)
 8000ab8:	2209      	movs	r2, #9
 8000aba:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000abc:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <LTDC_Init+0xfc>)
 8000abe:	2235      	movs	r2, #53	; 0x35
 8000ac0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000ac2:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <LTDC_Init+0xfc>)
 8000ac4:	220b      	movs	r2, #11
 8000ac6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <LTDC_Init+0xfc>)
 8000aca:	f240 2215 	movw	r2, #533	; 0x215
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <LTDC_Init+0xfc>)
 8000ad2:	f240 121b 	movw	r2, #283	; 0x11b
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000ad8:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <LTDC_Init+0xfc>)
 8000ada:	f240 2235 	movw	r2, #565	; 0x235
 8000ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ae0:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <LTDC_Init+0xfc>)
 8000ae2:	f240 121d 	movw	r2, #285	; 0x11d
 8000ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ae8:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <LTDC_Init+0xfc>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <LTDC_Init+0xfc>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <LTDC_Init+0xfc>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b00:	481e      	ldr	r0, [pc, #120]	; (8000b7c <LTDC_Init+0xfc>)
 8000b02:	f007 fbe3 	bl	80082cc <HAL_LTDC_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <LTDC_Init+0x90>
  {
    Error_Handler();
 8000b0c:	f000 ffdc 	bl	8001ac8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000b14:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b18:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000b1e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b22:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b24:	2302      	movs	r3, #2
 8000b26:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b28:	23ff      	movs	r3, #255	; 0xff
 8000b2a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b34:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b36:	2307      	movs	r3, #7
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b3a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000b40:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000b46:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2200      	movs	r2, #0
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <LTDC_Init+0xfc>)
 8000b66:	f007 fd43 	bl	80085f0 <HAL_LTDC_ConfigLayer>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <LTDC_Init+0xf4>
  {
    Error_Handler();
 8000b70:	f000 ffaa 	bl	8001ac8 <Error_Handler>
  }
}
 8000b74:	bf00      	nop
 8000b76:	3738      	adds	r7, #56	; 0x38
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200094fc 	.word	0x200094fc
 8000b80:	40016800 	.word	0x40016800

08000b84 <QUADSPI_Init>:

// QuadSPI Peripheral Initialization
void QUADSPI_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  hqspi.Instance = QUADSPI;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <QUADSPI_Init+0x50>)
 8000b8a:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <QUADSPI_Init+0x54>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <QUADSPI_Init+0x50>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <QUADSPI_Init+0x50>)
 8000b96:	2204      	movs	r2, #4
 8000b98:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <QUADSPI_Init+0x50>)
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <QUADSPI_Init+0x50>)
 8000ba2:	2218      	movs	r2, #24
 8000ba4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <QUADSPI_Init+0x50>)
 8000ba8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000bac:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <QUADSPI_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <QUADSPI_Init+0x50>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <QUADSPI_Init+0x50>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <QUADSPI_Init+0x50>)
 8000bc2:	f007 ff5b 	bl	8008a7c <HAL_QSPI_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000bcc:	f000 ff7c 	bl	8001ac8 <Error_Handler>
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200098bc 	.word	0x200098bc
 8000bd8:	a0001000 	.word	0xa0001000

08000bdc <RTC_Init>:

// RTC Peripheral Initialization
void RTC_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b092      	sub	sp, #72	; 0x48
 8000be0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000be2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]
 8000bf2:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	222c      	movs	r2, #44	; 0x2c
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f020 fbde 	bl	80213c0 <memset>

  hrtc.Instance = RTC;
 8000c04:	4b46      	ldr	r3, [pc, #280]	; (8000d20 <RTC_Init+0x144>)
 8000c06:	4a47      	ldr	r2, [pc, #284]	; (8000d24 <RTC_Init+0x148>)
 8000c08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c0a:	4b45      	ldr	r3, [pc, #276]	; (8000d20 <RTC_Init+0x144>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c10:	4b43      	ldr	r3, [pc, #268]	; (8000d20 <RTC_Init+0x144>)
 8000c12:	227f      	movs	r2, #127	; 0x7f
 8000c14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c16:	4b42      	ldr	r3, [pc, #264]	; (8000d20 <RTC_Init+0x144>)
 8000c18:	22ff      	movs	r2, #255	; 0xff
 8000c1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c1c:	4b40      	ldr	r3, [pc, #256]	; (8000d20 <RTC_Init+0x144>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c22:	4b3f      	ldr	r3, [pc, #252]	; (8000d20 <RTC_Init+0x144>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c28:	4b3d      	ldr	r3, [pc, #244]	; (8000d20 <RTC_Init+0x144>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c2e:	483c      	ldr	r0, [pc, #240]	; (8000d20 <RTC_Init+0x144>)
 8000c30:	f009 f9b2 	bl	8009f98 <HAL_RTC_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <RTC_Init+0x62>
  {
    Error_Handler();
 8000c3a:	f000 ff45 	bl	8001ac8 <Error_Handler>
  }

  // Initialize RTC and set the Time and Date
  sTime.Hours = 0x0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4619      	mov	r1, r3
 8000c60:	482f      	ldr	r0, [pc, #188]	; (8000d20 <RTC_Init+0x144>)
 8000c62:	f009 fa2b 	bl	800a0bc <HAL_RTC_SetTime>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <RTC_Init+0x94>
  {
    Error_Handler();
 8000c6c:	f000 ff2c 	bl	8001ac8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c70:	2301      	movs	r3, #1
 8000c72:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000c76:	2301      	movs	r3, #1
 8000c78:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4823      	ldr	r0, [pc, #140]	; (8000d20 <RTC_Init+0x144>)
 8000c92:	f009 fad1 	bl	800a238 <HAL_RTC_SetDate>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <RTC_Init+0xc4>
  {
    Error_Handler();
 8000c9c:	f000 ff14 	bl	8001ac8 <Error_Handler>
  }

  // Enable Alarm A
  sAlarm.AlarmTime.Hours = 0x0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4812      	ldr	r0, [pc, #72]	; (8000d20 <RTC_Init+0x144>)
 8000cd8:	f009 fb56 	bl	800a388 <HAL_RTC_SetAlarm>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <RTC_Init+0x10a>
  {
    Error_Handler();
 8000ce2:	f000 fef1 	bl	8001ac8 <Error_Handler>
  }

  // Enable Alarm B
  sAlarm.Alarm = RTC_ALARM_B;
 8000ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480b      	ldr	r0, [pc, #44]	; (8000d20 <RTC_Init+0x144>)
 8000cf4:	f009 fb48 	bl	800a388 <HAL_RTC_SetAlarm>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <RTC_Init+0x126>
  {
    Error_Handler();
 8000cfe:	f000 fee3 	bl	8001ac8 <Error_Handler>
  }

  // Enable Time Stamp
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000d02:	2202      	movs	r2, #2
 8000d04:	2100      	movs	r1, #0
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <RTC_Init+0x144>)
 8000d08:	f009 fcc8 	bl	800a69c <HAL_RTCEx_SetTimeStamp>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <RTC_Init+0x13a>
  {
    Error_Handler();
 8000d12:	f000 fed9 	bl	8001ac8 <Error_Handler>
  }

}
 8000d16:	bf00      	nop
 8000d18:	3748      	adds	r7, #72	; 0x48
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200096c0 	.word	0x200096c0
 8000d24:	40002800 	.word	0x40002800

08000d28 <SAI2_Init>:

// SAI2 Peripheral Initialization
void SAI2_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000d2c:	4b4d      	ldr	r3, [pc, #308]	; (8000e64 <SAI2_Init+0x13c>)
 8000d2e:	4a4e      	ldr	r2, [pc, #312]	; (8000e68 <SAI2_Init+0x140>)
 8000d30:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d32:	4b4c      	ldr	r3, [pc, #304]	; (8000e64 <SAI2_Init+0x13c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d38:	4b4a      	ldr	r3, [pc, #296]	; (8000e64 <SAI2_Init+0x13c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000d3e:	4b49      	ldr	r3, [pc, #292]	; (8000e64 <SAI2_Init+0x13c>)
 8000d40:	2240      	movs	r2, #64	; 0x40
 8000d42:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d44:	4b47      	ldr	r3, [pc, #284]	; (8000e64 <SAI2_Init+0x13c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d4a:	4b46      	ldr	r3, [pc, #280]	; (8000e64 <SAI2_Init+0x13c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d50:	4b44      	ldr	r3, [pc, #272]	; (8000e64 <SAI2_Init+0x13c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d56:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <SAI2_Init+0x13c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d5c:	4b41      	ldr	r3, [pc, #260]	; (8000e64 <SAI2_Init+0x13c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d62:	4b40      	ldr	r3, [pc, #256]	; (8000e64 <SAI2_Init+0x13c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d68:	4b3e      	ldr	r3, [pc, #248]	; (8000e64 <SAI2_Init+0x13c>)
 8000d6a:	4a40      	ldr	r2, [pc, #256]	; (8000e6c <SAI2_Init+0x144>)
 8000d6c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	; (8000e64 <SAI2_Init+0x13c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d74:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <SAI2_Init+0x13c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d7a:	4b3a      	ldr	r3, [pc, #232]	; (8000e64 <SAI2_Init+0x13c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d80:	4b38      	ldr	r3, [pc, #224]	; (8000e64 <SAI2_Init+0x13c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000d86:	4b37      	ldr	r3, [pc, #220]	; (8000e64 <SAI2_Init+0x13c>)
 8000d88:	2208      	movs	r2, #8
 8000d8a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000d8c:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <SAI2_Init+0x13c>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d92:	4b34      	ldr	r3, [pc, #208]	; (8000e64 <SAI2_Init+0x13c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d98:	4b32      	ldr	r3, [pc, #200]	; (8000e64 <SAI2_Init+0x13c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d9e:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <SAI2_Init+0x13c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000da4:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <SAI2_Init+0x13c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <SAI2_Init+0x13c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000db0:	4b2c      	ldr	r3, [pc, #176]	; (8000e64 <SAI2_Init+0x13c>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <SAI2_Init+0x13c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000dbc:	4829      	ldr	r0, [pc, #164]	; (8000e64 <SAI2_Init+0x13c>)
 8000dbe:	f009 fcc3 	bl	800a748 <HAL_SAI_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SAI2_Init+0xa4>
  {
    Error_Handler();
 8000dc8:	f000 fe7e 	bl	8001ac8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <SAI2_Init+0x148>)
 8000dce:	4a29      	ldr	r2, [pc, #164]	; (8000e74 <SAI2_Init+0x14c>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000dd2:	4b27      	ldr	r3, [pc, #156]	; (8000e70 <SAI2_Init+0x148>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000dd8:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <SAI2_Init+0x148>)
 8000dda:	2203      	movs	r2, #3
 8000ddc:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000dde:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <SAI2_Init+0x148>)
 8000de0:	2240      	movs	r2, #64	; 0x40
 8000de2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000de4:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <SAI2_Init+0x148>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <SAI2_Init+0x148>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <SAI2_Init+0x148>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <SAI2_Init+0x148>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <SAI2_Init+0x148>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <SAI2_Init+0x148>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <SAI2_Init+0x148>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <SAI2_Init+0x148>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <SAI2_Init+0x148>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <SAI2_Init+0x148>)
 8000e1c:	2208      	movs	r2, #8
 8000e1e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <SAI2_Init+0x148>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e26:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <SAI2_Init+0x148>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e2c:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <SAI2_Init+0x148>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <SAI2_Init+0x148>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <SAI2_Init+0x148>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <SAI2_Init+0x148>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <SAI2_Init+0x148>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <SAI2_Init+0x148>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000e50:	4807      	ldr	r0, [pc, #28]	; (8000e70 <SAI2_Init+0x148>)
 8000e52:	f009 fc79 	bl	800a748 <HAL_SAI_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SAI2_Init+0x138>
  {
    Error_Handler();
 8000e5c:	f000 fe34 	bl	8001ac8 <Error_Handler>
  }
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200092dc 	.word	0x200092dc
 8000e68:	40015c04 	.word	0x40015c04
 8000e6c:	0002ee00 	.word	0x0002ee00
 8000e70:	20009110 	.word	0x20009110
 8000e74:	40015c24 	.word	0x40015c24

08000e78 <SDMMC1_SD_Init>:

// SDMMC Peripheral Initialization
void SDMMC1_SD_Init(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  hsd1.Instance = SDMMC1;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <SDMMC1_SD_Init+0x38>)
 8000e7e:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <SDMMC1_SD_Init+0x3c>)
 8000e80:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <SDMMC1_SD_Init+0x38>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <SDMMC1_SD_Init+0x38>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <SDMMC1_SD_Init+0x38>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <SDMMC1_SD_Init+0x38>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <SDMMC1_SD_Init+0x38>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <SDMMC1_SD_Init+0x38>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	200093e0 	.word	0x200093e0
 8000eb4:	40012c00 	.word	0x40012c00

08000eb8 <SPDIFRX_Init>:

// SPDIF Peripheral Initialization
void SPDIFRX_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  hspdif.Instance = SPDIFRX;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <SPDIFRX_Init+0x5c>)
 8000ebe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000ec2:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <SPDIFRX_Init+0x5c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000eca:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <SPDIFRX_Init+0x5c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000ed0:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <SPDIFRX_Init+0x5c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <SPDIFRX_Init+0x5c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <SPDIFRX_Init+0x5c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <SPDIFRX_Init+0x5c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <SPDIFRX_Init+0x5c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <SPDIFRX_Init+0x5c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <SPDIFRX_Init+0x5c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <SPDIFRX_Init+0x5c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <SPDIFRX_Init+0x5c>)
 8000f02:	f009 fe53 	bl	800abac <HAL_SPDIFRX_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000f0c:	f000 fddc 	bl	8001ac8 <Error_Handler>
  }
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20009290 	.word	0x20009290

08000f18 <SPI2_Init>:

// SPI2 Peripheral Initialization
void SPI2_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  hspi2.Instance = SPI2;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <SPI2_Init+0x74>)
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	; (8000f90 <SPI2_Init+0x78>)
 8000f20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <SPI2_Init+0x74>)
 8000f24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <SPI2_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <SPI2_Init+0x74>)
 8000f32:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f36:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <SPI2_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <SPI2_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <SPI2_Init+0x74>)
 8000f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f4a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <SPI2_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <SPI2_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <SPI2_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <SPI2_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <SPI2_Init+0x74>)
 8000f66:	2207      	movs	r2, #7
 8000f68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <SPI2_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <SPI2_Init+0x74>)
 8000f72:	2208      	movs	r2, #8
 8000f74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <SPI2_Init+0x74>)
 8000f78:	f009 fe74 	bl	800ac64 <HAL_SPI_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f000 fda1 	bl	8001ac8 <Error_Handler>
  }
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200091e0 	.word	0x200091e0
 8000f90:	40003800 	.word	0x40003800

08000f94 <TIM1_Init>:

// Timer 1 Peripheral Initialization
void TIM1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b09a      	sub	sp, #104	; 0x68
 8000f98:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	222c      	movs	r2, #44	; 0x2c
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f020 f9f6 	bl	80213c0 <memset>

  htim1.Instance = TIM1;
 8000fd4:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <TIM1_Init+0x150>)
 8000fd6:	4a44      	ldr	r2, [pc, #272]	; (80010e8 <TIM1_Init+0x154>)
 8000fd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fda:	4b42      	ldr	r3, [pc, #264]	; (80010e4 <TIM1_Init+0x150>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <TIM1_Init+0x150>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fe6:	4b3f      	ldr	r3, [pc, #252]	; (80010e4 <TIM1_Init+0x150>)
 8000fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <TIM1_Init+0x150>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ff4:	4b3b      	ldr	r3, [pc, #236]	; (80010e4 <TIM1_Init+0x150>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffa:	4b3a      	ldr	r3, [pc, #232]	; (80010e4 <TIM1_Init+0x150>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001000:	4838      	ldr	r0, [pc, #224]	; (80010e4 <TIM1_Init+0x150>)
 8001002:	f009 feda 	bl	800adba <HAL_TIM_Base_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <TIM1_Init+0x7c>
  {
    Error_Handler();
 800100c:	f000 fd5c 	bl	8001ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001014:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001016:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800101a:	4619      	mov	r1, r3
 800101c:	4831      	ldr	r0, [pc, #196]	; (80010e4 <TIM1_Init+0x150>)
 800101e:	f00a fa21 	bl	800b464 <HAL_TIM_ConfigClockSource>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <TIM1_Init+0x98>
  {
    Error_Handler();
 8001028:	f000 fd4e 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800102c:	482d      	ldr	r0, [pc, #180]	; (80010e4 <TIM1_Init+0x150>)
 800102e:	f009 ff93 	bl	800af58 <HAL_TIM_PWM_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <TIM1_Init+0xa8>
  {
    Error_Handler();
 8001038:	f000 fd46 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001048:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800104c:	4619      	mov	r1, r3
 800104e:	4825      	ldr	r0, [pc, #148]	; (80010e4 <TIM1_Init+0x150>)
 8001050:	f00a fe82 	bl	800bd58 <HAL_TIMEx_MasterConfigSynchronization>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <TIM1_Init+0xca>
  {
    Error_Handler();
 800105a:	f000 fd35 	bl	8001ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105e:	2360      	movs	r3, #96	; 0x60
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001066:	2300      	movs	r3, #0
 8001068:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800106a:	2300      	movs	r3, #0
 800106c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800107a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800107e:	2200      	movs	r2, #0
 8001080:	4619      	mov	r1, r3
 8001082:	4818      	ldr	r0, [pc, #96]	; (80010e4 <TIM1_Init+0x150>)
 8001084:	f00a f8de 	bl	800b244 <HAL_TIM_PWM_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <TIM1_Init+0xfe>
  {
    Error_Handler();
 800108e:	f000 fd1b 	bl	8001ac8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4619      	mov	r1, r3
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <TIM1_Init+0x150>)
 80010c8:	f00a fed4 	bl	800be74 <HAL_TIMEx_ConfigBreakDeadTime>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <TIM1_Init+0x142>
  {
    Error_Handler();
 80010d2:	f000 fcf9 	bl	8001ac8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80010d6:	4803      	ldr	r0, [pc, #12]	; (80010e4 <TIM1_Init+0x150>)
 80010d8:	f001 f99c 	bl	8002414 <HAL_TIM_MspPostInit>

}
 80010dc:	bf00      	nop
 80010de:	3768      	adds	r7, #104	; 0x68
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200096e0 	.word	0x200096e0
 80010e8:	40010000 	.word	0x40010000

080010ec <TIM2_Init>:

// Timer 2 Peripheral Initialization
void TIM2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08e      	sub	sp, #56	; 0x38
 80010f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800110c:	463b      	mov	r3, r7
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
 800111a:	615a      	str	r2, [r3, #20]
 800111c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800111e:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <TIM2_Init+0xe8>)
 8001120:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001124:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001126:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <TIM2_Init+0xe8>)
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <TIM2_Init+0xe8>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001132:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <TIM2_Init+0xe8>)
 8001134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001138:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113a:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <TIM2_Init+0xe8>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <TIM2_Init+0xe8>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001146:	4823      	ldr	r0, [pc, #140]	; (80011d4 <TIM2_Init+0xe8>)
 8001148:	f009 fe37 	bl	800adba <HAL_TIM_Base_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <TIM2_Init+0x6a>
  {
    Error_Handler();
 8001152:	f000 fcb9 	bl	8001ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800115c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001160:	4619      	mov	r1, r3
 8001162:	481c      	ldr	r0, [pc, #112]	; (80011d4 <TIM2_Init+0xe8>)
 8001164:	f00a f97e 	bl	800b464 <HAL_TIM_ConfigClockSource>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <TIM2_Init+0x86>
  {
    Error_Handler();
 800116e:	f000 fcab 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001172:	4818      	ldr	r0, [pc, #96]	; (80011d4 <TIM2_Init+0xe8>)
 8001174:	f009 fef0 	bl	800af58 <HAL_TIM_PWM_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <TIM2_Init+0x96>
  {
    Error_Handler();
 800117e:	f000 fca3 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	4810      	ldr	r0, [pc, #64]	; (80011d4 <TIM2_Init+0xe8>)
 8001192:	f00a fde1 	bl	800bd58 <HAL_TIMEx_MasterConfigSynchronization>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <TIM2_Init+0xb4>
  {
    Error_Handler();
 800119c:	f000 fc94 	bl	8001ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a0:	2360      	movs	r3, #96	; 0x60
 80011a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b0:	463b      	mov	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	4619      	mov	r1, r3
 80011b6:	4807      	ldr	r0, [pc, #28]	; (80011d4 <TIM2_Init+0xe8>)
 80011b8:	f00a f844 	bl	800b244 <HAL_TIM_PWM_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <TIM2_Init+0xda>
  {
    Error_Handler();
 80011c2:	f000 fc81 	bl	8001ac8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80011c6:	4803      	ldr	r0, [pc, #12]	; (80011d4 <TIM2_Init+0xe8>)
 80011c8:	f001 f924 	bl	8002414 <HAL_TIM_MspPostInit>
}
 80011cc:	bf00      	nop
 80011ce:	3738      	adds	r7, #56	; 0x38
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200097f0 	.word	0x200097f0

080011d8 <TIM3_Init>:

// Timer 3 Peripheral Initialization
void TIM3_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08e      	sub	sp, #56	; 0x38
 80011dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f8:	463b      	mov	r3, r7
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
 8001206:	615a      	str	r2, [r3, #20]
 8001208:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <TIM3_Init+0xe8>)
 800120c:	4a2d      	ldr	r2, [pc, #180]	; (80012c4 <TIM3_Init+0xec>)
 800120e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001210:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <TIM3_Init+0xe8>)
 8001212:	2200      	movs	r2, #0
 8001214:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <TIM3_Init+0xe8>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800121c:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <TIM3_Init+0xe8>)
 800121e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001222:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <TIM3_Init+0xe8>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <TIM3_Init+0xe8>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001230:	4823      	ldr	r0, [pc, #140]	; (80012c0 <TIM3_Init+0xe8>)
 8001232:	f009 fdc2 	bl	800adba <HAL_TIM_Base_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <TIM3_Init+0x68>
  {
    Error_Handler();
 800123c:	f000 fc44 	bl	8001ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124a:	4619      	mov	r1, r3
 800124c:	481c      	ldr	r0, [pc, #112]	; (80012c0 <TIM3_Init+0xe8>)
 800124e:	f00a f909 	bl	800b464 <HAL_TIM_ConfigClockSource>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <TIM3_Init+0x84>
  {
    Error_Handler();
 8001258:	f000 fc36 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800125c:	4818      	ldr	r0, [pc, #96]	; (80012c0 <TIM3_Init+0xe8>)
 800125e:	f009 fe7b 	bl	800af58 <HAL_TIM_PWM_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <TIM3_Init+0x94>
  {
    Error_Handler();
 8001268:	f000 fc2e 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	4811      	ldr	r0, [pc, #68]	; (80012c0 <TIM3_Init+0xe8>)
 800127c:	f00a fd6c 	bl	800bd58 <HAL_TIMEx_MasterConfigSynchronization>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <TIM3_Init+0xb2>
  {
    Error_Handler();
 8001286:	f000 fc1f 	bl	8001ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800128a:	2360      	movs	r3, #96	; 0x60
 800128c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800129a:	463b      	mov	r3, r7
 800129c:	2200      	movs	r2, #0
 800129e:	4619      	mov	r1, r3
 80012a0:	4807      	ldr	r0, [pc, #28]	; (80012c0 <TIM3_Init+0xe8>)
 80012a2:	f009 ffcf 	bl	800b244 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <TIM3_Init+0xd8>
  {
    Error_Handler();
 80012ac:	f000 fc0c 	bl	8001ac8 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <TIM3_Init+0xe8>)
 80012b2:	f001 f8af 	bl	8002414 <HAL_TIM_MspPostInit>

}
 80012b6:	bf00      	nop
 80012b8:	3738      	adds	r7, #56	; 0x38
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200094b0 	.word	0x200094b0
 80012c4:	40000400 	.word	0x40000400

080012c8 <TIM5_Init>:

// Timer 5 Peripheral Initialization
void TIM5_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08e      	sub	sp, #56	; 0x38
 80012cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 80012fa:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <TIM5_Init+0xe8>)
 80012fc:	4a2d      	ldr	r2, [pc, #180]	; (80013b4 <TIM5_Init+0xec>)
 80012fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001300:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <TIM5_Init+0xe8>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001306:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <TIM5_Init+0xe8>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800130c:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <TIM5_Init+0xe8>)
 800130e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001312:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <TIM5_Init+0xe8>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131a:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <TIM5_Init+0xe8>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001320:	4823      	ldr	r0, [pc, #140]	; (80013b0 <TIM5_Init+0xe8>)
 8001322:	f009 fd4a 	bl	800adba <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <TIM5_Init+0x68>
  {
    Error_Handler();
 800132c:	f000 fbcc 	bl	8001ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133a:	4619      	mov	r1, r3
 800133c:	481c      	ldr	r0, [pc, #112]	; (80013b0 <TIM5_Init+0xe8>)
 800133e:	f00a f891 	bl	800b464 <HAL_TIM_ConfigClockSource>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <TIM5_Init+0x84>
  {
    Error_Handler();
 8001348:	f000 fbbe 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800134c:	4818      	ldr	r0, [pc, #96]	; (80013b0 <TIM5_Init+0xe8>)
 800134e:	f009 fe03 	bl	800af58 <HAL_TIM_PWM_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <TIM5_Init+0x94>
  {
    Error_Handler();
 8001358:	f000 fbb6 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4811      	ldr	r0, [pc, #68]	; (80013b0 <TIM5_Init+0xe8>)
 800136c:	f00a fcf4 	bl	800bd58 <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <TIM5_Init+0xb2>
  {
    Error_Handler();
 8001376:	f000 fba7 	bl	8001ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137a:	2360      	movs	r3, #96	; 0x60
 800137c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	220c      	movs	r2, #12
 800138e:	4619      	mov	r1, r3
 8001390:	4807      	ldr	r0, [pc, #28]	; (80013b0 <TIM5_Init+0xe8>)
 8001392:	f009 ff57 	bl	800b244 <HAL_TIM_PWM_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <TIM5_Init+0xd8>
  {
    Error_Handler();
 800139c:	f000 fb94 	bl	8001ac8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 80013a0:	4803      	ldr	r0, [pc, #12]	; (80013b0 <TIM5_Init+0xe8>)
 80013a2:	f001 f837 	bl	8002414 <HAL_TIM_MspPostInit>
}
 80013a6:	bf00      	nop
 80013a8:	3738      	adds	r7, #56	; 0x38
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20009464 	.word	0x20009464
 80013b4:	40000c00 	.word	0x40000c00

080013b8 <TIM8_Init>:

// Timer 8 Peripheral Initialization
void TIM8_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]

  htim8.Instance = TIM8;
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <TIM8_Init+0xa0>)
 80013d8:	4a20      	ldr	r2, [pc, #128]	; (800145c <TIM8_Init+0xa4>)
 80013da:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <TIM8_Init+0xa0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <TIM8_Init+0xa0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <TIM8_Init+0xa0>)
 80013ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <TIM8_Init+0xa0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <TIM8_Init+0xa0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <TIM8_Init+0xa0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001402:	4815      	ldr	r0, [pc, #84]	; (8001458 <TIM8_Init+0xa0>)
 8001404:	f009 fcd9 	bl	800adba <HAL_TIM_Base_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <TIM8_Init+0x5a>
  {
    Error_Handler();
 800140e:	f000 fb5b 	bl	8001ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001416:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4619      	mov	r1, r3
 800141e:	480e      	ldr	r0, [pc, #56]	; (8001458 <TIM8_Init+0xa0>)
 8001420:	f00a f820 	bl	800b464 <HAL_TIM_ConfigClockSource>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <TIM8_Init+0x76>
  {
    Error_Handler();
 800142a:	f000 fb4d 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	4619      	mov	r1, r3
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <TIM8_Init+0xa0>)
 8001440:	f00a fc8a 	bl	800bd58 <HAL_TIMEx_MasterConfigSynchronization>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <TIM8_Init+0x96>
  {
    Error_Handler();
 800144a:	f000 fb3d 	bl	8001ac8 <Error_Handler>
  }
}
 800144e:	bf00      	nop
 8001450:	3720      	adds	r7, #32
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20009244 	.word	0x20009244
 800145c:	40010400 	.word	0x40010400

08001460 <TIM12_Init>:

// Timer 12 Peripheral Initialization
void TIM12_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
 8001474:	615a      	str	r2, [r3, #20]
 8001476:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <TIM12_Init+0x84>)
 800147a:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <TIM12_Init+0x88>)
 800147c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <TIM12_Init+0x84>)
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <TIM12_Init+0x84>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <TIM12_Init+0x84>)
 800148c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001490:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <TIM12_Init+0x84>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <TIM12_Init+0x84>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800149e:	4811      	ldr	r0, [pc, #68]	; (80014e4 <TIM12_Init+0x84>)
 80014a0:	f009 fd5a 	bl	800af58 <HAL_TIM_PWM_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <TIM12_Init+0x4e>
  {
    Error_Handler();
 80014aa:	f000 fb0d 	bl	8001ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ae:	2360      	movs	r3, #96	; 0x60
 80014b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2200      	movs	r2, #0
 80014c2:	4619      	mov	r1, r3
 80014c4:	4807      	ldr	r0, [pc, #28]	; (80014e4 <TIM12_Init+0x84>)
 80014c6:	f009 febd 	bl	800b244 <HAL_TIM_PWM_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <TIM12_Init+0x74>
  {
    Error_Handler();
 80014d0:	f000 fafa 	bl	8001ac8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <TIM12_Init+0x84>)
 80014d6:	f000 ff9d 	bl	8002414 <HAL_TIM_MspPostInit>

}
 80014da:	bf00      	nop
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000983c 	.word	0x2000983c
 80014e8:	40001800 	.word	0x40001800

080014ec <USART1_UART_Init>:

// USART1 Peripheral Initialization
void USART1_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <USART1_UART_Init+0x58>)
 80014f2:	4a15      	ldr	r2, [pc, #84]	; (8001548 <USART1_UART_Init+0x5c>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <USART1_UART_Init+0x58>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <USART1_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <USART1_UART_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <USART1_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <USART1_UART_Init+0x58>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <USART1_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <USART1_UART_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <USART1_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <USART1_UART_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <USART1_UART_Init+0x58>)
 8001530:	f00a fd3c 	bl	800bfac <HAL_UART_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <USART1_UART_Init+0x52>
  {
    Error_Handler();
 800153a:	f000 fac5 	bl	8001ac8 <Error_Handler>
  }
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	2000963c 	.word	0x2000963c
 8001548:	40011000 	.word	0x40011000

0800154c <USART6_UART_Init>:

// USART6 Peripheral Initialization
void USART6_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  huart6.Instance = USART6;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <USART6_UART_Init+0x58>)
 8001552:	4a15      	ldr	r2, [pc, #84]	; (80015a8 <USART6_UART_Init+0x5c>)
 8001554:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <USART6_UART_Init+0x58>)
 8001558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800155c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <USART6_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <USART6_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <USART6_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <USART6_UART_Init+0x58>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <USART6_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <USART6_UART_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <USART6_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <USART6_UART_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <USART6_UART_Init+0x58>)
 8001590:	f00a fd0c 	bl	800bfac <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <USART6_UART_Init+0x52>
  {
    Error_Handler();
 800159a:	f000 fa95 	bl	8001ac8 <Error_Handler>
  }
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000972c 	.word	0x2000972c
 80015a8:	40011400 	.word	0x40011400

080015ac <FMC_Init>:

// Initialize Flexible Memory Controller (FMC)
void FMC_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	615a      	str	r2, [r3, #20]
 80015c2:	619a      	str	r2, [r3, #24]

  // SDRAM1 memory initialization sequence
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <FMC_Init+0x98>)
 80015c6:	4a20      	ldr	r2, [pc, #128]	; (8001648 <FMC_Init+0x9c>)
 80015c8:	601a      	str	r2, [r3, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <FMC_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <FMC_Init+0x98>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <FMC_Init+0x98>)
 80015d8:	2204      	movs	r2, #4
 80015da:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <FMC_Init+0x98>)
 80015de:	2210      	movs	r2, #16
 80015e0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <FMC_Init+0x98>)
 80015e4:	2240      	movs	r2, #64	; 0x40
 80015e6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <FMC_Init+0x98>)
 80015ea:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80015ee:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <FMC_Init+0x98>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <FMC_Init+0x98>)
 80015f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015fc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <FMC_Init+0x98>)
 8001600:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <FMC_Init+0x98>)
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	; 0x28

  // SDRAM Timings
  SdramTiming.LoadToActiveDelay = 2;
 800160c:	2302      	movs	r3, #2
 800160e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001610:	2307      	movs	r3, #7
 8001612:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001614:	2304      	movs	r3, #4
 8001616:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001618:	2307      	movs	r3, #7
 800161a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800161c:	2303      	movs	r3, #3
 800161e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001624:	2302      	movs	r3, #2
 8001626:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <FMC_Init+0x98>)
 800162e:	f009 fa3d 	bl	800aaac <HAL_SDRAM_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <FMC_Init+0x90>
  {
    Error_Handler( );
 8001638:	f000 fa46 	bl	8001ac8 <Error_Handler>
  }
}
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20009888 	.word	0x20009888
 8001648:	a0000140 	.word	0xa0000140

0800164c <GPIO_Init>:

// GPIO Initialization
void GPIO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b090      	sub	sp, #64	; 0x40
 8001650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]

  // Enable GPIO Clocks
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001662:	4baf      	ldr	r3, [pc, #700]	; (8001920 <GPIO_Init+0x2d4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4aae      	ldr	r2, [pc, #696]	; (8001920 <GPIO_Init+0x2d4>)
 8001668:	f043 0310 	orr.w	r3, r3, #16
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4bac      	ldr	r3, [pc, #688]	; (8001920 <GPIO_Init+0x2d4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
 8001678:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800167a:	4ba9      	ldr	r3, [pc, #676]	; (8001920 <GPIO_Init+0x2d4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4aa8      	ldr	r2, [pc, #672]	; (8001920 <GPIO_Init+0x2d4>)
 8001680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4ba6      	ldr	r3, [pc, #664]	; (8001920 <GPIO_Init+0x2d4>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	4ba3      	ldr	r3, [pc, #652]	; (8001920 <GPIO_Init+0x2d4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4aa2      	ldr	r2, [pc, #648]	; (8001920 <GPIO_Init+0x2d4>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4ba0      	ldr	r3, [pc, #640]	; (8001920 <GPIO_Init+0x2d4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	623b      	str	r3, [r7, #32]
 80016a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016aa:	4b9d      	ldr	r3, [pc, #628]	; (8001920 <GPIO_Init+0x2d4>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a9c      	ldr	r2, [pc, #624]	; (8001920 <GPIO_Init+0x2d4>)
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b9a      	ldr	r3, [pc, #616]	; (8001920 <GPIO_Init+0x2d4>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	61fb      	str	r3, [r7, #28]
 80016c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c2:	4b97      	ldr	r3, [pc, #604]	; (8001920 <GPIO_Init+0x2d4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a96      	ldr	r2, [pc, #600]	; (8001920 <GPIO_Init+0x2d4>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b94      	ldr	r3, [pc, #592]	; (8001920 <GPIO_Init+0x2d4>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	61bb      	str	r3, [r7, #24]
 80016d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b91      	ldr	r3, [pc, #580]	; (8001920 <GPIO_Init+0x2d4>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a90      	ldr	r2, [pc, #576]	; (8001920 <GPIO_Init+0x2d4>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b8e      	ldr	r3, [pc, #568]	; (8001920 <GPIO_Init+0x2d4>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016f2:	4b8b      	ldr	r3, [pc, #556]	; (8001920 <GPIO_Init+0x2d4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a8a      	ldr	r2, [pc, #552]	; (8001920 <GPIO_Init+0x2d4>)
 80016f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b88      	ldr	r3, [pc, #544]	; (8001920 <GPIO_Init+0x2d4>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800170a:	4b85      	ldr	r3, [pc, #532]	; (8001920 <GPIO_Init+0x2d4>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a84      	ldr	r2, [pc, #528]	; (8001920 <GPIO_Init+0x2d4>)
 8001710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b82      	ldr	r3, [pc, #520]	; (8001920 <GPIO_Init+0x2d4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001722:	4b7f      	ldr	r3, [pc, #508]	; (8001920 <GPIO_Init+0x2d4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a7e      	ldr	r2, [pc, #504]	; (8001920 <GPIO_Init+0x2d4>)
 8001728:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b7c      	ldr	r3, [pc, #496]	; (8001920 <GPIO_Init+0x2d4>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800173a:	4b79      	ldr	r3, [pc, #484]	; (8001920 <GPIO_Init+0x2d4>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a78      	ldr	r2, [pc, #480]	; (8001920 <GPIO_Init+0x2d4>)
 8001740:	f043 0320 	orr.w	r3, r3, #32
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b76      	ldr	r3, [pc, #472]	; (8001920 <GPIO_Init+0x2d4>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0320 	and.w	r3, r3, #32
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001752:	4b73      	ldr	r3, [pc, #460]	; (8001920 <GPIO_Init+0x2d4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a72      	ldr	r2, [pc, #456]	; (8001920 <GPIO_Init+0x2d4>)
 8001758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b70      	ldr	r3, [pc, #448]	; (8001920 <GPIO_Init+0x2d4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]

  // Configure GPIO pin settings
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800176a:	2201      	movs	r2, #1
 800176c:	2120      	movs	r1, #32
 800176e:	486d      	ldr	r0, [pc, #436]	; (8001924 <GPIO_Init+0x2d8>)
 8001770:	f004 fef2 	bl	8006558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	210c      	movs	r1, #12
 8001778:	486b      	ldr	r0, [pc, #428]	; (8001928 <GPIO_Init+0x2dc>)
 800177a:	f004 feed 	bl	8006558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	2108      	movs	r1, #8
 8001782:	486a      	ldr	r0, [pc, #424]	; (800192c <GPIO_Init+0x2e0>)
 8001784:	f004 fee8 	bl	8006558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178e:	4866      	ldr	r0, [pc, #408]	; (8001928 <GPIO_Init+0x2dc>)
 8001790:	f004 fee2 	bl	8006558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179a:	4865      	ldr	r0, [pc, #404]	; (8001930 <GPIO_Init+0x2e4>)
 800179c:	f004 fedc 	bl	8006558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	21c8      	movs	r1, #200	; 0xc8
 80017a4:	4863      	ldr	r0, [pc, #396]	; (8001934 <GPIO_Init+0x2e8>)
 80017a6:	f004 fed7 	bl	8006558 <HAL_GPIO_WritePin>

  // Configure USB OTG and ULPI Pins
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80017aa:	2308      	movs	r3, #8
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ae:	2300      	movs	r3, #0
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ba:	4619      	mov	r1, r3
 80017bc:	485e      	ldr	r0, [pc, #376]	; (8001938 <GPIO_Init+0x2ec>)
 80017be:	f004 fd21 	bl	8006204 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80017c2:	f643 4323 	movw	r3, #15395	; 0x3c23
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017d4:	230a      	movs	r3, #10
 80017d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017dc:	4619      	mov	r1, r3
 80017de:	4857      	ldr	r0, [pc, #348]	; (800193c <GPIO_Init+0x2f0>)
 80017e0:	f004 fd10 	bl	8006204 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80017e4:	2310      	movs	r3, #16
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017f4:	230a      	movs	r3, #10
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fc:	4619      	mov	r1, r3
 80017fe:	484c      	ldr	r0, [pc, #304]	; (8001930 <GPIO_Init+0x2e4>)
 8001800:	f004 fd00 	bl	8006204 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001804:	2310      	movs	r3, #16
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001814:	4619      	mov	r1, r3
 8001816:	4843      	ldr	r0, [pc, #268]	; (8001924 <GPIO_Init+0x2d8>)
 8001818:	f004 fcf4 	bl	8006204 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800181c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001822:	2300      	movs	r3, #0
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182e:	4619      	mov	r1, r3
 8001830:	4843      	ldr	r0, [pc, #268]	; (8001940 <GPIO_Init+0x2f4>)
 8001832:	f004 fce7 	bl	8006204 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001836:	2320      	movs	r3, #32
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184a:	4619      	mov	r1, r3
 800184c:	4835      	ldr	r0, [pc, #212]	; (8001924 <GPIO_Init+0x2d8>)
 800184e:	f004 fcd9 	bl	8006204 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001852:	2328      	movs	r3, #40	; 0x28
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001862:	230a      	movs	r3, #10
 8001864:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186a:	4619      	mov	r1, r3
 800186c:	4835      	ldr	r0, [pc, #212]	; (8001944 <GPIO_Init+0x2f8>)
 800186e:	f004 fcc9 	bl	8006204 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001872:	2305      	movs	r3, #5
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001882:	230a      	movs	r3, #10
 8001884:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800188a:	4619      	mov	r1, r3
 800188c:	482e      	ldr	r0, [pc, #184]	; (8001948 <GPIO_Init+0x2fc>)
 800188e:	f004 fcb9 	bl	8006204 <HAL_GPIO_Init>

  // Configure Audio Int Pin
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001892:	2340      	movs	r3, #64	; 0x40
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <GPIO_Init+0x300>)
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a2:	4619      	mov	r1, r3
 80018a4:	481f      	ldr	r0, [pc, #124]	; (8001924 <GPIO_Init+0x2d8>)
 80018a6:	f004 fcad 	bl	8006204 <HAL_GPIO_Init>

  // Configure Arduino and LCD Disp Pin
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80018aa:	f241 030c 	movw	r3, #4108	; 0x100c
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c0:	4619      	mov	r1, r3
 80018c2:	4819      	ldr	r0, [pc, #100]	; (8001928 <GPIO_Init+0x2dc>)
 80018c4:	f004 fc9e 	bl	8006204 <HAL_GPIO_Init>

  // Configure uSD Card Detect Pin
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80018c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ce:	2300      	movs	r3, #0
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018da:	4619      	mov	r1, r3
 80018dc:	481a      	ldr	r0, [pc, #104]	; (8001948 <GPIO_Init+0x2fc>)
 80018de:	f004 fc91 	bl	8006204 <HAL_GPIO_Init>

  // Configure LCD Backlight Control Pin
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80018e2:	2308      	movs	r3, #8
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f6:	4619      	mov	r1, r3
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <GPIO_Init+0x2e0>)
 80018fa:	f004 fc83 	bl	8006204 <HAL_GPIO_Init>

  // Configure TP3 and TP1 Test Points
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80018fe:	f248 0304 	movw	r3, #32772	; 0x8004
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001904:	2300      	movs	r3, #0
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800190c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001910:	4619      	mov	r1, r3
 8001912:	4807      	ldr	r0, [pc, #28]	; (8001930 <GPIO_Init+0x2e4>)
 8001914:	f004 fc76 	bl	8006204 <HAL_GPIO_Init>

  // Configure DCMI Power Enable pin
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191c:	e018      	b.n	8001950 <GPIO_Init+0x304>
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40020c00 	.word	0x40020c00
 8001928:	40022000 	.word	0x40022000
 800192c:	40022800 	.word	0x40022800
 8001930:	40021c00 	.word	0x40021c00
 8001934:	40021800 	.word	0x40021800
 8001938:	40021000 	.word	0x40021000
 800193c:	40020400 	.word	0x40020400
 8001940:	40022400 	.word	0x40022400
 8001944:	40020000 	.word	0x40020000
 8001948:	40020800 	.word	0x40020800
 800194c:	10120000 	.word	0x10120000
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001962:	4619      	mov	r1, r3
 8001964:	4816      	ldr	r0, [pc, #88]	; (80019c0 <GPIO_Init+0x374>)
 8001966:	f004 fc4d 	bl	8006204 <HAL_GPIO_Init>

  // Configure LCD Int Pin
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800196a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <GPIO_Init+0x378>)
 8001972:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197c:	4619      	mov	r1, r3
 800197e:	4812      	ldr	r0, [pc, #72]	; (80019c8 <GPIO_Init+0x37c>)
 8001980:	f004 fc40 	bl	8006204 <HAL_GPIO_Init>

  // Configure Arduino Pins
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001984:	23c8      	movs	r3, #200	; 0xc8
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001998:	4619      	mov	r1, r3
 800199a:	480c      	ldr	r0, [pc, #48]	; (80019cc <GPIO_Init+0x380>)
 800199c:	f004 fc32 	bl	8006204 <HAL_GPIO_Init>

  // Configure Ethernet RMII pin
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80019a0:	2304      	movs	r3, #4
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a4:	2300      	movs	r3, #0
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b0:	4619      	mov	r1, r3
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <GPIO_Init+0x380>)
 80019b4:	f004 fc26 	bl	8006204 <HAL_GPIO_Init>

}
 80019b8:	bf00      	nop
 80019ba:	3740      	adds	r7, #64	; 0x40
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021c00 	.word	0x40021c00
 80019c4:	10120000 	.word	0x10120000
 80019c8:	40022000 	.word	0x40022000
 80019cc:	40021800 	.word	0x40021800

080019d0 <main>:
    .priority = (osPriority_t) osPriorityBelowNormal,
    .stack_size = 128
  };

int main(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  // Reset of all peripherals, Initializes the Flash interface and the Systick.
  HAL_Init();
 80019d4:	f002 f81a 	bl	8003a0c <HAL_Init>

  // Initialize System Clock and hardware peripherals
  hw_init();
 80019d8:	f7fe fe03 	bl	80005e2 <hw_init>

  // Initialize RTOS Kernel
  osKernelInitialize();
 80019dc:	f00e fd36 	bl	801044c <osKernelInitialize>

  // Definition of Threads
  defaultTaskHandle = osThreadNew(StartThread, NULL, &defaultTask_attributes);
 80019e0:	4a09      	ldr	r2, [pc, #36]	; (8001a08 <main+0x38>)
 80019e2:	2100      	movs	r1, #0
 80019e4:	4809      	ldr	r0, [pc, #36]	; (8001a0c <main+0x3c>)
 80019e6:	f00e fdc3 	bl	8010570 <osThreadNew>
 80019ea:	4602      	mov	r2, r0
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <main+0x40>)
 80019ee:	601a      	str	r2, [r3, #0]
  watchdogTaskHandle = osThreadNew(WatchdogThread, NULL, &watchdogTask_attributes);
 80019f0:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <main+0x44>)
 80019f2:	2100      	movs	r1, #0
 80019f4:	4808      	ldr	r0, [pc, #32]	; (8001a18 <main+0x48>)
 80019f6:	f00e fdbb 	bl	8010570 <osThreadNew>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <main+0x4c>)
 80019fe:	601a      	str	r2, [r3, #0]

  // Start RTOS Kernel
  osKernelStart();
 8001a00:	f00e fd58 	bl	80104b4 <osKernelStart>

  // We should never get here as control is now taken by the scheduler
  for( ;; );
 8001a04:	e7fe      	b.n	8001a04 <main+0x34>
 8001a06:	bf00      	nop
 8001a08:	08025210 	.word	0x08025210
 8001a0c:	08001a21 	.word	0x08001a21
 8001a10:	20009908 	.word	0x20009908
 8001a14:	08025234 	.word	0x08025234
 8001a18:	08001a89 	.word	0x08001a89
 8001a1c:	2000990c 	.word	0x2000990c

08001a20 <StartThread>:

}

// Default Start Thread
void StartThread(void *argument)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
   // Initialize USB host and lwIP stack
   MX_USB_HOST_Init();
 8001a28:	f01e ff54 	bl	80208d4 <MX_USB_HOST_Init>
   MX_LWIP_Init();
 8001a2c:	f00b ff40 	bl	800d8b0 <MX_LWIP_Init>

   // Initialize LCD
   BSP_LCD_Init();
 8001a30:	f001 f8d8 	bl	8002be4 <BSP_LCD_Init>
   BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 8001a34:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f001 f96b 	bl	8002d14 <BSP_LCD_LayerDefaultInit>

   // Set LCD Foreground Layer
   // BSP_LCD_SelectLayer(1);

   // Set LCD Default Font
   BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001a3e:	480c      	ldr	r0, [pc, #48]	; (8001a70 <StartThread+0x50>)
 8001a40:	f001 f9fa 	bl	8002e38 <BSP_LCD_SetFont>

   // Initialize LCD Log module
   LCD_LOG_Init();
 8001a44:	f01f fa3a 	bl	8020ebc <LCD_LOG_Init>

   LCD_LOG_SetHeader((uint8_t *)"Hackerspace Lighting Controller");
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <StartThread+0x54>)
 8001a4a:	f01f fa81 	bl	8020f50 <LCD_LOG_SetHeader>
   LCD_LOG_SetFooter((uint8_t *)"STM32746G-DISCO board");
 8001a4e:	480a      	ldr	r0, [pc, #40]	; (8001a78 <StartThread+0x58>)
 8001a50:	f01f faba 	bl	8020fc8 <LCD_LOG_SetFooter>

   LCD_UsrLog ((char *)"  State: Ethernet Initialization ...\n");
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <StartThread+0x5c>)
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <StartThread+0x60>)
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	480a      	ldr	r0, [pc, #40]	; (8001a84 <StartThread+0x64>)
 8001a5c:	f01f fdd4 	bl	8021608 <puts>


   osThreadTerminate(NULL);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f00e fe2b 	bl	80106bc <osThreadTerminate>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000054 	.word	0x20000054
 8001a74:	080222fc 	.word	0x080222fc
 8001a78:	0802231c 	.word	0x0802231c
 8001a7c:	200146cc 	.word	0x200146cc
 8001a80:	ff000080 	.word	0xff000080
 8001a84:	08022334 	.word	0x08022334

08001a88 <WatchdogThread>:

// Thread to feed the watchdog
void WatchdogThread(void *argument)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
   while (1)
   {
	   HAL_IWDG_Refresh(&hiwdg);
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <WatchdogThread+0x18>)
 8001a92:	f006 fc0a 	bl	80082aa <HAL_IWDG_Refresh>
	   osDelay(3000);
 8001a96:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a9a:	f00e fe4f 	bl	801073c <osDelay>
	   HAL_IWDG_Refresh(&hiwdg);
 8001a9e:	e7f7      	b.n	8001a90 <WatchdogThread+0x8>
 8001aa0:	200093ac 	.word	0x200093ac

08001aa4 <HAL_TIM_PeriodElapsedCallback>:
   }
}

// Timer Callback for Timer 6
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 if (htim->Instance == TIM6) {
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_TIM_PeriodElapsedCallback+0x16>
   HAL_IncTick();
 8001ab6:	f001 ffb7 	bl	8003a28 <HAL_IncTick>
 }
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40001000 	.word	0x40001000

08001ac8 <Error_Handler>:

// Error Handler in case of failure
void Error_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  while (1)
 8001acc:	e7fe      	b.n	8001acc <Error_Handler+0x4>
	...

08001ad0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_MspInit+0x4c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <HAL_MspInit+0x4c>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_MspInit+0x4c>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_MspInit+0x4c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <HAL_MspInit+0x4c>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_MspInit+0x4c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	210f      	movs	r1, #15
 8001b0a:	f06f 0001 	mvn.w	r0, #1
 8001b0e:	f002 fb0d 	bl	800412c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800

08001b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a21      	ldr	r2, [pc, #132]	; (8001bc4 <HAL_ADC_MspInit+0xa4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d13c      	bne.n	8001bbc <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001b42:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <HAL_ADC_MspInit+0xa8>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a20      	ldr	r2, [pc, #128]	; (8001bc8 <HAL_ADC_MspInit+0xa8>)
 8001b48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <HAL_ADC_MspInit+0xa8>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_ADC_MspInit+0xa8>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a1a      	ldr	r2, [pc, #104]	; (8001bc8 <HAL_ADC_MspInit+0xa8>)
 8001b60:	f043 0320 	orr.w	r3, r3, #32
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_ADC_MspInit+0xa8>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0320 	and.w	r3, r3, #32
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_ADC_MspInit+0xa8>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <HAL_ADC_MspInit+0xa8>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_ADC_MspInit+0xa8>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001b8a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001b8e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b90:	2303      	movs	r3, #3
 8001b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480b      	ldr	r0, [pc, #44]	; (8001bcc <HAL_ADC_MspInit+0xac>)
 8001ba0:	f004 fb30 	bl	8006204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <HAL_ADC_MspInit+0xb0>)
 8001bb8:	f004 fb24 	bl	8006204 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001bbc:	bf00      	nop
 8001bbe:	3728      	adds	r7, #40	; 0x28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40012200 	.word	0x40012200
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40021400 	.word	0x40021400
 8001bd0:	40020000 	.word	0x40020000

08001bd4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <HAL_CRC_MspInit+0x38>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10b      	bne.n	8001bfe <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_CRC_MspInit+0x3c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_CRC_MspInit+0x3c>)
 8001bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <HAL_CRC_MspInit+0x3c>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40023000 	.word	0x40023000
 8001c10:	40023800 	.word	0x40023800

08001c14 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08e      	sub	sp, #56	; 0x38
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a50      	ldr	r2, [pc, #320]	; (8001d74 <HAL_DCMI_MspInit+0x160>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	f040 809a 	bne.w	8001d6c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001c38:	4b4f      	ldr	r3, [pc, #316]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3c:	4a4e      	ldr	r2, [pc, #312]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6353      	str	r3, [r2, #52]	; 0x34
 8001c44:	4b4c      	ldr	r3, [pc, #304]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	623b      	str	r3, [r7, #32]
 8001c4e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c50:	4b49      	ldr	r3, [pc, #292]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	4a48      	ldr	r2, [pc, #288]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001c56:	f043 0310 	orr.w	r3, r3, #16
 8001c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5c:	4b46      	ldr	r3, [pc, #280]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c68:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	4a42      	ldr	r2, [pc, #264]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001c6e:	f043 0308 	orr.w	r3, r3, #8
 8001c72:	6313      	str	r3, [r2, #48]	; 0x30
 8001c74:	4b40      	ldr	r3, [pc, #256]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	61bb      	str	r3, [r7, #24]
 8001c7e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c80:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	4a3c      	ldr	r2, [pc, #240]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8c:	4b3a      	ldr	r3, [pc, #232]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c98:	4b37      	ldr	r3, [pc, #220]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	4a36      	ldr	r2, [pc, #216]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca4:	4b34      	ldr	r3, [pc, #208]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb0:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	4a30      	ldr	r2, [pc, #192]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbc:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <HAL_DCMI_MspInit+0x164>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001cc8:	2360      	movs	r3, #96	; 0x60
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cd8:	230d      	movs	r3, #13
 8001cda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4826      	ldr	r0, [pc, #152]	; (8001d7c <HAL_DCMI_MspInit+0x168>)
 8001ce4:	f004 fa8e 	bl	8006204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001ce8:	2308      	movs	r3, #8
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cf8:	230d      	movs	r3, #13
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d00:	4619      	mov	r1, r3
 8001d02:	481f      	ldr	r0, [pc, #124]	; (8001d80 <HAL_DCMI_MspInit+0x16c>)
 8001d04:	f004 fa7e 	bl	8006204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d1a:	230d      	movs	r3, #13
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d22:	4619      	mov	r1, r3
 8001d24:	4817      	ldr	r0, [pc, #92]	; (8001d84 <HAL_DCMI_MspInit+0x170>)
 8001d26:	f004 fa6d 	bl	8006204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001d2a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d3c:	230d      	movs	r3, #13
 8001d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d44:	4619      	mov	r1, r3
 8001d46:	4810      	ldr	r0, [pc, #64]	; (8001d88 <HAL_DCMI_MspInit+0x174>)
 8001d48:	f004 fa5c 	bl	8006204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001d4c:	2350      	movs	r3, #80	; 0x50
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d5c:	230d      	movs	r3, #13
 8001d5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d64:	4619      	mov	r1, r3
 8001d66:	4809      	ldr	r0, [pc, #36]	; (8001d8c <HAL_DCMI_MspInit+0x178>)
 8001d68:	f004 fa4c 	bl	8006204 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001d6c:	bf00      	nop
 8001d6e:	3738      	adds	r7, #56	; 0x38
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	50050000 	.word	0x50050000
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40020c00 	.word	0x40020c00
 8001d84:	40021800 	.word	0x40021800
 8001d88:	40021c00 	.word	0x40021c00
 8001d8c:	40020000 	.word	0x40020000

08001d90 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <HAL_DMA2D_MspInit+0x44>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d113      	bne.n	8001dca <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_DMA2D_MspInit+0x48>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <HAL_DMA2D_MspInit+0x48>)
 8001da8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_DMA2D_MspInit+0x48>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2105      	movs	r1, #5
 8001dbe:	205a      	movs	r0, #90	; 0x5a
 8001dc0:	f002 f9b4 	bl	800412c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001dc4:	205a      	movs	r0, #90	; 0x5a
 8001dc6:	f002 f9cd 	bl	8004164 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	4002b000 	.word	0x4002b000
 8001dd8:	40023800 	.word	0x40023800

08001ddc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	; 0x30
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a2f      	ldr	r2, [pc, #188]	; (8001eb8 <HAL_I2C_MspInit+0xdc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d129      	bne.n	8001e52 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <HAL_I2C_MspInit+0xe0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a2e      	ldr	r2, [pc, #184]	; (8001ebc <HAL_I2C_MspInit+0xe0>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <HAL_I2C_MspInit+0xe0>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001e16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e1c:	2312      	movs	r3, #18
 8001e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e20:	2301      	movs	r3, #1
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	4619      	mov	r1, r3
 8001e32:	4823      	ldr	r0, [pc, #140]	; (8001ec0 <HAL_I2C_MspInit+0xe4>)
 8001e34:	f004 f9e6 	bl	8006204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e38:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_I2C_MspInit+0xe0>)
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	4a1f      	ldr	r2, [pc, #124]	; (8001ebc <HAL_I2C_MspInit+0xe0>)
 8001e3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e42:	6413      	str	r3, [r2, #64]	; 0x40
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_I2C_MspInit+0xe0>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e50:	e02d      	b.n	8001eae <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <HAL_I2C_MspInit+0xe8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d128      	bne.n	8001eae <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <HAL_I2C_MspInit+0xe0>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	4a16      	ldr	r2, [pc, #88]	; (8001ebc <HAL_I2C_MspInit+0xe0>)
 8001e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e66:	6313      	str	r3, [r2, #48]	; 0x30
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <HAL_I2C_MspInit+0xe0>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001e74:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e7a:	2312      	movs	r3, #18
 8001e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e82:	2303      	movs	r3, #3
 8001e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e86:	2304      	movs	r3, #4
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <HAL_I2C_MspInit+0xec>)
 8001e92:	f004 f9b7 	bl	8006204 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_I2C_MspInit+0xe0>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <HAL_I2C_MspInit+0xe0>)
 8001e9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_I2C_MspInit+0xe0>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
}
 8001eae:	bf00      	nop
 8001eb0:	3730      	adds	r7, #48	; 0x30
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40005400 	.word	0x40005400
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020400 	.word	0x40020400
 8001ec4:	40005c00 	.word	0x40005c00
 8001ec8:	40021c00 	.word	0x40021c00

08001ecc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08e      	sub	sp, #56	; 0x38
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a55      	ldr	r2, [pc, #340]	; (8002040 <HAL_LTDC_MspInit+0x174>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	f040 80a3 	bne.w	8002036 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001ef0:	4b54      	ldr	r3, [pc, #336]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef4:	4a53      	ldr	r2, [pc, #332]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001ef6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001efa:	6453      	str	r3, [r2, #68]	; 0x44
 8001efc:	4b51      	ldr	r3, [pc, #324]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f04:	623b      	str	r3, [r7, #32]
 8001f06:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f08:	4b4e      	ldr	r3, [pc, #312]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	4a4d      	ldr	r2, [pc, #308]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001f0e:	f043 0310 	orr.w	r3, r3, #16
 8001f12:	6313      	str	r3, [r2, #48]	; 0x30
 8001f14:	4b4b      	ldr	r3, [pc, #300]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001f20:	4b48      	ldr	r3, [pc, #288]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	4a47      	ldr	r2, [pc, #284]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2c:	4b45      	ldr	r3, [pc, #276]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001f38:	4b42      	ldr	r3, [pc, #264]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	4a41      	ldr	r2, [pc, #260]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f42:	6313      	str	r3, [r2, #48]	; 0x30
 8001f44:	4b3f      	ldr	r3, [pc, #252]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f50:	4b3c      	ldr	r3, [pc, #240]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	4a3b      	ldr	r2, [pc, #236]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5c:	4b39      	ldr	r3, [pc, #228]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f68:	4b36      	ldr	r3, [pc, #216]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	4a35      	ldr	r2, [pc, #212]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f72:	6313      	str	r3, [r2, #48]	; 0x30
 8001f74:	4b33      	ldr	r3, [pc, #204]	; (8002044 <HAL_LTDC_MspInit+0x178>)
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001f80:	2310      	movs	r3, #16
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f90:	230e      	movs	r3, #14
 8001f92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f98:	4619      	mov	r1, r3
 8001f9a:	482b      	ldr	r0, [pc, #172]	; (8002048 <HAL_LTDC_MspInit+0x17c>)
 8001f9c:	f004 f932 	bl	8006204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001fa0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fb2:	230e      	movs	r3, #14
 8001fb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4823      	ldr	r0, [pc, #140]	; (800204c <HAL_LTDC_MspInit+0x180>)
 8001fbe:	f004 f921 	bl	8006204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001fc2:	23f7      	movs	r3, #247	; 0xf7
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fd2:	230e      	movs	r3, #14
 8001fd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fda:	4619      	mov	r1, r3
 8001fdc:	481c      	ldr	r0, [pc, #112]	; (8002050 <HAL_LTDC_MspInit+0x184>)
 8001fde:	f004 f911 	bl	8006204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ff4:	2309      	movs	r3, #9
 8001ff6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4815      	ldr	r0, [pc, #84]	; (8002054 <HAL_LTDC_MspInit+0x188>)
 8002000:	f004 f900 	bl	8006204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002004:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2300      	movs	r3, #0
 8002014:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002016:	230e      	movs	r3, #14
 8002018:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800201a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201e:	4619      	mov	r1, r3
 8002020:	480d      	ldr	r0, [pc, #52]	; (8002058 <HAL_LTDC_MspInit+0x18c>)
 8002022:	f004 f8ef 	bl	8006204 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2105      	movs	r1, #5
 800202a:	2058      	movs	r0, #88	; 0x58
 800202c:	f002 f87e 	bl	800412c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002030:	2058      	movs	r0, #88	; 0x58
 8002032:	f002 f897 	bl	8004164 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002036:	bf00      	nop
 8002038:	3738      	adds	r7, #56	; 0x38
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40016800 	.word	0x40016800
 8002044:	40023800 	.word	0x40023800
 8002048:	40021000 	.word	0x40021000
 800204c:	40022400 	.word	0x40022400
 8002050:	40022800 	.word	0x40022800
 8002054:	40021800 	.word	0x40021800
 8002058:	40022000 	.word	0x40022000

0800205c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	; 0x30
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a3b      	ldr	r2, [pc, #236]	; (8002168 <HAL_QSPI_MspInit+0x10c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d170      	bne.n	8002160 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800207e:	4b3b      	ldr	r3, [pc, #236]	; (800216c <HAL_QSPI_MspInit+0x110>)
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	4a3a      	ldr	r2, [pc, #232]	; (800216c <HAL_QSPI_MspInit+0x110>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	6393      	str	r3, [r2, #56]	; 0x38
 800208a:	4b38      	ldr	r3, [pc, #224]	; (800216c <HAL_QSPI_MspInit+0x110>)
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002096:	4b35      	ldr	r3, [pc, #212]	; (800216c <HAL_QSPI_MspInit+0x110>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a34      	ldr	r2, [pc, #208]	; (800216c <HAL_QSPI_MspInit+0x110>)
 800209c:	f043 0310 	orr.w	r3, r3, #16
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b32      	ldr	r3, [pc, #200]	; (800216c <HAL_QSPI_MspInit+0x110>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	4b2f      	ldr	r3, [pc, #188]	; (800216c <HAL_QSPI_MspInit+0x110>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a2e      	ldr	r2, [pc, #184]	; (800216c <HAL_QSPI_MspInit+0x110>)
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b2c      	ldr	r3, [pc, #176]	; (800216c <HAL_QSPI_MspInit+0x110>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c6:	4b29      	ldr	r3, [pc, #164]	; (800216c <HAL_QSPI_MspInit+0x110>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a28      	ldr	r2, [pc, #160]	; (800216c <HAL_QSPI_MspInit+0x110>)
 80020cc:	f043 0308 	orr.w	r3, r3, #8
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b26      	ldr	r3, [pc, #152]	; (800216c <HAL_QSPI_MspInit+0x110>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80020de:	2304      	movs	r3, #4
 80020e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ea:	2303      	movs	r3, #3
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020ee:	2309      	movs	r3, #9
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	4619      	mov	r1, r3
 80020f8:	481d      	ldr	r0, [pc, #116]	; (8002170 <HAL_QSPI_MspInit+0x114>)
 80020fa:	f004 f883 	bl	8006204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80020fe:	2340      	movs	r3, #64	; 0x40
 8002100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210a:	2303      	movs	r3, #3
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800210e:	230a      	movs	r3, #10
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002112:	f107 031c 	add.w	r3, r7, #28
 8002116:	4619      	mov	r1, r3
 8002118:	4816      	ldr	r0, [pc, #88]	; (8002174 <HAL_QSPI_MspInit+0x118>)
 800211a:	f004 f873 	bl	8006204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800211e:	2304      	movs	r3, #4
 8002120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212a:	2303      	movs	r3, #3
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800212e:	2309      	movs	r3, #9
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002132:	f107 031c 	add.w	r3, r7, #28
 8002136:	4619      	mov	r1, r3
 8002138:	480e      	ldr	r0, [pc, #56]	; (8002174 <HAL_QSPI_MspInit+0x118>)
 800213a:	f004 f863 	bl	8006204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800213e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214c:	2303      	movs	r3, #3
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002150:	2309      	movs	r3, #9
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	4619      	mov	r1, r3
 800215a:	4807      	ldr	r0, [pc, #28]	; (8002178 <HAL_QSPI_MspInit+0x11c>)
 800215c:	f004 f852 	bl	8006204 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002160:	bf00      	nop
 8002162:	3730      	adds	r7, #48	; 0x30
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	a0001000 	.word	0xa0001000
 800216c:	40023800 	.word	0x40023800
 8002170:	40021000 	.word	0x40021000
 8002174:	40020400 	.word	0x40020400
 8002178:	40020c00 	.word	0x40020c00

0800217c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a07      	ldr	r2, [pc, #28]	; (80021a8 <HAL_RTC_MspInit+0x2c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d105      	bne.n	800219a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800218e:	4b07      	ldr	r3, [pc, #28]	; (80021ac <HAL_RTC_MspInit+0x30>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	4a06      	ldr	r2, [pc, #24]	; (80021ac <HAL_RTC_MspInit+0x30>)
 8002194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40002800 	.word	0x40002800
 80021ac:	40023800 	.word	0x40023800

080021b0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80021d0:	d127      	bne.n	8002222 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80021d2:	4b16      	ldr	r3, [pc, #88]	; (800222c <HAL_SPDIFRX_MspInit+0x7c>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	4a15      	ldr	r2, [pc, #84]	; (800222c <HAL_SPDIFRX_MspInit+0x7c>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021dc:	6413      	str	r3, [r2, #64]	; 0x40
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <HAL_SPDIFRX_MspInit+0x7c>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_SPDIFRX_MspInit+0x7c>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a0f      	ldr	r2, [pc, #60]	; (800222c <HAL_SPDIFRX_MspInit+0x7c>)
 80021f0:	f043 0308 	orr.w	r3, r3, #8
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b0d      	ldr	r3, [pc, #52]	; (800222c <HAL_SPDIFRX_MspInit+0x7c>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002212:	2308      	movs	r3, #8
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4619      	mov	r1, r3
 800221c:	4804      	ldr	r0, [pc, #16]	; (8002230 <HAL_SPDIFRX_MspInit+0x80>)
 800221e:	f003 fff1 	bl	8006204 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002222:	bf00      	nop
 8002224:	3728      	adds	r7, #40	; 0x28
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800
 8002230:	40020c00 	.word	0x40020c00

08002234 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a25      	ldr	r2, [pc, #148]	; (80022e8 <HAL_SPI_MspInit+0xb4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d144      	bne.n	80022e0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002256:	4b25      	ldr	r3, [pc, #148]	; (80022ec <HAL_SPI_MspInit+0xb8>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a24      	ldr	r2, [pc, #144]	; (80022ec <HAL_SPI_MspInit+0xb8>)
 800225c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b22      	ldr	r3, [pc, #136]	; (80022ec <HAL_SPI_MspInit+0xb8>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800226e:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <HAL_SPI_MspInit+0xb8>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a1e      	ldr	r2, [pc, #120]	; (80022ec <HAL_SPI_MspInit+0xb8>)
 8002274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <HAL_SPI_MspInit+0xb8>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002286:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_SPI_MspInit+0xb8>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a18      	ldr	r2, [pc, #96]	; (80022ec <HAL_SPI_MspInit+0xb8>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_SPI_MspInit+0xb8>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800229e:	2302      	movs	r3, #2
 80022a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022ae:	2305      	movs	r3, #5
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4619      	mov	r1, r3
 80022b8:	480d      	ldr	r0, [pc, #52]	; (80022f0 <HAL_SPI_MspInit+0xbc>)
 80022ba:	f003 ffa3 	bl	8006204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80022be:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80022c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022d0:	2305      	movs	r3, #5
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	4619      	mov	r1, r3
 80022da:	4806      	ldr	r0, [pc, #24]	; (80022f4 <HAL_SPI_MspInit+0xc0>)
 80022dc:	f003 ff92 	bl	8006204 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022e0:	bf00      	nop
 80022e2:	3728      	adds	r7, #40	; 0x28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40003800 	.word	0x40003800
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40022000 	.word	0x40022000
 80022f4:	40020400 	.word	0x40020400

080022f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a2e      	ldr	r2, [pc, #184]	; (80023c0 <HAL_TIM_Base_MspInit+0xc8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d10c      	bne.n	8002324 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800230a:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	4a2d      	ldr	r2, [pc, #180]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6453      	str	r3, [r2, #68]	; 0x44
 8002316:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002322:	e046      	b.n	80023b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232c:	d10c      	bne.n	8002348 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800232e:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a24      	ldr	r2, [pc, #144]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	69bb      	ldr	r3, [r7, #24]
}
 8002346:	e034      	b.n	80023b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a1e      	ldr	r2, [pc, #120]	; (80023c8 <HAL_TIM_Base_MspInit+0xd0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d10c      	bne.n	800236c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002352:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	4a1b      	ldr	r2, [pc, #108]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	6413      	str	r3, [r2, #64]	; 0x40
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697b      	ldr	r3, [r7, #20]
}
 800236a:	e022      	b.n	80023b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a16      	ldr	r2, [pc, #88]	; (80023cc <HAL_TIM_Base_MspInit+0xd4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10c      	bne.n	8002390 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002376:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 800237c:	f043 0308 	orr.w	r3, r3, #8
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]
}
 800238e:	e010      	b.n	80023b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0e      	ldr	r2, [pc, #56]	; (80023d0 <HAL_TIM_Base_MspInit+0xd8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10b      	bne.n	80023b2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	6453      	str	r3, [r2, #68]	; 0x44
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <HAL_TIM_Base_MspInit+0xcc>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
}
 80023b2:	bf00      	nop
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40010000 	.word	0x40010000
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40000c00 	.word	0x40000c00
 80023d0:	40010400 	.word	0x40010400

080023d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	; (800240c <HAL_TIM_PWM_MspInit+0x38>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d10b      	bne.n	80023fe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_TIM_PWM_MspInit+0x3c>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a09      	ldr	r2, [pc, #36]	; (8002410 <HAL_TIM_PWM_MspInit+0x3c>)
 80023ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <HAL_TIM_PWM_MspInit+0x3c>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40001800 	.word	0x40001800
 8002410:	40023800 	.word	0x40023800

08002414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08c      	sub	sp, #48	; 0x30
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a56      	ldr	r2, [pc, #344]	; (800258c <HAL_TIM_MspPostInit+0x178>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d11d      	bne.n	8002472 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	4b56      	ldr	r3, [pc, #344]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a55      	ldr	r2, [pc, #340]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b53      	ldr	r3, [pc, #332]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800244e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002460:	2301      	movs	r3, #1
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002464:	f107 031c 	add.w	r3, r7, #28
 8002468:	4619      	mov	r1, r3
 800246a:	484a      	ldr	r0, [pc, #296]	; (8002594 <HAL_TIM_MspPostInit+0x180>)
 800246c:	f003 feca 	bl	8006204 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002470:	e087      	b.n	8002582 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247a:	d11d      	bne.n	80024b8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247c:	4b44      	ldr	r3, [pc, #272]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	4a43      	ldr	r2, [pc, #268]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6313      	str	r3, [r2, #48]	; 0x30
 8002488:	4b41      	ldr	r3, [pc, #260]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002494:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024a6:	2301      	movs	r3, #1
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80024aa:	f107 031c 	add.w	r3, r7, #28
 80024ae:	4619      	mov	r1, r3
 80024b0:	4838      	ldr	r0, [pc, #224]	; (8002594 <HAL_TIM_MspPostInit+0x180>)
 80024b2:	f003 fea7 	bl	8006204 <HAL_GPIO_Init>
}
 80024b6:	e064      	b.n	8002582 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a36      	ldr	r2, [pc, #216]	; (8002598 <HAL_TIM_MspPostInit+0x184>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d11c      	bne.n	80024fc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c2:	4b33      	ldr	r3, [pc, #204]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a32      	ldr	r2, [pc, #200]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b30      	ldr	r3, [pc, #192]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80024da:	2310      	movs	r3, #16
 80024dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024ea:	2302      	movs	r3, #2
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80024ee:	f107 031c 	add.w	r3, r7, #28
 80024f2:	4619      	mov	r1, r3
 80024f4:	4829      	ldr	r0, [pc, #164]	; (800259c <HAL_TIM_MspPostInit+0x188>)
 80024f6:	f003 fe85 	bl	8006204 <HAL_GPIO_Init>
}
 80024fa:	e042      	b.n	8002582 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a27      	ldr	r2, [pc, #156]	; (80025a0 <HAL_TIM_MspPostInit+0x18c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d11c      	bne.n	8002540 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002506:	4b22      	ldr	r3, [pc, #136]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a21      	ldr	r2, [pc, #132]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 800250c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b1f      	ldr	r3, [pc, #124]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800251e:	2301      	movs	r3, #1
 8002520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800252e:	2302      	movs	r3, #2
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002532:	f107 031c 	add.w	r3, r7, #28
 8002536:	4619      	mov	r1, r3
 8002538:	481a      	ldr	r0, [pc, #104]	; (80025a4 <HAL_TIM_MspPostInit+0x190>)
 800253a:	f003 fe63 	bl	8006204 <HAL_GPIO_Init>
}
 800253e:	e020      	b.n	8002582 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a18      	ldr	r2, [pc, #96]	; (80025a8 <HAL_TIM_MspPostInit+0x194>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d11b      	bne.n	8002582 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800254a:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a10      	ldr	r2, [pc, #64]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 8002550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_TIM_MspPostInit+0x17c>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002562:	2340      	movs	r3, #64	; 0x40
 8002564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002566:	2302      	movs	r3, #2
 8002568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	2300      	movs	r3, #0
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002572:	2309      	movs	r3, #9
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002576:	f107 031c 	add.w	r3, r7, #28
 800257a:	4619      	mov	r1, r3
 800257c:	480b      	ldr	r0, [pc, #44]	; (80025ac <HAL_TIM_MspPostInit+0x198>)
 800257e:	f003 fe41 	bl	8006204 <HAL_GPIO_Init>
}
 8002582:	bf00      	nop
 8002584:	3730      	adds	r7, #48	; 0x30
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40010000 	.word	0x40010000
 8002590:	40023800 	.word	0x40023800
 8002594:	40020000 	.word	0x40020000
 8002598:	40000400 	.word	0x40000400
 800259c:	40020400 	.word	0x40020400
 80025a0:	40000c00 	.word	0x40000c00
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40001800 	.word	0x40001800
 80025ac:	40021c00 	.word	0x40021c00

080025b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08c      	sub	sp, #48	; 0x30
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 031c 	add.w	r3, r7, #28
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a3c      	ldr	r2, [pc, #240]	; (80026c0 <HAL_UART_MspInit+0x110>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d145      	bne.n	800265e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025d2:	4b3c      	ldr	r3, [pc, #240]	; (80026c4 <HAL_UART_MspInit+0x114>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	4a3b      	ldr	r2, [pc, #236]	; (80026c4 <HAL_UART_MspInit+0x114>)
 80025d8:	f043 0310 	orr.w	r3, r3, #16
 80025dc:	6453      	str	r3, [r2, #68]	; 0x44
 80025de:	4b39      	ldr	r3, [pc, #228]	; (80026c4 <HAL_UART_MspInit+0x114>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ea:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <HAL_UART_MspInit+0x114>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a35      	ldr	r2, [pc, #212]	; (80026c4 <HAL_UART_MspInit+0x114>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <HAL_UART_MspInit+0x114>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <HAL_UART_MspInit+0x114>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a2f      	ldr	r2, [pc, #188]	; (80026c4 <HAL_UART_MspInit+0x114>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <HAL_UART_MspInit+0x114>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800262a:	2307      	movs	r3, #7
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	4619      	mov	r1, r3
 8002634:	4824      	ldr	r0, [pc, #144]	; (80026c8 <HAL_UART_MspInit+0x118>)
 8002636:	f003 fde5 	bl	8006204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800263a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800263e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002640:	2302      	movs	r3, #2
 8002642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002648:	2300      	movs	r3, #0
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800264c:	2307      	movs	r3, #7
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002650:	f107 031c 	add.w	r3, r7, #28
 8002654:	4619      	mov	r1, r3
 8002656:	481d      	ldr	r0, [pc, #116]	; (80026cc <HAL_UART_MspInit+0x11c>)
 8002658:	f003 fdd4 	bl	8006204 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800265c:	e02c      	b.n	80026b8 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HAL_UART_MspInit+0x120>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d127      	bne.n	80026b8 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002668:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <HAL_UART_MspInit+0x114>)
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <HAL_UART_MspInit+0x114>)
 800266e:	f043 0320 	orr.w	r3, r3, #32
 8002672:	6453      	str	r3, [r2, #68]	; 0x44
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <HAL_UART_MspInit+0x114>)
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002680:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <HAL_UART_MspInit+0x114>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	4a0f      	ldr	r2, [pc, #60]	; (80026c4 <HAL_UART_MspInit+0x114>)
 8002686:	f043 0304 	orr.w	r3, r3, #4
 800268a:	6313      	str	r3, [r2, #48]	; 0x30
 800268c:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <HAL_UART_MspInit+0x114>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002698:	23c0      	movs	r3, #192	; 0xc0
 800269a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	2302      	movs	r3, #2
 800269e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80026a8:	2308      	movs	r3, #8
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ac:	f107 031c 	add.w	r3, r7, #28
 80026b0:	4619      	mov	r1, r3
 80026b2:	4808      	ldr	r0, [pc, #32]	; (80026d4 <HAL_UART_MspInit+0x124>)
 80026b4:	f003 fda6 	bl	8006204 <HAL_GPIO_Init>
}
 80026b8:	bf00      	nop
 80026ba:	3730      	adds	r7, #48	; 0x30
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40011000 	.word	0x40011000
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40020000 	.word	0x40020000
 80026d0:	40011400 	.word	0x40011400
 80026d4:	40020800 	.word	0x40020800

080026d8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80026ec:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <HAL_FMC_MspInit+0x100>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d16d      	bne.n	80027d0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80026f4:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <HAL_FMC_MspInit+0x100>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80026fa:	4b38      	ldr	r3, [pc, #224]	; (80027dc <HAL_FMC_MspInit+0x104>)
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	4a37      	ldr	r2, [pc, #220]	; (80027dc <HAL_FMC_MspInit+0x104>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6393      	str	r3, [r2, #56]	; 0x38
 8002706:	4b35      	ldr	r3, [pc, #212]	; (80027dc <HAL_FMC_MspInit+0x104>)
 8002708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002712:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002716:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002720:	2303      	movs	r3, #3
 8002722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002724:	230c      	movs	r3, #12
 8002726:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	4619      	mov	r1, r3
 800272c:	482c      	ldr	r0, [pc, #176]	; (80027e0 <HAL_FMC_MspInit+0x108>)
 800272e:	f003 fd69 	bl	8006204 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002732:	f248 1333 	movw	r3, #33075	; 0x8133
 8002736:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002740:	2303      	movs	r3, #3
 8002742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002744:	230c      	movs	r3, #12
 8002746:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	4619      	mov	r1, r3
 800274c:	4825      	ldr	r0, [pc, #148]	; (80027e4 <HAL_FMC_MspInit+0x10c>)
 800274e:	f003 fd59 	bl	8006204 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002752:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002756:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002760:	2303      	movs	r3, #3
 8002762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002764:	230c      	movs	r3, #12
 8002766:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	4619      	mov	r1, r3
 800276c:	481e      	ldr	r0, [pc, #120]	; (80027e8 <HAL_FMC_MspInit+0x110>)
 800276e:	f003 fd49 	bl	8006204 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002772:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002776:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002780:	2303      	movs	r3, #3
 8002782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002784:	230c      	movs	r3, #12
 8002786:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	4619      	mov	r1, r3
 800278c:	4817      	ldr	r0, [pc, #92]	; (80027ec <HAL_FMC_MspInit+0x114>)
 800278e:	f003 fd39 	bl	8006204 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002792:	2328      	movs	r3, #40	; 0x28
 8002794:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027a2:	230c      	movs	r3, #12
 80027a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	4811      	ldr	r0, [pc, #68]	; (80027f0 <HAL_FMC_MspInit+0x118>)
 80027ac:	f003 fd2a 	bl	8006204 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80027b0:	2308      	movs	r3, #8
 80027b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027bc:	2303      	movs	r3, #3
 80027be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027c0:	230c      	movs	r3, #12
 80027c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	4619      	mov	r1, r3
 80027c8:	480a      	ldr	r0, [pc, #40]	; (80027f4 <HAL_FMC_MspInit+0x11c>)
 80027ca:	f003 fd1b 	bl	8006204 <HAL_GPIO_Init>
 80027ce:	e000      	b.n	80027d2 <HAL_FMC_MspInit+0xfa>
    return;
 80027d0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	200000dc 	.word	0x200000dc
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40021800 	.word	0x40021800
 80027e8:	40020c00 	.word	0x40020c00
 80027ec:	40021400 	.word	0x40021400
 80027f0:	40021c00 	.word	0x40021c00
 80027f4:	40020800 	.word	0x40020800

080027f8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002800:	f7ff ff6a 	bl	80026d8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	; 0x28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a2b      	ldr	r2, [pc, #172]	; (80028c8 <HAL_SAI_MspInit+0xbc>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d124      	bne.n	8002868 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800281e:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <HAL_SAI_MspInit+0xc0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10b      	bne.n	800283e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002826:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <HAL_SAI_MspInit+0xc4>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	4a29      	ldr	r2, [pc, #164]	; (80028d0 <HAL_SAI_MspInit+0xc4>)
 800282c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002830:	6453      	str	r3, [r2, #68]	; 0x44
 8002832:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_SAI_MspInit+0xc4>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <HAL_SAI_MspInit+0xc0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3301      	adds	r3, #1
 8002844:	4a21      	ldr	r2, [pc, #132]	; (80028cc <HAL_SAI_MspInit+0xc0>)
 8002846:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002848:	23f0      	movs	r3, #240	; 0xf0
 800284a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002858:	230a      	movs	r3, #10
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	4619      	mov	r1, r3
 8002862:	481c      	ldr	r0, [pc, #112]	; (80028d4 <HAL_SAI_MspInit+0xc8>)
 8002864:	f003 fcce 	bl	8006204 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <HAL_SAI_MspInit+0xcc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d125      	bne.n	80028be <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002872:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_SAI_MspInit+0xc0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10b      	bne.n	8002892 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_SAI_MspInit+0xc4>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <HAL_SAI_MspInit+0xc4>)
 8002880:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002884:	6453      	str	r3, [r2, #68]	; 0x44
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_SAI_MspInit+0xc4>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <HAL_SAI_MspInit+0xc0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3301      	adds	r3, #1
 8002898:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <HAL_SAI_MspInit+0xc0>)
 800289a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800289c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80028ae:	230a      	movs	r3, #10
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80028b2:	f107 0314 	add.w	r3, r7, #20
 80028b6:	4619      	mov	r1, r3
 80028b8:	4808      	ldr	r0, [pc, #32]	; (80028dc <HAL_SAI_MspInit+0xd0>)
 80028ba:	f003 fca3 	bl	8006204 <HAL_GPIO_Init>

    }
}
 80028be:	bf00      	nop
 80028c0:	3728      	adds	r7, #40	; 0x28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40015c04 	.word	0x40015c04
 80028cc:	200000e0 	.word	0x200000e0
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40022000 	.word	0x40022000
 80028d8:	40015c24 	.word	0x40015c24
 80028dc:	40021800 	.word	0x40021800

080028e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08c      	sub	sp, #48	; 0x30
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80028f0:	2200      	movs	r2, #0
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	2036      	movs	r0, #54	; 0x36
 80028f6:	f001 fc19 	bl	800412c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028fa:	2036      	movs	r0, #54	; 0x36
 80028fc:	f001 fc32 	bl	8004164 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002900:	4b1f      	ldr	r3, [pc, #124]	; (8002980 <HAL_InitTick+0xa0>)
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <HAL_InitTick+0xa0>)
 8002906:	f043 0310 	orr.w	r3, r3, #16
 800290a:	6413      	str	r3, [r2, #64]	; 0x40
 800290c:	4b1c      	ldr	r3, [pc, #112]	; (8002980 <HAL_InitTick+0xa0>)
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002918:	f107 0210 	add.w	r2, r7, #16
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f006 fde2 	bl	80094ec <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002928:	f006 fdb8 	bl	800949c <HAL_RCC_GetPCLK1Freq>
 800292c:	4603      	mov	r3, r0
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002934:	4a13      	ldr	r2, [pc, #76]	; (8002984 <HAL_InitTick+0xa4>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	0c9b      	lsrs	r3, r3, #18
 800293c:	3b01      	subs	r3, #1
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_InitTick+0xa8>)
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <HAL_InitTick+0xac>)
 8002944:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <HAL_InitTick+0xa8>)
 8002948:	f240 32e7 	movw	r2, #999	; 0x3e7
 800294c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800294e:	4a0e      	ldr	r2, [pc, #56]	; (8002988 <HAL_InitTick+0xa8>)
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <HAL_InitTick+0xa8>)
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_InitTick+0xa8>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002960:	4809      	ldr	r0, [pc, #36]	; (8002988 <HAL_InitTick+0xa8>)
 8002962:	f008 fa2a 	bl	800adba <HAL_TIM_Base_Init>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d104      	bne.n	8002976 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800296c:	4806      	ldr	r0, [pc, #24]	; (8002988 <HAL_InitTick+0xa8>)
 800296e:	f008 fa7b 	bl	800ae68 <HAL_TIM_Base_Start_IT>
 8002972:	4603      	mov	r3, r0
 8002974:	e000      	b.n	8002978 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
}
 8002978:	4618      	mov	r0, r3
 800297a:	3730      	adds	r7, #48	; 0x30
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40023800 	.word	0x40023800
 8002984:	431bde83 	.word	0x431bde83
 8002988:	20009910 	.word	0x20009910
 800298c:	40001000 	.word	0x40001000

08002990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002994:	e7fe      	b.n	8002994 <NMI_Handler+0x4>

08002996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800299a:	e7fe      	b.n	800299a <HardFault_Handler+0x4>

0800299c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a0:	e7fe      	b.n	80029a0 <MemManage_Handler+0x4>

080029a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a6:	e7fe      	b.n	80029a6 <BusFault_Handler+0x4>

080029a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029ac:	e7fe      	b.n	80029ac <UsageFault_Handler+0x4>

080029ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <TIM6_DAC_IRQHandler+0x10>)
 80029c2:	f008 fb20 	bl	800b006 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20009910 	.word	0x20009910

080029d0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <ETH_IRQHandler+0x10>)
 80029d6:	f002 fe73 	bl	80056c0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	2000b380 	.word	0x2000b380

080029e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80029e8:	4802      	ldr	r0, [pc, #8]	; (80029f4 <OTG_FS_IRQHandler+0x10>)
 80029ea:	f004 f839 	bl	8006a60 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20010764 	.word	0x20010764

080029f8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80029fc:	4802      	ldr	r0, [pc, #8]	; (8002a08 <LTDC_IRQHandler+0x10>)
 80029fe:	f005 fd35 	bl	800846c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	200094fc 	.word	0x200094fc

08002a0c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002a10:	4802      	ldr	r0, [pc, #8]	; (8002a1c <DMA2D_IRQHandler+0x10>)
 8002a12:	f002 f833 	bl	8004a7c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200097b0 	.word	0x200097b0

08002a20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	e00a      	b.n	8002a48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a32:	f3af 8000 	nop.w
 8002a36:	4601      	mov	r1, r0
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	60ba      	str	r2, [r7, #8]
 8002a3e:	b2ca      	uxtb	r2, r1
 8002a40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	3301      	adds	r3, #1
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	dbf0      	blt.n	8002a32 <_read+0x12>
	}

return len;
 8002a50:	687b      	ldr	r3, [r7, #4]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	e009      	b.n	8002a80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	60ba      	str	r2, [r7, #8]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f01e faef 	bl	8021058 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	dbf1      	blt.n	8002a6c <_write+0x12>
	}
	return len;
 8002a88:	687b      	ldr	r3, [r7, #4]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <_close>:

int _close(int file)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
	return -1;
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aba:	605a      	str	r2, [r3, #4]
	return 0;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <_isatty>:

int _isatty(int file)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
	return 1;
 8002ad2:	2301      	movs	r3, #1
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
	return 0;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b04:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <_sbrk+0x5c>)
 8002b06:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <_sbrk+0x60>)
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b10:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <_sbrk+0x64>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d102      	bne.n	8002b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b18:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <_sbrk+0x64>)
 8002b1a:	4a12      	ldr	r2, [pc, #72]	; (8002b64 <_sbrk+0x68>)
 8002b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b1e:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <_sbrk+0x64>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d205      	bcs.n	8002b38 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <_sbrk+0x6c>)
 8002b2e:	220c      	movs	r2, #12
 8002b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b36:	e009      	b.n	8002b4c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <_sbrk+0x64>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <_sbrk+0x64>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	4a06      	ldr	r2, [pc, #24]	; (8002b60 <_sbrk+0x64>)
 8002b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	20050000 	.word	0x20050000
 8002b5c:	00000400 	.word	0x00000400
 8002b60:	200000e4 	.word	0x200000e4
 8002b64:	200146d8 	.word	0x200146d8
 8002b68:	20010378 	.word	0x20010378

08002b6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <SystemInit+0x20>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	4a05      	ldr	r2, [pc, #20]	; (8002b8c <SystemInit+0x20>)
 8002b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b94:	480d      	ldr	r0, [pc, #52]	; (8002bcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b96:	490e      	ldr	r1, [pc, #56]	; (8002bd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b98:	4a0e      	ldr	r2, [pc, #56]	; (8002bd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b9c:	e002      	b.n	8002ba4 <LoopCopyDataInit>

08002b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ba2:	3304      	adds	r3, #4

08002ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ba8:	d3f9      	bcc.n	8002b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002baa:	4a0b      	ldr	r2, [pc, #44]	; (8002bd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bac:	4c0b      	ldr	r4, [pc, #44]	; (8002bdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb0:	e001      	b.n	8002bb6 <LoopFillZerobss>

08002bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bb4:	3204      	adds	r2, #4

08002bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bb8:	d3fb      	bcc.n	8002bb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bba:	f7ff ffd7 	bl	8002b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bbe:	f01e fbb1 	bl	8021324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bc2:	f7fe ff05 	bl	80019d0 <main>
  bx  lr    
 8002bc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bc8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd0:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8002bd4:	08027f64 	.word	0x08027f64
  ldr r2, =_sbss
 8002bd8:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002bdc:	200146d4 	.word	0x200146d4

08002be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002be0:	e7fe      	b.n	8002be0 <ADC_IRQHandler>
	...

08002be4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002be8:	4b31      	ldr	r3, [pc, #196]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002bea:	2228      	movs	r2, #40	; 0x28
 8002bec:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002bee:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002bf0:	2209      	movs	r2, #9
 8002bf2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002bf4:	4b2e      	ldr	r3, [pc, #184]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002bf6:	2235      	movs	r2, #53	; 0x35
 8002bf8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002bfa:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002bfc:	220b      	movs	r2, #11
 8002bfe:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002c00:	4b2b      	ldr	r3, [pc, #172]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c02:	f240 121b 	movw	r2, #283	; 0x11b
 8002c06:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002c08:	4b29      	ldr	r3, [pc, #164]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c0a:	f240 2215 	movw	r2, #533	; 0x215
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002c10:	4b27      	ldr	r3, [pc, #156]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c12:	f240 121d 	movw	r2, #285	; 0x11d
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002c18:	4b25      	ldr	r3, [pc, #148]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c1a:	f240 2235 	movw	r2, #565	; 0x235
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002c20:	2100      	movs	r1, #0
 8002c22:	4823      	ldr	r0, [pc, #140]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c24:	f000 fc1c 	bl	8003460 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002c28:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002c2e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002c30:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c32:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002c36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002c40:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002c50:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002c56:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002c5c:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002c62:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c6a:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <BSP_LCD_Init+0xd0>)
 8002c6c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002c6e:	4810      	ldr	r0, [pc, #64]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c70:	f005 fcfc 	bl	800866c <HAL_LTDC_GetState>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d103      	bne.n	8002c82 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	480c      	ldr	r0, [pc, #48]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c7e:	f000 fb15 	bl	80032ac <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002c82:	480b      	ldr	r0, [pc, #44]	; (8002cb0 <BSP_LCD_Init+0xcc>)
 8002c84:	f005 fb22 	bl	80082cc <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c8e:	480a      	ldr	r0, [pc, #40]	; (8002cb8 <BSP_LCD_Init+0xd4>)
 8002c90:	f003 fc62 	bl	8006558 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002c94:	2201      	movs	r2, #1
 8002c96:	2108      	movs	r1, #8
 8002c98:	4808      	ldr	r0, [pc, #32]	; (8002cbc <BSP_LCD_Init+0xd8>)
 8002c9a:	f003 fc5d 	bl	8006558 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002c9e:	f000 fcff 	bl	80036a0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002ca2:	4807      	ldr	r0, [pc, #28]	; (8002cc0 <BSP_LCD_Init+0xdc>)
 8002ca4:	f000 f8c8 	bl	8002e38 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	2000995c 	.word	0x2000995c
 8002cb4:	40016800 	.word	0x40016800
 8002cb8:	40022000 	.word	0x40022000
 8002cbc:	40022800 	.word	0x40022800
 8002cc0:	20000054 	.word	0x20000054

08002cc4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <BSP_LCD_GetXSize+0x20>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a06      	ldr	r2, [pc, #24]	; (8002ce8 <BSP_LCD_GetXSize+0x24>)
 8002cce:	2134      	movs	r1, #52	; 0x34
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3360      	adds	r3, #96	; 0x60
 8002cd8:	681b      	ldr	r3, [r3, #0]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	20000128 	.word	0x20000128
 8002ce8:	2000995c 	.word	0x2000995c

08002cec <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <BSP_LCD_GetYSize+0x20>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a06      	ldr	r2, [pc, #24]	; (8002d10 <BSP_LCD_GetYSize+0x24>)
 8002cf6:	2134      	movs	r1, #52	; 0x34
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3364      	adds	r3, #100	; 0x64
 8002d00:	681b      	ldr	r3, [r3, #0]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	20000128 	.word	0x20000128
 8002d10:	2000995c 	.word	0x2000995c

08002d14 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b090      	sub	sp, #64	; 0x40
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	6039      	str	r1, [r7, #0]
 8002d1e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002d24:	f7ff ffce 	bl	8002cc4 <BSP_LCD_GetXSize>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002d30:	f7ff ffdc 	bl	8002cec <BSP_LCD_GetYSize>
 8002d34:	4603      	mov	r3, r0
 8002d36:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002d40:	23ff      	movs	r3, #255	; 0xff
 8002d42:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002d5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002d60:	2307      	movs	r3, #7
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002d64:	f7ff ffae 	bl	8002cc4 <BSP_LCD_GetXSize>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002d6c:	f7ff ffbe 	bl	8002cec <BSP_LCD_GetYSize>
 8002d70:	4603      	mov	r3, r0
 8002d72:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002d74:	88fa      	ldrh	r2, [r7, #6]
 8002d76:	f107 030c 	add.w	r3, r7, #12
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4812      	ldr	r0, [pc, #72]	; (8002dc8 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002d7e:	f005 fc37 	bl	80085f0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002d82:	88fa      	ldrh	r2, [r7, #6]
 8002d84:	4911      	ldr	r1, [pc, #68]	; (8002dcc <BSP_LCD_LayerDefaultInit+0xb8>)
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	3304      	adds	r3, #4
 8002d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d96:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002d98:	88fa      	ldrh	r2, [r7, #6]
 8002d9a:	490c      	ldr	r1, [pc, #48]	; (8002dcc <BSP_LCD_LayerDefaultInit+0xb8>)
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	3308      	adds	r3, #8
 8002da8:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002daa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	4907      	ldr	r1, [pc, #28]	; (8002dcc <BSP_LCD_LayerDefaultInit+0xb8>)
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002dbe:	601a      	str	r2, [r3, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	3740      	adds	r7, #64	; 0x40
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	2000995c 	.word	0x2000995c
 8002dcc:	2000012c 	.word	0x2000012c
 8002dd0:	20000054 	.word	0x20000054

08002dd4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002ddc:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <BSP_LCD_SetTextColor+0x28>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4907      	ldr	r1, [pc, #28]	; (8002e00 <BSP_LCD_SetTextColor+0x2c>)
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	601a      	str	r2, [r3, #0]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	20000128 	.word	0x20000128
 8002e00:	2000012c 	.word	0x2000012c

08002e04 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002e0c:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <BSP_LCD_SetBackColor+0x2c>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4908      	ldr	r1, [pc, #32]	; (8002e34 <BSP_LCD_SetBackColor+0x30>)
 8002e12:	4613      	mov	r3, r2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	601a      	str	r2, [r3, #0]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000128 	.word	0x20000128
 8002e34:	2000012c 	.word	0x2000012c

08002e38 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <BSP_LCD_SetFont+0x2c>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4908      	ldr	r1, [pc, #32]	; (8002e68 <BSP_LCD_SetFont+0x30>)
 8002e46:	4613      	mov	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	3308      	adds	r3, #8
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	601a      	str	r2, [r3, #0]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000128 	.word	0x20000128
 8002e68:	2000012c 	.word	0x2000012c

08002e6c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002e70:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <BSP_LCD_GetFont+0x24>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4907      	ldr	r1, [pc, #28]	; (8002e94 <BSP_LCD_GetFont+0x28>)
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3308      	adds	r3, #8
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000128 	.word	0x20000128
 8002e94:	2000012c 	.word	0x2000012c

08002e98 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <BSP_LCD_Clear+0x48>)
 8002ea2:	681c      	ldr	r4, [r3, #0]
 8002ea4:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <BSP_LCD_Clear+0x48>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0e      	ldr	r2, [pc, #56]	; (8002ee4 <BSP_LCD_Clear+0x4c>)
 8002eaa:	2134      	movs	r1, #52	; 0x34
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	335c      	adds	r3, #92	; 0x5c
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461d      	mov	r5, r3
 8002eb8:	f7ff ff04 	bl	8002cc4 <BSP_LCD_GetXSize>
 8002ebc:	4606      	mov	r6, r0
 8002ebe:	f7ff ff15 	bl	8002cec <BSP_LCD_GetYSize>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	4632      	mov	r2, r6
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	f000 fb98 	bl	8003608 <LL_FillBuffer>
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee0:	20000128 	.word	0x20000128
 8002ee4:	2000995c 	.word	0x2000995c

08002ee8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002ee8:	b590      	push	{r4, r7, lr}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	80fb      	strh	r3, [r7, #6]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	80bb      	strh	r3, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002efa:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <BSP_LCD_DisplayChar+0x80>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	491b      	ldr	r1, [pc, #108]	; (8002f6c <BSP_LCD_DisplayChar+0x84>)
 8002f00:	4613      	mov	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	3308      	adds	r3, #8
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6819      	ldr	r1, [r3, #0]
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002f16:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <BSP_LCD_DisplayChar+0x80>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4c14      	ldr	r4, [pc, #80]	; (8002f6c <BSP_LCD_DisplayChar+0x84>)
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4423      	add	r3, r4
 8002f26:	3308      	adds	r3, #8
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002f2c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002f30:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <BSP_LCD_DisplayChar+0x80>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4c0d      	ldr	r4, [pc, #52]	; (8002f6c <BSP_LCD_DisplayChar+0x84>)
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4423      	add	r3, r4
 8002f40:	3308      	adds	r3, #8
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	889b      	ldrh	r3, [r3, #4]
 8002f46:	3307      	adds	r3, #7
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	da00      	bge.n	8002f4e <BSP_LCD_DisplayChar+0x66>
 8002f4c:	3307      	adds	r3, #7
 8002f4e:	10db      	asrs	r3, r3, #3
 8002f50:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002f54:	18ca      	adds	r2, r1, r3
 8002f56:	88b9      	ldrh	r1, [r7, #4]
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fa9c 	bl	8003498 <DrawChar>
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd90      	pop	{r4, r7, pc}
 8002f68:	20000128 	.word	0x20000128
 8002f6c:	2000012c 	.word	0x2000012c

08002f70 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002f70:	b5b0      	push	{r4, r5, r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60ba      	str	r2, [r7, #8]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	81fb      	strh	r3, [r7, #14]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	81bb      	strh	r3, [r7, #12]
 8002f82:	4613      	mov	r3, r2
 8002f84:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002f86:	2301      	movs	r3, #1
 8002f88:	83fb      	strh	r3, [r7, #30]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	2300      	movs	r3, #0
 8002f94:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002f9a:	e002      	b.n	8002fa2 <BSP_LCD_DisplayStringAt+0x32>
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	617a      	str	r2, [r7, #20]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f6      	bne.n	8002f9c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002fae:	f7ff fe89 	bl	8002cc4 <BSP_LCD_GetXSize>
 8002fb2:	4b4f      	ldr	r3, [pc, #316]	; (80030f0 <BSP_LCD_DisplayStringAt+0x180>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	494f      	ldr	r1, [pc, #316]	; (80030f4 <BSP_LCD_DisplayStringAt+0x184>)
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3308      	adds	r3, #8
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	889b      	ldrh	r3, [r3, #4]
 8002fc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fcc:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d01c      	beq.n	800300e <BSP_LCD_DisplayStringAt+0x9e>
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d017      	beq.n	8003008 <BSP_LCD_DisplayStringAt+0x98>
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d12e      	bne.n	800303a <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	1ad1      	subs	r1, r2, r3
 8002fe2:	4b43      	ldr	r3, [pc, #268]	; (80030f0 <BSP_LCD_DisplayStringAt+0x180>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4843      	ldr	r0, [pc, #268]	; (80030f4 <BSP_LCD_DisplayStringAt+0x184>)
 8002fe8:	4613      	mov	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4403      	add	r3, r0
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	889b      	ldrh	r3, [r3, #4]
 8002ff8:	fb03 f301 	mul.w	r3, r3, r1
 8002ffc:	085b      	lsrs	r3, r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	89fb      	ldrh	r3, [r7, #14]
 8003002:	4413      	add	r3, r2
 8003004:	83fb      	strh	r3, [r7, #30]
      break;
 8003006:	e01b      	b.n	8003040 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003008:	89fb      	ldrh	r3, [r7, #14]
 800300a:	83fb      	strh	r3, [r7, #30]
      break;
 800300c:	e018      	b.n	8003040 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	b299      	uxth	r1, r3
 8003016:	4b36      	ldr	r3, [pc, #216]	; (80030f0 <BSP_LCD_DisplayStringAt+0x180>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4836      	ldr	r0, [pc, #216]	; (80030f4 <BSP_LCD_DisplayStringAt+0x184>)
 800301c:	4613      	mov	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4403      	add	r3, r0
 8003026:	3308      	adds	r3, #8
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	889b      	ldrh	r3, [r3, #4]
 800302c:	fb11 f303 	smulbb	r3, r1, r3
 8003030:	b29a      	uxth	r2, r3
 8003032:	89fb      	ldrh	r3, [r7, #14]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	83fb      	strh	r3, [r7, #30]
      break;
 8003038:	e002      	b.n	8003040 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 800303a:	89fb      	ldrh	r3, [r7, #14]
 800303c:	83fb      	strh	r3, [r7, #30]
      break;
 800303e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003040:	8bfb      	ldrh	r3, [r7, #30]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <BSP_LCD_DisplayStringAt+0xde>
 8003046:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800304a:	2b00      	cmp	r3, #0
 800304c:	da1d      	bge.n	800308a <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 800304e:	2301      	movs	r3, #1
 8003050:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003052:	e01a      	b.n	800308a <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	781a      	ldrb	r2, [r3, #0]
 8003058:	89b9      	ldrh	r1, [r7, #12]
 800305a:	8bfb      	ldrh	r3, [r7, #30]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ff43 	bl	8002ee8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003062:	4b23      	ldr	r3, [pc, #140]	; (80030f0 <BSP_LCD_DisplayStringAt+0x180>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4923      	ldr	r1, [pc, #140]	; (80030f4 <BSP_LCD_DisplayStringAt+0x184>)
 8003068:	4613      	mov	r3, r2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	3308      	adds	r3, #8
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	889a      	ldrh	r2, [r3, #4]
 8003078:	8bfb      	ldrh	r3, [r7, #30]
 800307a:	4413      	add	r3, r2
 800307c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	3301      	adds	r3, #1
 8003082:	60bb      	str	r3, [r7, #8]
    i++;
 8003084:	8bbb      	ldrh	r3, [r7, #28]
 8003086:	3301      	adds	r3, #1
 8003088:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	bf14      	ite	ne
 8003092:	2301      	movne	r3, #1
 8003094:	2300      	moveq	r3, #0
 8003096:	b2dc      	uxtb	r4, r3
 8003098:	f7ff fe14 	bl	8002cc4 <BSP_LCD_GetXSize>
 800309c:	4605      	mov	r5, r0
 800309e:	8bb9      	ldrh	r1, [r7, #28]
 80030a0:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <BSP_LCD_DisplayStringAt+0x180>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4813      	ldr	r0, [pc, #76]	; (80030f4 <BSP_LCD_DisplayStringAt+0x184>)
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4403      	add	r3, r0
 80030b0:	3308      	adds	r3, #8
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	889b      	ldrh	r3, [r3, #4]
 80030b6:	fb03 f301 	mul.w	r3, r3, r1
 80030ba:	1aeb      	subs	r3, r5, r3
 80030bc:	b299      	uxth	r1, r3
 80030be:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <BSP_LCD_DisplayStringAt+0x180>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	480c      	ldr	r0, [pc, #48]	; (80030f4 <BSP_LCD_DisplayStringAt+0x184>)
 80030c4:	4613      	mov	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4403      	add	r3, r0
 80030ce:	3308      	adds	r3, #8
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	889b      	ldrh	r3, [r3, #4]
 80030d4:	4299      	cmp	r1, r3
 80030d6:	bf2c      	ite	cs
 80030d8:	2301      	movcs	r3, #1
 80030da:	2300      	movcc	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	4023      	ands	r3, r4
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1b6      	bne.n	8003054 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80030e6:	bf00      	nop
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bdb0      	pop	{r4, r5, r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000128 	.word	0x20000128
 80030f4:	2000012c 	.word	0x2000012c

080030f8 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	6039      	str	r1, [r7, #0]
 8003102:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003104:	f7ff feb2 	bl	8002e6c <BSP_LCD_GetFont>
 8003108:	4603      	mov	r3, r0
 800310a:	88db      	ldrh	r3, [r3, #6]
 800310c:	88fa      	ldrh	r2, [r7, #6]
 800310e:	fb12 f303 	smulbb	r3, r2, r3
 8003112:	b299      	uxth	r1, r3
 8003114:	2303      	movs	r3, #3
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	2000      	movs	r0, #0
 800311a:	f7ff ff29 	bl	8002f70 <BSP_LCD_DisplayStringAt>
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003128:	b5b0      	push	{r4, r5, r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	603a      	str	r2, [r7, #0]
 8003132:	80fb      	strh	r3, [r7, #6]
 8003134:	460b      	mov	r3, r1
 8003136:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003138:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <BSP_LCD_DrawPixel+0x88>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <BSP_LCD_DrawPixel+0x8c>)
 800313e:	2134      	movs	r1, #52	; 0x34
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	3348      	adds	r3, #72	; 0x48
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d116      	bne.n	800317c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800314e:	4b18      	ldr	r3, [pc, #96]	; (80031b0 <BSP_LCD_DrawPixel+0x88>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <BSP_LCD_DrawPixel+0x8c>)
 8003154:	2134      	movs	r1, #52	; 0x34
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	335c      	adds	r3, #92	; 0x5c
 800315e:	681c      	ldr	r4, [r3, #0]
 8003160:	88bd      	ldrh	r5, [r7, #4]
 8003162:	f7ff fdaf 	bl	8002cc4 <BSP_LCD_GetXSize>
 8003166:	4603      	mov	r3, r0
 8003168:	fb03 f205 	mul.w	r2, r3, r5
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	4413      	add	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4423      	add	r3, r4
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	b292      	uxth	r2, r2
 8003178:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800317a:	e015      	b.n	80031a8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <BSP_LCD_DrawPixel+0x88>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0c      	ldr	r2, [pc, #48]	; (80031b4 <BSP_LCD_DrawPixel+0x8c>)
 8003182:	2134      	movs	r1, #52	; 0x34
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	335c      	adds	r3, #92	; 0x5c
 800318c:	681c      	ldr	r4, [r3, #0]
 800318e:	88bd      	ldrh	r5, [r7, #4]
 8003190:	f7ff fd98 	bl	8002cc4 <BSP_LCD_GetXSize>
 8003194:	4603      	mov	r3, r0
 8003196:	fb03 f205 	mul.w	r2, r3, r5
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4423      	add	r3, r4
 80031a2:	461a      	mov	r2, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6013      	str	r3, [r2, #0]
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bdb0      	pop	{r4, r5, r7, pc}
 80031b0:	20000128 	.word	0x20000128
 80031b4:	2000995c 	.word	0x2000995c

080031b8 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80031b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031bc:	b086      	sub	sp, #24
 80031be:	af02      	add	r7, sp, #8
 80031c0:	4604      	mov	r4, r0
 80031c2:	4608      	mov	r0, r1
 80031c4:	4611      	mov	r1, r2
 80031c6:	461a      	mov	r2, r3
 80031c8:	4623      	mov	r3, r4
 80031ca:	80fb      	strh	r3, [r7, #6]
 80031cc:	4603      	mov	r3, r0
 80031ce:	80bb      	strh	r3, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	807b      	strh	r3, [r7, #2]
 80031d4:	4613      	mov	r3, r2
 80031d6:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80031dc:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <BSP_LCD_FillRect+0xe8>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4930      	ldr	r1, [pc, #192]	; (80032a4 <BSP_LCD_FillRect+0xec>)
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fdf0 	bl	8002dd4 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80031f4:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <BSP_LCD_FillRect+0xe8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a2b      	ldr	r2, [pc, #172]	; (80032a8 <BSP_LCD_FillRect+0xf0>)
 80031fa:	2134      	movs	r1, #52	; 0x34
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	3348      	adds	r3, #72	; 0x48
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d114      	bne.n	8003234 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800320a:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <BSP_LCD_FillRect+0xe8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a26      	ldr	r2, [pc, #152]	; (80032a8 <BSP_LCD_FillRect+0xf0>)
 8003210:	2134      	movs	r1, #52	; 0x34
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	335c      	adds	r3, #92	; 0x5c
 800321a:	681c      	ldr	r4, [r3, #0]
 800321c:	f7ff fd52 	bl	8002cc4 <BSP_LCD_GetXSize>
 8003220:	4602      	mov	r2, r0
 8003222:	88bb      	ldrh	r3, [r7, #4]
 8003224:	fb03 f202 	mul.w	r2, r3, r2
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	4413      	add	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4423      	add	r3, r4
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	e013      	b.n	800325c <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003234:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <BSP_LCD_FillRect+0xe8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a1b      	ldr	r2, [pc, #108]	; (80032a8 <BSP_LCD_FillRect+0xf0>)
 800323a:	2134      	movs	r1, #52	; 0x34
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	4413      	add	r3, r2
 8003242:	335c      	adds	r3, #92	; 0x5c
 8003244:	681c      	ldr	r4, [r3, #0]
 8003246:	f7ff fd3d 	bl	8002cc4 <BSP_LCD_GetXSize>
 800324a:	4602      	mov	r2, r0
 800324c:	88bb      	ldrh	r3, [r7, #4]
 800324e:	fb03 f202 	mul.w	r2, r3, r2
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4423      	add	r3, r4
 800325a:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800325c:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <BSP_LCD_FillRect+0xe8>)
 800325e:	681c      	ldr	r4, [r3, #0]
 8003260:	68fd      	ldr	r5, [r7, #12]
 8003262:	887e      	ldrh	r6, [r7, #2]
 8003264:	f8b7 8000 	ldrh.w	r8, [r7]
 8003268:	f7ff fd2c 	bl	8002cc4 <BSP_LCD_GetXSize>
 800326c:	4602      	mov	r2, r0
 800326e:	887b      	ldrh	r3, [r7, #2]
 8003270:	1ad1      	subs	r1, r2, r3
 8003272:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <BSP_LCD_FillRect+0xe8>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	480b      	ldr	r0, [pc, #44]	; (80032a4 <BSP_LCD_FillRect+0xec>)
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4403      	add	r3, r0
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	9301      	str	r3, [sp, #4]
 8003286:	9100      	str	r1, [sp, #0]
 8003288:	4643      	mov	r3, r8
 800328a:	4632      	mov	r2, r6
 800328c:	4629      	mov	r1, r5
 800328e:	4620      	mov	r0, r4
 8003290:	f000 f9ba 	bl	8003608 <LL_FillBuffer>
}
 8003294:	bf00      	nop
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800329e:	bf00      	nop
 80032a0:	20000128 	.word	0x20000128
 80032a4:	2000012c 	.word	0x2000012c
 80032a8:	2000995c 	.word	0x2000995c

080032ac <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b090      	sub	sp, #64	; 0x40
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80032b6:	4b64      	ldr	r3, [pc, #400]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	4a63      	ldr	r2, [pc, #396]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 80032bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032c0:	6453      	str	r3, [r2, #68]	; 0x44
 80032c2:	4b61      	ldr	r3, [pc, #388]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80032cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80032ce:	4b5e      	ldr	r3, [pc, #376]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a5d      	ldr	r2, [pc, #372]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 80032d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b5b      	ldr	r3, [pc, #364]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032e6:	4b58      	ldr	r3, [pc, #352]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	4a57      	ldr	r2, [pc, #348]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 80032ec:	f043 0310 	orr.w	r3, r3, #16
 80032f0:	6313      	str	r3, [r2, #48]	; 0x30
 80032f2:	4b55      	ldr	r3, [pc, #340]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	623b      	str	r3, [r7, #32]
 80032fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032fe:	4b52      	ldr	r3, [pc, #328]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	4a51      	ldr	r2, [pc, #324]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 8003304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003308:	6313      	str	r3, [r2, #48]	; 0x30
 800330a:	4b4f      	ldr	r3, [pc, #316]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003316:	4b4c      	ldr	r3, [pc, #304]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	4a4b      	ldr	r2, [pc, #300]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 800331c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003320:	6313      	str	r3, [r2, #48]	; 0x30
 8003322:	4b49      	ldr	r3, [pc, #292]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800332e:	4b46      	ldr	r3, [pc, #280]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	4a45      	ldr	r2, [pc, #276]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 8003334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003338:	6313      	str	r3, [r2, #48]	; 0x30
 800333a:	4b43      	ldr	r3, [pc, #268]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003346:	4b40      	ldr	r3, [pc, #256]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	4a3f      	ldr	r2, [pc, #252]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 800334c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003350:	6313      	str	r3, [r2, #48]	; 0x30
 8003352:	4b3d      	ldr	r3, [pc, #244]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800335e:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	4a39      	ldr	r2, [pc, #228]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 8003364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003368:	6313      	str	r3, [r2, #48]	; 0x30
 800336a:	4b37      	ldr	r3, [pc, #220]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003376:	4b34      	ldr	r3, [pc, #208]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4a33      	ldr	r2, [pc, #204]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 800337c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003380:	6313      	str	r3, [r2, #48]	; 0x30
 8003382:	4b31      	ldr	r3, [pc, #196]	; (8003448 <BSP_LCD_MspInit+0x19c>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800338e:	2310      	movs	r3, #16
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800339a:	2302      	movs	r3, #2
 800339c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800339e:	230e      	movs	r3, #14
 80033a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80033a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033a6:	4619      	mov	r1, r3
 80033a8:	4828      	ldr	r0, [pc, #160]	; (800344c <BSP_LCD_MspInit+0x1a0>)
 80033aa:	f002 ff2b 	bl	8006204 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80033ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033b4:	2302      	movs	r3, #2
 80033b6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80033b8:	2309      	movs	r3, #9
 80033ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80033bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033c0:	4619      	mov	r1, r3
 80033c2:	4823      	ldr	r0, [pc, #140]	; (8003450 <BSP_LCD_MspInit+0x1a4>)
 80033c4:	f002 ff1e 	bl	8006204 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80033c8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033ce:	2302      	movs	r3, #2
 80033d0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80033d2:	230e      	movs	r3, #14
 80033d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80033d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033da:	4619      	mov	r1, r3
 80033dc:	481d      	ldr	r0, [pc, #116]	; (8003454 <BSP_LCD_MspInit+0x1a8>)
 80033de:	f002 ff11 	bl	8006204 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80033e2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033e8:	2302      	movs	r3, #2
 80033ea:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80033ec:	230e      	movs	r3, #14
 80033ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80033f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033f4:	4619      	mov	r1, r3
 80033f6:	4818      	ldr	r0, [pc, #96]	; (8003458 <BSP_LCD_MspInit+0x1ac>)
 80033f8:	f002 ff04 	bl	8006204 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80033fc:	23f7      	movs	r3, #247	; 0xf7
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003400:	2302      	movs	r3, #2
 8003402:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003404:	230e      	movs	r3, #14
 8003406:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003408:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800340c:	4619      	mov	r1, r3
 800340e:	4813      	ldr	r0, [pc, #76]	; (800345c <BSP_LCD_MspInit+0x1b0>)
 8003410:	f002 fef8 	bl	8006204 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800341a:	2301      	movs	r3, #1
 800341c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800341e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003422:	4619      	mov	r1, r3
 8003424:	480b      	ldr	r0, [pc, #44]	; (8003454 <BSP_LCD_MspInit+0x1a8>)
 8003426:	f002 feed 	bl	8006204 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800342a:	2308      	movs	r3, #8
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800342e:	2301      	movs	r3, #1
 8003430:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003436:	4619      	mov	r1, r3
 8003438:	4808      	ldr	r0, [pc, #32]	; (800345c <BSP_LCD_MspInit+0x1b0>)
 800343a:	f002 fee3 	bl	8006204 <HAL_GPIO_Init>
}
 800343e:	bf00      	nop
 8003440:	3740      	adds	r7, #64	; 0x40
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40023800 	.word	0x40023800
 800344c:	40021000 	.word	0x40021000
 8003450:	40021800 	.word	0x40021800
 8003454:	40022000 	.word	0x40022000
 8003458:	40022400 	.word	0x40022400
 800345c:	40022800 	.word	0x40022800

08003460 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <BSP_LCD_ClockConfig+0x34>)
 800346c:	2208      	movs	r2, #8
 800346e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <BSP_LCD_ClockConfig+0x34>)
 8003472:	22c0      	movs	r2, #192	; 0xc0
 8003474:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003476:	4b07      	ldr	r3, [pc, #28]	; (8003494 <BSP_LCD_ClockConfig+0x34>)
 8003478:	2205      	movs	r2, #5
 800347a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <BSP_LCD_ClockConfig+0x34>)
 800347e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003482:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003484:	4803      	ldr	r0, [pc, #12]	; (8003494 <BSP_LCD_ClockConfig+0x34>)
 8003486:	f006 f863 	bl	8009550 <HAL_RCCEx_PeriphCLKConfig>
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000144 	.word	0x20000144

08003498 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	603a      	str	r2, [r7, #0]
 80034a2:	80fb      	strh	r3, [r7, #6]
 80034a4:	460b      	mov	r3, r1
 80034a6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80034b0:	4b53      	ldr	r3, [pc, #332]	; (8003600 <DrawChar+0x168>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4953      	ldr	r1, [pc, #332]	; (8003604 <DrawChar+0x16c>)
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	3308      	adds	r3, #8
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	88db      	ldrh	r3, [r3, #6]
 80034c6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80034c8:	4b4d      	ldr	r3, [pc, #308]	; (8003600 <DrawChar+0x168>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	494d      	ldr	r1, [pc, #308]	; (8003604 <DrawChar+0x16c>)
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	3308      	adds	r3, #8
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	889b      	ldrh	r3, [r3, #4]
 80034de:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80034e0:	8a3b      	ldrh	r3, [r7, #16]
 80034e2:	3307      	adds	r3, #7
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	da00      	bge.n	80034ea <DrawChar+0x52>
 80034e8:	3307      	adds	r3, #7
 80034ea:	10db      	asrs	r3, r3, #3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	8a3b      	ldrh	r3, [r7, #16]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
 80034fe:	e076      	b.n	80035ee <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003500:	8a3b      	ldrh	r3, [r7, #16]
 8003502:	3307      	adds	r3, #7
 8003504:	2b00      	cmp	r3, #0
 8003506:	da00      	bge.n	800350a <DrawChar+0x72>
 8003508:	3307      	adds	r3, #7
 800350a:	10db      	asrs	r3, r3, #3
 800350c:	461a      	mov	r2, r3
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	fb03 f302 	mul.w	r3, r3, r2
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	4413      	add	r3, r2
 8003518:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800351a:	8a3b      	ldrh	r3, [r7, #16]
 800351c:	3307      	adds	r3, #7
 800351e:	2b00      	cmp	r3, #0
 8003520:	da00      	bge.n	8003524 <DrawChar+0x8c>
 8003522:	3307      	adds	r3, #7
 8003524:	10db      	asrs	r3, r3, #3
 8003526:	2b01      	cmp	r3, #1
 8003528:	d002      	beq.n	8003530 <DrawChar+0x98>
 800352a:	2b02      	cmp	r3, #2
 800352c:	d004      	beq.n	8003538 <DrawChar+0xa0>
 800352e:	e00c      	b.n	800354a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	617b      	str	r3, [r7, #20]
      break;
 8003536:	e016      	b.n	8003566 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	021b      	lsls	r3, r3, #8
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	3201      	adds	r2, #1
 8003542:	7812      	ldrb	r2, [r2, #0]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]
      break;
 8003548:	e00d      	b.n	8003566 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	041a      	lsls	r2, r3, #16
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	3301      	adds	r3, #1
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	4313      	orrs	r3, r2
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	3202      	adds	r2, #2
 800355e:	7812      	ldrb	r2, [r2, #0]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
      break;
 8003564:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	e036      	b.n	80035da <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800356c:	8a3a      	ldrh	r2, [r7, #16]
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	1ad2      	subs	r2, r2, r3
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	4413      	add	r3, r2
 8003576:	3b01      	subs	r3, #1
 8003578:	2201      	movs	r2, #1
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	461a      	mov	r2, r3
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d012      	beq.n	80035ae <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	b29a      	uxth	r2, r3
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	4413      	add	r3, r2
 8003590:	b298      	uxth	r0, r3
 8003592:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <DrawChar+0x168>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	491b      	ldr	r1, [pc, #108]	; (8003604 <DrawChar+0x16c>)
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	88bb      	ldrh	r3, [r7, #4]
 80035a6:	4619      	mov	r1, r3
 80035a8:	f7ff fdbe 	bl	8003128 <BSP_LCD_DrawPixel>
 80035ac:	e012      	b.n	80035d4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	4413      	add	r3, r2
 80035b6:	b298      	uxth	r0, r3
 80035b8:	4b11      	ldr	r3, [pc, #68]	; (8003600 <DrawChar+0x168>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	4911      	ldr	r1, [pc, #68]	; (8003604 <DrawChar+0x16c>)
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	3304      	adds	r3, #4
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	88bb      	ldrh	r3, [r7, #4]
 80035ce:	4619      	mov	r1, r3
 80035d0:	f7ff fdaa 	bl	8003128 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	3301      	adds	r3, #1
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	8a3b      	ldrh	r3, [r7, #16]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d3c4      	bcc.n	800356c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80035e2:	88bb      	ldrh	r3, [r7, #4]
 80035e4:	3301      	adds	r3, #1
 80035e6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	3301      	adds	r3, #1
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	8a7b      	ldrh	r3, [r7, #18]
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d384      	bcc.n	8003500 <DrawChar+0x68>
  }
}
 80035f6:	bf00      	nop
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000128 	.word	0x20000128
 8003604:	2000012c 	.word	0x2000012c

08003608 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003616:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <LL_FillBuffer+0x88>)
 8003618:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800361c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800361e:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <LL_FillBuffer+0x8c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1d      	ldr	r2, [pc, #116]	; (8003698 <LL_FillBuffer+0x90>)
 8003624:	2134      	movs	r1, #52	; 0x34
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	4413      	add	r3, r2
 800362c:	3348      	adds	r3, #72	; 0x48
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d103      	bne.n	800363c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003634:	4b16      	ldr	r3, [pc, #88]	; (8003690 <LL_FillBuffer+0x88>)
 8003636:	2202      	movs	r2, #2
 8003638:	609a      	str	r2, [r3, #8]
 800363a:	e002      	b.n	8003642 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800363c:	4b14      	ldr	r3, [pc, #80]	; (8003690 <LL_FillBuffer+0x88>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003642:	4a13      	ldr	r2, [pc, #76]	; (8003690 <LL_FillBuffer+0x88>)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003648:	4b11      	ldr	r3, [pc, #68]	; (8003690 <LL_FillBuffer+0x88>)
 800364a:	4a14      	ldr	r2, [pc, #80]	; (800369c <LL_FillBuffer+0x94>)
 800364c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800364e:	4810      	ldr	r0, [pc, #64]	; (8003690 <LL_FillBuffer+0x88>)
 8003650:	f001 f8b6 	bl	80047c0 <HAL_DMA2D_Init>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d115      	bne.n	8003686 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800365a:	68f9      	ldr	r1, [r7, #12]
 800365c:	480c      	ldr	r0, [pc, #48]	; (8003690 <LL_FillBuffer+0x88>)
 800365e:	f001 fb1d 	bl	8004c9c <HAL_DMA2D_ConfigLayer>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10e      	bne.n	8003686 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69f9      	ldr	r1, [r7, #28]
 8003672:	4807      	ldr	r0, [pc, #28]	; (8003690 <LL_FillBuffer+0x88>)
 8003674:	f001 f8ee 	bl	8004854 <HAL_DMA2D_Start>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d103      	bne.n	8003686 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800367e:	210a      	movs	r1, #10
 8003680:	4803      	ldr	r0, [pc, #12]	; (8003690 <LL_FillBuffer+0x88>)
 8003682:	f001 f912 	bl	80048aa <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	200000e8 	.word	0x200000e8
 8003694:	20000128 	.word	0x20000128
 8003698:	2000995c 	.word	0x2000995c
 800369c:	4002b000 	.word	0x4002b000

080036a0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80036a4:	4b29      	ldr	r3, [pc, #164]	; (800374c <BSP_SDRAM_Init+0xac>)
 80036a6:	4a2a      	ldr	r2, [pc, #168]	; (8003750 <BSP_SDRAM_Init+0xb0>)
 80036a8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80036aa:	4b2a      	ldr	r3, [pc, #168]	; (8003754 <BSP_SDRAM_Init+0xb4>)
 80036ac:	2202      	movs	r2, #2
 80036ae:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80036b0:	4b28      	ldr	r3, [pc, #160]	; (8003754 <BSP_SDRAM_Init+0xb4>)
 80036b2:	2207      	movs	r2, #7
 80036b4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80036b6:	4b27      	ldr	r3, [pc, #156]	; (8003754 <BSP_SDRAM_Init+0xb4>)
 80036b8:	2204      	movs	r2, #4
 80036ba:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80036bc:	4b25      	ldr	r3, [pc, #148]	; (8003754 <BSP_SDRAM_Init+0xb4>)
 80036be:	2207      	movs	r2, #7
 80036c0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <BSP_SDRAM_Init+0xb4>)
 80036c4:	2202      	movs	r2, #2
 80036c6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80036c8:	4b22      	ldr	r3, [pc, #136]	; (8003754 <BSP_SDRAM_Init+0xb4>)
 80036ca:	2202      	movs	r2, #2
 80036cc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80036ce:	4b21      	ldr	r3, [pc, #132]	; (8003754 <BSP_SDRAM_Init+0xb4>)
 80036d0:	2202      	movs	r2, #2
 80036d2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <BSP_SDRAM_Init+0xac>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80036da:	4b1c      	ldr	r3, [pc, #112]	; (800374c <BSP_SDRAM_Init+0xac>)
 80036dc:	2200      	movs	r2, #0
 80036de:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80036e0:	4b1a      	ldr	r3, [pc, #104]	; (800374c <BSP_SDRAM_Init+0xac>)
 80036e2:	2204      	movs	r2, #4
 80036e4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80036e6:	4b19      	ldr	r3, [pc, #100]	; (800374c <BSP_SDRAM_Init+0xac>)
 80036e8:	2210      	movs	r2, #16
 80036ea:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80036ec:	4b17      	ldr	r3, [pc, #92]	; (800374c <BSP_SDRAM_Init+0xac>)
 80036ee:	2240      	movs	r2, #64	; 0x40
 80036f0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80036f2:	4b16      	ldr	r3, [pc, #88]	; (800374c <BSP_SDRAM_Init+0xac>)
 80036f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036f8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80036fa:	4b14      	ldr	r3, [pc, #80]	; (800374c <BSP_SDRAM_Init+0xac>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <BSP_SDRAM_Init+0xac>)
 8003702:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003706:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003708:	4b10      	ldr	r3, [pc, #64]	; (800374c <BSP_SDRAM_Init+0xac>)
 800370a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800370e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003710:	4b0e      	ldr	r3, [pc, #56]	; (800374c <BSP_SDRAM_Init+0xac>)
 8003712:	2200      	movs	r2, #0
 8003714:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003716:	2100      	movs	r1, #0
 8003718:	480c      	ldr	r0, [pc, #48]	; (800374c <BSP_SDRAM_Init+0xac>)
 800371a:	f000 f87f 	bl	800381c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800371e:	490d      	ldr	r1, [pc, #52]	; (8003754 <BSP_SDRAM_Init+0xb4>)
 8003720:	480a      	ldr	r0, [pc, #40]	; (800374c <BSP_SDRAM_Init+0xac>)
 8003722:	f007 f9c3 	bl	800aaac <HAL_SDRAM_Init>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <BSP_SDRAM_Init+0xb8>)
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e002      	b.n	800373a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003734:	4b08      	ldr	r3, [pc, #32]	; (8003758 <BSP_SDRAM_Init+0xb8>)
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800373a:	f240 6003 	movw	r0, #1539	; 0x603
 800373e:	f000 f80d 	bl	800375c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003742:	4b05      	ldr	r3, [pc, #20]	; (8003758 <BSP_SDRAM_Init+0xb8>)
 8003744:	781b      	ldrb	r3, [r3, #0]
}
 8003746:	4618      	mov	r0, r3
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20009a04 	.word	0x20009a04
 8003750:	a0000140 	.word	0xa0000140
 8003754:	200001c8 	.word	0x200001c8
 8003758:	20000004 	.word	0x20000004

0800375c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003768:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800376e:	4b29      	ldr	r3, [pc, #164]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003770:	2210      	movs	r2, #16
 8003772:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003774:	4b27      	ldr	r3, [pc, #156]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003776:	2201      	movs	r2, #1
 8003778:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800377a:	4b26      	ldr	r3, [pc, #152]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800377c:	2200      	movs	r2, #0
 800377e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003784:	4923      	ldr	r1, [pc, #140]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003786:	4824      	ldr	r0, [pc, #144]	; (8003818 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003788:	f007 f9c4 	bl	800ab14 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800378c:	2001      	movs	r0, #1
 800378e:	f000 f96b 	bl	8003a68 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003792:	4b20      	ldr	r3, [pc, #128]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003794:	2202      	movs	r2, #2
 8003796:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003798:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800379a:	2210      	movs	r2, #16
 800379c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800379e:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80037a4:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80037aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ae:	4919      	ldr	r1, [pc, #100]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037b0:	4819      	ldr	r0, [pc, #100]	; (8003818 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037b2:	f007 f9af 	bl	800ab14 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80037b6:	4b17      	ldr	r3, [pc, #92]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037b8:	2203      	movs	r2, #3
 80037ba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80037bc:	4b15      	ldr	r3, [pc, #84]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037be:	2210      	movs	r2, #16
 80037c0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037c4:	2208      	movs	r2, #8
 80037c6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80037c8:	4b12      	ldr	r3, [pc, #72]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80037ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037d2:	4910      	ldr	r1, [pc, #64]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037d4:	4810      	ldr	r0, [pc, #64]	; (8003818 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037d6:	f007 f99d 	bl	800ab14 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80037da:	f44f 7308 	mov.w	r3, #544	; 0x220
 80037de:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80037e0:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037e2:	2204      	movs	r2, #4
 80037e4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037e8:	2210      	movs	r2, #16
 80037ea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80037ec:	4b09      	ldr	r3, [pc, #36]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a07      	ldr	r2, [pc, #28]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037f6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80037f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037fc:	4905      	ldr	r1, [pc, #20]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037fe:	4806      	ldr	r0, [pc, #24]	; (8003818 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003800:	f007 f988 	bl	800ab14 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4804      	ldr	r0, [pc, #16]	; (8003818 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003808:	f007 f9af 	bl	800ab6a <HAL_SDRAM_ProgramRefreshRate>
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	200001e4 	.word	0x200001e4
 8003818:	20009a04 	.word	0x20009a04

0800381c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800381c:	b580      	push	{r7, lr}
 800381e:	b090      	sub	sp, #64	; 0x40
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003826:	4b70      	ldr	r3, [pc, #448]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	4a6f      	ldr	r2, [pc, #444]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6393      	str	r3, [r2, #56]	; 0x38
 8003832:	4b6d      	ldr	r3, [pc, #436]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	62bb      	str	r3, [r7, #40]	; 0x28
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800383e:	4b6a      	ldr	r3, [pc, #424]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	4a69      	ldr	r2, [pc, #420]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003844:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003848:	6313      	str	r3, [r2, #48]	; 0x30
 800384a:	4b67      	ldr	r3, [pc, #412]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003856:	4b64      	ldr	r3, [pc, #400]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	4a63      	ldr	r2, [pc, #396]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 800385c:	f043 0304 	orr.w	r3, r3, #4
 8003860:	6313      	str	r3, [r2, #48]	; 0x30
 8003862:	4b61      	ldr	r3, [pc, #388]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	623b      	str	r3, [r7, #32]
 800386c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800386e:	4b5e      	ldr	r3, [pc, #376]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	4a5d      	ldr	r2, [pc, #372]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003874:	f043 0308 	orr.w	r3, r3, #8
 8003878:	6313      	str	r3, [r2, #48]	; 0x30
 800387a:	4b5b      	ldr	r3, [pc, #364]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	61fb      	str	r3, [r7, #28]
 8003884:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003886:	4b58      	ldr	r3, [pc, #352]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	4a57      	ldr	r2, [pc, #348]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 800388c:	f043 0310 	orr.w	r3, r3, #16
 8003890:	6313      	str	r3, [r2, #48]	; 0x30
 8003892:	4b55      	ldr	r3, [pc, #340]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	61bb      	str	r3, [r7, #24]
 800389c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800389e:	4b52      	ldr	r3, [pc, #328]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	4a51      	ldr	r2, [pc, #324]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038a4:	f043 0320 	orr.w	r3, r3, #32
 80038a8:	6313      	str	r3, [r2, #48]	; 0x30
 80038aa:	4b4f      	ldr	r3, [pc, #316]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80038b6:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	4a4b      	ldr	r2, [pc, #300]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c0:	6313      	str	r3, [r2, #48]	; 0x30
 80038c2:	4b49      	ldr	r3, [pc, #292]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038ce:	4b46      	ldr	r3, [pc, #280]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	4a45      	ldr	r2, [pc, #276]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d8:	6313      	str	r3, [r2, #48]	; 0x30
 80038da:	4b43      	ldr	r3, [pc, #268]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80038e6:	2302      	movs	r3, #2
 80038e8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80038ea:	2301      	movs	r3, #1
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80038ee:	2302      	movs	r3, #2
 80038f0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80038f2:	230c      	movs	r3, #12
 80038f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80038f6:	2308      	movs	r3, #8
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80038fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038fe:	4619      	mov	r1, r3
 8003900:	483a      	ldr	r0, [pc, #232]	; (80039ec <BSP_SDRAM_MspInit+0x1d0>)
 8003902:	f002 fc7f 	bl	8006204 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003906:	f24c 7303 	movw	r3, #50947	; 0xc703
 800390a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800390c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003910:	4619      	mov	r1, r3
 8003912:	4837      	ldr	r0, [pc, #220]	; (80039f0 <BSP_SDRAM_MspInit+0x1d4>)
 8003914:	f002 fc76 	bl	8006204 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003918:	f64f 7383 	movw	r3, #65411	; 0xff83
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800391e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003922:	4619      	mov	r1, r3
 8003924:	4833      	ldr	r0, [pc, #204]	; (80039f4 <BSP_SDRAM_MspInit+0x1d8>)
 8003926:	f002 fc6d 	bl	8006204 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800392a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003934:	4619      	mov	r1, r3
 8003936:	4830      	ldr	r0, [pc, #192]	; (80039f8 <BSP_SDRAM_MspInit+0x1dc>)
 8003938:	f002 fc64 	bl	8006204 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800393c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003946:	4619      	mov	r1, r3
 8003948:	482c      	ldr	r0, [pc, #176]	; (80039fc <BSP_SDRAM_MspInit+0x1e0>)
 800394a:	f002 fc5b 	bl	8006204 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800394e:	2328      	movs	r3, #40	; 0x28
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003956:	4619      	mov	r1, r3
 8003958:	4829      	ldr	r0, [pc, #164]	; (8003a00 <BSP_SDRAM_MspInit+0x1e4>)
 800395a:	f002 fc53 	bl	8006204 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800395e:	4b29      	ldr	r3, [pc, #164]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 8003960:	2200      	movs	r2, #0
 8003962:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003964:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800396a:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 800396c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003970:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 8003974:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003978:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800397a:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 800397c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003980:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003982:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 8003984:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003988:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800398a:	4b1e      	ldr	r3, [pc, #120]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 800398c:	2200      	movs	r2, #0
 800398e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003990:	4b1c      	ldr	r3, [pc, #112]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 8003992:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003996:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003998:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 800399a:	2200      	movs	r2, #0
 800399c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800399e:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 80039a0:	2203      	movs	r2, #3
 80039a2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80039a4:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80039aa:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 80039b2:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <BSP_SDRAM_MspInit+0x1ec>)
 80039b4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a12      	ldr	r2, [pc, #72]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
 80039bc:	4a11      	ldr	r2, [pc, #68]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80039c2:	4810      	ldr	r0, [pc, #64]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 80039c4:	f000 fdee 	bl	80045a4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80039c8:	480e      	ldr	r0, [pc, #56]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 80039ca:	f000 fd3d 	bl	8004448 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80039ce:	2200      	movs	r2, #0
 80039d0:	210f      	movs	r1, #15
 80039d2:	2038      	movs	r0, #56	; 0x38
 80039d4:	f000 fbaa 	bl	800412c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80039d8:	2038      	movs	r0, #56	; 0x38
 80039da:	f000 fbc3 	bl	8004164 <HAL_NVIC_EnableIRQ>
}
 80039de:	bf00      	nop
 80039e0:	3740      	adds	r7, #64	; 0x40
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40020800 	.word	0x40020800
 80039f0:	40020c00 	.word	0x40020c00
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40021400 	.word	0x40021400
 80039fc:	40021800 	.word	0x40021800
 8003a00:	40021c00 	.word	0x40021c00
 8003a04:	200001f4 	.word	0x200001f4
 8003a08:	40026410 	.word	0x40026410

08003a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a10:	2003      	movs	r0, #3
 8003a12:	f000 fb80 	bl	8004116 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a16:	2000      	movs	r0, #0
 8003a18:	f7fe ff62 	bl	80028e0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003a1c:	f7fe f858 	bl	8001ad0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_IncTick+0x20>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_IncTick+0x24>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4413      	add	r3, r2
 8003a38:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <HAL_IncTick+0x24>)
 8003a3a:	6013      	str	r3, [r2, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	2000000c 	.word	0x2000000c
 8003a4c:	20009a38 	.word	0x20009a38

08003a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return uwTick;
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <HAL_GetTick+0x14>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20009a38 	.word	0x20009a38

08003a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a70:	f7ff ffee 	bl	8003a50 <HAL_GetTick>
 8003a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a80:	d005      	beq.n	8003a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_Delay+0x40>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a8e:	bf00      	nop
 8003a90:	f7ff ffde 	bl	8003a50 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d8f7      	bhi.n	8003a90 <HAL_Delay+0x28>
  {
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	2000000c 	.word	0x2000000c

08003aac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e031      	b.n	8003b26 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fe f828 	bl	8001b20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d116      	bne.n	8003b18 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <HAL_ADC_Init+0x84>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	f043 0202 	orr.w	r2, r3, #2
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f964 	bl	8003dc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f023 0303 	bic.w	r3, r3, #3
 8003b0e:	f043 0201 	orr.w	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
 8003b16:	e001      	b.n	8003b1c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	ffffeefd 	.word	0xffffeefd

08003b34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x1c>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e12a      	b.n	8003da6 <HAL_ADC_ConfigChannel+0x272>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b09      	cmp	r3, #9
 8003b5e:	d93a      	bls.n	8003bd6 <HAL_ADC_ConfigChannel+0xa2>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b68:	d035      	beq.n	8003bd6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68d9      	ldr	r1, [r3, #12]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	461a      	mov	r2, r3
 8003b78:	4613      	mov	r3, r2
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	4413      	add	r3, r2
 8003b7e:	3b1e      	subs	r3, #30
 8003b80:	2207      	movs	r2, #7
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43da      	mvns	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a87      	ldr	r2, [pc, #540]	; (8003db4 <HAL_ADC_ConfigChannel+0x280>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d10a      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68d9      	ldr	r1, [r3, #12]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	061a      	lsls	r2, r3, #24
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bae:	e035      	b.n	8003c1c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68d9      	ldr	r1, [r3, #12]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	4403      	add	r3, r0
 8003bc8:	3b1e      	subs	r3, #30
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bd4:	e022      	b.n	8003c1c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6919      	ldr	r1, [r3, #16]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	2207      	movs	r2, #7
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43da      	mvns	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	400a      	ands	r2, r1
 8003bf8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6919      	ldr	r1, [r3, #16]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	4403      	add	r3, r0
 8003c12:	409a      	lsls	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b06      	cmp	r3, #6
 8003c22:	d824      	bhi.n	8003c6e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	3b05      	subs	r3, #5
 8003c36:	221f      	movs	r2, #31
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43da      	mvns	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	400a      	ands	r2, r1
 8003c44:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	4618      	mov	r0, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3b05      	subs	r3, #5
 8003c60:	fa00 f203 	lsl.w	r2, r0, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	635a      	str	r2, [r3, #52]	; 0x34
 8003c6c:	e04c      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b0c      	cmp	r3, #12
 8003c74:	d824      	bhi.n	8003cc0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	3b23      	subs	r3, #35	; 0x23
 8003c88:	221f      	movs	r2, #31
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	400a      	ands	r2, r1
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	3b23      	subs	r3, #35	; 0x23
 8003cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8003cbe:	e023      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	3b41      	subs	r3, #65	; 0x41
 8003cd2:	221f      	movs	r2, #31
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	43da      	mvns	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	400a      	ands	r2, r1
 8003ce0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	4618      	mov	r0, r3
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3b41      	subs	r3, #65	; 0x41
 8003cfc:	fa00 f203 	lsl.w	r2, r0, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a2a      	ldr	r2, [pc, #168]	; (8003db8 <HAL_ADC_ConfigChannel+0x284>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d10a      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x1f4>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d1a:	d105      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003d1c:	4b27      	ldr	r3, [pc, #156]	; (8003dbc <HAL_ADC_ConfigChannel+0x288>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4a26      	ldr	r2, [pc, #152]	; (8003dbc <HAL_ADC_ConfigChannel+0x288>)
 8003d22:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003d26:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a22      	ldr	r2, [pc, #136]	; (8003db8 <HAL_ADC_ConfigChannel+0x284>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d109      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x212>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b12      	cmp	r3, #18
 8003d38:	d105      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003d3a:	4b20      	ldr	r3, [pc, #128]	; (8003dbc <HAL_ADC_ConfigChannel+0x288>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4a1f      	ldr	r2, [pc, #124]	; (8003dbc <HAL_ADC_ConfigChannel+0x288>)
 8003d40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d44:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1b      	ldr	r2, [pc, #108]	; (8003db8 <HAL_ADC_ConfigChannel+0x284>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d125      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x268>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a17      	ldr	r2, [pc, #92]	; (8003db4 <HAL_ADC_ConfigChannel+0x280>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d003      	beq.n	8003d62 <HAL_ADC_ConfigChannel+0x22e>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b11      	cmp	r3, #17
 8003d60:	d11c      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003d62:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <HAL_ADC_ConfigChannel+0x288>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4a15      	ldr	r2, [pc, #84]	; (8003dbc <HAL_ADC_ConfigChannel+0x288>)
 8003d68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d6c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a10      	ldr	r2, [pc, #64]	; (8003db4 <HAL_ADC_ConfigChannel+0x280>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d111      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <HAL_ADC_ConfigChannel+0x28c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a11      	ldr	r2, [pc, #68]	; (8003dc4 <HAL_ADC_ConfigChannel+0x290>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	0c9a      	lsrs	r2, r3, #18
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d8e:	e002      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f9      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	10000012 	.word	0x10000012
 8003db8:	40012000 	.word	0x40012000
 8003dbc:	40012300 	.word	0x40012300
 8003dc0:	20000000 	.word	0x20000000
 8003dc4:	431bde83 	.word	0x431bde83

08003dc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003dd0:	4b78      	ldr	r3, [pc, #480]	; (8003fb4 <ADC_Init+0x1ec>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	4a77      	ldr	r2, [pc, #476]	; (8003fb4 <ADC_Init+0x1ec>)
 8003dd6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003dda:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003ddc:	4b75      	ldr	r3, [pc, #468]	; (8003fb4 <ADC_Init+0x1ec>)
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4973      	ldr	r1, [pc, #460]	; (8003fb4 <ADC_Init+0x1ec>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003df8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6859      	ldr	r1, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	021a      	lsls	r2, r3, #8
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6859      	ldr	r1, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6899      	ldr	r1, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	4a58      	ldr	r2, [pc, #352]	; (8003fb8 <ADC_Init+0x1f0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d022      	beq.n	8003ea2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6899      	ldr	r1, [r3, #8]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6899      	ldr	r1, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	609a      	str	r2, [r3, #8]
 8003ea0:	e00f      	b.n	8003ec2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ec0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0202 	bic.w	r2, r2, #2
 8003ed0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6899      	ldr	r1, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	005a      	lsls	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01b      	beq.n	8003f28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003efe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6859      	ldr	r1, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	035a      	lsls	r2, r3, #13
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	e007      	b.n	8003f38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	051a      	lsls	r2, r3, #20
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6899      	ldr	r1, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f7a:	025a      	lsls	r2, r3, #9
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6899      	ldr	r1, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	029a      	lsls	r2, r3, #10
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	609a      	str	r2, [r3, #8]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	40012300 	.word	0x40012300
 8003fb8:	0f000001 	.word	0x0f000001

08003fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <__NVIC_SetPriorityGrouping+0x40>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fea:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <__NVIC_SetPriorityGrouping+0x40>)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	60d3      	str	r3, [r2, #12]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000ed00 	.word	0xe000ed00
 8004000:	05fa0000 	.word	0x05fa0000

08004004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <__NVIC_GetPriorityGrouping+0x18>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	f003 0307 	and.w	r3, r3, #7
}
 8004012:	4618      	mov	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	2b00      	cmp	r3, #0
 8004030:	db0b      	blt.n	800404a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	f003 021f 	and.w	r2, r3, #31
 8004038:	4907      	ldr	r1, [pc, #28]	; (8004058 <__NVIC_EnableIRQ+0x38>)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2001      	movs	r0, #1
 8004042:	fa00 f202 	lsl.w	r2, r0, r2
 8004046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	e000e100 	.word	0xe000e100

0800405c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	6039      	str	r1, [r7, #0]
 8004066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406c:	2b00      	cmp	r3, #0
 800406e:	db0a      	blt.n	8004086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	b2da      	uxtb	r2, r3
 8004074:	490c      	ldr	r1, [pc, #48]	; (80040a8 <__NVIC_SetPriority+0x4c>)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	0112      	lsls	r2, r2, #4
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	440b      	add	r3, r1
 8004080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004084:	e00a      	b.n	800409c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	4908      	ldr	r1, [pc, #32]	; (80040ac <__NVIC_SetPriority+0x50>)
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	3b04      	subs	r3, #4
 8004094:	0112      	lsls	r2, r2, #4
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	440b      	add	r3, r1
 800409a:	761a      	strb	r2, [r3, #24]
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	e000e100 	.word	0xe000e100
 80040ac:	e000ed00 	.word	0xe000ed00

080040b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b089      	sub	sp, #36	; 0x24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f1c3 0307 	rsb	r3, r3, #7
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	bf28      	it	cs
 80040ce:	2304      	movcs	r3, #4
 80040d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2b06      	cmp	r3, #6
 80040d8:	d902      	bls.n	80040e0 <NVIC_EncodePriority+0x30>
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3b03      	subs	r3, #3
 80040de:	e000      	b.n	80040e2 <NVIC_EncodePriority+0x32>
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43da      	mvns	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	401a      	ands	r2, r3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	43d9      	mvns	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004108:	4313      	orrs	r3, r2
         );
}
 800410a:	4618      	mov	r0, r3
 800410c:	3724      	adds	r7, #36	; 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff ff4c 	bl	8003fbc <__NVIC_SetPriorityGrouping>
}
 8004124:	bf00      	nop
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800413e:	f7ff ff61 	bl	8004004 <__NVIC_GetPriorityGrouping>
 8004142:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	6978      	ldr	r0, [r7, #20]
 800414a:	f7ff ffb1 	bl	80040b0 <NVIC_EncodePriority>
 800414e:	4602      	mov	r2, r0
 8004150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004154:	4611      	mov	r1, r2
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff ff80 	bl	800405c <__NVIC_SetPriority>
}
 800415c:	bf00      	nop
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff ff54 	bl	8004020 <__NVIC_EnableIRQ>
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e054      	b.n	800423c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	7f5b      	ldrb	r3, [r3, #29]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d105      	bne.n	80041a8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fd fd16 	bl	8001bd4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	791b      	ldrb	r3, [r3, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10c      	bne.n	80041d0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a22      	ldr	r2, [pc, #136]	; (8004244 <HAL_CRC_Init+0xc4>)
 80041bc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0218 	bic.w	r2, r2, #24
 80041cc:	609a      	str	r2, [r3, #8]
 80041ce:	e00c      	b.n	80041ea <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6899      	ldr	r1, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	461a      	mov	r2, r3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f834 	bl	8004248 <HAL_CRCEx_Polynomial_Set>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e028      	b.n	800423c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	795b      	ldrb	r3, [r3, #5]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d105      	bne.n	80041fe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041fa:	611a      	str	r2, [r3, #16]
 80041fc:	e004      	b.n	8004208 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6912      	ldr	r2, [r2, #16]
 8004206:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699a      	ldr	r2, [r3, #24]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	04c11db7 	.word	0x04c11db7

08004248 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004258:	231f      	movs	r3, #31
 800425a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800425c:	bf00      	nop
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1e5a      	subs	r2, r3, #1
 8004262:	613a      	str	r2, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d009      	beq.n	800427c <HAL_CRCEx_Polynomial_Set+0x34>
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f003 031f 	and.w	r3, r3, #31
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	fa22 f303 	lsr.w	r3, r2, r3
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b18      	cmp	r3, #24
 8004280:	d846      	bhi.n	8004310 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004282:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	08004317 	.word	0x08004317
 800428c:	08004311 	.word	0x08004311
 8004290:	08004311 	.word	0x08004311
 8004294:	08004311 	.word	0x08004311
 8004298:	08004311 	.word	0x08004311
 800429c:	08004311 	.word	0x08004311
 80042a0:	08004311 	.word	0x08004311
 80042a4:	08004311 	.word	0x08004311
 80042a8:	08004305 	.word	0x08004305
 80042ac:	08004311 	.word	0x08004311
 80042b0:	08004311 	.word	0x08004311
 80042b4:	08004311 	.word	0x08004311
 80042b8:	08004311 	.word	0x08004311
 80042bc:	08004311 	.word	0x08004311
 80042c0:	08004311 	.word	0x08004311
 80042c4:	08004311 	.word	0x08004311
 80042c8:	080042f9 	.word	0x080042f9
 80042cc:	08004311 	.word	0x08004311
 80042d0:	08004311 	.word	0x08004311
 80042d4:	08004311 	.word	0x08004311
 80042d8:	08004311 	.word	0x08004311
 80042dc:	08004311 	.word	0x08004311
 80042e0:	08004311 	.word	0x08004311
 80042e4:	08004311 	.word	0x08004311
 80042e8:	080042ed 	.word	0x080042ed
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b06      	cmp	r3, #6
 80042f0:	d913      	bls.n	800431a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80042f6:	e010      	b.n	800431a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	2b07      	cmp	r3, #7
 80042fc:	d90f      	bls.n	800431e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004302:	e00c      	b.n	800431e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2b0f      	cmp	r3, #15
 8004308:	d90b      	bls.n	8004322 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800430e:	e008      	b.n	8004322 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	75fb      	strb	r3, [r7, #23]
      break;
 8004314:	e006      	b.n	8004324 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004316:	bf00      	nop
 8004318:	e004      	b.n	8004324 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800431a:	bf00      	nop
 800431c:	e002      	b.n	8004324 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800431e:	bf00      	nop
 8004320:	e000      	b.n	8004324 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004322:	bf00      	nop
  }
  if (status == HAL_OK)
 8004324:	7dfb      	ldrb	r3, [r7, #23]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10d      	bne.n	8004346 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f023 0118 	bic.w	r1, r3, #24
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	430a      	orrs	r2, r1
 8004344:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004346:	7dfb      	ldrb	r3, [r7, #23]
}
 8004348:	4618      	mov	r0, r3
 800434a:	371c      	adds	r7, #28
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e069      	b.n	800443a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d102      	bne.n	8004378 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fd fc4e 	bl	8001c14 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6819      	ldr	r1, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b2a      	ldr	r3, [pc, #168]	; (8004444 <HAL_DCMI_Init+0xf0>)
 800439a:	400b      	ands	r3, r1
 800439c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6819      	ldr	r1, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80043b2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80043be:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80043ca:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80043d6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80043e2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b10      	cmp	r3, #16
 80043f2:	d112      	bne.n	800441a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	7f1b      	ldrb	r3, [r3, #28]
 80043f8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	7f5b      	ldrb	r3, [r3, #29]
 80043fe:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004400:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	7f9b      	ldrb	r3, [r3, #30]
 8004406:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004408:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	7fdb      	ldrb	r3, [r3, #31]
 8004410:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004416:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004418:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 021e 	orr.w	r2, r2, #30
 8004428:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	ffe0f007 	.word	0xffe0f007

08004448 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004454:	f7ff fafc 	bl	8003a50 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e099      	b.n	8004598 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0201 	bic.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004484:	e00f      	b.n	80044a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004486:	f7ff fae3 	bl	8003a50 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b05      	cmp	r3, #5
 8004492:	d908      	bls.n	80044a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2203      	movs	r2, #3
 800449e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e078      	b.n	8004598 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e8      	bne.n	8004486 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4b38      	ldr	r3, [pc, #224]	; (80045a0 <HAL_DMA_Init+0x158>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d107      	bne.n	8004510 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004508:	4313      	orrs	r3, r2
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f023 0307 	bic.w	r3, r3, #7
 8004526:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	2b04      	cmp	r3, #4
 8004538:	d117      	bne.n	800456a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00e      	beq.n	800456a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f8bd 	bl	80046cc <DMA_CheckFifoParam>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2240      	movs	r2, #64	; 0x40
 800455c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004566:	2301      	movs	r3, #1
 8004568:	e016      	b.n	8004598 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f874 	bl	8004660 <DMA_CalcBaseAndBitshift>
 8004578:	4603      	mov	r3, r0
 800457a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004580:	223f      	movs	r2, #63	; 0x3f
 8004582:	409a      	lsls	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	f010803f 	.word	0xf010803f

080045a4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e050      	b.n	8004658 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d101      	bne.n	80045c6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80045c2:	2302      	movs	r3, #2
 80045c4:	e048      	b.n	8004658 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0201 	bic.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2200      	movs	r2, #0
 80045e4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2200      	movs	r2, #0
 80045ec:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2200      	movs	r2, #0
 80045f4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2200      	movs	r2, #0
 80045fc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2221      	movs	r2, #33	; 0x21
 8004604:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f82a 	bl	8004660 <DMA_CalcBaseAndBitshift>
 800460c:	4603      	mov	r3, r0
 800460e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004614:	223f      	movs	r2, #63	; 0x3f
 8004616:	409a      	lsls	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	3b10      	subs	r3, #16
 8004670:	4a13      	ldr	r2, [pc, #76]	; (80046c0 <DMA_CalcBaseAndBitshift+0x60>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800467a:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <DMA_CalcBaseAndBitshift+0x64>)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b03      	cmp	r3, #3
 800468c:	d908      	bls.n	80046a0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <DMA_CalcBaseAndBitshift+0x68>)
 8004696:	4013      	ands	r3, r2
 8004698:	1d1a      	adds	r2, r3, #4
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	659a      	str	r2, [r3, #88]	; 0x58
 800469e:	e006      	b.n	80046ae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <DMA_CalcBaseAndBitshift+0x68>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	aaaaaaab 	.word	0xaaaaaaab
 80046c4:	08025270 	.word	0x08025270
 80046c8:	fffffc00 	.word	0xfffffc00

080046cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d11f      	bne.n	8004726 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d855      	bhi.n	8004798 <DMA_CheckFifoParam+0xcc>
 80046ec:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <DMA_CheckFifoParam+0x28>)
 80046ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f2:	bf00      	nop
 80046f4:	08004705 	.word	0x08004705
 80046f8:	08004717 	.word	0x08004717
 80046fc:	08004705 	.word	0x08004705
 8004700:	08004799 	.word	0x08004799
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d045      	beq.n	800479c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004714:	e042      	b.n	800479c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800471e:	d13f      	bne.n	80047a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004724:	e03c      	b.n	80047a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472e:	d121      	bne.n	8004774 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b03      	cmp	r3, #3
 8004734:	d836      	bhi.n	80047a4 <DMA_CheckFifoParam+0xd8>
 8004736:	a201      	add	r2, pc, #4	; (adr r2, 800473c <DMA_CheckFifoParam+0x70>)
 8004738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473c:	0800474d 	.word	0x0800474d
 8004740:	08004753 	.word	0x08004753
 8004744:	0800474d 	.word	0x0800474d
 8004748:	08004765 	.word	0x08004765
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
      break;
 8004750:	e02f      	b.n	80047b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d024      	beq.n	80047a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004762:	e021      	b.n	80047a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800476c:	d11e      	bne.n	80047ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004772:	e01b      	b.n	80047ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d902      	bls.n	8004780 <DMA_CheckFifoParam+0xb4>
 800477a:	2b03      	cmp	r3, #3
 800477c:	d003      	beq.n	8004786 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800477e:	e018      	b.n	80047b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
      break;
 8004784:	e015      	b.n	80047b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00e      	beq.n	80047b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
      break;
 8004796:	e00b      	b.n	80047b0 <DMA_CheckFifoParam+0xe4>
      break;
 8004798:	bf00      	nop
 800479a:	e00a      	b.n	80047b2 <DMA_CheckFifoParam+0xe6>
      break;
 800479c:	bf00      	nop
 800479e:	e008      	b.n	80047b2 <DMA_CheckFifoParam+0xe6>
      break;
 80047a0:	bf00      	nop
 80047a2:	e006      	b.n	80047b2 <DMA_CheckFifoParam+0xe6>
      break;
 80047a4:	bf00      	nop
 80047a6:	e004      	b.n	80047b2 <DMA_CheckFifoParam+0xe6>
      break;
 80047a8:	bf00      	nop
 80047aa:	e002      	b.n	80047b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80047ac:	bf00      	nop
 80047ae:	e000      	b.n	80047b2 <DMA_CheckFifoParam+0xe6>
      break;
 80047b0:	bf00      	nop
    }
  } 
  
  return status; 
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e039      	b.n	8004846 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fd fad2 	bl	8001d90 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004810:	f023 0107 	bic.w	r1, r3, #7
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004826:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <HAL_DMA2D_Init+0x90>)
 8004828:	4013      	ands	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68d1      	ldr	r1, [r2, #12]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	430b      	orrs	r3, r1
 8004834:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	ffffc000 	.word	0xffffc000

08004854 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af02      	add	r7, sp, #8
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_DMA2D_Start+0x1c>
 800486c:	2302      	movs	r3, #2
 800486e:	e018      	b.n	80048a2 <HAL_DMA2D_Start+0x4e>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 fa98 	bl	8004dc0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b086      	sub	sp, #24
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d056      	beq.n	8004974 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80048c6:	f7ff f8c3 	bl	8003a50 <HAL_GetTick>
 80048ca:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80048cc:	e04b      	b.n	8004966 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d023      	beq.n	8004928 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ee:	f043 0202 	orr.w	r2, r3, #2
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004904:	f043 0201 	orr.w	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2221      	movs	r2, #33	; 0x21
 8004912:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2204      	movs	r2, #4
 8004918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0a5      	b.n	8004a74 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800492e:	d01a      	beq.n	8004966 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004930:	f7ff f88e 	bl	8003a50 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d302      	bcc.n	8004946 <HAL_DMA2D_PollForTransfer+0x9c>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10f      	bne.n	8004966 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494a:	f043 0220 	orr.w	r2, r3, #32
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2203      	movs	r2, #3
 8004956:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e086      	b.n	8004a74 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0ac      	beq.n	80048ce <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d061      	beq.n	8004a5a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004996:	f7ff f85b 	bl	8003a50 <HAL_GetTick>
 800499a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800499c:	e056      	b.n	8004a4c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d02e      	beq.n	8004a0e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049be:	f043 0204 	orr.w	r2, r3, #4
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d4:	f043 0202 	orr.w	r2, r3, #2
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d005      	beq.n	80049f2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ea:	f043 0201 	orr.w	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2229      	movs	r2, #41	; 0x29
 80049f8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2204      	movs	r2, #4
 80049fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e032      	b.n	8004a74 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a14:	d01a      	beq.n	8004a4c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a16:	f7ff f81b 	bl	8003a50 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d302      	bcc.n	8004a2c <HAL_DMA2D_PollForTransfer+0x182>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10f      	bne.n	8004a4c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a30:	f043 0220 	orr.w	r2, r3, #32
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e013      	b.n	8004a74 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f003 0310 	and.w	r3, r3, #16
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0a1      	beq.n	800499e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2212      	movs	r2, #18
 8004a60:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d026      	beq.n	8004aec <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d021      	beq.n	8004aec <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ab6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abc:	f043 0201 	orr.w	r2, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2204      	movs	r2, #4
 8004ad0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d026      	beq.n	8004b44 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d021      	beq.n	8004b44 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b0e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2220      	movs	r2, #32
 8004b16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	f043 0202 	orr.w	r2, r3, #2
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2204      	movs	r2, #4
 8004b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d026      	beq.n	8004b9c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d021      	beq.n	8004b9c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b66:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b74:	f043 0204 	orr.w	r2, r3, #4
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2204      	movs	r2, #4
 8004b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d013      	beq.n	8004bce <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00e      	beq.n	8004bce <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bbe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f853 	bl	8004c74 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d024      	beq.n	8004c22 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d01f      	beq.n	8004c22 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004bf0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01f      	beq.n	8004c6c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d01a      	beq.n	8004c6c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c44:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2210      	movs	r2, #16
 8004c4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f80e 	bl	8004c88 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_DMA2D_ConfigLayer+0x20>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e079      	b.n	8004db0 <HAL_DMA2D_ConfigLayer+0x114>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	3318      	adds	r3, #24
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	041b      	lsls	r3, r3, #16
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004ce6:	4b35      	ldr	r3, [pc, #212]	; (8004dbc <HAL_DMA2D_ConfigLayer+0x120>)
 8004ce8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b0a      	cmp	r3, #10
 8004cf0:	d003      	beq.n	8004cfa <HAL_DMA2D_ConfigLayer+0x5e>
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b09      	cmp	r3, #9
 8004cf8:	d107      	bne.n	8004d0a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	e005      	b.n	8004d16 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	061b      	lsls	r3, r3, #24
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d120      	bne.n	8004d5e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	43db      	mvns	r3, r3
 8004d26:	ea02 0103 	and.w	r1, r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b0a      	cmp	r3, #10
 8004d44:	d003      	beq.n	8004d4e <HAL_DMA2D_ConfigLayer+0xb2>
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b09      	cmp	r3, #9
 8004d4c:	d127      	bne.n	8004d9e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004d5a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d5c:	e01f      	b.n	8004d9e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69da      	ldr	r2, [r3, #28]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	43db      	mvns	r3, r3
 8004d68:	ea02 0103 	and.w	r1, r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	6812      	ldr	r2, [r2, #0]
 8004d7e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b0a      	cmp	r3, #10
 8004d86:	d003      	beq.n	8004d90 <HAL_DMA2D_ConfigLayer+0xf4>
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b09      	cmp	r3, #9
 8004d8e:	d106      	bne.n	8004d9e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004d9c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	371c      	adds	r7, #28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	ff03000f 	.word	0xff03000f

08004dc0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b08b      	sub	sp, #44	; 0x2c
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	041a      	lsls	r2, r3, #16
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	431a      	orrs	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004df8:	d174      	bne.n	8004ee4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e00:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e08:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e10:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d108      	bne.n	8004e32 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	431a      	orrs	r2, r3
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e30:	e053      	b.n	8004eda <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d106      	bne.n	8004e48 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
 8004e46:	e048      	b.n	8004eda <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d111      	bne.n	8004e74 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	0cdb      	lsrs	r3, r3, #19
 8004e54:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	0a9b      	lsrs	r3, r3, #10
 8004e5a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	08db      	lsrs	r3, r3, #3
 8004e60:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	02db      	lsls	r3, r3, #11
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
 8004e72:	e032      	b.n	8004eda <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d117      	bne.n	8004eac <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	0fdb      	lsrs	r3, r3, #31
 8004e80:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	0cdb      	lsrs	r3, r3, #19
 8004e86:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	0adb      	lsrs	r3, r3, #11
 8004e8c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	08db      	lsrs	r3, r3, #3
 8004e92:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	029b      	lsls	r3, r3, #10
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	03db      	lsls	r3, r3, #15
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eaa:	e016      	b.n	8004eda <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	0f1b      	lsrs	r3, r3, #28
 8004eb0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	0d1b      	lsrs	r3, r3, #20
 8004eb6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	0b1b      	lsrs	r3, r3, #12
 8004ebc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	091b      	lsrs	r3, r3, #4
 8004ec2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	011a      	lsls	r2, r3, #4
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	031b      	lsls	r3, r3, #12
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004ee2:	e003      	b.n	8004eec <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	60da      	str	r2, [r3, #12]
}
 8004eec:	bf00      	nop
 8004eee:	372c      	adds	r7, #44	; 0x2c
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8004f08:	4ba9      	ldr	r3, [pc, #676]	; (80051b0 <HAL_ETH_Init+0x2b8>)
 8004f0a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004f10:	2300      	movs	r3, #0
 8004f12:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e183      	b.n	8005226 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f008 fd30 	bl	800d998 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f38:	4b9e      	ldr	r3, [pc, #632]	; (80051b4 <HAL_ETH_Init+0x2bc>)
 8004f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3c:	4a9d      	ldr	r2, [pc, #628]	; (80051b4 <HAL_ETH_Init+0x2bc>)
 8004f3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f42:	6453      	str	r3, [r2, #68]	; 0x44
 8004f44:	4b9b      	ldr	r3, [pc, #620]	; (80051b4 <HAL_ETH_Init+0x2bc>)
 8004f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004f50:	4b99      	ldr	r3, [pc, #612]	; (80051b8 <HAL_ETH_Init+0x2c0>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4a98      	ldr	r2, [pc, #608]	; (80051b8 <HAL_ETH_Init+0x2c0>)
 8004f56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004f5a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004f5c:	4b96      	ldr	r3, [pc, #600]	; (80051b8 <HAL_ETH_Init+0x2c0>)
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	4994      	ldr	r1, [pc, #592]	; (80051b8 <HAL_ETH_Init+0x2c0>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0201 	orr.w	r2, r2, #1
 8004f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f80:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004f82:	f7fe fd65 	bl	8003a50 <HAL_GetTick>
 8004f86:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004f88:	e011      	b.n	8004fae <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004f8a:	f7fe fd61 	bl	8003a50 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f98:	d909      	bls.n	8004fae <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e13b      	b.n	8005226 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e4      	bne.n	8004f8a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f023 031c 	bic.w	r3, r3, #28
 8004fce:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004fd0:	f004 fa58 	bl	8009484 <HAL_RCC_GetHCLKFreq>
 8004fd4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	4a78      	ldr	r2, [pc, #480]	; (80051bc <HAL_ETH_Init+0x2c4>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d908      	bls.n	8004ff0 <HAL_ETH_Init+0xf8>
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	4a77      	ldr	r2, [pc, #476]	; (80051c0 <HAL_ETH_Init+0x2c8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d804      	bhi.n	8004ff0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	f043 0308 	orr.w	r3, r3, #8
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	e027      	b.n	8005040 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	4a73      	ldr	r2, [pc, #460]	; (80051c0 <HAL_ETH_Init+0x2c8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d908      	bls.n	800500a <HAL_ETH_Init+0x112>
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	4a72      	ldr	r2, [pc, #456]	; (80051c4 <HAL_ETH_Init+0x2cc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d804      	bhi.n	800500a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f043 030c 	orr.w	r3, r3, #12
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	e01a      	b.n	8005040 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	4a6d      	ldr	r2, [pc, #436]	; (80051c4 <HAL_ETH_Init+0x2cc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d903      	bls.n	800501a <HAL_ETH_Init+0x122>
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	4a6c      	ldr	r2, [pc, #432]	; (80051c8 <HAL_ETH_Init+0x2d0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d911      	bls.n	800503e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	4a6a      	ldr	r2, [pc, #424]	; (80051c8 <HAL_ETH_Init+0x2d0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d908      	bls.n	8005034 <HAL_ETH_Init+0x13c>
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	4a69      	ldr	r2, [pc, #420]	; (80051cc <HAL_ETH_Init+0x2d4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d804      	bhi.n	8005034 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	f043 0304 	orr.w	r3, r3, #4
 8005030:	61fb      	str	r3, [r7, #28]
 8005032:	e005      	b.n	8005040 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f043 0310 	orr.w	r3, r3, #16
 800503a:	61fb      	str	r3, [r7, #28]
 800503c:	e000      	b.n	8005040 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800503e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	69fa      	ldr	r2, [r7, #28]
 8005046:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8005048:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800504c:	2100      	movs	r1, #0
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fc19 	bl	8005886 <HAL_ETH_WritePHYRegister>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00b      	beq.n	8005072 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800505e:	6939      	ldr	r1, [r7, #16]
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fdcf 	bl	8005c04 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e0d9      	b.n	8005226 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8005072:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005076:	f7fe fcf7 	bl	8003a68 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 80a6 	beq.w	80051d0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005084:	f7fe fce4 	bl	8003a50 <HAL_GetTick>
 8005088:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800508a:	f107 030c 	add.w	r3, r7, #12
 800508e:	461a      	mov	r2, r3
 8005090:	2101      	movs	r1, #1
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fb8f 	bl	80057b6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8005098:	f7fe fcda 	bl	8003a50 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d90f      	bls.n	80050ca <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80050ae:	6939      	ldr	r1, [r7, #16]
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fda7 	bl	8005c04 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e0ad      	b.n	8005226 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0da      	beq.n	800508a <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80050d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050d8:	2100      	movs	r1, #0
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fbd3 	bl	8005886 <HAL_ETH_WritePHYRegister>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80050ea:	6939      	ldr	r1, [r7, #16]
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fd89 	bl	8005c04 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80050fa:	2301      	movs	r3, #1
 80050fc:	e093      	b.n	8005226 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80050fe:	f7fe fca7 	bl	8003a50 <HAL_GetTick>
 8005102:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8005104:	f107 030c 	add.w	r3, r7, #12
 8005108:	461a      	mov	r2, r3
 800510a:	2101      	movs	r1, #1
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fb52 	bl	80057b6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8005112:	f7fe fc9d 	bl	8003a50 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005120:	4293      	cmp	r3, r2
 8005122:	d90f      	bls.n	8005144 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8005128:	6939      	ldr	r1, [r7, #16]
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fd6a 	bl	8005c04 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e070      	b.n	8005226 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f003 0320 	and.w	r3, r3, #32
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0da      	beq.n	8005104 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800514e:	f107 030c 	add.w	r3, r7, #12
 8005152:	461a      	mov	r2, r3
 8005154:	211f      	movs	r1, #31
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fb2d 	bl	80057b6 <HAL_ETH_ReadPHYRegister>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00b      	beq.n	800517a <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8005166:	6939      	ldr	r1, [r7, #16]
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fd4b 	bl	8005c04 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8005176:	2301      	movs	r3, #1
 8005178:	e055      	b.n	8005226 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	2b00      	cmp	r3, #0
 8005182:	d004      	beq.n	800518e <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800518a:	60da      	str	r2, [r3, #12]
 800518c:	e002      	b.n	8005194 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	609a      	str	r2, [r3, #8]
 80051a4:	e036      	b.n	8005214 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051ac:	609a      	str	r2, [r3, #8]
 80051ae:	e031      	b.n	8005214 <HAL_ETH_Init+0x31c>
 80051b0:	03938700 	.word	0x03938700
 80051b4:	40023800 	.word	0x40023800
 80051b8:	40013800 	.word	0x40013800
 80051bc:	01312cff 	.word	0x01312cff
 80051c0:	02160ebf 	.word	0x02160ebf
 80051c4:	039386ff 	.word	0x039386ff
 80051c8:	05f5e0ff 	.word	0x05f5e0ff
 80051cc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	08db      	lsrs	r3, r3, #3
 80051d6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	085b      	lsrs	r3, r3, #1
 80051de:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80051e0:	4313      	orrs	r3, r2
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	461a      	mov	r2, r3
 80051e6:	2100      	movs	r1, #0
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fb4c 	bl	8005886 <HAL_ETH_WritePHYRegister>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00b      	beq.n	800520c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80051f8:	6939      	ldr	r1, [r7, #16]
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fd02 	bl	8005c04 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e00c      	b.n	8005226 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800520c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005210:	f7fe fc2a 	bl	8003a68 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8005214:	6939      	ldr	r1, [r7, #16]
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fcf4 	bl	8005c04 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop

08005230 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_ETH_DMATxDescListInit+0x20>
 800524c:	2302      	movs	r3, #2
 800524e:	e052      	b.n	80052f6 <HAL_ETH_DMATxDescListInit+0xc6>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	e030      	b.n	80052ce <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	015b      	lsls	r3, r3, #5
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	4413      	add	r3, r2
 8005274:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800527c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005284:	fb02 f303 	mul.w	r3, r2, r3
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	4413      	add	r3, r2
 800528c:	461a      	mov	r2, r3
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d105      	bne.n	80052a6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d208      	bcs.n	80052c2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	3301      	adds	r3, #1
 80052b4:	015b      	lsls	r3, r3, #5
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	4413      	add	r3, r2
 80052ba:	461a      	mov	r2, r3
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	60da      	str	r2, [r3, #12]
 80052c0:	e002      	b.n	80052c8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	3301      	adds	r3, #1
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d3ca      	bcc.n	800526c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6819      	ldr	r1, [r3, #0]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	f241 0310 	movw	r3, #4112	; 0x1010
 80052e0:	440b      	add	r3, r1
 80052e2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8005302:	b480      	push	{r7}
 8005304:	b087      	sub	sp, #28
 8005306:	af00      	add	r7, sp, #0
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	607a      	str	r2, [r7, #4]
 800530e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800531a:	2b01      	cmp	r3, #1
 800531c:	d101      	bne.n	8005322 <HAL_ETH_DMARxDescListInit+0x20>
 800531e:	2302      	movs	r3, #2
 8005320:	e056      	b.n	80053d0 <HAL_ETH_DMARxDescListInit+0xce>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	e034      	b.n	80053a8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	015b      	lsls	r3, r3, #5
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	4413      	add	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800534e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8005356:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800535e:	fb02 f303 	mul.w	r3, r2, r3
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	4413      	add	r3, r2
 8005366:	461a      	mov	r2, r3
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d105      	bne.n	8005380 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	3b01      	subs	r3, #1
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	429a      	cmp	r2, r3
 8005388:	d208      	bcs.n	800539c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	3301      	adds	r3, #1
 800538e:	015b      	lsls	r3, r3, #5
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	4413      	add	r3, r2
 8005394:	461a      	mov	r2, r3
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	60da      	str	r2, [r3, #12]
 800539a:	e002      	b.n	80053a2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	3301      	adds	r3, #1
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d3c6      	bcc.n	800533e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6819      	ldr	r1, [r3, #0]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	f241 030c 	movw	r3, #4108	; 0x100c
 80053ba:	440b      	add	r3, r1
 80053bc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	2300      	movs	r3, #0
 80053f0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_ETH_TransmitFrame+0x24>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e0cd      	b.n	800559c <HAL_ETH_TransmitFrame+0x1c0>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d109      	bne.n	800542a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8005426:	2301      	movs	r3, #1
 8005428:	e0b8      	b.n	800559c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	da09      	bge.n	8005448 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2212      	movs	r2, #18
 8005438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e0a9      	b.n	800559c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800544e:	4293      	cmp	r3, r2
 8005450:	d915      	bls.n	800547e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	4a54      	ldr	r2, [pc, #336]	; (80055a8 <HAL_ETH_TransmitFrame+0x1cc>)
 8005456:	fba2 2303 	umull	r2, r3, r2, r3
 800545a:	0a9b      	lsrs	r3, r3, #10
 800545c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	4b51      	ldr	r3, [pc, #324]	; (80055a8 <HAL_ETH_TransmitFrame+0x1cc>)
 8005462:	fba3 1302 	umull	r1, r3, r3, r2
 8005466:	0a9b      	lsrs	r3, r3, #10
 8005468:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800546c:	fb01 f303 	mul.w	r3, r1, r3
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	3301      	adds	r3, #1
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	e001      	b.n	8005482 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800547e:	2301      	movs	r3, #1
 8005480:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d11c      	bne.n	80054c2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8005496:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80054a2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80054b2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	461a      	mov	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	62da      	str	r2, [r3, #44]	; 0x2c
 80054c0:	e04b      	b.n	800555a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80054c2:	2300      	movs	r3, #0
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	e044      	b.n	8005552 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054d6:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d107      	bne.n	80054ee <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80054ec:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80054f6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d116      	bne.n	8005530 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005510:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	4a25      	ldr	r2, [pc, #148]	; (80055ac <HAL_ETH_TransmitFrame+0x1d0>)
 8005516:	fb02 f203 	mul.w	r2, r2, r3
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	4413      	add	r3, r2
 800551e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005522:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800552e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800553e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	461a      	mov	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	3301      	adds	r3, #1
 8005550:	613b      	str	r3, [r7, #16]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	429a      	cmp	r2, r3
 8005558:	d3b6      	bcc.n	80054c8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	f241 0314 	movw	r3, #4116	; 0x1014
 8005562:	4413      	add	r3, r2
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00d      	beq.n	800558a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	f241 0314 	movw	r3, #4116	; 0x1014
 8005576:	4413      	add	r3, r2
 8005578:	2204      	movs	r2, #4
 800557a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	f241 0304 	movw	r3, #4100	; 0x1004
 8005584:	4413      	add	r3, r2
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	371c      	adds	r7, #28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	ac02b00b 	.word	0xac02b00b
 80055ac:	fffffa0c 	.word	0xfffffa0c

080055b0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d101      	bne.n	80055ca <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80055c6:	2302      	movs	r3, #2
 80055c8:	e074      	b.n	80056b4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2202      	movs	r2, #2
 80055d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80055da:	e05a      	b.n	8005692 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3301      	adds	r3, #1
 80055e0:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f0:	d10d      	bne.n	800560e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	461a      	mov	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	629a      	str	r2, [r3, #40]	; 0x28
 800560c:	e041      	b.n	8005692 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10b      	bne.n	8005634 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	461a      	mov	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	629a      	str	r2, [r3, #40]	; 0x28
 8005632:	e02e      	b.n	8005692 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	2b01      	cmp	r3, #1
 800564c:	d103      	bne.n	8005656 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	0c1b      	lsrs	r3, r3, #16
 800565e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005662:	1f1a      	subs	r2, r3, #4
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	461a      	mov	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	e010      	b.n	80056b4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	db02      	blt.n	80056a2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d99c      	bls.n	80055dc <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	f241 0314 	movw	r3, #4116	; 0x1014
 80056d0:	4413      	add	r3, r2
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b40      	cmp	r3, #64	; 0x40
 80056da:	d112      	bne.n	8005702 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f008 f9fd 	bl	800dadc <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	f241 0314 	movw	r3, #4116	; 0x1014
 80056ea:	4413      	add	r3, r2
 80056ec:	2240      	movs	r2, #64	; 0x40
 80056ee:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005700:	e01b      	b.n	800573a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	f241 0314 	movw	r3, #4116	; 0x1014
 800570a:	4413      	add	r3, r2
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b01      	cmp	r3, #1
 8005714:	d111      	bne.n	800573a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f839 	bl	800578e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	f241 0314 	movw	r3, #4116	; 0x1014
 8005724:	4413      	add	r3, r2
 8005726:	2201      	movs	r2, #1
 8005728:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	f241 0314 	movw	r3, #4116	; 0x1014
 8005742:	4413      	add	r3, r2
 8005744:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005748:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	f241 0314 	movw	r3, #4116	; 0x1014
 8005752:	4413      	add	r3, r2
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800575a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800575e:	d112      	bne.n	8005786 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f81e 	bl	80057a2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	f241 0314 	movw	r3, #4116	; 0x1014
 800576e:	4413      	add	r3, r2
 8005770:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005774:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8005786:	bf00      	nop
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b086      	sub	sp, #24
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	460b      	mov	r3, r1
 80057c0:	607a      	str	r2, [r7, #4]
 80057c2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80057c4:	2300      	movs	r3, #0
 80057c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b82      	cmp	r3, #130	; 0x82
 80057d6:	d101      	bne.n	80057dc <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80057d8:	2302      	movs	r3, #2
 80057da:	e050      	b.n	800587e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2282      	movs	r2, #130	; 0x82
 80057e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f003 031c 	and.w	r3, r3, #28
 80057f2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8a1b      	ldrh	r3, [r3, #16]
 80057f8:	02db      	lsls	r3, r3, #11
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8005802:	897b      	ldrh	r3, [r7, #10]
 8005804:	019b      	lsls	r3, r3, #6
 8005806:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	4313      	orrs	r3, r2
 800580e:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f023 0302 	bic.w	r3, r3, #2
 8005816:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f043 0301 	orr.w	r3, r3, #1
 800581e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005828:	f7fe f912 	bl	8003a50 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800582e:	e015      	b.n	800585c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8005830:	f7fe f90e 	bl	8003a50 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800583e:	d309      	bcc.n	8005854 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e014      	b.n	800587e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e4      	bne.n	8005830 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	b29b      	uxth	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b086      	sub	sp, #24
 800588a:	af00      	add	r7, sp, #0
 800588c:	60f8      	str	r0, [r7, #12]
 800588e:	460b      	mov	r3, r1
 8005890:	607a      	str	r2, [r7, #4]
 8005892:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8005898:	2300      	movs	r3, #0
 800589a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b42      	cmp	r3, #66	; 0x42
 80058a6:	d101      	bne.n	80058ac <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80058a8:	2302      	movs	r3, #2
 80058aa:	e04e      	b.n	800594a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2242      	movs	r2, #66	; 0x42
 80058b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f003 031c 	and.w	r3, r3, #28
 80058c2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8a1b      	ldrh	r3, [r3, #16]
 80058c8:	02db      	lsls	r3, r3, #11
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80058d2:	897b      	ldrh	r3, [r7, #10]
 80058d4:	019b      	lsls	r3, r3, #6
 80058d6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f043 0302 	orr.w	r3, r3, #2
 80058e6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f043 0301 	orr.w	r3, r3, #1
 80058ee:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005902:	f7fe f8a5 	bl	8003a50 <HAL_GetTick>
 8005906:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005908:	e015      	b.n	8005936 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800590a:	f7fe f8a1 	bl	8003a50 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005918:	d309      	bcc.n	800592e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e00d      	b.n	800594a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1e4      	bne.n	800590a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_ETH_Start+0x16>
 8005964:	2302      	movs	r3, #2
 8005966:	e01f      	b.n	80059a8 <HAL_ETH_Start+0x56>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fb45 	bl	8006008 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fb7c 	bl	800607c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fc13 	bl	80061b0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fbb0 	bl	80060f0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fbdd 	bl	8006150 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_ETH_Stop+0x16>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e01f      	b.n	8005a06 <HAL_ETH_Stop+0x56>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2202      	movs	r2, #2
 80059d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fba2 	bl	8006120 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fbcf 	bl	8006180 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fb67 	bl	80060b6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fbe1 	bl	80061b0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fb27 	bl	8006042 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_ETH_ConfigMAC+0x1c>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e0e4      	b.n	8005bf6 <HAL_ETH_ConfigMAC+0x1e6>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 80b1 	beq.w	8005ba6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4b6c      	ldr	r3, [pc, #432]	; (8005c00 <HAL_ETH_ConfigMAC+0x1f0>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8005a5c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8005a62:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8005a68:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8005a6e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8005a74:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8005a7a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8005a80:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8005a86:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8005a8c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8005a92:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8005a98:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8005a9e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	f7fd ffd6 	bl	8003a68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005acc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8005ad2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8005ad8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8005ade:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8005ae4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8005aea:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8005af6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005af8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b02:	2001      	movs	r0, #1
 8005b04:	f7fd ffb0 	bl	8003a68 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005b18:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005b22:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005b32:	4013      	ands	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8005b40:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8005b46:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8005b4c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8005b52:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8005b58:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b70:	2001      	movs	r0, #1
 8005b72:	f7fd ff79 	bl	8003a68 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b96:	2001      	movs	r0, #1
 8005b98:	f7fd ff66 	bl	8003a68 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	61da      	str	r2, [r3, #28]
 8005ba4:	e01e      	b.n	8005be4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005bb4:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005bd6:	2001      	movs	r0, #1
 8005bd8:	f7fd ff46 	bl	8003a68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	ff20810f 	.word	0xff20810f

08005c04 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b0b0      	sub	sp, #192	; 0xc0
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d007      	beq.n	8005c2a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c20:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c28:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8005c32:	2300      	movs	r3, #0
 8005c34:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d103      	bne.n	8005c52 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8005c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c4e:	663b      	str	r3, [r7, #96]	; 0x60
 8005c50:	e001      	b.n	8005c56 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8005c52:	2300      	movs	r3, #0
 8005c54:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8005c56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c5a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005c60:	2300      	movs	r3, #0
 8005c62:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005c64:	2300      	movs	r3, #0
 8005c66:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005c70:	2340      	movs	r3, #64	; 0x40
 8005c72:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005c80:	2300      	movs	r3, #0
 8005c82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8005c86:	2300      	movs	r3, #0
 8005c88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8005ca4:	2380      	movs	r3, #128	; 0x80
 8005ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005caa:	2300      	movs	r3, #0
 8005cac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8005cd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005cdc:	4bab      	ldr	r3, [pc, #684]	; (8005f8c <ETH_MACDMAConfig+0x388>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8005ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8005ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8005ce8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8005cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8005cec:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8005cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8005cf0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8005cf6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8005cf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8005cfa:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8005cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8005cfe:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8005d04:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8005d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8005d08:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8005d0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8005d0c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8005d0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8005d10:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8005d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8005d14:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8005d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8005d18:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8005d1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005d2c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d38:	2001      	movs	r0, #1
 8005d3a:	f7fd fe95 	bl	8003a68 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005d46:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005d48:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8005d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005d4c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005d4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005d50:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8005d52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8005d56:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005d5c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8005d62:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005d68:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005d6c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005d74:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005d76:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d82:	2001      	movs	r0, #1
 8005d84:	f7fd fe70 	bl	8003a68 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005d90:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d9a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005da4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8005db0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005db4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005db8:	4013      	ands	r3, r2
 8005dba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005dbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dc2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005dc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005dc8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8005dca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8005dce:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005dd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005dd4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8005dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8005dda:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8005ddc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005de0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005de2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005df4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005e00:	2001      	movs	r0, #1
 8005e02:	f7fd fe31 	bl	8003a68 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005e0e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005e10:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005e14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005e2a:	2001      	movs	r0, #1
 8005e2c:	f7fd fe1c 	bl	8003a68 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005e38:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8005e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e42:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005e44:	2300      	movs	r3, #0
 8005e46:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005e48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e4c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005e52:	2300      	movs	r3, #0
 8005e54:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005e56:	2300      	movs	r3, #0
 8005e58:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005e5e:	2304      	movs	r3, #4
 8005e60:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005e62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e6c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005e6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e72:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005e74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e78:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005e7a:	2380      	movs	r3, #128	; 0x80
 8005e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005e82:	2300      	movs	r3, #0
 8005e84:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	f241 0318 	movw	r3, #4120	; 0x1018
 8005e8e:	4413      	add	r3, r2
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8005e96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005e9a:	4b3d      	ldr	r3, [pc, #244]	; (8005f90 <ETH_MACDMAConfig+0x38c>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005ea2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005ea4:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005ea6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005ea8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005eaa:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005eac:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005eae:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005eb0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005eb2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005eb4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005eb6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005eba:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005ebe:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005ec2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005ec4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	f241 0318 	movw	r3, #4120	; 0x1018
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005edc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	f241 0318 	movw	r3, #4120	; 0x1018
 8005ee6:	4413      	add	r3, r2
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005eee:	2001      	movs	r0, #1
 8005ef0:	f7fd fdba 	bl	8003a68 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	f241 0318 	movw	r3, #4120	; 0x1018
 8005efc:	4413      	add	r3, r2
 8005efe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005f02:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005f08:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005f0c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005f10:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005f14:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8005f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f18:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8005f1a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8005f1e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f2c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f3c:	2001      	movs	r0, #1
 8005f3e:	f7fd fd93 	bl	8003a68 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005f4e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d10d      	bne.n	8005f74 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	f241 031c 	movw	r3, #4124	; 0x101c
 8005f60:	4413      	add	r3, r2
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6811      	ldr	r1, [r2, #0]
 8005f68:	4a0a      	ldr	r2, [pc, #40]	; (8005f94 <ETH_MACDMAConfig+0x390>)
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	f241 031c 	movw	r3, #4124	; 0x101c
 8005f70:	440b      	add	r3, r1
 8005f72:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f80b 	bl	8005f98 <ETH_MACAddressConfig>
}
 8005f82:	bf00      	nop
 8005f84:	37c0      	adds	r7, #192	; 0xc0
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	ff20810f 	.word	0xff20810f
 8005f90:	f8de3f23 	.word	0xf8de3f23
 8005f94:	00010040 	.word	0x00010040

08005f98 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3305      	adds	r3, #5
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	021b      	lsls	r3, r3, #8
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	3204      	adds	r2, #4
 8005fb0:	7812      	ldrb	r2, [r2, #0]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	4b11      	ldr	r3, [pc, #68]	; (8006000 <ETH_MACAddressConfig+0x68>)
 8005fba:	4413      	add	r3, r2
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3303      	adds	r3, #3
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	061a      	lsls	r2, r3, #24
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3302      	adds	r3, #2
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	041b      	lsls	r3, r3, #16
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	021b      	lsls	r3, r3, #8
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	7812      	ldrb	r2, [r2, #0]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	4b06      	ldr	r3, [pc, #24]	; (8006004 <ETH_MACAddressConfig+0x6c>)
 8005fea:	4413      	add	r3, r2
 8005fec:	461a      	mov	r2, r3
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	6013      	str	r3, [r2, #0]
}
 8005ff2:	bf00      	nop
 8005ff4:	371c      	adds	r7, #28
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40028040 	.word	0x40028040
 8006004:	40028044 	.word	0x40028044

08006008 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0208 	orr.w	r2, r2, #8
 8006022:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800602c:	2001      	movs	r0, #1
 800602e:	f7fd fd1b 	bl	8003a68 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	601a      	str	r2, [r3, #0]
}
 800603a:	bf00      	nop
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0208 	bic.w	r2, r2, #8
 800605c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006066:	2001      	movs	r0, #1
 8006068:	f7fd fcfe 	bl	8003a68 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	601a      	str	r2, [r3, #0]
}
 8006074:	bf00      	nop
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0204 	orr.w	r2, r2, #4
 8006096:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80060a0:	2001      	movs	r0, #1
 80060a2:	f7fd fce1 	bl	8003a68 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	601a      	str	r2, [r3, #0]
}
 80060ae:	bf00      	nop
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 0204 	bic.w	r2, r2, #4
 80060d0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80060da:	2001      	movs	r0, #1
 80060dc:	f7fd fcc4 	bl	8003a68 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	601a      	str	r2, [r3, #0]
}
 80060e8:	bf00      	nop
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	f241 0318 	movw	r3, #4120	; 0x1018
 8006100:	4413      	add	r3, r2
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6811      	ldr	r1, [r2, #0]
 8006108:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800610c:	f241 0318 	movw	r3, #4120	; 0x1018
 8006110:	440b      	add	r3, r1
 8006112:	601a      	str	r2, [r3, #0]
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	f241 0318 	movw	r3, #4120	; 0x1018
 8006130:	4413      	add	r3, r2
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6811      	ldr	r1, [r2, #0]
 8006138:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800613c:	f241 0318 	movw	r3, #4120	; 0x1018
 8006140:	440b      	add	r3, r1
 8006142:	601a      	str	r2, [r3, #0]
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	f241 0318 	movw	r3, #4120	; 0x1018
 8006160:	4413      	add	r3, r2
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6811      	ldr	r1, [r2, #0]
 8006168:	f043 0202 	orr.w	r2, r3, #2
 800616c:	f241 0318 	movw	r3, #4120	; 0x1018
 8006170:	440b      	add	r3, r1
 8006172:	601a      	str	r2, [r3, #0]
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	f241 0318 	movw	r3, #4120	; 0x1018
 8006190:	4413      	add	r3, r2
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6811      	ldr	r1, [r2, #0]
 8006198:	f023 0202 	bic.w	r2, r3, #2
 800619c:	f241 0318 	movw	r3, #4120	; 0x1018
 80061a0:	440b      	add	r3, r1
 80061a2:	601a      	str	r2, [r3, #0]
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	f241 0318 	movw	r3, #4120	; 0x1018
 80061c4:	4413      	add	r3, r2
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6811      	ldr	r1, [r2, #0]
 80061cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061d0:	f241 0318 	movw	r3, #4120	; 0x1018
 80061d4:	440b      	add	r3, r1
 80061d6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	f241 0318 	movw	r3, #4120	; 0x1018
 80061e0:	4413      	add	r3, r2
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80061e6:	2001      	movs	r0, #1
 80061e8:	f7fd fc3e 	bl	8003a68 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6819      	ldr	r1, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	f241 0318 	movw	r3, #4120	; 0x1018
 80061f6:	440b      	add	r3, r1
 80061f8:	601a      	str	r2, [r3, #0]
}
 80061fa:	bf00      	nop
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006204:	b480      	push	{r7}
 8006206:	b089      	sub	sp, #36	; 0x24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800620e:	2300      	movs	r3, #0
 8006210:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006212:	2300      	movs	r3, #0
 8006214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006216:	2300      	movs	r3, #0
 8006218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800621e:	2300      	movs	r3, #0
 8006220:	61fb      	str	r3, [r7, #28]
 8006222:	e175      	b.n	8006510 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006224:	2201      	movs	r2, #1
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	fa02 f303 	lsl.w	r3, r2, r3
 800622c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4013      	ands	r3, r2
 8006236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	429a      	cmp	r2, r3
 800623e:	f040 8164 	bne.w	800650a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d00b      	beq.n	8006262 <HAL_GPIO_Init+0x5e>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d007      	beq.n	8006262 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006256:	2b11      	cmp	r3, #17
 8006258:	d003      	beq.n	8006262 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2b12      	cmp	r3, #18
 8006260:	d130      	bne.n	80062c4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	2203      	movs	r2, #3
 800626e:	fa02 f303 	lsl.w	r3, r2, r3
 8006272:	43db      	mvns	r3, r3
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4013      	ands	r3, r2
 8006278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	fa02 f303 	lsl.w	r3, r2, r3
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	4313      	orrs	r3, r2
 800628a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006298:	2201      	movs	r2, #1
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	fa02 f303 	lsl.w	r3, r2, r3
 80062a0:	43db      	mvns	r3, r3
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	4013      	ands	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	091b      	lsrs	r3, r3, #4
 80062ae:	f003 0201 	and.w	r2, r3, #1
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	fa02 f303 	lsl.w	r3, r2, r3
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	2203      	movs	r2, #3
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	43db      	mvns	r3, r3
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	4013      	ands	r3, r2
 80062da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d003      	beq.n	8006304 <HAL_GPIO_Init+0x100>
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2b12      	cmp	r3, #18
 8006302:	d123      	bne.n	800634c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	08da      	lsrs	r2, r3, #3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3208      	adds	r2, #8
 800630c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	220f      	movs	r2, #15
 800631c:	fa02 f303 	lsl.w	r3, r2, r3
 8006320:	43db      	mvns	r3, r3
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	4013      	ands	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	fa02 f303 	lsl.w	r3, r2, r3
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	4313      	orrs	r3, r2
 800633c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	08da      	lsrs	r2, r3, #3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	3208      	adds	r2, #8
 8006346:	69b9      	ldr	r1, [r7, #24]
 8006348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	2203      	movs	r2, #3
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	43db      	mvns	r3, r3
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	4013      	ands	r3, r2
 8006362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f003 0203 	and.w	r2, r3, #3
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	4313      	orrs	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 80be 	beq.w	800650a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800638e:	4b65      	ldr	r3, [pc, #404]	; (8006524 <HAL_GPIO_Init+0x320>)
 8006390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006392:	4a64      	ldr	r2, [pc, #400]	; (8006524 <HAL_GPIO_Init+0x320>)
 8006394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006398:	6453      	str	r3, [r2, #68]	; 0x44
 800639a:	4b62      	ldr	r3, [pc, #392]	; (8006524 <HAL_GPIO_Init+0x320>)
 800639c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80063a6:	4a60      	ldr	r2, [pc, #384]	; (8006528 <HAL_GPIO_Init+0x324>)
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	089b      	lsrs	r3, r3, #2
 80063ac:	3302      	adds	r3, #2
 80063ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	f003 0303 	and.w	r3, r3, #3
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	220f      	movs	r2, #15
 80063be:	fa02 f303 	lsl.w	r3, r2, r3
 80063c2:	43db      	mvns	r3, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4013      	ands	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a57      	ldr	r2, [pc, #348]	; (800652c <HAL_GPIO_Init+0x328>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d037      	beq.n	8006442 <HAL_GPIO_Init+0x23e>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a56      	ldr	r2, [pc, #344]	; (8006530 <HAL_GPIO_Init+0x32c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d031      	beq.n	800643e <HAL_GPIO_Init+0x23a>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a55      	ldr	r2, [pc, #340]	; (8006534 <HAL_GPIO_Init+0x330>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d02b      	beq.n	800643a <HAL_GPIO_Init+0x236>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a54      	ldr	r2, [pc, #336]	; (8006538 <HAL_GPIO_Init+0x334>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d025      	beq.n	8006436 <HAL_GPIO_Init+0x232>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a53      	ldr	r2, [pc, #332]	; (800653c <HAL_GPIO_Init+0x338>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d01f      	beq.n	8006432 <HAL_GPIO_Init+0x22e>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a52      	ldr	r2, [pc, #328]	; (8006540 <HAL_GPIO_Init+0x33c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d019      	beq.n	800642e <HAL_GPIO_Init+0x22a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a51      	ldr	r2, [pc, #324]	; (8006544 <HAL_GPIO_Init+0x340>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d013      	beq.n	800642a <HAL_GPIO_Init+0x226>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a50      	ldr	r2, [pc, #320]	; (8006548 <HAL_GPIO_Init+0x344>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00d      	beq.n	8006426 <HAL_GPIO_Init+0x222>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a4f      	ldr	r2, [pc, #316]	; (800654c <HAL_GPIO_Init+0x348>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d007      	beq.n	8006422 <HAL_GPIO_Init+0x21e>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a4e      	ldr	r2, [pc, #312]	; (8006550 <HAL_GPIO_Init+0x34c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d101      	bne.n	800641e <HAL_GPIO_Init+0x21a>
 800641a:	2309      	movs	r3, #9
 800641c:	e012      	b.n	8006444 <HAL_GPIO_Init+0x240>
 800641e:	230a      	movs	r3, #10
 8006420:	e010      	b.n	8006444 <HAL_GPIO_Init+0x240>
 8006422:	2308      	movs	r3, #8
 8006424:	e00e      	b.n	8006444 <HAL_GPIO_Init+0x240>
 8006426:	2307      	movs	r3, #7
 8006428:	e00c      	b.n	8006444 <HAL_GPIO_Init+0x240>
 800642a:	2306      	movs	r3, #6
 800642c:	e00a      	b.n	8006444 <HAL_GPIO_Init+0x240>
 800642e:	2305      	movs	r3, #5
 8006430:	e008      	b.n	8006444 <HAL_GPIO_Init+0x240>
 8006432:	2304      	movs	r3, #4
 8006434:	e006      	b.n	8006444 <HAL_GPIO_Init+0x240>
 8006436:	2303      	movs	r3, #3
 8006438:	e004      	b.n	8006444 <HAL_GPIO_Init+0x240>
 800643a:	2302      	movs	r3, #2
 800643c:	e002      	b.n	8006444 <HAL_GPIO_Init+0x240>
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <HAL_GPIO_Init+0x240>
 8006442:	2300      	movs	r3, #0
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	f002 0203 	and.w	r2, r2, #3
 800644a:	0092      	lsls	r2, r2, #2
 800644c:	4093      	lsls	r3, r2
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	4313      	orrs	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006454:	4934      	ldr	r1, [pc, #208]	; (8006528 <HAL_GPIO_Init+0x324>)
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	089b      	lsrs	r3, r3, #2
 800645a:	3302      	adds	r3, #2
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006462:	4b3c      	ldr	r3, [pc, #240]	; (8006554 <HAL_GPIO_Init+0x350>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	43db      	mvns	r3, r3
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	4013      	ands	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006486:	4a33      	ldr	r2, [pc, #204]	; (8006554 <HAL_GPIO_Init+0x350>)
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800648c:	4b31      	ldr	r3, [pc, #196]	; (8006554 <HAL_GPIO_Init+0x350>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	43db      	mvns	r3, r3
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	4013      	ands	r3, r2
 800649a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064b0:	4a28      	ldr	r2, [pc, #160]	; (8006554 <HAL_GPIO_Init+0x350>)
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064b6:	4b27      	ldr	r3, [pc, #156]	; (8006554 <HAL_GPIO_Init+0x350>)
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	43db      	mvns	r3, r3
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	4013      	ands	r3, r2
 80064c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064da:	4a1e      	ldr	r2, [pc, #120]	; (8006554 <HAL_GPIO_Init+0x350>)
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064e0:	4b1c      	ldr	r3, [pc, #112]	; (8006554 <HAL_GPIO_Init+0x350>)
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	43db      	mvns	r3, r3
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	4013      	ands	r3, r2
 80064ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006504:	4a13      	ldr	r2, [pc, #76]	; (8006554 <HAL_GPIO_Init+0x350>)
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	3301      	adds	r3, #1
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	2b0f      	cmp	r3, #15
 8006514:	f67f ae86 	bls.w	8006224 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006518:	bf00      	nop
 800651a:	3724      	adds	r7, #36	; 0x24
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	40023800 	.word	0x40023800
 8006528:	40013800 	.word	0x40013800
 800652c:	40020000 	.word	0x40020000
 8006530:	40020400 	.word	0x40020400
 8006534:	40020800 	.word	0x40020800
 8006538:	40020c00 	.word	0x40020c00
 800653c:	40021000 	.word	0x40021000
 8006540:	40021400 	.word	0x40021400
 8006544:	40021800 	.word	0x40021800
 8006548:	40021c00 	.word	0x40021c00
 800654c:	40022000 	.word	0x40022000
 8006550:	40022400 	.word	0x40022400
 8006554:	40013c00 	.word	0x40013c00

08006558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	807b      	strh	r3, [r7, #2]
 8006564:	4613      	mov	r3, r2
 8006566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006568:	787b      	ldrb	r3, [r7, #1]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800656e:	887a      	ldrh	r2, [r7, #2]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006574:	e003      	b.n	800657e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006576:	887b      	ldrh	r3, [r7, #2]
 8006578:	041a      	lsls	r2, r3, #16
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	619a      	str	r2, [r3, #24]
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800658a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800658c:	b08f      	sub	sp, #60	; 0x3c
 800658e:	af0a      	add	r7, sp, #40	; 0x28
 8006590:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e054      	b.n	8006646 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d106      	bne.n	80065bc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f01a f9e0 	bl	802097c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2203      	movs	r2, #3
 80065c0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d102      	bne.n	80065d6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4618      	mov	r0, r3
 80065dc:	f006 fa79 	bl	800cad2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	603b      	str	r3, [r7, #0]
 80065e6:	687e      	ldr	r6, [r7, #4]
 80065e8:	466d      	mov	r5, sp
 80065ea:	f106 0410 	add.w	r4, r6, #16
 80065ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80065fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80065fe:	1d33      	adds	r3, r6, #4
 8006600:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006602:	6838      	ldr	r0, [r7, #0]
 8006604:	f006 f9fc 	bl	800ca00 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2101      	movs	r1, #1
 800660e:	4618      	mov	r0, r3
 8006610:	f006 fa70 	bl	800caf4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	603b      	str	r3, [r7, #0]
 800661a:	687e      	ldr	r6, [r7, #4]
 800661c:	466d      	mov	r5, sp
 800661e:	f106 0410 	add.w	r4, r6, #16
 8006622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800662a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800662e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006632:	1d33      	adds	r3, r6, #4
 8006634:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006636:	6838      	ldr	r0, [r7, #0]
 8006638:	f006 fb82 	bl	800cd40 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800664e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800664e:	b590      	push	{r4, r7, lr}
 8006650:	b089      	sub	sp, #36	; 0x24
 8006652:	af04      	add	r7, sp, #16
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	4608      	mov	r0, r1
 8006658:	4611      	mov	r1, r2
 800665a:	461a      	mov	r2, r3
 800665c:	4603      	mov	r3, r0
 800665e:	70fb      	strb	r3, [r7, #3]
 8006660:	460b      	mov	r3, r1
 8006662:	70bb      	strb	r3, [r7, #2]
 8006664:	4613      	mov	r3, r2
 8006666:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800666e:	2b01      	cmp	r3, #1
 8006670:	d101      	bne.n	8006676 <HAL_HCD_HC_Init+0x28>
 8006672:	2302      	movs	r3, #2
 8006674:	e076      	b.n	8006764 <HAL_HCD_HC_Init+0x116>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800667e:	78fb      	ldrb	r3, [r7, #3]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	212c      	movs	r1, #44	; 0x2c
 8006684:	fb01 f303 	mul.w	r3, r1, r3
 8006688:	4413      	add	r3, r2
 800668a:	333d      	adds	r3, #61	; 0x3d
 800668c:	2200      	movs	r2, #0
 800668e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	212c      	movs	r1, #44	; 0x2c
 8006696:	fb01 f303 	mul.w	r3, r1, r3
 800669a:	4413      	add	r3, r2
 800669c:	3338      	adds	r3, #56	; 0x38
 800669e:	787a      	ldrb	r2, [r7, #1]
 80066a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	212c      	movs	r1, #44	; 0x2c
 80066a8:	fb01 f303 	mul.w	r3, r1, r3
 80066ac:	4413      	add	r3, r2
 80066ae:	3340      	adds	r3, #64	; 0x40
 80066b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80066b2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	212c      	movs	r1, #44	; 0x2c
 80066ba:	fb01 f303 	mul.w	r3, r1, r3
 80066be:	4413      	add	r3, r2
 80066c0:	3339      	adds	r3, #57	; 0x39
 80066c2:	78fa      	ldrb	r2, [r7, #3]
 80066c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	212c      	movs	r1, #44	; 0x2c
 80066cc:	fb01 f303 	mul.w	r3, r1, r3
 80066d0:	4413      	add	r3, r2
 80066d2:	333f      	adds	r3, #63	; 0x3f
 80066d4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80066d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80066da:	78fb      	ldrb	r3, [r7, #3]
 80066dc:	78ba      	ldrb	r2, [r7, #2]
 80066de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066e2:	b2d0      	uxtb	r0, r2
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	212c      	movs	r1, #44	; 0x2c
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	4413      	add	r3, r2
 80066ee:	333a      	adds	r3, #58	; 0x3a
 80066f0:	4602      	mov	r2, r0
 80066f2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80066f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	da09      	bge.n	8006710 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	212c      	movs	r1, #44	; 0x2c
 8006702:	fb01 f303 	mul.w	r3, r1, r3
 8006706:	4413      	add	r3, r2
 8006708:	333b      	adds	r3, #59	; 0x3b
 800670a:	2201      	movs	r2, #1
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	e008      	b.n	8006722 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	212c      	movs	r1, #44	; 0x2c
 8006716:	fb01 f303 	mul.w	r3, r1, r3
 800671a:	4413      	add	r3, r2
 800671c:	333b      	adds	r3, #59	; 0x3b
 800671e:	2200      	movs	r2, #0
 8006720:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8006722:	78fb      	ldrb	r3, [r7, #3]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	212c      	movs	r1, #44	; 0x2c
 8006728:	fb01 f303 	mul.w	r3, r1, r3
 800672c:	4413      	add	r3, r2
 800672e:	333c      	adds	r3, #60	; 0x3c
 8006730:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006734:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6818      	ldr	r0, [r3, #0]
 800673a:	787c      	ldrb	r4, [r7, #1]
 800673c:	78ba      	ldrb	r2, [r7, #2]
 800673e:	78f9      	ldrb	r1, [r7, #3]
 8006740:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006742:	9302      	str	r3, [sp, #8]
 8006744:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006748:	9301      	str	r3, [sp, #4]
 800674a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	4623      	mov	r3, r4
 8006752:	f006 fc6b 	bl	800d02c <USB_HC_Init>
 8006756:	4603      	mov	r3, r0
 8006758:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006762:	7bfb      	ldrb	r3, [r7, #15]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	bd90      	pop	{r4, r7, pc}

0800676c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <HAL_HCD_HC_Halt+0x1e>
 8006786:	2302      	movs	r3, #2
 8006788:	e00f      	b.n	80067aa <HAL_HCD_HC_Halt+0x3e>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	78fa      	ldrb	r2, [r7, #3]
 8006798:	4611      	mov	r1, r2
 800679a:	4618      	mov	r0, r3
 800679c:	f006 fea9 	bl	800d4f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
	...

080067b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	4608      	mov	r0, r1
 80067be:	4611      	mov	r1, r2
 80067c0:	461a      	mov	r2, r3
 80067c2:	4603      	mov	r3, r0
 80067c4:	70fb      	strb	r3, [r7, #3]
 80067c6:	460b      	mov	r3, r1
 80067c8:	70bb      	strb	r3, [r7, #2]
 80067ca:	4613      	mov	r3, r2
 80067cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	212c      	movs	r1, #44	; 0x2c
 80067d4:	fb01 f303 	mul.w	r3, r1, r3
 80067d8:	4413      	add	r3, r2
 80067da:	333b      	adds	r3, #59	; 0x3b
 80067dc:	78ba      	ldrb	r2, [r7, #2]
 80067de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	212c      	movs	r1, #44	; 0x2c
 80067e6:	fb01 f303 	mul.w	r3, r1, r3
 80067ea:	4413      	add	r3, r2
 80067ec:	333f      	adds	r3, #63	; 0x3f
 80067ee:	787a      	ldrb	r2, [r7, #1]
 80067f0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80067f2:	7c3b      	ldrb	r3, [r7, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d112      	bne.n	800681e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	212c      	movs	r1, #44	; 0x2c
 80067fe:	fb01 f303 	mul.w	r3, r1, r3
 8006802:	4413      	add	r3, r2
 8006804:	3342      	adds	r3, #66	; 0x42
 8006806:	2203      	movs	r2, #3
 8006808:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800680a:	78fb      	ldrb	r3, [r7, #3]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	212c      	movs	r1, #44	; 0x2c
 8006810:	fb01 f303 	mul.w	r3, r1, r3
 8006814:	4413      	add	r3, r2
 8006816:	333d      	adds	r3, #61	; 0x3d
 8006818:	7f3a      	ldrb	r2, [r7, #28]
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	e008      	b.n	8006830 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800681e:	78fb      	ldrb	r3, [r7, #3]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	212c      	movs	r1, #44	; 0x2c
 8006824:	fb01 f303 	mul.w	r3, r1, r3
 8006828:	4413      	add	r3, r2
 800682a:	3342      	adds	r3, #66	; 0x42
 800682c:	2202      	movs	r2, #2
 800682e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006830:	787b      	ldrb	r3, [r7, #1]
 8006832:	2b03      	cmp	r3, #3
 8006834:	f200 80c6 	bhi.w	80069c4 <HAL_HCD_HC_SubmitRequest+0x210>
 8006838:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800683a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683e:	bf00      	nop
 8006840:	08006851 	.word	0x08006851
 8006844:	080069b1 	.word	0x080069b1
 8006848:	080068b5 	.word	0x080068b5
 800684c:	08006933 	.word	0x08006933
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8006850:	7c3b      	ldrb	r3, [r7, #16]
 8006852:	2b01      	cmp	r3, #1
 8006854:	f040 80b8 	bne.w	80069c8 <HAL_HCD_HC_SubmitRequest+0x214>
 8006858:	78bb      	ldrb	r3, [r7, #2]
 800685a:	2b00      	cmp	r3, #0
 800685c:	f040 80b4 	bne.w	80069c8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8006860:	8b3b      	ldrh	r3, [r7, #24]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d108      	bne.n	8006878 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	212c      	movs	r1, #44	; 0x2c
 800686c:	fb01 f303 	mul.w	r3, r1, r3
 8006870:	4413      	add	r3, r2
 8006872:	3355      	adds	r3, #85	; 0x55
 8006874:	2201      	movs	r2, #1
 8006876:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	212c      	movs	r1, #44	; 0x2c
 800687e:	fb01 f303 	mul.w	r3, r1, r3
 8006882:	4413      	add	r3, r2
 8006884:	3355      	adds	r3, #85	; 0x55
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d109      	bne.n	80068a0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800688c:	78fb      	ldrb	r3, [r7, #3]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	212c      	movs	r1, #44	; 0x2c
 8006892:	fb01 f303 	mul.w	r3, r1, r3
 8006896:	4413      	add	r3, r2
 8006898:	3342      	adds	r3, #66	; 0x42
 800689a:	2200      	movs	r2, #0
 800689c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800689e:	e093      	b.n	80069c8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	212c      	movs	r1, #44	; 0x2c
 80068a6:	fb01 f303 	mul.w	r3, r1, r3
 80068aa:	4413      	add	r3, r2
 80068ac:	3342      	adds	r3, #66	; 0x42
 80068ae:	2202      	movs	r2, #2
 80068b0:	701a      	strb	r2, [r3, #0]
      break;
 80068b2:	e089      	b.n	80069c8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80068b4:	78bb      	ldrb	r3, [r7, #2]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d11d      	bne.n	80068f6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	212c      	movs	r1, #44	; 0x2c
 80068c0:	fb01 f303 	mul.w	r3, r1, r3
 80068c4:	4413      	add	r3, r2
 80068c6:	3355      	adds	r3, #85	; 0x55
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80068ce:	78fb      	ldrb	r3, [r7, #3]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	212c      	movs	r1, #44	; 0x2c
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	4413      	add	r3, r2
 80068da:	3342      	adds	r3, #66	; 0x42
 80068dc:	2200      	movs	r2, #0
 80068de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80068e0:	e073      	b.n	80069ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80068e2:	78fb      	ldrb	r3, [r7, #3]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	212c      	movs	r1, #44	; 0x2c
 80068e8:	fb01 f303 	mul.w	r3, r1, r3
 80068ec:	4413      	add	r3, r2
 80068ee:	3342      	adds	r3, #66	; 0x42
 80068f0:	2202      	movs	r2, #2
 80068f2:	701a      	strb	r2, [r3, #0]
      break;
 80068f4:	e069      	b.n	80069ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80068f6:	78fb      	ldrb	r3, [r7, #3]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	212c      	movs	r1, #44	; 0x2c
 80068fc:	fb01 f303 	mul.w	r3, r1, r3
 8006900:	4413      	add	r3, r2
 8006902:	3354      	adds	r3, #84	; 0x54
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d109      	bne.n	800691e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	212c      	movs	r1, #44	; 0x2c
 8006910:	fb01 f303 	mul.w	r3, r1, r3
 8006914:	4413      	add	r3, r2
 8006916:	3342      	adds	r3, #66	; 0x42
 8006918:	2200      	movs	r2, #0
 800691a:	701a      	strb	r2, [r3, #0]
      break;
 800691c:	e055      	b.n	80069ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800691e:	78fb      	ldrb	r3, [r7, #3]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	212c      	movs	r1, #44	; 0x2c
 8006924:	fb01 f303 	mul.w	r3, r1, r3
 8006928:	4413      	add	r3, r2
 800692a:	3342      	adds	r3, #66	; 0x42
 800692c:	2202      	movs	r2, #2
 800692e:	701a      	strb	r2, [r3, #0]
      break;
 8006930:	e04b      	b.n	80069ca <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006932:	78bb      	ldrb	r3, [r7, #2]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d11d      	bne.n	8006974 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006938:	78fb      	ldrb	r3, [r7, #3]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	212c      	movs	r1, #44	; 0x2c
 800693e:	fb01 f303 	mul.w	r3, r1, r3
 8006942:	4413      	add	r3, r2
 8006944:	3355      	adds	r3, #85	; 0x55
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d109      	bne.n	8006960 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	212c      	movs	r1, #44	; 0x2c
 8006952:	fb01 f303 	mul.w	r3, r1, r3
 8006956:	4413      	add	r3, r2
 8006958:	3342      	adds	r3, #66	; 0x42
 800695a:	2200      	movs	r2, #0
 800695c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800695e:	e034      	b.n	80069ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	212c      	movs	r1, #44	; 0x2c
 8006966:	fb01 f303 	mul.w	r3, r1, r3
 800696a:	4413      	add	r3, r2
 800696c:	3342      	adds	r3, #66	; 0x42
 800696e:	2202      	movs	r2, #2
 8006970:	701a      	strb	r2, [r3, #0]
      break;
 8006972:	e02a      	b.n	80069ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	212c      	movs	r1, #44	; 0x2c
 800697a:	fb01 f303 	mul.w	r3, r1, r3
 800697e:	4413      	add	r3, r2
 8006980:	3354      	adds	r3, #84	; 0x54
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d109      	bne.n	800699c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	212c      	movs	r1, #44	; 0x2c
 800698e:	fb01 f303 	mul.w	r3, r1, r3
 8006992:	4413      	add	r3, r2
 8006994:	3342      	adds	r3, #66	; 0x42
 8006996:	2200      	movs	r2, #0
 8006998:	701a      	strb	r2, [r3, #0]
      break;
 800699a:	e016      	b.n	80069ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	212c      	movs	r1, #44	; 0x2c
 80069a2:	fb01 f303 	mul.w	r3, r1, r3
 80069a6:	4413      	add	r3, r2
 80069a8:	3342      	adds	r3, #66	; 0x42
 80069aa:	2202      	movs	r2, #2
 80069ac:	701a      	strb	r2, [r3, #0]
      break;
 80069ae:	e00c      	b.n	80069ca <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	212c      	movs	r1, #44	; 0x2c
 80069b6:	fb01 f303 	mul.w	r3, r1, r3
 80069ba:	4413      	add	r3, r2
 80069bc:	3342      	adds	r3, #66	; 0x42
 80069be:	2200      	movs	r2, #0
 80069c0:	701a      	strb	r2, [r3, #0]
      break;
 80069c2:	e002      	b.n	80069ca <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80069c4:	bf00      	nop
 80069c6:	e000      	b.n	80069ca <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80069c8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80069ca:	78fb      	ldrb	r3, [r7, #3]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	212c      	movs	r1, #44	; 0x2c
 80069d0:	fb01 f303 	mul.w	r3, r1, r3
 80069d4:	4413      	add	r3, r2
 80069d6:	3344      	adds	r3, #68	; 0x44
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80069dc:	78fb      	ldrb	r3, [r7, #3]
 80069de:	8b3a      	ldrh	r2, [r7, #24]
 80069e0:	6879      	ldr	r1, [r7, #4]
 80069e2:	202c      	movs	r0, #44	; 0x2c
 80069e4:	fb00 f303 	mul.w	r3, r0, r3
 80069e8:	440b      	add	r3, r1
 80069ea:	334c      	adds	r3, #76	; 0x4c
 80069ec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	212c      	movs	r1, #44	; 0x2c
 80069f4:	fb01 f303 	mul.w	r3, r1, r3
 80069f8:	4413      	add	r3, r2
 80069fa:	3360      	adds	r3, #96	; 0x60
 80069fc:	2200      	movs	r2, #0
 80069fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	212c      	movs	r1, #44	; 0x2c
 8006a06:	fb01 f303 	mul.w	r3, r1, r3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3350      	adds	r3, #80	; 0x50
 8006a0e:	2200      	movs	r2, #0
 8006a10:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006a12:	78fb      	ldrb	r3, [r7, #3]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	212c      	movs	r1, #44	; 0x2c
 8006a18:	fb01 f303 	mul.w	r3, r1, r3
 8006a1c:	4413      	add	r3, r2
 8006a1e:	3339      	adds	r3, #57	; 0x39
 8006a20:	78fa      	ldrb	r2, [r7, #3]
 8006a22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006a24:	78fb      	ldrb	r3, [r7, #3]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	212c      	movs	r1, #44	; 0x2c
 8006a2a:	fb01 f303 	mul.w	r3, r1, r3
 8006a2e:	4413      	add	r3, r2
 8006a30:	3361      	adds	r3, #97	; 0x61
 8006a32:	2200      	movs	r2, #0
 8006a34:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	222c      	movs	r2, #44	; 0x2c
 8006a3e:	fb02 f303 	mul.w	r3, r2, r3
 8006a42:	3338      	adds	r3, #56	; 0x38
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	18d1      	adds	r1, r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f006 fbfa 	bl	800d248 <USB_HC_StartXfer>
 8006a54:	4603      	mov	r3, r0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop

08006a60 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f006 f91f 	bl	800ccba <USB_GetMode>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	f040 80ef 	bne.w	8006c62 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f006 f903 	bl	800cc94 <USB_ReadInterrupts>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 80e5 	beq.w	8006c60 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f006 f8fa 	bl	800cc94 <USB_ReadInterrupts>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aaa:	d104      	bne.n	8006ab6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006ab4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f006 f8ea 	bl	800cc94 <USB_ReadInterrupts>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aca:	d104      	bne.n	8006ad6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ad4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f006 f8da 	bl	800cc94 <USB_ReadInterrupts>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ae6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006aea:	d104      	bne.n	8006af6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006af4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f006 f8ca 	bl	800cc94 <USB_ReadInterrupts>
 8006b00:	4603      	mov	r3, r0
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d103      	bne.n	8006b12 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f006 f8bc 	bl	800cc94 <USB_ReadInterrupts>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b26:	d115      	bne.n	8006b54 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006b30:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d108      	bne.n	8006b54 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f019 ff8c 	bl	8020a60 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f006 f9a6 	bl	800cea0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f006 f89b 	bl	800cc94 <USB_ReadInterrupts>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b68:	d102      	bne.n	8006b70 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f001 fa03 	bl	8007f76 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f006 f88d 	bl	800cc94 <USB_ReadInterrupts>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	f003 0308 	and.w	r3, r3, #8
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d106      	bne.n	8006b92 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f019 ff4f 	bl	8020a28 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2208      	movs	r2, #8
 8006b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f006 f87c 	bl	800cc94 <USB_ReadInterrupts>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	f003 0310 	and.w	r3, r3, #16
 8006ba2:	2b10      	cmp	r3, #16
 8006ba4:	d101      	bne.n	8006baa <HAL_HCD_IRQHandler+0x14a>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e000      	b.n	8006bac <HAL_HCD_IRQHandler+0x14c>
 8006baa:	2300      	movs	r3, #0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d012      	beq.n	8006bd6 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699a      	ldr	r2, [r3, #24]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0210 	bic.w	r2, r2, #16
 8006bbe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 f907 	bl	8007dd4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f042 0210 	orr.w	r2, r2, #16
 8006bd4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f006 f85a 	bl	800cc94 <USB_ReadInterrupts>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bea:	d13a      	bne.n	8006c62 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f006 fc6d 	bl	800d4d0 <USB_HC_ReadInterrupt>
 8006bf6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	e025      	b.n	8006c4a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	fa22 f303 	lsr.w	r3, r2, r3
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d018      	beq.n	8006c44 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c28:	d106      	bne.n	8006c38 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f8ab 	bl	8006d8c <HCD_HC_IN_IRQHandler>
 8006c36:	e005      	b.n	8006c44 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fcc9 	bl	80075d6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	3301      	adds	r3, #1
 8006c48:	617b      	str	r3, [r7, #20]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d3d4      	bcc.n	8006bfe <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c5c:	615a      	str	r2, [r3, #20]
 8006c5e:	e000      	b.n	8006c62 <HAL_HCD_IRQHandler+0x202>
      return;
 8006c60:	bf00      	nop
    }
  }
}
 8006c62:	3718      	adds	r7, #24
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d101      	bne.n	8006c7e <HAL_HCD_Start+0x16>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	e013      	b.n	8006ca6 <HAL_HCD_Start+0x3e>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f005 ff10 	bl	800cab0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2101      	movs	r1, #1
 8006c96:	4618      	mov	r0, r3
 8006c98:	f006 f966 	bl	800cf68 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b082      	sub	sp, #8
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_HCD_Stop+0x16>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e00d      	b.n	8006ce0 <HAL_HCD_Stop+0x32>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f006 fd67 	bl	800d7a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f006 f90d 	bl	800cf14 <USB_ResetPort>
 8006cfa:	4603      	mov	r3, r0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	212c      	movs	r1, #44	; 0x2c
 8006d16:	fb01 f303 	mul.w	r3, r1, r3
 8006d1a:	4413      	add	r3, r2
 8006d1c:	3360      	adds	r3, #96	; 0x60
 8006d1e:	781b      	ldrb	r3, [r3, #0]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006d38:	78fb      	ldrb	r3, [r7, #3]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	212c      	movs	r1, #44	; 0x2c
 8006d3e:	fb01 f303 	mul.w	r3, r1, r3
 8006d42:	4413      	add	r3, r2
 8006d44:	3350      	adds	r3, #80	; 0x50
 8006d46:	681b      	ldr	r3, [r3, #0]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f006 f951 	bl	800d008 <USB_GetCurrentFrame>
 8006d66:	4603      	mov	r3, r0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f006 f92c 	bl	800cfda <USB_GetHostSpeed>
 8006d82:	4603      	mov	r3, r0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	460b      	mov	r3, r1
 8006d96:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006da2:	78fb      	ldrb	r3, [r7, #3]
 8006da4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f003 0304 	and.w	r3, r3, #4
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d119      	bne.n	8006df0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc8:	461a      	mov	r2, r3
 8006dca:	2304      	movs	r3, #4
 8006dcc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	0151      	lsls	r1, r2, #5
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	440a      	add	r2, r1
 8006de4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006de8:	f043 0302 	orr.w	r3, r3, #2
 8006dec:	60d3      	str	r3, [r2, #12]
 8006dee:	e101      	b.n	8006ff4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e06:	d12b      	bne.n	8006e60 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e14:	461a      	mov	r2, r3
 8006e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	212c      	movs	r1, #44	; 0x2c
 8006e22:	fb01 f303 	mul.w	r3, r1, r3
 8006e26:	4413      	add	r3, r2
 8006e28:	3361      	adds	r3, #97	; 0x61
 8006e2a:	2207      	movs	r2, #7
 8006e2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	0151      	lsls	r1, r2, #5
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	440a      	add	r2, r1
 8006e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e48:	f043 0302 	orr.w	r3, r3, #2
 8006e4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	4611      	mov	r1, r2
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f006 fb4a 	bl	800d4f2 <USB_HC_Halt>
 8006e5e:	e0c9      	b.n	8006ff4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f003 0320 	and.w	r3, r3, #32
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	d109      	bne.n	8006e8a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	015a      	lsls	r2, r3, #5
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e82:	461a      	mov	r2, r3
 8006e84:	2320      	movs	r3, #32
 8006e86:	6093      	str	r3, [r2, #8]
 8006e88:	e0b4      	b.n	8006ff4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f003 0308 	and.w	r3, r3, #8
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d133      	bne.n	8006f08 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	0151      	lsls	r1, r2, #5
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eba:	f043 0302 	orr.w	r3, r3, #2
 8006ebe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	212c      	movs	r1, #44	; 0x2c
 8006ec6:	fb01 f303 	mul.w	r3, r1, r3
 8006eca:	4413      	add	r3, r2
 8006ecc:	3361      	adds	r3, #97	; 0x61
 8006ece:	2205      	movs	r2, #5
 8006ed0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ede:	461a      	mov	r2, r3
 8006ee0:	2310      	movs	r3, #16
 8006ee2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	2308      	movs	r3, #8
 8006ef4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	4611      	mov	r1, r2
 8006f00:	4618      	mov	r0, r3
 8006f02:	f006 faf6 	bl	800d4f2 <USB_HC_Halt>
 8006f06:	e075      	b.n	8006ff4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f1e:	d134      	bne.n	8006f8a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	0151      	lsls	r1, r2, #5
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	440a      	add	r2, r1
 8006f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f3a:	f043 0302 	orr.w	r3, r3, #2
 8006f3e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	212c      	movs	r1, #44	; 0x2c
 8006f46:	fb01 f303 	mul.w	r3, r1, r3
 8006f4a:	4413      	add	r3, r2
 8006f4c:	3361      	adds	r3, #97	; 0x61
 8006f4e:	2208      	movs	r2, #8
 8006f50:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f5e:	461a      	mov	r2, r3
 8006f60:	2310      	movs	r3, #16
 8006f62:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f70:	461a      	mov	r2, r3
 8006f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f76:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	4611      	mov	r1, r2
 8006f82:	4618      	mov	r0, r3
 8006f84:	f006 fab5 	bl	800d4f2 <USB_HC_Halt>
 8006f88:	e034      	b.n	8006ff4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f9c:	2b80      	cmp	r3, #128	; 0x80
 8006f9e:	d129      	bne.n	8006ff4 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fba:	f043 0302 	orr.w	r3, r3, #2
 8006fbe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	212c      	movs	r1, #44	; 0x2c
 8006fc6:	fb01 f303 	mul.w	r3, r1, r3
 8006fca:	4413      	add	r3, r2
 8006fcc:	3361      	adds	r3, #97	; 0x61
 8006fce:	2206      	movs	r2, #6
 8006fd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	b2d2      	uxtb	r2, r2
 8006fda:	4611      	mov	r1, r2
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f006 fa88 	bl	800d4f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fee:	461a      	mov	r2, r3
 8006ff0:	2380      	movs	r3, #128	; 0x80
 8006ff2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800700a:	d122      	bne.n	8007052 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	4413      	add	r3, r2
 8007014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	0151      	lsls	r1, r2, #5
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	440a      	add	r2, r1
 8007022:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007026:	f043 0302 	orr.w	r3, r3, #2
 800702a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	4611      	mov	r1, r2
 8007036:	4618      	mov	r0, r3
 8007038:	f006 fa5b 	bl	800d4f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	4413      	add	r3, r2
 8007044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007048:	461a      	mov	r2, r3
 800704a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800704e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8007050:	e2bd      	b.n	80075ce <HCD_HC_IN_IRQHandler+0x842>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	4413      	add	r3, r2
 800705a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b01      	cmp	r3, #1
 8007066:	f040 811d 	bne.w	80072a4 <HCD_HC_IN_IRQHandler+0x518>
    if (hhcd->Init.dma_enable != 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d019      	beq.n	80070a6 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	212c      	movs	r1, #44	; 0x2c
 8007078:	fb01 f303 	mul.w	r3, r1, r3
 800707c:	4413      	add	r3, r2
 800707e:	3348      	adds	r3, #72	; 0x48
 8007080:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	0159      	lsls	r1, r3, #5
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	440b      	add	r3, r1
 800708a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007094:	1ad2      	subs	r2, r2, r3
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	202c      	movs	r0, #44	; 0x2c
 800709c:	fb00 f303 	mul.w	r3, r0, r3
 80070a0:	440b      	add	r3, r1
 80070a2:	3350      	adds	r3, #80	; 0x50
 80070a4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	212c      	movs	r1, #44	; 0x2c
 80070ac:	fb01 f303 	mul.w	r3, r1, r3
 80070b0:	4413      	add	r3, r2
 80070b2:	3361      	adds	r3, #97	; 0x61
 80070b4:	2201      	movs	r2, #1
 80070b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	212c      	movs	r1, #44	; 0x2c
 80070be:	fb01 f303 	mul.w	r3, r1, r3
 80070c2:	4413      	add	r3, r2
 80070c4:	335c      	adds	r3, #92	; 0x5c
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d6:	461a      	mov	r2, r3
 80070d8:	2301      	movs	r3, #1
 80070da:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	212c      	movs	r1, #44	; 0x2c
 80070e2:	fb01 f303 	mul.w	r3, r1, r3
 80070e6:	4413      	add	r3, r2
 80070e8:	333f      	adds	r3, #63	; 0x3f
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d009      	beq.n	8007104 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	212c      	movs	r1, #44	; 0x2c
 80070f6:	fb01 f303 	mul.w	r3, r1, r3
 80070fa:	4413      	add	r3, r2
 80070fc:	333f      	adds	r3, #63	; 0x3f
 80070fe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007100:	2b02      	cmp	r3, #2
 8007102:	d121      	bne.n	8007148 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	4413      	add	r3, r2
 800710c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	0151      	lsls	r1, r2, #5
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	440a      	add	r2, r1
 800711a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800711e:	f043 0302 	orr.w	r3, r3, #2
 8007122:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	b2d2      	uxtb	r2, r2
 800712c:	4611      	mov	r1, r2
 800712e:	4618      	mov	r0, r3
 8007130:	f006 f9df 	bl	800d4f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	4413      	add	r3, r2
 800713c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007140:	461a      	mov	r2, r3
 8007142:	2310      	movs	r3, #16
 8007144:	6093      	str	r3, [r2, #8]
 8007146:	e068      	b.n	800721a <HCD_HC_IN_IRQHandler+0x48e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	212c      	movs	r1, #44	; 0x2c
 800714e:	fb01 f303 	mul.w	r3, r1, r3
 8007152:	4413      	add	r3, r2
 8007154:	333f      	adds	r3, #63	; 0x3f
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	2b03      	cmp	r3, #3
 800715a:	d128      	bne.n	80071ae <HCD_HC_IN_IRQHandler+0x422>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	4413      	add	r3, r2
 8007164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	0151      	lsls	r1, r2, #5
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	440a      	add	r2, r1
 8007172:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007176:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800717a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	212c      	movs	r1, #44	; 0x2c
 8007182:	fb01 f303 	mul.w	r3, r1, r3
 8007186:	4413      	add	r3, r2
 8007188:	3360      	adds	r3, #96	; 0x60
 800718a:	2201      	movs	r2, #1
 800718c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	b2d8      	uxtb	r0, r3
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	212c      	movs	r1, #44	; 0x2c
 8007198:	fb01 f303 	mul.w	r3, r1, r3
 800719c:	4413      	add	r3, r2
 800719e:	3360      	adds	r3, #96	; 0x60
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	461a      	mov	r2, r3
 80071a4:	4601      	mov	r1, r0
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f019 fc68 	bl	8020a7c <HAL_HCD_HC_NotifyURBChange_Callback>
 80071ac:	e035      	b.n	800721a <HCD_HC_IN_IRQHandler+0x48e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	212c      	movs	r1, #44	; 0x2c
 80071b4:	fb01 f303 	mul.w	r3, r1, r3
 80071b8:	4413      	add	r3, r2
 80071ba:	333f      	adds	r3, #63	; 0x3f
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d12b      	bne.n	800721a <HCD_HC_IN_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	212c      	movs	r1, #44	; 0x2c
 80071c8:	fb01 f303 	mul.w	r3, r1, r3
 80071cc:	4413      	add	r3, r2
 80071ce:	3360      	adds	r3, #96	; 0x60
 80071d0:	2201      	movs	r2, #1
 80071d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	212c      	movs	r1, #44	; 0x2c
 80071da:	fb01 f303 	mul.w	r3, r1, r3
 80071de:	4413      	add	r3, r2
 80071e0:	3354      	adds	r3, #84	; 0x54
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	f083 0301 	eor.w	r3, r3, #1
 80071e8:	b2d8      	uxtb	r0, r3
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	212c      	movs	r1, #44	; 0x2c
 80071f0:	fb01 f303 	mul.w	r3, r1, r3
 80071f4:	4413      	add	r3, r2
 80071f6:	3354      	adds	r3, #84	; 0x54
 80071f8:	4602      	mov	r2, r0
 80071fa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	b2d8      	uxtb	r0, r3
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	212c      	movs	r1, #44	; 0x2c
 8007206:	fb01 f303 	mul.w	r3, r1, r3
 800720a:	4413      	add	r3, r2
 800720c:	3360      	adds	r3, #96	; 0x60
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	461a      	mov	r2, r3
 8007212:	4601      	mov	r1, r0
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f019 fc31 	bl	8020a7c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d12b      	bne.n	800727a <HCD_HC_IN_IRQHandler+0x4ee>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	212c      	movs	r1, #44	; 0x2c
 8007228:	fb01 f303 	mul.w	r3, r1, r3
 800722c:	4413      	add	r3, r2
 800722e:	3348      	adds	r3, #72	; 0x48
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6879      	ldr	r1, [r7, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	202c      	movs	r0, #44	; 0x2c
 8007238:	fb00 f202 	mul.w	r2, r0, r2
 800723c:	440a      	add	r2, r1
 800723e:	3240      	adds	r2, #64	; 0x40
 8007240:	8812      	ldrh	r2, [r2, #0]
 8007242:	fbb3 f3f2 	udiv	r3, r3, r2
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 81bf 	beq.w	80075ce <HCD_HC_IN_IRQHandler+0x842>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	212c      	movs	r1, #44	; 0x2c
 8007256:	fb01 f303 	mul.w	r3, r1, r3
 800725a:	4413      	add	r3, r2
 800725c:	3354      	adds	r3, #84	; 0x54
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	f083 0301 	eor.w	r3, r3, #1
 8007264:	b2d8      	uxtb	r0, r3
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	212c      	movs	r1, #44	; 0x2c
 800726c:	fb01 f303 	mul.w	r3, r1, r3
 8007270:	4413      	add	r3, r2
 8007272:	3354      	adds	r3, #84	; 0x54
 8007274:	4602      	mov	r2, r0
 8007276:	701a      	strb	r2, [r3, #0]
}
 8007278:	e1a9      	b.n	80075ce <HCD_HC_IN_IRQHandler+0x842>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	212c      	movs	r1, #44	; 0x2c
 8007280:	fb01 f303 	mul.w	r3, r1, r3
 8007284:	4413      	add	r3, r2
 8007286:	3354      	adds	r3, #84	; 0x54
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	f083 0301 	eor.w	r3, r3, #1
 800728e:	b2d8      	uxtb	r0, r3
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	212c      	movs	r1, #44	; 0x2c
 8007296:	fb01 f303 	mul.w	r3, r1, r3
 800729a:	4413      	add	r3, r2
 800729c:	3354      	adds	r3, #84	; 0x54
 800729e:	4602      	mov	r2, r0
 80072a0:	701a      	strb	r2, [r3, #0]
}
 80072a2:	e194      	b.n	80075ce <HCD_HC_IN_IRQHandler+0x842>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	f040 8107 	bne.w	80074ca <HCD_HC_IN_IRQHandler+0x73e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	0151      	lsls	r1, r2, #5
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	440a      	add	r2, r1
 80072d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072d6:	f023 0302 	bic.w	r3, r3, #2
 80072da:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	212c      	movs	r1, #44	; 0x2c
 80072e2:	fb01 f303 	mul.w	r3, r1, r3
 80072e6:	4413      	add	r3, r2
 80072e8:	3361      	adds	r3, #97	; 0x61
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d109      	bne.n	8007304 <HCD_HC_IN_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	212c      	movs	r1, #44	; 0x2c
 80072f6:	fb01 f303 	mul.w	r3, r1, r3
 80072fa:	4413      	add	r3, r2
 80072fc:	3360      	adds	r3, #96	; 0x60
 80072fe:	2201      	movs	r2, #1
 8007300:	701a      	strb	r2, [r3, #0]
 8007302:	e0c9      	b.n	8007498 <HCD_HC_IN_IRQHandler+0x70c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	212c      	movs	r1, #44	; 0x2c
 800730a:	fb01 f303 	mul.w	r3, r1, r3
 800730e:	4413      	add	r3, r2
 8007310:	3361      	adds	r3, #97	; 0x61
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2b05      	cmp	r3, #5
 8007316:	d109      	bne.n	800732c <HCD_HC_IN_IRQHandler+0x5a0>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	212c      	movs	r1, #44	; 0x2c
 800731e:	fb01 f303 	mul.w	r3, r1, r3
 8007322:	4413      	add	r3, r2
 8007324:	3360      	adds	r3, #96	; 0x60
 8007326:	2205      	movs	r2, #5
 8007328:	701a      	strb	r2, [r3, #0]
 800732a:	e0b5      	b.n	8007498 <HCD_HC_IN_IRQHandler+0x70c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	212c      	movs	r1, #44	; 0x2c
 8007332:	fb01 f303 	mul.w	r3, r1, r3
 8007336:	4413      	add	r3, r2
 8007338:	3361      	adds	r3, #97	; 0x61
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b06      	cmp	r3, #6
 800733e:	d009      	beq.n	8007354 <HCD_HC_IN_IRQHandler+0x5c8>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	212c      	movs	r1, #44	; 0x2c
 8007346:	fb01 f303 	mul.w	r3, r1, r3
 800734a:	4413      	add	r3, r2
 800734c:	3361      	adds	r3, #97	; 0x61
 800734e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007350:	2b08      	cmp	r3, #8
 8007352:	d150      	bne.n	80073f6 <HCD_HC_IN_IRQHandler+0x66a>
      hhcd->hc[ch_num].ErrCnt++;
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	212c      	movs	r1, #44	; 0x2c
 800735a:	fb01 f303 	mul.w	r3, r1, r3
 800735e:	4413      	add	r3, r2
 8007360:	335c      	adds	r3, #92	; 0x5c
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	6879      	ldr	r1, [r7, #4]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	202c      	movs	r0, #44	; 0x2c
 800736c:	fb00 f303 	mul.w	r3, r0, r3
 8007370:	440b      	add	r3, r1
 8007372:	335c      	adds	r3, #92	; 0x5c
 8007374:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	212c      	movs	r1, #44	; 0x2c
 800737c:	fb01 f303 	mul.w	r3, r1, r3
 8007380:	4413      	add	r3, r2
 8007382:	335c      	adds	r3, #92	; 0x5c
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b02      	cmp	r3, #2
 8007388:	d912      	bls.n	80073b0 <HCD_HC_IN_IRQHandler+0x624>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	212c      	movs	r1, #44	; 0x2c
 8007390:	fb01 f303 	mul.w	r3, r1, r3
 8007394:	4413      	add	r3, r2
 8007396:	335c      	adds	r3, #92	; 0x5c
 8007398:	2200      	movs	r2, #0
 800739a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	212c      	movs	r1, #44	; 0x2c
 80073a2:	fb01 f303 	mul.w	r3, r1, r3
 80073a6:	4413      	add	r3, r2
 80073a8:	3360      	adds	r3, #96	; 0x60
 80073aa:	2204      	movs	r2, #4
 80073ac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80073ae:	e073      	b.n	8007498 <HCD_HC_IN_IRQHandler+0x70c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	212c      	movs	r1, #44	; 0x2c
 80073b6:	fb01 f303 	mul.w	r3, r1, r3
 80073ba:	4413      	add	r3, r2
 80073bc:	3360      	adds	r3, #96	; 0x60
 80073be:	2202      	movs	r2, #2
 80073c0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073d8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073e0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ee:	461a      	mov	r2, r3
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80073f4:	e050      	b.n	8007498 <HCD_HC_IN_IRQHandler+0x70c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	212c      	movs	r1, #44	; 0x2c
 80073fc:	fb01 f303 	mul.w	r3, r1, r3
 8007400:	4413      	add	r3, r2
 8007402:	3361      	adds	r3, #97	; 0x61
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b03      	cmp	r3, #3
 8007408:	d122      	bne.n	8007450 <HCD_HC_IN_IRQHandler+0x6c4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	212c      	movs	r1, #44	; 0x2c
 8007410:	fb01 f303 	mul.w	r3, r1, r3
 8007414:	4413      	add	r3, r2
 8007416:	3360      	adds	r3, #96	; 0x60
 8007418:	2202      	movs	r2, #2
 800741a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	4413      	add	r3, r2
 8007424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007432:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800743a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	4413      	add	r3, r2
 8007444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007448:	461a      	mov	r2, r3
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	6013      	str	r3, [r2, #0]
 800744e:	e023      	b.n	8007498 <HCD_HC_IN_IRQHandler+0x70c>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	212c      	movs	r1, #44	; 0x2c
 8007456:	fb01 f303 	mul.w	r3, r1, r3
 800745a:	4413      	add	r3, r2
 800745c:	3361      	adds	r3, #97	; 0x61
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b07      	cmp	r3, #7
 8007462:	d119      	bne.n	8007498 <HCD_HC_IN_IRQHandler+0x70c>
      hhcd->hc[ch_num].ErrCnt++;
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	212c      	movs	r1, #44	; 0x2c
 800746a:	fb01 f303 	mul.w	r3, r1, r3
 800746e:	4413      	add	r3, r2
 8007470:	335c      	adds	r3, #92	; 0x5c
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	6879      	ldr	r1, [r7, #4]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	202c      	movs	r0, #44	; 0x2c
 800747c:	fb00 f303 	mul.w	r3, r0, r3
 8007480:	440b      	add	r3, r1
 8007482:	335c      	adds	r3, #92	; 0x5c
 8007484:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	212c      	movs	r1, #44	; 0x2c
 800748c:	fb01 f303 	mul.w	r3, r1, r3
 8007490:	4413      	add	r3, r2
 8007492:	3360      	adds	r3, #96	; 0x60
 8007494:	2204      	movs	r2, #4
 8007496:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074a4:	461a      	mov	r2, r3
 80074a6:	2302      	movs	r3, #2
 80074a8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	b2d8      	uxtb	r0, r3
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	212c      	movs	r1, #44	; 0x2c
 80074b4:	fb01 f303 	mul.w	r3, r1, r3
 80074b8:	4413      	add	r3, r2
 80074ba:	3360      	adds	r3, #96	; 0x60
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	4601      	mov	r1, r0
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f019 fada 	bl	8020a7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80074c8:	e081      	b.n	80075ce <HCD_HC_IN_IRQHandler+0x842>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f003 0310 	and.w	r3, r3, #16
 80074dc:	2b10      	cmp	r3, #16
 80074de:	d176      	bne.n	80075ce <HCD_HC_IN_IRQHandler+0x842>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	212c      	movs	r1, #44	; 0x2c
 80074e6:	fb01 f303 	mul.w	r3, r1, r3
 80074ea:	4413      	add	r3, r2
 80074ec:	333f      	adds	r3, #63	; 0x3f
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d121      	bne.n	8007538 <HCD_HC_IN_IRQHandler+0x7ac>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	212c      	movs	r1, #44	; 0x2c
 80074fa:	fb01 f303 	mul.w	r3, r1, r3
 80074fe:	4413      	add	r3, r2
 8007500:	335c      	adds	r3, #92	; 0x5c
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	4413      	add	r3, r2
 800750e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	0151      	lsls	r1, r2, #5
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	440a      	add	r2, r1
 800751c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007520:	f043 0302 	orr.w	r3, r3, #2
 8007524:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	b2d2      	uxtb	r2, r2
 800752e:	4611      	mov	r1, r2
 8007530:	4618      	mov	r0, r3
 8007532:	f005 ffde 	bl	800d4f2 <USB_HC_Halt>
 8007536:	e041      	b.n	80075bc <HCD_HC_IN_IRQHandler+0x830>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	212c      	movs	r1, #44	; 0x2c
 800753e:	fb01 f303 	mul.w	r3, r1, r3
 8007542:	4413      	add	r3, r2
 8007544:	333f      	adds	r3, #63	; 0x3f
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d009      	beq.n	8007560 <HCD_HC_IN_IRQHandler+0x7d4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	212c      	movs	r1, #44	; 0x2c
 8007552:	fb01 f303 	mul.w	r3, r1, r3
 8007556:	4413      	add	r3, r2
 8007558:	333f      	adds	r3, #63	; 0x3f
 800755a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800755c:	2b02      	cmp	r3, #2
 800755e:	d12d      	bne.n	80075bc <HCD_HC_IN_IRQHandler+0x830>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	212c      	movs	r1, #44	; 0x2c
 8007566:	fb01 f303 	mul.w	r3, r1, r3
 800756a:	4413      	add	r3, r2
 800756c:	335c      	adds	r3, #92	; 0x5c
 800756e:	2200      	movs	r2, #0
 8007570:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d120      	bne.n	80075bc <HCD_HC_IN_IRQHandler+0x830>
        hhcd->hc[ch_num].state = HC_NAK;
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	212c      	movs	r1, #44	; 0x2c
 8007580:	fb01 f303 	mul.w	r3, r1, r3
 8007584:	4413      	add	r3, r2
 8007586:	3361      	adds	r3, #97	; 0x61
 8007588:	2203      	movs	r2, #3
 800758a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	4413      	add	r3, r2
 8007594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	0151      	lsls	r1, r2, #5
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	440a      	add	r2, r1
 80075a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075a6:	f043 0302 	orr.w	r3, r3, #2
 80075aa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	b2d2      	uxtb	r2, r2
 80075b4:	4611      	mov	r1, r2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f005 ff9b 	bl	800d4f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c8:	461a      	mov	r2, r3
 80075ca:	2310      	movs	r3, #16
 80075cc:	6093      	str	r3, [r2, #8]
}
 80075ce:	bf00      	nop
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b088      	sub	sp, #32
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f003 0304 	and.w	r3, r3, #4
 8007602:	2b04      	cmp	r3, #4
 8007604:	d119      	bne.n	800763a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	4413      	add	r3, r2
 800760e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007612:	461a      	mov	r2, r3
 8007614:	2304      	movs	r3, #4
 8007616:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	4413      	add	r3, r2
 8007620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	0151      	lsls	r1, r2, #5
 800762a:	69ba      	ldr	r2, [r7, #24]
 800762c:	440a      	add	r2, r1
 800762e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007632:	f043 0302 	orr.w	r3, r3, #2
 8007636:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8007638:	e3c8      	b.n	8007dcc <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	4413      	add	r3, r2
 8007642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f003 0320 	and.w	r3, r3, #32
 800764c:	2b20      	cmp	r3, #32
 800764e:	d13e      	bne.n	80076ce <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	4413      	add	r3, r2
 8007658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800765c:	461a      	mov	r2, r3
 800765e:	2320      	movs	r3, #32
 8007660:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	212c      	movs	r1, #44	; 0x2c
 8007668:	fb01 f303 	mul.w	r3, r1, r3
 800766c:	4413      	add	r3, r2
 800766e:	333d      	adds	r3, #61	; 0x3d
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	2b01      	cmp	r3, #1
 8007674:	f040 83aa 	bne.w	8007dcc <HCD_HC_OUT_IRQHandler+0x7f6>
      hhcd->hc[ch_num].do_ping = 0U;
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	212c      	movs	r1, #44	; 0x2c
 800767e:	fb01 f303 	mul.w	r3, r1, r3
 8007682:	4413      	add	r3, r2
 8007684:	333d      	adds	r3, #61	; 0x3d
 8007686:	2200      	movs	r2, #0
 8007688:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	212c      	movs	r1, #44	; 0x2c
 8007690:	fb01 f303 	mul.w	r3, r1, r3
 8007694:	4413      	add	r3, r2
 8007696:	3360      	adds	r3, #96	; 0x60
 8007698:	2202      	movs	r2, #2
 800769a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	0151      	lsls	r1, r2, #5
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	440a      	add	r2, r1
 80076b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076b6:	f043 0302 	orr.w	r3, r3, #2
 80076ba:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	b2d2      	uxtb	r2, r2
 80076c4:	4611      	mov	r1, r2
 80076c6:	4618      	mov	r0, r3
 80076c8:	f005 ff13 	bl	800d4f2 <USB_HC_Halt>
}
 80076cc:	e37e      	b.n	8007dcc <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076e4:	d122      	bne.n	800772c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	0151      	lsls	r1, r2, #5
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	440a      	add	r2, r1
 80076fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007700:	f043 0302 	orr.w	r3, r3, #2
 8007704:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	b2d2      	uxtb	r2, r2
 800770e:	4611      	mov	r1, r2
 8007710:	4618      	mov	r0, r3
 8007712:	f005 feee 	bl	800d4f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	4413      	add	r3, r2
 800771e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007722:	461a      	mov	r2, r3
 8007724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007728:	6093      	str	r3, [r2, #8]
}
 800772a:	e34f      	b.n	8007dcc <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	4413      	add	r3, r2
 8007734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b01      	cmp	r3, #1
 8007740:	d150      	bne.n	80077e4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	212c      	movs	r1, #44	; 0x2c
 8007748:	fb01 f303 	mul.w	r3, r1, r3
 800774c:	4413      	add	r3, r2
 800774e:	335c      	adds	r3, #92	; 0x5c
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	4413      	add	r3, r2
 800775c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007766:	2b40      	cmp	r3, #64	; 0x40
 8007768:	d111      	bne.n	800778e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	212c      	movs	r1, #44	; 0x2c
 8007770:	fb01 f303 	mul.w	r3, r1, r3
 8007774:	4413      	add	r3, r2
 8007776:	333d      	adds	r3, #61	; 0x3d
 8007778:	2201      	movs	r2, #1
 800777a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	4413      	add	r3, r2
 8007784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007788:	461a      	mov	r2, r3
 800778a:	2340      	movs	r3, #64	; 0x40
 800778c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	015a      	lsls	r2, r3, #5
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	4413      	add	r3, r2
 8007796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	0151      	lsls	r1, r2, #5
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	440a      	add	r2, r1
 80077a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077a8:	f043 0302 	orr.w	r3, r3, #2
 80077ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	b2d2      	uxtb	r2, r2
 80077b6:	4611      	mov	r1, r2
 80077b8:	4618      	mov	r0, r3
 80077ba:	f005 fe9a 	bl	800d4f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ca:	461a      	mov	r2, r3
 80077cc:	2301      	movs	r3, #1
 80077ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	212c      	movs	r1, #44	; 0x2c
 80077d6:	fb01 f303 	mul.w	r3, r1, r3
 80077da:	4413      	add	r3, r2
 80077dc:	3361      	adds	r3, #97	; 0x61
 80077de:	2201      	movs	r2, #1
 80077e0:	701a      	strb	r2, [r3, #0]
}
 80077e2:	e2f3      	b.n	8007dcc <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f6:	2b40      	cmp	r3, #64	; 0x40
 80077f8:	d13c      	bne.n	8007874 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	212c      	movs	r1, #44	; 0x2c
 8007800:	fb01 f303 	mul.w	r3, r1, r3
 8007804:	4413      	add	r3, r2
 8007806:	3361      	adds	r3, #97	; 0x61
 8007808:	2204      	movs	r2, #4
 800780a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	212c      	movs	r1, #44	; 0x2c
 8007812:	fb01 f303 	mul.w	r3, r1, r3
 8007816:	4413      	add	r3, r2
 8007818:	333d      	adds	r3, #61	; 0x3d
 800781a:	2201      	movs	r2, #1
 800781c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	212c      	movs	r1, #44	; 0x2c
 8007824:	fb01 f303 	mul.w	r3, r1, r3
 8007828:	4413      	add	r3, r2
 800782a:	335c      	adds	r3, #92	; 0x5c
 800782c:	2200      	movs	r2, #0
 800782e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	4413      	add	r3, r2
 8007838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	69ba      	ldr	r2, [r7, #24]
 8007844:	440a      	add	r2, r1
 8007846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800784a:	f043 0302 	orr.w	r3, r3, #2
 800784e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	b2d2      	uxtb	r2, r2
 8007858:	4611      	mov	r1, r2
 800785a:	4618      	mov	r0, r3
 800785c:	f005 fe49 	bl	800d4f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	4413      	add	r3, r2
 8007868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800786c:	461a      	mov	r2, r3
 800786e:	2340      	movs	r3, #64	; 0x40
 8007870:	6093      	str	r3, [r2, #8]
}
 8007872:	e2ab      	b.n	8007dcc <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	4413      	add	r3, r2
 800787c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 0308 	and.w	r3, r3, #8
 8007886:	2b08      	cmp	r3, #8
 8007888:	d12a      	bne.n	80078e0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	4413      	add	r3, r2
 8007892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007896:	461a      	mov	r2, r3
 8007898:	2308      	movs	r3, #8
 800789a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	015a      	lsls	r2, r3, #5
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	4413      	add	r3, r2
 80078a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	0151      	lsls	r1, r2, #5
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	440a      	add	r2, r1
 80078b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078b6:	f043 0302 	orr.w	r3, r3, #2
 80078ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	b2d2      	uxtb	r2, r2
 80078c4:	4611      	mov	r1, r2
 80078c6:	4618      	mov	r0, r3
 80078c8:	f005 fe13 	bl	800d4f2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	212c      	movs	r1, #44	; 0x2c
 80078d2:	fb01 f303 	mul.w	r3, r1, r3
 80078d6:	4413      	add	r3, r2
 80078d8:	3361      	adds	r3, #97	; 0x61
 80078da:	2205      	movs	r2, #5
 80078dc:	701a      	strb	r2, [r3, #0]
}
 80078de:	e275      	b.n	8007dcc <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 0310 	and.w	r3, r3, #16
 80078f2:	2b10      	cmp	r3, #16
 80078f4:	d150      	bne.n	8007998 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	212c      	movs	r1, #44	; 0x2c
 80078fc:	fb01 f303 	mul.w	r3, r1, r3
 8007900:	4413      	add	r3, r2
 8007902:	335c      	adds	r3, #92	; 0x5c
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	212c      	movs	r1, #44	; 0x2c
 800790e:	fb01 f303 	mul.w	r3, r1, r3
 8007912:	4413      	add	r3, r2
 8007914:	3361      	adds	r3, #97	; 0x61
 8007916:	2203      	movs	r2, #3
 8007918:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	212c      	movs	r1, #44	; 0x2c
 8007920:	fb01 f303 	mul.w	r3, r1, r3
 8007924:	4413      	add	r3, r2
 8007926:	333d      	adds	r3, #61	; 0x3d
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d112      	bne.n	8007954 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	212c      	movs	r1, #44	; 0x2c
 8007934:	fb01 f303 	mul.w	r3, r1, r3
 8007938:	4413      	add	r3, r2
 800793a:	333c      	adds	r3, #60	; 0x3c
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d108      	bne.n	8007954 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	212c      	movs	r1, #44	; 0x2c
 8007948:	fb01 f303 	mul.w	r3, r1, r3
 800794c:	4413      	add	r3, r2
 800794e:	333d      	adds	r3, #61	; 0x3d
 8007950:	2201      	movs	r2, #1
 8007952:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	4413      	add	r3, r2
 800795c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	0151      	lsls	r1, r2, #5
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	440a      	add	r2, r1
 800796a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800796e:	f043 0302 	orr.w	r3, r3, #2
 8007972:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	4611      	mov	r1, r2
 800797e:	4618      	mov	r0, r3
 8007980:	f005 fdb7 	bl	800d4f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	4413      	add	r3, r2
 800798c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007990:	461a      	mov	r2, r3
 8007992:	2310      	movs	r3, #16
 8007994:	6093      	str	r3, [r2, #8]
}
 8007996:	e219      	b.n	8007dcc <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079aa:	2b80      	cmp	r3, #128	; 0x80
 80079ac:	d175      	bne.n	8007a9a <HCD_HC_OUT_IRQHandler+0x4c4>
    if (hhcd->Init.dma_enable == 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d121      	bne.n	80079fa <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	212c      	movs	r1, #44	; 0x2c
 80079bc:	fb01 f303 	mul.w	r3, r1, r3
 80079c0:	4413      	add	r3, r2
 80079c2:	3361      	adds	r3, #97	; 0x61
 80079c4:	2206      	movs	r2, #6
 80079c6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	0151      	lsls	r1, r2, #5
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	440a      	add	r2, r1
 80079de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079e2:	f043 0302 	orr.w	r3, r3, #2
 80079e6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	b2d2      	uxtb	r2, r2
 80079f0:	4611      	mov	r1, r2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f005 fd7d 	bl	800d4f2 <USB_HC_Halt>
 80079f8:	e045      	b.n	8007a86 <HCD_HC_OUT_IRQHandler+0x4b0>
      hhcd->hc[ch_num].ErrCnt++;
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	212c      	movs	r1, #44	; 0x2c
 8007a00:	fb01 f303 	mul.w	r3, r1, r3
 8007a04:	4413      	add	r3, r2
 8007a06:	335c      	adds	r3, #92	; 0x5c
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	1c5a      	adds	r2, r3, #1
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	202c      	movs	r0, #44	; 0x2c
 8007a12:	fb00 f303 	mul.w	r3, r0, r3
 8007a16:	440b      	add	r3, r1
 8007a18:	335c      	adds	r3, #92	; 0x5c
 8007a1a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	212c      	movs	r1, #44	; 0x2c
 8007a22:	fb01 f303 	mul.w	r3, r1, r3
 8007a26:	4413      	add	r3, r2
 8007a28:	335c      	adds	r3, #92	; 0x5c
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d921      	bls.n	8007a74 <HCD_HC_OUT_IRQHandler+0x49e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	212c      	movs	r1, #44	; 0x2c
 8007a36:	fb01 f303 	mul.w	r3, r1, r3
 8007a3a:	4413      	add	r3, r2
 8007a3c:	335c      	adds	r3, #92	; 0x5c
 8007a3e:	2200      	movs	r2, #0
 8007a40:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	212c      	movs	r1, #44	; 0x2c
 8007a48:	fb01 f303 	mul.w	r3, r1, r3
 8007a4c:	4413      	add	r3, r2
 8007a4e:	3360      	adds	r3, #96	; 0x60
 8007a50:	2204      	movs	r2, #4
 8007a52:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	b2d8      	uxtb	r0, r3
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	212c      	movs	r1, #44	; 0x2c
 8007a5e:	fb01 f303 	mul.w	r3, r1, r3
 8007a62:	4413      	add	r3, r2
 8007a64:	3360      	adds	r3, #96	; 0x60
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	4601      	mov	r1, r0
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f019 f805 	bl	8020a7c <HAL_HCD_HC_NotifyURBChange_Callback>
 8007a72:	e008      	b.n	8007a86 <HCD_HC_OUT_IRQHandler+0x4b0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	212c      	movs	r1, #44	; 0x2c
 8007a7a:	fb01 f303 	mul.w	r3, r1, r3
 8007a7e:	4413      	add	r3, r2
 8007a80:	3360      	adds	r3, #96	; 0x60
 8007a82:	2202      	movs	r2, #2
 8007a84:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a92:	461a      	mov	r2, r3
 8007a94:	2380      	movs	r3, #128	; 0x80
 8007a96:	6093      	str	r3, [r2, #8]
}
 8007a98:	e198      	b.n	8007dcc <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ab0:	d134      	bne.n	8007b1c <HCD_HC_OUT_IRQHandler+0x546>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	0151      	lsls	r1, r2, #5
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	440a      	add	r2, r1
 8007ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007acc:	f043 0302 	orr.w	r3, r3, #2
 8007ad0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	b2d2      	uxtb	r2, r2
 8007ada:	4611      	mov	r1, r2
 8007adc:	4618      	mov	r0, r3
 8007ade:	f005 fd08 	bl	800d4f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aee:	461a      	mov	r2, r3
 8007af0:	2310      	movs	r3, #16
 8007af2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b00:	461a      	mov	r2, r3
 8007b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	212c      	movs	r1, #44	; 0x2c
 8007b0e:	fb01 f303 	mul.w	r3, r1, r3
 8007b12:	4413      	add	r3, r2
 8007b14:	3361      	adds	r3, #97	; 0x61
 8007b16:	2208      	movs	r2, #8
 8007b18:	701a      	strb	r2, [r3, #0]
}
 8007b1a:	e157      	b.n	8007dcc <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	f040 814c 	bne.w	8007dcc <HCD_HC_OUT_IRQHandler+0x7f6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	0151      	lsls	r1, r2, #5
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	440a      	add	r2, r1
 8007b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b4e:	f023 0302 	bic.w	r3, r3, #2
 8007b52:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	212c      	movs	r1, #44	; 0x2c
 8007b5a:	fb01 f303 	mul.w	r3, r1, r3
 8007b5e:	4413      	add	r3, r2
 8007b60:	3361      	adds	r3, #97	; 0x61
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d179      	bne.n	8007c5c <HCD_HC_OUT_IRQHandler+0x686>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	212c      	movs	r1, #44	; 0x2c
 8007b6e:	fb01 f303 	mul.w	r3, r1, r3
 8007b72:	4413      	add	r3, r2
 8007b74:	3360      	adds	r3, #96	; 0x60
 8007b76:	2201      	movs	r2, #1
 8007b78:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	212c      	movs	r1, #44	; 0x2c
 8007b80:	fb01 f303 	mul.w	r3, r1, r3
 8007b84:	4413      	add	r3, r2
 8007b86:	333f      	adds	r3, #63	; 0x3f
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d00a      	beq.n	8007ba4 <HCD_HC_OUT_IRQHandler+0x5ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	212c      	movs	r1, #44	; 0x2c
 8007b94:	fb01 f303 	mul.w	r3, r1, r3
 8007b98:	4413      	add	r3, r2
 8007b9a:	333f      	adds	r3, #63	; 0x3f
 8007b9c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	f040 80fc 	bne.w	8007d9c <HCD_HC_OUT_IRQHandler+0x7c6>
        if (hhcd->Init.dma_enable == 1U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d142      	bne.n	8007c32 <HCD_HC_OUT_IRQHandler+0x65c>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	212c      	movs	r1, #44	; 0x2c
 8007bb2:	fb01 f303 	mul.w	r3, r1, r3
 8007bb6:	4413      	add	r3, r2
 8007bb8:	334c      	adds	r3, #76	; 0x4c
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 80ed 	beq.w	8007d9c <HCD_HC_OUT_IRQHandler+0x7c6>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	212c      	movs	r1, #44	; 0x2c
 8007bc8:	fb01 f303 	mul.w	r3, r1, r3
 8007bcc:	4413      	add	r3, r2
 8007bce:	334c      	adds	r3, #76	; 0x4c
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	202c      	movs	r0, #44	; 0x2c
 8007bd8:	fb00 f202 	mul.w	r2, r0, r2
 8007bdc:	440a      	add	r2, r1
 8007bde:	3240      	adds	r2, #64	; 0x40
 8007be0:	8812      	ldrh	r2, [r2, #0]
 8007be2:	4413      	add	r3, r2
 8007be4:	3b01      	subs	r3, #1
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	202c      	movs	r0, #44	; 0x2c
 8007bec:	fb00 f202 	mul.w	r2, r0, r2
 8007bf0:	440a      	add	r2, r1
 8007bf2:	3240      	adds	r2, #64	; 0x40
 8007bf4:	8812      	ldrh	r2, [r2, #0]
 8007bf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bfa:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 80ca 	beq.w	8007d9c <HCD_HC_OUT_IRQHandler+0x7c6>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	212c      	movs	r1, #44	; 0x2c
 8007c0e:	fb01 f303 	mul.w	r3, r1, r3
 8007c12:	4413      	add	r3, r2
 8007c14:	3355      	adds	r3, #85	; 0x55
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	f083 0301 	eor.w	r3, r3, #1
 8007c1c:	b2d8      	uxtb	r0, r3
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	212c      	movs	r1, #44	; 0x2c
 8007c24:	fb01 f303 	mul.w	r3, r1, r3
 8007c28:	4413      	add	r3, r2
 8007c2a:	3355      	adds	r3, #85	; 0x55
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	701a      	strb	r2, [r3, #0]
 8007c30:	e0b4      	b.n	8007d9c <HCD_HC_OUT_IRQHandler+0x7c6>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	212c      	movs	r1, #44	; 0x2c
 8007c38:	fb01 f303 	mul.w	r3, r1, r3
 8007c3c:	4413      	add	r3, r2
 8007c3e:	3355      	adds	r3, #85	; 0x55
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	f083 0301 	eor.w	r3, r3, #1
 8007c46:	b2d8      	uxtb	r0, r3
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	212c      	movs	r1, #44	; 0x2c
 8007c4e:	fb01 f303 	mul.w	r3, r1, r3
 8007c52:	4413      	add	r3, r2
 8007c54:	3355      	adds	r3, #85	; 0x55
 8007c56:	4602      	mov	r2, r0
 8007c58:	701a      	strb	r2, [r3, #0]
 8007c5a:	e09f      	b.n	8007d9c <HCD_HC_OUT_IRQHandler+0x7c6>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	212c      	movs	r1, #44	; 0x2c
 8007c62:	fb01 f303 	mul.w	r3, r1, r3
 8007c66:	4413      	add	r3, r2
 8007c68:	3361      	adds	r3, #97	; 0x61
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	2b03      	cmp	r3, #3
 8007c6e:	d109      	bne.n	8007c84 <HCD_HC_OUT_IRQHandler+0x6ae>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	212c      	movs	r1, #44	; 0x2c
 8007c76:	fb01 f303 	mul.w	r3, r1, r3
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3360      	adds	r3, #96	; 0x60
 8007c7e:	2202      	movs	r2, #2
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	e08b      	b.n	8007d9c <HCD_HC_OUT_IRQHandler+0x7c6>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	212c      	movs	r1, #44	; 0x2c
 8007c8a:	fb01 f303 	mul.w	r3, r1, r3
 8007c8e:	4413      	add	r3, r2
 8007c90:	3361      	adds	r3, #97	; 0x61
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d109      	bne.n	8007cac <HCD_HC_OUT_IRQHandler+0x6d6>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	212c      	movs	r1, #44	; 0x2c
 8007c9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ca2:	4413      	add	r3, r2
 8007ca4:	3360      	adds	r3, #96	; 0x60
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	701a      	strb	r2, [r3, #0]
 8007caa:	e077      	b.n	8007d9c <HCD_HC_OUT_IRQHandler+0x7c6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	212c      	movs	r1, #44	; 0x2c
 8007cb2:	fb01 f303 	mul.w	r3, r1, r3
 8007cb6:	4413      	add	r3, r2
 8007cb8:	3361      	adds	r3, #97	; 0x61
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b05      	cmp	r3, #5
 8007cbe:	d109      	bne.n	8007cd4 <HCD_HC_OUT_IRQHandler+0x6fe>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	212c      	movs	r1, #44	; 0x2c
 8007cc6:	fb01 f303 	mul.w	r3, r1, r3
 8007cca:	4413      	add	r3, r2
 8007ccc:	3360      	adds	r3, #96	; 0x60
 8007cce:	2205      	movs	r2, #5
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	e063      	b.n	8007d9c <HCD_HC_OUT_IRQHandler+0x7c6>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	212c      	movs	r1, #44	; 0x2c
 8007cda:	fb01 f303 	mul.w	r3, r1, r3
 8007cde:	4413      	add	r3, r2
 8007ce0:	3361      	adds	r3, #97	; 0x61
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b06      	cmp	r3, #6
 8007ce6:	d009      	beq.n	8007cfc <HCD_HC_OUT_IRQHandler+0x726>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	212c      	movs	r1, #44	; 0x2c
 8007cee:	fb01 f303 	mul.w	r3, r1, r3
 8007cf2:	4413      	add	r3, r2
 8007cf4:	3361      	adds	r3, #97	; 0x61
 8007cf6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007cf8:	2b08      	cmp	r3, #8
 8007cfa:	d14f      	bne.n	8007d9c <HCD_HC_OUT_IRQHandler+0x7c6>
      hhcd->hc[ch_num].ErrCnt++;
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	212c      	movs	r1, #44	; 0x2c
 8007d02:	fb01 f303 	mul.w	r3, r1, r3
 8007d06:	4413      	add	r3, r2
 8007d08:	335c      	adds	r3, #92	; 0x5c
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	1c5a      	adds	r2, r3, #1
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	202c      	movs	r0, #44	; 0x2c
 8007d14:	fb00 f303 	mul.w	r3, r0, r3
 8007d18:	440b      	add	r3, r1
 8007d1a:	335c      	adds	r3, #92	; 0x5c
 8007d1c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	212c      	movs	r1, #44	; 0x2c
 8007d24:	fb01 f303 	mul.w	r3, r1, r3
 8007d28:	4413      	add	r3, r2
 8007d2a:	335c      	adds	r3, #92	; 0x5c
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d912      	bls.n	8007d58 <HCD_HC_OUT_IRQHandler+0x782>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	212c      	movs	r1, #44	; 0x2c
 8007d38:	fb01 f303 	mul.w	r3, r1, r3
 8007d3c:	4413      	add	r3, r2
 8007d3e:	335c      	adds	r3, #92	; 0x5c
 8007d40:	2200      	movs	r2, #0
 8007d42:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	212c      	movs	r1, #44	; 0x2c
 8007d4a:	fb01 f303 	mul.w	r3, r1, r3
 8007d4e:	4413      	add	r3, r2
 8007d50:	3360      	adds	r3, #96	; 0x60
 8007d52:	2204      	movs	r2, #4
 8007d54:	701a      	strb	r2, [r3, #0]
 8007d56:	e021      	b.n	8007d9c <HCD_HC_OUT_IRQHandler+0x7c6>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	212c      	movs	r1, #44	; 0x2c
 8007d5e:	fb01 f303 	mul.w	r3, r1, r3
 8007d62:	4413      	add	r3, r2
 8007d64:	3360      	adds	r3, #96	; 0x60
 8007d66:	2202      	movs	r2, #2
 8007d68:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d80:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d88:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d96:	461a      	mov	r2, r3
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da8:	461a      	mov	r2, r3
 8007daa:	2302      	movs	r3, #2
 8007dac:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	b2d8      	uxtb	r0, r3
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	212c      	movs	r1, #44	; 0x2c
 8007db8:	fb01 f303 	mul.w	r3, r1, r3
 8007dbc:	4413      	add	r3, r2
 8007dbe:	3360      	adds	r3, #96	; 0x60
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	4601      	mov	r1, r0
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f018 fe58 	bl	8020a7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007dcc:	bf00      	nop
 8007dce:	3720      	adds	r7, #32
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b08a      	sub	sp, #40	; 0x28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	f003 030f 	and.w	r3, r3, #15
 8007df4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	0c5b      	lsrs	r3, r3, #17
 8007dfa:	f003 030f 	and.w	r3, r3, #15
 8007dfe:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	091b      	lsrs	r3, r3, #4
 8007e04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e08:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d003      	beq.n	8007e18 <HCD_RXQLVL_IRQHandler+0x44>
 8007e10:	2b05      	cmp	r3, #5
 8007e12:	f000 80a9 	beq.w	8007f68 <HCD_RXQLVL_IRQHandler+0x194>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007e16:	e0aa      	b.n	8007f6e <HCD_RXQLVL_IRQHandler+0x19a>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 80a6 	beq.w	8007f6c <HCD_RXQLVL_IRQHandler+0x198>
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	212c      	movs	r1, #44	; 0x2c
 8007e26:	fb01 f303 	mul.w	r3, r1, r3
 8007e2a:	4413      	add	r3, r2
 8007e2c:	3344      	adds	r3, #68	; 0x44
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 809b 	beq.w	8007f6c <HCD_RXQLVL_IRQHandler+0x198>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	212c      	movs	r1, #44	; 0x2c
 8007e3c:	fb01 f303 	mul.w	r3, r1, r3
 8007e40:	4413      	add	r3, r2
 8007e42:	3350      	adds	r3, #80	; 0x50
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	441a      	add	r2, r3
 8007e4a:	6879      	ldr	r1, [r7, #4]
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	202c      	movs	r0, #44	; 0x2c
 8007e50:	fb00 f303 	mul.w	r3, r0, r3
 8007e54:	440b      	add	r3, r1
 8007e56:	334c      	adds	r3, #76	; 0x4c
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d87a      	bhi.n	8007f54 <HCD_RXQLVL_IRQHandler+0x180>
          (void)USB_ReadPacket(hhcd->Instance,
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	212c      	movs	r1, #44	; 0x2c
 8007e68:	fb01 f303 	mul.w	r3, r1, r3
 8007e6c:	4413      	add	r3, r2
 8007e6e:	3344      	adds	r3, #68	; 0x44
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	b292      	uxth	r2, r2
 8007e76:	4619      	mov	r1, r3
 8007e78:	f004 fee3 	bl	800cc42 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	212c      	movs	r1, #44	; 0x2c
 8007e82:	fb01 f303 	mul.w	r3, r1, r3
 8007e86:	4413      	add	r3, r2
 8007e88:	3344      	adds	r3, #68	; 0x44
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	441a      	add	r2, r3
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	202c      	movs	r0, #44	; 0x2c
 8007e96:	fb00 f303 	mul.w	r3, r0, r3
 8007e9a:	440b      	add	r3, r1
 8007e9c:	3344      	adds	r3, #68	; 0x44
 8007e9e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	212c      	movs	r1, #44	; 0x2c
 8007ea6:	fb01 f303 	mul.w	r3, r1, r3
 8007eaa:	4413      	add	r3, r2
 8007eac:	3350      	adds	r3, #80	; 0x50
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	441a      	add	r2, r3
 8007eb4:	6879      	ldr	r1, [r7, #4]
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	202c      	movs	r0, #44	; 0x2c
 8007eba:	fb00 f303 	mul.w	r3, r0, r3
 8007ebe:	440b      	add	r3, r1
 8007ec0:	3350      	adds	r3, #80	; 0x50
 8007ec2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	0cdb      	lsrs	r3, r3, #19
 8007ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ed8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	212c      	movs	r1, #44	; 0x2c
 8007ee0:	fb01 f303 	mul.w	r3, r1, r3
 8007ee4:	4413      	add	r3, r2
 8007ee6:	3340      	adds	r3, #64	; 0x40
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d13c      	bne.n	8007f6c <HCD_RXQLVL_IRQHandler+0x198>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d039      	beq.n	8007f6c <HCD_RXQLVL_IRQHandler+0x198>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f0e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f16:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f24:	461a      	mov	r2, r3
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	212c      	movs	r1, #44	; 0x2c
 8007f30:	fb01 f303 	mul.w	r3, r1, r3
 8007f34:	4413      	add	r3, r2
 8007f36:	3354      	adds	r3, #84	; 0x54
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	f083 0301 	eor.w	r3, r3, #1
 8007f3e:	b2d8      	uxtb	r0, r3
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	212c      	movs	r1, #44	; 0x2c
 8007f46:	fb01 f303 	mul.w	r3, r1, r3
 8007f4a:	4413      	add	r3, r2
 8007f4c:	3354      	adds	r3, #84	; 0x54
 8007f4e:	4602      	mov	r2, r0
 8007f50:	701a      	strb	r2, [r3, #0]
      break;
 8007f52:	e00b      	b.n	8007f6c <HCD_RXQLVL_IRQHandler+0x198>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	212c      	movs	r1, #44	; 0x2c
 8007f5a:	fb01 f303 	mul.w	r3, r1, r3
 8007f5e:	4413      	add	r3, r2
 8007f60:	3360      	adds	r3, #96	; 0x60
 8007f62:	2204      	movs	r2, #4
 8007f64:	701a      	strb	r2, [r3, #0]
      break;
 8007f66:	e001      	b.n	8007f6c <HCD_RXQLVL_IRQHandler+0x198>
      break;
 8007f68:	bf00      	nop
 8007f6a:	e000      	b.n	8007f6e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007f6c:	bf00      	nop
  }
}
 8007f6e:	bf00      	nop
 8007f70:	3728      	adds	r7, #40	; 0x28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b086      	sub	sp, #24
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007fa2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f003 0302 	and.w	r3, r3, #2
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d10b      	bne.n	8007fc6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d102      	bne.n	8007fbe <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f018 fd43 	bl	8020a44 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	f043 0302 	orr.w	r3, r3, #2
 8007fc4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f003 0308 	and.w	r3, r3, #8
 8007fcc:	2b08      	cmp	r3, #8
 8007fce:	d132      	bne.n	8008036 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f043 0308 	orr.w	r3, r3, #8
 8007fd6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f003 0304 	and.w	r3, r3, #4
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	d126      	bne.n	8008030 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d113      	bne.n	8008012 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007ff0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ff4:	d106      	bne.n	8008004 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2102      	movs	r1, #2
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f004 ff4f 	bl	800cea0 <USB_InitFSLSPClkSel>
 8008002:	e011      	b.n	8008028 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2101      	movs	r1, #1
 800800a:	4618      	mov	r0, r3
 800800c:	f004 ff48 	bl	800cea0 <USB_InitFSLSPClkSel>
 8008010:	e00a      	b.n	8008028 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d106      	bne.n	8008028 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008020:	461a      	mov	r2, r3
 8008022:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008026:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f018 fd39 	bl	8020aa0 <HAL_HCD_PortEnabled_Callback>
 800802e:	e002      	b.n	8008036 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f018 fd43 	bl	8020abc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f003 0320 	and.w	r3, r3, #32
 800803c:	2b20      	cmp	r3, #32
 800803e:	d103      	bne.n	8008048 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	f043 0320 	orr.w	r3, r3, #32
 8008046:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800804e:	461a      	mov	r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	6013      	str	r3, [r2, #0]
}
 8008054:	bf00      	nop
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e07f      	b.n	800816e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d106      	bne.n	8008088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7f9 feaa 	bl	8001ddc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2224      	movs	r2, #36	; 0x24
 800808c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f022 0201 	bic.w	r2, r2, #1
 800809e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80080ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d107      	bne.n	80080d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	689a      	ldr	r2, [r3, #8]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080d2:	609a      	str	r2, [r3, #8]
 80080d4:	e006      	b.n	80080e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	689a      	ldr	r2, [r3, #8]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80080e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d104      	bne.n	80080f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6859      	ldr	r1, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	4b1d      	ldr	r3, [pc, #116]	; (8008178 <HAL_I2C_Init+0x11c>)
 8008102:	430b      	orrs	r3, r1
 8008104:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68da      	ldr	r2, [r3, #12]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008114:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	691a      	ldr	r2, [r3, #16]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	ea42 0103 	orr.w	r1, r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	021a      	lsls	r2, r3, #8
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	69d9      	ldr	r1, [r3, #28]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a1a      	ldr	r2, [r3, #32]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	430a      	orrs	r2, r1
 800813e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0201 	orr.w	r2, r2, #1
 800814e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2220      	movs	r2, #32
 800815a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	02008000 	.word	0x02008000

0800817c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b20      	cmp	r3, #32
 8008190:	d138      	bne.n	8008204 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008198:	2b01      	cmp	r3, #1
 800819a:	d101      	bne.n	80081a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800819c:	2302      	movs	r3, #2
 800819e:	e032      	b.n	8008206 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2224      	movs	r2, #36	; 0x24
 80081ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0201 	bic.w	r2, r2, #1
 80081be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6819      	ldr	r1, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	430a      	orrs	r2, r1
 80081de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0201 	orr.w	r2, r2, #1
 80081ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2220      	movs	r2, #32
 80081f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	e000      	b.n	8008206 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008204:	2302      	movs	r3, #2
  }
}
 8008206:	4618      	mov	r0, r3
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008212:	b480      	push	{r7}
 8008214:	b085      	sub	sp, #20
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b20      	cmp	r3, #32
 8008226:	d139      	bne.n	800829c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008232:	2302      	movs	r3, #2
 8008234:	e033      	b.n	800829e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2224      	movs	r2, #36	; 0x24
 8008242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f022 0201 	bic.w	r2, r2, #1
 8008254:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008264:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	021b      	lsls	r3, r3, #8
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	4313      	orrs	r3, r2
 800826e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0201 	orr.w	r2, r2, #1
 8008286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2220      	movs	r2, #32
 800828c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	e000      	b.n	800829e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800829c:	2302      	movs	r3, #2
  }
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b083      	sub	sp, #12
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80082ba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
	...

080082cc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e0bf      	b.n	800845e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d106      	bne.n	80082f8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7f9 fdea 	bl	8001ecc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2202      	movs	r2, #2
 80082fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	699a      	ldr	r2, [r3, #24]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800830e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6999      	ldr	r1, [r3, #24]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008324:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6899      	ldr	r1, [r3, #8]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	4b4a      	ldr	r3, [pc, #296]	; (8008468 <HAL_LTDC_Init+0x19c>)
 8008340:	400b      	ands	r3, r1
 8008342:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	041b      	lsls	r3, r3, #16
 800834a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6899      	ldr	r1, [r3, #8]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	699a      	ldr	r2, [r3, #24]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	431a      	orrs	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	430a      	orrs	r2, r1
 8008360:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68d9      	ldr	r1, [r3, #12]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	4b3e      	ldr	r3, [pc, #248]	; (8008468 <HAL_LTDC_Init+0x19c>)
 800836e:	400b      	ands	r3, r1
 8008370:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	041b      	lsls	r3, r3, #16
 8008378:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68d9      	ldr	r1, [r3, #12]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a1a      	ldr	r2, [r3, #32]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	430a      	orrs	r2, r1
 800838e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6919      	ldr	r1, [r3, #16]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	4b33      	ldr	r3, [pc, #204]	; (8008468 <HAL_LTDC_Init+0x19c>)
 800839c:	400b      	ands	r3, r1
 800839e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	041b      	lsls	r3, r3, #16
 80083a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6919      	ldr	r1, [r3, #16]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	431a      	orrs	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6959      	ldr	r1, [r3, #20]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	4b27      	ldr	r3, [pc, #156]	; (8008468 <HAL_LTDC_Init+0x19c>)
 80083ca:	400b      	ands	r3, r1
 80083cc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d2:	041b      	lsls	r3, r3, #16
 80083d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6959      	ldr	r1, [r3, #20]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	431a      	orrs	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083f2:	021b      	lsls	r3, r3, #8
 80083f4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80083fc:	041b      	lsls	r3, r3, #16
 80083fe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800840e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4313      	orrs	r3, r2
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008422:	431a      	orrs	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	430a      	orrs	r2, r1
 800842a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0206 	orr.w	r2, r2, #6
 800843a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	699a      	ldr	r2, [r3, #24]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f042 0201 	orr.w	r2, r2, #1
 800844a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	f000f800 	.word	0xf000f800

0800846c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008482:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f003 0304 	and.w	r3, r3, #4
 800848a:	2b00      	cmp	r3, #0
 800848c:	d023      	beq.n	80084d6 <HAL_LTDC_IRQHandler+0x6a>
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f003 0304 	and.w	r3, r3, #4
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01e      	beq.n	80084d6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f022 0204 	bic.w	r2, r2, #4
 80084a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2204      	movs	r2, #4
 80084ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80084b6:	f043 0201 	orr.w	r2, r3, #1
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2204      	movs	r2, #4
 80084c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f86f 	bl	80085b4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f003 0302 	and.w	r3, r3, #2
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d023      	beq.n	8008528 <HAL_LTDC_IRQHandler+0xbc>
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f003 0302 	and.w	r3, r3, #2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d01e      	beq.n	8008528 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0202 	bic.w	r2, r2, #2
 80084f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2202      	movs	r2, #2
 8008500:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008508:	f043 0202 	orr.w	r2, r3, #2
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2204      	movs	r2, #4
 8008516:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f846 	bl	80085b4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	2b00      	cmp	r3, #0
 8008530:	d01b      	beq.n	800856a <HAL_LTDC_IRQHandler+0xfe>
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	2b00      	cmp	r3, #0
 800853a:	d016      	beq.n	800856a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0201 	bic.w	r2, r2, #1
 800854a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2201      	movs	r2, #1
 8008552:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f82f 	bl	80085c8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f003 0308 	and.w	r3, r3, #8
 8008570:	2b00      	cmp	r3, #0
 8008572:	d01b      	beq.n	80085ac <HAL_LTDC_IRQHandler+0x140>
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f003 0308 	and.w	r3, r3, #8
 800857a:	2b00      	cmp	r3, #0
 800857c:	d016      	beq.n	80085ac <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f022 0208 	bic.w	r2, r2, #8
 800858c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2208      	movs	r2, #8
 8008594:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f818 	bl	80085dc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80085ac:	bf00      	nop
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80085f0:	b5b0      	push	{r4, r5, r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008602:	2b01      	cmp	r3, #1
 8008604:	d101      	bne.n	800860a <HAL_LTDC_ConfigLayer+0x1a>
 8008606:	2302      	movs	r3, #2
 8008608:	e02c      	b.n	8008664 <HAL_LTDC_ConfigLayer+0x74>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2202      	movs	r2, #2
 8008616:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2134      	movs	r1, #52	; 0x34
 8008620:	fb01 f303 	mul.w	r3, r1, r3
 8008624:	4413      	add	r3, r2
 8008626:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	4614      	mov	r4, r2
 800862e:	461d      	mov	r5, r3
 8008630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800863a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 f81f 	bl	8008688 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2201      	movs	r2, #1
 8008650:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bdb0      	pop	{r4, r5, r7, pc}

0800866c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800867a:	b2db      	uxtb	r3, r3
}
 800867c:	4618      	mov	r0, r3
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008688:	b480      	push	{r7}
 800868a:	b089      	sub	sp, #36	; 0x24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	0c1b      	lsrs	r3, r3, #16
 80086a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086a4:	4413      	add	r3, r2
 80086a6:	041b      	lsls	r3, r3, #16
 80086a8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	01db      	lsls	r3, r3, #7
 80086b4:	4413      	add	r3, r2
 80086b6:	3384      	adds	r3, #132	; 0x84
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	6812      	ldr	r2, [r2, #0]
 80086be:	4611      	mov	r1, r2
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	01d2      	lsls	r2, r2, #7
 80086c4:	440a      	add	r2, r1
 80086c6:	3284      	adds	r2, #132	; 0x84
 80086c8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80086cc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	0c1b      	lsrs	r3, r3, #16
 80086da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086de:	4413      	add	r3, r2
 80086e0:	1c5a      	adds	r2, r3, #1
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4619      	mov	r1, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	01db      	lsls	r3, r3, #7
 80086ec:	440b      	add	r3, r1
 80086ee:	3384      	adds	r3, #132	; 0x84
 80086f0:	4619      	mov	r1, r3
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008706:	4413      	add	r3, r2
 8008708:	041b      	lsls	r3, r3, #16
 800870a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	461a      	mov	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	01db      	lsls	r3, r3, #7
 8008716:	4413      	add	r3, r2
 8008718:	3384      	adds	r3, #132	; 0x84
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	6812      	ldr	r2, [r2, #0]
 8008720:	4611      	mov	r1, r2
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	01d2      	lsls	r2, r2, #7
 8008726:	440a      	add	r2, r1
 8008728:	3284      	adds	r2, #132	; 0x84
 800872a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800872e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	689a      	ldr	r2, [r3, #8]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800873e:	4413      	add	r3, r2
 8008740:	1c5a      	adds	r2, r3, #1
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4619      	mov	r1, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	01db      	lsls	r3, r3, #7
 800874c:	440b      	add	r3, r1
 800874e:	3384      	adds	r3, #132	; 0x84
 8008750:	4619      	mov	r1, r3
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	4313      	orrs	r3, r2
 8008756:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	461a      	mov	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	01db      	lsls	r3, r3, #7
 8008762:	4413      	add	r3, r2
 8008764:	3384      	adds	r3, #132	; 0x84
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	6812      	ldr	r2, [r2, #0]
 800876c:	4611      	mov	r1, r2
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	01d2      	lsls	r2, r2, #7
 8008772:	440a      	add	r2, r1
 8008774:	3284      	adds	r2, #132	; 0x84
 8008776:	f023 0307 	bic.w	r3, r3, #7
 800877a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	461a      	mov	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	01db      	lsls	r3, r3, #7
 8008786:	4413      	add	r3, r2
 8008788:	3384      	adds	r3, #132	; 0x84
 800878a:	461a      	mov	r2, r3
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008798:	021b      	lsls	r3, r3, #8
 800879a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80087a2:	041b      	lsls	r3, r3, #16
 80087a4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	061b      	lsls	r3, r3, #24
 80087ac:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	01db      	lsls	r3, r3, #7
 80087b8:	4413      	add	r3, r2
 80087ba:	3384      	adds	r3, #132	; 0x84
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	01db      	lsls	r3, r3, #7
 80087c8:	4413      	add	r3, r2
 80087ca:	3384      	adds	r3, #132	; 0x84
 80087cc:	461a      	mov	r2, r3
 80087ce:	2300      	movs	r3, #0
 80087d0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087d8:	461a      	mov	r2, r3
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	431a      	orrs	r2, r3
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	431a      	orrs	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4619      	mov	r1, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	01db      	lsls	r3, r3, #7
 80087ec:	440b      	add	r3, r1
 80087ee:	3384      	adds	r3, #132	; 0x84
 80087f0:	4619      	mov	r1, r3
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	461a      	mov	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	01db      	lsls	r3, r3, #7
 8008802:	4413      	add	r3, r2
 8008804:	3384      	adds	r3, #132	; 0x84
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	6812      	ldr	r2, [r2, #0]
 800880c:	4611      	mov	r1, r2
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	01d2      	lsls	r2, r2, #7
 8008812:	440a      	add	r2, r1
 8008814:	3284      	adds	r2, #132	; 0x84
 8008816:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800881a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	461a      	mov	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	01db      	lsls	r3, r3, #7
 8008826:	4413      	add	r3, r2
 8008828:	3384      	adds	r3, #132	; 0x84
 800882a:	461a      	mov	r2, r3
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	01db      	lsls	r3, r3, #7
 800883c:	4413      	add	r3, r2
 800883e:	3384      	adds	r3, #132	; 0x84
 8008840:	69da      	ldr	r2, [r3, #28]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4619      	mov	r1, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	01db      	lsls	r3, r3, #7
 800884c:	440b      	add	r3, r1
 800884e:	3384      	adds	r3, #132	; 0x84
 8008850:	4619      	mov	r1, r3
 8008852:	4b58      	ldr	r3, [pc, #352]	; (80089b4 <LTDC_SetConfig+0x32c>)
 8008854:	4013      	ands	r3, r2
 8008856:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	69da      	ldr	r2, [r3, #28]
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	6a1b      	ldr	r3, [r3, #32]
 8008860:	68f9      	ldr	r1, [r7, #12]
 8008862:	6809      	ldr	r1, [r1, #0]
 8008864:	4608      	mov	r0, r1
 8008866:	6879      	ldr	r1, [r7, #4]
 8008868:	01c9      	lsls	r1, r1, #7
 800886a:	4401      	add	r1, r0
 800886c:	3184      	adds	r1, #132	; 0x84
 800886e:	4313      	orrs	r3, r2
 8008870:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	01db      	lsls	r3, r3, #7
 800887c:	4413      	add	r3, r2
 800887e:	3384      	adds	r3, #132	; 0x84
 8008880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	01db      	lsls	r3, r3, #7
 800888c:	4413      	add	r3, r2
 800888e:	3384      	adds	r3, #132	; 0x84
 8008890:	461a      	mov	r2, r3
 8008892:	2300      	movs	r3, #0
 8008894:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	461a      	mov	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	01db      	lsls	r3, r3, #7
 80088a0:	4413      	add	r3, r2
 80088a2:	3384      	adds	r3, #132	; 0x84
 80088a4:	461a      	mov	r2, r3
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088aa:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d102      	bne.n	80088ba <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80088b4:	2304      	movs	r3, #4
 80088b6:	61fb      	str	r3, [r7, #28]
 80088b8:	e01b      	b.n	80088f2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d102      	bne.n	80088c8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80088c2:	2303      	movs	r3, #3
 80088c4:	61fb      	str	r3, [r7, #28]
 80088c6:	e014      	b.n	80088f2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	2b04      	cmp	r3, #4
 80088ce:	d00b      	beq.n	80088e8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d007      	beq.n	80088e8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80088dc:	2b03      	cmp	r3, #3
 80088de:	d003      	beq.n	80088e8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80088e4:	2b07      	cmp	r3, #7
 80088e6:	d102      	bne.n	80088ee <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80088e8:	2302      	movs	r3, #2
 80088ea:	61fb      	str	r3, [r7, #28]
 80088ec:	e001      	b.n	80088f2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80088ee:	2301      	movs	r3, #1
 80088f0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	461a      	mov	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	01db      	lsls	r3, r3, #7
 80088fc:	4413      	add	r3, r2
 80088fe:	3384      	adds	r3, #132	; 0x84
 8008900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	6812      	ldr	r2, [r2, #0]
 8008906:	4611      	mov	r1, r2
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	01d2      	lsls	r2, r2, #7
 800890c:	440a      	add	r2, r1
 800890e:	3284      	adds	r2, #132	; 0x84
 8008910:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008914:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891a:	69fa      	ldr	r2, [r7, #28]
 800891c:	fb02 f303 	mul.w	r3, r2, r3
 8008920:	041a      	lsls	r2, r3, #16
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	6859      	ldr	r1, [r3, #4]
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	1acb      	subs	r3, r1, r3
 800892c:	69f9      	ldr	r1, [r7, #28]
 800892e:	fb01 f303 	mul.w	r3, r1, r3
 8008932:	3303      	adds	r3, #3
 8008934:	68f9      	ldr	r1, [r7, #12]
 8008936:	6809      	ldr	r1, [r1, #0]
 8008938:	4608      	mov	r0, r1
 800893a:	6879      	ldr	r1, [r7, #4]
 800893c:	01c9      	lsls	r1, r1, #7
 800893e:	4401      	add	r1, r0
 8008940:	3184      	adds	r1, #132	; 0x84
 8008942:	4313      	orrs	r3, r2
 8008944:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	461a      	mov	r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	01db      	lsls	r3, r3, #7
 8008950:	4413      	add	r3, r2
 8008952:	3384      	adds	r3, #132	; 0x84
 8008954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4619      	mov	r1, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	01db      	lsls	r3, r3, #7
 8008960:	440b      	add	r3, r1
 8008962:	3384      	adds	r3, #132	; 0x84
 8008964:	4619      	mov	r1, r3
 8008966:	4b14      	ldr	r3, [pc, #80]	; (80089b8 <LTDC_SetConfig+0x330>)
 8008968:	4013      	ands	r3, r2
 800896a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	461a      	mov	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	01db      	lsls	r3, r3, #7
 8008976:	4413      	add	r3, r2
 8008978:	3384      	adds	r3, #132	; 0x84
 800897a:	461a      	mov	r2, r3
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008980:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	461a      	mov	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	01db      	lsls	r3, r3, #7
 800898c:	4413      	add	r3, r2
 800898e:	3384      	adds	r3, #132	; 0x84
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	6812      	ldr	r2, [r2, #0]
 8008996:	4611      	mov	r1, r2
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	01d2      	lsls	r2, r2, #7
 800899c:	440a      	add	r2, r1
 800899e:	3284      	adds	r2, #132	; 0x84
 80089a0:	f043 0301 	orr.w	r3, r3, #1
 80089a4:	6013      	str	r3, [r2, #0]
}
 80089a6:	bf00      	nop
 80089a8:	3724      	adds	r7, #36	; 0x24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	fffff8f8 	.word	0xfffff8f8
 80089b8:	fffff800 	.word	0xfffff800

080089bc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80089bc:	b480      	push	{r7}
 80089be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089c0:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a04      	ldr	r2, [pc, #16]	; (80089d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80089c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089ca:	6013      	str	r3, [r2, #0]
}
 80089cc:	bf00      	nop
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	40007000 	.word	0x40007000

080089dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80089e6:	4b23      	ldr	r3, [pc, #140]	; (8008a74 <HAL_PWREx_EnableOverDrive+0x98>)
 80089e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ea:	4a22      	ldr	r2, [pc, #136]	; (8008a74 <HAL_PWREx_EnableOverDrive+0x98>)
 80089ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089f0:	6413      	str	r3, [r2, #64]	; 0x40
 80089f2:	4b20      	ldr	r3, [pc, #128]	; (8008a74 <HAL_PWREx_EnableOverDrive+0x98>)
 80089f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089fa:	603b      	str	r3, [r7, #0]
 80089fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80089fe:	4b1e      	ldr	r3, [pc, #120]	; (8008a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a1d      	ldr	r2, [pc, #116]	; (8008a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a08:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a0a:	f7fb f821 	bl	8003a50 <HAL_GetTick>
 8008a0e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008a10:	e009      	b.n	8008a26 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008a12:	f7fb f81d 	bl	8003a50 <HAL_GetTick>
 8008a16:	4602      	mov	r2, r0
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a20:	d901      	bls.n	8008a26 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e022      	b.n	8008a6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008a26:	4b14      	ldr	r3, [pc, #80]	; (8008a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a32:	d1ee      	bne.n	8008a12 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008a34:	4b10      	ldr	r3, [pc, #64]	; (8008a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a0f      	ldr	r2, [pc, #60]	; (8008a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a3e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a40:	f7fb f806 	bl	8003a50 <HAL_GetTick>
 8008a44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008a46:	e009      	b.n	8008a5c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008a48:	f7fb f802 	bl	8003a50 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a56:	d901      	bls.n	8008a5c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e007      	b.n	8008a6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008a5c:	4b06      	ldr	r3, [pc, #24]	; (8008a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a68:	d1ee      	bne.n	8008a48 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	40023800 	.word	0x40023800
 8008a78:	40007000 	.word	0x40007000

08008a7c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af02      	add	r7, sp, #8
 8008a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008a84:	f7fa ffe4 	bl	8003a50 <HAL_GetTick>
 8008a88:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d101      	bne.n	8008a94 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e067      	b.n	8008b64 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10b      	bne.n	8008ab8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7f9 fad7 	bl	800205c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008aae:	f241 3188 	movw	r1, #5000	; 0x1388
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f85e 	bl	8008b74 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	021a      	lsls	r2, r3, #8
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	2120      	movs	r1, #32
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f856 	bl	8008b90 <QSPI_WaitFlagStateUntilTimeout>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008ae8:	7afb      	ldrb	r3, [r7, #11]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d135      	bne.n	8008b5a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	4b1d      	ldr	r3, [pc, #116]	; (8008b6c <HAL_QSPI_Init+0xf0>)
 8008af6:	4013      	ands	r3, r2
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6852      	ldr	r2, [r2, #4]
 8008afc:	0611      	lsls	r1, r2, #24
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	68d2      	ldr	r2, [r2, #12]
 8008b02:	4311      	orrs	r1, r2
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	69d2      	ldr	r2, [r2, #28]
 8008b08:	4311      	orrs	r1, r2
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	6a12      	ldr	r2, [r2, #32]
 8008b0e:	4311      	orrs	r1, r2
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	6812      	ldr	r2, [r2, #0]
 8008b14:	430b      	orrs	r3, r1
 8008b16:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	4b14      	ldr	r3, [pc, #80]	; (8008b70 <HAL_QSPI_Init+0xf4>)
 8008b20:	4013      	ands	r3, r2
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	6912      	ldr	r2, [r2, #16]
 8008b26:	0411      	lsls	r1, r2, #16
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	6952      	ldr	r2, [r2, #20]
 8008b2c:	4311      	orrs	r1, r2
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	6992      	ldr	r2, [r2, #24]
 8008b32:	4311      	orrs	r1, r2
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	6812      	ldr	r2, [r2, #0]
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f042 0201 	orr.w	r2, r2, #1
 8008b4a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008b62:	7afb      	ldrb	r3, [r7, #11]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	00ffff2f 	.word	0x00ffff2f
 8008b70:	ffe0f8fe 	.word	0xffe0f8fe

08008b74 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	603b      	str	r3, [r7, #0]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008ba0:	e01a      	b.n	8008bd8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ba8:	d016      	beq.n	8008bd8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008baa:	f7fa ff51 	bl	8003a50 <HAL_GetTick>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d302      	bcc.n	8008bc0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10b      	bne.n	8008bd8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2204      	movs	r2, #4
 8008bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bcc:	f043 0201 	orr.w	r2, r3, #1
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e00e      	b.n	8008bf6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689a      	ldr	r2, [r3, #8]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	4013      	ands	r3, r2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	bf14      	ite	ne
 8008be6:	2301      	movne	r3, #1
 8008be8:	2300      	moveq	r3, #0
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	461a      	mov	r2, r3
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d1d6      	bne.n	8008ba2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
	...

08008c00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e291      	b.n	800913a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 8087 	beq.w	8008d32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008c24:	4b96      	ldr	r3, [pc, #600]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f003 030c 	and.w	r3, r3, #12
 8008c2c:	2b04      	cmp	r3, #4
 8008c2e:	d00c      	beq.n	8008c4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c30:	4b93      	ldr	r3, [pc, #588]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	f003 030c 	and.w	r3, r3, #12
 8008c38:	2b08      	cmp	r3, #8
 8008c3a:	d112      	bne.n	8008c62 <HAL_RCC_OscConfig+0x62>
 8008c3c:	4b90      	ldr	r3, [pc, #576]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c48:	d10b      	bne.n	8008c62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c4a:	4b8d      	ldr	r3, [pc, #564]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d06c      	beq.n	8008d30 <HAL_RCC_OscConfig+0x130>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d168      	bne.n	8008d30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e26b      	b.n	800913a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c6a:	d106      	bne.n	8008c7a <HAL_RCC_OscConfig+0x7a>
 8008c6c:	4b84      	ldr	r3, [pc, #528]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a83      	ldr	r2, [pc, #524]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c76:	6013      	str	r3, [r2, #0]
 8008c78:	e02e      	b.n	8008cd8 <HAL_RCC_OscConfig+0xd8>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10c      	bne.n	8008c9c <HAL_RCC_OscConfig+0x9c>
 8008c82:	4b7f      	ldr	r3, [pc, #508]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a7e      	ldr	r2, [pc, #504]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	4b7c      	ldr	r3, [pc, #496]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a7b      	ldr	r2, [pc, #492]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008c94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	e01d      	b.n	8008cd8 <HAL_RCC_OscConfig+0xd8>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ca4:	d10c      	bne.n	8008cc0 <HAL_RCC_OscConfig+0xc0>
 8008ca6:	4b76      	ldr	r3, [pc, #472]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a75      	ldr	r2, [pc, #468]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008cb0:	6013      	str	r3, [r2, #0]
 8008cb2:	4b73      	ldr	r3, [pc, #460]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a72      	ldr	r2, [pc, #456]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cbc:	6013      	str	r3, [r2, #0]
 8008cbe:	e00b      	b.n	8008cd8 <HAL_RCC_OscConfig+0xd8>
 8008cc0:	4b6f      	ldr	r3, [pc, #444]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a6e      	ldr	r2, [pc, #440]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	4b6c      	ldr	r3, [pc, #432]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a6b      	ldr	r2, [pc, #428]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d013      	beq.n	8008d08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ce0:	f7fa feb6 	bl	8003a50 <HAL_GetTick>
 8008ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ce6:	e008      	b.n	8008cfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ce8:	f7fa feb2 	bl	8003a50 <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	2b64      	cmp	r3, #100	; 0x64
 8008cf4:	d901      	bls.n	8008cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e21f      	b.n	800913a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cfa:	4b61      	ldr	r3, [pc, #388]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d0f0      	beq.n	8008ce8 <HAL_RCC_OscConfig+0xe8>
 8008d06:	e014      	b.n	8008d32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d08:	f7fa fea2 	bl	8003a50 <HAL_GetTick>
 8008d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d0e:	e008      	b.n	8008d22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d10:	f7fa fe9e 	bl	8003a50 <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b64      	cmp	r3, #100	; 0x64
 8008d1c:	d901      	bls.n	8008d22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e20b      	b.n	800913a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d22:	4b57      	ldr	r3, [pc, #348]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1f0      	bne.n	8008d10 <HAL_RCC_OscConfig+0x110>
 8008d2e:	e000      	b.n	8008d32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d069      	beq.n	8008e12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d3e:	4b50      	ldr	r3, [pc, #320]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f003 030c 	and.w	r3, r3, #12
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00b      	beq.n	8008d62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d4a:	4b4d      	ldr	r3, [pc, #308]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f003 030c 	and.w	r3, r3, #12
 8008d52:	2b08      	cmp	r3, #8
 8008d54:	d11c      	bne.n	8008d90 <HAL_RCC_OscConfig+0x190>
 8008d56:	4b4a      	ldr	r3, [pc, #296]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d116      	bne.n	8008d90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d62:	4b47      	ldr	r3, [pc, #284]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d005      	beq.n	8008d7a <HAL_RCC_OscConfig+0x17a>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d001      	beq.n	8008d7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e1df      	b.n	800913a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d7a:	4b41      	ldr	r3, [pc, #260]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	00db      	lsls	r3, r3, #3
 8008d88:	493d      	ldr	r1, [pc, #244]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d8e:	e040      	b.n	8008e12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d023      	beq.n	8008de0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d98:	4b39      	ldr	r3, [pc, #228]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a38      	ldr	r2, [pc, #224]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008d9e:	f043 0301 	orr.w	r3, r3, #1
 8008da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da4:	f7fa fe54 	bl	8003a50 <HAL_GetTick>
 8008da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008daa:	e008      	b.n	8008dbe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008dac:	f7fa fe50 	bl	8003a50 <HAL_GetTick>
 8008db0:	4602      	mov	r2, r0
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d901      	bls.n	8008dbe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e1bd      	b.n	800913a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dbe:	4b30      	ldr	r3, [pc, #192]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0302 	and.w	r3, r3, #2
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d0f0      	beq.n	8008dac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dca:	4b2d      	ldr	r3, [pc, #180]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	00db      	lsls	r3, r3, #3
 8008dd8:	4929      	ldr	r1, [pc, #164]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	600b      	str	r3, [r1, #0]
 8008dde:	e018      	b.n	8008e12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008de0:	4b27      	ldr	r3, [pc, #156]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a26      	ldr	r2, [pc, #152]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008de6:	f023 0301 	bic.w	r3, r3, #1
 8008dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dec:	f7fa fe30 	bl	8003a50 <HAL_GetTick>
 8008df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008df2:	e008      	b.n	8008e06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008df4:	f7fa fe2c 	bl	8003a50 <HAL_GetTick>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d901      	bls.n	8008e06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e199      	b.n	800913a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e06:	4b1e      	ldr	r3, [pc, #120]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0302 	and.w	r3, r3, #2
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1f0      	bne.n	8008df4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0308 	and.w	r3, r3, #8
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d038      	beq.n	8008e90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d019      	beq.n	8008e5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e26:	4b16      	ldr	r3, [pc, #88]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e2a:	4a15      	ldr	r2, [pc, #84]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008e2c:	f043 0301 	orr.w	r3, r3, #1
 8008e30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e32:	f7fa fe0d 	bl	8003a50 <HAL_GetTick>
 8008e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e38:	e008      	b.n	8008e4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e3a:	f7fa fe09 	bl	8003a50 <HAL_GetTick>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d901      	bls.n	8008e4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e176      	b.n	800913a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e4c:	4b0c      	ldr	r3, [pc, #48]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e50:	f003 0302 	and.w	r3, r3, #2
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0f0      	beq.n	8008e3a <HAL_RCC_OscConfig+0x23a>
 8008e58:	e01a      	b.n	8008e90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e5a:	4b09      	ldr	r3, [pc, #36]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e5e:	4a08      	ldr	r2, [pc, #32]	; (8008e80 <HAL_RCC_OscConfig+0x280>)
 8008e60:	f023 0301 	bic.w	r3, r3, #1
 8008e64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e66:	f7fa fdf3 	bl	8003a50 <HAL_GetTick>
 8008e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e6c:	e00a      	b.n	8008e84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e6e:	f7fa fdef 	bl	8003a50 <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d903      	bls.n	8008e84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	e15c      	b.n	800913a <HAL_RCC_OscConfig+0x53a>
 8008e80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e84:	4b91      	ldr	r3, [pc, #580]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e88:	f003 0302 	and.w	r3, r3, #2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1ee      	bne.n	8008e6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0304 	and.w	r3, r3, #4
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f000 80a4 	beq.w	8008fe6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e9e:	4b8b      	ldr	r3, [pc, #556]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10d      	bne.n	8008ec6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008eaa:	4b88      	ldr	r3, [pc, #544]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eae:	4a87      	ldr	r2, [pc, #540]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8008eb6:	4b85      	ldr	r3, [pc, #532]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ebe:	60bb      	str	r3, [r7, #8]
 8008ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ec6:	4b82      	ldr	r3, [pc, #520]	; (80090d0 <HAL_RCC_OscConfig+0x4d0>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d118      	bne.n	8008f04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008ed2:	4b7f      	ldr	r3, [pc, #508]	; (80090d0 <HAL_RCC_OscConfig+0x4d0>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a7e      	ldr	r2, [pc, #504]	; (80090d0 <HAL_RCC_OscConfig+0x4d0>)
 8008ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ede:	f7fa fdb7 	bl	8003a50 <HAL_GetTick>
 8008ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ee4:	e008      	b.n	8008ef8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ee6:	f7fa fdb3 	bl	8003a50 <HAL_GetTick>
 8008eea:	4602      	mov	r2, r0
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	2b64      	cmp	r3, #100	; 0x64
 8008ef2:	d901      	bls.n	8008ef8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	e120      	b.n	800913a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ef8:	4b75      	ldr	r3, [pc, #468]	; (80090d0 <HAL_RCC_OscConfig+0x4d0>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d0f0      	beq.n	8008ee6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d106      	bne.n	8008f1a <HAL_RCC_OscConfig+0x31a>
 8008f0c:	4b6f      	ldr	r3, [pc, #444]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f10:	4a6e      	ldr	r2, [pc, #440]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008f12:	f043 0301 	orr.w	r3, r3, #1
 8008f16:	6713      	str	r3, [r2, #112]	; 0x70
 8008f18:	e02d      	b.n	8008f76 <HAL_RCC_OscConfig+0x376>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10c      	bne.n	8008f3c <HAL_RCC_OscConfig+0x33c>
 8008f22:	4b6a      	ldr	r3, [pc, #424]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f26:	4a69      	ldr	r2, [pc, #420]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008f28:	f023 0301 	bic.w	r3, r3, #1
 8008f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8008f2e:	4b67      	ldr	r3, [pc, #412]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f32:	4a66      	ldr	r2, [pc, #408]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008f34:	f023 0304 	bic.w	r3, r3, #4
 8008f38:	6713      	str	r3, [r2, #112]	; 0x70
 8008f3a:	e01c      	b.n	8008f76 <HAL_RCC_OscConfig+0x376>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	2b05      	cmp	r3, #5
 8008f42:	d10c      	bne.n	8008f5e <HAL_RCC_OscConfig+0x35e>
 8008f44:	4b61      	ldr	r3, [pc, #388]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f48:	4a60      	ldr	r2, [pc, #384]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008f4a:	f043 0304 	orr.w	r3, r3, #4
 8008f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8008f50:	4b5e      	ldr	r3, [pc, #376]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f54:	4a5d      	ldr	r2, [pc, #372]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008f56:	f043 0301 	orr.w	r3, r3, #1
 8008f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8008f5c:	e00b      	b.n	8008f76 <HAL_RCC_OscConfig+0x376>
 8008f5e:	4b5b      	ldr	r3, [pc, #364]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f62:	4a5a      	ldr	r2, [pc, #360]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008f64:	f023 0301 	bic.w	r3, r3, #1
 8008f68:	6713      	str	r3, [r2, #112]	; 0x70
 8008f6a:	4b58      	ldr	r3, [pc, #352]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6e:	4a57      	ldr	r2, [pc, #348]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008f70:	f023 0304 	bic.w	r3, r3, #4
 8008f74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d015      	beq.n	8008faa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f7e:	f7fa fd67 	bl	8003a50 <HAL_GetTick>
 8008f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f84:	e00a      	b.n	8008f9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f86:	f7fa fd63 	bl	8003a50 <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d901      	bls.n	8008f9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e0ce      	b.n	800913a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f9c:	4b4b      	ldr	r3, [pc, #300]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fa0:	f003 0302 	and.w	r3, r3, #2
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0ee      	beq.n	8008f86 <HAL_RCC_OscConfig+0x386>
 8008fa8:	e014      	b.n	8008fd4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008faa:	f7fa fd51 	bl	8003a50 <HAL_GetTick>
 8008fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fb0:	e00a      	b.n	8008fc8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fb2:	f7fa fd4d 	bl	8003a50 <HAL_GetTick>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d901      	bls.n	8008fc8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e0b8      	b.n	800913a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fc8:	4b40      	ldr	r3, [pc, #256]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fcc:	f003 0302 	and.w	r3, r3, #2
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1ee      	bne.n	8008fb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d105      	bne.n	8008fe6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fda:	4b3c      	ldr	r3, [pc, #240]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fde:	4a3b      	ldr	r2, [pc, #236]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fe4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 80a4 	beq.w	8009138 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ff0:	4b36      	ldr	r3, [pc, #216]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	f003 030c 	and.w	r3, r3, #12
 8008ff8:	2b08      	cmp	r3, #8
 8008ffa:	d06b      	beq.n	80090d4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	2b02      	cmp	r3, #2
 8009002:	d149      	bne.n	8009098 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009004:	4b31      	ldr	r3, [pc, #196]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a30      	ldr	r2, [pc, #192]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 800900a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800900e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009010:	f7fa fd1e 	bl	8003a50 <HAL_GetTick>
 8009014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009016:	e008      	b.n	800902a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009018:	f7fa fd1a 	bl	8003a50 <HAL_GetTick>
 800901c:	4602      	mov	r2, r0
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	2b02      	cmp	r3, #2
 8009024:	d901      	bls.n	800902a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e087      	b.n	800913a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800902a:	4b28      	ldr	r3, [pc, #160]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1f0      	bne.n	8009018 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	69da      	ldr	r2, [r3, #28]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	431a      	orrs	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009044:	019b      	lsls	r3, r3, #6
 8009046:	431a      	orrs	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904c:	085b      	lsrs	r3, r3, #1
 800904e:	3b01      	subs	r3, #1
 8009050:	041b      	lsls	r3, r3, #16
 8009052:	431a      	orrs	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009058:	061b      	lsls	r3, r3, #24
 800905a:	4313      	orrs	r3, r2
 800905c:	4a1b      	ldr	r2, [pc, #108]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 800905e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009062:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009064:	4b19      	ldr	r3, [pc, #100]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a18      	ldr	r2, [pc, #96]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 800906a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800906e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009070:	f7fa fcee 	bl	8003a50 <HAL_GetTick>
 8009074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009076:	e008      	b.n	800908a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009078:	f7fa fcea 	bl	8003a50 <HAL_GetTick>
 800907c:	4602      	mov	r2, r0
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	2b02      	cmp	r3, #2
 8009084:	d901      	bls.n	800908a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e057      	b.n	800913a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800908a:	4b10      	ldr	r3, [pc, #64]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009092:	2b00      	cmp	r3, #0
 8009094:	d0f0      	beq.n	8009078 <HAL_RCC_OscConfig+0x478>
 8009096:	e04f      	b.n	8009138 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009098:	4b0c      	ldr	r3, [pc, #48]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a0b      	ldr	r2, [pc, #44]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 800909e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090a4:	f7fa fcd4 	bl	8003a50 <HAL_GetTick>
 80090a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090aa:	e008      	b.n	80090be <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090ac:	f7fa fcd0 	bl	8003a50 <HAL_GetTick>
 80090b0:	4602      	mov	r2, r0
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d901      	bls.n	80090be <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80090ba:	2303      	movs	r3, #3
 80090bc:	e03d      	b.n	800913a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090be:	4b03      	ldr	r3, [pc, #12]	; (80090cc <HAL_RCC_OscConfig+0x4cc>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1f0      	bne.n	80090ac <HAL_RCC_OscConfig+0x4ac>
 80090ca:	e035      	b.n	8009138 <HAL_RCC_OscConfig+0x538>
 80090cc:	40023800 	.word	0x40023800
 80090d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80090d4:	4b1b      	ldr	r3, [pc, #108]	; (8009144 <HAL_RCC_OscConfig+0x544>)
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d028      	beq.n	8009134 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d121      	bne.n	8009134 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d11a      	bne.n	8009134 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009104:	4013      	ands	r3, r2
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800910a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800910c:	4293      	cmp	r3, r2
 800910e:	d111      	bne.n	8009134 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911a:	085b      	lsrs	r3, r3, #1
 800911c:	3b01      	subs	r3, #1
 800911e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009120:	429a      	cmp	r2, r3
 8009122:	d107      	bne.n	8009134 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009130:	429a      	cmp	r2, r3
 8009132:	d001      	beq.n	8009138 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	e000      	b.n	800913a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	40023800 	.word	0x40023800

08009148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009152:	2300      	movs	r3, #0
 8009154:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	e0d0      	b.n	8009302 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009160:	4b6a      	ldr	r3, [pc, #424]	; (800930c <HAL_RCC_ClockConfig+0x1c4>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 030f 	and.w	r3, r3, #15
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	429a      	cmp	r2, r3
 800916c:	d910      	bls.n	8009190 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800916e:	4b67      	ldr	r3, [pc, #412]	; (800930c <HAL_RCC_ClockConfig+0x1c4>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f023 020f 	bic.w	r2, r3, #15
 8009176:	4965      	ldr	r1, [pc, #404]	; (800930c <HAL_RCC_ClockConfig+0x1c4>)
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	4313      	orrs	r3, r2
 800917c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800917e:	4b63      	ldr	r3, [pc, #396]	; (800930c <HAL_RCC_ClockConfig+0x1c4>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 030f 	and.w	r3, r3, #15
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	429a      	cmp	r2, r3
 800918a:	d001      	beq.n	8009190 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e0b8      	b.n	8009302 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 0302 	and.w	r3, r3, #2
 8009198:	2b00      	cmp	r3, #0
 800919a:	d020      	beq.n	80091de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 0304 	and.w	r3, r3, #4
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d005      	beq.n	80091b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091a8:	4b59      	ldr	r3, [pc, #356]	; (8009310 <HAL_RCC_ClockConfig+0x1c8>)
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	4a58      	ldr	r2, [pc, #352]	; (8009310 <HAL_RCC_ClockConfig+0x1c8>)
 80091ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80091b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0308 	and.w	r3, r3, #8
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d005      	beq.n	80091cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80091c0:	4b53      	ldr	r3, [pc, #332]	; (8009310 <HAL_RCC_ClockConfig+0x1c8>)
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	4a52      	ldr	r2, [pc, #328]	; (8009310 <HAL_RCC_ClockConfig+0x1c8>)
 80091c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80091ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091cc:	4b50      	ldr	r3, [pc, #320]	; (8009310 <HAL_RCC_ClockConfig+0x1c8>)
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	494d      	ldr	r1, [pc, #308]	; (8009310 <HAL_RCC_ClockConfig+0x1c8>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d040      	beq.n	800926c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d107      	bne.n	8009202 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091f2:	4b47      	ldr	r3, [pc, #284]	; (8009310 <HAL_RCC_ClockConfig+0x1c8>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d115      	bne.n	800922a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e07f      	b.n	8009302 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	2b02      	cmp	r3, #2
 8009208:	d107      	bne.n	800921a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800920a:	4b41      	ldr	r3, [pc, #260]	; (8009310 <HAL_RCC_ClockConfig+0x1c8>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d109      	bne.n	800922a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e073      	b.n	8009302 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800921a:	4b3d      	ldr	r3, [pc, #244]	; (8009310 <HAL_RCC_ClockConfig+0x1c8>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e06b      	b.n	8009302 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800922a:	4b39      	ldr	r3, [pc, #228]	; (8009310 <HAL_RCC_ClockConfig+0x1c8>)
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	f023 0203 	bic.w	r2, r3, #3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	4936      	ldr	r1, [pc, #216]	; (8009310 <HAL_RCC_ClockConfig+0x1c8>)
 8009238:	4313      	orrs	r3, r2
 800923a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800923c:	f7fa fc08 	bl	8003a50 <HAL_GetTick>
 8009240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009242:	e00a      	b.n	800925a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009244:	f7fa fc04 	bl	8003a50 <HAL_GetTick>
 8009248:	4602      	mov	r2, r0
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009252:	4293      	cmp	r3, r2
 8009254:	d901      	bls.n	800925a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e053      	b.n	8009302 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800925a:	4b2d      	ldr	r3, [pc, #180]	; (8009310 <HAL_RCC_ClockConfig+0x1c8>)
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f003 020c 	and.w	r2, r3, #12
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	429a      	cmp	r2, r3
 800926a:	d1eb      	bne.n	8009244 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800926c:	4b27      	ldr	r3, [pc, #156]	; (800930c <HAL_RCC_ClockConfig+0x1c4>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 030f 	and.w	r3, r3, #15
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	429a      	cmp	r2, r3
 8009278:	d210      	bcs.n	800929c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800927a:	4b24      	ldr	r3, [pc, #144]	; (800930c <HAL_RCC_ClockConfig+0x1c4>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f023 020f 	bic.w	r2, r3, #15
 8009282:	4922      	ldr	r1, [pc, #136]	; (800930c <HAL_RCC_ClockConfig+0x1c4>)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	4313      	orrs	r3, r2
 8009288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800928a:	4b20      	ldr	r3, [pc, #128]	; (800930c <HAL_RCC_ClockConfig+0x1c4>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 030f 	and.w	r3, r3, #15
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	429a      	cmp	r2, r3
 8009296:	d001      	beq.n	800929c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	e032      	b.n	8009302 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0304 	and.w	r3, r3, #4
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d008      	beq.n	80092ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092a8:	4b19      	ldr	r3, [pc, #100]	; (8009310 <HAL_RCC_ClockConfig+0x1c8>)
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	4916      	ldr	r1, [pc, #88]	; (8009310 <HAL_RCC_ClockConfig+0x1c8>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 0308 	and.w	r3, r3, #8
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d009      	beq.n	80092da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80092c6:	4b12      	ldr	r3, [pc, #72]	; (8009310 <HAL_RCC_ClockConfig+0x1c8>)
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	490e      	ldr	r1, [pc, #56]	; (8009310 <HAL_RCC_ClockConfig+0x1c8>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80092da:	f000 f821 	bl	8009320 <HAL_RCC_GetSysClockFreq>
 80092de:	4601      	mov	r1, r0
 80092e0:	4b0b      	ldr	r3, [pc, #44]	; (8009310 <HAL_RCC_ClockConfig+0x1c8>)
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	091b      	lsrs	r3, r3, #4
 80092e6:	f003 030f 	and.w	r3, r3, #15
 80092ea:	4a0a      	ldr	r2, [pc, #40]	; (8009314 <HAL_RCC_ClockConfig+0x1cc>)
 80092ec:	5cd3      	ldrb	r3, [r2, r3]
 80092ee:	fa21 f303 	lsr.w	r3, r1, r3
 80092f2:	4a09      	ldr	r2, [pc, #36]	; (8009318 <HAL_RCC_ClockConfig+0x1d0>)
 80092f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80092f6:	4b09      	ldr	r3, [pc, #36]	; (800931c <HAL_RCC_ClockConfig+0x1d4>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7f9 faf0 	bl	80028e0 <HAL_InitTick>

  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	40023c00 	.word	0x40023c00
 8009310:	40023800 	.word	0x40023800
 8009314:	08025258 	.word	0x08025258
 8009318:	20000000 	.word	0x20000000
 800931c:	20000008 	.word	0x20000008

08009320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009326:	2300      	movs	r3, #0
 8009328:	607b      	str	r3, [r7, #4]
 800932a:	2300      	movs	r3, #0
 800932c:	60fb      	str	r3, [r7, #12]
 800932e:	2300      	movs	r3, #0
 8009330:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009336:	4b50      	ldr	r3, [pc, #320]	; (8009478 <HAL_RCC_GetSysClockFreq+0x158>)
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	f003 030c 	and.w	r3, r3, #12
 800933e:	2b04      	cmp	r3, #4
 8009340:	d007      	beq.n	8009352 <HAL_RCC_GetSysClockFreq+0x32>
 8009342:	2b08      	cmp	r3, #8
 8009344:	d008      	beq.n	8009358 <HAL_RCC_GetSysClockFreq+0x38>
 8009346:	2b00      	cmp	r3, #0
 8009348:	f040 808d 	bne.w	8009466 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800934c:	4b4b      	ldr	r3, [pc, #300]	; (800947c <HAL_RCC_GetSysClockFreq+0x15c>)
 800934e:	60bb      	str	r3, [r7, #8]
      break;
 8009350:	e08c      	b.n	800946c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009352:	4b4b      	ldr	r3, [pc, #300]	; (8009480 <HAL_RCC_GetSysClockFreq+0x160>)
 8009354:	60bb      	str	r3, [r7, #8]
      break;
 8009356:	e089      	b.n	800946c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009358:	4b47      	ldr	r3, [pc, #284]	; (8009478 <HAL_RCC_GetSysClockFreq+0x158>)
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009360:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009362:	4b45      	ldr	r3, [pc, #276]	; (8009478 <HAL_RCC_GetSysClockFreq+0x158>)
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800936a:	2b00      	cmp	r3, #0
 800936c:	d023      	beq.n	80093b6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800936e:	4b42      	ldr	r3, [pc, #264]	; (8009478 <HAL_RCC_GetSysClockFreq+0x158>)
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	099b      	lsrs	r3, r3, #6
 8009374:	f04f 0400 	mov.w	r4, #0
 8009378:	f240 11ff 	movw	r1, #511	; 0x1ff
 800937c:	f04f 0200 	mov.w	r2, #0
 8009380:	ea03 0501 	and.w	r5, r3, r1
 8009384:	ea04 0602 	and.w	r6, r4, r2
 8009388:	4a3d      	ldr	r2, [pc, #244]	; (8009480 <HAL_RCC_GetSysClockFreq+0x160>)
 800938a:	fb02 f106 	mul.w	r1, r2, r6
 800938e:	2200      	movs	r2, #0
 8009390:	fb02 f205 	mul.w	r2, r2, r5
 8009394:	440a      	add	r2, r1
 8009396:	493a      	ldr	r1, [pc, #232]	; (8009480 <HAL_RCC_GetSysClockFreq+0x160>)
 8009398:	fba5 0101 	umull	r0, r1, r5, r1
 800939c:	1853      	adds	r3, r2, r1
 800939e:	4619      	mov	r1, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f04f 0400 	mov.w	r4, #0
 80093a6:	461a      	mov	r2, r3
 80093a8:	4623      	mov	r3, r4
 80093aa:	f7f6 ff81 	bl	80002b0 <__aeabi_uldivmod>
 80093ae:	4603      	mov	r3, r0
 80093b0:	460c      	mov	r4, r1
 80093b2:	60fb      	str	r3, [r7, #12]
 80093b4:	e049      	b.n	800944a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093b6:	4b30      	ldr	r3, [pc, #192]	; (8009478 <HAL_RCC_GetSysClockFreq+0x158>)
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	099b      	lsrs	r3, r3, #6
 80093bc:	f04f 0400 	mov.w	r4, #0
 80093c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80093c4:	f04f 0200 	mov.w	r2, #0
 80093c8:	ea03 0501 	and.w	r5, r3, r1
 80093cc:	ea04 0602 	and.w	r6, r4, r2
 80093d0:	4629      	mov	r1, r5
 80093d2:	4632      	mov	r2, r6
 80093d4:	f04f 0300 	mov.w	r3, #0
 80093d8:	f04f 0400 	mov.w	r4, #0
 80093dc:	0154      	lsls	r4, r2, #5
 80093de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80093e2:	014b      	lsls	r3, r1, #5
 80093e4:	4619      	mov	r1, r3
 80093e6:	4622      	mov	r2, r4
 80093e8:	1b49      	subs	r1, r1, r5
 80093ea:	eb62 0206 	sbc.w	r2, r2, r6
 80093ee:	f04f 0300 	mov.w	r3, #0
 80093f2:	f04f 0400 	mov.w	r4, #0
 80093f6:	0194      	lsls	r4, r2, #6
 80093f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80093fc:	018b      	lsls	r3, r1, #6
 80093fe:	1a5b      	subs	r3, r3, r1
 8009400:	eb64 0402 	sbc.w	r4, r4, r2
 8009404:	f04f 0100 	mov.w	r1, #0
 8009408:	f04f 0200 	mov.w	r2, #0
 800940c:	00e2      	lsls	r2, r4, #3
 800940e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009412:	00d9      	lsls	r1, r3, #3
 8009414:	460b      	mov	r3, r1
 8009416:	4614      	mov	r4, r2
 8009418:	195b      	adds	r3, r3, r5
 800941a:	eb44 0406 	adc.w	r4, r4, r6
 800941e:	f04f 0100 	mov.w	r1, #0
 8009422:	f04f 0200 	mov.w	r2, #0
 8009426:	02a2      	lsls	r2, r4, #10
 8009428:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800942c:	0299      	lsls	r1, r3, #10
 800942e:	460b      	mov	r3, r1
 8009430:	4614      	mov	r4, r2
 8009432:	4618      	mov	r0, r3
 8009434:	4621      	mov	r1, r4
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f04f 0400 	mov.w	r4, #0
 800943c:	461a      	mov	r2, r3
 800943e:	4623      	mov	r3, r4
 8009440:	f7f6 ff36 	bl	80002b0 <__aeabi_uldivmod>
 8009444:	4603      	mov	r3, r0
 8009446:	460c      	mov	r4, r1
 8009448:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800944a:	4b0b      	ldr	r3, [pc, #44]	; (8009478 <HAL_RCC_GetSysClockFreq+0x158>)
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	0c1b      	lsrs	r3, r3, #16
 8009450:	f003 0303 	and.w	r3, r3, #3
 8009454:	3301      	adds	r3, #1
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009462:	60bb      	str	r3, [r7, #8]
      break;
 8009464:	e002      	b.n	800946c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009466:	4b05      	ldr	r3, [pc, #20]	; (800947c <HAL_RCC_GetSysClockFreq+0x15c>)
 8009468:	60bb      	str	r3, [r7, #8]
      break;
 800946a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800946c:	68bb      	ldr	r3, [r7, #8]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009476:	bf00      	nop
 8009478:	40023800 	.word	0x40023800
 800947c:	00f42400 	.word	0x00f42400
 8009480:	017d7840 	.word	0x017d7840

08009484 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009484:	b480      	push	{r7}
 8009486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009488:	4b03      	ldr	r3, [pc, #12]	; (8009498 <HAL_RCC_GetHCLKFreq+0x14>)
 800948a:	681b      	ldr	r3, [r3, #0]
}
 800948c:	4618      	mov	r0, r3
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	20000000 	.word	0x20000000

0800949c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80094a0:	f7ff fff0 	bl	8009484 <HAL_RCC_GetHCLKFreq>
 80094a4:	4601      	mov	r1, r0
 80094a6:	4b05      	ldr	r3, [pc, #20]	; (80094bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	0a9b      	lsrs	r3, r3, #10
 80094ac:	f003 0307 	and.w	r3, r3, #7
 80094b0:	4a03      	ldr	r2, [pc, #12]	; (80094c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80094b2:	5cd3      	ldrb	r3, [r2, r3]
 80094b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	40023800 	.word	0x40023800
 80094c0:	08025268 	.word	0x08025268

080094c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80094c8:	f7ff ffdc 	bl	8009484 <HAL_RCC_GetHCLKFreq>
 80094cc:	4601      	mov	r1, r0
 80094ce:	4b05      	ldr	r3, [pc, #20]	; (80094e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	0b5b      	lsrs	r3, r3, #13
 80094d4:	f003 0307 	and.w	r3, r3, #7
 80094d8:	4a03      	ldr	r2, [pc, #12]	; (80094e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80094da:	5cd3      	ldrb	r3, [r2, r3]
 80094dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	40023800 	.word	0x40023800
 80094e8:	08025268 	.word	0x08025268

080094ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	220f      	movs	r2, #15
 80094fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80094fc:	4b12      	ldr	r3, [pc, #72]	; (8009548 <HAL_RCC_GetClockConfig+0x5c>)
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f003 0203 	and.w	r2, r3, #3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009508:	4b0f      	ldr	r3, [pc, #60]	; (8009548 <HAL_RCC_GetClockConfig+0x5c>)
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009514:	4b0c      	ldr	r3, [pc, #48]	; (8009548 <HAL_RCC_GetClockConfig+0x5c>)
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009520:	4b09      	ldr	r3, [pc, #36]	; (8009548 <HAL_RCC_GetClockConfig+0x5c>)
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	08db      	lsrs	r3, r3, #3
 8009526:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800952e:	4b07      	ldr	r3, [pc, #28]	; (800954c <HAL_RCC_GetClockConfig+0x60>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 020f 	and.w	r2, r3, #15
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	601a      	str	r2, [r3, #0]
}
 800953a:	bf00      	nop
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	40023800 	.word	0x40023800
 800954c:	40023c00 	.word	0x40023c00

08009550 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b088      	sub	sp, #32
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009558:	2300      	movs	r3, #0
 800955a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800955c:	2300      	movs	r3, #0
 800955e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009560:	2300      	movs	r3, #0
 8009562:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009564:	2300      	movs	r3, #0
 8009566:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009568:	2300      	movs	r3, #0
 800956a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 0301 	and.w	r3, r3, #1
 8009574:	2b00      	cmp	r3, #0
 8009576:	d012      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009578:	4b69      	ldr	r3, [pc, #420]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	4a68      	ldr	r2, [pc, #416]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800957e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009582:	6093      	str	r3, [r2, #8]
 8009584:	4b66      	ldr	r3, [pc, #408]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009586:	689a      	ldr	r2, [r3, #8]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800958c:	4964      	ldr	r1, [pc, #400]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800958e:	4313      	orrs	r3, r2
 8009590:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800959a:	2301      	movs	r3, #1
 800959c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d017      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80095aa:	4b5d      	ldr	r3, [pc, #372]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b8:	4959      	ldr	r1, [pc, #356]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095c8:	d101      	bne.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80095ca:	2301      	movs	r3, #1
 80095cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d101      	bne.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80095d6:	2301      	movs	r3, #1
 80095d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d017      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80095e6:	4b4e      	ldr	r3, [pc, #312]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f4:	494a      	ldr	r1, [pc, #296]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095f6:	4313      	orrs	r3, r2
 80095f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009604:	d101      	bne.n	800960a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009606:	2301      	movs	r3, #1
 8009608:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960e:	2b00      	cmp	r3, #0
 8009610:	d101      	bne.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009612:	2301      	movs	r3, #1
 8009614:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009622:	2301      	movs	r3, #1
 8009624:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 0320 	and.w	r3, r3, #32
 800962e:	2b00      	cmp	r3, #0
 8009630:	f000 808b 	beq.w	800974a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009634:	4b3a      	ldr	r3, [pc, #232]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009638:	4a39      	ldr	r2, [pc, #228]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800963a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800963e:	6413      	str	r3, [r2, #64]	; 0x40
 8009640:	4b37      	ldr	r3, [pc, #220]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009648:	60bb      	str	r3, [r7, #8]
 800964a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800964c:	4b35      	ldr	r3, [pc, #212]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a34      	ldr	r2, [pc, #208]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009658:	f7fa f9fa 	bl	8003a50 <HAL_GetTick>
 800965c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800965e:	e008      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009660:	f7fa f9f6 	bl	8003a50 <HAL_GetTick>
 8009664:	4602      	mov	r2, r0
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	2b64      	cmp	r3, #100	; 0x64
 800966c:	d901      	bls.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800966e:	2303      	movs	r3, #3
 8009670:	e357      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009672:	4b2c      	ldr	r3, [pc, #176]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800967a:	2b00      	cmp	r3, #0
 800967c:	d0f0      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800967e:	4b28      	ldr	r3, [pc, #160]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009686:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d035      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	429a      	cmp	r2, r3
 800969a:	d02e      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800969c:	4b20      	ldr	r3, [pc, #128]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800969e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80096a6:	4b1e      	ldr	r3, [pc, #120]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096aa:	4a1d      	ldr	r2, [pc, #116]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80096b2:	4b1b      	ldr	r3, [pc, #108]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096b6:	4a1a      	ldr	r2, [pc, #104]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80096be:	4a18      	ldr	r2, [pc, #96]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80096c4:	4b16      	ldr	r3, [pc, #88]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c8:	f003 0301 	and.w	r3, r3, #1
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d114      	bne.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096d0:	f7fa f9be 	bl	8003a50 <HAL_GetTick>
 80096d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096d6:	e00a      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80096d8:	f7fa f9ba 	bl	8003a50 <HAL_GetTick>
 80096dc:	4602      	mov	r2, r0
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d901      	bls.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80096ea:	2303      	movs	r3, #3
 80096ec:	e319      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096ee:	4b0c      	ldr	r3, [pc, #48]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f2:	f003 0302 	and.w	r3, r3, #2
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d0ee      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009706:	d111      	bne.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009708:	4b05      	ldr	r3, [pc, #20]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009714:	4b04      	ldr	r3, [pc, #16]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009716:	400b      	ands	r3, r1
 8009718:	4901      	ldr	r1, [pc, #4]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800971a:	4313      	orrs	r3, r2
 800971c:	608b      	str	r3, [r1, #8]
 800971e:	e00b      	b.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009720:	40023800 	.word	0x40023800
 8009724:	40007000 	.word	0x40007000
 8009728:	0ffffcff 	.word	0x0ffffcff
 800972c:	4bb1      	ldr	r3, [pc, #708]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	4ab0      	ldr	r2, [pc, #704]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009732:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009736:	6093      	str	r3, [r2, #8]
 8009738:	4bae      	ldr	r3, [pc, #696]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800973a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009744:	49ab      	ldr	r1, [pc, #684]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009746:	4313      	orrs	r3, r2
 8009748:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0310 	and.w	r3, r3, #16
 8009752:	2b00      	cmp	r3, #0
 8009754:	d010      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009756:	4ba7      	ldr	r3, [pc, #668]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800975c:	4aa5      	ldr	r2, [pc, #660]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800975e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009762:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009766:	4ba3      	ldr	r3, [pc, #652]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009768:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009770:	49a0      	ldr	r1, [pc, #640]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009772:	4313      	orrs	r3, r2
 8009774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00a      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009784:	4b9b      	ldr	r3, [pc, #620]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800978a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009792:	4998      	ldr	r1, [pc, #608]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009794:	4313      	orrs	r3, r2
 8009796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00a      	beq.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80097a6:	4b93      	ldr	r3, [pc, #588]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80097a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097b4:	498f      	ldr	r1, [pc, #572]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00a      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80097c8:	4b8a      	ldr	r3, [pc, #552]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80097ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097d6:	4987      	ldr	r1, [pc, #540]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80097d8:	4313      	orrs	r3, r2
 80097da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00a      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80097ea:	4b82      	ldr	r3, [pc, #520]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80097ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f8:	497e      	ldr	r1, [pc, #504]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80097fa:	4313      	orrs	r3, r2
 80097fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00a      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800980c:	4b79      	ldr	r3, [pc, #484]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800980e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009812:	f023 0203 	bic.w	r2, r3, #3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800981a:	4976      	ldr	r1, [pc, #472]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800981c:	4313      	orrs	r3, r2
 800981e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00a      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800982e:	4b71      	ldr	r3, [pc, #452]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009834:	f023 020c 	bic.w	r2, r3, #12
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800983c:	496d      	ldr	r1, [pc, #436]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800983e:	4313      	orrs	r3, r2
 8009840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00a      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009850:	4b68      	ldr	r3, [pc, #416]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009856:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800985e:	4965      	ldr	r1, [pc, #404]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009860:	4313      	orrs	r3, r2
 8009862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00a      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009872:	4b60      	ldr	r3, [pc, #384]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009878:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009880:	495c      	ldr	r1, [pc, #368]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009882:	4313      	orrs	r3, r2
 8009884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00a      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009894:	4b57      	ldr	r3, [pc, #348]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800989a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098a2:	4954      	ldr	r1, [pc, #336]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00a      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80098b6:	4b4f      	ldr	r3, [pc, #316]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098c4:	494b      	ldr	r1, [pc, #300]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00a      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80098d8:	4b46      	ldr	r3, [pc, #280]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098e6:	4943      	ldr	r1, [pc, #268]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098e8:	4313      	orrs	r3, r2
 80098ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00a      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80098fa:	4b3e      	ldr	r3, [pc, #248]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009900:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009908:	493a      	ldr	r1, [pc, #232]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800990a:	4313      	orrs	r3, r2
 800990c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00a      	beq.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800991c:	4b35      	ldr	r3, [pc, #212]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800991e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009922:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800992a:	4932      	ldr	r1, [pc, #200]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800992c:	4313      	orrs	r3, r2
 800992e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d011      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800993e:	4b2d      	ldr	r3, [pc, #180]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009944:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800994c:	4929      	ldr	r1, [pc, #164]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800994e:	4313      	orrs	r3, r2
 8009950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009958:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800995c:	d101      	bne.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800995e:	2301      	movs	r3, #1
 8009960:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f003 0308 	and.w	r3, r3, #8
 800996a:	2b00      	cmp	r3, #0
 800996c:	d001      	beq.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800996e:	2301      	movs	r3, #1
 8009970:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00a      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800997e:	4b1d      	ldr	r3, [pc, #116]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009984:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800998c:	4919      	ldr	r1, [pc, #100]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800998e:	4313      	orrs	r3, r2
 8009990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d00b      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80099a0:	4b14      	ldr	r3, [pc, #80]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80099a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099b0:	4910      	ldr	r1, [pc, #64]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d006      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f000 80d9 	beq.w	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80099cc:	4b09      	ldr	r3, [pc, #36]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a08      	ldr	r2, [pc, #32]	; (80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80099d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099d8:	f7fa f83a 	bl	8003a50 <HAL_GetTick>
 80099dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80099de:	e00b      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80099e0:	f7fa f836 	bl	8003a50 <HAL_GetTick>
 80099e4:	4602      	mov	r2, r0
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	2b64      	cmp	r3, #100	; 0x64
 80099ec:	d904      	bls.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80099ee:	2303      	movs	r3, #3
 80099f0:	e197      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80099f2:	bf00      	nop
 80099f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80099f8:	4b6c      	ldr	r3, [pc, #432]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1ed      	bne.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0301 	and.w	r3, r3, #1
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d021      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d11d      	bne.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009a18:	4b64      	ldr	r3, [pc, #400]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a1e:	0c1b      	lsrs	r3, r3, #16
 8009a20:	f003 0303 	and.w	r3, r3, #3
 8009a24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009a26:	4b61      	ldr	r3, [pc, #388]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a2c:	0e1b      	lsrs	r3, r3, #24
 8009a2e:	f003 030f 	and.w	r3, r3, #15
 8009a32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	019a      	lsls	r2, r3, #6
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	041b      	lsls	r3, r3, #16
 8009a3e:	431a      	orrs	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	061b      	lsls	r3, r3, #24
 8009a44:	431a      	orrs	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	071b      	lsls	r3, r3, #28
 8009a4c:	4957      	ldr	r1, [pc, #348]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d004      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a68:	d00a      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d02e      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a7e:	d129      	bne.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009a80:	4b4a      	ldr	r3, [pc, #296]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a86:	0c1b      	lsrs	r3, r3, #16
 8009a88:	f003 0303 	and.w	r3, r3, #3
 8009a8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009a8e:	4b47      	ldr	r3, [pc, #284]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a94:	0f1b      	lsrs	r3, r3, #28
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	019a      	lsls	r2, r3, #6
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	041b      	lsls	r3, r3, #16
 8009aa6:	431a      	orrs	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	061b      	lsls	r3, r3, #24
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	071b      	lsls	r3, r3, #28
 8009ab4:	493d      	ldr	r1, [pc, #244]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009abc:	4b3b      	ldr	r3, [pc, #236]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ac2:	f023 021f 	bic.w	r2, r3, #31
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aca:	3b01      	subs	r3, #1
 8009acc:	4937      	ldr	r1, [pc, #220]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d01d      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009ae0:	4b32      	ldr	r3, [pc, #200]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ae6:	0e1b      	lsrs	r3, r3, #24
 8009ae8:	f003 030f 	and.w	r3, r3, #15
 8009aec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009aee:	4b2f      	ldr	r3, [pc, #188]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009af4:	0f1b      	lsrs	r3, r3, #28
 8009af6:	f003 0307 	and.w	r3, r3, #7
 8009afa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	019a      	lsls	r2, r3, #6
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	691b      	ldr	r3, [r3, #16]
 8009b06:	041b      	lsls	r3, r3, #16
 8009b08:	431a      	orrs	r2, r3
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	061b      	lsls	r3, r3, #24
 8009b0e:	431a      	orrs	r2, r3
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	071b      	lsls	r3, r3, #28
 8009b14:	4925      	ldr	r1, [pc, #148]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d011      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	019a      	lsls	r2, r3, #6
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	041b      	lsls	r3, r3, #16
 8009b34:	431a      	orrs	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	061b      	lsls	r3, r3, #24
 8009b3c:	431a      	orrs	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	071b      	lsls	r3, r3, #28
 8009b44:	4919      	ldr	r1, [pc, #100]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b46:	4313      	orrs	r3, r2
 8009b48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009b4c:	4b17      	ldr	r3, [pc, #92]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a16      	ldr	r2, [pc, #88]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b58:	f7f9 ff7a 	bl	8003a50 <HAL_GetTick>
 8009b5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b5e:	e008      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009b60:	f7f9 ff76 	bl	8003a50 <HAL_GetTick>
 8009b64:	4602      	mov	r2, r0
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	2b64      	cmp	r3, #100	; 0x64
 8009b6c:	d901      	bls.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e0d7      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b72:	4b0e      	ldr	r3, [pc, #56]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d0f0      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	f040 80cd 	bne.w	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009b86:	4b09      	ldr	r3, [pc, #36]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a08      	ldr	r2, [pc, #32]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b92:	f7f9 ff5d 	bl	8003a50 <HAL_GetTick>
 8009b96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009b98:	e00a      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009b9a:	f7f9 ff59 	bl	8003a50 <HAL_GetTick>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	2b64      	cmp	r3, #100	; 0x64
 8009ba6:	d903      	bls.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e0ba      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009bac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009bb0:	4b5e      	ldr	r3, [pc, #376]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bbc:	d0ed      	beq.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d009      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d02e      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d12a      	bne.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009be6:	4b51      	ldr	r3, [pc, #324]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bec:	0c1b      	lsrs	r3, r3, #16
 8009bee:	f003 0303 	and.w	r3, r3, #3
 8009bf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009bf4:	4b4d      	ldr	r3, [pc, #308]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bfa:	0f1b      	lsrs	r3, r3, #28
 8009bfc:	f003 0307 	and.w	r3, r3, #7
 8009c00:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	019a      	lsls	r2, r3, #6
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	041b      	lsls	r3, r3, #16
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	061b      	lsls	r3, r3, #24
 8009c14:	431a      	orrs	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	071b      	lsls	r3, r3, #28
 8009c1a:	4944      	ldr	r1, [pc, #272]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009c22:	4b42      	ldr	r3, [pc, #264]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c30:	3b01      	subs	r3, #1
 8009c32:	021b      	lsls	r3, r3, #8
 8009c34:	493d      	ldr	r1, [pc, #244]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c36:	4313      	orrs	r3, r2
 8009c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d022      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c50:	d11d      	bne.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009c52:	4b36      	ldr	r3, [pc, #216]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c58:	0e1b      	lsrs	r3, r3, #24
 8009c5a:	f003 030f 	and.w	r3, r3, #15
 8009c5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009c60:	4b32      	ldr	r3, [pc, #200]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c66:	0f1b      	lsrs	r3, r3, #28
 8009c68:	f003 0307 	and.w	r3, r3, #7
 8009c6c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	695b      	ldr	r3, [r3, #20]
 8009c72:	019a      	lsls	r2, r3, #6
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a1b      	ldr	r3, [r3, #32]
 8009c78:	041b      	lsls	r3, r3, #16
 8009c7a:	431a      	orrs	r2, r3
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	061b      	lsls	r3, r3, #24
 8009c80:	431a      	orrs	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	071b      	lsls	r3, r3, #28
 8009c86:	4929      	ldr	r1, [pc, #164]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 0308 	and.w	r3, r3, #8
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d028      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009c9a:	4b24      	ldr	r3, [pc, #144]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ca0:	0e1b      	lsrs	r3, r3, #24
 8009ca2:	f003 030f 	and.w	r3, r3, #15
 8009ca6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009ca8:	4b20      	ldr	r3, [pc, #128]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cae:	0c1b      	lsrs	r3, r3, #16
 8009cb0:	f003 0303 	and.w	r3, r3, #3
 8009cb4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	019a      	lsls	r2, r3, #6
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	041b      	lsls	r3, r3, #16
 8009cc0:	431a      	orrs	r2, r3
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	061b      	lsls	r3, r3, #24
 8009cc6:	431a      	orrs	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	69db      	ldr	r3, [r3, #28]
 8009ccc:	071b      	lsls	r3, r3, #28
 8009cce:	4917      	ldr	r1, [pc, #92]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009cd6:	4b15      	ldr	r3, [pc, #84]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce4:	4911      	ldr	r1, [pc, #68]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009cec:	4b0f      	ldr	r3, [pc, #60]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a0e      	ldr	r2, [pc, #56]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cf8:	f7f9 feaa 	bl	8003a50 <HAL_GetTick>
 8009cfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009cfe:	e008      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009d00:	f7f9 fea6 	bl	8003a50 <HAL_GetTick>
 8009d04:	4602      	mov	r2, r0
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	2b64      	cmp	r3, #100	; 0x64
 8009d0c:	d901      	bls.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	e007      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009d12:	4b06      	ldr	r3, [pc, #24]	; (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d1e:	d1ef      	bne.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3720      	adds	r7, #32
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	40023800 	.word	0x40023800

08009d30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b087      	sub	sp, #28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009d40:	2300      	movs	r3, #0
 8009d42:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009d44:	2300      	movs	r3, #0
 8009d46:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009d4e:	f040 8086 	bne.w	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009d52:	4b8d      	ldr	r3, [pc, #564]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d58:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009d60:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d68:	d03e      	beq.n	8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8009d6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d6e:	d073      	beq.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d000      	beq.n	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009d74:	e074      	b.n	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009d76:	4b84      	ldr	r3, [pc, #528]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d108      	bne.n	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009d82:	4b81      	ldr	r3, [pc, #516]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d8a:	4a80      	ldr	r2, [pc, #512]	; (8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d90:	613b      	str	r3, [r7, #16]
 8009d92:	e007      	b.n	8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009d94:	4b7c      	ldr	r3, [pc, #496]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d9c:	4a7c      	ldr	r2, [pc, #496]	; (8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009da2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009da4:	4b78      	ldr	r3, [pc, #480]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009daa:	0e1b      	lsrs	r3, r3, #24
 8009dac:	f003 030f 	and.w	r3, r3, #15
 8009db0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009db2:	4b75      	ldr	r3, [pc, #468]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db8:	099b      	lsrs	r3, r3, #6
 8009dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	fb02 f203 	mul.w	r2, r2, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dca:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009dcc:	4b6e      	ldr	r3, [pc, #440]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dd2:	0a1b      	lsrs	r3, r3, #8
 8009dd4:	f003 031f 	and.w	r3, r3, #31
 8009dd8:	3301      	adds	r3, #1
 8009dda:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009ddc:	697a      	ldr	r2, [r7, #20]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de4:	617b      	str	r3, [r7, #20]
        break;
 8009de6:	e03b      	b.n	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009de8:	4b67      	ldr	r3, [pc, #412]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d108      	bne.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009df4:	4b64      	ldr	r3, [pc, #400]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009dfc:	4a63      	ldr	r2, [pc, #396]	; (8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e02:	613b      	str	r3, [r7, #16]
 8009e04:	e007      	b.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009e06:	4b60      	ldr	r3, [pc, #384]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e0e:	4a60      	ldr	r2, [pc, #384]	; (8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e14:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009e16:	4b5c      	ldr	r3, [pc, #368]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e1c:	0e1b      	lsrs	r3, r3, #24
 8009e1e:	f003 030f 	and.w	r3, r3, #15
 8009e22:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009e24:	4b58      	ldr	r3, [pc, #352]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e2a:	099b      	lsrs	r3, r3, #6
 8009e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e30:	693a      	ldr	r2, [r7, #16]
 8009e32:	fb02 f203 	mul.w	r2, r2, r3
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e3c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009e3e:	4b52      	ldr	r3, [pc, #328]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e44:	f003 031f 	and.w	r3, r3, #31
 8009e48:	3301      	adds	r3, #1
 8009e4a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009e4c:	697a      	ldr	r2, [r7, #20]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e54:	617b      	str	r3, [r7, #20]
        break;
 8009e56:	e003      	b.n	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e58:	4b4e      	ldr	r3, [pc, #312]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8009e5a:	617b      	str	r3, [r7, #20]
        break;
 8009e5c:	e000      	b.n	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8009e5e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e66:	f040 8086 	bne.w	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009e6a:	4b47      	ldr	r3, [pc, #284]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e70:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009e78:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e80:	d03e      	beq.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009e82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e86:	d073      	beq.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d000      	beq.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009e8c:	e074      	b.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009e8e:	4b3e      	ldr	r3, [pc, #248]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d108      	bne.n	8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009e9a:	4b3b      	ldr	r3, [pc, #236]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ea2:	4a3a      	ldr	r2, [pc, #232]	; (8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ea8:	613b      	str	r3, [r7, #16]
 8009eaa:	e007      	b.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009eac:	4b36      	ldr	r3, [pc, #216]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009eb4:	4a36      	ldr	r2, [pc, #216]	; (8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eba:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009ebc:	4b32      	ldr	r3, [pc, #200]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ec2:	0e1b      	lsrs	r3, r3, #24
 8009ec4:	f003 030f 	and.w	r3, r3, #15
 8009ec8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009eca:	4b2f      	ldr	r3, [pc, #188]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed0:	099b      	lsrs	r3, r3, #6
 8009ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	fb02 f203 	mul.w	r2, r2, r3
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009ee4:	4b28      	ldr	r3, [pc, #160]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eea:	0a1b      	lsrs	r3, r3, #8
 8009eec:	f003 031f 	and.w	r3, r3, #31
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009ef4:	697a      	ldr	r2, [r7, #20]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009efc:	617b      	str	r3, [r7, #20]
        break;
 8009efe:	e03b      	b.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009f00:	4b21      	ldr	r3, [pc, #132]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d108      	bne.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009f0c:	4b1e      	ldr	r3, [pc, #120]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f14:	4a1d      	ldr	r2, [pc, #116]	; (8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f1a:	613b      	str	r3, [r7, #16]
 8009f1c:	e007      	b.n	8009f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009f1e:	4b1a      	ldr	r3, [pc, #104]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f26:	4a1a      	ldr	r2, [pc, #104]	; (8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f2c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009f2e:	4b16      	ldr	r3, [pc, #88]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f34:	0e1b      	lsrs	r3, r3, #24
 8009f36:	f003 030f 	and.w	r3, r3, #15
 8009f3a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009f3c:	4b12      	ldr	r3, [pc, #72]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f42:	099b      	lsrs	r3, r3, #6
 8009f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	fb02 f203 	mul.w	r2, r2, r3
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f54:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009f56:	4b0c      	ldr	r3, [pc, #48]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f5c:	f003 031f 	and.w	r3, r3, #31
 8009f60:	3301      	adds	r3, #1
 8009f62:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f6c:	617b      	str	r3, [r7, #20]
        break;
 8009f6e:	e003      	b.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009f70:	4b08      	ldr	r3, [pc, #32]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8009f72:	617b      	str	r3, [r7, #20]
        break;
 8009f74:	e000      	b.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8009f76:	bf00      	nop

  return frequency;
 8009f78:	697b      	ldr	r3, [r7, #20]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	371c      	adds	r7, #28
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	40023800 	.word	0x40023800
 8009f8c:	00f42400 	.word	0x00f42400
 8009f90:	017d7840 	.word	0x017d7840
 8009f94:	00bb8000 	.word	0x00bb8000

08009f98 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d101      	bne.n	8009faa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e081      	b.n	800a0ae <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	7f5b      	ldrb	r3, [r3, #29]
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d105      	bne.n	8009fc0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7f8 f8de 	bl	800217c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	22ca      	movs	r2, #202	; 0xca
 8009fcc:	625a      	str	r2, [r3, #36]	; 0x24
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2253      	movs	r2, #83	; 0x53
 8009fd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fb16 	bl	800a608 <RTC_EnterInitMode>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d008      	beq.n	8009ff4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	22ff      	movs	r2, #255	; 0xff
 8009fe8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2204      	movs	r2, #4
 8009fee:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e05c      	b.n	800a0ae <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6899      	ldr	r1, [r3, #8]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	4b2e      	ldr	r3, [pc, #184]	; (800a0b8 <HAL_RTC_Init+0x120>)
 800a000:	400b      	ands	r3, r1
 800a002:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6899      	ldr	r1, [r3, #8]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	431a      	orrs	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	695b      	ldr	r3, [r3, #20]
 800a018:	431a      	orrs	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	430a      	orrs	r2, r1
 800a020:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	68d2      	ldr	r2, [r2, #12]
 800a02a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6919      	ldr	r1, [r3, #16]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	041a      	lsls	r2, r3, #16
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	430a      	orrs	r2, r1
 800a03e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68da      	ldr	r2, [r3, #12]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a04e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f003 0320 	and.w	r3, r3, #32
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10e      	bne.n	800a07c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 faaa 	bl	800a5b8 <HAL_RTC_WaitForSynchro>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d008      	beq.n	800a07c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	22ff      	movs	r2, #255	; 0xff
 800a070:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2204      	movs	r2, #4
 800a076:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	e018      	b.n	800a0ae <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f022 0208 	bic.w	r2, r2, #8
 800a08a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	699a      	ldr	r2, [r3, #24]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	430a      	orrs	r2, r1
 800a09c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	22ff      	movs	r2, #255	; 0xff
 800a0a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a0ac:	2300      	movs	r3, #0
  }
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	ff8fffbf 	.word	0xff8fffbf

0800a0bc <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a0bc:	b590      	push	{r4, r7, lr}
 800a0be:	b087      	sub	sp, #28
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	7f1b      	ldrb	r3, [r3, #28]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d101      	bne.n	800a0d8 <HAL_RTC_SetTime+0x1c>
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	e0a8      	b.n	800a22a <HAL_RTC_SetTime+0x16e>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2202      	movs	r2, #2
 800a0e2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d126      	bne.n	800a138 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d102      	bne.n	800a0fe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	4618      	mov	r0, r3
 800a104:	f000 faac 	bl	800a660 <RTC_ByteToBcd2>
 800a108:	4603      	mov	r3, r0
 800a10a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	785b      	ldrb	r3, [r3, #1]
 800a110:	4618      	mov	r0, r3
 800a112:	f000 faa5 	bl	800a660 <RTC_ByteToBcd2>
 800a116:	4603      	mov	r3, r0
 800a118:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a11a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	789b      	ldrb	r3, [r3, #2]
 800a120:	4618      	mov	r0, r3
 800a122:	f000 fa9d 	bl	800a660 <RTC_ByteToBcd2>
 800a126:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a128:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	7b1b      	ldrb	r3, [r3, #12]
 800a130:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a132:	4313      	orrs	r3, r2
 800a134:	617b      	str	r3, [r7, #20]
 800a136:	e018      	b.n	800a16a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a142:	2b00      	cmp	r3, #0
 800a144:	d102      	bne.n	800a14c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	2200      	movs	r2, #0
 800a14a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	785b      	ldrb	r3, [r3, #1]
 800a156:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a158:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a15e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	7b1b      	ldrb	r3, [r3, #12]
 800a164:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a166:	4313      	orrs	r3, r2
 800a168:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	22ca      	movs	r2, #202	; 0xca
 800a170:	625a      	str	r2, [r3, #36]	; 0x24
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2253      	movs	r2, #83	; 0x53
 800a178:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 fa44 	bl	800a608 <RTC_EnterInitMode>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00b      	beq.n	800a19e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	22ff      	movs	r2, #255	; 0xff
 800a18c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2204      	movs	r2, #4
 800a192:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e045      	b.n	800a22a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	6979      	ldr	r1, [r7, #20]
 800a1a4:	4b23      	ldr	r3, [pc, #140]	; (800a234 <HAL_RTC_SetTime+0x178>)
 800a1a6:	400b      	ands	r3, r1
 800a1a8:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	689a      	ldr	r2, [r3, #8]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a1b8:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6899      	ldr	r1, [r3, #8]
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	691a      	ldr	r2, [r3, #16]
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	695b      	ldr	r3, [r3, #20]
 800a1c8:	431a      	orrs	r2, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68da      	ldr	r2, [r3, #12]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1e0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	f003 0320 	and.w	r3, r3, #32
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d111      	bne.n	800a214 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f000 f9e1 	bl	800a5b8 <HAL_RTC_WaitForSynchro>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00b      	beq.n	800a214 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	22ff      	movs	r2, #255	; 0xff
 800a202:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2204      	movs	r2, #4
 800a208:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	e00a      	b.n	800a22a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	22ff      	movs	r2, #255	; 0xff
 800a21a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2201      	movs	r2, #1
 800a220:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a228:	2300      	movs	r3, #0
  }
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	371c      	adds	r7, #28
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd90      	pop	{r4, r7, pc}
 800a232:	bf00      	nop
 800a234:	007f7f7f 	.word	0x007f7f7f

0800a238 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a238:	b590      	push	{r4, r7, lr}
 800a23a:	b087      	sub	sp, #28
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800a244:	2300      	movs	r3, #0
 800a246:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	7f1b      	ldrb	r3, [r3, #28]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d101      	bne.n	800a254 <HAL_RTC_SetDate+0x1c>
 800a250:	2302      	movs	r3, #2
 800a252:	e092      	b.n	800a37a <HAL_RTC_SetDate+0x142>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2201      	movs	r2, #1
 800a258:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2202      	movs	r2, #2
 800a25e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10e      	bne.n	800a284 <HAL_RTC_SetDate+0x4c>
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	785b      	ldrb	r3, [r3, #1]
 800a26a:	f003 0310 	and.w	r3, r3, #16
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d008      	beq.n	800a284 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	785b      	ldrb	r3, [r3, #1]
 800a276:	f023 0310 	bic.w	r3, r3, #16
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	330a      	adds	r3, #10
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d11c      	bne.n	800a2c4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	78db      	ldrb	r3, [r3, #3]
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 f9e6 	bl	800a660 <RTC_ByteToBcd2>
 800a294:	4603      	mov	r3, r0
 800a296:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	785b      	ldrb	r3, [r3, #1]
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 f9df 	bl	800a660 <RTC_ByteToBcd2>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a2a6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	789b      	ldrb	r3, [r3, #2]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 f9d7 	bl	800a660 <RTC_ByteToBcd2>
 800a2b2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a2b4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	617b      	str	r3, [r7, #20]
 800a2c2:	e00e      	b.n	800a2e2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	78db      	ldrb	r3, [r3, #3]
 800a2c8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	785b      	ldrb	r3, [r3, #1]
 800a2ce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a2d0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800a2d6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	22ca      	movs	r2, #202	; 0xca
 800a2e8:	625a      	str	r2, [r3, #36]	; 0x24
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2253      	movs	r2, #83	; 0x53
 800a2f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 f988 	bl	800a608 <RTC_EnterInitMode>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00b      	beq.n	800a316 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	22ff      	movs	r2, #255	; 0xff
 800a304:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2204      	movs	r2, #4
 800a30a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e031      	b.n	800a37a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	6979      	ldr	r1, [r7, #20]
 800a31c:	4b19      	ldr	r3, [pc, #100]	; (800a384 <HAL_RTC_SetDate+0x14c>)
 800a31e:	400b      	ands	r3, r1
 800a320:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68da      	ldr	r2, [r3, #12]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a330:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	f003 0320 	and.w	r3, r3, #32
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d111      	bne.n	800a364 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f000 f939 	bl	800a5b8 <HAL_RTC_WaitForSynchro>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00b      	beq.n	800a364 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	22ff      	movs	r2, #255	; 0xff
 800a352:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2204      	movs	r2, #4
 800a358:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	e00a      	b.n	800a37a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	22ff      	movs	r2, #255	; 0xff
 800a36a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2201      	movs	r2, #1
 800a370:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a378:	2300      	movs	r3, #0
  }
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	371c      	adds	r7, #28
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd90      	pop	{r4, r7, pc}
 800a382:	bf00      	nop
 800a384:	00ffff3f 	.word	0x00ffff3f

0800a388 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a388:	b590      	push	{r4, r7, lr}
 800a38a:	b089      	sub	sp, #36	; 0x24
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800a394:	2300      	movs	r3, #0
 800a396:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800a398:	2300      	movs	r3, #0
 800a39a:	61fb      	str	r3, [r7, #28]
 800a39c:	2300      	movs	r3, #0
 800a39e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	7f1b      	ldrb	r3, [r3, #28]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d101      	bne.n	800a3ac <HAL_RTC_SetAlarm+0x24>
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	e101      	b.n	800a5b0 <HAL_RTC_SetAlarm+0x228>
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2202      	movs	r2, #2
 800a3b6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d137      	bne.n	800a42e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d102      	bne.n	800a3d2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 f942 	bl	800a660 <RTC_ByteToBcd2>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	785b      	ldrb	r3, [r3, #1]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 f93b 	bl	800a660 <RTC_ByteToBcd2>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a3ee:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	789b      	ldrb	r3, [r3, #2]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f000 f933 	bl	800a660 <RTC_ByteToBcd2>
 800a3fa:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a3fc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	7b1b      	ldrb	r3, [r3, #12]
 800a404:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a406:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a410:	4618      	mov	r0, r3
 800a412:	f000 f925 	bl	800a660 <RTC_ByteToBcd2>
 800a416:	4603      	mov	r3, r0
 800a418:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a41a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a422:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a428:	4313      	orrs	r3, r2
 800a42a:	61fb      	str	r3, [r7, #28]
 800a42c:	e023      	b.n	800a476 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d102      	bne.n	800a442 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	2200      	movs	r2, #0
 800a440:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	785b      	ldrb	r3, [r3, #1]
 800a44c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a44e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a454:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	7b1b      	ldrb	r3, [r3, #12]
 800a45a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a45c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a464:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a466:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a46c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a472:	4313      	orrs	r3, r2
 800a474:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	685a      	ldr	r2, [r3, #4]
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	69db      	ldr	r3, [r3, #28]
 800a47e:	4313      	orrs	r3, r2
 800a480:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	22ca      	movs	r2, #202	; 0xca
 800a488:	625a      	str	r2, [r3, #36]	; 0x24
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2253      	movs	r2, #83	; 0x53
 800a490:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a49a:	d13f      	bne.n	800a51c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	689a      	ldr	r2, [r3, #8]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4aa:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	689a      	ldr	r2, [r3, #8]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a4ba:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a4bc:	f7f9 fac8 	bl	8003a50 <HAL_GetTick>
 800a4c0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a4c2:	e013      	b.n	800a4ec <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a4c4:	f7f9 fac4 	bl	8003a50 <HAL_GetTick>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4d2:	d90b      	bls.n	800a4ec <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	22ff      	movs	r2, #255	; 0xff
 800a4da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2203      	movs	r2, #3
 800a4e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	e061      	b.n	800a5b0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d0e4      	beq.n	800a4c4 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	69fa      	ldr	r2, [r7, #28]
 800a500:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	689a      	ldr	r2, [r3, #8]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a518:	609a      	str	r2, [r3, #8]
 800a51a:	e03e      	b.n	800a59a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	689a      	ldr	r2, [r3, #8]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a52a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	689a      	ldr	r2, [r3, #8]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a53a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a53c:	f7f9 fa88 	bl	8003a50 <HAL_GetTick>
 800a540:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a542:	e013      	b.n	800a56c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a544:	f7f9 fa84 	bl	8003a50 <HAL_GetTick>
 800a548:	4602      	mov	r2, r0
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a552:	d90b      	bls.n	800a56c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	22ff      	movs	r2, #255	; 0xff
 800a55a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2203      	movs	r2, #3
 800a560:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2200      	movs	r2, #0
 800a566:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a568:	2303      	movs	r3, #3
 800a56a:	e021      	b.n	800a5b0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	f003 0302 	and.w	r3, r3, #2
 800a576:	2b00      	cmp	r3, #0
 800a578:	d0e4      	beq.n	800a544 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	69fa      	ldr	r2, [r7, #28]
 800a580:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	697a      	ldr	r2, [r7, #20]
 800a588:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	689a      	ldr	r2, [r3, #8]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a598:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	22ff      	movs	r2, #255	; 0xff
 800a5a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3724      	adds	r7, #36	; 0x24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd90      	pop	{r4, r7, pc}

0800a5b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68da      	ldr	r2, [r3, #12]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a5d2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a5d4:	f7f9 fa3c 	bl	8003a50 <HAL_GetTick>
 800a5d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a5da:	e009      	b.n	800a5f0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a5dc:	f7f9 fa38 	bl	8003a50 <HAL_GetTick>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5ea:	d901      	bls.n	800a5f0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	e007      	b.n	800a600 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	f003 0320 	and.w	r3, r3, #32
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d0ee      	beq.n	800a5dc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a610:	2300      	movs	r3, #0
 800a612:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d119      	bne.n	800a656 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a62a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a62c:	f7f9 fa10 	bl	8003a50 <HAL_GetTick>
 800a630:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a632:	e009      	b.n	800a648 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a634:	f7f9 fa0c 	bl	8003a50 <HAL_GetTick>
 800a638:	4602      	mov	r2, r0
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a642:	d901      	bls.n	800a648 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a644:	2303      	movs	r3, #3
 800a646:	e007      	b.n	800a658 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a652:	2b00      	cmp	r3, #0
 800a654:	d0ee      	beq.n	800a634 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	4603      	mov	r3, r0
 800a668:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a66a:	2300      	movs	r3, #0
 800a66c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a66e:	e005      	b.n	800a67c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	3301      	adds	r3, #1
 800a674:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a676:	79fb      	ldrb	r3, [r7, #7]
 800a678:	3b0a      	subs	r3, #10
 800a67a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a67c:	79fb      	ldrb	r3, [r7, #7]
 800a67e:	2b09      	cmp	r3, #9
 800a680:	d8f6      	bhi.n	800a670 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	b2db      	uxtb	r3, r3
 800a686:	011b      	lsls	r3, r3, #4
 800a688:	b2da      	uxtb	r2, r3
 800a68a:	79fb      	ldrb	r3, [r7, #7]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	b2db      	uxtb	r3, r3
}
 800a690:	4618      	mov	r0, r3
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	7f1b      	ldrb	r3, [r3, #28]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d101      	bne.n	800a6b8 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	e03e      	b.n	800a736 <HAL_RTCEx_SetTimeStamp+0x9a>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689a      	ldr	r2, [r3, #8]
 800a6ca:	4b1e      	ldr	r3, [pc, #120]	; (800a744 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a6d0:	697a      	ldr	r2, [r7, #20]
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	22ca      	movs	r2, #202	; 0xca
 800a6de:	625a      	str	r2, [r3, #36]	; 0x24
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2253      	movs	r2, #83	; 0x53
 800a6e6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f022 0206 	bic.w	r2, r2, #6
 800a6f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	430a      	orrs	r2, r1
 800a706:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	689a      	ldr	r2, [r3, #8]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a71e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	22ff      	movs	r2, #255	; 0xff
 800a726:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2201      	movs	r2, #1
 800a72c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	371c      	adds	r7, #28
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	fffff7f7 	.word	0xfffff7f7

0800a748 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b088      	sub	sp, #32
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800a750:	2300      	movs	r3, #0
 800a752:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800a754:	2300      	movs	r3, #0
 800a756:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800a758:	2300      	movs	r3, #0
 800a75a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d101      	bne.n	800a766 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	e152      	b.n	800aa0c <HAL_SAI_Init+0x2c4>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d106      	bne.n	800a780 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f7f8 f846 	bl	800280c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2202      	movs	r2, #2
 800a784:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f957 	bl	800aa3c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	2b01      	cmp	r3, #1
 800a794:	d007      	beq.n	800a7a6 <HAL_SAI_Init+0x5e>
 800a796:	2b01      	cmp	r3, #1
 800a798:	d302      	bcc.n	800a7a0 <HAL_SAI_Init+0x58>
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d006      	beq.n	800a7ac <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800a79e:	e008      	b.n	800a7b2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	61fb      	str	r3, [r7, #28]
      break;
 800a7a4:	e005      	b.n	800a7b2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a7a6:	2310      	movs	r3, #16
 800a7a8:	61fb      	str	r3, [r7, #28]
      break;
 800a7aa:	e002      	b.n	800a7b2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a7ac:	2320      	movs	r3, #32
 800a7ae:	61fb      	str	r3, [r7, #28]
      break;
 800a7b0:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	2b03      	cmp	r3, #3
 800a7b8:	d81d      	bhi.n	800a7f6 <HAL_SAI_Init+0xae>
 800a7ba:	a201      	add	r2, pc, #4	; (adr r2, 800a7c0 <HAL_SAI_Init+0x78>)
 800a7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c0:	0800a7d1 	.word	0x0800a7d1
 800a7c4:	0800a7d7 	.word	0x0800a7d7
 800a7c8:	0800a7df 	.word	0x0800a7df
 800a7cc:	0800a7e7 	.word	0x0800a7e7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	617b      	str	r3, [r7, #20]
    }
    break;
 800a7d4:	e010      	b.n	800a7f8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a7d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7da:	617b      	str	r3, [r7, #20]
    }
    break;
 800a7dc:	e00c      	b.n	800a7f8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a7de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7e2:	617b      	str	r3, [r7, #20]
    }
    break;
 800a7e4:	e008      	b.n	800a7f8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a7e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7ea:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	f043 0301 	orr.w	r3, r3, #1
 800a7f2:	61fb      	str	r3, [r7, #28]
    }
    break;
 800a7f4:	e000      	b.n	800a7f8 <HAL_SAI_Init+0xb0>
    default:
      break;
 800a7f6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a85      	ldr	r2, [pc, #532]	; (800aa14 <HAL_SAI_Init+0x2cc>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d004      	beq.n	800a80c <HAL_SAI_Init+0xc4>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a84      	ldr	r2, [pc, #528]	; (800aa18 <HAL_SAI_Init+0x2d0>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d103      	bne.n	800a814 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800a80c:	4a83      	ldr	r2, [pc, #524]	; (800aa1c <HAL_SAI_Init+0x2d4>)
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	6013      	str	r3, [r2, #0]
 800a812:	e002      	b.n	800a81a <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a814:	4a82      	ldr	r2, [pc, #520]	; (800aa20 <HAL_SAI_Init+0x2d8>)
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	69db      	ldr	r3, [r3, #28]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d04c      	beq.n	800a8bc <HAL_SAI_Init+0x174>
  {
    uint32_t freq = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a7a      	ldr	r2, [pc, #488]	; (800aa14 <HAL_SAI_Init+0x2cc>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d004      	beq.n	800a83a <HAL_SAI_Init+0xf2>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a78      	ldr	r2, [pc, #480]	; (800aa18 <HAL_SAI_Init+0x2d0>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d104      	bne.n	800a844 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a83a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a83e:	f7ff fa77 	bl	8009d30 <HAL_RCCEx_GetPeriphCLKFreq>
 800a842:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a76      	ldr	r2, [pc, #472]	; (800aa24 <HAL_SAI_Init+0x2dc>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d004      	beq.n	800a858 <HAL_SAI_Init+0x110>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a75      	ldr	r2, [pc, #468]	; (800aa28 <HAL_SAI_Init+0x2e0>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d104      	bne.n	800a862 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a858:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a85c:	f7ff fa68 	bl	8009d30 <HAL_RCCEx_GetPeriphCLKFreq>
 800a860:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800a862:	693a      	ldr	r2, [r7, #16]
 800a864:	4613      	mov	r3, r2
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	4413      	add	r3, r2
 800a86a:	005b      	lsls	r3, r3, #1
 800a86c:	461a      	mov	r2, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	69db      	ldr	r3, [r3, #28]
 800a872:	025b      	lsls	r3, r3, #9
 800a874:	fbb2 f3f3 	udiv	r3, r2, r3
 800a878:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	4a6b      	ldr	r2, [pc, #428]	; (800aa2c <HAL_SAI_Init+0x2e4>)
 800a87e:	fba2 2303 	umull	r2, r3, r2, r3
 800a882:	08da      	lsrs	r2, r3, #3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800a888:	68f9      	ldr	r1, [r7, #12]
 800a88a:	4b68      	ldr	r3, [pc, #416]	; (800aa2c <HAL_SAI_Init+0x2e4>)
 800a88c:	fba3 2301 	umull	r2, r3, r3, r1
 800a890:	08da      	lsrs	r2, r3, #3
 800a892:	4613      	mov	r3, r2
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	4413      	add	r3, r2
 800a898:	005b      	lsls	r3, r3, #1
 800a89a:	1aca      	subs	r2, r1, r3
 800a89c:	2a08      	cmp	r2, #8
 800a89e:	d904      	bls.n	800a8aa <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv += 1;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a1b      	ldr	r3, [r3, #32]
 800a8a4:	1c5a      	adds	r2, r3, #1
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ae:	2b04      	cmp	r3, #4
 800a8b0:	d104      	bne.n	800a8bc <HAL_SAI_Init+0x174>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a1b      	ldr	r3, [r3, #32]
 800a8b6:	085a      	lsrs	r2, r3, #1
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d003      	beq.n	800a8cc <HAL_SAI_Init+0x184>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d109      	bne.n	800a8e0 <HAL_SAI_Init+0x198>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d101      	bne.n	800a8d8 <HAL_SAI_Init+0x190>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	e001      	b.n	800a8dc <HAL_SAI_Init+0x194>
 800a8d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8dc:	61bb      	str	r3, [r7, #24]
 800a8de:	e008      	b.n	800a8f2 <HAL_SAI_Init+0x1aa>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d102      	bne.n	800a8ee <HAL_SAI_Init+0x1a6>
 800a8e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8ec:	e000      	b.n	800a8f0 <HAL_SAI_Init+0x1a8>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	6819      	ldr	r1, [r3, #0]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	4b4c      	ldr	r3, [pc, #304]	; (800aa30 <HAL_SAI_Init+0x2e8>)
 800a8fe:	400b      	ands	r3, r1
 800a900:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	6819      	ldr	r1, [r3, #0]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685a      	ldr	r2, [r3, #4]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a910:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a916:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91c:	431a      	orrs	r2, r3
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800a92a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a936:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a1b      	ldr	r3, [r3, #32]
 800a93c:	051b      	lsls	r3, r3, #20
 800a93e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	430a      	orrs	r2, r1
 800a946:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	6859      	ldr	r1, [r3, #4]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	4b38      	ldr	r3, [pc, #224]	; (800aa34 <HAL_SAI_Init+0x2ec>)
 800a954:	400b      	ands	r3, r1
 800a956:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	6859      	ldr	r1, [r3, #4]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	699a      	ldr	r2, [r3, #24]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a966:	431a      	orrs	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a96c:	431a      	orrs	r2, r3
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	430a      	orrs	r2, r1
 800a974:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	6899      	ldr	r1, [r3, #8]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	4b2d      	ldr	r3, [pc, #180]	; (800aa38 <HAL_SAI_Init+0x2f0>)
 800a982:	400b      	ands	r3, r1
 800a984:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	6899      	ldr	r1, [r3, #8]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a990:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a996:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800a99c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800a9a2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a9ac:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	430a      	orrs	r2, r1
 800a9b4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68d9      	ldr	r1, [r3, #12]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a9c4:	400b      	ands	r3, r1
 800a9c6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68d9      	ldr	r1, [r3, #12]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9d6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9dc:	041b      	lsls	r3, r3, #16
 800a9de:	431a      	orrs	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	021b      	lsls	r3, r3, #8
 800a9e8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3720      	adds	r7, #32
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	40015804 	.word	0x40015804
 800aa18:	40015824 	.word	0x40015824
 800aa1c:	40015800 	.word	0x40015800
 800aa20:	40015c00 	.word	0x40015c00
 800aa24:	40015c04 	.word	0x40015c04
 800aa28:	40015c24 	.word	0x40015c24
 800aa2c:	cccccccd 	.word	0xcccccccd
 800aa30:	ff05c010 	.word	0xff05c010
 800aa34:	ffff1ff0 	.word	0xffff1ff0
 800aa38:	fff88000 	.word	0xfff88000

0800aa3c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800aa44:	4b17      	ldr	r3, [pc, #92]	; (800aaa4 <SAI_Disable+0x68>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a17      	ldr	r2, [pc, #92]	; (800aaa8 <SAI_Disable+0x6c>)
 800aa4a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa4e:	0b1b      	lsrs	r3, r3, #12
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800aa54:	2300      	movs	r3, #0
 800aa56:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aa66:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	1e5a      	subs	r2, r3, #1
 800aa6c:	60fa      	str	r2, [r7, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d10a      	bne.n	800aa88 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800aa82:	2303      	movs	r3, #3
 800aa84:	72fb      	strb	r3, [r7, #11]
      break;
 800aa86:	e006      	b.n	800aa96 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1e8      	bne.n	800aa68 <SAI_Disable+0x2c>

  return status;
 800aa96:	7afb      	ldrb	r3, [r7, #11]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3714      	adds	r7, #20
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	20000000 	.word	0x20000000
 800aaa8:	95cbec1b 	.word	0x95cbec1b

0800aaac <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d101      	bne.n	800aac0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e025      	b.n	800ab0c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d106      	bne.n	800aada <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f7f7 fe8f 	bl	80027f8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2202      	movs	r2, #2
 800aade:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	3304      	adds	r3, #4
 800aaea:	4619      	mov	r1, r3
 800aaec:	4610      	mov	r0, r2
 800aaee:	f001 fe5d 	bl	800c7ac <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6818      	ldr	r0, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	461a      	mov	r2, r3
 800aafc:	6839      	ldr	r1, [r7, #0]
 800aafe:	f001 fec7 	bl	800c890 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d101      	bne.n	800ab30 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	e018      	b.n	800ab62 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2202      	movs	r2, #2
 800ab34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	68b9      	ldr	r1, [r7, #8]
 800ab40:	4618      	mov	r0, r3
 800ab42:	f001 ff25 	bl	800c990 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	d104      	bne.n	800ab58 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2205      	movs	r2, #5
 800ab52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800ab56:	e003      	b.n	800ab60 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b082      	sub	sp, #8
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
 800ab72:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	d101      	bne.n	800ab84 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800ab80:	2302      	movs	r3, #2
 800ab82:	e00e      	b.n	800aba2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2202      	movs	r2, #2
 800ab88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6839      	ldr	r1, [r7, #0]
 800ab92:	4618      	mov	r0, r3
 800ab94:	f001 ff20 	bl	800c9d8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
	...

0800abac <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d101      	bne.n	800abbe <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	e04c      	b.n	800ac58 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d106      	bne.n	800abd8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7f7 faec 	bl	80021b0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2202      	movs	r2, #2
 800abdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f022 0203 	bic.w	r2, r2, #3
 800abee:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	4b19      	ldr	r3, [pc, #100]	; (800ac60 <HAL_SPDIFRX_Init+0xb4>)
 800abfc:	4013      	ands	r3, r2
 800abfe:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800ac08:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800ac0e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800ac14:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800ac1a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800ac20:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800ac26:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800ac2c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800ac32:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800ac38:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	fff88407 	.word	0xfff88407

0800ac64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d101      	bne.n	800ac76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	e09d      	b.n	800adb2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d108      	bne.n	800ac90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac86:	d009      	beq.n	800ac9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	61da      	str	r2, [r3, #28]
 800ac8e:	e005      	b.n	800ac9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d106      	bne.n	800acbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7f7 fabc 	bl	8002234 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2202      	movs	r2, #2
 800acc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800acdc:	d902      	bls.n	800ace4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800acde:	2300      	movs	r3, #0
 800ace0:	60fb      	str	r3, [r7, #12]
 800ace2:	e002      	b.n	800acea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ace4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ace8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800acf2:	d007      	beq.n	800ad04 <HAL_SPI_Init+0xa0>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800acfc:	d002      	beq.n	800ad04 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ad14:	431a      	orrs	r2, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	f003 0302 	and.w	r3, r3, #2
 800ad1e:	431a      	orrs	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	695b      	ldr	r3, [r3, #20]
 800ad24:	f003 0301 	and.w	r3, r3, #1
 800ad28:	431a      	orrs	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	699b      	ldr	r3, [r3, #24]
 800ad2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad32:	431a      	orrs	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	69db      	ldr	r3, [r3, #28]
 800ad38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad3c:	431a      	orrs	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a1b      	ldr	r3, [r3, #32]
 800ad42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad46:	ea42 0103 	orr.w	r1, r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad4e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	430a      	orrs	r2, r1
 800ad58:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	0c1b      	lsrs	r3, r3, #16
 800ad60:	f003 0204 	and.w	r2, r3, #4
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad68:	f003 0310 	and.w	r3, r3, #16
 800ad6c:	431a      	orrs	r2, r3
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad72:	f003 0308 	and.w	r3, r3, #8
 800ad76:	431a      	orrs	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ad80:	ea42 0103 	orr.w	r1, r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	430a      	orrs	r2, r1
 800ad90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	69da      	ldr	r2, [r3, #28]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ada0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800adb0:	2300      	movs	r3, #0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b082      	sub	sp, #8
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d101      	bne.n	800adcc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800adc8:	2301      	movs	r3, #1
 800adca:	e049      	b.n	800ae60 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800add2:	b2db      	uxtb	r3, r3
 800add4:	2b00      	cmp	r3, #0
 800add6:	d106      	bne.n	800ade6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f7f7 fa89 	bl	80022f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2202      	movs	r2, #2
 800adea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	3304      	adds	r3, #4
 800adf6:	4619      	mov	r1, r3
 800adf8:	4610      	mov	r0, r2
 800adfa:	f000 fc15 	bl	800b628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2201      	movs	r2, #1
 800ae02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2201      	movs	r2, #1
 800ae12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2201      	movs	r2, #1
 800ae22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2201      	movs	r2, #1
 800ae32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2201      	movs	r2, #1
 800ae3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2201      	movs	r2, #1
 800ae42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2201      	movs	r2, #1
 800ae52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2201      	movs	r2, #1
 800ae5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d001      	beq.n	800ae80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e054      	b.n	800af2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2202      	movs	r2, #2
 800ae84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68da      	ldr	r2, [r3, #12]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f042 0201 	orr.w	r2, r2, #1
 800ae96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a26      	ldr	r2, [pc, #152]	; (800af38 <HAL_TIM_Base_Start_IT+0xd0>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d022      	beq.n	800aee8 <HAL_TIM_Base_Start_IT+0x80>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeaa:	d01d      	beq.n	800aee8 <HAL_TIM_Base_Start_IT+0x80>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a22      	ldr	r2, [pc, #136]	; (800af3c <HAL_TIM_Base_Start_IT+0xd4>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d018      	beq.n	800aee8 <HAL_TIM_Base_Start_IT+0x80>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a21      	ldr	r2, [pc, #132]	; (800af40 <HAL_TIM_Base_Start_IT+0xd8>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d013      	beq.n	800aee8 <HAL_TIM_Base_Start_IT+0x80>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a1f      	ldr	r2, [pc, #124]	; (800af44 <HAL_TIM_Base_Start_IT+0xdc>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d00e      	beq.n	800aee8 <HAL_TIM_Base_Start_IT+0x80>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a1e      	ldr	r2, [pc, #120]	; (800af48 <HAL_TIM_Base_Start_IT+0xe0>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d009      	beq.n	800aee8 <HAL_TIM_Base_Start_IT+0x80>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a1c      	ldr	r2, [pc, #112]	; (800af4c <HAL_TIM_Base_Start_IT+0xe4>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d004      	beq.n	800aee8 <HAL_TIM_Base_Start_IT+0x80>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a1b      	ldr	r2, [pc, #108]	; (800af50 <HAL_TIM_Base_Start_IT+0xe8>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d115      	bne.n	800af14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	689a      	ldr	r2, [r3, #8]
 800aeee:	4b19      	ldr	r3, [pc, #100]	; (800af54 <HAL_TIM_Base_Start_IT+0xec>)
 800aef0:	4013      	ands	r3, r2
 800aef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2b06      	cmp	r3, #6
 800aef8:	d015      	beq.n	800af26 <HAL_TIM_Base_Start_IT+0xbe>
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af00:	d011      	beq.n	800af26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f042 0201 	orr.w	r2, r2, #1
 800af10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af12:	e008      	b.n	800af26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f042 0201 	orr.w	r2, r2, #1
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	e000      	b.n	800af28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	40010000 	.word	0x40010000
 800af3c:	40000400 	.word	0x40000400
 800af40:	40000800 	.word	0x40000800
 800af44:	40000c00 	.word	0x40000c00
 800af48:	40010400 	.word	0x40010400
 800af4c:	40014000 	.word	0x40014000
 800af50:	40001800 	.word	0x40001800
 800af54:	00010007 	.word	0x00010007

0800af58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d101      	bne.n	800af6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	e049      	b.n	800affe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af70:	b2db      	uxtb	r3, r3
 800af72:	2b00      	cmp	r3, #0
 800af74:	d106      	bne.n	800af84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7f7 fa28 	bl	80023d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2202      	movs	r2, #2
 800af88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	3304      	adds	r3, #4
 800af94:	4619      	mov	r1, r3
 800af96:	4610      	mov	r0, r2
 800af98:	f000 fb46 	bl	800b628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2201      	movs	r2, #1
 800afc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b082      	sub	sp, #8
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	f003 0302 	and.w	r3, r3, #2
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d122      	bne.n	800b062 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	f003 0302 	and.w	r3, r3, #2
 800b026:	2b02      	cmp	r3, #2
 800b028:	d11b      	bne.n	800b062 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f06f 0202 	mvn.w	r2, #2
 800b032:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	699b      	ldr	r3, [r3, #24]
 800b040:	f003 0303 	and.w	r3, r3, #3
 800b044:	2b00      	cmp	r3, #0
 800b046:	d003      	beq.n	800b050 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 facf 	bl	800b5ec <HAL_TIM_IC_CaptureCallback>
 800b04e:	e005      	b.n	800b05c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 fac1 	bl	800b5d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fad2 	bl	800b600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	f003 0304 	and.w	r3, r3, #4
 800b06c:	2b04      	cmp	r3, #4
 800b06e:	d122      	bne.n	800b0b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	f003 0304 	and.w	r3, r3, #4
 800b07a:	2b04      	cmp	r3, #4
 800b07c:	d11b      	bne.n	800b0b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f06f 0204 	mvn.w	r2, #4
 800b086:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2202      	movs	r2, #2
 800b08c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d003      	beq.n	800b0a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 faa5 	bl	800b5ec <HAL_TIM_IC_CaptureCallback>
 800b0a2:	e005      	b.n	800b0b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 fa97 	bl	800b5d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 faa8 	bl	800b600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	f003 0308 	and.w	r3, r3, #8
 800b0c0:	2b08      	cmp	r3, #8
 800b0c2:	d122      	bne.n	800b10a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	68db      	ldr	r3, [r3, #12]
 800b0ca:	f003 0308 	and.w	r3, r3, #8
 800b0ce:	2b08      	cmp	r3, #8
 800b0d0:	d11b      	bne.n	800b10a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f06f 0208 	mvn.w	r2, #8
 800b0da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2204      	movs	r2, #4
 800b0e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	69db      	ldr	r3, [r3, #28]
 800b0e8:	f003 0303 	and.w	r3, r3, #3
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d003      	beq.n	800b0f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 fa7b 	bl	800b5ec <HAL_TIM_IC_CaptureCallback>
 800b0f6:	e005      	b.n	800b104 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fa6d 	bl	800b5d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 fa7e 	bl	800b600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	f003 0310 	and.w	r3, r3, #16
 800b114:	2b10      	cmp	r3, #16
 800b116:	d122      	bne.n	800b15e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	68db      	ldr	r3, [r3, #12]
 800b11e:	f003 0310 	and.w	r3, r3, #16
 800b122:	2b10      	cmp	r3, #16
 800b124:	d11b      	bne.n	800b15e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f06f 0210 	mvn.w	r2, #16
 800b12e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2208      	movs	r2, #8
 800b134:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	69db      	ldr	r3, [r3, #28]
 800b13c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b140:	2b00      	cmp	r3, #0
 800b142:	d003      	beq.n	800b14c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fa51 	bl	800b5ec <HAL_TIM_IC_CaptureCallback>
 800b14a:	e005      	b.n	800b158 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 fa43 	bl	800b5d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fa54 	bl	800b600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	691b      	ldr	r3, [r3, #16]
 800b164:	f003 0301 	and.w	r3, r3, #1
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d10e      	bne.n	800b18a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	f003 0301 	and.w	r3, r3, #1
 800b176:	2b01      	cmp	r3, #1
 800b178:	d107      	bne.n	800b18a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f06f 0201 	mvn.w	r2, #1
 800b182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f7f6 fc8d 	bl	8001aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b194:	2b80      	cmp	r3, #128	; 0x80
 800b196:	d10e      	bne.n	800b1b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1a2:	2b80      	cmp	r3, #128	; 0x80
 800b1a4:	d107      	bne.n	800b1b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b1ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 fee7 	bl	800bf84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1c4:	d10e      	bne.n	800b1e4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1d0:	2b80      	cmp	r3, #128	; 0x80
 800b1d2:	d107      	bne.n	800b1e4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b1dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 feda 	bl	800bf98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ee:	2b40      	cmp	r3, #64	; 0x40
 800b1f0:	d10e      	bne.n	800b210 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1fc:	2b40      	cmp	r3, #64	; 0x40
 800b1fe:	d107      	bne.n	800b210 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fa02 	bl	800b614 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	f003 0320 	and.w	r3, r3, #32
 800b21a:	2b20      	cmp	r3, #32
 800b21c:	d10e      	bne.n	800b23c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	f003 0320 	and.w	r3, r3, #32
 800b228:	2b20      	cmp	r3, #32
 800b22a:	d107      	bne.n	800b23c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f06f 0220 	mvn.w	r2, #32
 800b234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 fe9a 	bl	800bf70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b23c:	bf00      	nop
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b256:	2b01      	cmp	r3, #1
 800b258:	d101      	bne.n	800b25e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b25a:	2302      	movs	r3, #2
 800b25c:	e0fd      	b.n	800b45a <HAL_TIM_PWM_ConfigChannel+0x216>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2201      	movs	r2, #1
 800b262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2b14      	cmp	r3, #20
 800b26a:	f200 80f0 	bhi.w	800b44e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b26e:	a201      	add	r2, pc, #4	; (adr r2, 800b274 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b274:	0800b2c9 	.word	0x0800b2c9
 800b278:	0800b44f 	.word	0x0800b44f
 800b27c:	0800b44f 	.word	0x0800b44f
 800b280:	0800b44f 	.word	0x0800b44f
 800b284:	0800b309 	.word	0x0800b309
 800b288:	0800b44f 	.word	0x0800b44f
 800b28c:	0800b44f 	.word	0x0800b44f
 800b290:	0800b44f 	.word	0x0800b44f
 800b294:	0800b34b 	.word	0x0800b34b
 800b298:	0800b44f 	.word	0x0800b44f
 800b29c:	0800b44f 	.word	0x0800b44f
 800b2a0:	0800b44f 	.word	0x0800b44f
 800b2a4:	0800b38b 	.word	0x0800b38b
 800b2a8:	0800b44f 	.word	0x0800b44f
 800b2ac:	0800b44f 	.word	0x0800b44f
 800b2b0:	0800b44f 	.word	0x0800b44f
 800b2b4:	0800b3cd 	.word	0x0800b3cd
 800b2b8:	0800b44f 	.word	0x0800b44f
 800b2bc:	0800b44f 	.word	0x0800b44f
 800b2c0:	0800b44f 	.word	0x0800b44f
 800b2c4:	0800b40d 	.word	0x0800b40d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68b9      	ldr	r1, [r7, #8]
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f000 fa4a 	bl	800b768 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	699a      	ldr	r2, [r3, #24]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f042 0208 	orr.w	r2, r2, #8
 800b2e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	699a      	ldr	r2, [r3, #24]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f022 0204 	bic.w	r2, r2, #4
 800b2f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6999      	ldr	r1, [r3, #24]
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	691a      	ldr	r2, [r3, #16]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	430a      	orrs	r2, r1
 800b304:	619a      	str	r2, [r3, #24]
      break;
 800b306:	e0a3      	b.n	800b450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68b9      	ldr	r1, [r7, #8]
 800b30e:	4618      	mov	r0, r3
 800b310:	f000 fa9c 	bl	800b84c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	699a      	ldr	r2, [r3, #24]
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	699a      	ldr	r2, [r3, #24]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	6999      	ldr	r1, [r3, #24]
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	021a      	lsls	r2, r3, #8
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	430a      	orrs	r2, r1
 800b346:	619a      	str	r2, [r3, #24]
      break;
 800b348:	e082      	b.n	800b450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68b9      	ldr	r1, [r7, #8]
 800b350:	4618      	mov	r0, r3
 800b352:	f000 faf3 	bl	800b93c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	69da      	ldr	r2, [r3, #28]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f042 0208 	orr.w	r2, r2, #8
 800b364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	69da      	ldr	r2, [r3, #28]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f022 0204 	bic.w	r2, r2, #4
 800b374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	69d9      	ldr	r1, [r3, #28]
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	691a      	ldr	r2, [r3, #16]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	430a      	orrs	r2, r1
 800b386:	61da      	str	r2, [r3, #28]
      break;
 800b388:	e062      	b.n	800b450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68b9      	ldr	r1, [r7, #8]
 800b390:	4618      	mov	r0, r3
 800b392:	f000 fb49 	bl	800ba28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	69da      	ldr	r2, [r3, #28]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	69da      	ldr	r2, [r3, #28]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	69d9      	ldr	r1, [r3, #28]
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	691b      	ldr	r3, [r3, #16]
 800b3c0:	021a      	lsls	r2, r3, #8
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	430a      	orrs	r2, r1
 800b3c8:	61da      	str	r2, [r3, #28]
      break;
 800b3ca:	e041      	b.n	800b450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	68b9      	ldr	r1, [r7, #8]
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f000 fb80 	bl	800bad8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f042 0208 	orr.w	r2, r2, #8
 800b3e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f022 0204 	bic.w	r2, r2, #4
 800b3f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	691a      	ldr	r2, [r3, #16]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	430a      	orrs	r2, r1
 800b408:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b40a:	e021      	b.n	800b450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	68b9      	ldr	r1, [r7, #8]
 800b412:	4618      	mov	r0, r3
 800b414:	f000 fbb2 	bl	800bb7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b426:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b436:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	691b      	ldr	r3, [r3, #16]
 800b442:	021a      	lsls	r2, r3, #8
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	430a      	orrs	r2, r1
 800b44a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b44c:	e000      	b.n	800b450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b44e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop

0800b464 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b474:	2b01      	cmp	r3, #1
 800b476:	d101      	bne.n	800b47c <HAL_TIM_ConfigClockSource+0x18>
 800b478:	2302      	movs	r3, #2
 800b47a:	e0a6      	b.n	800b5ca <HAL_TIM_ConfigClockSource+0x166>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2202      	movs	r2, #2
 800b488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	4b4f      	ldr	r3, [pc, #316]	; (800b5d4 <HAL_TIM_ConfigClockSource+0x170>)
 800b498:	4013      	ands	r3, r2
 800b49a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2b40      	cmp	r3, #64	; 0x40
 800b4b2:	d067      	beq.n	800b584 <HAL_TIM_ConfigClockSource+0x120>
 800b4b4:	2b40      	cmp	r3, #64	; 0x40
 800b4b6:	d80b      	bhi.n	800b4d0 <HAL_TIM_ConfigClockSource+0x6c>
 800b4b8:	2b10      	cmp	r3, #16
 800b4ba:	d073      	beq.n	800b5a4 <HAL_TIM_ConfigClockSource+0x140>
 800b4bc:	2b10      	cmp	r3, #16
 800b4be:	d802      	bhi.n	800b4c6 <HAL_TIM_ConfigClockSource+0x62>
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d06f      	beq.n	800b5a4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b4c4:	e078      	b.n	800b5b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b4c6:	2b20      	cmp	r3, #32
 800b4c8:	d06c      	beq.n	800b5a4 <HAL_TIM_ConfigClockSource+0x140>
 800b4ca:	2b30      	cmp	r3, #48	; 0x30
 800b4cc:	d06a      	beq.n	800b5a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800b4ce:	e073      	b.n	800b5b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b4d0:	2b70      	cmp	r3, #112	; 0x70
 800b4d2:	d00d      	beq.n	800b4f0 <HAL_TIM_ConfigClockSource+0x8c>
 800b4d4:	2b70      	cmp	r3, #112	; 0x70
 800b4d6:	d804      	bhi.n	800b4e2 <HAL_TIM_ConfigClockSource+0x7e>
 800b4d8:	2b50      	cmp	r3, #80	; 0x50
 800b4da:	d033      	beq.n	800b544 <HAL_TIM_ConfigClockSource+0xe0>
 800b4dc:	2b60      	cmp	r3, #96	; 0x60
 800b4de:	d041      	beq.n	800b564 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800b4e0:	e06a      	b.n	800b5b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b4e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4e6:	d066      	beq.n	800b5b6 <HAL_TIM_ConfigClockSource+0x152>
 800b4e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4ec:	d017      	beq.n	800b51e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800b4ee:	e063      	b.n	800b5b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6818      	ldr	r0, [r3, #0]
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	6899      	ldr	r1, [r3, #8]
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	685a      	ldr	r2, [r3, #4]
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	f000 fc0a 	bl	800bd18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b512:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	609a      	str	r2, [r3, #8]
      break;
 800b51c:	e04c      	b.n	800b5b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6818      	ldr	r0, [r3, #0]
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	6899      	ldr	r1, [r3, #8]
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	685a      	ldr	r2, [r3, #4]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	f000 fbf3 	bl	800bd18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	689a      	ldr	r2, [r3, #8]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b540:	609a      	str	r2, [r3, #8]
      break;
 800b542:	e039      	b.n	800b5b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6818      	ldr	r0, [r3, #0]
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	6859      	ldr	r1, [r3, #4]
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	461a      	mov	r2, r3
 800b552:	f000 fb67 	bl	800bc24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2150      	movs	r1, #80	; 0x50
 800b55c:	4618      	mov	r0, r3
 800b55e:	f000 fbc0 	bl	800bce2 <TIM_ITRx_SetConfig>
      break;
 800b562:	e029      	b.n	800b5b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6818      	ldr	r0, [r3, #0]
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	6859      	ldr	r1, [r3, #4]
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	461a      	mov	r2, r3
 800b572:	f000 fb86 	bl	800bc82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2160      	movs	r1, #96	; 0x60
 800b57c:	4618      	mov	r0, r3
 800b57e:	f000 fbb0 	bl	800bce2 <TIM_ITRx_SetConfig>
      break;
 800b582:	e019      	b.n	800b5b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6818      	ldr	r0, [r3, #0]
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	6859      	ldr	r1, [r3, #4]
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	461a      	mov	r2, r3
 800b592:	f000 fb47 	bl	800bc24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2140      	movs	r1, #64	; 0x40
 800b59c:	4618      	mov	r0, r3
 800b59e:	f000 fba0 	bl	800bce2 <TIM_ITRx_SetConfig>
      break;
 800b5a2:	e009      	b.n	800b5b8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	4610      	mov	r0, r2
 800b5b0:	f000 fb97 	bl	800bce2 <TIM_ITRx_SetConfig>
        break;
 800b5b4:	e000      	b.n	800b5b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b5b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5c8:	2300      	movs	r3, #0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3710      	adds	r7, #16
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	fffeff88 	.word	0xfffeff88

0800b5d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5f4:	bf00      	nop
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b61c:	bf00      	nop
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b628:	b480      	push	{r7}
 800b62a:	b085      	sub	sp, #20
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4a40      	ldr	r2, [pc, #256]	; (800b73c <TIM_Base_SetConfig+0x114>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d013      	beq.n	800b668 <TIM_Base_SetConfig+0x40>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b646:	d00f      	beq.n	800b668 <TIM_Base_SetConfig+0x40>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4a3d      	ldr	r2, [pc, #244]	; (800b740 <TIM_Base_SetConfig+0x118>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d00b      	beq.n	800b668 <TIM_Base_SetConfig+0x40>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a3c      	ldr	r2, [pc, #240]	; (800b744 <TIM_Base_SetConfig+0x11c>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d007      	beq.n	800b668 <TIM_Base_SetConfig+0x40>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4a3b      	ldr	r2, [pc, #236]	; (800b748 <TIM_Base_SetConfig+0x120>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d003      	beq.n	800b668 <TIM_Base_SetConfig+0x40>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4a3a      	ldr	r2, [pc, #232]	; (800b74c <TIM_Base_SetConfig+0x124>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d108      	bne.n	800b67a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b66e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	68fa      	ldr	r2, [r7, #12]
 800b676:	4313      	orrs	r3, r2
 800b678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4a2f      	ldr	r2, [pc, #188]	; (800b73c <TIM_Base_SetConfig+0x114>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d02b      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b688:	d027      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4a2c      	ldr	r2, [pc, #176]	; (800b740 <TIM_Base_SetConfig+0x118>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d023      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	4a2b      	ldr	r2, [pc, #172]	; (800b744 <TIM_Base_SetConfig+0x11c>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d01f      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4a2a      	ldr	r2, [pc, #168]	; (800b748 <TIM_Base_SetConfig+0x120>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d01b      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a29      	ldr	r2, [pc, #164]	; (800b74c <TIM_Base_SetConfig+0x124>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d017      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a28      	ldr	r2, [pc, #160]	; (800b750 <TIM_Base_SetConfig+0x128>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d013      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a27      	ldr	r2, [pc, #156]	; (800b754 <TIM_Base_SetConfig+0x12c>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d00f      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a26      	ldr	r2, [pc, #152]	; (800b758 <TIM_Base_SetConfig+0x130>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d00b      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a25      	ldr	r2, [pc, #148]	; (800b75c <TIM_Base_SetConfig+0x134>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d007      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a24      	ldr	r2, [pc, #144]	; (800b760 <TIM_Base_SetConfig+0x138>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d003      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a23      	ldr	r2, [pc, #140]	; (800b764 <TIM_Base_SetConfig+0x13c>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d108      	bne.n	800b6ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	695b      	ldr	r3, [r3, #20]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	689a      	ldr	r2, [r3, #8]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a0a      	ldr	r2, [pc, #40]	; (800b73c <TIM_Base_SetConfig+0x114>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d003      	beq.n	800b720 <TIM_Base_SetConfig+0xf8>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a0c      	ldr	r2, [pc, #48]	; (800b74c <TIM_Base_SetConfig+0x124>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d103      	bne.n	800b728 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	691a      	ldr	r2, [r3, #16]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2201      	movs	r2, #1
 800b72c:	615a      	str	r2, [r3, #20]
}
 800b72e:	bf00      	nop
 800b730:	3714      	adds	r7, #20
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	40010000 	.word	0x40010000
 800b740:	40000400 	.word	0x40000400
 800b744:	40000800 	.word	0x40000800
 800b748:	40000c00 	.word	0x40000c00
 800b74c:	40010400 	.word	0x40010400
 800b750:	40014000 	.word	0x40014000
 800b754:	40014400 	.word	0x40014400
 800b758:	40014800 	.word	0x40014800
 800b75c:	40001800 	.word	0x40001800
 800b760:	40001c00 	.word	0x40001c00
 800b764:	40002000 	.word	0x40002000

0800b768 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b768:	b480      	push	{r7}
 800b76a:	b087      	sub	sp, #28
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a1b      	ldr	r3, [r3, #32]
 800b776:	f023 0201 	bic.w	r2, r3, #1
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a1b      	ldr	r3, [r3, #32]
 800b782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	699b      	ldr	r3, [r3, #24]
 800b78e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	4b2b      	ldr	r3, [pc, #172]	; (800b840 <TIM_OC1_SetConfig+0xd8>)
 800b794:	4013      	ands	r3, r2
 800b796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f023 0303 	bic.w	r3, r3, #3
 800b79e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f023 0302 	bic.w	r3, r3, #2
 800b7b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	697a      	ldr	r2, [r7, #20]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4a21      	ldr	r2, [pc, #132]	; (800b844 <TIM_OC1_SetConfig+0xdc>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d003      	beq.n	800b7cc <TIM_OC1_SetConfig+0x64>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4a20      	ldr	r2, [pc, #128]	; (800b848 <TIM_OC1_SetConfig+0xe0>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d10c      	bne.n	800b7e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	f023 0308 	bic.w	r3, r3, #8
 800b7d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	f023 0304 	bic.w	r3, r3, #4
 800b7e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a16      	ldr	r2, [pc, #88]	; (800b844 <TIM_OC1_SetConfig+0xdc>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d003      	beq.n	800b7f6 <TIM_OC1_SetConfig+0x8e>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a15      	ldr	r2, [pc, #84]	; (800b848 <TIM_OC1_SetConfig+0xe0>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d111      	bne.n	800b81a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	693a      	ldr	r2, [r7, #16]
 800b80c:	4313      	orrs	r3, r2
 800b80e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	4313      	orrs	r3, r2
 800b818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	685a      	ldr	r2, [r3, #4]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	697a      	ldr	r2, [r7, #20]
 800b832:	621a      	str	r2, [r3, #32]
}
 800b834:	bf00      	nop
 800b836:	371c      	adds	r7, #28
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	fffeff8f 	.word	0xfffeff8f
 800b844:	40010000 	.word	0x40010000
 800b848:	40010400 	.word	0x40010400

0800b84c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b087      	sub	sp, #28
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a1b      	ldr	r3, [r3, #32]
 800b85a:	f023 0210 	bic.w	r2, r3, #16
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6a1b      	ldr	r3, [r3, #32]
 800b866:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	699b      	ldr	r3, [r3, #24]
 800b872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	4b2e      	ldr	r3, [pc, #184]	; (800b930 <TIM_OC2_SetConfig+0xe4>)
 800b878:	4013      	ands	r3, r2
 800b87a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	021b      	lsls	r3, r3, #8
 800b88a:	68fa      	ldr	r2, [r7, #12]
 800b88c:	4313      	orrs	r3, r2
 800b88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	f023 0320 	bic.w	r3, r3, #32
 800b896:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	011b      	lsls	r3, r3, #4
 800b89e:	697a      	ldr	r2, [r7, #20]
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4a23      	ldr	r2, [pc, #140]	; (800b934 <TIM_OC2_SetConfig+0xe8>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d003      	beq.n	800b8b4 <TIM_OC2_SetConfig+0x68>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a22      	ldr	r2, [pc, #136]	; (800b938 <TIM_OC2_SetConfig+0xec>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d10d      	bne.n	800b8d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	68db      	ldr	r3, [r3, #12]
 800b8c0:	011b      	lsls	r3, r3, #4
 800b8c2:	697a      	ldr	r2, [r7, #20]
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a18      	ldr	r2, [pc, #96]	; (800b934 <TIM_OC2_SetConfig+0xe8>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d003      	beq.n	800b8e0 <TIM_OC2_SetConfig+0x94>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a17      	ldr	r2, [pc, #92]	; (800b938 <TIM_OC2_SetConfig+0xec>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d113      	bne.n	800b908 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b8e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b8ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	695b      	ldr	r3, [r3, #20]
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	693a      	ldr	r2, [r7, #16]
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	4313      	orrs	r3, r2
 800b906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	693a      	ldr	r2, [r7, #16]
 800b90c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	685a      	ldr	r2, [r3, #4]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	697a      	ldr	r2, [r7, #20]
 800b920:	621a      	str	r2, [r3, #32]
}
 800b922:	bf00      	nop
 800b924:	371c      	adds	r7, #28
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop
 800b930:	feff8fff 	.word	0xfeff8fff
 800b934:	40010000 	.word	0x40010000
 800b938:	40010400 	.word	0x40010400

0800b93c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b087      	sub	sp, #28
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a1b      	ldr	r3, [r3, #32]
 800b94a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	69db      	ldr	r3, [r3, #28]
 800b962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b964:	68fa      	ldr	r2, [r7, #12]
 800b966:	4b2d      	ldr	r3, [pc, #180]	; (800ba1c <TIM_OC3_SetConfig+0xe0>)
 800b968:	4013      	ands	r3, r2
 800b96a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f023 0303 	bic.w	r3, r3, #3
 800b972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	021b      	lsls	r3, r3, #8
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	4313      	orrs	r3, r2
 800b990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4a22      	ldr	r2, [pc, #136]	; (800ba20 <TIM_OC3_SetConfig+0xe4>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d003      	beq.n	800b9a2 <TIM_OC3_SetConfig+0x66>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a21      	ldr	r2, [pc, #132]	; (800ba24 <TIM_OC3_SetConfig+0xe8>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d10d      	bne.n	800b9be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	021b      	lsls	r3, r3, #8
 800b9b0:	697a      	ldr	r2, [r7, #20]
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b9bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4a17      	ldr	r2, [pc, #92]	; (800ba20 <TIM_OC3_SetConfig+0xe4>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d003      	beq.n	800b9ce <TIM_OC3_SetConfig+0x92>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4a16      	ldr	r2, [pc, #88]	; (800ba24 <TIM_OC3_SetConfig+0xe8>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d113      	bne.n	800b9f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b9dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	695b      	ldr	r3, [r3, #20]
 800b9e2:	011b      	lsls	r3, r3, #4
 800b9e4:	693a      	ldr	r2, [r7, #16]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	699b      	ldr	r3, [r3, #24]
 800b9ee:	011b      	lsls	r3, r3, #4
 800b9f0:	693a      	ldr	r2, [r7, #16]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	693a      	ldr	r2, [r7, #16]
 800b9fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	685a      	ldr	r2, [r3, #4]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	697a      	ldr	r2, [r7, #20]
 800ba0e:	621a      	str	r2, [r3, #32]
}
 800ba10:	bf00      	nop
 800ba12:	371c      	adds	r7, #28
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr
 800ba1c:	fffeff8f 	.word	0xfffeff8f
 800ba20:	40010000 	.word	0x40010000
 800ba24:	40010400 	.word	0x40010400

0800ba28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b087      	sub	sp, #28
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6a1b      	ldr	r3, [r3, #32]
 800ba36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a1b      	ldr	r3, [r3, #32]
 800ba42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	69db      	ldr	r3, [r3, #28]
 800ba4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	4b1e      	ldr	r3, [pc, #120]	; (800bacc <TIM_OC4_SetConfig+0xa4>)
 800ba54:	4013      	ands	r3, r2
 800ba56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	021b      	lsls	r3, r3, #8
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	031b      	lsls	r3, r3, #12
 800ba7a:	693a      	ldr	r2, [r7, #16]
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4a13      	ldr	r2, [pc, #76]	; (800bad0 <TIM_OC4_SetConfig+0xa8>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d003      	beq.n	800ba90 <TIM_OC4_SetConfig+0x68>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4a12      	ldr	r2, [pc, #72]	; (800bad4 <TIM_OC4_SetConfig+0xac>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d109      	bne.n	800baa4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	695b      	ldr	r3, [r3, #20]
 800ba9c:	019b      	lsls	r3, r3, #6
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	685a      	ldr	r2, [r3, #4]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	693a      	ldr	r2, [r7, #16]
 800babc:	621a      	str	r2, [r3, #32]
}
 800babe:	bf00      	nop
 800bac0:	371c      	adds	r7, #28
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	feff8fff 	.word	0xfeff8fff
 800bad0:	40010000 	.word	0x40010000
 800bad4:	40010400 	.word	0x40010400

0800bad8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bad8:	b480      	push	{r7}
 800bada:	b087      	sub	sp, #28
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a1b      	ldr	r3, [r3, #32]
 800bae6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6a1b      	ldr	r3, [r3, #32]
 800baf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	4b1b      	ldr	r3, [pc, #108]	; (800bb70 <TIM_OC5_SetConfig+0x98>)
 800bb04:	4013      	ands	r3, r2
 800bb06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bb18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	041b      	lsls	r3, r3, #16
 800bb20:	693a      	ldr	r2, [r7, #16]
 800bb22:	4313      	orrs	r3, r2
 800bb24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a12      	ldr	r2, [pc, #72]	; (800bb74 <TIM_OC5_SetConfig+0x9c>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d003      	beq.n	800bb36 <TIM_OC5_SetConfig+0x5e>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4a11      	ldr	r2, [pc, #68]	; (800bb78 <TIM_OC5_SetConfig+0xa0>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d109      	bne.n	800bb4a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	695b      	ldr	r3, [r3, #20]
 800bb42:	021b      	lsls	r3, r3, #8
 800bb44:	697a      	ldr	r2, [r7, #20]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	697a      	ldr	r2, [r7, #20]
 800bb4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	685a      	ldr	r2, [r3, #4]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	693a      	ldr	r2, [r7, #16]
 800bb62:	621a      	str	r2, [r3, #32]
}
 800bb64:	bf00      	nop
 800bb66:	371c      	adds	r7, #28
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr
 800bb70:	fffeff8f 	.word	0xfffeff8f
 800bb74:	40010000 	.word	0x40010000
 800bb78:	40010400 	.word	0x40010400

0800bb7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b087      	sub	sp, #28
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6a1b      	ldr	r3, [r3, #32]
 800bb8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6a1b      	ldr	r3, [r3, #32]
 800bb96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	4b1c      	ldr	r3, [pc, #112]	; (800bc18 <TIM_OC6_SetConfig+0x9c>)
 800bba8:	4013      	ands	r3, r2
 800bbaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	021b      	lsls	r3, r3, #8
 800bbb2:	68fa      	ldr	r2, [r7, #12]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bbbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	051b      	lsls	r3, r3, #20
 800bbc6:	693a      	ldr	r2, [r7, #16]
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4a13      	ldr	r2, [pc, #76]	; (800bc1c <TIM_OC6_SetConfig+0xa0>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d003      	beq.n	800bbdc <TIM_OC6_SetConfig+0x60>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4a12      	ldr	r2, [pc, #72]	; (800bc20 <TIM_OC6_SetConfig+0xa4>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d109      	bne.n	800bbf0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bbe2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	695b      	ldr	r3, [r3, #20]
 800bbe8:	029b      	lsls	r3, r3, #10
 800bbea:	697a      	ldr	r2, [r7, #20]
 800bbec:	4313      	orrs	r3, r2
 800bbee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	697a      	ldr	r2, [r7, #20]
 800bbf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	68fa      	ldr	r2, [r7, #12]
 800bbfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	685a      	ldr	r2, [r3, #4]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	693a      	ldr	r2, [r7, #16]
 800bc08:	621a      	str	r2, [r3, #32]
}
 800bc0a:	bf00      	nop
 800bc0c:	371c      	adds	r7, #28
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	feff8fff 	.word	0xfeff8fff
 800bc1c:	40010000 	.word	0x40010000
 800bc20:	40010400 	.word	0x40010400

0800bc24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b087      	sub	sp, #28
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6a1b      	ldr	r3, [r3, #32]
 800bc34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	6a1b      	ldr	r3, [r3, #32]
 800bc3a:	f023 0201 	bic.w	r2, r3, #1
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	699b      	ldr	r3, [r3, #24]
 800bc46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	011b      	lsls	r3, r3, #4
 800bc54:	693a      	ldr	r2, [r7, #16]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	f023 030a 	bic.w	r3, r3, #10
 800bc60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	4313      	orrs	r3, r2
 800bc68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	693a      	ldr	r2, [r7, #16]
 800bc6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	697a      	ldr	r2, [r7, #20]
 800bc74:	621a      	str	r2, [r3, #32]
}
 800bc76:	bf00      	nop
 800bc78:	371c      	adds	r7, #28
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc82:	b480      	push	{r7}
 800bc84:	b087      	sub	sp, #28
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	60f8      	str	r0, [r7, #12]
 800bc8a:	60b9      	str	r1, [r7, #8]
 800bc8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6a1b      	ldr	r3, [r3, #32]
 800bc92:	f023 0210 	bic.w	r2, r3, #16
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	699b      	ldr	r3, [r3, #24]
 800bc9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6a1b      	ldr	r3, [r3, #32]
 800bca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bcac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	031b      	lsls	r3, r3, #12
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bcbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	011b      	lsls	r3, r3, #4
 800bcc4:	693a      	ldr	r2, [r7, #16]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	697a      	ldr	r2, [r7, #20]
 800bcce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	693a      	ldr	r2, [r7, #16]
 800bcd4:	621a      	str	r2, [r3, #32]
}
 800bcd6:	bf00      	nop
 800bcd8:	371c      	adds	r7, #28
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr

0800bce2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bce2:	b480      	push	{r7}
 800bce4:	b085      	sub	sp, #20
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
 800bcea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	689b      	ldr	r3, [r3, #8]
 800bcf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bcfa:	683a      	ldr	r2, [r7, #0]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	f043 0307 	orr.w	r3, r3, #7
 800bd04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	609a      	str	r2, [r3, #8]
}
 800bd0c:	bf00      	nop
 800bd0e:	3714      	adds	r7, #20
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b087      	sub	sp, #28
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
 800bd24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	021a      	lsls	r2, r3, #8
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	431a      	orrs	r2, r3
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	697a      	ldr	r2, [r7, #20]
 800bd42:	4313      	orrs	r3, r2
 800bd44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	697a      	ldr	r2, [r7, #20]
 800bd4a:	609a      	str	r2, [r3, #8]
}
 800bd4c:	bf00      	nop
 800bd4e:	371c      	adds	r7, #28
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b085      	sub	sp, #20
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d101      	bne.n	800bd70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd6c:	2302      	movs	r3, #2
 800bd6e:	e06d      	b.n	800be4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2201      	movs	r2, #1
 800bd74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2202      	movs	r2, #2
 800bd7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a30      	ldr	r2, [pc, #192]	; (800be58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d004      	beq.n	800bda4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4a2f      	ldr	r2, [pc, #188]	; (800be5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d108      	bne.n	800bdb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bdaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	68fa      	ldr	r2, [r7, #12]
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	68fa      	ldr	r2, [r7, #12]
 800bdce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a20      	ldr	r2, [pc, #128]	; (800be58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d022      	beq.n	800be20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bde2:	d01d      	beq.n	800be20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a1d      	ldr	r2, [pc, #116]	; (800be60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d018      	beq.n	800be20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a1c      	ldr	r2, [pc, #112]	; (800be64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d013      	beq.n	800be20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a1a      	ldr	r2, [pc, #104]	; (800be68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d00e      	beq.n	800be20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a15      	ldr	r2, [pc, #84]	; (800be5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d009      	beq.n	800be20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a16      	ldr	r2, [pc, #88]	; (800be6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d004      	beq.n	800be20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a15      	ldr	r2, [pc, #84]	; (800be70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d10c      	bne.n	800be3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	68ba      	ldr	r2, [r7, #8]
 800be2e:	4313      	orrs	r3, r2
 800be30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	68ba      	ldr	r2, [r7, #8]
 800be38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2201      	movs	r2, #1
 800be3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3714      	adds	r7, #20
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr
 800be58:	40010000 	.word	0x40010000
 800be5c:	40010400 	.word	0x40010400
 800be60:	40000400 	.word	0x40000400
 800be64:	40000800 	.word	0x40000800
 800be68:	40000c00 	.word	0x40000c00
 800be6c:	40014000 	.word	0x40014000
 800be70:	40001800 	.word	0x40001800

0800be74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800be7e:	2300      	movs	r3, #0
 800be80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d101      	bne.n	800be90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800be8c:	2302      	movs	r3, #2
 800be8e:	e065      	b.n	800bf5c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	689b      	ldr	r3, [r3, #8]
 800beb0:	4313      	orrs	r3, r2
 800beb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4313      	orrs	r3, r2
 800bece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	691b      	ldr	r3, [r3, #16]
 800beda:	4313      	orrs	r3, r2
 800bedc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	695b      	ldr	r3, [r3, #20]
 800bee8:	4313      	orrs	r3, r2
 800beea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bef6:	4313      	orrs	r3, r2
 800bef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	699b      	ldr	r3, [r3, #24]
 800bf04:	041b      	lsls	r3, r3, #16
 800bf06:	4313      	orrs	r3, r2
 800bf08:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a16      	ldr	r2, [pc, #88]	; (800bf68 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d004      	beq.n	800bf1e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a14      	ldr	r2, [pc, #80]	; (800bf6c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d115      	bne.n	800bf4a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf28:	051b      	lsls	r3, r3, #20
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	69db      	ldr	r3, [r3, #28]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	6a1b      	ldr	r3, [r3, #32]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf5a:	2300      	movs	r3, #0
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3714      	adds	r7, #20
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr
 800bf68:	40010000 	.word	0x40010000
 800bf6c:	40010400 	.word	0x40010400

0800bf70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf78:	bf00      	nop
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf8c:	bf00      	nop
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d101      	bne.n	800bfbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e040      	b.n	800c040 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d106      	bne.n	800bfd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7f6 faee 	bl	80025b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2224      	movs	r2, #36	; 0x24
 800bfd8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f022 0201 	bic.w	r2, r2, #1
 800bfe8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 f82c 	bl	800c048 <UART_SetConfig>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d101      	bne.n	800bffa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	e022      	b.n	800c040 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d002      	beq.n	800c008 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 fa80 	bl	800c508 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	685a      	ldr	r2, [r3, #4]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	689a      	ldr	r2, [r3, #8]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f042 0201 	orr.w	r2, r2, #1
 800c036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 fb07 	bl	800c64c <UART_CheckIdleState>
 800c03e:	4603      	mov	r3, r0
}
 800c040:	4618      	mov	r0, r3
 800c042:	3708      	adds	r7, #8
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b088      	sub	sp, #32
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c050:	2300      	movs	r3, #0
 800c052:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	689a      	ldr	r2, [r3, #8]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	431a      	orrs	r2, r3
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	695b      	ldr	r3, [r3, #20]
 800c062:	431a      	orrs	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	69db      	ldr	r3, [r3, #28]
 800c068:	4313      	orrs	r3, r2
 800c06a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	4bb1      	ldr	r3, [pc, #708]	; (800c338 <UART_SetConfig+0x2f0>)
 800c074:	4013      	ands	r3, r2
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	6812      	ldr	r2, [r2, #0]
 800c07a:	6979      	ldr	r1, [r7, #20]
 800c07c:	430b      	orrs	r3, r1
 800c07e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	68da      	ldr	r2, [r3, #12]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	430a      	orrs	r2, r1
 800c094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	699b      	ldr	r3, [r3, #24]
 800c09a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a1b      	ldr	r3, [r3, #32]
 800c0a0:	697a      	ldr	r2, [r7, #20]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	697a      	ldr	r2, [r7, #20]
 800c0b6:	430a      	orrs	r2, r1
 800c0b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a9f      	ldr	r2, [pc, #636]	; (800c33c <UART_SetConfig+0x2f4>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d121      	bne.n	800c108 <UART_SetConfig+0xc0>
 800c0c4:	4b9e      	ldr	r3, [pc, #632]	; (800c340 <UART_SetConfig+0x2f8>)
 800c0c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0ca:	f003 0303 	and.w	r3, r3, #3
 800c0ce:	2b03      	cmp	r3, #3
 800c0d0:	d816      	bhi.n	800c100 <UART_SetConfig+0xb8>
 800c0d2:	a201      	add	r2, pc, #4	; (adr r2, 800c0d8 <UART_SetConfig+0x90>)
 800c0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d8:	0800c0e9 	.word	0x0800c0e9
 800c0dc:	0800c0f5 	.word	0x0800c0f5
 800c0e0:	0800c0ef 	.word	0x0800c0ef
 800c0e4:	0800c0fb 	.word	0x0800c0fb
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	77fb      	strb	r3, [r7, #31]
 800c0ec:	e151      	b.n	800c392 <UART_SetConfig+0x34a>
 800c0ee:	2302      	movs	r3, #2
 800c0f0:	77fb      	strb	r3, [r7, #31]
 800c0f2:	e14e      	b.n	800c392 <UART_SetConfig+0x34a>
 800c0f4:	2304      	movs	r3, #4
 800c0f6:	77fb      	strb	r3, [r7, #31]
 800c0f8:	e14b      	b.n	800c392 <UART_SetConfig+0x34a>
 800c0fa:	2308      	movs	r3, #8
 800c0fc:	77fb      	strb	r3, [r7, #31]
 800c0fe:	e148      	b.n	800c392 <UART_SetConfig+0x34a>
 800c100:	2310      	movs	r3, #16
 800c102:	77fb      	strb	r3, [r7, #31]
 800c104:	bf00      	nop
 800c106:	e144      	b.n	800c392 <UART_SetConfig+0x34a>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a8d      	ldr	r2, [pc, #564]	; (800c344 <UART_SetConfig+0x2fc>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d134      	bne.n	800c17c <UART_SetConfig+0x134>
 800c112:	4b8b      	ldr	r3, [pc, #556]	; (800c340 <UART_SetConfig+0x2f8>)
 800c114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c118:	f003 030c 	and.w	r3, r3, #12
 800c11c:	2b0c      	cmp	r3, #12
 800c11e:	d829      	bhi.n	800c174 <UART_SetConfig+0x12c>
 800c120:	a201      	add	r2, pc, #4	; (adr r2, 800c128 <UART_SetConfig+0xe0>)
 800c122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c126:	bf00      	nop
 800c128:	0800c15d 	.word	0x0800c15d
 800c12c:	0800c175 	.word	0x0800c175
 800c130:	0800c175 	.word	0x0800c175
 800c134:	0800c175 	.word	0x0800c175
 800c138:	0800c169 	.word	0x0800c169
 800c13c:	0800c175 	.word	0x0800c175
 800c140:	0800c175 	.word	0x0800c175
 800c144:	0800c175 	.word	0x0800c175
 800c148:	0800c163 	.word	0x0800c163
 800c14c:	0800c175 	.word	0x0800c175
 800c150:	0800c175 	.word	0x0800c175
 800c154:	0800c175 	.word	0x0800c175
 800c158:	0800c16f 	.word	0x0800c16f
 800c15c:	2300      	movs	r3, #0
 800c15e:	77fb      	strb	r3, [r7, #31]
 800c160:	e117      	b.n	800c392 <UART_SetConfig+0x34a>
 800c162:	2302      	movs	r3, #2
 800c164:	77fb      	strb	r3, [r7, #31]
 800c166:	e114      	b.n	800c392 <UART_SetConfig+0x34a>
 800c168:	2304      	movs	r3, #4
 800c16a:	77fb      	strb	r3, [r7, #31]
 800c16c:	e111      	b.n	800c392 <UART_SetConfig+0x34a>
 800c16e:	2308      	movs	r3, #8
 800c170:	77fb      	strb	r3, [r7, #31]
 800c172:	e10e      	b.n	800c392 <UART_SetConfig+0x34a>
 800c174:	2310      	movs	r3, #16
 800c176:	77fb      	strb	r3, [r7, #31]
 800c178:	bf00      	nop
 800c17a:	e10a      	b.n	800c392 <UART_SetConfig+0x34a>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a71      	ldr	r2, [pc, #452]	; (800c348 <UART_SetConfig+0x300>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d120      	bne.n	800c1c8 <UART_SetConfig+0x180>
 800c186:	4b6e      	ldr	r3, [pc, #440]	; (800c340 <UART_SetConfig+0x2f8>)
 800c188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c18c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c190:	2b10      	cmp	r3, #16
 800c192:	d00f      	beq.n	800c1b4 <UART_SetConfig+0x16c>
 800c194:	2b10      	cmp	r3, #16
 800c196:	d802      	bhi.n	800c19e <UART_SetConfig+0x156>
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d005      	beq.n	800c1a8 <UART_SetConfig+0x160>
 800c19c:	e010      	b.n	800c1c0 <UART_SetConfig+0x178>
 800c19e:	2b20      	cmp	r3, #32
 800c1a0:	d005      	beq.n	800c1ae <UART_SetConfig+0x166>
 800c1a2:	2b30      	cmp	r3, #48	; 0x30
 800c1a4:	d009      	beq.n	800c1ba <UART_SetConfig+0x172>
 800c1a6:	e00b      	b.n	800c1c0 <UART_SetConfig+0x178>
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	77fb      	strb	r3, [r7, #31]
 800c1ac:	e0f1      	b.n	800c392 <UART_SetConfig+0x34a>
 800c1ae:	2302      	movs	r3, #2
 800c1b0:	77fb      	strb	r3, [r7, #31]
 800c1b2:	e0ee      	b.n	800c392 <UART_SetConfig+0x34a>
 800c1b4:	2304      	movs	r3, #4
 800c1b6:	77fb      	strb	r3, [r7, #31]
 800c1b8:	e0eb      	b.n	800c392 <UART_SetConfig+0x34a>
 800c1ba:	2308      	movs	r3, #8
 800c1bc:	77fb      	strb	r3, [r7, #31]
 800c1be:	e0e8      	b.n	800c392 <UART_SetConfig+0x34a>
 800c1c0:	2310      	movs	r3, #16
 800c1c2:	77fb      	strb	r3, [r7, #31]
 800c1c4:	bf00      	nop
 800c1c6:	e0e4      	b.n	800c392 <UART_SetConfig+0x34a>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a5f      	ldr	r2, [pc, #380]	; (800c34c <UART_SetConfig+0x304>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d120      	bne.n	800c214 <UART_SetConfig+0x1cc>
 800c1d2:	4b5b      	ldr	r3, [pc, #364]	; (800c340 <UART_SetConfig+0x2f8>)
 800c1d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c1dc:	2b40      	cmp	r3, #64	; 0x40
 800c1de:	d00f      	beq.n	800c200 <UART_SetConfig+0x1b8>
 800c1e0:	2b40      	cmp	r3, #64	; 0x40
 800c1e2:	d802      	bhi.n	800c1ea <UART_SetConfig+0x1a2>
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d005      	beq.n	800c1f4 <UART_SetConfig+0x1ac>
 800c1e8:	e010      	b.n	800c20c <UART_SetConfig+0x1c4>
 800c1ea:	2b80      	cmp	r3, #128	; 0x80
 800c1ec:	d005      	beq.n	800c1fa <UART_SetConfig+0x1b2>
 800c1ee:	2bc0      	cmp	r3, #192	; 0xc0
 800c1f0:	d009      	beq.n	800c206 <UART_SetConfig+0x1be>
 800c1f2:	e00b      	b.n	800c20c <UART_SetConfig+0x1c4>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	77fb      	strb	r3, [r7, #31]
 800c1f8:	e0cb      	b.n	800c392 <UART_SetConfig+0x34a>
 800c1fa:	2302      	movs	r3, #2
 800c1fc:	77fb      	strb	r3, [r7, #31]
 800c1fe:	e0c8      	b.n	800c392 <UART_SetConfig+0x34a>
 800c200:	2304      	movs	r3, #4
 800c202:	77fb      	strb	r3, [r7, #31]
 800c204:	e0c5      	b.n	800c392 <UART_SetConfig+0x34a>
 800c206:	2308      	movs	r3, #8
 800c208:	77fb      	strb	r3, [r7, #31]
 800c20a:	e0c2      	b.n	800c392 <UART_SetConfig+0x34a>
 800c20c:	2310      	movs	r3, #16
 800c20e:	77fb      	strb	r3, [r7, #31]
 800c210:	bf00      	nop
 800c212:	e0be      	b.n	800c392 <UART_SetConfig+0x34a>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a4d      	ldr	r2, [pc, #308]	; (800c350 <UART_SetConfig+0x308>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d124      	bne.n	800c268 <UART_SetConfig+0x220>
 800c21e:	4b48      	ldr	r3, [pc, #288]	; (800c340 <UART_SetConfig+0x2f8>)
 800c220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c22c:	d012      	beq.n	800c254 <UART_SetConfig+0x20c>
 800c22e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c232:	d802      	bhi.n	800c23a <UART_SetConfig+0x1f2>
 800c234:	2b00      	cmp	r3, #0
 800c236:	d007      	beq.n	800c248 <UART_SetConfig+0x200>
 800c238:	e012      	b.n	800c260 <UART_SetConfig+0x218>
 800c23a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c23e:	d006      	beq.n	800c24e <UART_SetConfig+0x206>
 800c240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c244:	d009      	beq.n	800c25a <UART_SetConfig+0x212>
 800c246:	e00b      	b.n	800c260 <UART_SetConfig+0x218>
 800c248:	2300      	movs	r3, #0
 800c24a:	77fb      	strb	r3, [r7, #31]
 800c24c:	e0a1      	b.n	800c392 <UART_SetConfig+0x34a>
 800c24e:	2302      	movs	r3, #2
 800c250:	77fb      	strb	r3, [r7, #31]
 800c252:	e09e      	b.n	800c392 <UART_SetConfig+0x34a>
 800c254:	2304      	movs	r3, #4
 800c256:	77fb      	strb	r3, [r7, #31]
 800c258:	e09b      	b.n	800c392 <UART_SetConfig+0x34a>
 800c25a:	2308      	movs	r3, #8
 800c25c:	77fb      	strb	r3, [r7, #31]
 800c25e:	e098      	b.n	800c392 <UART_SetConfig+0x34a>
 800c260:	2310      	movs	r3, #16
 800c262:	77fb      	strb	r3, [r7, #31]
 800c264:	bf00      	nop
 800c266:	e094      	b.n	800c392 <UART_SetConfig+0x34a>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a39      	ldr	r2, [pc, #228]	; (800c354 <UART_SetConfig+0x30c>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d124      	bne.n	800c2bc <UART_SetConfig+0x274>
 800c272:	4b33      	ldr	r3, [pc, #204]	; (800c340 <UART_SetConfig+0x2f8>)
 800c274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c278:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c27c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c280:	d012      	beq.n	800c2a8 <UART_SetConfig+0x260>
 800c282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c286:	d802      	bhi.n	800c28e <UART_SetConfig+0x246>
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d007      	beq.n	800c29c <UART_SetConfig+0x254>
 800c28c:	e012      	b.n	800c2b4 <UART_SetConfig+0x26c>
 800c28e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c292:	d006      	beq.n	800c2a2 <UART_SetConfig+0x25a>
 800c294:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c298:	d009      	beq.n	800c2ae <UART_SetConfig+0x266>
 800c29a:	e00b      	b.n	800c2b4 <UART_SetConfig+0x26c>
 800c29c:	2301      	movs	r3, #1
 800c29e:	77fb      	strb	r3, [r7, #31]
 800c2a0:	e077      	b.n	800c392 <UART_SetConfig+0x34a>
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	77fb      	strb	r3, [r7, #31]
 800c2a6:	e074      	b.n	800c392 <UART_SetConfig+0x34a>
 800c2a8:	2304      	movs	r3, #4
 800c2aa:	77fb      	strb	r3, [r7, #31]
 800c2ac:	e071      	b.n	800c392 <UART_SetConfig+0x34a>
 800c2ae:	2308      	movs	r3, #8
 800c2b0:	77fb      	strb	r3, [r7, #31]
 800c2b2:	e06e      	b.n	800c392 <UART_SetConfig+0x34a>
 800c2b4:	2310      	movs	r3, #16
 800c2b6:	77fb      	strb	r3, [r7, #31]
 800c2b8:	bf00      	nop
 800c2ba:	e06a      	b.n	800c392 <UART_SetConfig+0x34a>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a25      	ldr	r2, [pc, #148]	; (800c358 <UART_SetConfig+0x310>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d124      	bne.n	800c310 <UART_SetConfig+0x2c8>
 800c2c6:	4b1e      	ldr	r3, [pc, #120]	; (800c340 <UART_SetConfig+0x2f8>)
 800c2c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c2d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2d4:	d012      	beq.n	800c2fc <UART_SetConfig+0x2b4>
 800c2d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2da:	d802      	bhi.n	800c2e2 <UART_SetConfig+0x29a>
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d007      	beq.n	800c2f0 <UART_SetConfig+0x2a8>
 800c2e0:	e012      	b.n	800c308 <UART_SetConfig+0x2c0>
 800c2e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2e6:	d006      	beq.n	800c2f6 <UART_SetConfig+0x2ae>
 800c2e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c2ec:	d009      	beq.n	800c302 <UART_SetConfig+0x2ba>
 800c2ee:	e00b      	b.n	800c308 <UART_SetConfig+0x2c0>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	77fb      	strb	r3, [r7, #31]
 800c2f4:	e04d      	b.n	800c392 <UART_SetConfig+0x34a>
 800c2f6:	2302      	movs	r3, #2
 800c2f8:	77fb      	strb	r3, [r7, #31]
 800c2fa:	e04a      	b.n	800c392 <UART_SetConfig+0x34a>
 800c2fc:	2304      	movs	r3, #4
 800c2fe:	77fb      	strb	r3, [r7, #31]
 800c300:	e047      	b.n	800c392 <UART_SetConfig+0x34a>
 800c302:	2308      	movs	r3, #8
 800c304:	77fb      	strb	r3, [r7, #31]
 800c306:	e044      	b.n	800c392 <UART_SetConfig+0x34a>
 800c308:	2310      	movs	r3, #16
 800c30a:	77fb      	strb	r3, [r7, #31]
 800c30c:	bf00      	nop
 800c30e:	e040      	b.n	800c392 <UART_SetConfig+0x34a>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a11      	ldr	r2, [pc, #68]	; (800c35c <UART_SetConfig+0x314>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d139      	bne.n	800c38e <UART_SetConfig+0x346>
 800c31a:	4b09      	ldr	r3, [pc, #36]	; (800c340 <UART_SetConfig+0x2f8>)
 800c31c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c320:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c328:	d027      	beq.n	800c37a <UART_SetConfig+0x332>
 800c32a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c32e:	d817      	bhi.n	800c360 <UART_SetConfig+0x318>
 800c330:	2b00      	cmp	r3, #0
 800c332:	d01c      	beq.n	800c36e <UART_SetConfig+0x326>
 800c334:	e027      	b.n	800c386 <UART_SetConfig+0x33e>
 800c336:	bf00      	nop
 800c338:	efff69f3 	.word	0xefff69f3
 800c33c:	40011000 	.word	0x40011000
 800c340:	40023800 	.word	0x40023800
 800c344:	40004400 	.word	0x40004400
 800c348:	40004800 	.word	0x40004800
 800c34c:	40004c00 	.word	0x40004c00
 800c350:	40005000 	.word	0x40005000
 800c354:	40011400 	.word	0x40011400
 800c358:	40007800 	.word	0x40007800
 800c35c:	40007c00 	.word	0x40007c00
 800c360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c364:	d006      	beq.n	800c374 <UART_SetConfig+0x32c>
 800c366:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c36a:	d009      	beq.n	800c380 <UART_SetConfig+0x338>
 800c36c:	e00b      	b.n	800c386 <UART_SetConfig+0x33e>
 800c36e:	2300      	movs	r3, #0
 800c370:	77fb      	strb	r3, [r7, #31]
 800c372:	e00e      	b.n	800c392 <UART_SetConfig+0x34a>
 800c374:	2302      	movs	r3, #2
 800c376:	77fb      	strb	r3, [r7, #31]
 800c378:	e00b      	b.n	800c392 <UART_SetConfig+0x34a>
 800c37a:	2304      	movs	r3, #4
 800c37c:	77fb      	strb	r3, [r7, #31]
 800c37e:	e008      	b.n	800c392 <UART_SetConfig+0x34a>
 800c380:	2308      	movs	r3, #8
 800c382:	77fb      	strb	r3, [r7, #31]
 800c384:	e005      	b.n	800c392 <UART_SetConfig+0x34a>
 800c386:	2310      	movs	r3, #16
 800c388:	77fb      	strb	r3, [r7, #31]
 800c38a:	bf00      	nop
 800c38c:	e001      	b.n	800c392 <UART_SetConfig+0x34a>
 800c38e:	2310      	movs	r3, #16
 800c390:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	69db      	ldr	r3, [r3, #28]
 800c396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c39a:	d15b      	bne.n	800c454 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 800c39c:	7ffb      	ldrb	r3, [r7, #31]
 800c39e:	2b08      	cmp	r3, #8
 800c3a0:	d827      	bhi.n	800c3f2 <UART_SetConfig+0x3aa>
 800c3a2:	a201      	add	r2, pc, #4	; (adr r2, 800c3a8 <UART_SetConfig+0x360>)
 800c3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a8:	0800c3cd 	.word	0x0800c3cd
 800c3ac:	0800c3d5 	.word	0x0800c3d5
 800c3b0:	0800c3dd 	.word	0x0800c3dd
 800c3b4:	0800c3f3 	.word	0x0800c3f3
 800c3b8:	0800c3e3 	.word	0x0800c3e3
 800c3bc:	0800c3f3 	.word	0x0800c3f3
 800c3c0:	0800c3f3 	.word	0x0800c3f3
 800c3c4:	0800c3f3 	.word	0x0800c3f3
 800c3c8:	0800c3eb 	.word	0x0800c3eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3cc:	f7fd f866 	bl	800949c <HAL_RCC_GetPCLK1Freq>
 800c3d0:	61b8      	str	r0, [r7, #24]
        break;
 800c3d2:	e013      	b.n	800c3fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c3d4:	f7fd f876 	bl	80094c4 <HAL_RCC_GetPCLK2Freq>
 800c3d8:	61b8      	str	r0, [r7, #24]
        break;
 800c3da:	e00f      	b.n	800c3fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c3dc:	4b49      	ldr	r3, [pc, #292]	; (800c504 <UART_SetConfig+0x4bc>)
 800c3de:	61bb      	str	r3, [r7, #24]
        break;
 800c3e0:	e00c      	b.n	800c3fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c3e2:	f7fc ff9d 	bl	8009320 <HAL_RCC_GetSysClockFreq>
 800c3e6:	61b8      	str	r0, [r7, #24]
        break;
 800c3e8:	e008      	b.n	800c3fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3ee:	61bb      	str	r3, [r7, #24]
        break;
 800c3f0:	e004      	b.n	800c3fc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	77bb      	strb	r3, [r7, #30]
        break;
 800c3fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d074      	beq.n	800c4ec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	005a      	lsls	r2, r3, #1
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	085b      	lsrs	r3, r3, #1
 800c40c:	441a      	add	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	fbb2 f3f3 	udiv	r3, r2, r3
 800c416:	b29b      	uxth	r3, r3
 800c418:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	2b0f      	cmp	r3, #15
 800c41e:	d916      	bls.n	800c44e <UART_SetConfig+0x406>
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c426:	d212      	bcs.n	800c44e <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	f023 030f 	bic.w	r3, r3, #15
 800c430:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	085b      	lsrs	r3, r3, #1
 800c436:	b29b      	uxth	r3, r3
 800c438:	f003 0307 	and.w	r3, r3, #7
 800c43c:	b29a      	uxth	r2, r3
 800c43e:	89fb      	ldrh	r3, [r7, #14]
 800c440:	4313      	orrs	r3, r2
 800c442:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	89fa      	ldrh	r2, [r7, #14]
 800c44a:	60da      	str	r2, [r3, #12]
 800c44c:	e04e      	b.n	800c4ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c44e:	2301      	movs	r3, #1
 800c450:	77bb      	strb	r3, [r7, #30]
 800c452:	e04b      	b.n	800c4ec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c454:	7ffb      	ldrb	r3, [r7, #31]
 800c456:	2b08      	cmp	r3, #8
 800c458:	d827      	bhi.n	800c4aa <UART_SetConfig+0x462>
 800c45a:	a201      	add	r2, pc, #4	; (adr r2, 800c460 <UART_SetConfig+0x418>)
 800c45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c460:	0800c485 	.word	0x0800c485
 800c464:	0800c48d 	.word	0x0800c48d
 800c468:	0800c495 	.word	0x0800c495
 800c46c:	0800c4ab 	.word	0x0800c4ab
 800c470:	0800c49b 	.word	0x0800c49b
 800c474:	0800c4ab 	.word	0x0800c4ab
 800c478:	0800c4ab 	.word	0x0800c4ab
 800c47c:	0800c4ab 	.word	0x0800c4ab
 800c480:	0800c4a3 	.word	0x0800c4a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c484:	f7fd f80a 	bl	800949c <HAL_RCC_GetPCLK1Freq>
 800c488:	61b8      	str	r0, [r7, #24]
        break;
 800c48a:	e013      	b.n	800c4b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c48c:	f7fd f81a 	bl	80094c4 <HAL_RCC_GetPCLK2Freq>
 800c490:	61b8      	str	r0, [r7, #24]
        break;
 800c492:	e00f      	b.n	800c4b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c494:	4b1b      	ldr	r3, [pc, #108]	; (800c504 <UART_SetConfig+0x4bc>)
 800c496:	61bb      	str	r3, [r7, #24]
        break;
 800c498:	e00c      	b.n	800c4b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c49a:	f7fc ff41 	bl	8009320 <HAL_RCC_GetSysClockFreq>
 800c49e:	61b8      	str	r0, [r7, #24]
        break;
 800c4a0:	e008      	b.n	800c4b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4a6:	61bb      	str	r3, [r7, #24]
        break;
 800c4a8:	e004      	b.n	800c4b4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	77bb      	strb	r3, [r7, #30]
        break;
 800c4b2:	bf00      	nop
    }

    if (pclk != 0U)
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d018      	beq.n	800c4ec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	085a      	lsrs	r2, r3, #1
 800c4c0:	69bb      	ldr	r3, [r7, #24]
 800c4c2:	441a      	add	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	2b0f      	cmp	r3, #15
 800c4d4:	d908      	bls.n	800c4e8 <UART_SetConfig+0x4a0>
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4dc:	d204      	bcs.n	800c4e8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	693a      	ldr	r2, [r7, #16]
 800c4e4:	60da      	str	r2, [r3, #12]
 800c4e6:	e001      	b.n	800c4ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c4f8:	7fbb      	ldrb	r3, [r7, #30]
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3720      	adds	r7, #32
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	00f42400 	.word	0x00f42400

0800c508 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c508:	b480      	push	{r7}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c514:	f003 0301 	and.w	r3, r3, #1
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00a      	beq.n	800c532 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	430a      	orrs	r2, r1
 800c530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c536:	f003 0302 	and.w	r3, r3, #2
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00a      	beq.n	800c554 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	430a      	orrs	r2, r1
 800c552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c558:	f003 0304 	and.w	r3, r3, #4
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00a      	beq.n	800c576 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	430a      	orrs	r2, r1
 800c574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c57a:	f003 0308 	and.w	r3, r3, #8
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00a      	beq.n	800c598 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	430a      	orrs	r2, r1
 800c596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c59c:	f003 0310 	and.w	r3, r3, #16
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00a      	beq.n	800c5ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	430a      	orrs	r2, r1
 800c5b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5be:	f003 0320 	and.w	r3, r3, #32
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d00a      	beq.n	800c5dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	689b      	ldr	r3, [r3, #8]
 800c5cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	430a      	orrs	r2, r1
 800c5da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d01a      	beq.n	800c61e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	430a      	orrs	r2, r1
 800c5fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c606:	d10a      	bne.n	800c61e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	430a      	orrs	r2, r1
 800c61c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00a      	beq.n	800c640 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	430a      	orrs	r2, r1
 800c63e:	605a      	str	r2, [r3, #4]
  }
}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b086      	sub	sp, #24
 800c650:	af02      	add	r7, sp, #8
 800c652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c65c:	f7f7 f9f8 	bl	8003a50 <HAL_GetTick>
 800c660:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f003 0308 	and.w	r3, r3, #8
 800c66c:	2b08      	cmp	r3, #8
 800c66e:	d10e      	bne.n	800c68e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c670:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c674:	9300      	str	r3, [sp, #0]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2200      	movs	r2, #0
 800c67a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 f817 	bl	800c6b2 <UART_WaitOnFlagUntilTimeout>
 800c684:	4603      	mov	r3, r0
 800c686:	2b00      	cmp	r3, #0
 800c688:	d001      	beq.n	800c68e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c68a:	2303      	movs	r3, #3
 800c68c:	e00d      	b.n	800c6aa <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2220      	movs	r2, #32
 800c692:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2220      	movs	r2, #32
 800c698:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c6a8:	2300      	movs	r3, #0
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3710      	adds	r7, #16
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c6b2:	b580      	push	{r7, lr}
 800c6b4:	b084      	sub	sp, #16
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	60f8      	str	r0, [r7, #12]
 800c6ba:	60b9      	str	r1, [r7, #8]
 800c6bc:	603b      	str	r3, [r7, #0]
 800c6be:	4613      	mov	r3, r2
 800c6c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6c2:	e05e      	b.n	800c782 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6ca:	d05a      	beq.n	800c782 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6cc:	f7f7 f9c0 	bl	8003a50 <HAL_GetTick>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	69ba      	ldr	r2, [r7, #24]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d302      	bcc.n	800c6e2 <UART_WaitOnFlagUntilTimeout+0x30>
 800c6dc:	69bb      	ldr	r3, [r7, #24]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d11b      	bne.n	800c71a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c6f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	689a      	ldr	r2, [r3, #8]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f022 0201 	bic.w	r2, r2, #1
 800c700:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2220      	movs	r2, #32
 800c706:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2220      	movs	r2, #32
 800c70c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2200      	movs	r2, #0
 800c712:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c716:	2303      	movs	r3, #3
 800c718:	e043      	b.n	800c7a2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f003 0304 	and.w	r3, r3, #4
 800c724:	2b00      	cmp	r3, #0
 800c726:	d02c      	beq.n	800c782 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	69db      	ldr	r3, [r3, #28]
 800c72e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c736:	d124      	bne.n	800c782 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c740:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c750:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	689a      	ldr	r2, [r3, #8]
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f022 0201 	bic.w	r2, r2, #1
 800c760:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2220      	movs	r2, #32
 800c766:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2220      	movs	r2, #32
 800c76c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2220      	movs	r2, #32
 800c772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2200      	movs	r2, #0
 800c77a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c77e:	2303      	movs	r3, #3
 800c780:	e00f      	b.n	800c7a2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	69da      	ldr	r2, [r3, #28]
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	4013      	ands	r3, r2
 800c78c:	68ba      	ldr	r2, [r7, #8]
 800c78e:	429a      	cmp	r2, r3
 800c790:	bf0c      	ite	eq
 800c792:	2301      	moveq	r3, #1
 800c794:	2300      	movne	r3, #0
 800c796:	b2db      	uxtb	r3, r3
 800c798:	461a      	mov	r2, r3
 800c79a:	79fb      	ldrb	r3, [r7, #7]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d091      	beq.n	800c6c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
	...

0800c7ac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b085      	sub	sp, #20
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d027      	beq.n	800c816 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	4b2f      	ldr	r3, [pc, #188]	; (800c88c <FMC_SDRAM_Init+0xe0>)
 800c7d0:	4013      	ands	r3, r2
 800c7d2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c7dc:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800c7e2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800c7e8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800c7ee:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800c7f4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800c7fa:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800c800:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c806:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c808:	68fa      	ldr	r2, [r7, #12]
 800c80a:	4313      	orrs	r3, r2
 800c80c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	68fa      	ldr	r2, [r7, #12]
 800c812:	601a      	str	r2, [r3, #0]
 800c814:	e032      	b.n	800c87c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c822:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c82c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c832:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	4313      	orrs	r3, r2
 800c838:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c840:	68ba      	ldr	r2, [r7, #8]
 800c842:	4b12      	ldr	r3, [pc, #72]	; (800c88c <FMC_SDRAM_Init+0xe0>)
 800c844:	4013      	ands	r3, r2
 800c846:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c850:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800c856:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800c85c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800c862:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800c868:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c86a:	68ba      	ldr	r2, [r7, #8]
 800c86c:	4313      	orrs	r3, r2
 800c86e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3714      	adds	r7, #20
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr
 800c88a:	bf00      	nop
 800c88c:	ffff8000 	.word	0xffff8000

0800c890 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c890:	b480      	push	{r7}
 800c892:	b087      	sub	sp, #28
 800c894:	af00      	add	r7, sp, #0
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800c89c:	2300      	movs	r3, #0
 800c89e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d02e      	beq.n	800c908 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c8b6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c8c6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c8d0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	68db      	ldr	r3, [r3, #12]
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c8da:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	691b      	ldr	r3, [r3, #16]
 800c8e0:	3b01      	subs	r3, #1
 800c8e2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c8e4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	695b      	ldr	r3, [r3, #20]
 800c8ea:	3b01      	subs	r3, #1
 800c8ec:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c8ee:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	699b      	ldr	r3, [r3, #24]
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	697a      	ldr	r2, [r7, #20]
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	697a      	ldr	r2, [r7, #20]
 800c904:	609a      	str	r2, [r3, #8]
 800c906:	e039      	b.n	800c97c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	4b1e      	ldr	r3, [pc, #120]	; (800c98c <FMC_SDRAM_Timing_Init+0xfc>)
 800c912:	4013      	ands	r3, r2
 800c914:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	3b01      	subs	r3, #1
 800c91c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	695b      	ldr	r3, [r3, #20]
 800c922:	3b01      	subs	r3, #1
 800c924:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c926:	4313      	orrs	r3, r2
 800c928:	697a      	ldr	r2, [r7, #20]
 800c92a:	4313      	orrs	r3, r2
 800c92c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	68db      	ldr	r3, [r3, #12]
 800c932:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c93a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	3b01      	subs	r3, #1
 800c948:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c94a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	689b      	ldr	r3, [r3, #8]
 800c950:	3b01      	subs	r3, #1
 800c952:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c954:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	691b      	ldr	r3, [r3, #16]
 800c95a:	3b01      	subs	r3, #1
 800c95c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c95e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	699b      	ldr	r3, [r3, #24]
 800c964:	3b01      	subs	r3, #1
 800c966:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c968:	4313      	orrs	r3, r2
 800c96a:	693a      	ldr	r2, [r7, #16]
 800c96c:	4313      	orrs	r3, r2
 800c96e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	693a      	ldr	r2, [r7, #16]
 800c97a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	371c      	adds	r7, #28
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	ff0f0fff 	.word	0xff0f0fff

0800c990 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800c990:	b480      	push	{r7}
 800c992:	b085      	sub	sp, #20
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	691a      	ldr	r2, [r3, #16]
 800c9a0:	4b0c      	ldr	r3, [pc, #48]	; (800c9d4 <FMC_SDRAM_SendCommand+0x44>)
 800c9a2:	4013      	ands	r3, r2
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	6811      	ldr	r1, [r2, #0]
 800c9a8:	68ba      	ldr	r2, [r7, #8]
 800c9aa:	6852      	ldr	r2, [r2, #4]
 800c9ac:	4311      	orrs	r1, r2
 800c9ae:	68ba      	ldr	r2, [r7, #8]
 800c9b0:	6892      	ldr	r2, [r2, #8]
 800c9b2:	3a01      	subs	r2, #1
 800c9b4:	0152      	lsls	r2, r2, #5
 800c9b6:	4311      	orrs	r1, r2
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	68d2      	ldr	r2, [r2, #12]
 800c9bc:	0252      	lsls	r2, r2, #9
 800c9be:	430a      	orrs	r2, r1
 800c9c0:	431a      	orrs	r2, r3
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3714      	adds	r7, #20
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr
 800c9d4:	ffc00000 	.word	0xffc00000

0800c9d8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	695a      	ldr	r2, [r3, #20]
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	431a      	orrs	r2, r3
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800c9f0:	2300      	movs	r3, #0
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	370c      	adds	r7, #12
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
	...

0800ca00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca00:	b084      	sub	sp, #16
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b084      	sub	sp, #16
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	f107 001c 	add.w	r0, r7, #28
 800ca0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ca12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d120      	bne.n	800ca5a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	68da      	ldr	r2, [r3, #12]
 800ca28:	4b20      	ldr	r3, [pc, #128]	; (800caac <USB_CoreInit+0xac>)
 800ca2a:	4013      	ands	r3, r2
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ca3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d105      	bne.n	800ca4e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 f942 	bl	800ccd8 <USB_CoreReset>
 800ca54:	4603      	mov	r3, r0
 800ca56:	73fb      	strb	r3, [r7, #15]
 800ca58:	e010      	b.n	800ca7c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 f936 	bl	800ccd8 <USB_CoreReset>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800ca7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d10b      	bne.n	800ca9a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	f043 0206 	orr.w	r2, r3, #6
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	689b      	ldr	r3, [r3, #8]
 800ca92:	f043 0220 	orr.w	r2, r3, #32
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ca9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3710      	adds	r7, #16
 800caa0:	46bd      	mov	sp, r7
 800caa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800caa6:	b004      	add	sp, #16
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	ffbdffbf 	.word	0xffbdffbf

0800cab0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	f043 0201 	orr.w	r2, r3, #1
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	370c      	adds	r7, #12
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr

0800cad2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cad2:	b480      	push	{r7}
 800cad4:	b083      	sub	sp, #12
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	f023 0201 	bic.w	r2, r3, #1
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cae6:	2300      	movs	r3, #0
}
 800cae8:	4618      	mov	r0, r3
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	460b      	mov	r3, r1
 800cafe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	68db      	ldr	r3, [r3, #12]
 800cb04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cb0c:	78fb      	ldrb	r3, [r7, #3]
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d106      	bne.n	800cb20 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	60da      	str	r2, [r3, #12]
 800cb1e:	e00b      	b.n	800cb38 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cb20:	78fb      	ldrb	r3, [r7, #3]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d106      	bne.n	800cb34 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	60da      	str	r2, [r3, #12]
 800cb32:	e001      	b.n	800cb38 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cb34:	2301      	movs	r3, #1
 800cb36:	e003      	b.n	800cb40 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cb38:	2032      	movs	r0, #50	; 0x32
 800cb3a:	f7f6 ff95 	bl	8003a68 <HAL_Delay>

  return HAL_OK;
 800cb3e:	2300      	movs	r3, #0
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cb52:	2300      	movs	r3, #0
 800cb54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	019b      	lsls	r3, r3, #6
 800cb5a:	f043 0220 	orr.w	r2, r3, #32
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	3301      	adds	r3, #1
 800cb66:	60fb      	str	r3, [r7, #12]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	4a09      	ldr	r2, [pc, #36]	; (800cb90 <USB_FlushTxFifo+0x48>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d901      	bls.n	800cb74 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cb70:	2303      	movs	r3, #3
 800cb72:	e006      	b.n	800cb82 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	691b      	ldr	r3, [r3, #16]
 800cb78:	f003 0320 	and.w	r3, r3, #32
 800cb7c:	2b20      	cmp	r3, #32
 800cb7e:	d0f0      	beq.n	800cb62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3714      	adds	r7, #20
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	00030d40 	.word	0x00030d40

0800cb94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b085      	sub	sp, #20
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2210      	movs	r2, #16
 800cba4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	3301      	adds	r3, #1
 800cbaa:	60fb      	str	r3, [r7, #12]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	4a09      	ldr	r2, [pc, #36]	; (800cbd4 <USB_FlushRxFifo+0x40>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d901      	bls.n	800cbb8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cbb4:	2303      	movs	r3, #3
 800cbb6:	e006      	b.n	800cbc6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	691b      	ldr	r3, [r3, #16]
 800cbbc:	f003 0310 	and.w	r3, r3, #16
 800cbc0:	2b10      	cmp	r3, #16
 800cbc2:	d0f0      	beq.n	800cba6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cbc4:	2300      	movs	r3, #0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3714      	adds	r7, #20
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	00030d40 	.word	0x00030d40

0800cbd8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b089      	sub	sp, #36	; 0x24
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	4611      	mov	r1, r2
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	71fb      	strb	r3, [r7, #7]
 800cbea:	4613      	mov	r3, r2
 800cbec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800cbf6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d11a      	bne.n	800cc34 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cbfe:	88bb      	ldrh	r3, [r7, #4]
 800cc00:	3303      	adds	r3, #3
 800cc02:	089b      	lsrs	r3, r3, #2
 800cc04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cc06:	2300      	movs	r3, #0
 800cc08:	61bb      	str	r3, [r7, #24]
 800cc0a:	e00f      	b.n	800cc2c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cc0c:	79fb      	ldrb	r3, [r7, #7]
 800cc0e:	031a      	lsls	r2, r3, #12
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	4413      	add	r3, r2
 800cc14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc18:	461a      	mov	r2, r3
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	3304      	adds	r3, #4
 800cc24:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	61bb      	str	r3, [r7, #24]
 800cc2c:	69ba      	ldr	r2, [r7, #24]
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d3eb      	bcc.n	800cc0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3724      	adds	r7, #36	; 0x24
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr

0800cc42 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cc42:	b480      	push	{r7}
 800cc44:	b089      	sub	sp, #36	; 0x24
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	60f8      	str	r0, [r7, #12]
 800cc4a:	60b9      	str	r1, [r7, #8]
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800cc58:	88fb      	ldrh	r3, [r7, #6]
 800cc5a:	3303      	adds	r3, #3
 800cc5c:	089b      	lsrs	r3, r3, #2
 800cc5e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800cc60:	2300      	movs	r3, #0
 800cc62:	61bb      	str	r3, [r7, #24]
 800cc64:	e00b      	b.n	800cc7e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	601a      	str	r2, [r3, #0]
    pDest++;
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	3304      	adds	r3, #4
 800cc76:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	61bb      	str	r3, [r7, #24]
 800cc7e:	69ba      	ldr	r2, [r7, #24]
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d3ef      	bcc.n	800cc66 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800cc86:	69fb      	ldr	r3, [r7, #28]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3724      	adds	r7, #36	; 0x24
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b085      	sub	sp, #20
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	695b      	ldr	r3, [r3, #20]
 800cca0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	699b      	ldr	r3, [r3, #24]
 800cca6:	68fa      	ldr	r2, [r7, #12]
 800cca8:	4013      	ands	r3, r2
 800ccaa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ccac:	68fb      	ldr	r3, [r7, #12]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3714      	adds	r7, #20
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr

0800ccba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ccba:	b480      	push	{r7}
 800ccbc:	b083      	sub	sp, #12
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	695b      	ldr	r3, [r3, #20]
 800ccc6:	f003 0301 	and.w	r3, r3, #1
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	370c      	adds	r7, #12
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr
	...

0800ccd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b085      	sub	sp, #20
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cce0:	2300      	movs	r3, #0
 800cce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	3301      	adds	r3, #1
 800cce8:	60fb      	str	r3, [r7, #12]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	4a13      	ldr	r2, [pc, #76]	; (800cd3c <USB_CoreReset+0x64>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d901      	bls.n	800ccf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	e01b      	b.n	800cd2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	691b      	ldr	r3, [r3, #16]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	daf2      	bge.n	800cce4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	691b      	ldr	r3, [r3, #16]
 800cd06:	f043 0201 	orr.w	r2, r3, #1
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	3301      	adds	r3, #1
 800cd12:	60fb      	str	r3, [r7, #12]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	4a09      	ldr	r2, [pc, #36]	; (800cd3c <USB_CoreReset+0x64>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d901      	bls.n	800cd20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cd1c:	2303      	movs	r3, #3
 800cd1e:	e006      	b.n	800cd2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	691b      	ldr	r3, [r3, #16]
 800cd24:	f003 0301 	and.w	r3, r3, #1
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d0f0      	beq.n	800cd0e <USB_CoreReset+0x36>

  return HAL_OK;
 800cd2c:	2300      	movs	r3, #0
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3714      	adds	r7, #20
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr
 800cd3a:	bf00      	nop
 800cd3c:	00030d40 	.word	0x00030d40

0800cd40 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cd40:	b084      	sub	sp, #16
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b084      	sub	sp, #16
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
 800cd4a:	f107 001c 	add.w	r0, r7, #28
 800cd4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	2300      	movs	r3, #0
 800cd60:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd66:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d018      	beq.n	800cdac <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d10a      	bne.n	800cd96 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	68ba      	ldr	r2, [r7, #8]
 800cd8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cd8e:	f043 0304 	orr.w	r3, r3, #4
 800cd92:	6013      	str	r3, [r2, #0]
 800cd94:	e014      	b.n	800cdc0 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	68ba      	ldr	r2, [r7, #8]
 800cda0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cda4:	f023 0304 	bic.w	r3, r3, #4
 800cda8:	6013      	str	r3, [r2, #0]
 800cdaa:	e009      	b.n	800cdc0 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cdba:	f023 0304 	bic.w	r3, r3, #4
 800cdbe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800cdc0:	2110      	movs	r1, #16
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f7ff fec0 	bl	800cb48 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f7ff fee3 	bl	800cb94 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cdce:	2300      	movs	r3, #0
 800cdd0:	60fb      	str	r3, [r7, #12]
 800cdd2:	e015      	b.n	800ce00 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	015a      	lsls	r2, r3, #5
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	4413      	add	r3, r2
 800cddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cde0:	461a      	mov	r2, r3
 800cde2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cde6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	015a      	lsls	r2, r3, #5
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	4413      	add	r3, r2
 800cdf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	60fb      	str	r3, [r7, #12]
 800ce00:	6a3b      	ldr	r3, [r7, #32]
 800ce02:	68fa      	ldr	r2, [r7, #12]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d3e5      	bcc.n	800cdd4 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800ce08:	2101      	movs	r1, #1
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f8ac 	bl	800cf68 <USB_DriveVbus>

  HAL_Delay(200U);
 800ce10:	20c8      	movs	r0, #200	; 0xc8
 800ce12:	f7f6 fe29 	bl	8003a68 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce22:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00b      	beq.n	800ce48 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce36:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	4a14      	ldr	r2, [pc, #80]	; (800ce8c <USB_HostInit+0x14c>)
 800ce3c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	4a13      	ldr	r2, [pc, #76]	; (800ce90 <USB_HostInit+0x150>)
 800ce42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800ce46:	e009      	b.n	800ce5c <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2280      	movs	r2, #128	; 0x80
 800ce4c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4a10      	ldr	r2, [pc, #64]	; (800ce94 <USB_HostInit+0x154>)
 800ce52:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	4a10      	ldr	r2, [pc, #64]	; (800ce98 <USB_HostInit+0x158>)
 800ce58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ce5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d105      	bne.n	800ce6e <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	699b      	ldr	r3, [r3, #24]
 800ce66:	f043 0210 	orr.w	r2, r3, #16
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	699a      	ldr	r2, [r3, #24]
 800ce72:	4b0a      	ldr	r3, [pc, #40]	; (800ce9c <USB_HostInit+0x15c>)
 800ce74:	4313      	orrs	r3, r2
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3710      	adds	r7, #16
 800ce80:	46bd      	mov	sp, r7
 800ce82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce86:	b004      	add	sp, #16
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	01000200 	.word	0x01000200
 800ce90:	00e00300 	.word	0x00e00300
 800ce94:	00600080 	.word	0x00600080
 800ce98:	004000e0 	.word	0x004000e0
 800ce9c:	a3200008 	.word	0xa3200008

0800cea0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b085      	sub	sp, #20
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	460b      	mov	r3, r1
 800ceaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	68fa      	ldr	r2, [r7, #12]
 800ceba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cebe:	f023 0303 	bic.w	r3, r3, #3
 800cec2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	78fb      	ldrb	r3, [r7, #3]
 800cece:	f003 0303 	and.w	r3, r3, #3
 800ced2:	68f9      	ldr	r1, [r7, #12]
 800ced4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ced8:	4313      	orrs	r3, r2
 800ceda:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800cedc:	78fb      	ldrb	r3, [r7, #3]
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d107      	bne.n	800cef2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cee8:	461a      	mov	r2, r3
 800ceea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ceee:	6053      	str	r3, [r2, #4]
 800cef0:	e009      	b.n	800cf06 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800cef2:	78fb      	ldrb	r3, [r7, #3]
 800cef4:	2b02      	cmp	r3, #2
 800cef6:	d106      	bne.n	800cf06 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cefe:	461a      	mov	r2, r3
 800cf00:	f241 7370 	movw	r3, #6000	; 0x1770
 800cf04:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800cf06:	2300      	movs	r3, #0
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3714      	adds	r7, #20
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800cf20:	2300      	movs	r3, #0
 800cf22:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cf34:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	68fa      	ldr	r2, [r7, #12]
 800cf3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cf3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf42:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800cf44:	2064      	movs	r0, #100	; 0x64
 800cf46:	f7f6 fd8f 	bl	8003a68 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cf52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf56:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800cf58:	200a      	movs	r0, #10
 800cf5a:	f7f6 fd85 	bl	8003a68 <HAL_Delay>

  return HAL_OK;
 800cf5e:	2300      	movs	r3, #0
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3710      	adds	r7, #16
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b085      	sub	sp, #20
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	460b      	mov	r3, r1
 800cf72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cf8c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d109      	bne.n	800cfac <USB_DriveVbus+0x44>
 800cf98:	78fb      	ldrb	r3, [r7, #3]
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d106      	bne.n	800cfac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	68fa      	ldr	r2, [r7, #12]
 800cfa2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cfa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cfaa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cfb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfb6:	d109      	bne.n	800cfcc <USB_DriveVbus+0x64>
 800cfb8:	78fb      	ldrb	r3, [r7, #3]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d106      	bne.n	800cfcc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	68fa      	ldr	r2, [r7, #12]
 800cfc2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cfc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800cfcc:	2300      	movs	r3, #0
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3714      	adds	r7, #20
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr

0800cfda <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cfda:	b480      	push	{r7}
 800cfdc:	b085      	sub	sp, #20
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	0c5b      	lsrs	r3, r3, #17
 800cff8:	f003 0303 	and.w	r3, r3, #3
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3714      	adds	r7, #20
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d008:	b480      	push	{r7}
 800d00a:	b085      	sub	sp, #20
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	b29b      	uxth	r3, r3
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3714      	adds	r7, #20
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr
	...

0800d02c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b088      	sub	sp, #32
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	4608      	mov	r0, r1
 800d036:	4611      	mov	r1, r2
 800d038:	461a      	mov	r2, r3
 800d03a:	4603      	mov	r3, r0
 800d03c:	70fb      	strb	r3, [r7, #3]
 800d03e:	460b      	mov	r3, r1
 800d040:	70bb      	strb	r3, [r7, #2]
 800d042:	4613      	mov	r3, r2
 800d044:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d046:	2300      	movs	r3, #0
 800d048:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d04e:	78fb      	ldrb	r3, [r7, #3]
 800d050:	015a      	lsls	r2, r3, #5
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	4413      	add	r3, r2
 800d056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d05a:	461a      	mov	r2, r3
 800d05c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d060:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d062:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d066:	2b03      	cmp	r3, #3
 800d068:	d87e      	bhi.n	800d168 <USB_HC_Init+0x13c>
 800d06a:	a201      	add	r2, pc, #4	; (adr r2, 800d070 <USB_HC_Init+0x44>)
 800d06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d070:	0800d081 	.word	0x0800d081
 800d074:	0800d12b 	.word	0x0800d12b
 800d078:	0800d081 	.word	0x0800d081
 800d07c:	0800d0ed 	.word	0x0800d0ed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d080:	78fb      	ldrb	r3, [r7, #3]
 800d082:	015a      	lsls	r2, r3, #5
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	4413      	add	r3, r2
 800d088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d08c:	461a      	mov	r2, r3
 800d08e:	f240 439d 	movw	r3, #1181	; 0x49d
 800d092:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d094:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	da10      	bge.n	800d0be <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d09c:	78fb      	ldrb	r3, [r7, #3]
 800d09e:	015a      	lsls	r2, r3, #5
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0a8:	68db      	ldr	r3, [r3, #12]
 800d0aa:	78fa      	ldrb	r2, [r7, #3]
 800d0ac:	0151      	lsls	r1, r2, #5
 800d0ae:	693a      	ldr	r2, [r7, #16]
 800d0b0:	440a      	add	r2, r1
 800d0b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d0b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0ba:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800d0bc:	e057      	b.n	800d16e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d051      	beq.n	800d16e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d0ca:	78fb      	ldrb	r3, [r7, #3]
 800d0cc:	015a      	lsls	r2, r3, #5
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	78fa      	ldrb	r2, [r7, #3]
 800d0da:	0151      	lsls	r1, r2, #5
 800d0dc:	693a      	ldr	r2, [r7, #16]
 800d0de:	440a      	add	r2, r1
 800d0e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d0e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d0e8:	60d3      	str	r3, [r2, #12]
      break;
 800d0ea:	e040      	b.n	800d16e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d0ec:	78fb      	ldrb	r3, [r7, #3]
 800d0ee:	015a      	lsls	r2, r3, #5
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	4413      	add	r3, r2
 800d0f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	f240 639d 	movw	r3, #1693	; 0x69d
 800d0fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d100:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d104:	2b00      	cmp	r3, #0
 800d106:	da34      	bge.n	800d172 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d108:	78fb      	ldrb	r3, [r7, #3]
 800d10a:	015a      	lsls	r2, r3, #5
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	4413      	add	r3, r2
 800d110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	78fa      	ldrb	r2, [r7, #3]
 800d118:	0151      	lsls	r1, r2, #5
 800d11a:	693a      	ldr	r2, [r7, #16]
 800d11c:	440a      	add	r2, r1
 800d11e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d126:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d128:	e023      	b.n	800d172 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d12a:	78fb      	ldrb	r3, [r7, #3]
 800d12c:	015a      	lsls	r2, r3, #5
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	4413      	add	r3, r2
 800d132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d136:	461a      	mov	r2, r3
 800d138:	f240 2325 	movw	r3, #549	; 0x225
 800d13c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d13e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d142:	2b00      	cmp	r3, #0
 800d144:	da17      	bge.n	800d176 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d146:	78fb      	ldrb	r3, [r7, #3]
 800d148:	015a      	lsls	r2, r3, #5
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	4413      	add	r3, r2
 800d14e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d152:	68db      	ldr	r3, [r3, #12]
 800d154:	78fa      	ldrb	r2, [r7, #3]
 800d156:	0151      	lsls	r1, r2, #5
 800d158:	693a      	ldr	r2, [r7, #16]
 800d15a:	440a      	add	r2, r1
 800d15c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d160:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d164:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d166:	e006      	b.n	800d176 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d168:	2301      	movs	r3, #1
 800d16a:	77fb      	strb	r3, [r7, #31]
      break;
 800d16c:	e004      	b.n	800d178 <USB_HC_Init+0x14c>
      break;
 800d16e:	bf00      	nop
 800d170:	e002      	b.n	800d178 <USB_HC_Init+0x14c>
      break;
 800d172:	bf00      	nop
 800d174:	e000      	b.n	800d178 <USB_HC_Init+0x14c>
      break;
 800d176:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d17e:	699a      	ldr	r2, [r3, #24]
 800d180:	78fb      	ldrb	r3, [r7, #3]
 800d182:	f003 030f 	and.w	r3, r3, #15
 800d186:	2101      	movs	r1, #1
 800d188:	fa01 f303 	lsl.w	r3, r1, r3
 800d18c:	6939      	ldr	r1, [r7, #16]
 800d18e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d192:	4313      	orrs	r3, r2
 800d194:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	699b      	ldr	r3, [r3, #24]
 800d19a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d1a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	da03      	bge.n	800d1b2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d1aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d1ae:	61bb      	str	r3, [r7, #24]
 800d1b0:	e001      	b.n	800d1b6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7ff ff0f 	bl	800cfda <USB_GetHostSpeed>
 800d1bc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d1be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d1c2:	2b02      	cmp	r3, #2
 800d1c4:	d106      	bne.n	800d1d4 <USB_HC_Init+0x1a8>
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2b02      	cmp	r3, #2
 800d1ca:	d003      	beq.n	800d1d4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d1cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d1d0:	617b      	str	r3, [r7, #20]
 800d1d2:	e001      	b.n	800d1d8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d1d8:	787b      	ldrb	r3, [r7, #1]
 800d1da:	059b      	lsls	r3, r3, #22
 800d1dc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d1e0:	78bb      	ldrb	r3, [r7, #2]
 800d1e2:	02db      	lsls	r3, r3, #11
 800d1e4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d1e8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d1ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d1ee:	049b      	lsls	r3, r3, #18
 800d1f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d1f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d1f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d1f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d1fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d202:	78fb      	ldrb	r3, [r7, #3]
 800d204:	0159      	lsls	r1, r3, #5
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	440b      	add	r3, r1
 800d20a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d20e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d214:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800d216:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d21a:	2b03      	cmp	r3, #3
 800d21c:	d10f      	bne.n	800d23e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d21e:	78fb      	ldrb	r3, [r7, #3]
 800d220:	015a      	lsls	r2, r3, #5
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	4413      	add	r3, r2
 800d226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	78fa      	ldrb	r2, [r7, #3]
 800d22e:	0151      	lsls	r1, r2, #5
 800d230:	693a      	ldr	r2, [r7, #16]
 800d232:	440a      	add	r2, r1
 800d234:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d238:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d23c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d23e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d240:	4618      	mov	r0, r3
 800d242:	3720      	adds	r7, #32
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b08c      	sub	sp, #48	; 0x30
 800d24c:	af02      	add	r7, sp, #8
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	4613      	mov	r3, r2
 800d254:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	785b      	ldrb	r3, [r3, #1]
 800d25e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d260:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d264:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d26a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d02d      	beq.n	800d2ce <USB_HC_StartXfer+0x86>
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	791b      	ldrb	r3, [r3, #4]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d129      	bne.n	800d2ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d27a:	79fb      	ldrb	r3, [r7, #7]
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d117      	bne.n	800d2b0 <USB_HC_StartXfer+0x68>
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	79db      	ldrb	r3, [r3, #7]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d003      	beq.n	800d290 <USB_HC_StartXfer+0x48>
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	79db      	ldrb	r3, [r3, #7]
 800d28c:	2b02      	cmp	r3, #2
 800d28e:	d10f      	bne.n	800d2b0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	015a      	lsls	r2, r3, #5
 800d294:	6a3b      	ldr	r3, [r7, #32]
 800d296:	4413      	add	r3, r2
 800d298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d29c:	68db      	ldr	r3, [r3, #12]
 800d29e:	69fa      	ldr	r2, [r7, #28]
 800d2a0:	0151      	lsls	r1, r2, #5
 800d2a2:	6a3a      	ldr	r2, [r7, #32]
 800d2a4:	440a      	add	r2, r1
 800d2a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2ae:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d2b0:	79fb      	ldrb	r3, [r7, #7]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d10b      	bne.n	800d2ce <USB_HC_StartXfer+0x86>
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	795b      	ldrb	r3, [r3, #5]
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d107      	bne.n	800d2ce <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	785b      	ldrb	r3, [r3, #1]
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	f000 fa31 	bl	800d72c <USB_DoPing>
      return HAL_OK;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	e0f9      	b.n	800d4c2 <USB_HC_StartXfer+0x27a>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	695b      	ldr	r3, [r3, #20]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d018      	beq.n	800d308 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	695b      	ldr	r3, [r3, #20]
 800d2da:	68ba      	ldr	r2, [r7, #8]
 800d2dc:	8912      	ldrh	r2, [r2, #8]
 800d2de:	4413      	add	r3, r2
 800d2e0:	3b01      	subs	r3, #1
 800d2e2:	68ba      	ldr	r2, [r7, #8]
 800d2e4:	8912      	ldrh	r2, [r2, #8]
 800d2e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2ea:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d2ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d2ee:	8b7b      	ldrh	r3, [r7, #26]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d90b      	bls.n	800d30c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d2f4:	8b7b      	ldrh	r3, [r7, #26]
 800d2f6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d2f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d2fa:	68ba      	ldr	r2, [r7, #8]
 800d2fc:	8912      	ldrh	r2, [r2, #8]
 800d2fe:	fb02 f203 	mul.w	r2, r2, r3
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	611a      	str	r2, [r3, #16]
 800d306:	e001      	b.n	800d30c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d308:	2301      	movs	r3, #1
 800d30a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	78db      	ldrb	r3, [r3, #3]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d007      	beq.n	800d324 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d314:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d316:	68ba      	ldr	r2, [r7, #8]
 800d318:	8912      	ldrh	r2, [r2, #8]
 800d31a:	fb02 f203 	mul.w	r2, r2, r3
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	611a      	str	r2, [r3, #16]
 800d322:	e003      	b.n	800d32c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	695a      	ldr	r2, [r3, #20]
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	691b      	ldr	r3, [r3, #16]
 800d330:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d334:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d336:	04d9      	lsls	r1, r3, #19
 800d338:	4b64      	ldr	r3, [pc, #400]	; (800d4cc <USB_HC_StartXfer+0x284>)
 800d33a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d33c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	7a9b      	ldrb	r3, [r3, #10]
 800d342:	075b      	lsls	r3, r3, #29
 800d344:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d348:	69f9      	ldr	r1, [r7, #28]
 800d34a:	0148      	lsls	r0, r1, #5
 800d34c:	6a39      	ldr	r1, [r7, #32]
 800d34e:	4401      	add	r1, r0
 800d350:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d354:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d356:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d358:	79fb      	ldrb	r3, [r7, #7]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d009      	beq.n	800d372 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	68d9      	ldr	r1, [r3, #12]
 800d362:	69fb      	ldr	r3, [r7, #28]
 800d364:	015a      	lsls	r2, r3, #5
 800d366:	6a3b      	ldr	r3, [r7, #32]
 800d368:	4413      	add	r3, r2
 800d36a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d36e:	460a      	mov	r2, r1
 800d370:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d372:	6a3b      	ldr	r3, [r7, #32]
 800d374:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d378:	689b      	ldr	r3, [r3, #8]
 800d37a:	f003 0301 	and.w	r3, r3, #1
 800d37e:	2b00      	cmp	r3, #0
 800d380:	bf0c      	ite	eq
 800d382:	2301      	moveq	r3, #1
 800d384:	2300      	movne	r3, #0
 800d386:	b2db      	uxtb	r3, r3
 800d388:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d38a:	69fb      	ldr	r3, [r7, #28]
 800d38c:	015a      	lsls	r2, r3, #5
 800d38e:	6a3b      	ldr	r3, [r7, #32]
 800d390:	4413      	add	r3, r2
 800d392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	69fa      	ldr	r2, [r7, #28]
 800d39a:	0151      	lsls	r1, r2, #5
 800d39c:	6a3a      	ldr	r2, [r7, #32]
 800d39e:	440a      	add	r2, r1
 800d3a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d3a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	015a      	lsls	r2, r3, #5
 800d3ae:	6a3b      	ldr	r3, [r7, #32]
 800d3b0:	4413      	add	r3, r2
 800d3b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	7e7b      	ldrb	r3, [r7, #25]
 800d3ba:	075b      	lsls	r3, r3, #29
 800d3bc:	69f9      	ldr	r1, [r7, #28]
 800d3be:	0148      	lsls	r0, r1, #5
 800d3c0:	6a39      	ldr	r1, [r7, #32]
 800d3c2:	4401      	add	r1, r0
 800d3c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	015a      	lsls	r2, r3, #5
 800d3d0:	6a3b      	ldr	r3, [r7, #32]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d3e2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	78db      	ldrb	r3, [r3, #3]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d004      	beq.n	800d3f6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3f2:	613b      	str	r3, [r7, #16]
 800d3f4:	e003      	b.n	800d3fe <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d3fc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d404:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	015a      	lsls	r2, r3, #5
 800d40a:	6a3b      	ldr	r3, [r7, #32]
 800d40c:	4413      	add	r3, r2
 800d40e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d412:	461a      	mov	r2, r3
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d418:	79fb      	ldrb	r3, [r7, #7]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d001      	beq.n	800d422 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d41e:	2300      	movs	r3, #0
 800d420:	e04f      	b.n	800d4c2 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	78db      	ldrb	r3, [r3, #3]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d14a      	bne.n	800d4c0 <USB_HC_StartXfer+0x278>
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	695b      	ldr	r3, [r3, #20]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d046      	beq.n	800d4c0 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	79db      	ldrb	r3, [r3, #7]
 800d436:	2b03      	cmp	r3, #3
 800d438:	d830      	bhi.n	800d49c <USB_HC_StartXfer+0x254>
 800d43a:	a201      	add	r2, pc, #4	; (adr r2, 800d440 <USB_HC_StartXfer+0x1f8>)
 800d43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d440:	0800d451 	.word	0x0800d451
 800d444:	0800d475 	.word	0x0800d475
 800d448:	0800d451 	.word	0x0800d451
 800d44c:	0800d475 	.word	0x0800d475
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	695b      	ldr	r3, [r3, #20]
 800d454:	3303      	adds	r3, #3
 800d456:	089b      	lsrs	r3, r3, #2
 800d458:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d45a:	8afa      	ldrh	r2, [r7, #22]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d460:	b29b      	uxth	r3, r3
 800d462:	429a      	cmp	r2, r3
 800d464:	d91c      	bls.n	800d4a0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	699b      	ldr	r3, [r3, #24]
 800d46a:	f043 0220 	orr.w	r2, r3, #32
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	619a      	str	r2, [r3, #24]
        }
        break;
 800d472:	e015      	b.n	800d4a0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	695b      	ldr	r3, [r3, #20]
 800d478:	3303      	adds	r3, #3
 800d47a:	089b      	lsrs	r3, r3, #2
 800d47c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d47e:	8afa      	ldrh	r2, [r7, #22]
 800d480:	6a3b      	ldr	r3, [r7, #32]
 800d482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d486:	691b      	ldr	r3, [r3, #16]
 800d488:	b29b      	uxth	r3, r3
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d90a      	bls.n	800d4a4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	699b      	ldr	r3, [r3, #24]
 800d492:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	619a      	str	r2, [r3, #24]
        }
        break;
 800d49a:	e003      	b.n	800d4a4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d49c:	bf00      	nop
 800d49e:	e002      	b.n	800d4a6 <USB_HC_StartXfer+0x25e>
        break;
 800d4a0:	bf00      	nop
 800d4a2:	e000      	b.n	800d4a6 <USB_HC_StartXfer+0x25e>
        break;
 800d4a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	68d9      	ldr	r1, [r3, #12]
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	785a      	ldrb	r2, [r3, #1]
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	695b      	ldr	r3, [r3, #20]
 800d4b2:	b298      	uxth	r0, r3
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	9300      	str	r3, [sp, #0]
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	68f8      	ldr	r0, [r7, #12]
 800d4bc:	f7ff fb8c 	bl	800cbd8 <USB_WritePacket>
  }

  return HAL_OK;
 800d4c0:	2300      	movs	r3, #0
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3728      	adds	r7, #40	; 0x28
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	1ff80000 	.word	0x1ff80000

0800d4d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d4e2:	695b      	ldr	r3, [r3, #20]
 800d4e4:	b29b      	uxth	r3, r3
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3714      	adds	r7, #20
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr

0800d4f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d4f2:	b480      	push	{r7}
 800d4f4:	b089      	sub	sp, #36	; 0x24
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
 800d4fa:	460b      	mov	r3, r1
 800d4fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800d502:	78fb      	ldrb	r3, [r7, #3]
 800d504:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800d506:	2300      	movs	r3, #0
 800d508:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	015a      	lsls	r2, r3, #5
 800d50e:	69bb      	ldr	r3, [r7, #24]
 800d510:	4413      	add	r3, r2
 800d512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	0c9b      	lsrs	r3, r3, #18
 800d51a:	f003 0303 	and.w	r3, r3, #3
 800d51e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	015a      	lsls	r2, r3, #5
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	4413      	add	r3, r2
 800d528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	0fdb      	lsrs	r3, r3, #31
 800d530:	f003 0301 	and.w	r3, r3, #1
 800d534:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	689b      	ldr	r3, [r3, #8]
 800d53a:	f003 0320 	and.w	r3, r3, #32
 800d53e:	2b20      	cmp	r3, #32
 800d540:	d104      	bne.n	800d54c <USB_HC_Halt+0x5a>
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d101      	bne.n	800d54c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d548:	2300      	movs	r3, #0
 800d54a:	e0e8      	b.n	800d71e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d002      	beq.n	800d558 <USB_HC_Halt+0x66>
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	2b02      	cmp	r3, #2
 800d556:	d173      	bne.n	800d640 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	015a      	lsls	r2, r3, #5
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	4413      	add	r3, r2
 800d560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	697a      	ldr	r2, [r7, #20]
 800d568:	0151      	lsls	r1, r2, #5
 800d56a:	69ba      	ldr	r2, [r7, #24]
 800d56c:	440a      	add	r2, r1
 800d56e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d572:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d576:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	689b      	ldr	r3, [r3, #8]
 800d57c:	f003 0320 	and.w	r3, r3, #32
 800d580:	2b00      	cmp	r3, #0
 800d582:	f040 80cb 	bne.w	800d71c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d58a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d143      	bne.n	800d61a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	015a      	lsls	r2, r3, #5
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	4413      	add	r3, r2
 800d59a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	697a      	ldr	r2, [r7, #20]
 800d5a2:	0151      	lsls	r1, r2, #5
 800d5a4:	69ba      	ldr	r2, [r7, #24]
 800d5a6:	440a      	add	r2, r1
 800d5a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d5ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5b0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	015a      	lsls	r2, r3, #5
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	4413      	add	r3, r2
 800d5ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	697a      	ldr	r2, [r7, #20]
 800d5c2:	0151      	lsls	r1, r2, #5
 800d5c4:	69ba      	ldr	r2, [r7, #24]
 800d5c6:	440a      	add	r2, r1
 800d5c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d5cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d5d0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	015a      	lsls	r2, r3, #5
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	4413      	add	r3, r2
 800d5da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	697a      	ldr	r2, [r7, #20]
 800d5e2:	0151      	lsls	r1, r2, #5
 800d5e4:	69ba      	ldr	r2, [r7, #24]
 800d5e6:	440a      	add	r2, r1
 800d5e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d5ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d5f0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	61fb      	str	r3, [r7, #28]
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d5fe:	d81d      	bhi.n	800d63c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	015a      	lsls	r2, r3, #5
 800d604:	69bb      	ldr	r3, [r7, #24]
 800d606:	4413      	add	r3, r2
 800d608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d616:	d0ec      	beq.n	800d5f2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d618:	e080      	b.n	800d71c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	015a      	lsls	r2, r3, #5
 800d61e:	69bb      	ldr	r3, [r7, #24]
 800d620:	4413      	add	r3, r2
 800d622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	697a      	ldr	r2, [r7, #20]
 800d62a:	0151      	lsls	r1, r2, #5
 800d62c:	69ba      	ldr	r2, [r7, #24]
 800d62e:	440a      	add	r2, r1
 800d630:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d634:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d638:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d63a:	e06f      	b.n	800d71c <USB_HC_Halt+0x22a>
            break;
 800d63c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d63e:	e06d      	b.n	800d71c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	015a      	lsls	r2, r3, #5
 800d644:	69bb      	ldr	r3, [r7, #24]
 800d646:	4413      	add	r3, r2
 800d648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	697a      	ldr	r2, [r7, #20]
 800d650:	0151      	lsls	r1, r2, #5
 800d652:	69ba      	ldr	r2, [r7, #24]
 800d654:	440a      	add	r2, r1
 800d656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d65a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d65e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d666:	691b      	ldr	r3, [r3, #16]
 800d668:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d143      	bne.n	800d6f8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	015a      	lsls	r2, r3, #5
 800d674:	69bb      	ldr	r3, [r7, #24]
 800d676:	4413      	add	r3, r2
 800d678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	697a      	ldr	r2, [r7, #20]
 800d680:	0151      	lsls	r1, r2, #5
 800d682:	69ba      	ldr	r2, [r7, #24]
 800d684:	440a      	add	r2, r1
 800d686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d68a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d68e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	015a      	lsls	r2, r3, #5
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	4413      	add	r3, r2
 800d698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	697a      	ldr	r2, [r7, #20]
 800d6a0:	0151      	lsls	r1, r2, #5
 800d6a2:	69ba      	ldr	r2, [r7, #24]
 800d6a4:	440a      	add	r2, r1
 800d6a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d6aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d6ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	015a      	lsls	r2, r3, #5
 800d6b4:	69bb      	ldr	r3, [r7, #24]
 800d6b6:	4413      	add	r3, r2
 800d6b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	697a      	ldr	r2, [r7, #20]
 800d6c0:	0151      	lsls	r1, r2, #5
 800d6c2:	69ba      	ldr	r2, [r7, #24]
 800d6c4:	440a      	add	r2, r1
 800d6c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d6ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d6ce:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d6d0:	69fb      	ldr	r3, [r7, #28]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	61fb      	str	r3, [r7, #28]
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6dc:	d81d      	bhi.n	800d71a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	015a      	lsls	r2, r3, #5
 800d6e2:	69bb      	ldr	r3, [r7, #24]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d6f4:	d0ec      	beq.n	800d6d0 <USB_HC_Halt+0x1de>
 800d6f6:	e011      	b.n	800d71c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	015a      	lsls	r2, r3, #5
 800d6fc:	69bb      	ldr	r3, [r7, #24]
 800d6fe:	4413      	add	r3, r2
 800d700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	697a      	ldr	r2, [r7, #20]
 800d708:	0151      	lsls	r1, r2, #5
 800d70a:	69ba      	ldr	r2, [r7, #24]
 800d70c:	440a      	add	r2, r1
 800d70e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d716:	6013      	str	r3, [r2, #0]
 800d718:	e000      	b.n	800d71c <USB_HC_Halt+0x22a>
          break;
 800d71a:	bf00      	nop
    }
  }

  return HAL_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3724      	adds	r7, #36	; 0x24
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
	...

0800d72c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b087      	sub	sp, #28
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	460b      	mov	r3, r1
 800d736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d73c:	78fb      	ldrb	r3, [r7, #3]
 800d73e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d740:	2301      	movs	r3, #1
 800d742:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	04da      	lsls	r2, r3, #19
 800d748:	4b15      	ldr	r3, [pc, #84]	; (800d7a0 <USB_DoPing+0x74>)
 800d74a:	4013      	ands	r3, r2
 800d74c:	693a      	ldr	r2, [r7, #16]
 800d74e:	0151      	lsls	r1, r2, #5
 800d750:	697a      	ldr	r2, [r7, #20]
 800d752:	440a      	add	r2, r1
 800d754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d75c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	015a      	lsls	r2, r3, #5
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	4413      	add	r3, r2
 800d766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d774:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d77c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	015a      	lsls	r2, r3, #5
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	4413      	add	r3, r2
 800d786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d78a:	461a      	mov	r2, r3
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	371c      	adds	r7, #28
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop
 800d7a0:	1ff80000 	.word	0x1ff80000

0800d7a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b086      	sub	sp, #24
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7ff f98c 	bl	800cad2 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d7ba:	2110      	movs	r1, #16
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f7ff f9c3 	bl	800cb48 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f7ff f9e6 	bl	800cb94 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	613b      	str	r3, [r7, #16]
 800d7cc:	e01f      	b.n	800d80e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	015a      	lsls	r2, r3, #5
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d7e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d7ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d7f4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	015a      	lsls	r2, r3, #5
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d802:	461a      	mov	r2, r3
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	3301      	adds	r3, #1
 800d80c:	613b      	str	r3, [r7, #16]
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	2b0f      	cmp	r3, #15
 800d812:	d9dc      	bls.n	800d7ce <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d814:	2300      	movs	r3, #0
 800d816:	613b      	str	r3, [r7, #16]
 800d818:	e034      	b.n	800d884 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	015a      	lsls	r2, r3, #5
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	4413      	add	r3, r2
 800d822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d830:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d838:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d840:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	015a      	lsls	r2, r3, #5
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	4413      	add	r3, r2
 800d84a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d84e:	461a      	mov	r2, r3
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	3301      	adds	r3, #1
 800d858:	617b      	str	r3, [r7, #20]
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d860:	d80c      	bhi.n	800d87c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	015a      	lsls	r2, r3, #5
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	4413      	add	r3, r2
 800d86a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d878:	d0ec      	beq.n	800d854 <USB_StopHost+0xb0>
 800d87a:	e000      	b.n	800d87e <USB_StopHost+0xda>
        break;
 800d87c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	3301      	adds	r3, #1
 800d882:	613b      	str	r3, [r7, #16]
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	2b0f      	cmp	r3, #15
 800d888:	d9c7      	bls.n	800d81a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d890:	461a      	mov	r2, r3
 800d892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d896:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d89e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f7ff f905 	bl	800cab0 <USB_EnableGlobalInt>

  return HAL_OK;
 800d8a6:	2300      	movs	r3, #0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3718      	adds	r7, #24
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800d8b6:	2100      	movs	r1, #0
 800d8b8:	2000      	movs	r0, #0
 800d8ba:	f006 ff47 	bl	801474c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800d8be:	4b2a      	ldr	r3, [pc, #168]	; (800d968 <MX_LWIP_Init+0xb8>)
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800d8c4:	4b29      	ldr	r3, [pc, #164]	; (800d96c <MX_LWIP_Init+0xbc>)
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800d8ca:	4b29      	ldr	r3, [pc, #164]	; (800d970 <MX_LWIP_Init+0xc0>)
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800d8d0:	4b28      	ldr	r3, [pc, #160]	; (800d974 <MX_LWIP_Init+0xc4>)
 800d8d2:	9302      	str	r3, [sp, #8]
 800d8d4:	4b28      	ldr	r3, [pc, #160]	; (800d978 <MX_LWIP_Init+0xc8>)
 800d8d6:	9301      	str	r3, [sp, #4]
 800d8d8:	2300      	movs	r3, #0
 800d8da:	9300      	str	r3, [sp, #0]
 800d8dc:	4b24      	ldr	r3, [pc, #144]	; (800d970 <MX_LWIP_Init+0xc0>)
 800d8de:	4a23      	ldr	r2, [pc, #140]	; (800d96c <MX_LWIP_Init+0xbc>)
 800d8e0:	4921      	ldr	r1, [pc, #132]	; (800d968 <MX_LWIP_Init+0xb8>)
 800d8e2:	4826      	ldr	r0, [pc, #152]	; (800d97c <MX_LWIP_Init+0xcc>)
 800d8e4:	f007 fcb6 	bl	8015254 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800d8e8:	4824      	ldr	r0, [pc, #144]	; (800d97c <MX_LWIP_Init+0xcc>)
 800d8ea:	f007 fe77 	bl	80155dc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800d8ee:	4b23      	ldr	r3, [pc, #140]	; (800d97c <MX_LWIP_Init+0xcc>)
 800d8f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d8f4:	089b      	lsrs	r3, r3, #2
 800d8f6:	f003 0301 	and.w	r3, r3, #1
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d003      	beq.n	800d908 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800d900:	481e      	ldr	r0, [pc, #120]	; (800d97c <MX_LWIP_Init+0xcc>)
 800d902:	f007 fe7b 	bl	80155fc <netif_set_up>
 800d906:	e002      	b.n	800d90e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800d908:	481c      	ldr	r0, [pc, #112]	; (800d97c <MX_LWIP_Init+0xcc>)
 800d90a:	f007 feeb 	bl	80156e4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800d90e:	491c      	ldr	r1, [pc, #112]	; (800d980 <MX_LWIP_Init+0xd0>)
 800d910:	481a      	ldr	r0, [pc, #104]	; (800d97c <MX_LWIP_Init+0xcc>)
 800d912:	f007 ff89 	bl	8015828 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800d916:	2200      	movs	r2, #0
 800d918:	2101      	movs	r1, #1
 800d91a:	2001      	movs	r0, #1
 800d91c:	f003 f884 	bl	8010a28 <osSemaphoreNew>
 800d920:	4602      	mov	r2, r0
 800d922:	4b18      	ldr	r3, [pc, #96]	; (800d984 <MX_LWIP_Init+0xd4>)
 800d924:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 800d926:	4b18      	ldr	r3, [pc, #96]	; (800d988 <MX_LWIP_Init+0xd8>)
 800d928:	4a14      	ldr	r2, [pc, #80]	; (800d97c <MX_LWIP_Init+0xcc>)
 800d92a:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800d92c:	4b15      	ldr	r3, [pc, #84]	; (800d984 <MX_LWIP_Init+0xd4>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4a15      	ldr	r2, [pc, #84]	; (800d988 <MX_LWIP_Init+0xd8>)
 800d932:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800d934:	2224      	movs	r2, #36	; 0x24
 800d936:	2100      	movs	r1, #0
 800d938:	4814      	ldr	r0, [pc, #80]	; (800d98c <MX_LWIP_Init+0xdc>)
 800d93a:	f013 fd41 	bl	80213c0 <memset>
  attributes.name = "LinkThr";
 800d93e:	4b13      	ldr	r3, [pc, #76]	; (800d98c <MX_LWIP_Init+0xdc>)
 800d940:	4a13      	ldr	r2, [pc, #76]	; (800d990 <MX_LWIP_Init+0xe0>)
 800d942:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800d944:	4b11      	ldr	r3, [pc, #68]	; (800d98c <MX_LWIP_Init+0xdc>)
 800d946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d94a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800d94c:	4b0f      	ldr	r3, [pc, #60]	; (800d98c <MX_LWIP_Init+0xdc>)
 800d94e:	2210      	movs	r2, #16
 800d950:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800d952:	4a0e      	ldr	r2, [pc, #56]	; (800d98c <MX_LWIP_Init+0xdc>)
 800d954:	490c      	ldr	r1, [pc, #48]	; (800d988 <MX_LWIP_Init+0xd8>)
 800d956:	480f      	ldr	r0, [pc, #60]	; (800d994 <MX_LWIP_Init+0xe4>)
 800d958:	f002 fe0a 	bl	8010570 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800d95c:	4807      	ldr	r0, [pc, #28]	; (800d97c <MX_LWIP_Init+0xcc>)
 800d95e:	f00f f8c5 	bl	801caec <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800d962:	bf00      	nop
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	20009aa4 	.word	0x20009aa4
 800d96c:	20009aa8 	.word	0x20009aa8
 800d970:	20009aac 	.word	0x20009aac
 800d974:	08014689 	.word	0x08014689
 800d978:	0800dfa9 	.word	0x0800dfa9
 800d97c:	20009a68 	.word	0x20009a68
 800d980:	0800e08d 	.word	0x0800e08d
 800d984:	20000254 	.word	0x20000254
 800d988:	20009a3c 	.word	0x20009a3c
 800d98c:	20009a44 	.word	0x20009a44
 800d990:	0802235c 	.word	0x0802235c
 800d994:	0800e015 	.word	0x0800e015

0800d998 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b08e      	sub	sp, #56	; 0x38
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	601a      	str	r2, [r3, #0]
 800d9a8:	605a      	str	r2, [r3, #4]
 800d9aa:	609a      	str	r2, [r3, #8]
 800d9ac:	60da      	str	r2, [r3, #12]
 800d9ae:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4a44      	ldr	r2, [pc, #272]	; (800dac8 <HAL_ETH_MspInit+0x130>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	f040 8081 	bne.w	800dabe <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800d9bc:	4b43      	ldr	r3, [pc, #268]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800d9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9c0:	4a42      	ldr	r2, [pc, #264]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800d9c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d9c6:	6313      	str	r3, [r2, #48]	; 0x30
 800d9c8:	4b40      	ldr	r3, [pc, #256]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800d9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d9d0:	623b      	str	r3, [r7, #32]
 800d9d2:	6a3b      	ldr	r3, [r7, #32]
 800d9d4:	4b3d      	ldr	r3, [pc, #244]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800d9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d8:	4a3c      	ldr	r2, [pc, #240]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800d9da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d9de:	6313      	str	r3, [r2, #48]	; 0x30
 800d9e0:	4b3a      	ldr	r3, [pc, #232]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800d9e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d9e8:	61fb      	str	r3, [r7, #28]
 800d9ea:	69fb      	ldr	r3, [r7, #28]
 800d9ec:	4b37      	ldr	r3, [pc, #220]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800d9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9f0:	4a36      	ldr	r2, [pc, #216]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800d9f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d9f6:	6313      	str	r3, [r2, #48]	; 0x30
 800d9f8:	4b34      	ldr	r3, [pc, #208]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800d9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da00:	61bb      	str	r3, [r7, #24]
 800da02:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800da04:	4b31      	ldr	r3, [pc, #196]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800da06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da08:	4a30      	ldr	r2, [pc, #192]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800da0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da0e:	6313      	str	r3, [r2, #48]	; 0x30
 800da10:	4b2e      	ldr	r3, [pc, #184]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800da12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da18:	617b      	str	r3, [r7, #20]
 800da1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800da1c:	4b2b      	ldr	r3, [pc, #172]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800da1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da20:	4a2a      	ldr	r2, [pc, #168]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800da22:	f043 0304 	orr.w	r3, r3, #4
 800da26:	6313      	str	r3, [r2, #48]	; 0x30
 800da28:	4b28      	ldr	r3, [pc, #160]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800da2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da2c:	f003 0304 	and.w	r3, r3, #4
 800da30:	613b      	str	r3, [r7, #16]
 800da32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da34:	4b25      	ldr	r3, [pc, #148]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800da36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da38:	4a24      	ldr	r2, [pc, #144]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800da3a:	f043 0301 	orr.w	r3, r3, #1
 800da3e:	6313      	str	r3, [r2, #48]	; 0x30
 800da40:	4b22      	ldr	r3, [pc, #136]	; (800dacc <HAL_ETH_MspInit+0x134>)
 800da42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da44:	f003 0301 	and.w	r3, r3, #1
 800da48:	60fb      	str	r3, [r7, #12]
 800da4a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800da4c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800da50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da52:	2302      	movs	r3, #2
 800da54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da56:	2300      	movs	r3, #0
 800da58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da5a:	2303      	movs	r3, #3
 800da5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800da5e:	230b      	movs	r3, #11
 800da60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800da62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da66:	4619      	mov	r1, r3
 800da68:	4819      	ldr	r0, [pc, #100]	; (800dad0 <HAL_ETH_MspInit+0x138>)
 800da6a:	f7f8 fbcb 	bl	8006204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800da6e:	2332      	movs	r3, #50	; 0x32
 800da70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da72:	2302      	movs	r3, #2
 800da74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da76:	2300      	movs	r3, #0
 800da78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da7a:	2303      	movs	r3, #3
 800da7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800da7e:	230b      	movs	r3, #11
 800da80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800da82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da86:	4619      	mov	r1, r3
 800da88:	4812      	ldr	r0, [pc, #72]	; (800dad4 <HAL_ETH_MspInit+0x13c>)
 800da8a:	f7f8 fbbb 	bl	8006204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800da8e:	2386      	movs	r3, #134	; 0x86
 800da90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da92:	2302      	movs	r3, #2
 800da94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da96:	2300      	movs	r3, #0
 800da98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da9a:	2303      	movs	r3, #3
 800da9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800da9e:	230b      	movs	r3, #11
 800daa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800daa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800daa6:	4619      	mov	r1, r3
 800daa8:	480b      	ldr	r0, [pc, #44]	; (800dad8 <HAL_ETH_MspInit+0x140>)
 800daaa:	f7f8 fbab 	bl	8006204 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800daae:	2200      	movs	r2, #0
 800dab0:	2105      	movs	r1, #5
 800dab2:	203d      	movs	r0, #61	; 0x3d
 800dab4:	f7f6 fb3a 	bl	800412c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800dab8:	203d      	movs	r0, #61	; 0x3d
 800daba:	f7f6 fb53 	bl	8004164 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800dabe:	bf00      	nop
 800dac0:	3738      	adds	r7, #56	; 0x38
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	40028000 	.word	0x40028000
 800dacc:	40023800 	.word	0x40023800
 800dad0:	40021800 	.word	0x40021800
 800dad4:	40020800 	.word	0x40020800
 800dad8:	40020000 	.word	0x40020000

0800dadc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800dae4:	4b04      	ldr	r3, [pc, #16]	; (800daf8 <HAL_ETH_RxCpltCallback+0x1c>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4618      	mov	r0, r3
 800daea:	f003 f8a1 	bl	8010c30 <osSemaphoreRelease>
}
 800daee:	bf00      	nop
 800daf0:	3708      	adds	r7, #8
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	20000258 	.word	0x20000258

0800dafc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b090      	sub	sp, #64	; 0x40
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800db04:	2300      	movs	r3, #0
 800db06:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800db08:	4b5d      	ldr	r3, [pc, #372]	; (800dc80 <low_level_init+0x184>)
 800db0a:	4a5e      	ldr	r2, [pc, #376]	; (800dc84 <low_level_init+0x188>)
 800db0c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800db0e:	4b5c      	ldr	r3, [pc, #368]	; (800dc80 <low_level_init+0x184>)
 800db10:	2201      	movs	r2, #1
 800db12:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800db14:	4b5a      	ldr	r3, [pc, #360]	; (800dc80 <low_level_init+0x184>)
 800db16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800db1a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800db1c:	4b58      	ldr	r3, [pc, #352]	; (800dc80 <low_level_init+0x184>)
 800db1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db22:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800db24:	4b56      	ldr	r3, [pc, #344]	; (800dc80 <low_level_init+0x184>)
 800db26:	2200      	movs	r2, #0
 800db28:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800db2a:	2300      	movs	r3, #0
 800db2c:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800db2e:	2380      	movs	r3, #128	; 0x80
 800db30:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800db32:	23e1      	movs	r3, #225	; 0xe1
 800db34:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800db36:	2300      	movs	r3, #0
 800db38:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800db3a:	2300      	movs	r3, #0
 800db3c:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800db3e:	2300      	movs	r3, #0
 800db40:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800db42:	4a4f      	ldr	r2, [pc, #316]	; (800dc80 <low_level_init+0x184>)
 800db44:	f107 030c 	add.w	r3, r7, #12
 800db48:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800db4a:	4b4d      	ldr	r3, [pc, #308]	; (800dc80 <low_level_init+0x184>)
 800db4c:	2201      	movs	r2, #1
 800db4e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800db50:	4b4b      	ldr	r3, [pc, #300]	; (800dc80 <low_level_init+0x184>)
 800db52:	2200      	movs	r2, #0
 800db54:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800db56:	4b4a      	ldr	r3, [pc, #296]	; (800dc80 <low_level_init+0x184>)
 800db58:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800db5c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800db5e:	4848      	ldr	r0, [pc, #288]	; (800dc80 <low_level_init+0x184>)
 800db60:	f7f7 f9ca 	bl	8004ef8 <HAL_ETH_Init>
 800db64:	4603      	mov	r3, r0
 800db66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800db6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d108      	bne.n	800db84 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800db78:	f043 0304 	orr.w	r3, r3, #4
 800db7c:	b2da      	uxtb	r2, r3
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800db84:	2304      	movs	r3, #4
 800db86:	4a40      	ldr	r2, [pc, #256]	; (800dc88 <low_level_init+0x18c>)
 800db88:	4940      	ldr	r1, [pc, #256]	; (800dc8c <low_level_init+0x190>)
 800db8a:	483d      	ldr	r0, [pc, #244]	; (800dc80 <low_level_init+0x184>)
 800db8c:	f7f7 fb50 	bl	8005230 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800db90:	2304      	movs	r3, #4
 800db92:	4a3f      	ldr	r2, [pc, #252]	; (800dc90 <low_level_init+0x194>)
 800db94:	493f      	ldr	r1, [pc, #252]	; (800dc94 <low_level_init+0x198>)
 800db96:	483a      	ldr	r0, [pc, #232]	; (800dc80 <low_level_init+0x184>)
 800db98:	f7f7 fbb3 	bl	8005302 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2206      	movs	r2, #6
 800dba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800dba4:	4b36      	ldr	r3, [pc, #216]	; (800dc80 <low_level_init+0x184>)
 800dba6:	695b      	ldr	r3, [r3, #20]
 800dba8:	781a      	ldrb	r2, [r3, #0]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800dbb0:	4b33      	ldr	r3, [pc, #204]	; (800dc80 <low_level_init+0x184>)
 800dbb2:	695b      	ldr	r3, [r3, #20]
 800dbb4:	785a      	ldrb	r2, [r3, #1]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800dbbc:	4b30      	ldr	r3, [pc, #192]	; (800dc80 <low_level_init+0x184>)
 800dbbe:	695b      	ldr	r3, [r3, #20]
 800dbc0:	789a      	ldrb	r2, [r3, #2]
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800dbc8:	4b2d      	ldr	r3, [pc, #180]	; (800dc80 <low_level_init+0x184>)
 800dbca:	695b      	ldr	r3, [r3, #20]
 800dbcc:	78da      	ldrb	r2, [r3, #3]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800dbd4:	4b2a      	ldr	r3, [pc, #168]	; (800dc80 <low_level_init+0x184>)
 800dbd6:	695b      	ldr	r3, [r3, #20]
 800dbd8:	791a      	ldrb	r2, [r3, #4]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800dbe0:	4b27      	ldr	r3, [pc, #156]	; (800dc80 <low_level_init+0x184>)
 800dbe2:	695b      	ldr	r3, [r3, #20]
 800dbe4:	795a      	ldrb	r2, [r3, #5]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* maximum transfer unit */
  netif->mtu = 1500;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800dbf2:	859a      	strh	r2, [r3, #44]	; 0x2c

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800dbfa:	f043 030a 	orr.w	r3, r3, #10
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800dc06:	2200      	movs	r2, #0
 800dc08:	2101      	movs	r1, #1
 800dc0a:	2001      	movs	r0, #1
 800dc0c:	f002 ff0c 	bl	8010a28 <osSemaphoreNew>
 800dc10:	4602      	mov	r2, r0
 800dc12:	4b21      	ldr	r3, [pc, #132]	; (800dc98 <low_level_init+0x19c>)
 800dc14:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800dc16:	f107 0314 	add.w	r3, r7, #20
 800dc1a:	2224      	movs	r2, #36	; 0x24
 800dc1c:	2100      	movs	r1, #0
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f013 fbce 	bl	80213c0 <memset>
  attributes.name = "EthIf";
 800dc24:	4b1d      	ldr	r3, [pc, #116]	; (800dc9c <low_level_init+0x1a0>)
 800dc26:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800dc28:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800dc2c:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 800dc2e:	2330      	movs	r3, #48	; 0x30
 800dc30:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800dc32:	f107 0314 	add.w	r3, r7, #20
 800dc36:	461a      	mov	r2, r3
 800dc38:	6879      	ldr	r1, [r7, #4]
 800dc3a:	4819      	ldr	r0, [pc, #100]	; (800dca0 <low_level_init+0x1a4>)
 800dc3c:	f002 fc98 	bl	8010570 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800dc40:	480f      	ldr	r0, [pc, #60]	; (800dc80 <low_level_init+0x184>)
 800dc42:	f7f7 fe86 	bl	8005952 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800dc46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	211d      	movs	r1, #29
 800dc4e:	480c      	ldr	r0, [pc, #48]	; (800dc80 <low_level_init+0x184>)
 800dc50:	f7f7 fdb1 	bl	80057b6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800dc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc56:	f043 030b 	orr.w	r3, r3, #11
 800dc5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800dc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5e:	461a      	mov	r2, r3
 800dc60:	211d      	movs	r1, #29
 800dc62:	4807      	ldr	r0, [pc, #28]	; (800dc80 <low_level_init+0x184>)
 800dc64:	f7f7 fe0f 	bl	8005886 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800dc68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	211d      	movs	r1, #29
 800dc70:	4803      	ldr	r0, [pc, #12]	; (800dc80 <low_level_init+0x184>)
 800dc72:	f7f7 fda0 	bl	80057b6 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800dc76:	bf00      	nop
 800dc78:	3740      	adds	r7, #64	; 0x40
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	2000b380 	.word	0x2000b380
 800dc84:	40028000 	.word	0x40028000
 800dc88:	2000b3c8 	.word	0x2000b3c8
 800dc8c:	20009ab0 	.word	0x20009ab0
 800dc90:	20009b30 	.word	0x20009b30
 800dc94:	2000b300 	.word	0x2000b300
 800dc98:	20000258 	.word	0x20000258
 800dc9c:	08022364 	.word	0x08022364
 800dca0:	0800df49 	.word	0x0800df49

0800dca4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b08a      	sub	sp, #40	; 0x28
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800dcae:	4b4b      	ldr	r3, [pc, #300]	; (800dddc <low_level_output+0x138>)
 800dcb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800dcc6:	4b45      	ldr	r3, [pc, #276]	; (800dddc <low_level_output+0x138>)
 800dcc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcca:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800dccc:	2300      	movs	r3, #0
 800dcce:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	623b      	str	r3, [r7, #32]
 800dcd4:	e05a      	b.n	800dd8c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	da03      	bge.n	800dce6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800dcde:	23f8      	movs	r3, #248	; 0xf8
 800dce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800dce4:	e05c      	b.n	800dda0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800dce6:	6a3b      	ldr	r3, [r7, #32]
 800dce8:	895b      	ldrh	r3, [r3, #10]
 800dcea:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800dcec:	2300      	movs	r3, #0
 800dcee:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800dcf0:	e02f      	b.n	800dd52 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800dcf2:	69fa      	ldr	r2, [r7, #28]
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	18d0      	adds	r0, r2, r3
 800dcf8:	6a3b      	ldr	r3, [r7, #32]
 800dcfa:	685a      	ldr	r2, [r3, #4]
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	18d1      	adds	r1, r2, r3
 800dd00:	693a      	ldr	r2, [r7, #16]
 800dd02:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800dd06:	1a9b      	subs	r3, r3, r2
 800dd08:	461a      	mov	r2, r3
 800dd0a:	f013 fb4e 	bl	80213aa <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800dd0e:	69bb      	ldr	r3, [r7, #24]
 800dd10:	68db      	ldr	r3, [r3, #12]
 800dd12:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800dd14:	69bb      	ldr	r3, [r7, #24]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	da03      	bge.n	800dd24 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800dd1c:	23f8      	movs	r3, #248	; 0xf8
 800dd1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800dd22:	e03d      	b.n	800dda0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800dd24:	69bb      	ldr	r3, [r7, #24]
 800dd26:	689b      	ldr	r3, [r3, #8]
 800dd28:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800dd2a:	693a      	ldr	r2, [r7, #16]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	4413      	add	r3, r2
 800dd30:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800dd34:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800dd36:	68ba      	ldr	r2, [r7, #8]
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	1ad3      	subs	r3, r2, r3
 800dd3c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800dd40:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800dd42:	697a      	ldr	r2, [r7, #20]
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	1ad3      	subs	r3, r2, r3
 800dd48:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800dd4c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800dd52:	68fa      	ldr	r2, [r7, #12]
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	4413      	add	r3, r2
 800dd58:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d8c8      	bhi.n	800dcf2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800dd60:	69fa      	ldr	r2, [r7, #28]
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	18d0      	adds	r0, r2, r3
 800dd66:	6a3b      	ldr	r3, [r7, #32]
 800dd68:	685a      	ldr	r2, [r3, #4]
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	68fa      	ldr	r2, [r7, #12]
 800dd70:	4619      	mov	r1, r3
 800dd72:	f013 fb1a 	bl	80213aa <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800dd76:	693a      	ldr	r2, [r7, #16]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	4413      	add	r3, r2
 800dd7c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800dd7e:	697a      	ldr	r2, [r7, #20]
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	4413      	add	r3, r2
 800dd84:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800dd86:	6a3b      	ldr	r3, [r7, #32]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	623b      	str	r3, [r7, #32]
 800dd8c:	6a3b      	ldr	r3, [r7, #32]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d1a1      	bne.n	800dcd6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800dd92:	6979      	ldr	r1, [r7, #20]
 800dd94:	4811      	ldr	r0, [pc, #68]	; (800dddc <low_level_output+0x138>)
 800dd96:	f7f7 fb21 	bl	80053dc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800dda0:	4b0e      	ldr	r3, [pc, #56]	; (800dddc <low_level_output+0x138>)
 800dda2:	681a      	ldr	r2, [r3, #0]
 800dda4:	f241 0314 	movw	r3, #4116	; 0x1014
 800dda8:	4413      	add	r3, r2
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f003 0320 	and.w	r3, r3, #32
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d00d      	beq.n	800ddd0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800ddb4:	4b09      	ldr	r3, [pc, #36]	; (800dddc <low_level_output+0x138>)
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	f241 0314 	movw	r3, #4116	; 0x1014
 800ddbc:	4413      	add	r3, r2
 800ddbe:	2220      	movs	r2, #32
 800ddc0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800ddc2:	4b06      	ldr	r3, [pc, #24]	; (800dddc <low_level_output+0x138>)
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	f241 0304 	movw	r3, #4100	; 0x1004
 800ddca:	4413      	add	r3, r2
 800ddcc:	2200      	movs	r2, #0
 800ddce:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800ddd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3728      	adds	r7, #40	; 0x28
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	2000b380 	.word	0x2000b380

0800dde0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b08c      	sub	sp, #48	; 0x30
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800dde8:	2300      	movs	r3, #0
 800ddea:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800ddec:	2300      	movs	r3, #0
 800ddee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800de00:	2300      	movs	r3, #0
 800de02:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800de04:	484f      	ldr	r0, [pc, #316]	; (800df44 <low_level_input+0x164>)
 800de06:	f7f7 fbd3 	bl	80055b0 <HAL_ETH_GetReceivedFrame_IT>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d001      	beq.n	800de14 <low_level_input+0x34>

    return NULL;
 800de10:	2300      	movs	r3, #0
 800de12:	e092      	b.n	800df3a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800de14:	4b4b      	ldr	r3, [pc, #300]	; (800df44 <low_level_input+0x164>)
 800de16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de18:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800de1a:	4b4a      	ldr	r3, [pc, #296]	; (800df44 <low_level_input+0x164>)
 800de1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800de20:	89fb      	ldrh	r3, [r7, #14]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d007      	beq.n	800de36 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800de26:	89fb      	ldrh	r3, [r7, #14]
 800de28:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800de2c:	4619      	mov	r1, r3
 800de2e:	2000      	movs	r0, #0
 800de30:	f007 fdc4 	bl	80159bc <pbuf_alloc>
 800de34:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800de36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d04b      	beq.n	800ded4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800de3c:	4b41      	ldr	r3, [pc, #260]	; (800df44 <low_level_input+0x164>)
 800de3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de40:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800de42:	2300      	movs	r3, #0
 800de44:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800de46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de48:	62bb      	str	r3, [r7, #40]	; 0x28
 800de4a:	e040      	b.n	800dece <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800de4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4e:	895b      	ldrh	r3, [r3, #10]
 800de50:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800de52:	2300      	movs	r3, #0
 800de54:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800de56:	e021      	b.n	800de9c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800de58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5a:	685a      	ldr	r2, [r3, #4]
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	18d0      	adds	r0, r2, r3
 800de60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	18d1      	adds	r1, r2, r3
 800de66:	69fa      	ldr	r2, [r7, #28]
 800de68:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800de6c:	1a9b      	subs	r3, r3, r2
 800de6e:	461a      	mov	r2, r3
 800de70:	f013 fa9b 	bl	80213aa <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800de74:	6a3b      	ldr	r3, [r7, #32]
 800de76:	68db      	ldr	r3, [r3, #12]
 800de78:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800de7a:	6a3b      	ldr	r3, [r7, #32]
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800de80:	69fa      	ldr	r2, [r7, #28]
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	4413      	add	r3, r2
 800de86:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800de8a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800de8c:	69ba      	ldr	r2, [r7, #24]
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	1ad3      	subs	r3, r2, r3
 800de92:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800de96:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800de98:	2300      	movs	r3, #0
 800de9a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800de9c:	697a      	ldr	r2, [r7, #20]
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	4413      	add	r3, r2
 800dea2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d8d6      	bhi.n	800de58 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800deaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deac:	685a      	ldr	r2, [r3, #4]
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	18d0      	adds	r0, r2, r3
 800deb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	4413      	add	r3, r2
 800deb8:	697a      	ldr	r2, [r7, #20]
 800deba:	4619      	mov	r1, r3
 800debc:	f013 fa75 	bl	80213aa <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800dec0:	69fa      	ldr	r2, [r7, #28]
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	4413      	add	r3, r2
 800dec6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800dec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	62bb      	str	r3, [r7, #40]	; 0x28
 800dece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d1bb      	bne.n	800de4c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800ded4:	4b1b      	ldr	r3, [pc, #108]	; (800df44 <low_level_input+0x164>)
 800ded6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ded8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800deda:	2300      	movs	r3, #0
 800dedc:	613b      	str	r3, [r7, #16]
 800dede:	e00b      	b.n	800def8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800dee0:	6a3b      	ldr	r3, [r7, #32]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800dee8:	6a3b      	ldr	r3, [r7, #32]
 800deea:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800deec:	6a3b      	ldr	r3, [r7, #32]
 800deee:	68db      	ldr	r3, [r3, #12]
 800def0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	3301      	adds	r3, #1
 800def6:	613b      	str	r3, [r7, #16]
 800def8:	4b12      	ldr	r3, [pc, #72]	; (800df44 <low_level_input+0x164>)
 800defa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800defc:	693a      	ldr	r2, [r7, #16]
 800defe:	429a      	cmp	r2, r3
 800df00:	d3ee      	bcc.n	800dee0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800df02:	4b10      	ldr	r3, [pc, #64]	; (800df44 <low_level_input+0x164>)
 800df04:	2200      	movs	r2, #0
 800df06:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800df08:	4b0e      	ldr	r3, [pc, #56]	; (800df44 <low_level_input+0x164>)
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	f241 0314 	movw	r3, #4116	; 0x1014
 800df10:	4413      	add	r3, r2
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d00d      	beq.n	800df38 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800df1c:	4b09      	ldr	r3, [pc, #36]	; (800df44 <low_level_input+0x164>)
 800df1e:	681a      	ldr	r2, [r3, #0]
 800df20:	f241 0314 	movw	r3, #4116	; 0x1014
 800df24:	4413      	add	r3, r2
 800df26:	2280      	movs	r2, #128	; 0x80
 800df28:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800df2a:	4b06      	ldr	r3, [pc, #24]	; (800df44 <low_level_input+0x164>)
 800df2c:	681a      	ldr	r2, [r3, #0]
 800df2e:	f241 0308 	movw	r3, #4104	; 0x1008
 800df32:	4413      	add	r3, r2
 800df34:	2200      	movs	r2, #0
 800df36:	601a      	str	r2, [r3, #0]
  }
  return p;
 800df38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3730      	adds	r7, #48	; 0x30
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	2000b380 	.word	0x2000b380

0800df48 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800df54:	4b12      	ldr	r3, [pc, #72]	; (800dfa0 <ethernetif_input+0x58>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800df5c:	4618      	mov	r0, r3
 800df5e:	f002 fe01 	bl	8010b64 <osSemaphoreAcquire>
 800df62:	4603      	mov	r3, r0
 800df64:	2b00      	cmp	r3, #0
 800df66:	d1f5      	bne.n	800df54 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800df68:	480e      	ldr	r0, [pc, #56]	; (800dfa4 <ethernetif_input+0x5c>)
 800df6a:	f012 fc59 	bl	8020820 <sys_mutex_lock>
        p = low_level_input( netif );
 800df6e:	68f8      	ldr	r0, [r7, #12]
 800df70:	f7ff ff36 	bl	800dde0 <low_level_input>
 800df74:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00a      	beq.n	800df92 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	691b      	ldr	r3, [r3, #16]
 800df80:	68f9      	ldr	r1, [r7, #12]
 800df82:	68b8      	ldr	r0, [r7, #8]
 800df84:	4798      	blx	r3
 800df86:	4603      	mov	r3, r0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d002      	beq.n	800df92 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800df8c:	68b8      	ldr	r0, [r7, #8]
 800df8e:	f007 fff5 	bl	8015f7c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800df92:	4804      	ldr	r0, [pc, #16]	; (800dfa4 <ethernetif_input+0x5c>)
 800df94:	f012 fc53 	bl	802083e <sys_mutex_unlock>
      } while(p!=NULL);
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d1e4      	bne.n	800df68 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800df9e:	e7d9      	b.n	800df54 <ethernetif_input+0xc>
 800dfa0:	20000258 	.word	0x20000258
 800dfa4:	2000cbfc 	.word	0x2000cbfc

0800dfa8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d106      	bne.n	800dfc4 <ethernetif_init+0x1c>
 800dfb6:	4b0e      	ldr	r3, [pc, #56]	; (800dff0 <ethernetif_init+0x48>)
 800dfb8:	f44f 720c 	mov.w	r2, #560	; 0x230
 800dfbc:	490d      	ldr	r1, [pc, #52]	; (800dff4 <ethernetif_init+0x4c>)
 800dfbe:	480e      	ldr	r0, [pc, #56]	; (800dff8 <ethernetif_init+0x50>)
 800dfc0:	f013 faae 	bl	8021520 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2273      	movs	r2, #115	; 0x73
 800dfc8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  netif->name[1] = IFNAME1;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2274      	movs	r2, #116	; 0x74
 800dfd0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	4a09      	ldr	r2, [pc, #36]	; (800dffc <ethernetif_init+0x54>)
 800dfd8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	4a08      	ldr	r2, [pc, #32]	; (800e000 <ethernetif_init+0x58>)
 800dfde:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f7ff fd8b 	bl	800dafc <low_level_init>

  return ERR_OK;
 800dfe6:	2300      	movs	r3, #0
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3708      	adds	r7, #8
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	0802236c 	.word	0x0802236c
 800dff4:	08022388 	.word	0x08022388
 800dff8:	08022398 	.word	0x08022398
 800dffc:	0801e9d9 	.word	0x0801e9d9
 800e000:	0800dca5 	.word	0x0800dca5

0800e004 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e008:	f7f5 fd22 	bl	8003a50 <HAL_GetTick>
 800e00c:	4603      	mov	r3, r0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	bd80      	pop	{r7, pc}
	...

0800e014 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800e01c:	2300      	movs	r3, #0
 800e01e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800e024:	f107 0308 	add.w	r3, r7, #8
 800e028:	461a      	mov	r2, r3
 800e02a:	2101      	movs	r1, #1
 800e02c:	4816      	ldr	r0, [pc, #88]	; (800e088 <ethernetif_set_link+0x74>)
 800e02e:	f7f7 fbc2 	bl	80057b6 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	f003 0304 	and.w	r3, r3, #4
 800e038:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e042:	f003 0304 	and.w	r3, r3, #4
 800e046:	2b00      	cmp	r3, #0
 800e048:	d108      	bne.n	800e05c <ethernetif_set_link+0x48>
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d005      	beq.n	800e05c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4618      	mov	r0, r3
 800e056:	f007 fb7f 	bl	8015758 <netif_set_link_up>
 800e05a:	e011      	b.n	800e080 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e064:	089b      	lsrs	r3, r3, #2
 800e066:	f003 0301 	and.w	r3, r3, #1
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d007      	beq.n	800e080 <ethernetif_set_link+0x6c>
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d104      	bne.n	800e080 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f007 fba4 	bl	80157c8 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800e080:	20c8      	movs	r0, #200	; 0xc8
 800e082:	f002 fb5b 	bl	801073c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800e086:	e7cd      	b.n	800e024 <ethernetif_set_link+0x10>
 800e088:	2000b380 	.word	0x2000b380

0800e08c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800e094:	2300      	movs	r3, #0
 800e096:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800e098:	2300      	movs	r3, #0
 800e09a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e0a2:	089b      	lsrs	r3, r3, #2
 800e0a4:	f003 0301 	and.w	r3, r3, #1
 800e0a8:	b2db      	uxtb	r3, r3
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d05d      	beq.n	800e16a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800e0ae:	4b34      	ldr	r3, [pc, #208]	; (800e180 <ethernetif_update_config+0xf4>)
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d03f      	beq.n	800e136 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800e0b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e0ba:	2100      	movs	r1, #0
 800e0bc:	4830      	ldr	r0, [pc, #192]	; (800e180 <ethernetif_update_config+0xf4>)
 800e0be:	f7f7 fbe2 	bl	8005886 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800e0c2:	f7f5 fcc5 	bl	8003a50 <HAL_GetTick>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800e0ca:	f107 0308 	add.w	r3, r7, #8
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	2101      	movs	r1, #1
 800e0d2:	482b      	ldr	r0, [pc, #172]	; (800e180 <ethernetif_update_config+0xf4>)
 800e0d4:	f7f7 fb6f 	bl	80057b6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800e0d8:	f7f5 fcba 	bl	8003a50 <HAL_GetTick>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	1ad3      	subs	r3, r2, r3
 800e0e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e0e6:	d828      	bhi.n	800e13a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	f003 0320 	and.w	r3, r3, #32
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d0eb      	beq.n	800e0ca <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800e0f2:	f107 0308 	add.w	r3, r7, #8
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	211f      	movs	r1, #31
 800e0fa:	4821      	ldr	r0, [pc, #132]	; (800e180 <ethernetif_update_config+0xf4>)
 800e0fc:	f7f7 fb5b 	bl	80057b6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	f003 0310 	and.w	r3, r3, #16
 800e106:	2b00      	cmp	r3, #0
 800e108:	d004      	beq.n	800e114 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800e10a:	4b1d      	ldr	r3, [pc, #116]	; (800e180 <ethernetif_update_config+0xf4>)
 800e10c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e110:	60da      	str	r2, [r3, #12]
 800e112:	e002      	b.n	800e11a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800e114:	4b1a      	ldr	r3, [pc, #104]	; (800e180 <ethernetif_update_config+0xf4>)
 800e116:	2200      	movs	r2, #0
 800e118:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	f003 0304 	and.w	r3, r3, #4
 800e120:	2b00      	cmp	r3, #0
 800e122:	d003      	beq.n	800e12c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800e124:	4b16      	ldr	r3, [pc, #88]	; (800e180 <ethernetif_update_config+0xf4>)
 800e126:	2200      	movs	r2, #0
 800e128:	609a      	str	r2, [r3, #8]
 800e12a:	e016      	b.n	800e15a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800e12c:	4b14      	ldr	r3, [pc, #80]	; (800e180 <ethernetif_update_config+0xf4>)
 800e12e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e132:	609a      	str	r2, [r3, #8]
 800e134:	e011      	b.n	800e15a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800e136:	bf00      	nop
 800e138:	e000      	b.n	800e13c <ethernetif_update_config+0xb0>
          goto error;
 800e13a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800e13c:	4b10      	ldr	r3, [pc, #64]	; (800e180 <ethernetif_update_config+0xf4>)
 800e13e:	68db      	ldr	r3, [r3, #12]
 800e140:	08db      	lsrs	r3, r3, #3
 800e142:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800e144:	4b0e      	ldr	r3, [pc, #56]	; (800e180 <ethernetif_update_config+0xf4>)
 800e146:	689b      	ldr	r3, [r3, #8]
 800e148:	085b      	lsrs	r3, r3, #1
 800e14a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800e14c:	4313      	orrs	r3, r2
 800e14e:	b29b      	uxth	r3, r3
 800e150:	461a      	mov	r2, r3
 800e152:	2100      	movs	r1, #0
 800e154:	480a      	ldr	r0, [pc, #40]	; (800e180 <ethernetif_update_config+0xf4>)
 800e156:	f7f7 fb96 	bl	8005886 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800e15a:	2100      	movs	r1, #0
 800e15c:	4808      	ldr	r0, [pc, #32]	; (800e180 <ethernetif_update_config+0xf4>)
 800e15e:	f7f7 fc57 	bl	8005a10 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800e162:	4807      	ldr	r0, [pc, #28]	; (800e180 <ethernetif_update_config+0xf4>)
 800e164:	f7f7 fbf5 	bl	8005952 <HAL_ETH_Start>
 800e168:	e002      	b.n	800e170 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800e16a:	4805      	ldr	r0, [pc, #20]	; (800e180 <ethernetif_update_config+0xf4>)
 800e16c:	f7f7 fc20 	bl	80059b0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f000 f807 	bl	800e184 <ethernetif_notify_conn_changed>
}
 800e176:	bf00      	nop
 800e178:	3710      	adds	r7, #16
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	2000b380 	.word	0x2000b380

0800e184 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800e184:	b480      	push	{r7}
 800e186:	b083      	sub	sp, #12
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800e18c:	bf00      	nop
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e198:	b590      	push	{r4, r7, lr}
 800e19a:	b089      	sub	sp, #36	; 0x24
 800e19c:	af04      	add	r7, sp, #16
 800e19e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	2202      	movs	r2, #2
 800e1a4:	2102      	movs	r1, #2
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f000 fcb4 	bl	800eb14 <USBH_FindInterface>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e1b0:	7bfb      	ldrb	r3, [r7, #15]
 800e1b2:	2bff      	cmp	r3, #255	; 0xff
 800e1b4:	d002      	beq.n	800e1bc <USBH_CDC_InterfaceInit+0x24>
 800e1b6:	7bfb      	ldrb	r3, [r7, #15]
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d901      	bls.n	800e1c0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e1bc:	2302      	movs	r3, #2
 800e1be:	e13d      	b.n	800e43c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e1c0:	7bfb      	ldrb	r3, [r7, #15]
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f000 fc89 	bl	800eadc <USBH_SelectInterface>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e1ce:	7bbb      	ldrb	r3, [r7, #14]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d001      	beq.n	800e1d8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e1d4:	2302      	movs	r3, #2
 800e1d6:	e131      	b.n	800e43c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800e1de:	2050      	movs	r0, #80	; 0x50
 800e1e0:	f013 f8c4 	bl	802136c <malloc>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1ee:	69db      	ldr	r3, [r3, #28]
 800e1f0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d101      	bne.n	800e1fc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e1f8:	2302      	movs	r3, #2
 800e1fa:	e11f      	b.n	800e43c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e1fc:	2250      	movs	r2, #80	; 0x50
 800e1fe:	2100      	movs	r1, #0
 800e200:	68b8      	ldr	r0, [r7, #8]
 800e202:	f013 f8dd 	bl	80213c0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e206:	7bfb      	ldrb	r3, [r7, #15]
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	211a      	movs	r1, #26
 800e20c:	fb01 f303 	mul.w	r3, r1, r3
 800e210:	4413      	add	r3, r2
 800e212:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	b25b      	sxtb	r3, r3
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	da15      	bge.n	800e24a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e21e:	7bfb      	ldrb	r3, [r7, #15]
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	211a      	movs	r1, #26
 800e224:	fb01 f303 	mul.w	r3, r1, r3
 800e228:	4413      	add	r3, r2
 800e22a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e22e:	781a      	ldrb	r2, [r3, #0]
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e234:	7bfb      	ldrb	r3, [r7, #15]
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	211a      	movs	r1, #26
 800e23a:	fb01 f303 	mul.w	r3, r1, r3
 800e23e:	4413      	add	r3, r2
 800e240:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e244:	881a      	ldrh	r2, [r3, #0]
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	785b      	ldrb	r3, [r3, #1]
 800e24e:	4619      	mov	r1, r3
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f002 f890 	bl	8010376 <USBH_AllocPipe>
 800e256:	4603      	mov	r3, r0
 800e258:	461a      	mov	r2, r3
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	7819      	ldrb	r1, [r3, #0]
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	7858      	ldrb	r0, [r3, #1]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	8952      	ldrh	r2, [r2, #10]
 800e276:	9202      	str	r2, [sp, #8]
 800e278:	2203      	movs	r2, #3
 800e27a:	9201      	str	r2, [sp, #4]
 800e27c:	9300      	str	r3, [sp, #0]
 800e27e:	4623      	mov	r3, r4
 800e280:	4602      	mov	r2, r0
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f002 f848 	bl	8010318 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	2200      	movs	r2, #0
 800e28e:	4619      	mov	r1, r3
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f012 fd8f 	bl	8020db4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e296:	2300      	movs	r3, #0
 800e298:	2200      	movs	r2, #0
 800e29a:	210a      	movs	r1, #10
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f000 fc39 	bl	800eb14 <USBH_FindInterface>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e2a6:	7bfb      	ldrb	r3, [r7, #15]
 800e2a8:	2bff      	cmp	r3, #255	; 0xff
 800e2aa:	d002      	beq.n	800e2b2 <USBH_CDC_InterfaceInit+0x11a>
 800e2ac:	7bfb      	ldrb	r3, [r7, #15]
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d901      	bls.n	800e2b6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e2b2:	2302      	movs	r3, #2
 800e2b4:	e0c2      	b.n	800e43c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e2b6:	7bfb      	ldrb	r3, [r7, #15]
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	211a      	movs	r1, #26
 800e2bc:	fb01 f303 	mul.w	r3, r1, r3
 800e2c0:	4413      	add	r3, r2
 800e2c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	b25b      	sxtb	r3, r3
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	da16      	bge.n	800e2fc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e2ce:	7bfb      	ldrb	r3, [r7, #15]
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	211a      	movs	r1, #26
 800e2d4:	fb01 f303 	mul.w	r3, r1, r3
 800e2d8:	4413      	add	r3, r2
 800e2da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e2de:	781a      	ldrb	r2, [r3, #0]
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e2e4:	7bfb      	ldrb	r3, [r7, #15]
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	211a      	movs	r1, #26
 800e2ea:	fb01 f303 	mul.w	r3, r1, r3
 800e2ee:	4413      	add	r3, r2
 800e2f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e2f4:	881a      	ldrh	r2, [r3, #0]
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	835a      	strh	r2, [r3, #26]
 800e2fa:	e015      	b.n	800e328 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e2fc:	7bfb      	ldrb	r3, [r7, #15]
 800e2fe:	687a      	ldr	r2, [r7, #4]
 800e300:	211a      	movs	r1, #26
 800e302:	fb01 f303 	mul.w	r3, r1, r3
 800e306:	4413      	add	r3, r2
 800e308:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e30c:	781a      	ldrb	r2, [r3, #0]
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e312:	7bfb      	ldrb	r3, [r7, #15]
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	211a      	movs	r1, #26
 800e318:	fb01 f303 	mul.w	r3, r1, r3
 800e31c:	4413      	add	r3, r2
 800e31e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e322:	881a      	ldrh	r2, [r3, #0]
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e328:	7bfb      	ldrb	r3, [r7, #15]
 800e32a:	687a      	ldr	r2, [r7, #4]
 800e32c:	211a      	movs	r1, #26
 800e32e:	fb01 f303 	mul.w	r3, r1, r3
 800e332:	4413      	add	r3, r2
 800e334:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	b25b      	sxtb	r3, r3
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	da16      	bge.n	800e36e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e340:	7bfb      	ldrb	r3, [r7, #15]
 800e342:	687a      	ldr	r2, [r7, #4]
 800e344:	211a      	movs	r1, #26
 800e346:	fb01 f303 	mul.w	r3, r1, r3
 800e34a:	4413      	add	r3, r2
 800e34c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e350:	781a      	ldrb	r2, [r3, #0]
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e356:	7bfb      	ldrb	r3, [r7, #15]
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	211a      	movs	r1, #26
 800e35c:	fb01 f303 	mul.w	r3, r1, r3
 800e360:	4413      	add	r3, r2
 800e362:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e366:	881a      	ldrh	r2, [r3, #0]
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	835a      	strh	r2, [r3, #26]
 800e36c:	e015      	b.n	800e39a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e36e:	7bfb      	ldrb	r3, [r7, #15]
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	211a      	movs	r1, #26
 800e374:	fb01 f303 	mul.w	r3, r1, r3
 800e378:	4413      	add	r3, r2
 800e37a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e37e:	781a      	ldrb	r2, [r3, #0]
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e384:	7bfb      	ldrb	r3, [r7, #15]
 800e386:	687a      	ldr	r2, [r7, #4]
 800e388:	211a      	movs	r1, #26
 800e38a:	fb01 f303 	mul.w	r3, r1, r3
 800e38e:	4413      	add	r3, r2
 800e390:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e394:	881a      	ldrh	r2, [r3, #0]
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	7b9b      	ldrb	r3, [r3, #14]
 800e39e:	4619      	mov	r1, r3
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f001 ffe8 	bl	8010376 <USBH_AllocPipe>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	7bdb      	ldrb	r3, [r3, #15]
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f001 ffde 	bl	8010376 <USBH_AllocPipe>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	461a      	mov	r2, r3
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	7b59      	ldrb	r1, [r3, #13]
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	7b98      	ldrb	r0, [r3, #14]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e3d6:	68ba      	ldr	r2, [r7, #8]
 800e3d8:	8b12      	ldrh	r2, [r2, #24]
 800e3da:	9202      	str	r2, [sp, #8]
 800e3dc:	2202      	movs	r2, #2
 800e3de:	9201      	str	r2, [sp, #4]
 800e3e0:	9300      	str	r3, [sp, #0]
 800e3e2:	4623      	mov	r3, r4
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f001 ff96 	bl	8010318 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	7b19      	ldrb	r1, [r3, #12]
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	7bd8      	ldrb	r0, [r3, #15]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e400:	68ba      	ldr	r2, [r7, #8]
 800e402:	8b52      	ldrh	r2, [r2, #26]
 800e404:	9202      	str	r2, [sp, #8]
 800e406:	2202      	movs	r2, #2
 800e408:	9201      	str	r2, [sp, #4]
 800e40a:	9300      	str	r3, [sp, #0]
 800e40c:	4623      	mov	r3, r4
 800e40e:	4602      	mov	r2, r0
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f001 ff81 	bl	8010318 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	2200      	movs	r2, #0
 800e41a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	7b5b      	ldrb	r3, [r3, #13]
 800e422:	2200      	movs	r2, #0
 800e424:	4619      	mov	r1, r3
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f012 fcc4 	bl	8020db4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	7b1b      	ldrb	r3, [r3, #12]
 800e430:	2200      	movs	r2, #0
 800e432:	4619      	mov	r1, r3
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f012 fcbd 	bl	8020db4 <USBH_LL_SetToggle>

  return USBH_OK;
 800e43a:	2300      	movs	r3, #0
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3714      	adds	r7, #20
 800e440:	46bd      	mov	sp, r7
 800e442:	bd90      	pop	{r4, r7, pc}

0800e444 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b084      	sub	sp, #16
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e452:	69db      	ldr	r3, [r3, #28]
 800e454:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d00e      	beq.n	800e47c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	4619      	mov	r1, r3
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f001 ff76 	bl	8010356 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	4619      	mov	r1, r3
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f001 ffa1 	bl	80103b8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2200      	movs	r2, #0
 800e47a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	7b1b      	ldrb	r3, [r3, #12]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d00e      	beq.n	800e4a2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	7b1b      	ldrb	r3, [r3, #12]
 800e488:	4619      	mov	r1, r3
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f001 ff63 	bl	8010356 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	7b1b      	ldrb	r3, [r3, #12]
 800e494:	4619      	mov	r1, r3
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f001 ff8e 	bl	80103b8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	7b5b      	ldrb	r3, [r3, #13]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00e      	beq.n	800e4c8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	7b5b      	ldrb	r3, [r3, #13]
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f001 ff50 	bl	8010356 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	7b5b      	ldrb	r3, [r3, #13]
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f001 ff7b 	bl	80103b8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4ce:	69db      	ldr	r3, [r3, #28]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d00b      	beq.n	800e4ec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4da:	69db      	ldr	r3, [r3, #28]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f012 ff4d 	bl	802137c <free>
    phost->pActiveClass->pData = 0U;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e4ec:	2300      	movs	r3, #0
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3710      	adds	r7, #16
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}

0800e4f6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	b084      	sub	sp, #16
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e504:	69db      	ldr	r3, [r3, #28]
 800e506:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	3340      	adds	r3, #64	; 0x40
 800e50c:	4619      	mov	r1, r3
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 f8b1 	bl	800e676 <GetLineCoding>
 800e514:	4603      	mov	r3, r0
 800e516:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e518:	7afb      	ldrb	r3, [r7, #11]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d105      	bne.n	800e52a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e524:	2102      	movs	r1, #2
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e52a:	7afb      	ldrb	r3, [r7, #11]
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3710      	adds	r7, #16
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}

0800e534 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e53c:	2301      	movs	r3, #1
 800e53e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e540:	2300      	movs	r3, #0
 800e542:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e54a:	69db      	ldr	r3, [r3, #28]
 800e54c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e554:	2b04      	cmp	r3, #4
 800e556:	d877      	bhi.n	800e648 <USBH_CDC_Process+0x114>
 800e558:	a201      	add	r2, pc, #4	; (adr r2, 800e560 <USBH_CDC_Process+0x2c>)
 800e55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e55e:	bf00      	nop
 800e560:	0800e575 	.word	0x0800e575
 800e564:	0800e57b 	.word	0x0800e57b
 800e568:	0800e5ab 	.word	0x0800e5ab
 800e56c:	0800e61f 	.word	0x0800e61f
 800e570:	0800e62d 	.word	0x0800e62d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e574:	2300      	movs	r3, #0
 800e576:	73fb      	strb	r3, [r7, #15]
      break;
 800e578:	e06d      	b.n	800e656 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e57e:	4619      	mov	r1, r3
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 f897 	bl	800e6b4 <SetLineCoding>
 800e586:	4603      	mov	r3, r0
 800e588:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e58a:	7bbb      	ldrb	r3, [r7, #14]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d104      	bne.n	800e59a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	2202      	movs	r2, #2
 800e594:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e598:	e058      	b.n	800e64c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e59a:	7bbb      	ldrb	r3, [r7, #14]
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d055      	beq.n	800e64c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	2204      	movs	r2, #4
 800e5a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e5a8:	e050      	b.n	800e64c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	3340      	adds	r3, #64	; 0x40
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f000 f860 	bl	800e676 <GetLineCoding>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e5ba:	7bbb      	ldrb	r3, [r7, #14]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d126      	bne.n	800e60e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5d2:	791b      	ldrb	r3, [r3, #4]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d13b      	bne.n	800e650 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5e2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d133      	bne.n	800e650 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5f2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d12b      	bne.n	800e650 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e600:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e602:	429a      	cmp	r2, r3
 800e604:	d124      	bne.n	800e650 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f000 f984 	bl	800e914 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e60c:	e020      	b.n	800e650 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e60e:	7bbb      	ldrb	r3, [r7, #14]
 800e610:	2b01      	cmp	r3, #1
 800e612:	d01d      	beq.n	800e650 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	2204      	movs	r2, #4
 800e618:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e61c:	e018      	b.n	800e650 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f000 f867 	bl	800e6f2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f000 f8f8 	bl	800e81a <CDC_ProcessReception>
      break;
 800e62a:	e014      	b.n	800e656 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e62c:	2100      	movs	r1, #0
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f001 f94f 	bl	800f8d2 <USBH_ClrFeature>
 800e634:	4603      	mov	r3, r0
 800e636:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e638:	7bbb      	ldrb	r3, [r7, #14]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d10a      	bne.n	800e654 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	2200      	movs	r2, #0
 800e642:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800e646:	e005      	b.n	800e654 <USBH_CDC_Process+0x120>

    default:
      break;
 800e648:	bf00      	nop
 800e64a:	e004      	b.n	800e656 <USBH_CDC_Process+0x122>
      break;
 800e64c:	bf00      	nop
 800e64e:	e002      	b.n	800e656 <USBH_CDC_Process+0x122>
      break;
 800e650:	bf00      	nop
 800e652:	e000      	b.n	800e656 <USBH_CDC_Process+0x122>
      break;
 800e654:	bf00      	nop

  }

  return status;
 800e656:	7bfb      	ldrb	r3, [r7, #15]
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3710      	adds	r7, #16
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e660:	b480      	push	{r7}
 800e662:	b083      	sub	sp, #12
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e668:	2300      	movs	r3, #0
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	370c      	adds	r7, #12
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr

0800e676 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e676:	b580      	push	{r7, lr}
 800e678:	b082      	sub	sp, #8
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	6078      	str	r0, [r7, #4]
 800e67e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	22a1      	movs	r2, #161	; 0xa1
 800e684:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2221      	movs	r2, #33	; 0x21
 800e68a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2200      	movs	r2, #0
 800e690:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2200      	movs	r2, #0
 800e696:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2207      	movs	r2, #7
 800e69c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	2207      	movs	r2, #7
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f001 faf4 	bl	800fc92 <USBH_CtlReq>
 800e6aa:	4603      	mov	r3, r0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3708      	adds	r7, #8
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2221      	movs	r2, #33	; 0x21
 800e6c2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2220      	movs	r2, #32
 800e6c8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2207      	movs	r2, #7
 800e6da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	2207      	movs	r2, #7
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f001 fad5 	bl	800fc92 <USBH_CtlReq>
 800e6e8:	4603      	mov	r3, r0
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3708      	adds	r7, #8
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}

0800e6f2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b086      	sub	sp, #24
 800e6f6:	af02      	add	r7, sp, #8
 800e6f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e700:	69db      	ldr	r3, [r3, #28]
 800e702:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e704:	2300      	movs	r3, #0
 800e706:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d002      	beq.n	800e718 <CDC_ProcessTransmission+0x26>
 800e712:	2b02      	cmp	r3, #2
 800e714:	d025      	beq.n	800e762 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800e716:	e07c      	b.n	800e812 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e71c:	68fa      	ldr	r2, [r7, #12]
 800e71e:	8b12      	ldrh	r2, [r2, #24]
 800e720:	4293      	cmp	r3, r2
 800e722:	d90c      	bls.n	800e73e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	69d9      	ldr	r1, [r3, #28]
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	8b1a      	ldrh	r2, [r3, #24]
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	7b58      	ldrb	r0, [r3, #13]
 800e730:	2301      	movs	r3, #1
 800e732:	9300      	str	r3, [sp, #0]
 800e734:	4603      	mov	r3, r0
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f001 fdab 	bl	8010292 <USBH_BulkSendData>
 800e73c:	e00c      	b.n	800e758 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800e746:	b29a      	uxth	r2, r3
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	7b58      	ldrb	r0, [r3, #13]
 800e74c:	2301      	movs	r3, #1
 800e74e:	9300      	str	r3, [sp, #0]
 800e750:	4603      	mov	r3, r0
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f001 fd9d 	bl	8010292 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2202      	movs	r2, #2
 800e75c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e760:	e057      	b.n	800e812 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	7b5b      	ldrb	r3, [r3, #13]
 800e766:	4619      	mov	r1, r3
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f012 faf9 	bl	8020d60 <USBH_LL_GetURBState>
 800e76e:	4603      	mov	r3, r0
 800e770:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e772:	7afb      	ldrb	r3, [r7, #11]
 800e774:	2b01      	cmp	r3, #1
 800e776:	d136      	bne.n	800e7e6 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e77c:	68fa      	ldr	r2, [r7, #12]
 800e77e:	8b12      	ldrh	r2, [r2, #24]
 800e780:	4293      	cmp	r3, r2
 800e782:	d90e      	bls.n	800e7a2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e788:	68fa      	ldr	r2, [r7, #12]
 800e78a:	8b12      	ldrh	r2, [r2, #24]
 800e78c:	1a9a      	subs	r2, r3, r2
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	69db      	ldr	r3, [r3, #28]
 800e796:	68fa      	ldr	r2, [r7, #12]
 800e798:	8b12      	ldrh	r2, [r2, #24]
 800e79a:	441a      	add	r2, r3
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	61da      	str	r2, [r3, #28]
 800e7a0:	e002      	b.n	800e7a8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d004      	beq.n	800e7ba <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800e7b8:	e006      	b.n	800e7c8 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f000 f892 	bl	800e8ec <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2204      	movs	r2, #4
 800e7cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e7dc:	2300      	movs	r3, #0
 800e7de:	2200      	movs	r2, #0
 800e7e0:	f002 fb04 	bl	8010dec <osMessageQueuePut>
      break;
 800e7e4:	e014      	b.n	800e810 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800e7e6:	7afb      	ldrb	r3, [r7, #11]
 800e7e8:	2b02      	cmp	r3, #2
 800e7ea:	d111      	bne.n	800e810 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2204      	movs	r2, #4
 800e7f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e808:	2300      	movs	r3, #0
 800e80a:	2200      	movs	r2, #0
 800e80c:	f002 faee 	bl	8010dec <osMessageQueuePut>
      break;
 800e810:	bf00      	nop
  }
}
 800e812:	bf00      	nop
 800e814:	3710      	adds	r7, #16
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}

0800e81a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e81a:	b580      	push	{r7, lr}
 800e81c:	b086      	sub	sp, #24
 800e81e:	af00      	add	r7, sp, #0
 800e820:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e828:	69db      	ldr	r3, [r3, #28]
 800e82a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e82c:	2300      	movs	r3, #0
 800e82e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e836:	2b03      	cmp	r3, #3
 800e838:	d002      	beq.n	800e840 <CDC_ProcessReception+0x26>
 800e83a:	2b04      	cmp	r3, #4
 800e83c:	d00e      	beq.n	800e85c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e83e:	e051      	b.n	800e8e4 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	6a19      	ldr	r1, [r3, #32]
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	8b5a      	ldrh	r2, [r3, #26]
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	7b1b      	ldrb	r3, [r3, #12]
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f001 fd45 	bl	80102dc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	2204      	movs	r2, #4
 800e856:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e85a:	e043      	b.n	800e8e4 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	7b1b      	ldrb	r3, [r3, #12]
 800e860:	4619      	mov	r1, r3
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f012 fa7c 	bl	8020d60 <USBH_LL_GetURBState>
 800e868:	4603      	mov	r3, r0
 800e86a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e86c:	7cfb      	ldrb	r3, [r7, #19]
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d137      	bne.n	800e8e2 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	7b1b      	ldrb	r3, [r3, #12]
 800e876:	4619      	mov	r1, r3
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f012 f9df 	bl	8020c3c <USBH_LL_GetLastXferSize>
 800e87e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e884:	68fa      	ldr	r2, [r7, #12]
 800e886:	429a      	cmp	r2, r3
 800e888:	d016      	beq.n	800e8b8 <CDC_ProcessReception+0x9e>
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	8b5b      	ldrh	r3, [r3, #26]
 800e88e:	461a      	mov	r2, r3
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	4293      	cmp	r3, r2
 800e894:	d910      	bls.n	800e8b8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	1ad2      	subs	r2, r2, r3
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	6a1a      	ldr	r2, [r3, #32]
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	441a      	add	r2, r3
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	2203      	movs	r2, #3
 800e8b2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800e8b6:	e006      	b.n	800e8c6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f000 f81d 	bl	800e900 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2204      	movs	r2, #4
 800e8ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e8da:	2300      	movs	r3, #0
 800e8dc:	2200      	movs	r2, #0
 800e8de:	f002 fa85 	bl	8010dec <osMessageQueuePut>
      break;
 800e8e2:	bf00      	nop
  }
}
 800e8e4:	bf00      	nop
 800e8e6:	3718      	adds	r7, #24
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e8f4:	bf00      	nop
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e908:	bf00      	nop
 800e90a:	370c      	adds	r7, #12
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr

0800e914 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e914:	b480      	push	{r7}
 800e916:	b083      	sub	sp, #12
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e91c:	bf00      	nop
 800e91e:	370c      	adds	r7, #12
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr

0800e928 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	60f8      	str	r0, [r7, #12]
 800e930:	60b9      	str	r1, [r7, #8]
 800e932:	4613      	mov	r3, r2
 800e934:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d101      	bne.n	800e940 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e93c:	2302      	movs	r3, #2
 800e93e:	e044      	b.n	800e9ca <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	79fa      	ldrb	r2, [r7, #7]
 800e944:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2200      	movs	r2, #0
 800e94c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2200      	movs	r2, #0
 800e954:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e958:	68f8      	ldr	r0, [r7, #12]
 800e95a:	f000 f841 	bl	800e9e0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2200      	movs	r2, #0
 800e962:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2200      	movs	r2, #0
 800e96a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2200      	movs	r2, #0
 800e972:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2200      	movs	r2, #0
 800e97a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d003      	beq.n	800e98c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	68ba      	ldr	r2, [r7, #8]
 800e988:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800e98c:	2200      	movs	r2, #0
 800e98e:	2104      	movs	r1, #4
 800e990:	2010      	movs	r0, #16
 800e992:	f002 f9a5 	bl	8010ce0 <osMessageQueueNew>
 800e996:	4602      	mov	r2, r0
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800e99e:	4b0d      	ldr	r3, [pc, #52]	; (800e9d4 <USBH_Init+0xac>)
 800e9a0:	4a0d      	ldr	r2, [pc, #52]	; (800e9d8 <USBH_Init+0xb0>)
 800e9a2:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800e9a4:	4b0b      	ldr	r3, [pc, #44]	; (800e9d4 <USBH_Init+0xac>)
 800e9a6:	2280      	movs	r2, #128	; 0x80
 800e9a8:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800e9aa:	4b0a      	ldr	r3, [pc, #40]	; (800e9d4 <USBH_Init+0xac>)
 800e9ac:	2218      	movs	r2, #24
 800e9ae:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800e9b0:	4a08      	ldr	r2, [pc, #32]	; (800e9d4 <USBH_Init+0xac>)
 800e9b2:	68f9      	ldr	r1, [r7, #12]
 800e9b4:	4809      	ldr	r0, [pc, #36]	; (800e9dc <USBH_Init+0xb4>)
 800e9b6:	f001 fddb 	bl	8010570 <osThreadNew>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e9c2:	68f8      	ldr	r0, [r7, #12]
 800e9c4:	f012 f888 	bl	8020ad8 <USBH_LL_Init>

  return USBH_OK;
 800e9c8:	2300      	movs	r3, #0
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3710      	adds	r7, #16
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	2000cb98 	.word	0x2000cb98
 800e9d8:	080223c4 	.word	0x080223c4
 800e9dc:	0800f649 	.word	0x0800f649

0800e9e0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b085      	sub	sp, #20
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	60fb      	str	r3, [r7, #12]
 800e9f0:	e009      	b.n	800ea06 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	33e0      	adds	r3, #224	; 0xe0
 800e9f8:	009b      	lsls	r3, r3, #2
 800e9fa:	4413      	add	r3, r2
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	3301      	adds	r3, #1
 800ea04:	60fb      	str	r3, [r7, #12]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2b0e      	cmp	r3, #14
 800ea0a:	d9f2      	bls.n	800e9f2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	60fb      	str	r3, [r7, #12]
 800ea10:	e009      	b.n	800ea26 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	4413      	add	r3, r2
 800ea18:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	3301      	adds	r3, #1
 800ea24:	60fb      	str	r3, [r7, #12]
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea2c:	d3f1      	bcc.n	800ea12 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2200      	movs	r2, #0
 800ea32:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2200      	movs	r2, #0
 800ea38:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2200      	movs	r2, #0
 800ea44:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2240      	movs	r2, #64	; 0x40
 800ea52:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2200      	movs	r2, #0
 800ea58:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2201      	movs	r2, #1
 800ea66:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2200      	movs	r2, #0
 800ea76:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ea7a:	2300      	movs	r3, #0
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3714      	adds	r7, #20
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr

0800ea88 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ea92:	2300      	movs	r3, #0
 800ea94:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d016      	beq.n	800eaca <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d10e      	bne.n	800eac4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800eaac:	1c59      	adds	r1, r3, #1
 800eaae:	687a      	ldr	r2, [r7, #4]
 800eab0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800eab4:	687a      	ldr	r2, [r7, #4]
 800eab6:	33de      	adds	r3, #222	; 0xde
 800eab8:	6839      	ldr	r1, [r7, #0]
 800eaba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800eabe:	2300      	movs	r3, #0
 800eac0:	73fb      	strb	r3, [r7, #15]
 800eac2:	e004      	b.n	800eace <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800eac4:	2302      	movs	r3, #2
 800eac6:	73fb      	strb	r3, [r7, #15]
 800eac8:	e001      	b.n	800eace <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800eaca:	2302      	movs	r3, #2
 800eacc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800eace:	7bfb      	ldrb	r3, [r7, #15]
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3714      	adds	r7, #20
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800eadc:	b480      	push	{r7}
 800eade:	b085      	sub	sp, #20
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	460b      	mov	r3, r1
 800eae6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800eae8:	2300      	movs	r3, #0
 800eaea:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800eaf2:	78fa      	ldrb	r2, [r7, #3]
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d204      	bcs.n	800eb02 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	78fa      	ldrb	r2, [r7, #3]
 800eafc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800eb00:	e001      	b.n	800eb06 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800eb02:	2302      	movs	r3, #2
 800eb04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800eb06:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3714      	adds	r7, #20
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr

0800eb14 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b087      	sub	sp, #28
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	4608      	mov	r0, r1
 800eb1e:	4611      	mov	r1, r2
 800eb20:	461a      	mov	r2, r3
 800eb22:	4603      	mov	r3, r0
 800eb24:	70fb      	strb	r3, [r7, #3]
 800eb26:	460b      	mov	r3, r1
 800eb28:	70bb      	strb	r3, [r7, #2]
 800eb2a:	4613      	mov	r3, r2
 800eb2c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800eb32:	2300      	movs	r3, #0
 800eb34:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800eb3c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800eb3e:	e025      	b.n	800eb8c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800eb40:	7dfb      	ldrb	r3, [r7, #23]
 800eb42:	221a      	movs	r2, #26
 800eb44:	fb02 f303 	mul.w	r3, r2, r3
 800eb48:	3308      	adds	r3, #8
 800eb4a:	68fa      	ldr	r2, [r7, #12]
 800eb4c:	4413      	add	r3, r2
 800eb4e:	3302      	adds	r3, #2
 800eb50:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	795b      	ldrb	r3, [r3, #5]
 800eb56:	78fa      	ldrb	r2, [r7, #3]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d002      	beq.n	800eb62 <USBH_FindInterface+0x4e>
 800eb5c:	78fb      	ldrb	r3, [r7, #3]
 800eb5e:	2bff      	cmp	r3, #255	; 0xff
 800eb60:	d111      	bne.n	800eb86 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800eb66:	78ba      	ldrb	r2, [r7, #2]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d002      	beq.n	800eb72 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eb6c:	78bb      	ldrb	r3, [r7, #2]
 800eb6e:	2bff      	cmp	r3, #255	; 0xff
 800eb70:	d109      	bne.n	800eb86 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eb76:	787a      	ldrb	r2, [r7, #1]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d002      	beq.n	800eb82 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800eb7c:	787b      	ldrb	r3, [r7, #1]
 800eb7e:	2bff      	cmp	r3, #255	; 0xff
 800eb80:	d101      	bne.n	800eb86 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800eb82:	7dfb      	ldrb	r3, [r7, #23]
 800eb84:	e006      	b.n	800eb94 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800eb86:	7dfb      	ldrb	r3, [r7, #23]
 800eb88:	3301      	adds	r3, #1
 800eb8a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800eb8c:	7dfb      	ldrb	r3, [r7, #23]
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	d9d6      	bls.n	800eb40 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800eb92:	23ff      	movs	r3, #255	; 0xff
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	371c      	adds	r7, #28
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr

0800eba0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f011 ffd1 	bl	8020b50 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ebae:	2101      	movs	r1, #1
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f012 f8e8 	bl	8020d86 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ebb6:	2300      	movs	r3, #0
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3708      	adds	r7, #8
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b088      	sub	sp, #32
 800ebc4:	af04      	add	r7, sp, #16
 800ebc6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ebc8:	2302      	movs	r3, #2
 800ebca:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d102      	bne.n	800ebe2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2203      	movs	r2, #3
 800ebe0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	b2db      	uxtb	r3, r3
 800ebe8:	2b0b      	cmp	r3, #11
 800ebea:	f200 823c 	bhi.w	800f066 <USBH_Process+0x4a6>
 800ebee:	a201      	add	r2, pc, #4	; (adr r2, 800ebf4 <USBH_Process+0x34>)
 800ebf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf4:	0800ec25 	.word	0x0800ec25
 800ebf8:	0800ec73 	.word	0x0800ec73
 800ebfc:	0800ecf7 	.word	0x0800ecf7
 800ec00:	0800efe5 	.word	0x0800efe5
 800ec04:	0800f067 	.word	0x0800f067
 800ec08:	0800edb7 	.word	0x0800edb7
 800ec0c:	0800ef6f 	.word	0x0800ef6f
 800ec10:	0800ee09 	.word	0x0800ee09
 800ec14:	0800ee45 	.word	0x0800ee45
 800ec18:	0800ee7f 	.word	0x0800ee7f
 800ec1c:	0800eec7 	.word	0x0800eec7
 800ec20:	0800efcd 	.word	0x0800efcd
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	f000 821c 	beq.w	800f06a <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2201      	movs	r2, #1
 800ec36:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ec38:	20c8      	movs	r0, #200	; 0xc8
 800ec3a:	f012 f8eb 	bl	8020e14 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f011 ffe1 	bl	8020c06 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2200      	movs	r2, #0
 800ec48:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2201      	movs	r2, #1
 800ec58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ec68:	2300      	movs	r3, #0
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	f002 f8be 	bl	8010dec <osMessageQueuePut>
#endif
#endif
      }
      break;
 800ec70:	e1fb      	b.n	800f06a <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d107      	bne.n	800ec8c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2202      	movs	r2, #2
 800ec88:	701a      	strb	r2, [r3, #0]
 800ec8a:	e025      	b.n	800ecd8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ec92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ec96:	d914      	bls.n	800ecc2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ec9e:	3301      	adds	r3, #1
 800eca0:	b2da      	uxtb	r2, r3
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ecae:	2b03      	cmp	r3, #3
 800ecb0:	d903      	bls.n	800ecba <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	220d      	movs	r2, #13
 800ecb6:	701a      	strb	r2, [r3, #0]
 800ecb8:	e00e      	b.n	800ecd8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	701a      	strb	r2, [r3, #0]
 800ecc0:	e00a      	b.n	800ecd8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ecc8:	f103 020a 	add.w	r2, r3, #10
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ecd2:	200a      	movs	r0, #10
 800ecd4:	f012 f89e 	bl	8020e14 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2201      	movs	r2, #1
 800ecdc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ecec:	2300      	movs	r3, #0
 800ecee:	2200      	movs	r2, #0
 800ecf0:	f002 f87c 	bl	8010dec <osMessageQueuePut>
#endif
#endif
      break;
 800ecf4:	e1c0      	b.n	800f078 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d005      	beq.n	800ed0c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ed06:	2104      	movs	r1, #4
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ed0c:	2064      	movs	r0, #100	; 0x64
 800ed0e:	f012 f881 	bl	8020e14 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f011 ff52 	bl	8020bbc <USBH_LL_GetSpeed>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2205      	movs	r2, #5
 800ed26:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ed28:	2100      	movs	r1, #0
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f001 fb23 	bl	8010376 <USBH_AllocPipe>
 800ed30:	4603      	mov	r3, r0
 800ed32:	461a      	mov	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ed38:	2180      	movs	r1, #128	; 0x80
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f001 fb1b 	bl	8010376 <USBH_AllocPipe>
 800ed40:	4603      	mov	r3, r0
 800ed42:	461a      	mov	r2, r3
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	7919      	ldrb	r1, [r3, #4]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ed58:	687a      	ldr	r2, [r7, #4]
 800ed5a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ed5c:	b292      	uxth	r2, r2
 800ed5e:	9202      	str	r2, [sp, #8]
 800ed60:	2200      	movs	r2, #0
 800ed62:	9201      	str	r2, [sp, #4]
 800ed64:	9300      	str	r3, [sp, #0]
 800ed66:	4603      	mov	r3, r0
 800ed68:	2280      	movs	r2, #128	; 0x80
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f001 fad4 	bl	8010318 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	7959      	ldrb	r1, [r3, #5]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ed84:	b292      	uxth	r2, r2
 800ed86:	9202      	str	r2, [sp, #8]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	9201      	str	r2, [sp, #4]
 800ed8c:	9300      	str	r3, [sp, #0]
 800ed8e:	4603      	mov	r3, r0
 800ed90:	2200      	movs	r2, #0
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f001 fac0 	bl	8010318 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800edac:	2300      	movs	r3, #0
 800edae:	2200      	movs	r2, #0
 800edb0:	f002 f81c 	bl	8010dec <osMessageQueuePut>
#endif
#endif
      break;
 800edb4:	e160      	b.n	800f078 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f000 f964 	bl	800f084 <USBH_HandleEnum>
 800edbc:	4603      	mov	r3, r0
 800edbe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800edc0:	7bbb      	ldrb	r3, [r7, #14]
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f040 8152 	bne.w	800f06e <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2200      	movs	r2, #0
 800edce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d103      	bne.n	800ede4 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2208      	movs	r2, #8
 800ede0:	701a      	strb	r2, [r3, #0]
 800ede2:	e002      	b.n	800edea <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2207      	movs	r2, #7
 800ede8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2205      	movs	r2, #5
 800edee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800edfe:	2300      	movs	r3, #0
 800ee00:	2200      	movs	r2, #0
 800ee02:	f001 fff3 	bl	8010dec <osMessageQueuePut>
#endif
#endif
      }
      break;
 800ee06:	e132      	b.n	800f06e <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f000 812f 	beq.w	800f072 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ee1a:	2101      	movs	r1, #1
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2208      	movs	r2, #8
 800ee24:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2205      	movs	r2, #5
 800ee2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	f001 ffd5 	bl	8010dec <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800ee42:	e116      	b.n	800f072 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ee4a:	b29b      	uxth	r3, r3
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f000 fcf8 	bl	800f844 <USBH_SetCfg>
 800ee54:	4603      	mov	r3, r0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d102      	bne.n	800ee60 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2209      	movs	r2, #9
 800ee5e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2201      	movs	r2, #1
 800ee64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ee74:	2300      	movs	r3, #0
 800ee76:	2200      	movs	r2, #0
 800ee78:	f001 ffb8 	bl	8010dec <osMessageQueuePut>
#endif
#endif
      break;
 800ee7c:	e0fc      	b.n	800f078 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ee84:	f003 0320 	and.w	r3, r3, #32
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d00a      	beq.n	800eea2 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ee8c:	2101      	movs	r1, #1
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	f000 fcfb 	bl	800f88a <USBH_SetFeature>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d106      	bne.n	800eea8 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	220a      	movs	r2, #10
 800ee9e:	701a      	strb	r2, [r3, #0]
 800eea0:	e002      	b.n	800eea8 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	220a      	movs	r2, #10
 800eea6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2201      	movs	r2, #1
 800eeac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800eebc:	2300      	movs	r3, #0
 800eebe:	2200      	movs	r2, #0
 800eec0:	f001 ff94 	bl	8010dec <osMessageQueuePut>
#endif
#endif
      break;
 800eec4:	e0d8      	b.n	800f078 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d03f      	beq.n	800ef50 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2200      	movs	r2, #0
 800eed4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800eed8:	2300      	movs	r3, #0
 800eeda:	73fb      	strb	r3, [r7, #15]
 800eedc:	e016      	b.n	800ef0c <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800eede:	7bfa      	ldrb	r2, [r7, #15]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	32de      	adds	r2, #222	; 0xde
 800eee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eee8:	791a      	ldrb	r2, [r3, #4]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d108      	bne.n	800ef06 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800eef4:	7bfa      	ldrb	r2, [r7, #15]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	32de      	adds	r2, #222	; 0xde
 800eefa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ef04:	e005      	b.n	800ef12 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ef06:	7bfb      	ldrb	r3, [r7, #15]
 800ef08:	3301      	adds	r3, #1
 800ef0a:	73fb      	strb	r3, [r7, #15]
 800ef0c:	7bfb      	ldrb	r3, [r7, #15]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d0e5      	beq.n	800eede <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d016      	beq.n	800ef4a <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef22:	689b      	ldr	r3, [r3, #8]
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	4798      	blx	r3
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d109      	bne.n	800ef42 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2206      	movs	r2, #6
 800ef32:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ef3a:	2103      	movs	r1, #3
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	4798      	blx	r3
 800ef40:	e006      	b.n	800ef50 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	220d      	movs	r2, #13
 800ef46:	701a      	strb	r2, [r3, #0]
 800ef48:	e002      	b.n	800ef50 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	220d      	movs	r2, #13
 800ef4e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2205      	movs	r2, #5
 800ef54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ef64:	2300      	movs	r3, #0
 800ef66:	2200      	movs	r2, #0
 800ef68:	f001 ff40 	bl	8010dec <osMessageQueuePut>
#endif
#endif
      break;
 800ef6c:	e084      	b.n	800f078 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d017      	beq.n	800efa8 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef7e:	691b      	ldr	r3, [r3, #16]
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	4798      	blx	r3
 800ef84:	4603      	mov	r3, r0
 800ef86:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ef88:	7bbb      	ldrb	r3, [r7, #14]
 800ef8a:	b2db      	uxtb	r3, r3
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d103      	bne.n	800ef98 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	220b      	movs	r2, #11
 800ef94:	701a      	strb	r2, [r3, #0]
 800ef96:	e00a      	b.n	800efae <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800ef98:	7bbb      	ldrb	r3, [r7, #14]
 800ef9a:	b2db      	uxtb	r3, r3
 800ef9c:	2b02      	cmp	r3, #2
 800ef9e:	d106      	bne.n	800efae <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	220d      	movs	r2, #13
 800efa4:	701a      	strb	r2, [r3, #0]
 800efa6:	e002      	b.n	800efae <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	220d      	movs	r2, #13
 800efac:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2205      	movs	r2, #5
 800efb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800efc2:	2300      	movs	r3, #0
 800efc4:	2200      	movs	r2, #0
 800efc6:	f001 ff11 	bl	8010dec <osMessageQueuePut>
#endif
#endif
      break;
 800efca:	e055      	b.n	800f078 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d04f      	beq.n	800f076 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800efdc:	695b      	ldr	r3, [r3, #20]
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	4798      	blx	r3
      }
      break;
 800efe2:	e048      	b.n	800f076 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2200      	movs	r2, #0
 800efe8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f7ff fcf7 	bl	800e9e0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d009      	beq.n	800f010 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f002:	68db      	ldr	r3, [r3, #12]
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2200      	movs	r2, #0
 800f00c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f016:	2b00      	cmp	r3, #0
 800f018:	d005      	beq.n	800f026 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f020:	2105      	movs	r1, #5
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800f02c:	b2db      	uxtb	r3, r3
 800f02e:	2b01      	cmp	r3, #1
 800f030:	d107      	bne.n	800f042 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2200      	movs	r2, #0
 800f036:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f7ff fdb0 	bl	800eba0 <USBH_Start>
 800f040:	e002      	b.n	800f048 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f011 fd84 	bl	8020b50 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2201      	movs	r2, #1
 800f04c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f05c:	2300      	movs	r3, #0
 800f05e:	2200      	movs	r2, #0
 800f060:	f001 fec4 	bl	8010dec <osMessageQueuePut>
#endif
#endif
      break;
 800f064:	e008      	b.n	800f078 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800f066:	bf00      	nop
 800f068:	e006      	b.n	800f078 <USBH_Process+0x4b8>
      break;
 800f06a:	bf00      	nop
 800f06c:	e004      	b.n	800f078 <USBH_Process+0x4b8>
      break;
 800f06e:	bf00      	nop
 800f070:	e002      	b.n	800f078 <USBH_Process+0x4b8>
    break;
 800f072:	bf00      	nop
 800f074:	e000      	b.n	800f078 <USBH_Process+0x4b8>
      break;
 800f076:	bf00      	nop
  }
  return USBH_OK;
 800f078:	2300      	movs	r3, #0
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3710      	adds	r7, #16
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
 800f082:	bf00      	nop

0800f084 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b088      	sub	sp, #32
 800f088:	af04      	add	r7, sp, #16
 800f08a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f08c:	2301      	movs	r3, #1
 800f08e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f090:	2301      	movs	r3, #1
 800f092:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	785b      	ldrb	r3, [r3, #1]
 800f098:	2b07      	cmp	r3, #7
 800f09a:	f200 8208 	bhi.w	800f4ae <USBH_HandleEnum+0x42a>
 800f09e:	a201      	add	r2, pc, #4	; (adr r2, 800f0a4 <USBH_HandleEnum+0x20>)
 800f0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a4:	0800f0c5 	.word	0x0800f0c5
 800f0a8:	0800f183 	.word	0x0800f183
 800f0ac:	0800f1ed 	.word	0x0800f1ed
 800f0b0:	0800f27b 	.word	0x0800f27b
 800f0b4:	0800f2e5 	.word	0x0800f2e5
 800f0b8:	0800f355 	.word	0x0800f355
 800f0bc:	0800f3f1 	.word	0x0800f3f1
 800f0c0:	0800f46f 	.word	0x0800f46f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f0c4:	2108      	movs	r1, #8
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f000 faec 	bl	800f6a4 <USBH_Get_DevDesc>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f0d0:	7bbb      	ldrb	r3, [r7, #14]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d130      	bne.n	800f138 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	7919      	ldrb	r1, [r3, #4]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f0f6:	687a      	ldr	r2, [r7, #4]
 800f0f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f0fa:	b292      	uxth	r2, r2
 800f0fc:	9202      	str	r2, [sp, #8]
 800f0fe:	2200      	movs	r2, #0
 800f100:	9201      	str	r2, [sp, #4]
 800f102:	9300      	str	r3, [sp, #0]
 800f104:	4603      	mov	r3, r0
 800f106:	2280      	movs	r2, #128	; 0x80
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f001 f905 	bl	8010318 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	7959      	ldrb	r1, [r3, #5]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f122:	b292      	uxth	r2, r2
 800f124:	9202      	str	r2, [sp, #8]
 800f126:	2200      	movs	r2, #0
 800f128:	9201      	str	r2, [sp, #4]
 800f12a:	9300      	str	r3, [sp, #0]
 800f12c:	4603      	mov	r3, r0
 800f12e:	2200      	movs	r2, #0
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f001 f8f1 	bl	8010318 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f136:	e1bc      	b.n	800f4b2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f138:	7bbb      	ldrb	r3, [r7, #14]
 800f13a:	2b03      	cmp	r3, #3
 800f13c:	f040 81b9 	bne.w	800f4b2 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f146:	3301      	adds	r3, #1
 800f148:	b2da      	uxtb	r2, r3
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f156:	2b03      	cmp	r3, #3
 800f158:	d903      	bls.n	800f162 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	220d      	movs	r2, #13
 800f15e:	701a      	strb	r2, [r3, #0]
      break;
 800f160:	e1a7      	b.n	800f4b2 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	795b      	ldrb	r3, [r3, #5]
 800f166:	4619      	mov	r1, r3
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f001 f925 	bl	80103b8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	791b      	ldrb	r3, [r3, #4]
 800f172:	4619      	mov	r1, r3
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f001 f91f 	bl	80103b8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2200      	movs	r2, #0
 800f17e:	701a      	strb	r2, [r3, #0]
      break;
 800f180:	e197      	b.n	800f4b2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f182:	2112      	movs	r1, #18
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f000 fa8d 	bl	800f6a4 <USBH_Get_DevDesc>
 800f18a:	4603      	mov	r3, r0
 800f18c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f18e:	7bbb      	ldrb	r3, [r7, #14]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d103      	bne.n	800f19c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2202      	movs	r2, #2
 800f198:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f19a:	e18c      	b.n	800f4b6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f19c:	7bbb      	ldrb	r3, [r7, #14]
 800f19e:	2b03      	cmp	r3, #3
 800f1a0:	f040 8189 	bne.w	800f4b6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	b2da      	uxtb	r2, r3
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f1ba:	2b03      	cmp	r3, #3
 800f1bc:	d903      	bls.n	800f1c6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	220d      	movs	r2, #13
 800f1c2:	701a      	strb	r2, [r3, #0]
      break;
 800f1c4:	e177      	b.n	800f4b6 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	795b      	ldrb	r3, [r3, #5]
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f001 f8f3 	bl	80103b8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	791b      	ldrb	r3, [r3, #4]
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f001 f8ed 	bl	80103b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	701a      	strb	r2, [r3, #0]
      break;
 800f1ea:	e164      	b.n	800f4b6 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f1ec:	2101      	movs	r1, #1
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f000 fb04 	bl	800f7fc <USBH_SetAddress>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f1f8:	7bbb      	ldrb	r3, [r7, #14]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d132      	bne.n	800f264 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800f1fe:	2002      	movs	r0, #2
 800f200:	f011 fe08 	bl	8020e14 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2201      	movs	r2, #1
 800f208:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2203      	movs	r2, #3
 800f210:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	7919      	ldrb	r1, [r3, #4]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f222:	687a      	ldr	r2, [r7, #4]
 800f224:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f226:	b292      	uxth	r2, r2
 800f228:	9202      	str	r2, [sp, #8]
 800f22a:	2200      	movs	r2, #0
 800f22c:	9201      	str	r2, [sp, #4]
 800f22e:	9300      	str	r3, [sp, #0]
 800f230:	4603      	mov	r3, r0
 800f232:	2280      	movs	r2, #128	; 0x80
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f001 f86f 	bl	8010318 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	7959      	ldrb	r1, [r3, #5]
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f24a:	687a      	ldr	r2, [r7, #4]
 800f24c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f24e:	b292      	uxth	r2, r2
 800f250:	9202      	str	r2, [sp, #8]
 800f252:	2200      	movs	r2, #0
 800f254:	9201      	str	r2, [sp, #4]
 800f256:	9300      	str	r3, [sp, #0]
 800f258:	4603      	mov	r3, r0
 800f25a:	2200      	movs	r2, #0
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f001 f85b 	bl	8010318 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f262:	e12a      	b.n	800f4ba <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f264:	7bbb      	ldrb	r3, [r7, #14]
 800f266:	2b03      	cmp	r3, #3
 800f268:	f040 8127 	bne.w	800f4ba <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	220d      	movs	r2, #13
 800f270:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2200      	movs	r2, #0
 800f276:	705a      	strb	r2, [r3, #1]
      break;
 800f278:	e11f      	b.n	800f4ba <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f27a:	2109      	movs	r1, #9
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f000 fa39 	bl	800f6f4 <USBH_Get_CfgDesc>
 800f282:	4603      	mov	r3, r0
 800f284:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f286:	7bbb      	ldrb	r3, [r7, #14]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d103      	bne.n	800f294 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2204      	movs	r2, #4
 800f290:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f292:	e114      	b.n	800f4be <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f294:	7bbb      	ldrb	r3, [r7, #14]
 800f296:	2b03      	cmp	r3, #3
 800f298:	f040 8111 	bne.w	800f4be <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	b2da      	uxtb	r2, r3
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f2b2:	2b03      	cmp	r3, #3
 800f2b4:	d903      	bls.n	800f2be <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	220d      	movs	r2, #13
 800f2ba:	701a      	strb	r2, [r3, #0]
      break;
 800f2bc:	e0ff      	b.n	800f4be <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	795b      	ldrb	r3, [r3, #5]
 800f2c2:	4619      	mov	r1, r3
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f001 f877 	bl	80103b8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	791b      	ldrb	r3, [r3, #4]
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f001 f871 	bl	80103b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	701a      	strb	r2, [r3, #0]
      break;
 800f2e2:	e0ec      	b.n	800f4be <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f000 fa01 	bl	800f6f4 <USBH_Get_CfgDesc>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f2f6:	7bbb      	ldrb	r3, [r7, #14]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d103      	bne.n	800f304 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2205      	movs	r2, #5
 800f300:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f302:	e0de      	b.n	800f4c2 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f304:	7bbb      	ldrb	r3, [r7, #14]
 800f306:	2b03      	cmp	r3, #3
 800f308:	f040 80db 	bne.w	800f4c2 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f312:	3301      	adds	r3, #1
 800f314:	b2da      	uxtb	r2, r3
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f322:	2b03      	cmp	r3, #3
 800f324:	d903      	bls.n	800f32e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	220d      	movs	r2, #13
 800f32a:	701a      	strb	r2, [r3, #0]
      break;
 800f32c:	e0c9      	b.n	800f4c2 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	795b      	ldrb	r3, [r3, #5]
 800f332:	4619      	mov	r1, r3
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f001 f83f 	bl	80103b8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	791b      	ldrb	r3, [r3, #4]
 800f33e:	4619      	mov	r1, r3
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f001 f839 	bl	80103b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2200      	movs	r2, #0
 800f34a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2200      	movs	r2, #0
 800f350:	701a      	strb	r2, [r3, #0]
      break;
 800f352:	e0b6      	b.n	800f4c2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d036      	beq.n	800f3cc <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f36a:	23ff      	movs	r3, #255	; 0xff
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 f9e5 	bl	800f73c <USBH_Get_StringDesc>
 800f372:	4603      	mov	r3, r0
 800f374:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f376:	7bbb      	ldrb	r3, [r7, #14]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d111      	bne.n	800f3a0 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2206      	movs	r2, #6
 800f380:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2205      	movs	r2, #5
 800f386:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f396:	2300      	movs	r3, #0
 800f398:	2200      	movs	r2, #0
 800f39a:	f001 fd27 	bl	8010dec <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f39e:	e092      	b.n	800f4c6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f3a0:	7bbb      	ldrb	r3, [r7, #14]
 800f3a2:	2b03      	cmp	r3, #3
 800f3a4:	f040 808f 	bne.w	800f4c6 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2206      	movs	r2, #6
 800f3ac:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2205      	movs	r2, #5
 800f3b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	f001 fd11 	bl	8010dec <osMessageQueuePut>
      break;
 800f3ca:	e07c      	b.n	800f4c6 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2206      	movs	r2, #6
 800f3d0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2205      	movs	r2, #5
 800f3d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	f001 fcff 	bl	8010dec <osMessageQueuePut>
      break;
 800f3ee:	e06a      	b.n	800f4c6 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d027      	beq.n	800f44a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f406:	23ff      	movs	r3, #255	; 0xff
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f000 f997 	bl	800f73c <USBH_Get_StringDesc>
 800f40e:	4603      	mov	r3, r0
 800f410:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f412:	7bbb      	ldrb	r3, [r7, #14]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d103      	bne.n	800f420 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2207      	movs	r2, #7
 800f41c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f41e:	e054      	b.n	800f4ca <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f420:	7bbb      	ldrb	r3, [r7, #14]
 800f422:	2b03      	cmp	r3, #3
 800f424:	d151      	bne.n	800f4ca <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2207      	movs	r2, #7
 800f42a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2205      	movs	r2, #5
 800f430:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f440:	2300      	movs	r3, #0
 800f442:	2200      	movs	r2, #0
 800f444:	f001 fcd2 	bl	8010dec <osMessageQueuePut>
      break;
 800f448:	e03f      	b.n	800f4ca <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2207      	movs	r2, #7
 800f44e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2205      	movs	r2, #5
 800f454:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f464:	2300      	movs	r3, #0
 800f466:	2200      	movs	r2, #0
 800f468:	f001 fcc0 	bl	8010dec <osMessageQueuePut>
      break;
 800f46c:	e02d      	b.n	800f4ca <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800f474:	2b00      	cmp	r3, #0
 800f476:	d017      	beq.n	800f4a8 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f484:	23ff      	movs	r3, #255	; 0xff
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f000 f958 	bl	800f73c <USBH_Get_StringDesc>
 800f48c:	4603      	mov	r3, r0
 800f48e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f490:	7bbb      	ldrb	r3, [r7, #14]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d102      	bne.n	800f49c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f496:	2300      	movs	r3, #0
 800f498:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f49a:	e018      	b.n	800f4ce <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f49c:	7bbb      	ldrb	r3, [r7, #14]
 800f49e:	2b03      	cmp	r3, #3
 800f4a0:	d115      	bne.n	800f4ce <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	73fb      	strb	r3, [r7, #15]
      break;
 800f4a6:	e012      	b.n	800f4ce <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	73fb      	strb	r3, [r7, #15]
      break;
 800f4ac:	e00f      	b.n	800f4ce <USBH_HandleEnum+0x44a>

    default:
      break;
 800f4ae:	bf00      	nop
 800f4b0:	e00e      	b.n	800f4d0 <USBH_HandleEnum+0x44c>
      break;
 800f4b2:	bf00      	nop
 800f4b4:	e00c      	b.n	800f4d0 <USBH_HandleEnum+0x44c>
      break;
 800f4b6:	bf00      	nop
 800f4b8:	e00a      	b.n	800f4d0 <USBH_HandleEnum+0x44c>
      break;
 800f4ba:	bf00      	nop
 800f4bc:	e008      	b.n	800f4d0 <USBH_HandleEnum+0x44c>
      break;
 800f4be:	bf00      	nop
 800f4c0:	e006      	b.n	800f4d0 <USBH_HandleEnum+0x44c>
      break;
 800f4c2:	bf00      	nop
 800f4c4:	e004      	b.n	800f4d0 <USBH_HandleEnum+0x44c>
      break;
 800f4c6:	bf00      	nop
 800f4c8:	e002      	b.n	800f4d0 <USBH_HandleEnum+0x44c>
      break;
 800f4ca:	bf00      	nop
 800f4cc:	e000      	b.n	800f4d0 <USBH_HandleEnum+0x44c>
      break;
 800f4ce:	bf00      	nop
  }
  return Status;
 800f4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3710      	adds	r7, #16
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}
 800f4da:	bf00      	nop

0800f4dc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b083      	sub	sp, #12
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	683a      	ldr	r2, [r7, #0]
 800f4ea:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800f4ee:	bf00      	nop
 800f4f0:	370c      	adds	r7, #12
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f8:	4770      	bx	lr

0800f4fa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f4fa:	b580      	push	{r7, lr}
 800f4fc:	b082      	sub	sp, #8
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f508:	1c5a      	adds	r2, r3, #1
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f000 f804 	bl	800f51e <USBH_HandleSof>
}
 800f516:	bf00      	nop
 800f518:	3708      	adds	r7, #8
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}

0800f51e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f51e:	b580      	push	{r7, lr}
 800f520:	b082      	sub	sp, #8
 800f522:	af00      	add	r7, sp, #0
 800f524:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	2b0b      	cmp	r3, #11
 800f52e:	d10a      	bne.n	800f546 <USBH_HandleSof+0x28>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f536:	2b00      	cmp	r3, #0
 800f538:	d005      	beq.n	800f546 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f540:	699b      	ldr	r3, [r3, #24]
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	4798      	blx	r3
  }
}
 800f546:	bf00      	nop
 800f548:	3708      	adds	r7, #8
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}

0800f54e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f54e:	b580      	push	{r7, lr}
 800f550:	b082      	sub	sp, #8
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2201      	movs	r2, #1
 800f55a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2201      	movs	r2, #1
 800f562:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f572:	2300      	movs	r3, #0
 800f574:	2200      	movs	r2, #0
 800f576:	f001 fc39 	bl	8010dec <osMessageQueuePut>
#endif
#endif

  return;
 800f57a:	bf00      	nop
}
 800f57c:	3708      	adds	r7, #8
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}

0800f582 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f582:	b480      	push	{r7}
 800f584:	b083      	sub	sp, #12
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	2200      	movs	r2, #0
 800f58e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f592:	bf00      	nop
}
 800f594:	370c      	adds	r7, #12
 800f596:	46bd      	mov	sp, r7
 800f598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59c:	4770      	bx	lr

0800f59e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f59e:	b580      	push	{r7, lr}
 800f5a0:	b082      	sub	sp, #8
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2201      	movs	r2, #1
 800f5aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	f001 fc09 	bl	8010dec <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800f5da:	2300      	movs	r3, #0
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3708      	adds	r7, #8
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}

0800f5e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2201      	movs	r2, #1
 800f5f0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2200      	movs	r2, #0
 800f600:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f011 fabe 	bl	8020b86 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	791b      	ldrb	r3, [r3, #4]
 800f60e:	4619      	mov	r1, r3
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 fed1 	bl	80103b8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	795b      	ldrb	r3, [r3, #5]
 800f61a:	4619      	mov	r1, r3
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f000 fecb 	bl	80103b8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2201      	movs	r2, #1
 800f626:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f636:	2300      	movs	r3, #0
 800f638:	2200      	movs	r2, #0
 800f63a:	f001 fbd7 	bl	8010dec <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800f63e:	2300      	movs	r3, #0
}
 800f640:	4618      	mov	r0, r3
 800f642:	3708      	adds	r7, #8
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b084      	sub	sp, #16
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800f65c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f660:	2200      	movs	r2, #0
 800f662:	f001 fc37 	bl	8010ed4 <osMessageQueueGet>
 800f666:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d1f0      	bne.n	800f650 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f7ff faa6 	bl	800ebc0 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800f674:	e7ec      	b.n	800f650 <USBH_Process_OS+0x8>

0800f676 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800f676:	b580      	push	{r7, lr}
 800f678:	b082      	sub	sp, #8
 800f67a:	af00      	add	r7, sp, #0
 800f67c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2201      	movs	r2, #1
 800f682:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f692:	2300      	movs	r3, #0
 800f694:	2200      	movs	r2, #0
 800f696:	f001 fba9 	bl	8010dec <osMessageQueuePut>
#endif

  return USBH_OK;
 800f69a:	2300      	movs	r3, #0
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3708      	adds	r7, #8
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b086      	sub	sp, #24
 800f6a8:	af02      	add	r7, sp, #8
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f6b6:	78fb      	ldrb	r3, [r7, #3]
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	9300      	str	r3, [sp, #0]
 800f6bc:	4613      	mov	r3, r2
 800f6be:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f6c2:	2100      	movs	r1, #0
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f000 f864 	bl	800f792 <USBH_GetDescriptor>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	73fb      	strb	r3, [r7, #15]
 800f6ce:	7bfb      	ldrb	r3, [r7, #15]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d10a      	bne.n	800f6ea <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f6e0:	78fa      	ldrb	r2, [r7, #3]
 800f6e2:	b292      	uxth	r2, r2
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	f000 f918 	bl	800f91a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3710      	adds	r7, #16
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b086      	sub	sp, #24
 800f6f8:	af02      	add	r7, sp, #8
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	331c      	adds	r3, #28
 800f704:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f706:	887b      	ldrh	r3, [r7, #2]
 800f708:	9300      	str	r3, [sp, #0]
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f710:	2100      	movs	r1, #0
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f000 f83d 	bl	800f792 <USBH_GetDescriptor>
 800f718:	4603      	mov	r3, r0
 800f71a:	72fb      	strb	r3, [r7, #11]
 800f71c:	7afb      	ldrb	r3, [r7, #11]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d107      	bne.n	800f732 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f728:	887a      	ldrh	r2, [r7, #2]
 800f72a:	68f9      	ldr	r1, [r7, #12]
 800f72c:	4618      	mov	r0, r3
 800f72e:	f000 f964 	bl	800f9fa <USBH_ParseCfgDesc>
  }

  return status;
 800f732:	7afb      	ldrb	r3, [r7, #11]
}
 800f734:	4618      	mov	r0, r3
 800f736:	3710      	adds	r7, #16
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b088      	sub	sp, #32
 800f740:	af02      	add	r7, sp, #8
 800f742:	60f8      	str	r0, [r7, #12]
 800f744:	607a      	str	r2, [r7, #4]
 800f746:	461a      	mov	r2, r3
 800f748:	460b      	mov	r3, r1
 800f74a:	72fb      	strb	r3, [r7, #11]
 800f74c:	4613      	mov	r3, r2
 800f74e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f750:	7afb      	ldrb	r3, [r7, #11]
 800f752:	b29b      	uxth	r3, r3
 800f754:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f758:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f760:	893b      	ldrh	r3, [r7, #8]
 800f762:	9300      	str	r3, [sp, #0]
 800f764:	460b      	mov	r3, r1
 800f766:	2100      	movs	r1, #0
 800f768:	68f8      	ldr	r0, [r7, #12]
 800f76a:	f000 f812 	bl	800f792 <USBH_GetDescriptor>
 800f76e:	4603      	mov	r3, r0
 800f770:	75fb      	strb	r3, [r7, #23]
 800f772:	7dfb      	ldrb	r3, [r7, #23]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d107      	bne.n	800f788 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f77e:	893a      	ldrh	r2, [r7, #8]
 800f780:	6879      	ldr	r1, [r7, #4]
 800f782:	4618      	mov	r0, r3
 800f784:	f000 fa37 	bl	800fbf6 <USBH_ParseStringDesc>
  }

  return status;
 800f788:	7dfb      	ldrb	r3, [r7, #23]
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3718      	adds	r7, #24
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}

0800f792 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f792:	b580      	push	{r7, lr}
 800f794:	b084      	sub	sp, #16
 800f796:	af00      	add	r7, sp, #0
 800f798:	60f8      	str	r0, [r7, #12]
 800f79a:	607b      	str	r3, [r7, #4]
 800f79c:	460b      	mov	r3, r1
 800f79e:	72fb      	strb	r3, [r7, #11]
 800f7a0:	4613      	mov	r3, r2
 800f7a2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	789b      	ldrb	r3, [r3, #2]
 800f7a8:	2b01      	cmp	r3, #1
 800f7aa:	d11c      	bne.n	800f7e6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f7ac:	7afb      	ldrb	r3, [r7, #11]
 800f7ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f7b2:	b2da      	uxtb	r2, r3
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	2206      	movs	r2, #6
 800f7bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	893a      	ldrh	r2, [r7, #8]
 800f7c2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f7c4:	893b      	ldrh	r3, [r7, #8]
 800f7c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f7ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f7ce:	d104      	bne.n	800f7da <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	f240 4209 	movw	r2, #1033	; 0x409
 800f7d6:	829a      	strh	r2, [r3, #20]
 800f7d8:	e002      	b.n	800f7e0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	8b3a      	ldrh	r2, [r7, #24]
 800f7e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f7e6:	8b3b      	ldrh	r3, [r7, #24]
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	6879      	ldr	r1, [r7, #4]
 800f7ec:	68f8      	ldr	r0, [r7, #12]
 800f7ee:	f000 fa50 	bl	800fc92 <USBH_CtlReq>
 800f7f2:	4603      	mov	r3, r0
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3710      	adds	r7, #16
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b082      	sub	sp, #8
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	460b      	mov	r3, r1
 800f806:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	789b      	ldrb	r3, [r3, #2]
 800f80c:	2b01      	cmp	r3, #1
 800f80e:	d10f      	bne.n	800f830 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2200      	movs	r2, #0
 800f814:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2205      	movs	r2, #5
 800f81a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f81c:	78fb      	ldrb	r3, [r7, #3]
 800f81e:	b29a      	uxth	r2, r3
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2200      	movs	r2, #0
 800f828:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2200      	movs	r2, #0
 800f82e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f830:	2200      	movs	r2, #0
 800f832:	2100      	movs	r1, #0
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f000 fa2c 	bl	800fc92 <USBH_CtlReq>
 800f83a:	4603      	mov	r3, r0
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3708      	adds	r7, #8
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	460b      	mov	r3, r1
 800f84e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	789b      	ldrb	r3, [r3, #2]
 800f854:	2b01      	cmp	r3, #1
 800f856:	d10e      	bne.n	800f876 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2200      	movs	r2, #0
 800f85c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2209      	movs	r2, #9
 800f862:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	887a      	ldrh	r2, [r7, #2]
 800f868:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2200      	movs	r2, #0
 800f86e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2200      	movs	r2, #0
 800f874:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f876:	2200      	movs	r2, #0
 800f878:	2100      	movs	r1, #0
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f000 fa09 	bl	800fc92 <USBH_CtlReq>
 800f880:	4603      	mov	r3, r0
}
 800f882:	4618      	mov	r0, r3
 800f884:	3708      	adds	r7, #8
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}

0800f88a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f88a:	b580      	push	{r7, lr}
 800f88c:	b082      	sub	sp, #8
 800f88e:	af00      	add	r7, sp, #0
 800f890:	6078      	str	r0, [r7, #4]
 800f892:	460b      	mov	r3, r1
 800f894:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	789b      	ldrb	r3, [r3, #2]
 800f89a:	2b01      	cmp	r3, #1
 800f89c:	d10f      	bne.n	800f8be <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2203      	movs	r2, #3
 800f8a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f8aa:	78fb      	ldrb	r3, [r7, #3]
 800f8ac:	b29a      	uxth	r2, r3
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f8be:	2200      	movs	r2, #0
 800f8c0:	2100      	movs	r1, #0
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f000 f9e5 	bl	800fc92 <USBH_CtlReq>
 800f8c8:	4603      	mov	r3, r0
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3708      	adds	r7, #8
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}

0800f8d2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f8d2:	b580      	push	{r7, lr}
 800f8d4:	b082      	sub	sp, #8
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
 800f8da:	460b      	mov	r3, r1
 800f8dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	789b      	ldrb	r3, [r3, #2]
 800f8e2:	2b01      	cmp	r3, #1
 800f8e4:	d10f      	bne.n	800f906 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2202      	movs	r2, #2
 800f8ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2201      	movs	r2, #1
 800f8f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f8f8:	78fb      	ldrb	r3, [r7, #3]
 800f8fa:	b29a      	uxth	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2200      	movs	r2, #0
 800f904:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f906:	2200      	movs	r2, #0
 800f908:	2100      	movs	r1, #0
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f000 f9c1 	bl	800fc92 <USBH_CtlReq>
 800f910:	4603      	mov	r3, r0
}
 800f912:	4618      	mov	r0, r3
 800f914:	3708      	adds	r7, #8
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}

0800f91a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f91a:	b480      	push	{r7}
 800f91c:	b085      	sub	sp, #20
 800f91e:	af00      	add	r7, sp, #0
 800f920:	60f8      	str	r0, [r7, #12]
 800f922:	60b9      	str	r1, [r7, #8]
 800f924:	4613      	mov	r3, r2
 800f926:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	781a      	ldrb	r2, [r3, #0]
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	785a      	ldrb	r2, [r3, #1]
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	3302      	adds	r3, #2
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	b29a      	uxth	r2, r3
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	3303      	adds	r3, #3
 800f944:	781b      	ldrb	r3, [r3, #0]
 800f946:	b29b      	uxth	r3, r3
 800f948:	021b      	lsls	r3, r3, #8
 800f94a:	b29b      	uxth	r3, r3
 800f94c:	4313      	orrs	r3, r2
 800f94e:	b29a      	uxth	r2, r3
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	791a      	ldrb	r2, [r3, #4]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	795a      	ldrb	r2, [r3, #5]
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	799a      	ldrb	r2, [r3, #6]
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	79da      	ldrb	r2, [r3, #7]
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800f974:	88fb      	ldrh	r3, [r7, #6]
 800f976:	2b08      	cmp	r3, #8
 800f978:	d939      	bls.n	800f9ee <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	3308      	adds	r3, #8
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	b29a      	uxth	r2, r3
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	3309      	adds	r3, #9
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	b29b      	uxth	r3, r3
 800f98a:	021b      	lsls	r3, r3, #8
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	4313      	orrs	r3, r2
 800f990:	b29a      	uxth	r2, r3
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	330a      	adds	r3, #10
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	b29a      	uxth	r2, r3
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	330b      	adds	r3, #11
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	b29b      	uxth	r3, r3
 800f9a6:	021b      	lsls	r3, r3, #8
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	4313      	orrs	r3, r2
 800f9ac:	b29a      	uxth	r2, r3
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	330c      	adds	r3, #12
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	b29a      	uxth	r2, r3
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	330d      	adds	r3, #13
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	b29b      	uxth	r3, r3
 800f9c2:	021b      	lsls	r3, r3, #8
 800f9c4:	b29b      	uxth	r3, r3
 800f9c6:	4313      	orrs	r3, r2
 800f9c8:	b29a      	uxth	r2, r3
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	7b9a      	ldrb	r2, [r3, #14]
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	7bda      	ldrb	r2, [r3, #15]
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	7c1a      	ldrb	r2, [r3, #16]
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	7c5a      	ldrb	r2, [r3, #17]
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	745a      	strb	r2, [r3, #17]
  }
}
 800f9ee:	bf00      	nop
 800f9f0:	3714      	adds	r7, #20
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr

0800f9fa <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b08a      	sub	sp, #40	; 0x28
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	60f8      	str	r0, [r7, #12]
 800fa02:	60b9      	str	r1, [r7, #8]
 800fa04:	4613      	mov	r3, r2
 800fa06:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800fa12:	2300      	movs	r3, #0
 800fa14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	781a      	ldrb	r2, [r3, #0]
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	785a      	ldrb	r2, [r3, #1]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	3302      	adds	r3, #2
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	b29a      	uxth	r2, r3
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	3303      	adds	r3, #3
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	b29b      	uxth	r3, r3
 800fa3c:	021b      	lsls	r3, r3, #8
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	4313      	orrs	r3, r2
 800fa42:	b29a      	uxth	r2, r3
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	791a      	ldrb	r2, [r3, #4]
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	795a      	ldrb	r2, [r3, #5]
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	799a      	ldrb	r2, [r3, #6]
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	79da      	ldrb	r2, [r3, #7]
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	7a1a      	ldrb	r2, [r3, #8]
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fa70:	88fb      	ldrh	r3, [r7, #6]
 800fa72:	2b09      	cmp	r3, #9
 800fa74:	d95f      	bls.n	800fb36 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800fa76:	2309      	movs	r3, #9
 800fa78:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fa7e:	e051      	b.n	800fb24 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fa80:	f107 0316 	add.w	r3, r7, #22
 800fa84:	4619      	mov	r1, r3
 800fa86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa88:	f000 f8e8 	bl	800fc5c <USBH_GetNextDesc>
 800fa8c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800fa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa90:	785b      	ldrb	r3, [r3, #1]
 800fa92:	2b04      	cmp	r3, #4
 800fa94:	d146      	bne.n	800fb24 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800fa96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fa9a:	221a      	movs	r2, #26
 800fa9c:	fb02 f303 	mul.w	r3, r2, r3
 800faa0:	3308      	adds	r3, #8
 800faa2:	68fa      	ldr	r2, [r7, #12]
 800faa4:	4413      	add	r3, r2
 800faa6:	3302      	adds	r3, #2
 800faa8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800faaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800faac:	69f8      	ldr	r0, [r7, #28]
 800faae:	f000 f846 	bl	800fb3e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800fab2:	2300      	movs	r3, #0
 800fab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800fab8:	2300      	movs	r3, #0
 800faba:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fabc:	e022      	b.n	800fb04 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fabe:	f107 0316 	add.w	r3, r7, #22
 800fac2:	4619      	mov	r1, r3
 800fac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fac6:	f000 f8c9 	bl	800fc5c <USBH_GetNextDesc>
 800faca:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800facc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800face:	785b      	ldrb	r3, [r3, #1]
 800fad0:	2b05      	cmp	r3, #5
 800fad2:	d117      	bne.n	800fb04 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800fad4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fad8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fadc:	3201      	adds	r2, #1
 800fade:	00d2      	lsls	r2, r2, #3
 800fae0:	211a      	movs	r1, #26
 800fae2:	fb01 f303 	mul.w	r3, r1, r3
 800fae6:	4413      	add	r3, r2
 800fae8:	3308      	adds	r3, #8
 800faea:	68fa      	ldr	r2, [r7, #12]
 800faec:	4413      	add	r3, r2
 800faee:	3304      	adds	r3, #4
 800faf0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800faf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800faf4:	69b8      	ldr	r0, [r7, #24]
 800faf6:	f000 f851 	bl	800fb9c <USBH_ParseEPDesc>
            ep_ix++;
 800fafa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fafe:	3301      	adds	r3, #1
 800fb00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	791b      	ldrb	r3, [r3, #4]
 800fb08:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d204      	bcs.n	800fb1a <USBH_ParseCfgDesc+0x120>
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	885a      	ldrh	r2, [r3, #2]
 800fb14:	8afb      	ldrh	r3, [r7, #22]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d8d1      	bhi.n	800fabe <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800fb1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fb1e:	3301      	adds	r3, #1
 800fb20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fb24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fb28:	2b01      	cmp	r3, #1
 800fb2a:	d804      	bhi.n	800fb36 <USBH_ParseCfgDesc+0x13c>
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	885a      	ldrh	r2, [r3, #2]
 800fb30:	8afb      	ldrh	r3, [r7, #22]
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d8a4      	bhi.n	800fa80 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800fb36:	bf00      	nop
 800fb38:	3728      	adds	r7, #40	; 0x28
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}

0800fb3e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800fb3e:	b480      	push	{r7}
 800fb40:	b083      	sub	sp, #12
 800fb42:	af00      	add	r7, sp, #0
 800fb44:	6078      	str	r0, [r7, #4]
 800fb46:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	781a      	ldrb	r2, [r3, #0]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	785a      	ldrb	r2, [r3, #1]
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	789a      	ldrb	r2, [r3, #2]
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	78da      	ldrb	r2, [r3, #3]
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	791a      	ldrb	r2, [r3, #4]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	795a      	ldrb	r2, [r3, #5]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	799a      	ldrb	r2, [r3, #6]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	79da      	ldrb	r2, [r3, #7]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	7a1a      	ldrb	r2, [r3, #8]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	721a      	strb	r2, [r3, #8]
}
 800fb90:	bf00      	nop
 800fb92:	370c      	adds	r7, #12
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr

0800fb9c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b083      	sub	sp, #12
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	781a      	ldrb	r2, [r3, #0]
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	785a      	ldrb	r2, [r3, #1]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	789a      	ldrb	r2, [r3, #2]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	78da      	ldrb	r2, [r3, #3]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	3304      	adds	r3, #4
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	b29a      	uxth	r2, r3
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	3305      	adds	r3, #5
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	b29b      	uxth	r3, r3
 800fbd6:	021b      	lsls	r3, r3, #8
 800fbd8:	b29b      	uxth	r3, r3
 800fbda:	4313      	orrs	r3, r2
 800fbdc:	b29a      	uxth	r2, r3
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	799a      	ldrb	r2, [r3, #6]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	719a      	strb	r2, [r3, #6]
}
 800fbea:	bf00      	nop
 800fbec:	370c      	adds	r7, #12
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf4:	4770      	bx	lr

0800fbf6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800fbf6:	b480      	push	{r7}
 800fbf8:	b087      	sub	sp, #28
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	60f8      	str	r0, [r7, #12]
 800fbfe:	60b9      	str	r1, [r7, #8]
 800fc00:	4613      	mov	r3, r2
 800fc02:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	3301      	adds	r3, #1
 800fc08:	781b      	ldrb	r3, [r3, #0]
 800fc0a:	2b03      	cmp	r3, #3
 800fc0c:	d120      	bne.n	800fc50 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	781b      	ldrb	r3, [r3, #0]
 800fc12:	1e9a      	subs	r2, r3, #2
 800fc14:	88fb      	ldrh	r3, [r7, #6]
 800fc16:	4293      	cmp	r3, r2
 800fc18:	bf28      	it	cs
 800fc1a:	4613      	movcs	r3, r2
 800fc1c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	3302      	adds	r3, #2
 800fc22:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800fc24:	2300      	movs	r3, #0
 800fc26:	82fb      	strh	r3, [r7, #22]
 800fc28:	e00b      	b.n	800fc42 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800fc2a:	8afb      	ldrh	r3, [r7, #22]
 800fc2c:	68fa      	ldr	r2, [r7, #12]
 800fc2e:	4413      	add	r3, r2
 800fc30:	781a      	ldrb	r2, [r3, #0]
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	701a      	strb	r2, [r3, #0]
      pdest++;
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	3301      	adds	r3, #1
 800fc3a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800fc3c:	8afb      	ldrh	r3, [r7, #22]
 800fc3e:	3302      	adds	r3, #2
 800fc40:	82fb      	strh	r3, [r7, #22]
 800fc42:	8afa      	ldrh	r2, [r7, #22]
 800fc44:	8abb      	ldrh	r3, [r7, #20]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d3ef      	bcc.n	800fc2a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	701a      	strb	r2, [r3, #0]
  }
}
 800fc50:	bf00      	nop
 800fc52:	371c      	adds	r7, #28
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr

0800fc5c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b085      	sub	sp, #20
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	881a      	ldrh	r2, [r3, #0]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	781b      	ldrb	r3, [r3, #0]
 800fc6e:	b29b      	uxth	r3, r3
 800fc70:	4413      	add	r3, r2
 800fc72:	b29a      	uxth	r2, r3
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	4413      	add	r3, r2
 800fc82:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fc84:	68fb      	ldr	r3, [r7, #12]
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3714      	adds	r7, #20
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc90:	4770      	bx	lr

0800fc92 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800fc92:	b580      	push	{r7, lr}
 800fc94:	b086      	sub	sp, #24
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	60f8      	str	r0, [r7, #12]
 800fc9a:	60b9      	str	r1, [r7, #8]
 800fc9c:	4613      	mov	r3, r2
 800fc9e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800fca0:	2301      	movs	r3, #1
 800fca2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	789b      	ldrb	r3, [r3, #2]
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d002      	beq.n	800fcb2 <USBH_CtlReq+0x20>
 800fcac:	2b02      	cmp	r3, #2
 800fcae:	d01d      	beq.n	800fcec <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800fcb0:	e043      	b.n	800fd3a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	68ba      	ldr	r2, [r7, #8]
 800fcb6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	88fa      	ldrh	r2, [r7, #6]
 800fcbc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2201      	movs	r2, #1
 800fcc2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2202      	movs	r2, #2
 800fcc8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800fcca:	2301      	movs	r3, #1
 800fccc:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	2203      	movs	r2, #3
 800fcd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fce2:	2300      	movs	r3, #0
 800fce4:	2200      	movs	r2, #0
 800fce6:	f001 f881 	bl	8010dec <osMessageQueuePut>
      break;
 800fcea:	e026      	b.n	800fd3a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800fcec:	68f8      	ldr	r0, [r7, #12]
 800fcee:	f000 f829 	bl	800fd44 <USBH_HandleControl>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800fcf6:	7dfb      	ldrb	r3, [r7, #23]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d002      	beq.n	800fd02 <USBH_CtlReq+0x70>
 800fcfc:	7dfb      	ldrb	r3, [r7, #23]
 800fcfe:	2b03      	cmp	r3, #3
 800fd00:	d106      	bne.n	800fd10 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2201      	movs	r2, #1
 800fd06:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	761a      	strb	r2, [r3, #24]
 800fd0e:	e005      	b.n	800fd1c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800fd10:	7dfb      	ldrb	r3, [r7, #23]
 800fd12:	2b02      	cmp	r3, #2
 800fd14:	d102      	bne.n	800fd1c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2201      	movs	r2, #1
 800fd1a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2203      	movs	r2, #3
 800fd20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fd30:	2300      	movs	r3, #0
 800fd32:	2200      	movs	r2, #0
 800fd34:	f001 f85a 	bl	8010dec <osMessageQueuePut>
      break;
 800fd38:	bf00      	nop
  }
  return status;
 800fd3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3718      	adds	r7, #24
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b086      	sub	sp, #24
 800fd48:	af02      	add	r7, sp, #8
 800fd4a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fd50:	2300      	movs	r3, #0
 800fd52:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	7e1b      	ldrb	r3, [r3, #24]
 800fd58:	3b01      	subs	r3, #1
 800fd5a:	2b0a      	cmp	r3, #10
 800fd5c:	f200 822b 	bhi.w	80101b6 <USBH_HandleControl+0x472>
 800fd60:	a201      	add	r2, pc, #4	; (adr r2, 800fd68 <USBH_HandleControl+0x24>)
 800fd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd66:	bf00      	nop
 800fd68:	0800fd95 	.word	0x0800fd95
 800fd6c:	0800fdaf 	.word	0x0800fdaf
 800fd70:	0800fe51 	.word	0x0800fe51
 800fd74:	0800fe77 	.word	0x0800fe77
 800fd78:	0800ff03 	.word	0x0800ff03
 800fd7c:	0800ff2f 	.word	0x0800ff2f
 800fd80:	0800fff1 	.word	0x0800fff1
 800fd84:	08010013 	.word	0x08010013
 800fd88:	080100a5 	.word	0x080100a5
 800fd8c:	080100cd 	.word	0x080100cd
 800fd90:	0801015f 	.word	0x0801015f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f103 0110 	add.w	r1, r3, #16
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	795b      	ldrb	r3, [r3, #5]
 800fd9e:	461a      	mov	r2, r3
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 fa19 	bl	80101d8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2202      	movs	r2, #2
 800fdaa:	761a      	strb	r2, [r3, #24]
      break;
 800fdac:	e20e      	b.n	80101cc <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	795b      	ldrb	r3, [r3, #5]
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f010 ffd3 	bl	8020d60 <USBH_LL_GetURBState>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800fdbe:	7bbb      	ldrb	r3, [r7, #14]
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d12c      	bne.n	800fe1e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	7c1b      	ldrb	r3, [r3, #16]
 800fdc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fdcc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	8adb      	ldrh	r3, [r3, #22]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d00a      	beq.n	800fdec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800fdd6:	7b7b      	ldrb	r3, [r7, #13]
 800fdd8:	2b80      	cmp	r3, #128	; 0x80
 800fdda:	d103      	bne.n	800fde4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2203      	movs	r2, #3
 800fde0:	761a      	strb	r2, [r3, #24]
 800fde2:	e00d      	b.n	800fe00 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2205      	movs	r2, #5
 800fde8:	761a      	strb	r2, [r3, #24]
 800fdea:	e009      	b.n	800fe00 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800fdec:	7b7b      	ldrb	r3, [r7, #13]
 800fdee:	2b80      	cmp	r3, #128	; 0x80
 800fdf0:	d103      	bne.n	800fdfa <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2209      	movs	r2, #9
 800fdf6:	761a      	strb	r2, [r3, #24]
 800fdf8:	e002      	b.n	800fe00 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2207      	movs	r2, #7
 800fdfe:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2203      	movs	r2, #3
 800fe04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fe14:	2300      	movs	r3, #0
 800fe16:	2200      	movs	r2, #0
 800fe18:	f000 ffe8 	bl	8010dec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fe1c:	e1cd      	b.n	80101ba <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fe1e:	7bbb      	ldrb	r3, [r7, #14]
 800fe20:	2b04      	cmp	r3, #4
 800fe22:	d003      	beq.n	800fe2c <USBH_HandleControl+0xe8>
 800fe24:	7bbb      	ldrb	r3, [r7, #14]
 800fe26:	2b02      	cmp	r3, #2
 800fe28:	f040 81c7 	bne.w	80101ba <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	220b      	movs	r2, #11
 800fe30:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2203      	movs	r2, #3
 800fe36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fe46:	2300      	movs	r3, #0
 800fe48:	2200      	movs	r2, #0
 800fe4a:	f000 ffcf 	bl	8010dec <osMessageQueuePut>
      break;
 800fe4e:	e1b4      	b.n	80101ba <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fe56:	b29a      	uxth	r2, r3
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6899      	ldr	r1, [r3, #8]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	899a      	ldrh	r2, [r3, #12]
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	791b      	ldrb	r3, [r3, #4]
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f000 f9f4 	bl	8010256 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2204      	movs	r2, #4
 800fe72:	761a      	strb	r2, [r3, #24]
      break;
 800fe74:	e1aa      	b.n	80101cc <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	791b      	ldrb	r3, [r3, #4]
 800fe7a:	4619      	mov	r1, r3
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f010 ff6f 	bl	8020d60 <USBH_LL_GetURBState>
 800fe82:	4603      	mov	r3, r0
 800fe84:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800fe86:	7bbb      	ldrb	r3, [r7, #14]
 800fe88:	2b01      	cmp	r3, #1
 800fe8a:	d110      	bne.n	800feae <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2209      	movs	r2, #9
 800fe90:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2203      	movs	r2, #3
 800fe96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fea6:	2300      	movs	r3, #0
 800fea8:	2200      	movs	r2, #0
 800feaa:	f000 ff9f 	bl	8010dec <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800feae:	7bbb      	ldrb	r3, [r7, #14]
 800feb0:	2b05      	cmp	r3, #5
 800feb2:	d110      	bne.n	800fed6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800feb4:	2303      	movs	r3, #3
 800feb6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2203      	movs	r2, #3
 800febc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fecc:	2300      	movs	r3, #0
 800fece:	2200      	movs	r2, #0
 800fed0:	f000 ff8c 	bl	8010dec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fed4:	e173      	b.n	80101be <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800fed6:	7bbb      	ldrb	r3, [r7, #14]
 800fed8:	2b04      	cmp	r3, #4
 800feda:	f040 8170 	bne.w	80101be <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	220b      	movs	r2, #11
 800fee2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2203      	movs	r2, #3
 800fee8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fef8:	2300      	movs	r3, #0
 800fefa:	2200      	movs	r2, #0
 800fefc:	f000 ff76 	bl	8010dec <osMessageQueuePut>
      break;
 800ff00:	e15d      	b.n	80101be <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6899      	ldr	r1, [r3, #8]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	899a      	ldrh	r2, [r3, #12]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	7958      	ldrb	r0, [r3, #5]
 800ff0e:	2301      	movs	r3, #1
 800ff10:	9300      	str	r3, [sp, #0]
 800ff12:	4603      	mov	r3, r0
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f000 f979 	bl	801020c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ff20:	b29a      	uxth	r2, r3
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2206      	movs	r2, #6
 800ff2a:	761a      	strb	r2, [r3, #24]
      break;
 800ff2c:	e14e      	b.n	80101cc <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	795b      	ldrb	r3, [r3, #5]
 800ff32:	4619      	mov	r1, r3
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f010 ff13 	bl	8020d60 <USBH_LL_GetURBState>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ff3e:	7bbb      	ldrb	r3, [r7, #14]
 800ff40:	2b01      	cmp	r3, #1
 800ff42:	d111      	bne.n	800ff68 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2207      	movs	r2, #7
 800ff48:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2203      	movs	r2, #3
 800ff4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ff5e:	2300      	movs	r3, #0
 800ff60:	2200      	movs	r2, #0
 800ff62:	f000 ff43 	bl	8010dec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ff66:	e12c      	b.n	80101c2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800ff68:	7bbb      	ldrb	r3, [r7, #14]
 800ff6a:	2b05      	cmp	r3, #5
 800ff6c:	d113      	bne.n	800ff96 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	220c      	movs	r2, #12
 800ff72:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ff74:	2303      	movs	r3, #3
 800ff76:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2203      	movs	r2, #3
 800ff7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	2200      	movs	r2, #0
 800ff90:	f000 ff2c 	bl	8010dec <osMessageQueuePut>
      break;
 800ff94:	e115      	b.n	80101c2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ff96:	7bbb      	ldrb	r3, [r7, #14]
 800ff98:	2b02      	cmp	r3, #2
 800ff9a:	d111      	bne.n	800ffc0 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2205      	movs	r2, #5
 800ffa0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2203      	movs	r2, #3
 800ffa6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	2200      	movs	r2, #0
 800ffba:	f000 ff17 	bl	8010dec <osMessageQueuePut>
      break;
 800ffbe:	e100      	b.n	80101c2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800ffc0:	7bbb      	ldrb	r3, [r7, #14]
 800ffc2:	2b04      	cmp	r3, #4
 800ffc4:	f040 80fd 	bne.w	80101c2 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	220b      	movs	r2, #11
 800ffcc:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ffce:	2302      	movs	r3, #2
 800ffd0:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2203      	movs	r2, #3
 800ffd6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	2200      	movs	r2, #0
 800ffea:	f000 feff 	bl	8010dec <osMessageQueuePut>
      break;
 800ffee:	e0e8      	b.n	80101c2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	791b      	ldrb	r3, [r3, #4]
 800fff4:	2200      	movs	r2, #0
 800fff6:	2100      	movs	r1, #0
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f000 f92c 	bl	8010256 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010004:	b29a      	uxth	r2, r3
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2208      	movs	r2, #8
 801000e:	761a      	strb	r2, [r3, #24]

      break;
 8010010:	e0dc      	b.n	80101cc <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	791b      	ldrb	r3, [r3, #4]
 8010016:	4619      	mov	r1, r3
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f010 fea1 	bl	8020d60 <USBH_LL_GetURBState>
 801001e:	4603      	mov	r3, r0
 8010020:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010022:	7bbb      	ldrb	r3, [r7, #14]
 8010024:	2b01      	cmp	r3, #1
 8010026:	d113      	bne.n	8010050 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	220d      	movs	r2, #13
 801002c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801002e:	2300      	movs	r3, #0
 8010030:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2203      	movs	r2, #3
 8010036:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010046:	2300      	movs	r3, #0
 8010048:	2200      	movs	r2, #0
 801004a:	f000 fecf 	bl	8010dec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801004e:	e0ba      	b.n	80101c6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8010050:	7bbb      	ldrb	r3, [r7, #14]
 8010052:	2b04      	cmp	r3, #4
 8010054:	d111      	bne.n	801007a <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	220b      	movs	r2, #11
 801005a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2203      	movs	r2, #3
 8010060:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010070:	2300      	movs	r3, #0
 8010072:	2200      	movs	r2, #0
 8010074:	f000 feba 	bl	8010dec <osMessageQueuePut>
      break;
 8010078:	e0a5      	b.n	80101c6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 801007a:	7bbb      	ldrb	r3, [r7, #14]
 801007c:	2b05      	cmp	r3, #5
 801007e:	f040 80a2 	bne.w	80101c6 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 8010082:	2303      	movs	r3, #3
 8010084:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2203      	movs	r2, #3
 801008a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801009a:	2300      	movs	r3, #0
 801009c:	2200      	movs	r2, #0
 801009e:	f000 fea5 	bl	8010dec <osMessageQueuePut>
      break;
 80100a2:	e090      	b.n	80101c6 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	795a      	ldrb	r2, [r3, #5]
 80100a8:	2301      	movs	r3, #1
 80100aa:	9300      	str	r3, [sp, #0]
 80100ac:	4613      	mov	r3, r2
 80100ae:	2200      	movs	r2, #0
 80100b0:	2100      	movs	r1, #0
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f000 f8aa 	bl	801020c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80100be:	b29a      	uxth	r2, r3
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	220a      	movs	r2, #10
 80100c8:	761a      	strb	r2, [r3, #24]
      break;
 80100ca:	e07f      	b.n	80101cc <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	795b      	ldrb	r3, [r3, #5]
 80100d0:	4619      	mov	r1, r3
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f010 fe44 	bl	8020d60 <USBH_LL_GetURBState>
 80100d8:	4603      	mov	r3, r0
 80100da:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80100dc:	7bbb      	ldrb	r3, [r7, #14]
 80100de:	2b01      	cmp	r3, #1
 80100e0:	d113      	bne.n	801010a <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 80100e2:	2300      	movs	r3, #0
 80100e4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	220d      	movs	r2, #13
 80100ea:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2203      	movs	r2, #3
 80100f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010100:	2300      	movs	r3, #0
 8010102:	2200      	movs	r2, #0
 8010104:	f000 fe72 	bl	8010dec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010108:	e05f      	b.n	80101ca <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 801010a:	7bbb      	ldrb	r3, [r7, #14]
 801010c:	2b02      	cmp	r3, #2
 801010e:	d111      	bne.n	8010134 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2209      	movs	r2, #9
 8010114:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2203      	movs	r2, #3
 801011a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801012a:	2300      	movs	r3, #0
 801012c:	2200      	movs	r2, #0
 801012e:	f000 fe5d 	bl	8010dec <osMessageQueuePut>
      break;
 8010132:	e04a      	b.n	80101ca <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 8010134:	7bbb      	ldrb	r3, [r7, #14]
 8010136:	2b04      	cmp	r3, #4
 8010138:	d147      	bne.n	80101ca <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	220b      	movs	r2, #11
 801013e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2203      	movs	r2, #3
 8010144:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010154:	2300      	movs	r3, #0
 8010156:	2200      	movs	r2, #0
 8010158:	f000 fe48 	bl	8010dec <osMessageQueuePut>
      break;
 801015c:	e035      	b.n	80101ca <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	7e5b      	ldrb	r3, [r3, #25]
 8010162:	3301      	adds	r3, #1
 8010164:	b2da      	uxtb	r2, r3
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	765a      	strb	r2, [r3, #25]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	7e5b      	ldrb	r3, [r3, #25]
 801016e:	2b02      	cmp	r3, #2
 8010170:	d806      	bhi.n	8010180 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2201      	movs	r2, #1
 8010176:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2201      	movs	r2, #1
 801017c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801017e:	e025      	b.n	80101cc <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010186:	2106      	movs	r1, #6
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2200      	movs	r2, #0
 8010190:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	795b      	ldrb	r3, [r3, #5]
 8010196:	4619      	mov	r1, r3
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f000 f90d 	bl	80103b8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	791b      	ldrb	r3, [r3, #4]
 80101a2:	4619      	mov	r1, r3
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f000 f907 	bl	80103b8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2200      	movs	r2, #0
 80101ae:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80101b0:	2302      	movs	r3, #2
 80101b2:	73fb      	strb	r3, [r7, #15]
      break;
 80101b4:	e00a      	b.n	80101cc <USBH_HandleControl+0x488>

    default:
      break;
 80101b6:	bf00      	nop
 80101b8:	e008      	b.n	80101cc <USBH_HandleControl+0x488>
      break;
 80101ba:	bf00      	nop
 80101bc:	e006      	b.n	80101cc <USBH_HandleControl+0x488>
      break;
 80101be:	bf00      	nop
 80101c0:	e004      	b.n	80101cc <USBH_HandleControl+0x488>
      break;
 80101c2:	bf00      	nop
 80101c4:	e002      	b.n	80101cc <USBH_HandleControl+0x488>
      break;
 80101c6:	bf00      	nop
 80101c8:	e000      	b.n	80101cc <USBH_HandleControl+0x488>
      break;
 80101ca:	bf00      	nop
  }

  return status;
 80101cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3710      	adds	r7, #16
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	bf00      	nop

080101d8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b088      	sub	sp, #32
 80101dc:	af04      	add	r7, sp, #16
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	60b9      	str	r1, [r7, #8]
 80101e2:	4613      	mov	r3, r2
 80101e4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80101e6:	79f9      	ldrb	r1, [r7, #7]
 80101e8:	2300      	movs	r3, #0
 80101ea:	9303      	str	r3, [sp, #12]
 80101ec:	2308      	movs	r3, #8
 80101ee:	9302      	str	r3, [sp, #8]
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	9301      	str	r3, [sp, #4]
 80101f4:	2300      	movs	r3, #0
 80101f6:	9300      	str	r3, [sp, #0]
 80101f8:	2300      	movs	r3, #0
 80101fa:	2200      	movs	r2, #0
 80101fc:	68f8      	ldr	r0, [r7, #12]
 80101fe:	f010 fd7e 	bl	8020cfe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8010202:	2300      	movs	r3, #0
}
 8010204:	4618      	mov	r0, r3
 8010206:	3710      	adds	r7, #16
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}

0801020c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b088      	sub	sp, #32
 8010210:	af04      	add	r7, sp, #16
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	4611      	mov	r1, r2
 8010218:	461a      	mov	r2, r3
 801021a:	460b      	mov	r3, r1
 801021c:	80fb      	strh	r3, [r7, #6]
 801021e:	4613      	mov	r3, r2
 8010220:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010228:	2b00      	cmp	r3, #0
 801022a:	d001      	beq.n	8010230 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 801022c:	2300      	movs	r3, #0
 801022e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010230:	7979      	ldrb	r1, [r7, #5]
 8010232:	7e3b      	ldrb	r3, [r7, #24]
 8010234:	9303      	str	r3, [sp, #12]
 8010236:	88fb      	ldrh	r3, [r7, #6]
 8010238:	9302      	str	r3, [sp, #8]
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	9301      	str	r3, [sp, #4]
 801023e:	2301      	movs	r3, #1
 8010240:	9300      	str	r3, [sp, #0]
 8010242:	2300      	movs	r3, #0
 8010244:	2200      	movs	r2, #0
 8010246:	68f8      	ldr	r0, [r7, #12]
 8010248:	f010 fd59 	bl	8020cfe <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 801024c:	2300      	movs	r3, #0
}
 801024e:	4618      	mov	r0, r3
 8010250:	3710      	adds	r7, #16
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}

08010256 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8010256:	b580      	push	{r7, lr}
 8010258:	b088      	sub	sp, #32
 801025a:	af04      	add	r7, sp, #16
 801025c:	60f8      	str	r0, [r7, #12]
 801025e:	60b9      	str	r1, [r7, #8]
 8010260:	4611      	mov	r1, r2
 8010262:	461a      	mov	r2, r3
 8010264:	460b      	mov	r3, r1
 8010266:	80fb      	strh	r3, [r7, #6]
 8010268:	4613      	mov	r3, r2
 801026a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801026c:	7979      	ldrb	r1, [r7, #5]
 801026e:	2300      	movs	r3, #0
 8010270:	9303      	str	r3, [sp, #12]
 8010272:	88fb      	ldrh	r3, [r7, #6]
 8010274:	9302      	str	r3, [sp, #8]
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	9301      	str	r3, [sp, #4]
 801027a:	2301      	movs	r3, #1
 801027c:	9300      	str	r3, [sp, #0]
 801027e:	2300      	movs	r3, #0
 8010280:	2201      	movs	r2, #1
 8010282:	68f8      	ldr	r0, [r7, #12]
 8010284:	f010 fd3b 	bl	8020cfe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010288:	2300      	movs	r3, #0

}
 801028a:	4618      	mov	r0, r3
 801028c:	3710      	adds	r7, #16
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}

08010292 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8010292:	b580      	push	{r7, lr}
 8010294:	b088      	sub	sp, #32
 8010296:	af04      	add	r7, sp, #16
 8010298:	60f8      	str	r0, [r7, #12]
 801029a:	60b9      	str	r1, [r7, #8]
 801029c:	4611      	mov	r1, r2
 801029e:	461a      	mov	r2, r3
 80102a0:	460b      	mov	r3, r1
 80102a2:	80fb      	strh	r3, [r7, #6]
 80102a4:	4613      	mov	r3, r2
 80102a6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d001      	beq.n	80102b6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80102b2:	2300      	movs	r3, #0
 80102b4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80102b6:	7979      	ldrb	r1, [r7, #5]
 80102b8:	7e3b      	ldrb	r3, [r7, #24]
 80102ba:	9303      	str	r3, [sp, #12]
 80102bc:	88fb      	ldrh	r3, [r7, #6]
 80102be:	9302      	str	r3, [sp, #8]
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	9301      	str	r3, [sp, #4]
 80102c4:	2301      	movs	r3, #1
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	2302      	movs	r3, #2
 80102ca:	2200      	movs	r2, #0
 80102cc:	68f8      	ldr	r0, [r7, #12]
 80102ce:	f010 fd16 	bl	8020cfe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80102d2:	2300      	movs	r3, #0
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3710      	adds	r7, #16
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}

080102dc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b088      	sub	sp, #32
 80102e0:	af04      	add	r7, sp, #16
 80102e2:	60f8      	str	r0, [r7, #12]
 80102e4:	60b9      	str	r1, [r7, #8]
 80102e6:	4611      	mov	r1, r2
 80102e8:	461a      	mov	r2, r3
 80102ea:	460b      	mov	r3, r1
 80102ec:	80fb      	strh	r3, [r7, #6]
 80102ee:	4613      	mov	r3, r2
 80102f0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80102f2:	7979      	ldrb	r1, [r7, #5]
 80102f4:	2300      	movs	r3, #0
 80102f6:	9303      	str	r3, [sp, #12]
 80102f8:	88fb      	ldrh	r3, [r7, #6]
 80102fa:	9302      	str	r3, [sp, #8]
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	9301      	str	r3, [sp, #4]
 8010300:	2301      	movs	r3, #1
 8010302:	9300      	str	r3, [sp, #0]
 8010304:	2302      	movs	r3, #2
 8010306:	2201      	movs	r2, #1
 8010308:	68f8      	ldr	r0, [r7, #12]
 801030a:	f010 fcf8 	bl	8020cfe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801030e:	2300      	movs	r3, #0
}
 8010310:	4618      	mov	r0, r3
 8010312:	3710      	adds	r7, #16
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}

08010318 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b086      	sub	sp, #24
 801031c:	af04      	add	r7, sp, #16
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	4608      	mov	r0, r1
 8010322:	4611      	mov	r1, r2
 8010324:	461a      	mov	r2, r3
 8010326:	4603      	mov	r3, r0
 8010328:	70fb      	strb	r3, [r7, #3]
 801032a:	460b      	mov	r3, r1
 801032c:	70bb      	strb	r3, [r7, #2]
 801032e:	4613      	mov	r3, r2
 8010330:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8010332:	7878      	ldrb	r0, [r7, #1]
 8010334:	78ba      	ldrb	r2, [r7, #2]
 8010336:	78f9      	ldrb	r1, [r7, #3]
 8010338:	8b3b      	ldrh	r3, [r7, #24]
 801033a:	9302      	str	r3, [sp, #8]
 801033c:	7d3b      	ldrb	r3, [r7, #20]
 801033e:	9301      	str	r3, [sp, #4]
 8010340:	7c3b      	ldrb	r3, [r7, #16]
 8010342:	9300      	str	r3, [sp, #0]
 8010344:	4603      	mov	r3, r0
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f010 fc8b 	bl	8020c62 <USBH_LL_OpenPipe>

  return USBH_OK;
 801034c:	2300      	movs	r3, #0
}
 801034e:	4618      	mov	r0, r3
 8010350:	3708      	adds	r7, #8
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}

08010356 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8010356:	b580      	push	{r7, lr}
 8010358:	b082      	sub	sp, #8
 801035a:	af00      	add	r7, sp, #0
 801035c:	6078      	str	r0, [r7, #4]
 801035e:	460b      	mov	r3, r1
 8010360:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8010362:	78fb      	ldrb	r3, [r7, #3]
 8010364:	4619      	mov	r1, r3
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f010 fcaa 	bl	8020cc0 <USBH_LL_ClosePipe>

  return USBH_OK;
 801036c:	2300      	movs	r3, #0
}
 801036e:	4618      	mov	r0, r3
 8010370:	3708      	adds	r7, #8
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}

08010376 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8010376:	b580      	push	{r7, lr}
 8010378:	b084      	sub	sp, #16
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
 801037e:	460b      	mov	r3, r1
 8010380:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f000 f836 	bl	80103f4 <USBH_GetFreePipe>
 8010388:	4603      	mov	r3, r0
 801038a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 801038c:	89fb      	ldrh	r3, [r7, #14]
 801038e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010392:	4293      	cmp	r3, r2
 8010394:	d00a      	beq.n	80103ac <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8010396:	78fa      	ldrb	r2, [r7, #3]
 8010398:	89fb      	ldrh	r3, [r7, #14]
 801039a:	f003 030f 	and.w	r3, r3, #15
 801039e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80103a2:	6879      	ldr	r1, [r7, #4]
 80103a4:	33e0      	adds	r3, #224	; 0xe0
 80103a6:	009b      	lsls	r3, r3, #2
 80103a8:	440b      	add	r3, r1
 80103aa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80103ac:	89fb      	ldrh	r3, [r7, #14]
 80103ae:	b2db      	uxtb	r3, r3
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3710      	adds	r7, #16
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	460b      	mov	r3, r1
 80103c2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80103c4:	78fb      	ldrb	r3, [r7, #3]
 80103c6:	2b0a      	cmp	r3, #10
 80103c8:	d80d      	bhi.n	80103e6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80103ca:	78fb      	ldrb	r3, [r7, #3]
 80103cc:	687a      	ldr	r2, [r7, #4]
 80103ce:	33e0      	adds	r3, #224	; 0xe0
 80103d0:	009b      	lsls	r3, r3, #2
 80103d2:	4413      	add	r3, r2
 80103d4:	685a      	ldr	r2, [r3, #4]
 80103d6:	78fb      	ldrb	r3, [r7, #3]
 80103d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80103dc:	6879      	ldr	r1, [r7, #4]
 80103de:	33e0      	adds	r3, #224	; 0xe0
 80103e0:	009b      	lsls	r3, r3, #2
 80103e2:	440b      	add	r3, r1
 80103e4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80103e6:	2300      	movs	r3, #0
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	370c      	adds	r7, #12
 80103ec:	46bd      	mov	sp, r7
 80103ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f2:	4770      	bx	lr

080103f4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b085      	sub	sp, #20
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80103fc:	2300      	movs	r3, #0
 80103fe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8010400:	2300      	movs	r3, #0
 8010402:	73fb      	strb	r3, [r7, #15]
 8010404:	e00f      	b.n	8010426 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010406:	7bfb      	ldrb	r3, [r7, #15]
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	33e0      	adds	r3, #224	; 0xe0
 801040c:	009b      	lsls	r3, r3, #2
 801040e:	4413      	add	r3, r2
 8010410:	685b      	ldr	r3, [r3, #4]
 8010412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010416:	2b00      	cmp	r3, #0
 8010418:	d102      	bne.n	8010420 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 801041a:	7bfb      	ldrb	r3, [r7, #15]
 801041c:	b29b      	uxth	r3, r3
 801041e:	e007      	b.n	8010430 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8010420:	7bfb      	ldrb	r3, [r7, #15]
 8010422:	3301      	adds	r3, #1
 8010424:	73fb      	strb	r3, [r7, #15]
 8010426:	7bfb      	ldrb	r3, [r7, #15]
 8010428:	2b0a      	cmp	r3, #10
 801042a:	d9ec      	bls.n	8010406 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 801042c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8010430:	4618      	mov	r0, r3
 8010432:	3714      	adds	r7, #20
 8010434:	46bd      	mov	sp, r7
 8010436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043a:	4770      	bx	lr

0801043c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801043c:	b480      	push	{r7}
 801043e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8010440:	bf00      	nop
 8010442:	46bd      	mov	sp, r7
 8010444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010448:	4770      	bx	lr
	...

0801044c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801044c:	b480      	push	{r7}
 801044e:	b085      	sub	sp, #20
 8010450:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010452:	f3ef 8305 	mrs	r3, IPSR
 8010456:	60bb      	str	r3, [r7, #8]
  return(result);
 8010458:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801045a:	2b00      	cmp	r3, #0
 801045c:	d10f      	bne.n	801047e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801045e:	f3ef 8310 	mrs	r3, PRIMASK
 8010462:	607b      	str	r3, [r7, #4]
  return(result);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d105      	bne.n	8010476 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801046a:	f3ef 8311 	mrs	r3, BASEPRI
 801046e:	603b      	str	r3, [r7, #0]
  return(result);
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d007      	beq.n	8010486 <osKernelInitialize+0x3a>
 8010476:	4b0e      	ldr	r3, [pc, #56]	; (80104b0 <osKernelInitialize+0x64>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	2b02      	cmp	r3, #2
 801047c:	d103      	bne.n	8010486 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801047e:	f06f 0305 	mvn.w	r3, #5
 8010482:	60fb      	str	r3, [r7, #12]
 8010484:	e00c      	b.n	80104a0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010486:	4b0a      	ldr	r3, [pc, #40]	; (80104b0 <osKernelInitialize+0x64>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d105      	bne.n	801049a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801048e:	4b08      	ldr	r3, [pc, #32]	; (80104b0 <osKernelInitialize+0x64>)
 8010490:	2201      	movs	r2, #1
 8010492:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010494:	2300      	movs	r3, #0
 8010496:	60fb      	str	r3, [r7, #12]
 8010498:	e002      	b.n	80104a0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801049a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801049e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80104a0:	68fb      	ldr	r3, [r7, #12]
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3714      	adds	r7, #20
 80104a6:	46bd      	mov	sp, r7
 80104a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ac:	4770      	bx	lr
 80104ae:	bf00      	nop
 80104b0:	2000025c 	.word	0x2000025c

080104b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b084      	sub	sp, #16
 80104b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104ba:	f3ef 8305 	mrs	r3, IPSR
 80104be:	60bb      	str	r3, [r7, #8]
  return(result);
 80104c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d10f      	bne.n	80104e6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104c6:	f3ef 8310 	mrs	r3, PRIMASK
 80104ca:	607b      	str	r3, [r7, #4]
  return(result);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d105      	bne.n	80104de <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80104d2:	f3ef 8311 	mrs	r3, BASEPRI
 80104d6:	603b      	str	r3, [r7, #0]
  return(result);
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d007      	beq.n	80104ee <osKernelStart+0x3a>
 80104de:	4b0f      	ldr	r3, [pc, #60]	; (801051c <osKernelStart+0x68>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	2b02      	cmp	r3, #2
 80104e4:	d103      	bne.n	80104ee <osKernelStart+0x3a>
    stat = osErrorISR;
 80104e6:	f06f 0305 	mvn.w	r3, #5
 80104ea:	60fb      	str	r3, [r7, #12]
 80104ec:	e010      	b.n	8010510 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80104ee:	4b0b      	ldr	r3, [pc, #44]	; (801051c <osKernelStart+0x68>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	2b01      	cmp	r3, #1
 80104f4:	d109      	bne.n	801050a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80104f6:	f7ff ffa1 	bl	801043c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80104fa:	4b08      	ldr	r3, [pc, #32]	; (801051c <osKernelStart+0x68>)
 80104fc:	2202      	movs	r2, #2
 80104fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010500:	f002 f9ee 	bl	80128e0 <vTaskStartScheduler>
      stat = osOK;
 8010504:	2300      	movs	r3, #0
 8010506:	60fb      	str	r3, [r7, #12]
 8010508:	e002      	b.n	8010510 <osKernelStart+0x5c>
    } else {
      stat = osError;
 801050a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801050e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010510:	68fb      	ldr	r3, [r7, #12]
}
 8010512:	4618      	mov	r0, r3
 8010514:	3710      	adds	r7, #16
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	2000025c 	.word	0x2000025c

08010520 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8010520:	b580      	push	{r7, lr}
 8010522:	b084      	sub	sp, #16
 8010524:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010526:	f3ef 8305 	mrs	r3, IPSR
 801052a:	60bb      	str	r3, [r7, #8]
  return(result);
 801052c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 801052e:	2b00      	cmp	r3, #0
 8010530:	d10f      	bne.n	8010552 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010532:	f3ef 8310 	mrs	r3, PRIMASK
 8010536:	607b      	str	r3, [r7, #4]
  return(result);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d105      	bne.n	801054a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801053e:	f3ef 8311 	mrs	r3, BASEPRI
 8010542:	603b      	str	r3, [r7, #0]
  return(result);
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d007      	beq.n	801055a <osKernelGetTickCount+0x3a>
 801054a:	4b08      	ldr	r3, [pc, #32]	; (801056c <osKernelGetTickCount+0x4c>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	2b02      	cmp	r3, #2
 8010550:	d103      	bne.n	801055a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8010552:	f002 fae9 	bl	8012b28 <xTaskGetTickCountFromISR>
 8010556:	60f8      	str	r0, [r7, #12]
 8010558:	e002      	b.n	8010560 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 801055a:	f002 fad5 	bl	8012b08 <xTaskGetTickCount>
 801055e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8010560:	68fb      	ldr	r3, [r7, #12]
}
 8010562:	4618      	mov	r0, r3
 8010564:	3710      	adds	r7, #16
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
 801056a:	bf00      	nop
 801056c:	2000025c 	.word	0x2000025c

08010570 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010570:	b580      	push	{r7, lr}
 8010572:	b090      	sub	sp, #64	; 0x40
 8010574:	af04      	add	r7, sp, #16
 8010576:	60f8      	str	r0, [r7, #12]
 8010578:	60b9      	str	r1, [r7, #8]
 801057a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801057c:	2300      	movs	r3, #0
 801057e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010580:	f3ef 8305 	mrs	r3, IPSR
 8010584:	61fb      	str	r3, [r7, #28]
  return(result);
 8010586:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8010588:	2b00      	cmp	r3, #0
 801058a:	f040 808f 	bne.w	80106ac <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801058e:	f3ef 8310 	mrs	r3, PRIMASK
 8010592:	61bb      	str	r3, [r7, #24]
  return(result);
 8010594:	69bb      	ldr	r3, [r7, #24]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d105      	bne.n	80105a6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801059a:	f3ef 8311 	mrs	r3, BASEPRI
 801059e:	617b      	str	r3, [r7, #20]
  return(result);
 80105a0:	697b      	ldr	r3, [r7, #20]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d003      	beq.n	80105ae <osThreadNew+0x3e>
 80105a6:	4b44      	ldr	r3, [pc, #272]	; (80106b8 <osThreadNew+0x148>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	2b02      	cmp	r3, #2
 80105ac:	d07e      	beq.n	80106ac <osThreadNew+0x13c>
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d07b      	beq.n	80106ac <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80105b4:	2380      	movs	r3, #128	; 0x80
 80105b6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80105b8:	2318      	movs	r3, #24
 80105ba:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80105bc:	2300      	movs	r3, #0
 80105be:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80105c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d045      	beq.n	8010658 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d002      	beq.n	80105da <osThreadNew+0x6a>
        name = attr->name;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	699b      	ldr	r3, [r3, #24]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d002      	beq.n	80105e8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	699b      	ldr	r3, [r3, #24]
 80105e6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80105e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d008      	beq.n	8010600 <osThreadNew+0x90>
 80105ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f0:	2b38      	cmp	r3, #56	; 0x38
 80105f2:	d805      	bhi.n	8010600 <osThreadNew+0x90>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	685b      	ldr	r3, [r3, #4]
 80105f8:	f003 0301 	and.w	r3, r3, #1
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d001      	beq.n	8010604 <osThreadNew+0x94>
        return (NULL);
 8010600:	2300      	movs	r3, #0
 8010602:	e054      	b.n	80106ae <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	695b      	ldr	r3, [r3, #20]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d003      	beq.n	8010614 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	695b      	ldr	r3, [r3, #20]
 8010610:	089b      	lsrs	r3, r3, #2
 8010612:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	689b      	ldr	r3, [r3, #8]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d00e      	beq.n	801063a <osThreadNew+0xca>
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	68db      	ldr	r3, [r3, #12]
 8010620:	2b5f      	cmp	r3, #95	; 0x5f
 8010622:	d90a      	bls.n	801063a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010628:	2b00      	cmp	r3, #0
 801062a:	d006      	beq.n	801063a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	695b      	ldr	r3, [r3, #20]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d002      	beq.n	801063a <osThreadNew+0xca>
        mem = 1;
 8010634:	2301      	movs	r3, #1
 8010636:	623b      	str	r3, [r7, #32]
 8010638:	e010      	b.n	801065c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	689b      	ldr	r3, [r3, #8]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d10c      	bne.n	801065c <osThreadNew+0xec>
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	68db      	ldr	r3, [r3, #12]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d108      	bne.n	801065c <osThreadNew+0xec>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	691b      	ldr	r3, [r3, #16]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d104      	bne.n	801065c <osThreadNew+0xec>
          mem = 0;
 8010652:	2300      	movs	r3, #0
 8010654:	623b      	str	r3, [r7, #32]
 8010656:	e001      	b.n	801065c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010658:	2300      	movs	r3, #0
 801065a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801065c:	6a3b      	ldr	r3, [r7, #32]
 801065e:	2b01      	cmp	r3, #1
 8010660:	d110      	bne.n	8010684 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010666:	687a      	ldr	r2, [r7, #4]
 8010668:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801066a:	9202      	str	r2, [sp, #8]
 801066c:	9301      	str	r3, [sp, #4]
 801066e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010670:	9300      	str	r3, [sp, #0]
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010676:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010678:	68f8      	ldr	r0, [r7, #12]
 801067a:	f001 fe77 	bl	801236c <xTaskCreateStatic>
 801067e:	4603      	mov	r3, r0
 8010680:	613b      	str	r3, [r7, #16]
 8010682:	e013      	b.n	80106ac <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8010684:	6a3b      	ldr	r3, [r7, #32]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d110      	bne.n	80106ac <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801068a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801068c:	b29a      	uxth	r2, r3
 801068e:	f107 0310 	add.w	r3, r7, #16
 8010692:	9301      	str	r3, [sp, #4]
 8010694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010696:	9300      	str	r3, [sp, #0]
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801069c:	68f8      	ldr	r0, [r7, #12]
 801069e:	f001 fec5 	bl	801242c <xTaskCreate>
 80106a2:	4603      	mov	r3, r0
 80106a4:	2b01      	cmp	r3, #1
 80106a6:	d001      	beq.n	80106ac <osThreadNew+0x13c>
          hTask = NULL;
 80106a8:	2300      	movs	r3, #0
 80106aa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80106ac:	693b      	ldr	r3, [r7, #16]
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3730      	adds	r7, #48	; 0x30
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}
 80106b6:	bf00      	nop
 80106b8:	2000025c 	.word	0x2000025c

080106bc <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80106bc:	b580      	push	{r7, lr}
 80106be:	b088      	sub	sp, #32
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80106c8:	f3ef 8305 	mrs	r3, IPSR
 80106cc:	613b      	str	r3, [r7, #16]
  return(result);
 80106ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d10f      	bne.n	80106f4 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106d4:	f3ef 8310 	mrs	r3, PRIMASK
 80106d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d105      	bne.n	80106ec <osThreadTerminate+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80106e0:	f3ef 8311 	mrs	r3, BASEPRI
 80106e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d007      	beq.n	80106fc <osThreadTerminate+0x40>
 80106ec:	4b12      	ldr	r3, [pc, #72]	; (8010738 <osThreadTerminate+0x7c>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	2b02      	cmp	r3, #2
 80106f2:	d103      	bne.n	80106fc <osThreadTerminate+0x40>
    stat = osErrorISR;
 80106f4:	f06f 0305 	mvn.w	r3, #5
 80106f8:	61fb      	str	r3, [r7, #28]
 80106fa:	e017      	b.n	801072c <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 80106fc:	69bb      	ldr	r3, [r7, #24]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d103      	bne.n	801070a <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 8010702:	f06f 0303 	mvn.w	r3, #3
 8010706:	61fb      	str	r3, [r7, #28]
 8010708:	e010      	b.n	801072c <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 801070a:	69b8      	ldr	r0, [r7, #24]
 801070c:	f002 f880 	bl	8012810 <eTaskGetState>
 8010710:	4603      	mov	r3, r0
 8010712:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 8010714:	7dfb      	ldrb	r3, [r7, #23]
 8010716:	2b04      	cmp	r3, #4
 8010718:	d005      	beq.n	8010726 <osThreadTerminate+0x6a>
      stat = osOK;
 801071a:	2300      	movs	r3, #0
 801071c:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 801071e:	69b8      	ldr	r0, [r7, #24]
 8010720:	f001 ffcc 	bl	80126bc <vTaskDelete>
 8010724:	e002      	b.n	801072c <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 8010726:	f06f 0302 	mvn.w	r3, #2
 801072a:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 801072c:	69fb      	ldr	r3, [r7, #28]
}
 801072e:	4618      	mov	r0, r3
 8010730:	3720      	adds	r7, #32
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}
 8010736:	bf00      	nop
 8010738:	2000025c 	.word	0x2000025c

0801073c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 801073c:	b580      	push	{r7, lr}
 801073e:	b086      	sub	sp, #24
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010744:	f3ef 8305 	mrs	r3, IPSR
 8010748:	613b      	str	r3, [r7, #16]
  return(result);
 801074a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 801074c:	2b00      	cmp	r3, #0
 801074e:	d10f      	bne.n	8010770 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010750:	f3ef 8310 	mrs	r3, PRIMASK
 8010754:	60fb      	str	r3, [r7, #12]
  return(result);
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d105      	bne.n	8010768 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801075c:	f3ef 8311 	mrs	r3, BASEPRI
 8010760:	60bb      	str	r3, [r7, #8]
  return(result);
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d007      	beq.n	8010778 <osDelay+0x3c>
 8010768:	4b0a      	ldr	r3, [pc, #40]	; (8010794 <osDelay+0x58>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	2b02      	cmp	r3, #2
 801076e:	d103      	bne.n	8010778 <osDelay+0x3c>
    stat = osErrorISR;
 8010770:	f06f 0305 	mvn.w	r3, #5
 8010774:	617b      	str	r3, [r7, #20]
 8010776:	e007      	b.n	8010788 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010778:	2300      	movs	r3, #0
 801077a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d002      	beq.n	8010788 <osDelay+0x4c>
      vTaskDelay(ticks);
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f002 f80e 	bl	80127a4 <vTaskDelay>
    }
  }

  return (stat);
 8010788:	697b      	ldr	r3, [r7, #20]
}
 801078a:	4618      	mov	r0, r3
 801078c:	3718      	adds	r7, #24
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	2000025c 	.word	0x2000025c

08010798 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8010798:	b580      	push	{r7, lr}
 801079a:	b08a      	sub	sp, #40	; 0x28
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80107a0:	2300      	movs	r3, #0
 80107a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80107a4:	f3ef 8305 	mrs	r3, IPSR
 80107a8:	613b      	str	r3, [r7, #16]
  return(result);
 80107aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	f040 8085 	bne.w	80108bc <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107b2:	f3ef 8310 	mrs	r3, PRIMASK
 80107b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d105      	bne.n	80107ca <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80107be:	f3ef 8311 	mrs	r3, BASEPRI
 80107c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d003      	beq.n	80107d2 <osMutexNew+0x3a>
 80107ca:	4b3f      	ldr	r3, [pc, #252]	; (80108c8 <osMutexNew+0x130>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	2b02      	cmp	r3, #2
 80107d0:	d074      	beq.n	80108bc <osMutexNew+0x124>
    if (attr != NULL) {
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d003      	beq.n	80107e0 <osMutexNew+0x48>
      type = attr->attr_bits;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	685b      	ldr	r3, [r3, #4]
 80107dc:	623b      	str	r3, [r7, #32]
 80107de:	e001      	b.n	80107e4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80107e0:	2300      	movs	r3, #0
 80107e2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80107e4:	6a3b      	ldr	r3, [r7, #32]
 80107e6:	f003 0301 	and.w	r3, r3, #1
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d002      	beq.n	80107f4 <osMutexNew+0x5c>
      rmtx = 1U;
 80107ee:	2301      	movs	r3, #1
 80107f0:	61fb      	str	r3, [r7, #28]
 80107f2:	e001      	b.n	80107f8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80107f4:	2300      	movs	r3, #0
 80107f6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80107f8:	6a3b      	ldr	r3, [r7, #32]
 80107fa:	f003 0308 	and.w	r3, r3, #8
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d15c      	bne.n	80108bc <osMutexNew+0x124>
      mem = -1;
 8010802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010806:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d015      	beq.n	801083a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	689b      	ldr	r3, [r3, #8]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d006      	beq.n	8010824 <osMutexNew+0x8c>
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	2b4f      	cmp	r3, #79	; 0x4f
 801081c:	d902      	bls.n	8010824 <osMutexNew+0x8c>
          mem = 1;
 801081e:	2301      	movs	r3, #1
 8010820:	61bb      	str	r3, [r7, #24]
 8010822:	e00c      	b.n	801083e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	689b      	ldr	r3, [r3, #8]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d108      	bne.n	801083e <osMutexNew+0xa6>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d104      	bne.n	801083e <osMutexNew+0xa6>
            mem = 0;
 8010834:	2300      	movs	r3, #0
 8010836:	61bb      	str	r3, [r7, #24]
 8010838:	e001      	b.n	801083e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 801083a:	2300      	movs	r3, #0
 801083c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 801083e:	69bb      	ldr	r3, [r7, #24]
 8010840:	2b01      	cmp	r3, #1
 8010842:	d112      	bne.n	801086a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8010844:	69fb      	ldr	r3, [r7, #28]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d007      	beq.n	801085a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	689b      	ldr	r3, [r3, #8]
 801084e:	4619      	mov	r1, r3
 8010850:	2004      	movs	r0, #4
 8010852:	f000 fe1e 	bl	8011492 <xQueueCreateMutexStatic>
 8010856:	6278      	str	r0, [r7, #36]	; 0x24
 8010858:	e016      	b.n	8010888 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	689b      	ldr	r3, [r3, #8]
 801085e:	4619      	mov	r1, r3
 8010860:	2001      	movs	r0, #1
 8010862:	f000 fe16 	bl	8011492 <xQueueCreateMutexStatic>
 8010866:	6278      	str	r0, [r7, #36]	; 0x24
 8010868:	e00e      	b.n	8010888 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 801086a:	69bb      	ldr	r3, [r7, #24]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d10b      	bne.n	8010888 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8010870:	69fb      	ldr	r3, [r7, #28]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d004      	beq.n	8010880 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8010876:	2004      	movs	r0, #4
 8010878:	f000 fdf3 	bl	8011462 <xQueueCreateMutex>
 801087c:	6278      	str	r0, [r7, #36]	; 0x24
 801087e:	e003      	b.n	8010888 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8010880:	2001      	movs	r0, #1
 8010882:	f000 fdee 	bl	8011462 <xQueueCreateMutex>
 8010886:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8010888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088a:	2b00      	cmp	r3, #0
 801088c:	d00c      	beq.n	80108a8 <osMutexNew+0x110>
        if (attr != NULL) {
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d003      	beq.n	801089c <osMutexNew+0x104>
          name = attr->name;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	617b      	str	r3, [r7, #20]
 801089a:	e001      	b.n	80108a0 <osMutexNew+0x108>
        } else {
          name = NULL;
 801089c:	2300      	movs	r3, #0
 801089e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80108a0:	6979      	ldr	r1, [r7, #20]
 80108a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80108a4:	f001 fcdc 	bl	8012260 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80108a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d006      	beq.n	80108bc <osMutexNew+0x124>
 80108ae:	69fb      	ldr	r3, [r7, #28]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d003      	beq.n	80108bc <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80108b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b6:	f043 0301 	orr.w	r3, r3, #1
 80108ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80108bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3728      	adds	r7, #40	; 0x28
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	2000025c 	.word	0x2000025c

080108cc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b088      	sub	sp, #32
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f023 0301 	bic.w	r3, r3, #1
 80108dc:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f003 0301 	and.w	r3, r3, #1
 80108e4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80108e6:	2300      	movs	r3, #0
 80108e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108ea:	f3ef 8305 	mrs	r3, IPSR
 80108ee:	613b      	str	r3, [r7, #16]
  return(result);
 80108f0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d10f      	bne.n	8010916 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108f6:	f3ef 8310 	mrs	r3, PRIMASK
 80108fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d105      	bne.n	801090e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010902:	f3ef 8311 	mrs	r3, BASEPRI
 8010906:	60bb      	str	r3, [r7, #8]
  return(result);
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d007      	beq.n	801091e <osMutexAcquire+0x52>
 801090e:	4b1d      	ldr	r3, [pc, #116]	; (8010984 <osMutexAcquire+0xb8>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	2b02      	cmp	r3, #2
 8010914:	d103      	bne.n	801091e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8010916:	f06f 0305 	mvn.w	r3, #5
 801091a:	61fb      	str	r3, [r7, #28]
 801091c:	e02c      	b.n	8010978 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 801091e:	69bb      	ldr	r3, [r7, #24]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d103      	bne.n	801092c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8010924:	f06f 0303 	mvn.w	r3, #3
 8010928:	61fb      	str	r3, [r7, #28]
 801092a:	e025      	b.n	8010978 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d011      	beq.n	8010956 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8010932:	6839      	ldr	r1, [r7, #0]
 8010934:	69b8      	ldr	r0, [r7, #24]
 8010936:	f000 fdfc 	bl	8011532 <xQueueTakeMutexRecursive>
 801093a:	4603      	mov	r3, r0
 801093c:	2b01      	cmp	r3, #1
 801093e:	d01b      	beq.n	8010978 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d003      	beq.n	801094e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8010946:	f06f 0301 	mvn.w	r3, #1
 801094a:	61fb      	str	r3, [r7, #28]
 801094c:	e014      	b.n	8010978 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801094e:	f06f 0302 	mvn.w	r3, #2
 8010952:	61fb      	str	r3, [r7, #28]
 8010954:	e010      	b.n	8010978 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8010956:	6839      	ldr	r1, [r7, #0]
 8010958:	69b8      	ldr	r0, [r7, #24]
 801095a:	f001 f9a1 	bl	8011ca0 <xQueueSemaphoreTake>
 801095e:	4603      	mov	r3, r0
 8010960:	2b01      	cmp	r3, #1
 8010962:	d009      	beq.n	8010978 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d003      	beq.n	8010972 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 801096a:	f06f 0301 	mvn.w	r3, #1
 801096e:	61fb      	str	r3, [r7, #28]
 8010970:	e002      	b.n	8010978 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010972:	f06f 0302 	mvn.w	r3, #2
 8010976:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010978:	69fb      	ldr	r3, [r7, #28]
}
 801097a:	4618      	mov	r0, r3
 801097c:	3720      	adds	r7, #32
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	2000025c 	.word	0x2000025c

08010988 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8010988:	b580      	push	{r7, lr}
 801098a:	b088      	sub	sp, #32
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f023 0301 	bic.w	r3, r3, #1
 8010996:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f003 0301 	and.w	r3, r3, #1
 801099e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80109a0:	2300      	movs	r3, #0
 80109a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80109a4:	f3ef 8305 	mrs	r3, IPSR
 80109a8:	613b      	str	r3, [r7, #16]
  return(result);
 80109aa:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d10f      	bne.n	80109d0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109b0:	f3ef 8310 	mrs	r3, PRIMASK
 80109b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d105      	bne.n	80109c8 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80109bc:	f3ef 8311 	mrs	r3, BASEPRI
 80109c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d007      	beq.n	80109d8 <osMutexRelease+0x50>
 80109c8:	4b16      	ldr	r3, [pc, #88]	; (8010a24 <osMutexRelease+0x9c>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	2b02      	cmp	r3, #2
 80109ce:	d103      	bne.n	80109d8 <osMutexRelease+0x50>
    stat = osErrorISR;
 80109d0:	f06f 0305 	mvn.w	r3, #5
 80109d4:	61fb      	str	r3, [r7, #28]
 80109d6:	e01f      	b.n	8010a18 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80109d8:	69bb      	ldr	r3, [r7, #24]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d103      	bne.n	80109e6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80109de:	f06f 0303 	mvn.w	r3, #3
 80109e2:	61fb      	str	r3, [r7, #28]
 80109e4:	e018      	b.n	8010a18 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d009      	beq.n	8010a00 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80109ec:	69b8      	ldr	r0, [r7, #24]
 80109ee:	f000 fd6b 	bl	80114c8 <xQueueGiveMutexRecursive>
 80109f2:	4603      	mov	r3, r0
 80109f4:	2b01      	cmp	r3, #1
 80109f6:	d00f      	beq.n	8010a18 <osMutexRelease+0x90>
        stat = osErrorResource;
 80109f8:	f06f 0302 	mvn.w	r3, #2
 80109fc:	61fb      	str	r3, [r7, #28]
 80109fe:	e00b      	b.n	8010a18 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8010a00:	2300      	movs	r3, #0
 8010a02:	2200      	movs	r2, #0
 8010a04:	2100      	movs	r1, #0
 8010a06:	69b8      	ldr	r0, [r7, #24]
 8010a08:	f000 fe38 	bl	801167c <xQueueGenericSend>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	2b01      	cmp	r3, #1
 8010a10:	d002      	beq.n	8010a18 <osMutexRelease+0x90>
        stat = osErrorResource;
 8010a12:	f06f 0302 	mvn.w	r3, #2
 8010a16:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8010a18:	69fb      	ldr	r3, [r7, #28]
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3720      	adds	r7, #32
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}
 8010a22:	bf00      	nop
 8010a24:	2000025c 	.word	0x2000025c

08010a28 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b08c      	sub	sp, #48	; 0x30
 8010a2c:	af02      	add	r7, sp, #8
 8010a2e:	60f8      	str	r0, [r7, #12]
 8010a30:	60b9      	str	r1, [r7, #8]
 8010a32:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010a34:	2300      	movs	r3, #0
 8010a36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a38:	f3ef 8305 	mrs	r3, IPSR
 8010a3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8010a3e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	f040 8087 	bne.w	8010b54 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a46:	f3ef 8310 	mrs	r3, PRIMASK
 8010a4a:	617b      	str	r3, [r7, #20]
  return(result);
 8010a4c:	697b      	ldr	r3, [r7, #20]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d105      	bne.n	8010a5e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010a52:	f3ef 8311 	mrs	r3, BASEPRI
 8010a56:	613b      	str	r3, [r7, #16]
  return(result);
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d003      	beq.n	8010a66 <osSemaphoreNew+0x3e>
 8010a5e:	4b40      	ldr	r3, [pc, #256]	; (8010b60 <osSemaphoreNew+0x138>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	2b02      	cmp	r3, #2
 8010a64:	d076      	beq.n	8010b54 <osSemaphoreNew+0x12c>
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d073      	beq.n	8010b54 <osSemaphoreNew+0x12c>
 8010a6c:	68ba      	ldr	r2, [r7, #8]
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	429a      	cmp	r2, r3
 8010a72:	d86f      	bhi.n	8010b54 <osSemaphoreNew+0x12c>
    mem = -1;
 8010a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a78:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d015      	beq.n	8010aac <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	689b      	ldr	r3, [r3, #8]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d006      	beq.n	8010a96 <osSemaphoreNew+0x6e>
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	68db      	ldr	r3, [r3, #12]
 8010a8c:	2b4f      	cmp	r3, #79	; 0x4f
 8010a8e:	d902      	bls.n	8010a96 <osSemaphoreNew+0x6e>
        mem = 1;
 8010a90:	2301      	movs	r3, #1
 8010a92:	623b      	str	r3, [r7, #32]
 8010a94:	e00c      	b.n	8010ab0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	689b      	ldr	r3, [r3, #8]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d108      	bne.n	8010ab0 <osSemaphoreNew+0x88>
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	68db      	ldr	r3, [r3, #12]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d104      	bne.n	8010ab0 <osSemaphoreNew+0x88>
          mem = 0;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	623b      	str	r3, [r7, #32]
 8010aaa:	e001      	b.n	8010ab0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8010aac:	2300      	movs	r3, #0
 8010aae:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8010ab0:	6a3b      	ldr	r3, [r7, #32]
 8010ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ab6:	d04d      	beq.n	8010b54 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2b01      	cmp	r3, #1
 8010abc:	d129      	bne.n	8010b12 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8010abe:	6a3b      	ldr	r3, [r7, #32]
 8010ac0:	2b01      	cmp	r3, #1
 8010ac2:	d10b      	bne.n	8010adc <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	689a      	ldr	r2, [r3, #8]
 8010ac8:	2303      	movs	r3, #3
 8010aca:	9300      	str	r3, [sp, #0]
 8010acc:	4613      	mov	r3, r2
 8010ace:	2200      	movs	r2, #0
 8010ad0:	2100      	movs	r1, #0
 8010ad2:	2001      	movs	r0, #1
 8010ad4:	f000 fbca 	bl	801126c <xQueueGenericCreateStatic>
 8010ad8:	6278      	str	r0, [r7, #36]	; 0x24
 8010ada:	e005      	b.n	8010ae8 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8010adc:	2203      	movs	r2, #3
 8010ade:	2100      	movs	r1, #0
 8010ae0:	2001      	movs	r0, #1
 8010ae2:	f000 fc40 	bl	8011366 <xQueueGenericCreate>
 8010ae6:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d022      	beq.n	8010b34 <osSemaphoreNew+0x10c>
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d01f      	beq.n	8010b34 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010af4:	2300      	movs	r3, #0
 8010af6:	2200      	movs	r2, #0
 8010af8:	2100      	movs	r1, #0
 8010afa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010afc:	f000 fdbe 	bl	801167c <xQueueGenericSend>
 8010b00:	4603      	mov	r3, r0
 8010b02:	2b01      	cmp	r3, #1
 8010b04:	d016      	beq.n	8010b34 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8010b06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b08:	f001 fa5d 	bl	8011fc6 <vQueueDelete>
            hSemaphore = NULL;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8010b10:	e010      	b.n	8010b34 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8010b12:	6a3b      	ldr	r3, [r7, #32]
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d108      	bne.n	8010b2a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	689b      	ldr	r3, [r3, #8]
 8010b1c:	461a      	mov	r2, r3
 8010b1e:	68b9      	ldr	r1, [r7, #8]
 8010b20:	68f8      	ldr	r0, [r7, #12]
 8010b22:	f000 fd3d 	bl	80115a0 <xQueueCreateCountingSemaphoreStatic>
 8010b26:	6278      	str	r0, [r7, #36]	; 0x24
 8010b28:	e004      	b.n	8010b34 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010b2a:	68b9      	ldr	r1, [r7, #8]
 8010b2c:	68f8      	ldr	r0, [r7, #12]
 8010b2e:	f000 fd70 	bl	8011612 <xQueueCreateCountingSemaphore>
 8010b32:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d00c      	beq.n	8010b54 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d003      	beq.n	8010b48 <osSemaphoreNew+0x120>
          name = attr->name;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	61fb      	str	r3, [r7, #28]
 8010b46:	e001      	b.n	8010b4c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010b4c:	69f9      	ldr	r1, [r7, #28]
 8010b4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b50:	f001 fb86 	bl	8012260 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3728      	adds	r7, #40	; 0x28
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	2000025c 	.word	0x2000025c

08010b64 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b088      	sub	sp, #32
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
 8010b6c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010b72:	2300      	movs	r3, #0
 8010b74:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010b76:	69bb      	ldr	r3, [r7, #24]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d103      	bne.n	8010b84 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010b7c:	f06f 0303 	mvn.w	r3, #3
 8010b80:	61fb      	str	r3, [r7, #28]
 8010b82:	e04b      	b.n	8010c1c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b84:	f3ef 8305 	mrs	r3, IPSR
 8010b88:	617b      	str	r3, [r7, #20]
  return(result);
 8010b8a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d10f      	bne.n	8010bb0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b90:	f3ef 8310 	mrs	r3, PRIMASK
 8010b94:	613b      	str	r3, [r7, #16]
  return(result);
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d105      	bne.n	8010ba8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8010ba0:	60fb      	str	r3, [r7, #12]
  return(result);
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d026      	beq.n	8010bf6 <osSemaphoreAcquire+0x92>
 8010ba8:	4b1f      	ldr	r3, [pc, #124]	; (8010c28 <osSemaphoreAcquire+0xc4>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	2b02      	cmp	r3, #2
 8010bae:	d122      	bne.n	8010bf6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d003      	beq.n	8010bbe <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8010bb6:	f06f 0303 	mvn.w	r3, #3
 8010bba:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010bbc:	e02d      	b.n	8010c1a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010bc2:	f107 0308 	add.w	r3, r7, #8
 8010bc6:	461a      	mov	r2, r3
 8010bc8:	2100      	movs	r1, #0
 8010bca:	69b8      	ldr	r0, [r7, #24]
 8010bcc:	f001 f978 	bl	8011ec0 <xQueueReceiveFromISR>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	2b01      	cmp	r3, #1
 8010bd4:	d003      	beq.n	8010bde <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8010bd6:	f06f 0302 	mvn.w	r3, #2
 8010bda:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010bdc:	e01d      	b.n	8010c1a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d01a      	beq.n	8010c1a <osSemaphoreAcquire+0xb6>
 8010be4:	4b11      	ldr	r3, [pc, #68]	; (8010c2c <osSemaphoreAcquire+0xc8>)
 8010be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bea:	601a      	str	r2, [r3, #0]
 8010bec:	f3bf 8f4f 	dsb	sy
 8010bf0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8010bf4:	e011      	b.n	8010c1a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010bf6:	6839      	ldr	r1, [r7, #0]
 8010bf8:	69b8      	ldr	r0, [r7, #24]
 8010bfa:	f001 f851 	bl	8011ca0 <xQueueSemaphoreTake>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	2b01      	cmp	r3, #1
 8010c02:	d00b      	beq.n	8010c1c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d003      	beq.n	8010c12 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8010c0a:	f06f 0301 	mvn.w	r3, #1
 8010c0e:	61fb      	str	r3, [r7, #28]
 8010c10:	e004      	b.n	8010c1c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8010c12:	f06f 0302 	mvn.w	r3, #2
 8010c16:	61fb      	str	r3, [r7, #28]
 8010c18:	e000      	b.n	8010c1c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8010c1a:	bf00      	nop
      }
    }
  }

  return (stat);
 8010c1c:	69fb      	ldr	r3, [r7, #28]
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3720      	adds	r7, #32
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}
 8010c26:	bf00      	nop
 8010c28:	2000025c 	.word	0x2000025c
 8010c2c:	e000ed04 	.word	0xe000ed04

08010c30 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b088      	sub	sp, #32
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010c40:	69bb      	ldr	r3, [r7, #24]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d103      	bne.n	8010c4e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8010c46:	f06f 0303 	mvn.w	r3, #3
 8010c4a:	61fb      	str	r3, [r7, #28]
 8010c4c:	e03e      	b.n	8010ccc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c4e:	f3ef 8305 	mrs	r3, IPSR
 8010c52:	617b      	str	r3, [r7, #20]
  return(result);
 8010c54:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d10f      	bne.n	8010c7a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8010c5e:	613b      	str	r3, [r7, #16]
  return(result);
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d105      	bne.n	8010c72 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010c66:	f3ef 8311 	mrs	r3, BASEPRI
 8010c6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d01e      	beq.n	8010cb0 <osSemaphoreRelease+0x80>
 8010c72:	4b19      	ldr	r3, [pc, #100]	; (8010cd8 <osSemaphoreRelease+0xa8>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	2b02      	cmp	r3, #2
 8010c78:	d11a      	bne.n	8010cb0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010c7e:	f107 0308 	add.w	r3, r7, #8
 8010c82:	4619      	mov	r1, r3
 8010c84:	69b8      	ldr	r0, [r7, #24]
 8010c86:	f000 fe97 	bl	80119b8 <xQueueGiveFromISR>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	2b01      	cmp	r3, #1
 8010c8e:	d003      	beq.n	8010c98 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8010c90:	f06f 0302 	mvn.w	r3, #2
 8010c94:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010c96:	e018      	b.n	8010cca <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d015      	beq.n	8010cca <osSemaphoreRelease+0x9a>
 8010c9e:	4b0f      	ldr	r3, [pc, #60]	; (8010cdc <osSemaphoreRelease+0xac>)
 8010ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ca4:	601a      	str	r2, [r3, #0]
 8010ca6:	f3bf 8f4f 	dsb	sy
 8010caa:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010cae:	e00c      	b.n	8010cca <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	2100      	movs	r1, #0
 8010cb6:	69b8      	ldr	r0, [r7, #24]
 8010cb8:	f000 fce0 	bl	801167c <xQueueGenericSend>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	2b01      	cmp	r3, #1
 8010cc0:	d004      	beq.n	8010ccc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8010cc2:	f06f 0302 	mvn.w	r3, #2
 8010cc6:	61fb      	str	r3, [r7, #28]
 8010cc8:	e000      	b.n	8010ccc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010cca:	bf00      	nop
    }
  }

  return (stat);
 8010ccc:	69fb      	ldr	r3, [r7, #28]
}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	3720      	adds	r7, #32
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}
 8010cd6:	bf00      	nop
 8010cd8:	2000025c 	.word	0x2000025c
 8010cdc:	e000ed04 	.word	0xe000ed04

08010ce0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b08c      	sub	sp, #48	; 0x30
 8010ce4:	af02      	add	r7, sp, #8
 8010ce6:	60f8      	str	r0, [r7, #12]
 8010ce8:	60b9      	str	r1, [r7, #8]
 8010cea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010cec:	2300      	movs	r3, #0
 8010cee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010cf0:	f3ef 8305 	mrs	r3, IPSR
 8010cf4:	61bb      	str	r3, [r7, #24]
  return(result);
 8010cf6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d170      	bne.n	8010dde <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8010d00:	617b      	str	r3, [r7, #20]
  return(result);
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d105      	bne.n	8010d14 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010d08:	f3ef 8311 	mrs	r3, BASEPRI
 8010d0c:	613b      	str	r3, [r7, #16]
  return(result);
 8010d0e:	693b      	ldr	r3, [r7, #16]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d003      	beq.n	8010d1c <osMessageQueueNew+0x3c>
 8010d14:	4b34      	ldr	r3, [pc, #208]	; (8010de8 <osMessageQueueNew+0x108>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	2b02      	cmp	r3, #2
 8010d1a:	d060      	beq.n	8010dde <osMessageQueueNew+0xfe>
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d05d      	beq.n	8010dde <osMessageQueueNew+0xfe>
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d05a      	beq.n	8010dde <osMessageQueueNew+0xfe>
    mem = -1;
 8010d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d2c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d029      	beq.n	8010d88 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	689b      	ldr	r3, [r3, #8]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d012      	beq.n	8010d62 <osMessageQueueNew+0x82>
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	68db      	ldr	r3, [r3, #12]
 8010d40:	2b4f      	cmp	r3, #79	; 0x4f
 8010d42:	d90e      	bls.n	8010d62 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d00a      	beq.n	8010d62 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	695a      	ldr	r2, [r3, #20]
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	68b9      	ldr	r1, [r7, #8]
 8010d54:	fb01 f303 	mul.w	r3, r1, r3
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d302      	bcc.n	8010d62 <osMessageQueueNew+0x82>
        mem = 1;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	623b      	str	r3, [r7, #32]
 8010d60:	e014      	b.n	8010d8c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	689b      	ldr	r3, [r3, #8]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d110      	bne.n	8010d8c <osMessageQueueNew+0xac>
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	68db      	ldr	r3, [r3, #12]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d10c      	bne.n	8010d8c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d108      	bne.n	8010d8c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	695b      	ldr	r3, [r3, #20]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d104      	bne.n	8010d8c <osMessageQueueNew+0xac>
          mem = 0;
 8010d82:	2300      	movs	r3, #0
 8010d84:	623b      	str	r3, [r7, #32]
 8010d86:	e001      	b.n	8010d8c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010d8c:	6a3b      	ldr	r3, [r7, #32]
 8010d8e:	2b01      	cmp	r3, #1
 8010d90:	d10c      	bne.n	8010dac <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	691a      	ldr	r2, [r3, #16]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6899      	ldr	r1, [r3, #8]
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	9300      	str	r3, [sp, #0]
 8010d9e:	460b      	mov	r3, r1
 8010da0:	68b9      	ldr	r1, [r7, #8]
 8010da2:	68f8      	ldr	r0, [r7, #12]
 8010da4:	f000 fa62 	bl	801126c <xQueueGenericCreateStatic>
 8010da8:	6278      	str	r0, [r7, #36]	; 0x24
 8010daa:	e008      	b.n	8010dbe <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8010dac:	6a3b      	ldr	r3, [r7, #32]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d105      	bne.n	8010dbe <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8010db2:	2200      	movs	r2, #0
 8010db4:	68b9      	ldr	r1, [r7, #8]
 8010db6:	68f8      	ldr	r0, [r7, #12]
 8010db8:	f000 fad5 	bl	8011366 <xQueueGenericCreate>
 8010dbc:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d00c      	beq.n	8010dde <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d003      	beq.n	8010dd2 <osMessageQueueNew+0xf2>
        name = attr->name;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	61fb      	str	r3, [r7, #28]
 8010dd0:	e001      	b.n	8010dd6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8010dd6:	69f9      	ldr	r1, [r7, #28]
 8010dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010dda:	f001 fa41 	bl	8012260 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3728      	adds	r7, #40	; 0x28
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}
 8010de8:	2000025c 	.word	0x2000025c

08010dec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b08a      	sub	sp, #40	; 0x28
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	60f8      	str	r0, [r7, #12]
 8010df4:	60b9      	str	r1, [r7, #8]
 8010df6:	603b      	str	r3, [r7, #0]
 8010df8:	4613      	mov	r3, r2
 8010dfa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010e00:	2300      	movs	r3, #0
 8010e02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e04:	f3ef 8305 	mrs	r3, IPSR
 8010e08:	61fb      	str	r3, [r7, #28]
  return(result);
 8010e0a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d10f      	bne.n	8010e30 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e10:	f3ef 8310 	mrs	r3, PRIMASK
 8010e14:	61bb      	str	r3, [r7, #24]
  return(result);
 8010e16:	69bb      	ldr	r3, [r7, #24]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d105      	bne.n	8010e28 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8010e20:	617b      	str	r3, [r7, #20]
  return(result);
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d02c      	beq.n	8010e82 <osMessageQueuePut+0x96>
 8010e28:	4b28      	ldr	r3, [pc, #160]	; (8010ecc <osMessageQueuePut+0xe0>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	2b02      	cmp	r3, #2
 8010e2e:	d128      	bne.n	8010e82 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010e30:	6a3b      	ldr	r3, [r7, #32]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d005      	beq.n	8010e42 <osMessageQueuePut+0x56>
 8010e36:	68bb      	ldr	r3, [r7, #8]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d002      	beq.n	8010e42 <osMessageQueuePut+0x56>
 8010e3c:	683b      	ldr	r3, [r7, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d003      	beq.n	8010e4a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8010e42:	f06f 0303 	mvn.w	r3, #3
 8010e46:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010e48:	e039      	b.n	8010ebe <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010e4e:	f107 0210 	add.w	r2, r7, #16
 8010e52:	2300      	movs	r3, #0
 8010e54:	68b9      	ldr	r1, [r7, #8]
 8010e56:	6a38      	ldr	r0, [r7, #32]
 8010e58:	f000 fd12 	bl	8011880 <xQueueGenericSendFromISR>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2b01      	cmp	r3, #1
 8010e60:	d003      	beq.n	8010e6a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8010e62:	f06f 0302 	mvn.w	r3, #2
 8010e66:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010e68:	e029      	b.n	8010ebe <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d026      	beq.n	8010ebe <osMessageQueuePut+0xd2>
 8010e70:	4b17      	ldr	r3, [pc, #92]	; (8010ed0 <osMessageQueuePut+0xe4>)
 8010e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e76:	601a      	str	r2, [r3, #0]
 8010e78:	f3bf 8f4f 	dsb	sy
 8010e7c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010e80:	e01d      	b.n	8010ebe <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010e82:	6a3b      	ldr	r3, [r7, #32]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d002      	beq.n	8010e8e <osMessageQueuePut+0xa2>
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d103      	bne.n	8010e96 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8010e8e:	f06f 0303 	mvn.w	r3, #3
 8010e92:	627b      	str	r3, [r7, #36]	; 0x24
 8010e94:	e014      	b.n	8010ec0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010e96:	2300      	movs	r3, #0
 8010e98:	683a      	ldr	r2, [r7, #0]
 8010e9a:	68b9      	ldr	r1, [r7, #8]
 8010e9c:	6a38      	ldr	r0, [r7, #32]
 8010e9e:	f000 fbed 	bl	801167c <xQueueGenericSend>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	2b01      	cmp	r3, #1
 8010ea6:	d00b      	beq.n	8010ec0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d003      	beq.n	8010eb6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8010eae:	f06f 0301 	mvn.w	r3, #1
 8010eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8010eb4:	e004      	b.n	8010ec0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8010eb6:	f06f 0302 	mvn.w	r3, #2
 8010eba:	627b      	str	r3, [r7, #36]	; 0x24
 8010ebc:	e000      	b.n	8010ec0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010ebe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3728      	adds	r7, #40	; 0x28
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}
 8010eca:	bf00      	nop
 8010ecc:	2000025c 	.word	0x2000025c
 8010ed0:	e000ed04 	.word	0xe000ed04

08010ed4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b08a      	sub	sp, #40	; 0x28
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	60f8      	str	r0, [r7, #12]
 8010edc:	60b9      	str	r1, [r7, #8]
 8010ede:	607a      	str	r2, [r7, #4]
 8010ee0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010eea:	f3ef 8305 	mrs	r3, IPSR
 8010eee:	61fb      	str	r3, [r7, #28]
  return(result);
 8010ef0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d10f      	bne.n	8010f16 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8010efa:	61bb      	str	r3, [r7, #24]
  return(result);
 8010efc:	69bb      	ldr	r3, [r7, #24]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d105      	bne.n	8010f0e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010f02:	f3ef 8311 	mrs	r3, BASEPRI
 8010f06:	617b      	str	r3, [r7, #20]
  return(result);
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d02c      	beq.n	8010f68 <osMessageQueueGet+0x94>
 8010f0e:	4b28      	ldr	r3, [pc, #160]	; (8010fb0 <osMessageQueueGet+0xdc>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	2b02      	cmp	r3, #2
 8010f14:	d128      	bne.n	8010f68 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f16:	6a3b      	ldr	r3, [r7, #32]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d005      	beq.n	8010f28 <osMessageQueueGet+0x54>
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d002      	beq.n	8010f28 <osMessageQueueGet+0x54>
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d003      	beq.n	8010f30 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8010f28:	f06f 0303 	mvn.w	r3, #3
 8010f2c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f2e:	e038      	b.n	8010fa2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8010f30:	2300      	movs	r3, #0
 8010f32:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010f34:	f107 0310 	add.w	r3, r7, #16
 8010f38:	461a      	mov	r2, r3
 8010f3a:	68b9      	ldr	r1, [r7, #8]
 8010f3c:	6a38      	ldr	r0, [r7, #32]
 8010f3e:	f000 ffbf 	bl	8011ec0 <xQueueReceiveFromISR>
 8010f42:	4603      	mov	r3, r0
 8010f44:	2b01      	cmp	r3, #1
 8010f46:	d003      	beq.n	8010f50 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8010f48:	f06f 0302 	mvn.w	r3, #2
 8010f4c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f4e:	e028      	b.n	8010fa2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8010f50:	693b      	ldr	r3, [r7, #16]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d025      	beq.n	8010fa2 <osMessageQueueGet+0xce>
 8010f56:	4b17      	ldr	r3, [pc, #92]	; (8010fb4 <osMessageQueueGet+0xe0>)
 8010f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f5c:	601a      	str	r2, [r3, #0]
 8010f5e:	f3bf 8f4f 	dsb	sy
 8010f62:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f66:	e01c      	b.n	8010fa2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010f68:	6a3b      	ldr	r3, [r7, #32]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d002      	beq.n	8010f74 <osMessageQueueGet+0xa0>
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d103      	bne.n	8010f7c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8010f74:	f06f 0303 	mvn.w	r3, #3
 8010f78:	627b      	str	r3, [r7, #36]	; 0x24
 8010f7a:	e013      	b.n	8010fa4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010f7c:	683a      	ldr	r2, [r7, #0]
 8010f7e:	68b9      	ldr	r1, [r7, #8]
 8010f80:	6a38      	ldr	r0, [r7, #32]
 8010f82:	f000 fdab 	bl	8011adc <xQueueReceive>
 8010f86:	4603      	mov	r3, r0
 8010f88:	2b01      	cmp	r3, #1
 8010f8a:	d00b      	beq.n	8010fa4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d003      	beq.n	8010f9a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8010f92:	f06f 0301 	mvn.w	r3, #1
 8010f96:	627b      	str	r3, [r7, #36]	; 0x24
 8010f98:	e004      	b.n	8010fa4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8010f9a:	f06f 0302 	mvn.w	r3, #2
 8010f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8010fa0:	e000      	b.n	8010fa4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010fa2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3728      	adds	r7, #40	; 0x28
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
 8010fae:	bf00      	nop
 8010fb0:	2000025c 	.word	0x2000025c
 8010fb4:	e000ed04 	.word	0xe000ed04

08010fb8 <vApplicationTickHook>:

/**
  Dummy implementation of the callback function vApplicationTickHook().
*/
#if (configUSE_TICK_HOOK == 1)
 __WEAK void vApplicationTickHook (void){}
 8010fb8:	b480      	push	{r7}
 8010fba:	af00      	add	r7, sp, #0
 8010fbc:	bf00      	nop
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc4:	4770      	bx	lr
	...

08010fc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010fc8:	b480      	push	{r7}
 8010fca:	b085      	sub	sp, #20
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	60f8      	str	r0, [r7, #12]
 8010fd0:	60b9      	str	r1, [r7, #8]
 8010fd2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	4a07      	ldr	r2, [pc, #28]	; (8010ff4 <vApplicationGetIdleTaskMemory+0x2c>)
 8010fd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010fda:	68bb      	ldr	r3, [r7, #8]
 8010fdc:	4a06      	ldr	r2, [pc, #24]	; (8010ff8 <vApplicationGetIdleTaskMemory+0x30>)
 8010fde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2280      	movs	r2, #128	; 0x80
 8010fe4:	601a      	str	r2, [r3, #0]
}
 8010fe6:	bf00      	nop
 8010fe8:	3714      	adds	r7, #20
 8010fea:	46bd      	mov	sp, r7
 8010fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff0:	4770      	bx	lr
 8010ff2:	bf00      	nop
 8010ff4:	20000260 	.word	0x20000260
 8010ff8:	200002c0 	.word	0x200002c0

08010ffc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010ffc:	b480      	push	{r7}
 8010ffe:	b085      	sub	sp, #20
 8011000:	af00      	add	r7, sp, #0
 8011002:	60f8      	str	r0, [r7, #12]
 8011004:	60b9      	str	r1, [r7, #8]
 8011006:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	4a07      	ldr	r2, [pc, #28]	; (8011028 <vApplicationGetTimerTaskMemory+0x2c>)
 801100c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801100e:	68bb      	ldr	r3, [r7, #8]
 8011010:	4a06      	ldr	r2, [pc, #24]	; (801102c <vApplicationGetTimerTaskMemory+0x30>)
 8011012:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f44f 7280 	mov.w	r2, #256	; 0x100
 801101a:	601a      	str	r2, [r3, #0]
}
 801101c:	bf00      	nop
 801101e:	3714      	adds	r7, #20
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr
 8011028:	200004c0 	.word	0x200004c0
 801102c:	20000520 	.word	0x20000520

08011030 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011030:	b480      	push	{r7}
 8011032:	b083      	sub	sp, #12
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f103 0208 	add.w	r2, r3, #8
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011048:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f103 0208 	add.w	r2, r3, #8
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f103 0208 	add.w	r2, r3, #8
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2200      	movs	r2, #0
 8011062:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011064:	bf00      	nop
 8011066:	370c      	adds	r7, #12
 8011068:	46bd      	mov	sp, r7
 801106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106e:	4770      	bx	lr

08011070 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011070:	b480      	push	{r7}
 8011072:	b083      	sub	sp, #12
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2200      	movs	r2, #0
 801107c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801107e:	bf00      	nop
 8011080:	370c      	adds	r7, #12
 8011082:	46bd      	mov	sp, r7
 8011084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011088:	4770      	bx	lr

0801108a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801108a:	b480      	push	{r7}
 801108c:	b085      	sub	sp, #20
 801108e:	af00      	add	r7, sp, #0
 8011090:	6078      	str	r0, [r7, #4]
 8011092:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	685b      	ldr	r3, [r3, #4]
 8011098:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	68fa      	ldr	r2, [r7, #12]
 801109e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	689a      	ldr	r2, [r3, #8]
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	689b      	ldr	r3, [r3, #8]
 80110ac:	683a      	ldr	r2, [r7, #0]
 80110ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	683a      	ldr	r2, [r7, #0]
 80110b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	687a      	ldr	r2, [r7, #4]
 80110ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	1c5a      	adds	r2, r3, #1
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	601a      	str	r2, [r3, #0]
}
 80110c6:	bf00      	nop
 80110c8:	3714      	adds	r7, #20
 80110ca:	46bd      	mov	sp, r7
 80110cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d0:	4770      	bx	lr

080110d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80110d2:	b480      	push	{r7}
 80110d4:	b085      	sub	sp, #20
 80110d6:	af00      	add	r7, sp, #0
 80110d8:	6078      	str	r0, [r7, #4]
 80110da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80110e2:	68bb      	ldr	r3, [r7, #8]
 80110e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110e8:	d103      	bne.n	80110f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	691b      	ldr	r3, [r3, #16]
 80110ee:	60fb      	str	r3, [r7, #12]
 80110f0:	e00c      	b.n	801110c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	3308      	adds	r3, #8
 80110f6:	60fb      	str	r3, [r7, #12]
 80110f8:	e002      	b.n	8011100 <vListInsert+0x2e>
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	685b      	ldr	r3, [r3, #4]
 80110fe:	60fb      	str	r3, [r7, #12]
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	68ba      	ldr	r2, [r7, #8]
 8011108:	429a      	cmp	r2, r3
 801110a:	d2f6      	bcs.n	80110fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	685a      	ldr	r2, [r3, #4]
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	685b      	ldr	r3, [r3, #4]
 8011118:	683a      	ldr	r2, [r7, #0]
 801111a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	68fa      	ldr	r2, [r7, #12]
 8011120:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	683a      	ldr	r2, [r7, #0]
 8011126:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	687a      	ldr	r2, [r7, #4]
 801112c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	1c5a      	adds	r2, r3, #1
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	601a      	str	r2, [r3, #0]
}
 8011138:	bf00      	nop
 801113a:	3714      	adds	r7, #20
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	4770      	bx	lr

08011144 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011144:	b480      	push	{r7}
 8011146:	b085      	sub	sp, #20
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	691b      	ldr	r3, [r3, #16]
 8011150:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	687a      	ldr	r2, [r7, #4]
 8011158:	6892      	ldr	r2, [r2, #8]
 801115a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	689b      	ldr	r3, [r3, #8]
 8011160:	687a      	ldr	r2, [r7, #4]
 8011162:	6852      	ldr	r2, [r2, #4]
 8011164:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	687a      	ldr	r2, [r7, #4]
 801116c:	429a      	cmp	r2, r3
 801116e:	d103      	bne.n	8011178 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	689a      	ldr	r2, [r3, #8]
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2200      	movs	r2, #0
 801117c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	1e5a      	subs	r2, r3, #1
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	681b      	ldr	r3, [r3, #0]
}
 801118c:	4618      	mov	r0, r3
 801118e:	3714      	adds	r7, #20
 8011190:	46bd      	mov	sp, r7
 8011192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011196:	4770      	bx	lr

08011198 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b084      	sub	sp, #16
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d10b      	bne.n	80111c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80111ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b0:	b672      	cpsid	i
 80111b2:	f383 8811 	msr	BASEPRI, r3
 80111b6:	f3bf 8f6f 	isb	sy
 80111ba:	f3bf 8f4f 	dsb	sy
 80111be:	b662      	cpsie	i
 80111c0:	60bb      	str	r3, [r7, #8]
 80111c2:	e7fe      	b.n	80111c2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80111c4:	f002 fe68 	bl	8013e98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	681a      	ldr	r2, [r3, #0]
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111d0:	68f9      	ldr	r1, [r7, #12]
 80111d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80111d4:	fb01 f303 	mul.w	r3, r1, r3
 80111d8:	441a      	add	r2, r3
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	2200      	movs	r2, #0
 80111e2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	681a      	ldr	r2, [r3, #0]
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	681a      	ldr	r2, [r3, #0]
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111f4:	3b01      	subs	r3, #1
 80111f6:	68f9      	ldr	r1, [r7, #12]
 80111f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80111fa:	fb01 f303 	mul.w	r3, r1, r3
 80111fe:	441a      	add	r2, r3
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	22ff      	movs	r2, #255	; 0xff
 8011208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	22ff      	movs	r2, #255	; 0xff
 8011210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d114      	bne.n	8011244 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	691b      	ldr	r3, [r3, #16]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d01a      	beq.n	8011258 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	3310      	adds	r3, #16
 8011226:	4618      	mov	r0, r3
 8011228:	f001 fe28 	bl	8012e7c <xTaskRemoveFromEventList>
 801122c:	4603      	mov	r3, r0
 801122e:	2b00      	cmp	r3, #0
 8011230:	d012      	beq.n	8011258 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011232:	4b0d      	ldr	r3, [pc, #52]	; (8011268 <xQueueGenericReset+0xd0>)
 8011234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011238:	601a      	str	r2, [r3, #0]
 801123a:	f3bf 8f4f 	dsb	sy
 801123e:	f3bf 8f6f 	isb	sy
 8011242:	e009      	b.n	8011258 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	3310      	adds	r3, #16
 8011248:	4618      	mov	r0, r3
 801124a:	f7ff fef1 	bl	8011030 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	3324      	adds	r3, #36	; 0x24
 8011252:	4618      	mov	r0, r3
 8011254:	f7ff feec 	bl	8011030 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011258:	f002 fe50 	bl	8013efc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801125c:	2301      	movs	r3, #1
}
 801125e:	4618      	mov	r0, r3
 8011260:	3710      	adds	r7, #16
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
 8011266:	bf00      	nop
 8011268:	e000ed04 	.word	0xe000ed04

0801126c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801126c:	b580      	push	{r7, lr}
 801126e:	b08e      	sub	sp, #56	; 0x38
 8011270:	af02      	add	r7, sp, #8
 8011272:	60f8      	str	r0, [r7, #12]
 8011274:	60b9      	str	r1, [r7, #8]
 8011276:	607a      	str	r2, [r7, #4]
 8011278:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d10b      	bne.n	8011298 <xQueueGenericCreateStatic+0x2c>
 8011280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011284:	b672      	cpsid	i
 8011286:	f383 8811 	msr	BASEPRI, r3
 801128a:	f3bf 8f6f 	isb	sy
 801128e:	f3bf 8f4f 	dsb	sy
 8011292:	b662      	cpsie	i
 8011294:	62bb      	str	r3, [r7, #40]	; 0x28
 8011296:	e7fe      	b.n	8011296 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d10b      	bne.n	80112b6 <xQueueGenericCreateStatic+0x4a>
 801129e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a2:	b672      	cpsid	i
 80112a4:	f383 8811 	msr	BASEPRI, r3
 80112a8:	f3bf 8f6f 	isb	sy
 80112ac:	f3bf 8f4f 	dsb	sy
 80112b0:	b662      	cpsie	i
 80112b2:	627b      	str	r3, [r7, #36]	; 0x24
 80112b4:	e7fe      	b.n	80112b4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d002      	beq.n	80112c2 <xQueueGenericCreateStatic+0x56>
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d001      	beq.n	80112c6 <xQueueGenericCreateStatic+0x5a>
 80112c2:	2301      	movs	r3, #1
 80112c4:	e000      	b.n	80112c8 <xQueueGenericCreateStatic+0x5c>
 80112c6:	2300      	movs	r3, #0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d10b      	bne.n	80112e4 <xQueueGenericCreateStatic+0x78>
 80112cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d0:	b672      	cpsid	i
 80112d2:	f383 8811 	msr	BASEPRI, r3
 80112d6:	f3bf 8f6f 	isb	sy
 80112da:	f3bf 8f4f 	dsb	sy
 80112de:	b662      	cpsie	i
 80112e0:	623b      	str	r3, [r7, #32]
 80112e2:	e7fe      	b.n	80112e2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d102      	bne.n	80112f0 <xQueueGenericCreateStatic+0x84>
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d101      	bne.n	80112f4 <xQueueGenericCreateStatic+0x88>
 80112f0:	2301      	movs	r3, #1
 80112f2:	e000      	b.n	80112f6 <xQueueGenericCreateStatic+0x8a>
 80112f4:	2300      	movs	r3, #0
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d10b      	bne.n	8011312 <xQueueGenericCreateStatic+0xa6>
 80112fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112fe:	b672      	cpsid	i
 8011300:	f383 8811 	msr	BASEPRI, r3
 8011304:	f3bf 8f6f 	isb	sy
 8011308:	f3bf 8f4f 	dsb	sy
 801130c:	b662      	cpsie	i
 801130e:	61fb      	str	r3, [r7, #28]
 8011310:	e7fe      	b.n	8011310 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011312:	2350      	movs	r3, #80	; 0x50
 8011314:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	2b50      	cmp	r3, #80	; 0x50
 801131a:	d00b      	beq.n	8011334 <xQueueGenericCreateStatic+0xc8>
 801131c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011320:	b672      	cpsid	i
 8011322:	f383 8811 	msr	BASEPRI, r3
 8011326:	f3bf 8f6f 	isb	sy
 801132a:	f3bf 8f4f 	dsb	sy
 801132e:	b662      	cpsie	i
 8011330:	61bb      	str	r3, [r7, #24]
 8011332:	e7fe      	b.n	8011332 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011334:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801133a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801133c:	2b00      	cmp	r3, #0
 801133e:	d00d      	beq.n	801135c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011342:	2201      	movs	r2, #1
 8011344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011348:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801134c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134e:	9300      	str	r3, [sp, #0]
 8011350:	4613      	mov	r3, r2
 8011352:	687a      	ldr	r2, [r7, #4]
 8011354:	68b9      	ldr	r1, [r7, #8]
 8011356:	68f8      	ldr	r0, [r7, #12]
 8011358:	f000 f846 	bl	80113e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801135e:	4618      	mov	r0, r3
 8011360:	3730      	adds	r7, #48	; 0x30
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}

08011366 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011366:	b580      	push	{r7, lr}
 8011368:	b08a      	sub	sp, #40	; 0x28
 801136a:	af02      	add	r7, sp, #8
 801136c:	60f8      	str	r0, [r7, #12]
 801136e:	60b9      	str	r1, [r7, #8]
 8011370:	4613      	mov	r3, r2
 8011372:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d10b      	bne.n	8011392 <xQueueGenericCreate+0x2c>
 801137a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801137e:	b672      	cpsid	i
 8011380:	f383 8811 	msr	BASEPRI, r3
 8011384:	f3bf 8f6f 	isb	sy
 8011388:	f3bf 8f4f 	dsb	sy
 801138c:	b662      	cpsie	i
 801138e:	613b      	str	r3, [r7, #16]
 8011390:	e7fe      	b.n	8011390 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d102      	bne.n	801139e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011398:	2300      	movs	r3, #0
 801139a:	61fb      	str	r3, [r7, #28]
 801139c:	e004      	b.n	80113a8 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	68ba      	ldr	r2, [r7, #8]
 80113a2:	fb02 f303 	mul.w	r3, r2, r3
 80113a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	3350      	adds	r3, #80	; 0x50
 80113ac:	4618      	mov	r0, r3
 80113ae:	f002 fe95 	bl	80140dc <pvPortMalloc>
 80113b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80113b4:	69bb      	ldr	r3, [r7, #24]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d011      	beq.n	80113de <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80113ba:	69bb      	ldr	r3, [r7, #24]
 80113bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	3350      	adds	r3, #80	; 0x50
 80113c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80113c4:	69bb      	ldr	r3, [r7, #24]
 80113c6:	2200      	movs	r2, #0
 80113c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80113cc:	79fa      	ldrb	r2, [r7, #7]
 80113ce:	69bb      	ldr	r3, [r7, #24]
 80113d0:	9300      	str	r3, [sp, #0]
 80113d2:	4613      	mov	r3, r2
 80113d4:	697a      	ldr	r2, [r7, #20]
 80113d6:	68b9      	ldr	r1, [r7, #8]
 80113d8:	68f8      	ldr	r0, [r7, #12]
 80113da:	f000 f805 	bl	80113e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80113de:	69bb      	ldr	r3, [r7, #24]
	}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3720      	adds	r7, #32
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b084      	sub	sp, #16
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	60f8      	str	r0, [r7, #12]
 80113f0:	60b9      	str	r1, [r7, #8]
 80113f2:	607a      	str	r2, [r7, #4]
 80113f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d103      	bne.n	8011404 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80113fc:	69bb      	ldr	r3, [r7, #24]
 80113fe:	69ba      	ldr	r2, [r7, #24]
 8011400:	601a      	str	r2, [r3, #0]
 8011402:	e002      	b.n	801140a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011404:	69bb      	ldr	r3, [r7, #24]
 8011406:	687a      	ldr	r2, [r7, #4]
 8011408:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801140a:	69bb      	ldr	r3, [r7, #24]
 801140c:	68fa      	ldr	r2, [r7, #12]
 801140e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011410:	69bb      	ldr	r3, [r7, #24]
 8011412:	68ba      	ldr	r2, [r7, #8]
 8011414:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011416:	2101      	movs	r1, #1
 8011418:	69b8      	ldr	r0, [r7, #24]
 801141a:	f7ff febd 	bl	8011198 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801141e:	69bb      	ldr	r3, [r7, #24]
 8011420:	78fa      	ldrb	r2, [r7, #3]
 8011422:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011426:	bf00      	nop
 8011428:	3710      	adds	r7, #16
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}

0801142e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801142e:	b580      	push	{r7, lr}
 8011430:	b082      	sub	sp, #8
 8011432:	af00      	add	r7, sp, #0
 8011434:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d00e      	beq.n	801145a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2200      	movs	r2, #0
 8011440:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2200      	movs	r2, #0
 8011446:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2200      	movs	r2, #0
 801144c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801144e:	2300      	movs	r3, #0
 8011450:	2200      	movs	r2, #0
 8011452:	2100      	movs	r1, #0
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f000 f911 	bl	801167c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801145a:	bf00      	nop
 801145c:	3708      	adds	r7, #8
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}

08011462 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011462:	b580      	push	{r7, lr}
 8011464:	b086      	sub	sp, #24
 8011466:	af00      	add	r7, sp, #0
 8011468:	4603      	mov	r3, r0
 801146a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801146c:	2301      	movs	r3, #1
 801146e:	617b      	str	r3, [r7, #20]
 8011470:	2300      	movs	r3, #0
 8011472:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011474:	79fb      	ldrb	r3, [r7, #7]
 8011476:	461a      	mov	r2, r3
 8011478:	6939      	ldr	r1, [r7, #16]
 801147a:	6978      	ldr	r0, [r7, #20]
 801147c:	f7ff ff73 	bl	8011366 <xQueueGenericCreate>
 8011480:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011482:	68f8      	ldr	r0, [r7, #12]
 8011484:	f7ff ffd3 	bl	801142e <prvInitialiseMutex>

		return xNewQueue;
 8011488:	68fb      	ldr	r3, [r7, #12]
	}
 801148a:	4618      	mov	r0, r3
 801148c:	3718      	adds	r7, #24
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}

08011492 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011492:	b580      	push	{r7, lr}
 8011494:	b088      	sub	sp, #32
 8011496:	af02      	add	r7, sp, #8
 8011498:	4603      	mov	r3, r0
 801149a:	6039      	str	r1, [r7, #0]
 801149c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801149e:	2301      	movs	r3, #1
 80114a0:	617b      	str	r3, [r7, #20]
 80114a2:	2300      	movs	r3, #0
 80114a4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80114a6:	79fb      	ldrb	r3, [r7, #7]
 80114a8:	9300      	str	r3, [sp, #0]
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	2200      	movs	r2, #0
 80114ae:	6939      	ldr	r1, [r7, #16]
 80114b0:	6978      	ldr	r0, [r7, #20]
 80114b2:	f7ff fedb 	bl	801126c <xQueueGenericCreateStatic>
 80114b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80114b8:	68f8      	ldr	r0, [r7, #12]
 80114ba:	f7ff ffb8 	bl	801142e <prvInitialiseMutex>

		return xNewQueue;
 80114be:	68fb      	ldr	r3, [r7, #12]
	}
 80114c0:	4618      	mov	r0, r3
 80114c2:	3718      	adds	r7, #24
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}

080114c8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80114c8:	b590      	push	{r4, r7, lr}
 80114ca:	b087      	sub	sp, #28
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80114d4:	693b      	ldr	r3, [r7, #16]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d10b      	bne.n	80114f2 <xQueueGiveMutexRecursive+0x2a>
 80114da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114de:	b672      	cpsid	i
 80114e0:	f383 8811 	msr	BASEPRI, r3
 80114e4:	f3bf 8f6f 	isb	sy
 80114e8:	f3bf 8f4f 	dsb	sy
 80114ec:	b662      	cpsie	i
 80114ee:	60fb      	str	r3, [r7, #12]
 80114f0:	e7fe      	b.n	80114f0 <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80114f2:	693b      	ldr	r3, [r7, #16]
 80114f4:	689c      	ldr	r4, [r3, #8]
 80114f6:	f001 fe81 	bl	80131fc <xTaskGetCurrentTaskHandle>
 80114fa:	4603      	mov	r3, r0
 80114fc:	429c      	cmp	r4, r3
 80114fe:	d111      	bne.n	8011524 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	68db      	ldr	r3, [r3, #12]
 8011504:	1e5a      	subs	r2, r3, #1
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	68db      	ldr	r3, [r3, #12]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d105      	bne.n	801151e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011512:	2300      	movs	r3, #0
 8011514:	2200      	movs	r2, #0
 8011516:	2100      	movs	r1, #0
 8011518:	6938      	ldr	r0, [r7, #16]
 801151a:	f000 f8af 	bl	801167c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801151e:	2301      	movs	r3, #1
 8011520:	617b      	str	r3, [r7, #20]
 8011522:	e001      	b.n	8011528 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8011524:	2300      	movs	r3, #0
 8011526:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8011528:	697b      	ldr	r3, [r7, #20]
	}
 801152a:	4618      	mov	r0, r3
 801152c:	371c      	adds	r7, #28
 801152e:	46bd      	mov	sp, r7
 8011530:	bd90      	pop	{r4, r7, pc}

08011532 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8011532:	b590      	push	{r4, r7, lr}
 8011534:	b087      	sub	sp, #28
 8011536:	af00      	add	r7, sp, #0
 8011538:	6078      	str	r0, [r7, #4]
 801153a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011540:	693b      	ldr	r3, [r7, #16]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d10b      	bne.n	801155e <xQueueTakeMutexRecursive+0x2c>
 8011546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801154a:	b672      	cpsid	i
 801154c:	f383 8811 	msr	BASEPRI, r3
 8011550:	f3bf 8f6f 	isb	sy
 8011554:	f3bf 8f4f 	dsb	sy
 8011558:	b662      	cpsie	i
 801155a:	60fb      	str	r3, [r7, #12]
 801155c:	e7fe      	b.n	801155c <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	689c      	ldr	r4, [r3, #8]
 8011562:	f001 fe4b 	bl	80131fc <xTaskGetCurrentTaskHandle>
 8011566:	4603      	mov	r3, r0
 8011568:	429c      	cmp	r4, r3
 801156a:	d107      	bne.n	801157c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801156c:	693b      	ldr	r3, [r7, #16]
 801156e:	68db      	ldr	r3, [r3, #12]
 8011570:	1c5a      	adds	r2, r3, #1
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8011576:	2301      	movs	r3, #1
 8011578:	617b      	str	r3, [r7, #20]
 801157a:	e00c      	b.n	8011596 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801157c:	6839      	ldr	r1, [r7, #0]
 801157e:	6938      	ldr	r0, [r7, #16]
 8011580:	f000 fb8e 	bl	8011ca0 <xQueueSemaphoreTake>
 8011584:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d004      	beq.n	8011596 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801158c:	693b      	ldr	r3, [r7, #16]
 801158e:	68db      	ldr	r3, [r3, #12]
 8011590:	1c5a      	adds	r2, r3, #1
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8011596:	697b      	ldr	r3, [r7, #20]
	}
 8011598:	4618      	mov	r0, r3
 801159a:	371c      	adds	r7, #28
 801159c:	46bd      	mov	sp, r7
 801159e:	bd90      	pop	{r4, r7, pc}

080115a0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b08a      	sub	sp, #40	; 0x28
 80115a4:	af02      	add	r7, sp, #8
 80115a6:	60f8      	str	r0, [r7, #12]
 80115a8:	60b9      	str	r1, [r7, #8]
 80115aa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d10b      	bne.n	80115ca <xQueueCreateCountingSemaphoreStatic+0x2a>
 80115b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115b6:	b672      	cpsid	i
 80115b8:	f383 8811 	msr	BASEPRI, r3
 80115bc:	f3bf 8f6f 	isb	sy
 80115c0:	f3bf 8f4f 	dsb	sy
 80115c4:	b662      	cpsie	i
 80115c6:	61bb      	str	r3, [r7, #24]
 80115c8:	e7fe      	b.n	80115c8 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80115ca:	68ba      	ldr	r2, [r7, #8]
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d90b      	bls.n	80115ea <xQueueCreateCountingSemaphoreStatic+0x4a>
 80115d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115d6:	b672      	cpsid	i
 80115d8:	f383 8811 	msr	BASEPRI, r3
 80115dc:	f3bf 8f6f 	isb	sy
 80115e0:	f3bf 8f4f 	dsb	sy
 80115e4:	b662      	cpsie	i
 80115e6:	617b      	str	r3, [r7, #20]
 80115e8:	e7fe      	b.n	80115e8 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80115ea:	2302      	movs	r3, #2
 80115ec:	9300      	str	r3, [sp, #0]
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2200      	movs	r2, #0
 80115f2:	2100      	movs	r1, #0
 80115f4:	68f8      	ldr	r0, [r7, #12]
 80115f6:	f7ff fe39 	bl	801126c <xQueueGenericCreateStatic>
 80115fa:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80115fc:	69fb      	ldr	r3, [r7, #28]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d002      	beq.n	8011608 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011602:	69fb      	ldr	r3, [r7, #28]
 8011604:	68ba      	ldr	r2, [r7, #8]
 8011606:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011608:	69fb      	ldr	r3, [r7, #28]
	}
 801160a:	4618      	mov	r0, r3
 801160c:	3720      	adds	r7, #32
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}

08011612 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8011612:	b580      	push	{r7, lr}
 8011614:	b086      	sub	sp, #24
 8011616:	af00      	add	r7, sp, #0
 8011618:	6078      	str	r0, [r7, #4]
 801161a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d10b      	bne.n	801163a <xQueueCreateCountingSemaphore+0x28>
 8011622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011626:	b672      	cpsid	i
 8011628:	f383 8811 	msr	BASEPRI, r3
 801162c:	f3bf 8f6f 	isb	sy
 8011630:	f3bf 8f4f 	dsb	sy
 8011634:	b662      	cpsie	i
 8011636:	613b      	str	r3, [r7, #16]
 8011638:	e7fe      	b.n	8011638 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801163a:	683a      	ldr	r2, [r7, #0]
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	429a      	cmp	r2, r3
 8011640:	d90b      	bls.n	801165a <xQueueCreateCountingSemaphore+0x48>
 8011642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011646:	b672      	cpsid	i
 8011648:	f383 8811 	msr	BASEPRI, r3
 801164c:	f3bf 8f6f 	isb	sy
 8011650:	f3bf 8f4f 	dsb	sy
 8011654:	b662      	cpsie	i
 8011656:	60fb      	str	r3, [r7, #12]
 8011658:	e7fe      	b.n	8011658 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801165a:	2202      	movs	r2, #2
 801165c:	2100      	movs	r1, #0
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f7ff fe81 	bl	8011366 <xQueueGenericCreate>
 8011664:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d002      	beq.n	8011672 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	683a      	ldr	r2, [r7, #0]
 8011670:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011672:	697b      	ldr	r3, [r7, #20]
	}
 8011674:	4618      	mov	r0, r3
 8011676:	3718      	adds	r7, #24
 8011678:	46bd      	mov	sp, r7
 801167a:	bd80      	pop	{r7, pc}

0801167c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b08e      	sub	sp, #56	; 0x38
 8011680:	af00      	add	r7, sp, #0
 8011682:	60f8      	str	r0, [r7, #12]
 8011684:	60b9      	str	r1, [r7, #8]
 8011686:	607a      	str	r2, [r7, #4]
 8011688:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801168a:	2300      	movs	r3, #0
 801168c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011694:	2b00      	cmp	r3, #0
 8011696:	d10b      	bne.n	80116b0 <xQueueGenericSend+0x34>
 8011698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801169c:	b672      	cpsid	i
 801169e:	f383 8811 	msr	BASEPRI, r3
 80116a2:	f3bf 8f6f 	isb	sy
 80116a6:	f3bf 8f4f 	dsb	sy
 80116aa:	b662      	cpsie	i
 80116ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80116ae:	e7fe      	b.n	80116ae <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d103      	bne.n	80116be <xQueueGenericSend+0x42>
 80116b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d101      	bne.n	80116c2 <xQueueGenericSend+0x46>
 80116be:	2301      	movs	r3, #1
 80116c0:	e000      	b.n	80116c4 <xQueueGenericSend+0x48>
 80116c2:	2300      	movs	r3, #0
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d10b      	bne.n	80116e0 <xQueueGenericSend+0x64>
 80116c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116cc:	b672      	cpsid	i
 80116ce:	f383 8811 	msr	BASEPRI, r3
 80116d2:	f3bf 8f6f 	isb	sy
 80116d6:	f3bf 8f4f 	dsb	sy
 80116da:	b662      	cpsie	i
 80116dc:	627b      	str	r3, [r7, #36]	; 0x24
 80116de:	e7fe      	b.n	80116de <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	2b02      	cmp	r3, #2
 80116e4:	d103      	bne.n	80116ee <xQueueGenericSend+0x72>
 80116e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116ea:	2b01      	cmp	r3, #1
 80116ec:	d101      	bne.n	80116f2 <xQueueGenericSend+0x76>
 80116ee:	2301      	movs	r3, #1
 80116f0:	e000      	b.n	80116f4 <xQueueGenericSend+0x78>
 80116f2:	2300      	movs	r3, #0
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d10b      	bne.n	8011710 <xQueueGenericSend+0x94>
 80116f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116fc:	b672      	cpsid	i
 80116fe:	f383 8811 	msr	BASEPRI, r3
 8011702:	f3bf 8f6f 	isb	sy
 8011706:	f3bf 8f4f 	dsb	sy
 801170a:	b662      	cpsie	i
 801170c:	623b      	str	r3, [r7, #32]
 801170e:	e7fe      	b.n	801170e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011710:	f001 fd84 	bl	801321c <xTaskGetSchedulerState>
 8011714:	4603      	mov	r3, r0
 8011716:	2b00      	cmp	r3, #0
 8011718:	d102      	bne.n	8011720 <xQueueGenericSend+0xa4>
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d101      	bne.n	8011724 <xQueueGenericSend+0xa8>
 8011720:	2301      	movs	r3, #1
 8011722:	e000      	b.n	8011726 <xQueueGenericSend+0xaa>
 8011724:	2300      	movs	r3, #0
 8011726:	2b00      	cmp	r3, #0
 8011728:	d10b      	bne.n	8011742 <xQueueGenericSend+0xc6>
 801172a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801172e:	b672      	cpsid	i
 8011730:	f383 8811 	msr	BASEPRI, r3
 8011734:	f3bf 8f6f 	isb	sy
 8011738:	f3bf 8f4f 	dsb	sy
 801173c:	b662      	cpsie	i
 801173e:	61fb      	str	r3, [r7, #28]
 8011740:	e7fe      	b.n	8011740 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011742:	f002 fba9 	bl	8013e98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801174a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801174c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801174e:	429a      	cmp	r2, r3
 8011750:	d302      	bcc.n	8011758 <xQueueGenericSend+0xdc>
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	2b02      	cmp	r3, #2
 8011756:	d129      	bne.n	80117ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011758:	683a      	ldr	r2, [r7, #0]
 801175a:	68b9      	ldr	r1, [r7, #8]
 801175c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801175e:	f000 fc6e 	bl	801203e <prvCopyDataToQueue>
 8011762:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011768:	2b00      	cmp	r3, #0
 801176a:	d010      	beq.n	801178e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801176c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801176e:	3324      	adds	r3, #36	; 0x24
 8011770:	4618      	mov	r0, r3
 8011772:	f001 fb83 	bl	8012e7c <xTaskRemoveFromEventList>
 8011776:	4603      	mov	r3, r0
 8011778:	2b00      	cmp	r3, #0
 801177a:	d013      	beq.n	80117a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801177c:	4b3f      	ldr	r3, [pc, #252]	; (801187c <xQueueGenericSend+0x200>)
 801177e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011782:	601a      	str	r2, [r3, #0]
 8011784:	f3bf 8f4f 	dsb	sy
 8011788:	f3bf 8f6f 	isb	sy
 801178c:	e00a      	b.n	80117a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801178e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011790:	2b00      	cmp	r3, #0
 8011792:	d007      	beq.n	80117a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011794:	4b39      	ldr	r3, [pc, #228]	; (801187c <xQueueGenericSend+0x200>)
 8011796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801179a:	601a      	str	r2, [r3, #0]
 801179c:	f3bf 8f4f 	dsb	sy
 80117a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80117a4:	f002 fbaa 	bl	8013efc <vPortExitCritical>
				return pdPASS;
 80117a8:	2301      	movs	r3, #1
 80117aa:	e063      	b.n	8011874 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d103      	bne.n	80117ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80117b2:	f002 fba3 	bl	8013efc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80117b6:	2300      	movs	r3, #0
 80117b8:	e05c      	b.n	8011874 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80117ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d106      	bne.n	80117ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80117c0:	f107 0314 	add.w	r3, r7, #20
 80117c4:	4618      	mov	r0, r3
 80117c6:	f001 fbbd 	bl	8012f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80117ca:	2301      	movs	r3, #1
 80117cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80117ce:	f002 fb95 	bl	8013efc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80117d2:	f001 f8ed 	bl	80129b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80117d6:	f002 fb5f 	bl	8013e98 <vPortEnterCritical>
 80117da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80117e0:	b25b      	sxtb	r3, r3
 80117e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117e6:	d103      	bne.n	80117f0 <xQueueGenericSend+0x174>
 80117e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ea:	2200      	movs	r2, #0
 80117ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80117f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117f6:	b25b      	sxtb	r3, r3
 80117f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117fc:	d103      	bne.n	8011806 <xQueueGenericSend+0x18a>
 80117fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011800:	2200      	movs	r2, #0
 8011802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011806:	f002 fb79 	bl	8013efc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801180a:	1d3a      	adds	r2, r7, #4
 801180c:	f107 0314 	add.w	r3, r7, #20
 8011810:	4611      	mov	r1, r2
 8011812:	4618      	mov	r0, r3
 8011814:	f001 fbac 	bl	8012f70 <xTaskCheckForTimeOut>
 8011818:	4603      	mov	r3, r0
 801181a:	2b00      	cmp	r3, #0
 801181c:	d124      	bne.n	8011868 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801181e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011820:	f000 fd05 	bl	801222e <prvIsQueueFull>
 8011824:	4603      	mov	r3, r0
 8011826:	2b00      	cmp	r3, #0
 8011828:	d018      	beq.n	801185c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801182a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801182c:	3310      	adds	r3, #16
 801182e:	687a      	ldr	r2, [r7, #4]
 8011830:	4611      	mov	r1, r2
 8011832:	4618      	mov	r0, r3
 8011834:	f001 fad0 	bl	8012dd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801183a:	f000 fc90 	bl	801215e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801183e:	f001 f8c5 	bl	80129cc <xTaskResumeAll>
 8011842:	4603      	mov	r3, r0
 8011844:	2b00      	cmp	r3, #0
 8011846:	f47f af7c 	bne.w	8011742 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801184a:	4b0c      	ldr	r3, [pc, #48]	; (801187c <xQueueGenericSend+0x200>)
 801184c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011850:	601a      	str	r2, [r3, #0]
 8011852:	f3bf 8f4f 	dsb	sy
 8011856:	f3bf 8f6f 	isb	sy
 801185a:	e772      	b.n	8011742 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801185c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801185e:	f000 fc7e 	bl	801215e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011862:	f001 f8b3 	bl	80129cc <xTaskResumeAll>
 8011866:	e76c      	b.n	8011742 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801186a:	f000 fc78 	bl	801215e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801186e:	f001 f8ad 	bl	80129cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011872:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011874:	4618      	mov	r0, r3
 8011876:	3738      	adds	r7, #56	; 0x38
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}
 801187c:	e000ed04 	.word	0xe000ed04

08011880 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b08e      	sub	sp, #56	; 0x38
 8011884:	af00      	add	r7, sp, #0
 8011886:	60f8      	str	r0, [r7, #12]
 8011888:	60b9      	str	r1, [r7, #8]
 801188a:	607a      	str	r2, [r7, #4]
 801188c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011894:	2b00      	cmp	r3, #0
 8011896:	d10b      	bne.n	80118b0 <xQueueGenericSendFromISR+0x30>
 8011898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801189c:	b672      	cpsid	i
 801189e:	f383 8811 	msr	BASEPRI, r3
 80118a2:	f3bf 8f6f 	isb	sy
 80118a6:	f3bf 8f4f 	dsb	sy
 80118aa:	b662      	cpsie	i
 80118ac:	627b      	str	r3, [r7, #36]	; 0x24
 80118ae:	e7fe      	b.n	80118ae <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d103      	bne.n	80118be <xQueueGenericSendFromISR+0x3e>
 80118b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d101      	bne.n	80118c2 <xQueueGenericSendFromISR+0x42>
 80118be:	2301      	movs	r3, #1
 80118c0:	e000      	b.n	80118c4 <xQueueGenericSendFromISR+0x44>
 80118c2:	2300      	movs	r3, #0
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d10b      	bne.n	80118e0 <xQueueGenericSendFromISR+0x60>
 80118c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118cc:	b672      	cpsid	i
 80118ce:	f383 8811 	msr	BASEPRI, r3
 80118d2:	f3bf 8f6f 	isb	sy
 80118d6:	f3bf 8f4f 	dsb	sy
 80118da:	b662      	cpsie	i
 80118dc:	623b      	str	r3, [r7, #32]
 80118de:	e7fe      	b.n	80118de <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80118e0:	683b      	ldr	r3, [r7, #0]
 80118e2:	2b02      	cmp	r3, #2
 80118e4:	d103      	bne.n	80118ee <xQueueGenericSendFromISR+0x6e>
 80118e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118ea:	2b01      	cmp	r3, #1
 80118ec:	d101      	bne.n	80118f2 <xQueueGenericSendFromISR+0x72>
 80118ee:	2301      	movs	r3, #1
 80118f0:	e000      	b.n	80118f4 <xQueueGenericSendFromISR+0x74>
 80118f2:	2300      	movs	r3, #0
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d10b      	bne.n	8011910 <xQueueGenericSendFromISR+0x90>
 80118f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118fc:	b672      	cpsid	i
 80118fe:	f383 8811 	msr	BASEPRI, r3
 8011902:	f3bf 8f6f 	isb	sy
 8011906:	f3bf 8f4f 	dsb	sy
 801190a:	b662      	cpsie	i
 801190c:	61fb      	str	r3, [r7, #28]
 801190e:	e7fe      	b.n	801190e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011910:	f002 fba2 	bl	8014058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011914:	f3ef 8211 	mrs	r2, BASEPRI
 8011918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191c:	b672      	cpsid	i
 801191e:	f383 8811 	msr	BASEPRI, r3
 8011922:	f3bf 8f6f 	isb	sy
 8011926:	f3bf 8f4f 	dsb	sy
 801192a:	b662      	cpsie	i
 801192c:	61ba      	str	r2, [r7, #24]
 801192e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011930:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011932:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801193a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801193c:	429a      	cmp	r2, r3
 801193e:	d302      	bcc.n	8011946 <xQueueGenericSendFromISR+0xc6>
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	2b02      	cmp	r3, #2
 8011944:	d12c      	bne.n	80119a0 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801194c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011950:	683a      	ldr	r2, [r7, #0]
 8011952:	68b9      	ldr	r1, [r7, #8]
 8011954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011956:	f000 fb72 	bl	801203e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801195a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801195e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011962:	d112      	bne.n	801198a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011968:	2b00      	cmp	r3, #0
 801196a:	d016      	beq.n	801199a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801196c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801196e:	3324      	adds	r3, #36	; 0x24
 8011970:	4618      	mov	r0, r3
 8011972:	f001 fa83 	bl	8012e7c <xTaskRemoveFromEventList>
 8011976:	4603      	mov	r3, r0
 8011978:	2b00      	cmp	r3, #0
 801197a:	d00e      	beq.n	801199a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d00b      	beq.n	801199a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	2201      	movs	r2, #1
 8011986:	601a      	str	r2, [r3, #0]
 8011988:	e007      	b.n	801199a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801198a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801198e:	3301      	adds	r3, #1
 8011990:	b2db      	uxtb	r3, r3
 8011992:	b25a      	sxtb	r2, r3
 8011994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801199a:	2301      	movs	r3, #1
 801199c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801199e:	e001      	b.n	80119a4 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80119a0:	2300      	movs	r3, #0
 80119a2:	637b      	str	r3, [r7, #52]	; 0x34
 80119a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80119ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	3738      	adds	r7, #56	; 0x38
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}

080119b8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b08e      	sub	sp, #56	; 0x38
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
 80119c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80119c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d10b      	bne.n	80119e4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80119cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119d0:	b672      	cpsid	i
 80119d2:	f383 8811 	msr	BASEPRI, r3
 80119d6:	f3bf 8f6f 	isb	sy
 80119da:	f3bf 8f4f 	dsb	sy
 80119de:	b662      	cpsie	i
 80119e0:	623b      	str	r3, [r7, #32]
 80119e2:	e7fe      	b.n	80119e2 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80119e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d00b      	beq.n	8011a04 <xQueueGiveFromISR+0x4c>
 80119ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f0:	b672      	cpsid	i
 80119f2:	f383 8811 	msr	BASEPRI, r3
 80119f6:	f3bf 8f6f 	isb	sy
 80119fa:	f3bf 8f4f 	dsb	sy
 80119fe:	b662      	cpsie	i
 8011a00:	61fb      	str	r3, [r7, #28]
 8011a02:	e7fe      	b.n	8011a02 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d103      	bne.n	8011a14 <xQueueGiveFromISR+0x5c>
 8011a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a0e:	689b      	ldr	r3, [r3, #8]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d101      	bne.n	8011a18 <xQueueGiveFromISR+0x60>
 8011a14:	2301      	movs	r3, #1
 8011a16:	e000      	b.n	8011a1a <xQueueGiveFromISR+0x62>
 8011a18:	2300      	movs	r3, #0
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d10b      	bne.n	8011a36 <xQueueGiveFromISR+0x7e>
 8011a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a22:	b672      	cpsid	i
 8011a24:	f383 8811 	msr	BASEPRI, r3
 8011a28:	f3bf 8f6f 	isb	sy
 8011a2c:	f3bf 8f4f 	dsb	sy
 8011a30:	b662      	cpsie	i
 8011a32:	61bb      	str	r3, [r7, #24]
 8011a34:	e7fe      	b.n	8011a34 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011a36:	f002 fb0f 	bl	8014058 <vPortValidateInterruptPriority>
	__asm volatile
 8011a3a:	f3ef 8211 	mrs	r2, BASEPRI
 8011a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a42:	b672      	cpsid	i
 8011a44:	f383 8811 	msr	BASEPRI, r3
 8011a48:	f3bf 8f6f 	isb	sy
 8011a4c:	f3bf 8f4f 	dsb	sy
 8011a50:	b662      	cpsie	i
 8011a52:	617a      	str	r2, [r7, #20]
 8011a54:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011a56:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011a58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d22b      	bcs.n	8011ac2 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a76:	1c5a      	adds	r2, r3, #1
 8011a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011a7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a84:	d112      	bne.n	8011aac <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d016      	beq.n	8011abc <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a90:	3324      	adds	r3, #36	; 0x24
 8011a92:	4618      	mov	r0, r3
 8011a94:	f001 f9f2 	bl	8012e7c <xTaskRemoveFromEventList>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d00e      	beq.n	8011abc <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d00b      	beq.n	8011abc <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	2201      	movs	r2, #1
 8011aa8:	601a      	str	r2, [r3, #0]
 8011aaa:	e007      	b.n	8011abc <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ab0:	3301      	adds	r3, #1
 8011ab2:	b2db      	uxtb	r3, r3
 8011ab4:	b25a      	sxtb	r2, r3
 8011ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011abc:	2301      	movs	r3, #1
 8011abe:	637b      	str	r3, [r7, #52]	; 0x34
 8011ac0:	e001      	b.n	8011ac6 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8011ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3738      	adds	r7, #56	; 0x38
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}
	...

08011adc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b08c      	sub	sp, #48	; 0x30
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	60f8      	str	r0, [r7, #12]
 8011ae4:	60b9      	str	r1, [r7, #8]
 8011ae6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011ae8:	2300      	movs	r3, #0
 8011aea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d10b      	bne.n	8011b0e <xQueueReceive+0x32>
	__asm volatile
 8011af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011afa:	b672      	cpsid	i
 8011afc:	f383 8811 	msr	BASEPRI, r3
 8011b00:	f3bf 8f6f 	isb	sy
 8011b04:	f3bf 8f4f 	dsb	sy
 8011b08:	b662      	cpsie	i
 8011b0a:	623b      	str	r3, [r7, #32]
 8011b0c:	e7fe      	b.n	8011b0c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d103      	bne.n	8011b1c <xQueueReceive+0x40>
 8011b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d101      	bne.n	8011b20 <xQueueReceive+0x44>
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	e000      	b.n	8011b22 <xQueueReceive+0x46>
 8011b20:	2300      	movs	r3, #0
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d10b      	bne.n	8011b3e <xQueueReceive+0x62>
 8011b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b2a:	b672      	cpsid	i
 8011b2c:	f383 8811 	msr	BASEPRI, r3
 8011b30:	f3bf 8f6f 	isb	sy
 8011b34:	f3bf 8f4f 	dsb	sy
 8011b38:	b662      	cpsie	i
 8011b3a:	61fb      	str	r3, [r7, #28]
 8011b3c:	e7fe      	b.n	8011b3c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b3e:	f001 fb6d 	bl	801321c <xTaskGetSchedulerState>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d102      	bne.n	8011b4e <xQueueReceive+0x72>
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d101      	bne.n	8011b52 <xQueueReceive+0x76>
 8011b4e:	2301      	movs	r3, #1
 8011b50:	e000      	b.n	8011b54 <xQueueReceive+0x78>
 8011b52:	2300      	movs	r3, #0
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d10b      	bne.n	8011b70 <xQueueReceive+0x94>
 8011b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b5c:	b672      	cpsid	i
 8011b5e:	f383 8811 	msr	BASEPRI, r3
 8011b62:	f3bf 8f6f 	isb	sy
 8011b66:	f3bf 8f4f 	dsb	sy
 8011b6a:	b662      	cpsie	i
 8011b6c:	61bb      	str	r3, [r7, #24]
 8011b6e:	e7fe      	b.n	8011b6e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011b70:	f002 f992 	bl	8013e98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b78:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d01f      	beq.n	8011bc0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011b80:	68b9      	ldr	r1, [r7, #8]
 8011b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b84:	f000 fac5 	bl	8012112 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8a:	1e5a      	subs	r2, r3, #1
 8011b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b8e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b92:	691b      	ldr	r3, [r3, #16]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d00f      	beq.n	8011bb8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b9a:	3310      	adds	r3, #16
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f001 f96d 	bl	8012e7c <xTaskRemoveFromEventList>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d007      	beq.n	8011bb8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011ba8:	4b3c      	ldr	r3, [pc, #240]	; (8011c9c <xQueueReceive+0x1c0>)
 8011baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bae:	601a      	str	r2, [r3, #0]
 8011bb0:	f3bf 8f4f 	dsb	sy
 8011bb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011bb8:	f002 f9a0 	bl	8013efc <vPortExitCritical>
				return pdPASS;
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	e069      	b.n	8011c94 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d103      	bne.n	8011bce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011bc6:	f002 f999 	bl	8013efc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	e062      	b.n	8011c94 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d106      	bne.n	8011be2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011bd4:	f107 0310 	add.w	r3, r7, #16
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f001 f9b3 	bl	8012f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011bde:	2301      	movs	r3, #1
 8011be0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011be2:	f002 f98b 	bl	8013efc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011be6:	f000 fee3 	bl	80129b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011bea:	f002 f955 	bl	8013e98 <vPortEnterCritical>
 8011bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011bf4:	b25b      	sxtb	r3, r3
 8011bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bfa:	d103      	bne.n	8011c04 <xQueueReceive+0x128>
 8011bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bfe:	2200      	movs	r2, #0
 8011c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c0a:	b25b      	sxtb	r3, r3
 8011c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c10:	d103      	bne.n	8011c1a <xQueueReceive+0x13e>
 8011c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c14:	2200      	movs	r2, #0
 8011c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011c1a:	f002 f96f 	bl	8013efc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011c1e:	1d3a      	adds	r2, r7, #4
 8011c20:	f107 0310 	add.w	r3, r7, #16
 8011c24:	4611      	mov	r1, r2
 8011c26:	4618      	mov	r0, r3
 8011c28:	f001 f9a2 	bl	8012f70 <xTaskCheckForTimeOut>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d123      	bne.n	8011c7a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c34:	f000 fae5 	bl	8012202 <prvIsQueueEmpty>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d017      	beq.n	8011c6e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c40:	3324      	adds	r3, #36	; 0x24
 8011c42:	687a      	ldr	r2, [r7, #4]
 8011c44:	4611      	mov	r1, r2
 8011c46:	4618      	mov	r0, r3
 8011c48:	f001 f8c6 	bl	8012dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c4e:	f000 fa86 	bl	801215e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011c52:	f000 febb 	bl	80129cc <xTaskResumeAll>
 8011c56:	4603      	mov	r3, r0
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d189      	bne.n	8011b70 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8011c5c:	4b0f      	ldr	r3, [pc, #60]	; (8011c9c <xQueueReceive+0x1c0>)
 8011c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c62:	601a      	str	r2, [r3, #0]
 8011c64:	f3bf 8f4f 	dsb	sy
 8011c68:	f3bf 8f6f 	isb	sy
 8011c6c:	e780      	b.n	8011b70 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c70:	f000 fa75 	bl	801215e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011c74:	f000 feaa 	bl	80129cc <xTaskResumeAll>
 8011c78:	e77a      	b.n	8011b70 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c7c:	f000 fa6f 	bl	801215e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011c80:	f000 fea4 	bl	80129cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c86:	f000 fabc 	bl	8012202 <prvIsQueueEmpty>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	f43f af6f 	beq.w	8011b70 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011c92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	3730      	adds	r7, #48	; 0x30
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}
 8011c9c:	e000ed04 	.word	0xe000ed04

08011ca0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b08e      	sub	sp, #56	; 0x38
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011caa:	2300      	movs	r3, #0
 8011cac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d10b      	bne.n	8011cd4 <xQueueSemaphoreTake+0x34>
 8011cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc0:	b672      	cpsid	i
 8011cc2:	f383 8811 	msr	BASEPRI, r3
 8011cc6:	f3bf 8f6f 	isb	sy
 8011cca:	f3bf 8f4f 	dsb	sy
 8011cce:	b662      	cpsie	i
 8011cd0:	623b      	str	r3, [r7, #32]
 8011cd2:	e7fe      	b.n	8011cd2 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d00b      	beq.n	8011cf4 <xQueueSemaphoreTake+0x54>
 8011cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ce0:	b672      	cpsid	i
 8011ce2:	f383 8811 	msr	BASEPRI, r3
 8011ce6:	f3bf 8f6f 	isb	sy
 8011cea:	f3bf 8f4f 	dsb	sy
 8011cee:	b662      	cpsie	i
 8011cf0:	61fb      	str	r3, [r7, #28]
 8011cf2:	e7fe      	b.n	8011cf2 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011cf4:	f001 fa92 	bl	801321c <xTaskGetSchedulerState>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d102      	bne.n	8011d04 <xQueueSemaphoreTake+0x64>
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d101      	bne.n	8011d08 <xQueueSemaphoreTake+0x68>
 8011d04:	2301      	movs	r3, #1
 8011d06:	e000      	b.n	8011d0a <xQueueSemaphoreTake+0x6a>
 8011d08:	2300      	movs	r3, #0
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d10b      	bne.n	8011d26 <xQueueSemaphoreTake+0x86>
 8011d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d12:	b672      	cpsid	i
 8011d14:	f383 8811 	msr	BASEPRI, r3
 8011d18:	f3bf 8f6f 	isb	sy
 8011d1c:	f3bf 8f4f 	dsb	sy
 8011d20:	b662      	cpsie	i
 8011d22:	61bb      	str	r3, [r7, #24]
 8011d24:	e7fe      	b.n	8011d24 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011d26:	f002 f8b7 	bl	8013e98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d2e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d024      	beq.n	8011d80 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d38:	1e5a      	subs	r2, r3, #1
 8011d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d3c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d104      	bne.n	8011d50 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011d46:	f001 fbe3 	bl	8013510 <pvTaskIncrementMutexHeldCount>
 8011d4a:	4602      	mov	r2, r0
 8011d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d4e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d52:	691b      	ldr	r3, [r3, #16]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d00f      	beq.n	8011d78 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d5a:	3310      	adds	r3, #16
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f001 f88d 	bl	8012e7c <xTaskRemoveFromEventList>
 8011d62:	4603      	mov	r3, r0
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d007      	beq.n	8011d78 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011d68:	4b54      	ldr	r3, [pc, #336]	; (8011ebc <xQueueSemaphoreTake+0x21c>)
 8011d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d6e:	601a      	str	r2, [r3, #0]
 8011d70:	f3bf 8f4f 	dsb	sy
 8011d74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011d78:	f002 f8c0 	bl	8013efc <vPortExitCritical>
				return pdPASS;
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	e098      	b.n	8011eb2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d112      	bne.n	8011dac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d00b      	beq.n	8011da4 <xQueueSemaphoreTake+0x104>
 8011d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d90:	b672      	cpsid	i
 8011d92:	f383 8811 	msr	BASEPRI, r3
 8011d96:	f3bf 8f6f 	isb	sy
 8011d9a:	f3bf 8f4f 	dsb	sy
 8011d9e:	b662      	cpsie	i
 8011da0:	617b      	str	r3, [r7, #20]
 8011da2:	e7fe      	b.n	8011da2 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011da4:	f002 f8aa 	bl	8013efc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011da8:	2300      	movs	r3, #0
 8011daa:	e082      	b.n	8011eb2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d106      	bne.n	8011dc0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011db2:	f107 030c 	add.w	r3, r7, #12
 8011db6:	4618      	mov	r0, r3
 8011db8:	f001 f8c4 	bl	8012f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011dc0:	f002 f89c 	bl	8013efc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011dc4:	f000 fdf4 	bl	80129b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011dc8:	f002 f866 	bl	8013e98 <vPortEnterCritical>
 8011dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011dd2:	b25b      	sxtb	r3, r3
 8011dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011dd8:	d103      	bne.n	8011de2 <xQueueSemaphoreTake+0x142>
 8011dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ddc:	2200      	movs	r2, #0
 8011dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011de8:	b25b      	sxtb	r3, r3
 8011dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011dee:	d103      	bne.n	8011df8 <xQueueSemaphoreTake+0x158>
 8011df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df2:	2200      	movs	r2, #0
 8011df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011df8:	f002 f880 	bl	8013efc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011dfc:	463a      	mov	r2, r7
 8011dfe:	f107 030c 	add.w	r3, r7, #12
 8011e02:	4611      	mov	r1, r2
 8011e04:	4618      	mov	r0, r3
 8011e06:	f001 f8b3 	bl	8012f70 <xTaskCheckForTimeOut>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d132      	bne.n	8011e76 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e12:	f000 f9f6 	bl	8012202 <prvIsQueueEmpty>
 8011e16:	4603      	mov	r3, r0
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d026      	beq.n	8011e6a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d109      	bne.n	8011e38 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8011e24:	f002 f838 	bl	8013e98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e2a:	689b      	ldr	r3, [r3, #8]
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f001 fa13 	bl	8013258 <xTaskPriorityInherit>
 8011e32:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011e34:	f002 f862 	bl	8013efc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e3a:	3324      	adds	r3, #36	; 0x24
 8011e3c:	683a      	ldr	r2, [r7, #0]
 8011e3e:	4611      	mov	r1, r2
 8011e40:	4618      	mov	r0, r3
 8011e42:	f000 ffc9 	bl	8012dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011e46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e48:	f000 f989 	bl	801215e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011e4c:	f000 fdbe 	bl	80129cc <xTaskResumeAll>
 8011e50:	4603      	mov	r3, r0
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	f47f af67 	bne.w	8011d26 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8011e58:	4b18      	ldr	r3, [pc, #96]	; (8011ebc <xQueueSemaphoreTake+0x21c>)
 8011e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e5e:	601a      	str	r2, [r3, #0]
 8011e60:	f3bf 8f4f 	dsb	sy
 8011e64:	f3bf 8f6f 	isb	sy
 8011e68:	e75d      	b.n	8011d26 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011e6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e6c:	f000 f977 	bl	801215e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011e70:	f000 fdac 	bl	80129cc <xTaskResumeAll>
 8011e74:	e757      	b.n	8011d26 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011e76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e78:	f000 f971 	bl	801215e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011e7c:	f000 fda6 	bl	80129cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e82:	f000 f9be 	bl	8012202 <prvIsQueueEmpty>
 8011e86:	4603      	mov	r3, r0
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	f43f af4c 	beq.w	8011d26 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d00d      	beq.n	8011eb0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8011e94:	f002 f800 	bl	8013e98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011e98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e9a:	f000 f8b8 	bl	801200e <prvGetDisinheritPriorityAfterTimeout>
 8011e9e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea2:	689b      	ldr	r3, [r3, #8]
 8011ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f001 faae 	bl	8013408 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011eac:	f002 f826 	bl	8013efc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011eb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3738      	adds	r7, #56	; 0x38
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
 8011eba:	bf00      	nop
 8011ebc:	e000ed04 	.word	0xe000ed04

08011ec0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b08e      	sub	sp, #56	; 0x38
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	60f8      	str	r0, [r7, #12]
 8011ec8:	60b9      	str	r1, [r7, #8]
 8011eca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d10b      	bne.n	8011eee <xQueueReceiveFromISR+0x2e>
 8011ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eda:	b672      	cpsid	i
 8011edc:	f383 8811 	msr	BASEPRI, r3
 8011ee0:	f3bf 8f6f 	isb	sy
 8011ee4:	f3bf 8f4f 	dsb	sy
 8011ee8:	b662      	cpsie	i
 8011eea:	623b      	str	r3, [r7, #32]
 8011eec:	e7fe      	b.n	8011eec <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d103      	bne.n	8011efc <xQueueReceiveFromISR+0x3c>
 8011ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d101      	bne.n	8011f00 <xQueueReceiveFromISR+0x40>
 8011efc:	2301      	movs	r3, #1
 8011efe:	e000      	b.n	8011f02 <xQueueReceiveFromISR+0x42>
 8011f00:	2300      	movs	r3, #0
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d10b      	bne.n	8011f1e <xQueueReceiveFromISR+0x5e>
 8011f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f0a:	b672      	cpsid	i
 8011f0c:	f383 8811 	msr	BASEPRI, r3
 8011f10:	f3bf 8f6f 	isb	sy
 8011f14:	f3bf 8f4f 	dsb	sy
 8011f18:	b662      	cpsie	i
 8011f1a:	61fb      	str	r3, [r7, #28]
 8011f1c:	e7fe      	b.n	8011f1c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011f1e:	f002 f89b 	bl	8014058 <vPortValidateInterruptPriority>
	__asm volatile
 8011f22:	f3ef 8211 	mrs	r2, BASEPRI
 8011f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f2a:	b672      	cpsid	i
 8011f2c:	f383 8811 	msr	BASEPRI, r3
 8011f30:	f3bf 8f6f 	isb	sy
 8011f34:	f3bf 8f4f 	dsb	sy
 8011f38:	b662      	cpsie	i
 8011f3a:	61ba      	str	r2, [r7, #24]
 8011f3c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011f3e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011f40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d02f      	beq.n	8011fae <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011f58:	68b9      	ldr	r1, [r7, #8]
 8011f5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f5c:	f000 f8d9 	bl	8012112 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f62:	1e5a      	subs	r2, r3, #1
 8011f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f66:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011f68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f70:	d112      	bne.n	8011f98 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f74:	691b      	ldr	r3, [r3, #16]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d016      	beq.n	8011fa8 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f7c:	3310      	adds	r3, #16
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f000 ff7c 	bl	8012e7c <xTaskRemoveFromEventList>
 8011f84:	4603      	mov	r3, r0
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d00e      	beq.n	8011fa8 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d00b      	beq.n	8011fa8 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2201      	movs	r2, #1
 8011f94:	601a      	str	r2, [r3, #0]
 8011f96:	e007      	b.n	8011fa8 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f9c:	3301      	adds	r3, #1
 8011f9e:	b2db      	uxtb	r3, r3
 8011fa0:	b25a      	sxtb	r2, r3
 8011fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011fa8:	2301      	movs	r3, #1
 8011faa:	637b      	str	r3, [r7, #52]	; 0x34
 8011fac:	e001      	b.n	8011fb2 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8011fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fb4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011fb6:	693b      	ldr	r3, [r7, #16]
 8011fb8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	3738      	adds	r7, #56	; 0x38
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}

08011fc6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011fc6:	b580      	push	{r7, lr}
 8011fc8:	b084      	sub	sp, #16
 8011fca:	af00      	add	r7, sp, #0
 8011fcc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d10b      	bne.n	8011ff0 <vQueueDelete+0x2a>
	__asm volatile
 8011fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fdc:	b672      	cpsid	i
 8011fde:	f383 8811 	msr	BASEPRI, r3
 8011fe2:	f3bf 8f6f 	isb	sy
 8011fe6:	f3bf 8f4f 	dsb	sy
 8011fea:	b662      	cpsie	i
 8011fec:	60bb      	str	r3, [r7, #8]
 8011fee:	e7fe      	b.n	8011fee <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011ff0:	68f8      	ldr	r0, [r7, #12]
 8011ff2:	f000 f95d 	bl	80122b0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d102      	bne.n	8012006 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8012000:	68f8      	ldr	r0, [r7, #12]
 8012002:	f002 f937 	bl	8014274 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012006:	bf00      	nop
 8012008:	3710      	adds	r7, #16
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}

0801200e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801200e:	b480      	push	{r7}
 8012010:	b085      	sub	sp, #20
 8012012:	af00      	add	r7, sp, #0
 8012014:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801201a:	2b00      	cmp	r3, #0
 801201c:	d006      	beq.n	801202c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012028:	60fb      	str	r3, [r7, #12]
 801202a:	e001      	b.n	8012030 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801202c:	2300      	movs	r3, #0
 801202e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012030:	68fb      	ldr	r3, [r7, #12]
	}
 8012032:	4618      	mov	r0, r3
 8012034:	3714      	adds	r7, #20
 8012036:	46bd      	mov	sp, r7
 8012038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203c:	4770      	bx	lr

0801203e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801203e:	b580      	push	{r7, lr}
 8012040:	b086      	sub	sp, #24
 8012042:	af00      	add	r7, sp, #0
 8012044:	60f8      	str	r0, [r7, #12]
 8012046:	60b9      	str	r1, [r7, #8]
 8012048:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801204a:	2300      	movs	r3, #0
 801204c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012052:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012058:	2b00      	cmp	r3, #0
 801205a:	d10d      	bne.n	8012078 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d14d      	bne.n	8012100 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	689b      	ldr	r3, [r3, #8]
 8012068:	4618      	mov	r0, r3
 801206a:	f001 f95d 	bl	8013328 <xTaskPriorityDisinherit>
 801206e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	2200      	movs	r2, #0
 8012074:	609a      	str	r2, [r3, #8]
 8012076:	e043      	b.n	8012100 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d119      	bne.n	80120b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	6858      	ldr	r0, [r3, #4]
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012086:	461a      	mov	r2, r3
 8012088:	68b9      	ldr	r1, [r7, #8]
 801208a:	f00f f98e 	bl	80213aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	685a      	ldr	r2, [r3, #4]
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012096:	441a      	add	r2, r3
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	685a      	ldr	r2, [r3, #4]
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	689b      	ldr	r3, [r3, #8]
 80120a4:	429a      	cmp	r2, r3
 80120a6:	d32b      	bcc.n	8012100 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	681a      	ldr	r2, [r3, #0]
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	605a      	str	r2, [r3, #4]
 80120b0:	e026      	b.n	8012100 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	68d8      	ldr	r0, [r3, #12]
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120ba:	461a      	mov	r2, r3
 80120bc:	68b9      	ldr	r1, [r7, #8]
 80120be:	f00f f974 	bl	80213aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	68da      	ldr	r2, [r3, #12]
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120ca:	425b      	negs	r3, r3
 80120cc:	441a      	add	r2, r3
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	68da      	ldr	r2, [r3, #12]
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	429a      	cmp	r2, r3
 80120dc:	d207      	bcs.n	80120ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	689a      	ldr	r2, [r3, #8]
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120e6:	425b      	negs	r3, r3
 80120e8:	441a      	add	r2, r3
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2b02      	cmp	r3, #2
 80120f2:	d105      	bne.n	8012100 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d002      	beq.n	8012100 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	3b01      	subs	r3, #1
 80120fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012100:	693b      	ldr	r3, [r7, #16]
 8012102:	1c5a      	adds	r2, r3, #1
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012108:	697b      	ldr	r3, [r7, #20]
}
 801210a:	4618      	mov	r0, r3
 801210c:	3718      	adds	r7, #24
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012112:	b580      	push	{r7, lr}
 8012114:	b082      	sub	sp, #8
 8012116:	af00      	add	r7, sp, #0
 8012118:	6078      	str	r0, [r7, #4]
 801211a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012120:	2b00      	cmp	r3, #0
 8012122:	d018      	beq.n	8012156 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	68da      	ldr	r2, [r3, #12]
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801212c:	441a      	add	r2, r3
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	68da      	ldr	r2, [r3, #12]
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	689b      	ldr	r3, [r3, #8]
 801213a:	429a      	cmp	r2, r3
 801213c:	d303      	bcc.n	8012146 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681a      	ldr	r2, [r3, #0]
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	68d9      	ldr	r1, [r3, #12]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801214e:	461a      	mov	r2, r3
 8012150:	6838      	ldr	r0, [r7, #0]
 8012152:	f00f f92a 	bl	80213aa <memcpy>
	}
}
 8012156:	bf00      	nop
 8012158:	3708      	adds	r7, #8
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}

0801215e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801215e:	b580      	push	{r7, lr}
 8012160:	b084      	sub	sp, #16
 8012162:	af00      	add	r7, sp, #0
 8012164:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012166:	f001 fe97 	bl	8013e98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012170:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012172:	e011      	b.n	8012198 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012178:	2b00      	cmp	r3, #0
 801217a:	d012      	beq.n	80121a2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	3324      	adds	r3, #36	; 0x24
 8012180:	4618      	mov	r0, r3
 8012182:	f000 fe7b 	bl	8012e7c <xTaskRemoveFromEventList>
 8012186:	4603      	mov	r3, r0
 8012188:	2b00      	cmp	r3, #0
 801218a:	d001      	beq.n	8012190 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801218c:	f000 ff54 	bl	8013038 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012190:	7bfb      	ldrb	r3, [r7, #15]
 8012192:	3b01      	subs	r3, #1
 8012194:	b2db      	uxtb	r3, r3
 8012196:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801219c:	2b00      	cmp	r3, #0
 801219e:	dce9      	bgt.n	8012174 <prvUnlockQueue+0x16>
 80121a0:	e000      	b.n	80121a4 <prvUnlockQueue+0x46>
					break;
 80121a2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	22ff      	movs	r2, #255	; 0xff
 80121a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80121ac:	f001 fea6 	bl	8013efc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80121b0:	f001 fe72 	bl	8013e98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80121ba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80121bc:	e011      	b.n	80121e2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	691b      	ldr	r3, [r3, #16]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d012      	beq.n	80121ec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	3310      	adds	r3, #16
 80121ca:	4618      	mov	r0, r3
 80121cc:	f000 fe56 	bl	8012e7c <xTaskRemoveFromEventList>
 80121d0:	4603      	mov	r3, r0
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d001      	beq.n	80121da <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80121d6:	f000 ff2f 	bl	8013038 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80121da:	7bbb      	ldrb	r3, [r7, #14]
 80121dc:	3b01      	subs	r3, #1
 80121de:	b2db      	uxtb	r3, r3
 80121e0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80121e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	dce9      	bgt.n	80121be <prvUnlockQueue+0x60>
 80121ea:	e000      	b.n	80121ee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80121ec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	22ff      	movs	r2, #255	; 0xff
 80121f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80121f6:	f001 fe81 	bl	8013efc <vPortExitCritical>
}
 80121fa:	bf00      	nop
 80121fc:	3710      	adds	r7, #16
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}

08012202 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012202:	b580      	push	{r7, lr}
 8012204:	b084      	sub	sp, #16
 8012206:	af00      	add	r7, sp, #0
 8012208:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801220a:	f001 fe45 	bl	8013e98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012212:	2b00      	cmp	r3, #0
 8012214:	d102      	bne.n	801221c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012216:	2301      	movs	r3, #1
 8012218:	60fb      	str	r3, [r7, #12]
 801221a:	e001      	b.n	8012220 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801221c:	2300      	movs	r3, #0
 801221e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012220:	f001 fe6c 	bl	8013efc <vPortExitCritical>

	return xReturn;
 8012224:	68fb      	ldr	r3, [r7, #12]
}
 8012226:	4618      	mov	r0, r3
 8012228:	3710      	adds	r7, #16
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}

0801222e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801222e:	b580      	push	{r7, lr}
 8012230:	b084      	sub	sp, #16
 8012232:	af00      	add	r7, sp, #0
 8012234:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012236:	f001 fe2f 	bl	8013e98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012242:	429a      	cmp	r2, r3
 8012244:	d102      	bne.n	801224c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012246:	2301      	movs	r3, #1
 8012248:	60fb      	str	r3, [r7, #12]
 801224a:	e001      	b.n	8012250 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801224c:	2300      	movs	r3, #0
 801224e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012250:	f001 fe54 	bl	8013efc <vPortExitCritical>

	return xReturn;
 8012254:	68fb      	ldr	r3, [r7, #12]
}
 8012256:	4618      	mov	r0, r3
 8012258:	3710      	adds	r7, #16
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}
	...

08012260 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012260:	b480      	push	{r7}
 8012262:	b085      	sub	sp, #20
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
 8012268:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801226a:	2300      	movs	r3, #0
 801226c:	60fb      	str	r3, [r7, #12]
 801226e:	e014      	b.n	801229a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012270:	4a0e      	ldr	r2, [pc, #56]	; (80122ac <vQueueAddToRegistry+0x4c>)
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d10b      	bne.n	8012294 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801227c:	490b      	ldr	r1, [pc, #44]	; (80122ac <vQueueAddToRegistry+0x4c>)
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	683a      	ldr	r2, [r7, #0]
 8012282:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012286:	4a09      	ldr	r2, [pc, #36]	; (80122ac <vQueueAddToRegistry+0x4c>)
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	00db      	lsls	r3, r3, #3
 801228c:	4413      	add	r3, r2
 801228e:	687a      	ldr	r2, [r7, #4]
 8012290:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012292:	e005      	b.n	80122a0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	3301      	adds	r3, #1
 8012298:	60fb      	str	r3, [r7, #12]
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	2b07      	cmp	r3, #7
 801229e:	d9e7      	bls.n	8012270 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80122a0:	bf00      	nop
 80122a2:	3714      	adds	r7, #20
 80122a4:	46bd      	mov	sp, r7
 80122a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122aa:	4770      	bx	lr
 80122ac:	2000cbbc 	.word	0x2000cbbc

080122b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80122b0:	b480      	push	{r7}
 80122b2:	b085      	sub	sp, #20
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80122b8:	2300      	movs	r3, #0
 80122ba:	60fb      	str	r3, [r7, #12]
 80122bc:	e016      	b.n	80122ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80122be:	4a10      	ldr	r2, [pc, #64]	; (8012300 <vQueueUnregisterQueue+0x50>)
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	00db      	lsls	r3, r3, #3
 80122c4:	4413      	add	r3, r2
 80122c6:	685b      	ldr	r3, [r3, #4]
 80122c8:	687a      	ldr	r2, [r7, #4]
 80122ca:	429a      	cmp	r2, r3
 80122cc:	d10b      	bne.n	80122e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80122ce:	4a0c      	ldr	r2, [pc, #48]	; (8012300 <vQueueUnregisterQueue+0x50>)
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	2100      	movs	r1, #0
 80122d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80122d8:	4a09      	ldr	r2, [pc, #36]	; (8012300 <vQueueUnregisterQueue+0x50>)
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	00db      	lsls	r3, r3, #3
 80122de:	4413      	add	r3, r2
 80122e0:	2200      	movs	r2, #0
 80122e2:	605a      	str	r2, [r3, #4]
				break;
 80122e4:	e005      	b.n	80122f2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	3301      	adds	r3, #1
 80122ea:	60fb      	str	r3, [r7, #12]
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	2b07      	cmp	r3, #7
 80122f0:	d9e5      	bls.n	80122be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80122f2:	bf00      	nop
 80122f4:	3714      	adds	r7, #20
 80122f6:	46bd      	mov	sp, r7
 80122f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fc:	4770      	bx	lr
 80122fe:	bf00      	nop
 8012300:	2000cbbc 	.word	0x2000cbbc

08012304 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012304:	b580      	push	{r7, lr}
 8012306:	b086      	sub	sp, #24
 8012308:	af00      	add	r7, sp, #0
 801230a:	60f8      	str	r0, [r7, #12]
 801230c:	60b9      	str	r1, [r7, #8]
 801230e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012314:	f001 fdc0 	bl	8013e98 <vPortEnterCritical>
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801231e:	b25b      	sxtb	r3, r3
 8012320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012324:	d103      	bne.n	801232e <vQueueWaitForMessageRestricted+0x2a>
 8012326:	697b      	ldr	r3, [r7, #20]
 8012328:	2200      	movs	r2, #0
 801232a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012334:	b25b      	sxtb	r3, r3
 8012336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801233a:	d103      	bne.n	8012344 <vQueueWaitForMessageRestricted+0x40>
 801233c:	697b      	ldr	r3, [r7, #20]
 801233e:	2200      	movs	r2, #0
 8012340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012344:	f001 fdda 	bl	8013efc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801234c:	2b00      	cmp	r3, #0
 801234e:	d106      	bne.n	801235e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012350:	697b      	ldr	r3, [r7, #20]
 8012352:	3324      	adds	r3, #36	; 0x24
 8012354:	687a      	ldr	r2, [r7, #4]
 8012356:	68b9      	ldr	r1, [r7, #8]
 8012358:	4618      	mov	r0, r3
 801235a:	f000 fd63 	bl	8012e24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801235e:	6978      	ldr	r0, [r7, #20]
 8012360:	f7ff fefd 	bl	801215e <prvUnlockQueue>
	}
 8012364:	bf00      	nop
 8012366:	3718      	adds	r7, #24
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801236c:	b580      	push	{r7, lr}
 801236e:	b08e      	sub	sp, #56	; 0x38
 8012370:	af04      	add	r7, sp, #16
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	60b9      	str	r1, [r7, #8]
 8012376:	607a      	str	r2, [r7, #4]
 8012378:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801237a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801237c:	2b00      	cmp	r3, #0
 801237e:	d10b      	bne.n	8012398 <xTaskCreateStatic+0x2c>
 8012380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012384:	b672      	cpsid	i
 8012386:	f383 8811 	msr	BASEPRI, r3
 801238a:	f3bf 8f6f 	isb	sy
 801238e:	f3bf 8f4f 	dsb	sy
 8012392:	b662      	cpsie	i
 8012394:	623b      	str	r3, [r7, #32]
 8012396:	e7fe      	b.n	8012396 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8012398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801239a:	2b00      	cmp	r3, #0
 801239c:	d10b      	bne.n	80123b6 <xTaskCreateStatic+0x4a>
 801239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a2:	b672      	cpsid	i
 80123a4:	f383 8811 	msr	BASEPRI, r3
 80123a8:	f3bf 8f6f 	isb	sy
 80123ac:	f3bf 8f4f 	dsb	sy
 80123b0:	b662      	cpsie	i
 80123b2:	61fb      	str	r3, [r7, #28]
 80123b4:	e7fe      	b.n	80123b4 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80123b6:	2360      	movs	r3, #96	; 0x60
 80123b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80123ba:	693b      	ldr	r3, [r7, #16]
 80123bc:	2b60      	cmp	r3, #96	; 0x60
 80123be:	d00b      	beq.n	80123d8 <xTaskCreateStatic+0x6c>
 80123c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c4:	b672      	cpsid	i
 80123c6:	f383 8811 	msr	BASEPRI, r3
 80123ca:	f3bf 8f6f 	isb	sy
 80123ce:	f3bf 8f4f 	dsb	sy
 80123d2:	b662      	cpsie	i
 80123d4:	61bb      	str	r3, [r7, #24]
 80123d6:	e7fe      	b.n	80123d6 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80123d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80123da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d01e      	beq.n	801241e <xTaskCreateStatic+0xb2>
 80123e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d01b      	beq.n	801241e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80123e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80123ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80123f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f2:	2202      	movs	r2, #2
 80123f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80123f8:	2300      	movs	r3, #0
 80123fa:	9303      	str	r3, [sp, #12]
 80123fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123fe:	9302      	str	r3, [sp, #8]
 8012400:	f107 0314 	add.w	r3, r7, #20
 8012404:	9301      	str	r3, [sp, #4]
 8012406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012408:	9300      	str	r3, [sp, #0]
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	687a      	ldr	r2, [r7, #4]
 801240e:	68b9      	ldr	r1, [r7, #8]
 8012410:	68f8      	ldr	r0, [r7, #12]
 8012412:	f000 f850 	bl	80124b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012416:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012418:	f000 f8e0 	bl	80125dc <prvAddNewTaskToReadyList>
 801241c:	e001      	b.n	8012422 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801241e:	2300      	movs	r3, #0
 8012420:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012422:	697b      	ldr	r3, [r7, #20]
	}
 8012424:	4618      	mov	r0, r3
 8012426:	3728      	adds	r7, #40	; 0x28
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}

0801242c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801242c:	b580      	push	{r7, lr}
 801242e:	b08c      	sub	sp, #48	; 0x30
 8012430:	af04      	add	r7, sp, #16
 8012432:	60f8      	str	r0, [r7, #12]
 8012434:	60b9      	str	r1, [r7, #8]
 8012436:	603b      	str	r3, [r7, #0]
 8012438:	4613      	mov	r3, r2
 801243a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801243c:	88fb      	ldrh	r3, [r7, #6]
 801243e:	009b      	lsls	r3, r3, #2
 8012440:	4618      	mov	r0, r3
 8012442:	f001 fe4b 	bl	80140dc <pvPortMalloc>
 8012446:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012448:	697b      	ldr	r3, [r7, #20]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d00e      	beq.n	801246c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801244e:	2060      	movs	r0, #96	; 0x60
 8012450:	f001 fe44 	bl	80140dc <pvPortMalloc>
 8012454:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012456:	69fb      	ldr	r3, [r7, #28]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d003      	beq.n	8012464 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801245c:	69fb      	ldr	r3, [r7, #28]
 801245e:	697a      	ldr	r2, [r7, #20]
 8012460:	631a      	str	r2, [r3, #48]	; 0x30
 8012462:	e005      	b.n	8012470 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012464:	6978      	ldr	r0, [r7, #20]
 8012466:	f001 ff05 	bl	8014274 <vPortFree>
 801246a:	e001      	b.n	8012470 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801246c:	2300      	movs	r3, #0
 801246e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012470:	69fb      	ldr	r3, [r7, #28]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d017      	beq.n	80124a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012476:	69fb      	ldr	r3, [r7, #28]
 8012478:	2200      	movs	r2, #0
 801247a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801247e:	88fa      	ldrh	r2, [r7, #6]
 8012480:	2300      	movs	r3, #0
 8012482:	9303      	str	r3, [sp, #12]
 8012484:	69fb      	ldr	r3, [r7, #28]
 8012486:	9302      	str	r3, [sp, #8]
 8012488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801248a:	9301      	str	r3, [sp, #4]
 801248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801248e:	9300      	str	r3, [sp, #0]
 8012490:	683b      	ldr	r3, [r7, #0]
 8012492:	68b9      	ldr	r1, [r7, #8]
 8012494:	68f8      	ldr	r0, [r7, #12]
 8012496:	f000 f80e 	bl	80124b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801249a:	69f8      	ldr	r0, [r7, #28]
 801249c:	f000 f89e 	bl	80125dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80124a0:	2301      	movs	r3, #1
 80124a2:	61bb      	str	r3, [r7, #24]
 80124a4:	e002      	b.n	80124ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80124a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80124ac:	69bb      	ldr	r3, [r7, #24]
	}
 80124ae:	4618      	mov	r0, r3
 80124b0:	3720      	adds	r7, #32
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}

080124b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80124b6:	b580      	push	{r7, lr}
 80124b8:	b088      	sub	sp, #32
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	60f8      	str	r0, [r7, #12]
 80124be:	60b9      	str	r1, [r7, #8]
 80124c0:	607a      	str	r2, [r7, #4]
 80124c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80124c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	009b      	lsls	r3, r3, #2
 80124cc:	461a      	mov	r2, r3
 80124ce:	21a5      	movs	r1, #165	; 0xa5
 80124d0:	f00e ff76 	bl	80213c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80124d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80124d8:	6879      	ldr	r1, [r7, #4]
 80124da:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80124de:	440b      	add	r3, r1
 80124e0:	009b      	lsls	r3, r3, #2
 80124e2:	4413      	add	r3, r2
 80124e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80124e6:	69bb      	ldr	r3, [r7, #24]
 80124e8:	f023 0307 	bic.w	r3, r3, #7
 80124ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80124ee:	69bb      	ldr	r3, [r7, #24]
 80124f0:	f003 0307 	and.w	r3, r3, #7
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d00b      	beq.n	8012510 <prvInitialiseNewTask+0x5a>
 80124f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124fc:	b672      	cpsid	i
 80124fe:	f383 8811 	msr	BASEPRI, r3
 8012502:	f3bf 8f6f 	isb	sy
 8012506:	f3bf 8f4f 	dsb	sy
 801250a:	b662      	cpsie	i
 801250c:	617b      	str	r3, [r7, #20]
 801250e:	e7fe      	b.n	801250e <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d01f      	beq.n	8012556 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012516:	2300      	movs	r3, #0
 8012518:	61fb      	str	r3, [r7, #28]
 801251a:	e012      	b.n	8012542 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801251c:	68ba      	ldr	r2, [r7, #8]
 801251e:	69fb      	ldr	r3, [r7, #28]
 8012520:	4413      	add	r3, r2
 8012522:	7819      	ldrb	r1, [r3, #0]
 8012524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012526:	69fb      	ldr	r3, [r7, #28]
 8012528:	4413      	add	r3, r2
 801252a:	3334      	adds	r3, #52	; 0x34
 801252c:	460a      	mov	r2, r1
 801252e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012530:	68ba      	ldr	r2, [r7, #8]
 8012532:	69fb      	ldr	r3, [r7, #28]
 8012534:	4413      	add	r3, r2
 8012536:	781b      	ldrb	r3, [r3, #0]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d006      	beq.n	801254a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801253c:	69fb      	ldr	r3, [r7, #28]
 801253e:	3301      	adds	r3, #1
 8012540:	61fb      	str	r3, [r7, #28]
 8012542:	69fb      	ldr	r3, [r7, #28]
 8012544:	2b0f      	cmp	r3, #15
 8012546:	d9e9      	bls.n	801251c <prvInitialiseNewTask+0x66>
 8012548:	e000      	b.n	801254c <prvInitialiseNewTask+0x96>
			{
				break;
 801254a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801254e:	2200      	movs	r2, #0
 8012550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012554:	e003      	b.n	801255e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012558:	2200      	movs	r2, #0
 801255a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012560:	2b37      	cmp	r3, #55	; 0x37
 8012562:	d901      	bls.n	8012568 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012564:	2337      	movs	r3, #55	; 0x37
 8012566:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801256a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801256c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012572:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012576:	2200      	movs	r2, #0
 8012578:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801257c:	3304      	adds	r3, #4
 801257e:	4618      	mov	r0, r3
 8012580:	f7fe fd76 	bl	8011070 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012586:	3318      	adds	r3, #24
 8012588:	4618      	mov	r0, r3
 801258a:	f7fe fd71 	bl	8011070 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012592:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012596:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801259c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80125a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125a6:	2200      	movs	r2, #0
 80125a8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80125aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ac:	2200      	movs	r2, #0
 80125ae:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80125b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b2:	2200      	movs	r2, #0
 80125b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80125b8:	683a      	ldr	r2, [r7, #0]
 80125ba:	68f9      	ldr	r1, [r7, #12]
 80125bc:	69b8      	ldr	r0, [r7, #24]
 80125be:	f001 fb63 	bl	8013c88 <pxPortInitialiseStack>
 80125c2:	4602      	mov	r2, r0
 80125c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80125c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d002      	beq.n	80125d4 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80125ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80125d4:	bf00      	nop
 80125d6:	3720      	adds	r7, #32
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}

080125dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80125e4:	f001 fc58 	bl	8013e98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80125e8:	4b2d      	ldr	r3, [pc, #180]	; (80126a0 <prvAddNewTaskToReadyList+0xc4>)
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	3301      	adds	r3, #1
 80125ee:	4a2c      	ldr	r2, [pc, #176]	; (80126a0 <prvAddNewTaskToReadyList+0xc4>)
 80125f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80125f2:	4b2c      	ldr	r3, [pc, #176]	; (80126a4 <prvAddNewTaskToReadyList+0xc8>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d109      	bne.n	801260e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80125fa:	4a2a      	ldr	r2, [pc, #168]	; (80126a4 <prvAddNewTaskToReadyList+0xc8>)
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012600:	4b27      	ldr	r3, [pc, #156]	; (80126a0 <prvAddNewTaskToReadyList+0xc4>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	2b01      	cmp	r3, #1
 8012606:	d110      	bne.n	801262a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012608:	f000 fd3c 	bl	8013084 <prvInitialiseTaskLists>
 801260c:	e00d      	b.n	801262a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801260e:	4b26      	ldr	r3, [pc, #152]	; (80126a8 <prvAddNewTaskToReadyList+0xcc>)
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d109      	bne.n	801262a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012616:	4b23      	ldr	r3, [pc, #140]	; (80126a4 <prvAddNewTaskToReadyList+0xc8>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012620:	429a      	cmp	r2, r3
 8012622:	d802      	bhi.n	801262a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012624:	4a1f      	ldr	r2, [pc, #124]	; (80126a4 <prvAddNewTaskToReadyList+0xc8>)
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801262a:	4b20      	ldr	r3, [pc, #128]	; (80126ac <prvAddNewTaskToReadyList+0xd0>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	3301      	adds	r3, #1
 8012630:	4a1e      	ldr	r2, [pc, #120]	; (80126ac <prvAddNewTaskToReadyList+0xd0>)
 8012632:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012634:	4b1d      	ldr	r3, [pc, #116]	; (80126ac <prvAddNewTaskToReadyList+0xd0>)
 8012636:	681a      	ldr	r2, [r3, #0]
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012640:	4b1b      	ldr	r3, [pc, #108]	; (80126b0 <prvAddNewTaskToReadyList+0xd4>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	429a      	cmp	r2, r3
 8012646:	d903      	bls.n	8012650 <prvAddNewTaskToReadyList+0x74>
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801264c:	4a18      	ldr	r2, [pc, #96]	; (80126b0 <prvAddNewTaskToReadyList+0xd4>)
 801264e:	6013      	str	r3, [r2, #0]
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012654:	4613      	mov	r3, r2
 8012656:	009b      	lsls	r3, r3, #2
 8012658:	4413      	add	r3, r2
 801265a:	009b      	lsls	r3, r3, #2
 801265c:	4a15      	ldr	r2, [pc, #84]	; (80126b4 <prvAddNewTaskToReadyList+0xd8>)
 801265e:	441a      	add	r2, r3
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	3304      	adds	r3, #4
 8012664:	4619      	mov	r1, r3
 8012666:	4610      	mov	r0, r2
 8012668:	f7fe fd0f 	bl	801108a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801266c:	f001 fc46 	bl	8013efc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012670:	4b0d      	ldr	r3, [pc, #52]	; (80126a8 <prvAddNewTaskToReadyList+0xcc>)
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d00e      	beq.n	8012696 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012678:	4b0a      	ldr	r3, [pc, #40]	; (80126a4 <prvAddNewTaskToReadyList+0xc8>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012682:	429a      	cmp	r2, r3
 8012684:	d207      	bcs.n	8012696 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012686:	4b0c      	ldr	r3, [pc, #48]	; (80126b8 <prvAddNewTaskToReadyList+0xdc>)
 8012688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801268c:	601a      	str	r2, [r3, #0]
 801268e:	f3bf 8f4f 	dsb	sy
 8012692:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012696:	bf00      	nop
 8012698:	3708      	adds	r7, #8
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}
 801269e:	bf00      	nop
 80126a0:	20000df4 	.word	0x20000df4
 80126a4:	20000920 	.word	0x20000920
 80126a8:	20000e00 	.word	0x20000e00
 80126ac:	20000e10 	.word	0x20000e10
 80126b0:	20000dfc 	.word	0x20000dfc
 80126b4:	20000924 	.word	0x20000924
 80126b8:	e000ed04 	.word	0xe000ed04

080126bc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b084      	sub	sp, #16
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80126c4:	f001 fbe8 	bl	8013e98 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d102      	bne.n	80126d4 <vTaskDelete+0x18>
 80126ce:	4b2d      	ldr	r3, [pc, #180]	; (8012784 <vTaskDelete+0xc8>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	e000      	b.n	80126d6 <vTaskDelete+0x1a>
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	3304      	adds	r3, #4
 80126dc:	4618      	mov	r0, r3
 80126de:	f7fe fd31 	bl	8011144 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d004      	beq.n	80126f4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	3318      	adds	r3, #24
 80126ee:	4618      	mov	r0, r3
 80126f0:	f7fe fd28 	bl	8011144 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80126f4:	4b24      	ldr	r3, [pc, #144]	; (8012788 <vTaskDelete+0xcc>)
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	3301      	adds	r3, #1
 80126fa:	4a23      	ldr	r2, [pc, #140]	; (8012788 <vTaskDelete+0xcc>)
 80126fc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80126fe:	4b21      	ldr	r3, [pc, #132]	; (8012784 <vTaskDelete+0xc8>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	68fa      	ldr	r2, [r7, #12]
 8012704:	429a      	cmp	r2, r3
 8012706:	d10b      	bne.n	8012720 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	3304      	adds	r3, #4
 801270c:	4619      	mov	r1, r3
 801270e:	481f      	ldr	r0, [pc, #124]	; (801278c <vTaskDelete+0xd0>)
 8012710:	f7fe fcbb 	bl	801108a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8012714:	4b1e      	ldr	r3, [pc, #120]	; (8012790 <vTaskDelete+0xd4>)
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	3301      	adds	r3, #1
 801271a:	4a1d      	ldr	r2, [pc, #116]	; (8012790 <vTaskDelete+0xd4>)
 801271c:	6013      	str	r3, [r2, #0]
 801271e:	e009      	b.n	8012734 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8012720:	4b1c      	ldr	r3, [pc, #112]	; (8012794 <vTaskDelete+0xd8>)
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	3b01      	subs	r3, #1
 8012726:	4a1b      	ldr	r2, [pc, #108]	; (8012794 <vTaskDelete+0xd8>)
 8012728:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 801272a:	68f8      	ldr	r0, [r7, #12]
 801272c:	f000 fd16 	bl	801315c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8012730:	f000 fd44 	bl	80131bc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8012734:	f001 fbe2 	bl	8013efc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8012738:	4b17      	ldr	r3, [pc, #92]	; (8012798 <vTaskDelete+0xdc>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d01c      	beq.n	801277a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8012740:	4b10      	ldr	r3, [pc, #64]	; (8012784 <vTaskDelete+0xc8>)
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	68fa      	ldr	r2, [r7, #12]
 8012746:	429a      	cmp	r2, r3
 8012748:	d117      	bne.n	801277a <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801274a:	4b14      	ldr	r3, [pc, #80]	; (801279c <vTaskDelete+0xe0>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d00b      	beq.n	801276a <vTaskDelete+0xae>
 8012752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012756:	b672      	cpsid	i
 8012758:	f383 8811 	msr	BASEPRI, r3
 801275c:	f3bf 8f6f 	isb	sy
 8012760:	f3bf 8f4f 	dsb	sy
 8012764:	b662      	cpsie	i
 8012766:	60bb      	str	r3, [r7, #8]
 8012768:	e7fe      	b.n	8012768 <vTaskDelete+0xac>
				portYIELD_WITHIN_API();
 801276a:	4b0d      	ldr	r3, [pc, #52]	; (80127a0 <vTaskDelete+0xe4>)
 801276c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012770:	601a      	str	r2, [r3, #0]
 8012772:	f3bf 8f4f 	dsb	sy
 8012776:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801277a:	bf00      	nop
 801277c:	3710      	adds	r7, #16
 801277e:	46bd      	mov	sp, r7
 8012780:	bd80      	pop	{r7, pc}
 8012782:	bf00      	nop
 8012784:	20000920 	.word	0x20000920
 8012788:	20000e10 	.word	0x20000e10
 801278c:	20000dc8 	.word	0x20000dc8
 8012790:	20000ddc 	.word	0x20000ddc
 8012794:	20000df4 	.word	0x20000df4
 8012798:	20000e00 	.word	0x20000e00
 801279c:	20000e1c 	.word	0x20000e1c
 80127a0:	e000ed04 	.word	0xe000ed04

080127a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b084      	sub	sp, #16
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80127ac:	2300      	movs	r3, #0
 80127ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d018      	beq.n	80127e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80127b6:	4b14      	ldr	r3, [pc, #80]	; (8012808 <vTaskDelay+0x64>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d00b      	beq.n	80127d6 <vTaskDelay+0x32>
 80127be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127c2:	b672      	cpsid	i
 80127c4:	f383 8811 	msr	BASEPRI, r3
 80127c8:	f3bf 8f6f 	isb	sy
 80127cc:	f3bf 8f4f 	dsb	sy
 80127d0:	b662      	cpsie	i
 80127d2:	60bb      	str	r3, [r7, #8]
 80127d4:	e7fe      	b.n	80127d4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80127d6:	f000 f8eb 	bl	80129b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80127da:	2100      	movs	r1, #0
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	f000 feab 	bl	8013538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80127e2:	f000 f8f3 	bl	80129cc <xTaskResumeAll>
 80127e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d107      	bne.n	80127fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80127ee:	4b07      	ldr	r3, [pc, #28]	; (801280c <vTaskDelay+0x68>)
 80127f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127f4:	601a      	str	r2, [r3, #0]
 80127f6:	f3bf 8f4f 	dsb	sy
 80127fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80127fe:	bf00      	nop
 8012800:	3710      	adds	r7, #16
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}
 8012806:	bf00      	nop
 8012808:	20000e1c 	.word	0x20000e1c
 801280c:	e000ed04 	.word	0xe000ed04

08012810 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8012810:	b580      	push	{r7, lr}
 8012812:	b088      	sub	sp, #32
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801281c:	69bb      	ldr	r3, [r7, #24]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d10b      	bne.n	801283a <eTaskGetState+0x2a>
 8012822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012826:	b672      	cpsid	i
 8012828:	f383 8811 	msr	BASEPRI, r3
 801282c:	f3bf 8f6f 	isb	sy
 8012830:	f3bf 8f4f 	dsb	sy
 8012834:	b662      	cpsie	i
 8012836:	60bb      	str	r3, [r7, #8]
 8012838:	e7fe      	b.n	8012838 <eTaskGetState+0x28>

		if( pxTCB == pxCurrentTCB )
 801283a:	4b24      	ldr	r3, [pc, #144]	; (80128cc <eTaskGetState+0xbc>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	69ba      	ldr	r2, [r7, #24]
 8012840:	429a      	cmp	r2, r3
 8012842:	d102      	bne.n	801284a <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8012844:	2300      	movs	r3, #0
 8012846:	77fb      	strb	r3, [r7, #31]
 8012848:	e03a      	b.n	80128c0 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 801284a:	f001 fb25 	bl	8013e98 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801284e:	69bb      	ldr	r3, [r7, #24]
 8012850:	695b      	ldr	r3, [r3, #20]
 8012852:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8012854:	4b1e      	ldr	r3, [pc, #120]	; (80128d0 <eTaskGetState+0xc0>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801285a:	4b1e      	ldr	r3, [pc, #120]	; (80128d4 <eTaskGetState+0xc4>)
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8012860:	f001 fb4c 	bl	8013efc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8012864:	697a      	ldr	r2, [r7, #20]
 8012866:	693b      	ldr	r3, [r7, #16]
 8012868:	429a      	cmp	r2, r3
 801286a:	d003      	beq.n	8012874 <eTaskGetState+0x64>
 801286c:	697a      	ldr	r2, [r7, #20]
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	429a      	cmp	r2, r3
 8012872:	d102      	bne.n	801287a <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8012874:	2302      	movs	r3, #2
 8012876:	77fb      	strb	r3, [r7, #31]
 8012878:	e022      	b.n	80128c0 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801287a:	697b      	ldr	r3, [r7, #20]
 801287c:	4a16      	ldr	r2, [pc, #88]	; (80128d8 <eTaskGetState+0xc8>)
 801287e:	4293      	cmp	r3, r2
 8012880:	d112      	bne.n	80128a8 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8012882:	69bb      	ldr	r3, [r7, #24]
 8012884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012886:	2b00      	cmp	r3, #0
 8012888:	d10b      	bne.n	80128a2 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801288a:	69bb      	ldr	r3, [r7, #24]
 801288c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8012890:	b2db      	uxtb	r3, r3
 8012892:	2b01      	cmp	r3, #1
 8012894:	d102      	bne.n	801289c <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8012896:	2302      	movs	r3, #2
 8012898:	77fb      	strb	r3, [r7, #31]
 801289a:	e011      	b.n	80128c0 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 801289c:	2303      	movs	r3, #3
 801289e:	77fb      	strb	r3, [r7, #31]
 80128a0:	e00e      	b.n	80128c0 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80128a2:	2302      	movs	r3, #2
 80128a4:	77fb      	strb	r3, [r7, #31]
 80128a6:	e00b      	b.n	80128c0 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80128a8:	697b      	ldr	r3, [r7, #20]
 80128aa:	4a0c      	ldr	r2, [pc, #48]	; (80128dc <eTaskGetState+0xcc>)
 80128ac:	4293      	cmp	r3, r2
 80128ae:	d002      	beq.n	80128b6 <eTaskGetState+0xa6>
 80128b0:	697b      	ldr	r3, [r7, #20]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d102      	bne.n	80128bc <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80128b6:	2304      	movs	r3, #4
 80128b8:	77fb      	strb	r3, [r7, #31]
 80128ba:	e001      	b.n	80128c0 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80128bc:	2301      	movs	r3, #1
 80128be:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80128c0:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80128c2:	4618      	mov	r0, r3
 80128c4:	3720      	adds	r7, #32
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd80      	pop	{r7, pc}
 80128ca:	bf00      	nop
 80128cc:	20000920 	.word	0x20000920
 80128d0:	20000dac 	.word	0x20000dac
 80128d4:	20000db0 	.word	0x20000db0
 80128d8:	20000de0 	.word	0x20000de0
 80128dc:	20000dc8 	.word	0x20000dc8

080128e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b08a      	sub	sp, #40	; 0x28
 80128e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80128e6:	2300      	movs	r3, #0
 80128e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80128ea:	2300      	movs	r3, #0
 80128ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80128ee:	463a      	mov	r2, r7
 80128f0:	1d39      	adds	r1, r7, #4
 80128f2:	f107 0308 	add.w	r3, r7, #8
 80128f6:	4618      	mov	r0, r3
 80128f8:	f7fe fb66 	bl	8010fc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80128fc:	6839      	ldr	r1, [r7, #0]
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	68ba      	ldr	r2, [r7, #8]
 8012902:	9202      	str	r2, [sp, #8]
 8012904:	9301      	str	r3, [sp, #4]
 8012906:	2300      	movs	r3, #0
 8012908:	9300      	str	r3, [sp, #0]
 801290a:	2300      	movs	r3, #0
 801290c:	460a      	mov	r2, r1
 801290e:	4922      	ldr	r1, [pc, #136]	; (8012998 <vTaskStartScheduler+0xb8>)
 8012910:	4822      	ldr	r0, [pc, #136]	; (801299c <vTaskStartScheduler+0xbc>)
 8012912:	f7ff fd2b 	bl	801236c <xTaskCreateStatic>
 8012916:	4602      	mov	r2, r0
 8012918:	4b21      	ldr	r3, [pc, #132]	; (80129a0 <vTaskStartScheduler+0xc0>)
 801291a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801291c:	4b20      	ldr	r3, [pc, #128]	; (80129a0 <vTaskStartScheduler+0xc0>)
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d002      	beq.n	801292a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012924:	2301      	movs	r3, #1
 8012926:	617b      	str	r3, [r7, #20]
 8012928:	e001      	b.n	801292e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801292a:	2300      	movs	r3, #0
 801292c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801292e:	697b      	ldr	r3, [r7, #20]
 8012930:	2b01      	cmp	r3, #1
 8012932:	d102      	bne.n	801293a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012934:	f000 fe54 	bl	80135e0 <xTimerCreateTimerTask>
 8012938:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	2b01      	cmp	r3, #1
 801293e:	d117      	bne.n	8012970 <vTaskStartScheduler+0x90>
 8012940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012944:	b672      	cpsid	i
 8012946:	f383 8811 	msr	BASEPRI, r3
 801294a:	f3bf 8f6f 	isb	sy
 801294e:	f3bf 8f4f 	dsb	sy
 8012952:	b662      	cpsie	i
 8012954:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012956:	4b13      	ldr	r3, [pc, #76]	; (80129a4 <vTaskStartScheduler+0xc4>)
 8012958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801295c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801295e:	4b12      	ldr	r3, [pc, #72]	; (80129a8 <vTaskStartScheduler+0xc8>)
 8012960:	2201      	movs	r2, #1
 8012962:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012964:	4b11      	ldr	r3, [pc, #68]	; (80129ac <vTaskStartScheduler+0xcc>)
 8012966:	2200      	movs	r2, #0
 8012968:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801296a:	f001 fa19 	bl	8013da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801296e:	e00f      	b.n	8012990 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012970:	697b      	ldr	r3, [r7, #20]
 8012972:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012976:	d10b      	bne.n	8012990 <vTaskStartScheduler+0xb0>
 8012978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801297c:	b672      	cpsid	i
 801297e:	f383 8811 	msr	BASEPRI, r3
 8012982:	f3bf 8f6f 	isb	sy
 8012986:	f3bf 8f4f 	dsb	sy
 801298a:	b662      	cpsie	i
 801298c:	60fb      	str	r3, [r7, #12]
 801298e:	e7fe      	b.n	801298e <vTaskStartScheduler+0xae>
}
 8012990:	bf00      	nop
 8012992:	3718      	adds	r7, #24
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}
 8012998:	080223d0 	.word	0x080223d0
 801299c:	08013051 	.word	0x08013051
 80129a0:	20000e18 	.word	0x20000e18
 80129a4:	20000e14 	.word	0x20000e14
 80129a8:	20000e00 	.word	0x20000e00
 80129ac:	20000df8 	.word	0x20000df8

080129b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80129b0:	b480      	push	{r7}
 80129b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80129b4:	4b04      	ldr	r3, [pc, #16]	; (80129c8 <vTaskSuspendAll+0x18>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	3301      	adds	r3, #1
 80129ba:	4a03      	ldr	r2, [pc, #12]	; (80129c8 <vTaskSuspendAll+0x18>)
 80129bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80129be:	bf00      	nop
 80129c0:	46bd      	mov	sp, r7
 80129c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c6:	4770      	bx	lr
 80129c8:	20000e1c 	.word	0x20000e1c

080129cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b084      	sub	sp, #16
 80129d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80129d2:	2300      	movs	r3, #0
 80129d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80129d6:	2300      	movs	r3, #0
 80129d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80129da:	4b42      	ldr	r3, [pc, #264]	; (8012ae4 <xTaskResumeAll+0x118>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d10b      	bne.n	80129fa <xTaskResumeAll+0x2e>
 80129e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e6:	b672      	cpsid	i
 80129e8:	f383 8811 	msr	BASEPRI, r3
 80129ec:	f3bf 8f6f 	isb	sy
 80129f0:	f3bf 8f4f 	dsb	sy
 80129f4:	b662      	cpsie	i
 80129f6:	603b      	str	r3, [r7, #0]
 80129f8:	e7fe      	b.n	80129f8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80129fa:	f001 fa4d 	bl	8013e98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80129fe:	4b39      	ldr	r3, [pc, #228]	; (8012ae4 <xTaskResumeAll+0x118>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	3b01      	subs	r3, #1
 8012a04:	4a37      	ldr	r2, [pc, #220]	; (8012ae4 <xTaskResumeAll+0x118>)
 8012a06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a08:	4b36      	ldr	r3, [pc, #216]	; (8012ae4 <xTaskResumeAll+0x118>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d162      	bne.n	8012ad6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012a10:	4b35      	ldr	r3, [pc, #212]	; (8012ae8 <xTaskResumeAll+0x11c>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d05e      	beq.n	8012ad6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012a18:	e02f      	b.n	8012a7a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a1a:	4b34      	ldr	r3, [pc, #208]	; (8012aec <xTaskResumeAll+0x120>)
 8012a1c:	68db      	ldr	r3, [r3, #12]
 8012a1e:	68db      	ldr	r3, [r3, #12]
 8012a20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	3318      	adds	r3, #24
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7fe fb8c 	bl	8011144 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	3304      	adds	r3, #4
 8012a30:	4618      	mov	r0, r3
 8012a32:	f7fe fb87 	bl	8011144 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a3a:	4b2d      	ldr	r3, [pc, #180]	; (8012af0 <xTaskResumeAll+0x124>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	429a      	cmp	r2, r3
 8012a40:	d903      	bls.n	8012a4a <xTaskResumeAll+0x7e>
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a46:	4a2a      	ldr	r2, [pc, #168]	; (8012af0 <xTaskResumeAll+0x124>)
 8012a48:	6013      	str	r3, [r2, #0]
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a4e:	4613      	mov	r3, r2
 8012a50:	009b      	lsls	r3, r3, #2
 8012a52:	4413      	add	r3, r2
 8012a54:	009b      	lsls	r3, r3, #2
 8012a56:	4a27      	ldr	r2, [pc, #156]	; (8012af4 <xTaskResumeAll+0x128>)
 8012a58:	441a      	add	r2, r3
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	3304      	adds	r3, #4
 8012a5e:	4619      	mov	r1, r3
 8012a60:	4610      	mov	r0, r2
 8012a62:	f7fe fb12 	bl	801108a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a6a:	4b23      	ldr	r3, [pc, #140]	; (8012af8 <xTaskResumeAll+0x12c>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d302      	bcc.n	8012a7a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8012a74:	4b21      	ldr	r3, [pc, #132]	; (8012afc <xTaskResumeAll+0x130>)
 8012a76:	2201      	movs	r2, #1
 8012a78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012a7a:	4b1c      	ldr	r3, [pc, #112]	; (8012aec <xTaskResumeAll+0x120>)
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d1cb      	bne.n	8012a1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d001      	beq.n	8012a8c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012a88:	f000 fb98 	bl	80131bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012a8c:	4b1c      	ldr	r3, [pc, #112]	; (8012b00 <xTaskResumeAll+0x134>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d010      	beq.n	8012aba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012a98:	f000 f858 	bl	8012b4c <xTaskIncrementTick>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d002      	beq.n	8012aa8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8012aa2:	4b16      	ldr	r3, [pc, #88]	; (8012afc <xTaskResumeAll+0x130>)
 8012aa4:	2201      	movs	r2, #1
 8012aa6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	3b01      	subs	r3, #1
 8012aac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d1f1      	bne.n	8012a98 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8012ab4:	4b12      	ldr	r3, [pc, #72]	; (8012b00 <xTaskResumeAll+0x134>)
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012aba:	4b10      	ldr	r3, [pc, #64]	; (8012afc <xTaskResumeAll+0x130>)
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d009      	beq.n	8012ad6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012ac6:	4b0f      	ldr	r3, [pc, #60]	; (8012b04 <xTaskResumeAll+0x138>)
 8012ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012acc:	601a      	str	r2, [r3, #0]
 8012ace:	f3bf 8f4f 	dsb	sy
 8012ad2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012ad6:	f001 fa11 	bl	8013efc <vPortExitCritical>

	return xAlreadyYielded;
 8012ada:	68bb      	ldr	r3, [r7, #8]
}
 8012adc:	4618      	mov	r0, r3
 8012ade:	3710      	adds	r7, #16
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	bd80      	pop	{r7, pc}
 8012ae4:	20000e1c 	.word	0x20000e1c
 8012ae8:	20000df4 	.word	0x20000df4
 8012aec:	20000db4 	.word	0x20000db4
 8012af0:	20000dfc 	.word	0x20000dfc
 8012af4:	20000924 	.word	0x20000924
 8012af8:	20000920 	.word	0x20000920
 8012afc:	20000e08 	.word	0x20000e08
 8012b00:	20000e04 	.word	0x20000e04
 8012b04:	e000ed04 	.word	0xe000ed04

08012b08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012b08:	b480      	push	{r7}
 8012b0a:	b083      	sub	sp, #12
 8012b0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012b0e:	4b05      	ldr	r3, [pc, #20]	; (8012b24 <xTaskGetTickCount+0x1c>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012b14:	687b      	ldr	r3, [r7, #4]
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	370c      	adds	r7, #12
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b20:	4770      	bx	lr
 8012b22:	bf00      	nop
 8012b24:	20000df8 	.word	0x20000df8

08012b28 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b082      	sub	sp, #8
 8012b2c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012b2e:	f001 fa93 	bl	8014058 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012b32:	2300      	movs	r3, #0
 8012b34:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012b36:	4b04      	ldr	r3, [pc, #16]	; (8012b48 <xTaskGetTickCountFromISR+0x20>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012b3c:	683b      	ldr	r3, [r7, #0]
}
 8012b3e:	4618      	mov	r0, r3
 8012b40:	3708      	adds	r7, #8
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}
 8012b46:	bf00      	nop
 8012b48:	20000df8 	.word	0x20000df8

08012b4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b086      	sub	sp, #24
 8012b50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012b52:	2300      	movs	r3, #0
 8012b54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b56:	4b53      	ldr	r3, [pc, #332]	; (8012ca4 <xTaskIncrementTick+0x158>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	f040 8090 	bne.w	8012c80 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012b60:	4b51      	ldr	r3, [pc, #324]	; (8012ca8 <xTaskIncrementTick+0x15c>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	3301      	adds	r3, #1
 8012b66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012b68:	4a4f      	ldr	r2, [pc, #316]	; (8012ca8 <xTaskIncrementTick+0x15c>)
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d121      	bne.n	8012bb8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8012b74:	4b4d      	ldr	r3, [pc, #308]	; (8012cac <xTaskIncrementTick+0x160>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d00b      	beq.n	8012b96 <xTaskIncrementTick+0x4a>
 8012b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b82:	b672      	cpsid	i
 8012b84:	f383 8811 	msr	BASEPRI, r3
 8012b88:	f3bf 8f6f 	isb	sy
 8012b8c:	f3bf 8f4f 	dsb	sy
 8012b90:	b662      	cpsie	i
 8012b92:	603b      	str	r3, [r7, #0]
 8012b94:	e7fe      	b.n	8012b94 <xTaskIncrementTick+0x48>
 8012b96:	4b45      	ldr	r3, [pc, #276]	; (8012cac <xTaskIncrementTick+0x160>)
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	60fb      	str	r3, [r7, #12]
 8012b9c:	4b44      	ldr	r3, [pc, #272]	; (8012cb0 <xTaskIncrementTick+0x164>)
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	4a42      	ldr	r2, [pc, #264]	; (8012cac <xTaskIncrementTick+0x160>)
 8012ba2:	6013      	str	r3, [r2, #0]
 8012ba4:	4a42      	ldr	r2, [pc, #264]	; (8012cb0 <xTaskIncrementTick+0x164>)
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	6013      	str	r3, [r2, #0]
 8012baa:	4b42      	ldr	r3, [pc, #264]	; (8012cb4 <xTaskIncrementTick+0x168>)
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	3301      	adds	r3, #1
 8012bb0:	4a40      	ldr	r2, [pc, #256]	; (8012cb4 <xTaskIncrementTick+0x168>)
 8012bb2:	6013      	str	r3, [r2, #0]
 8012bb4:	f000 fb02 	bl	80131bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012bb8:	4b3f      	ldr	r3, [pc, #252]	; (8012cb8 <xTaskIncrementTick+0x16c>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	693a      	ldr	r2, [r7, #16]
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	d349      	bcc.n	8012c56 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012bc2:	4b3a      	ldr	r3, [pc, #232]	; (8012cac <xTaskIncrementTick+0x160>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d104      	bne.n	8012bd6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012bcc:	4b3a      	ldr	r3, [pc, #232]	; (8012cb8 <xTaskIncrementTick+0x16c>)
 8012bce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012bd2:	601a      	str	r2, [r3, #0]
					break;
 8012bd4:	e03f      	b.n	8012c56 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012bd6:	4b35      	ldr	r3, [pc, #212]	; (8012cac <xTaskIncrementTick+0x160>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	68db      	ldr	r3, [r3, #12]
 8012bdc:	68db      	ldr	r3, [r3, #12]
 8012bde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012be0:	68bb      	ldr	r3, [r7, #8]
 8012be2:	685b      	ldr	r3, [r3, #4]
 8012be4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012be6:	693a      	ldr	r2, [r7, #16]
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	429a      	cmp	r2, r3
 8012bec:	d203      	bcs.n	8012bf6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012bee:	4a32      	ldr	r2, [pc, #200]	; (8012cb8 <xTaskIncrementTick+0x16c>)
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012bf4:	e02f      	b.n	8012c56 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	3304      	adds	r3, #4
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f7fe faa2 	bl	8011144 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d004      	beq.n	8012c12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	3318      	adds	r3, #24
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7fe fa99 	bl	8011144 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012c12:	68bb      	ldr	r3, [r7, #8]
 8012c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c16:	4b29      	ldr	r3, [pc, #164]	; (8012cbc <xTaskIncrementTick+0x170>)
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	d903      	bls.n	8012c26 <xTaskIncrementTick+0xda>
 8012c1e:	68bb      	ldr	r3, [r7, #8]
 8012c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c22:	4a26      	ldr	r2, [pc, #152]	; (8012cbc <xTaskIncrementTick+0x170>)
 8012c24:	6013      	str	r3, [r2, #0]
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c2a:	4613      	mov	r3, r2
 8012c2c:	009b      	lsls	r3, r3, #2
 8012c2e:	4413      	add	r3, r2
 8012c30:	009b      	lsls	r3, r3, #2
 8012c32:	4a23      	ldr	r2, [pc, #140]	; (8012cc0 <xTaskIncrementTick+0x174>)
 8012c34:	441a      	add	r2, r3
 8012c36:	68bb      	ldr	r3, [r7, #8]
 8012c38:	3304      	adds	r3, #4
 8012c3a:	4619      	mov	r1, r3
 8012c3c:	4610      	mov	r0, r2
 8012c3e:	f7fe fa24 	bl	801108a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c46:	4b1f      	ldr	r3, [pc, #124]	; (8012cc4 <xTaskIncrementTick+0x178>)
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d3b8      	bcc.n	8012bc2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012c50:	2301      	movs	r3, #1
 8012c52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012c54:	e7b5      	b.n	8012bc2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012c56:	4b1b      	ldr	r3, [pc, #108]	; (8012cc4 <xTaskIncrementTick+0x178>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c5c:	4918      	ldr	r1, [pc, #96]	; (8012cc0 <xTaskIncrementTick+0x174>)
 8012c5e:	4613      	mov	r3, r2
 8012c60:	009b      	lsls	r3, r3, #2
 8012c62:	4413      	add	r3, r2
 8012c64:	009b      	lsls	r3, r3, #2
 8012c66:	440b      	add	r3, r1
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	2b01      	cmp	r3, #1
 8012c6c:	d901      	bls.n	8012c72 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8012c6e:	2301      	movs	r3, #1
 8012c70:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8012c72:	4b15      	ldr	r3, [pc, #84]	; (8012cc8 <xTaskIncrementTick+0x17c>)
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d109      	bne.n	8012c8e <xTaskIncrementTick+0x142>
			{
				vApplicationTickHook();
 8012c7a:	f7fe f99d 	bl	8010fb8 <vApplicationTickHook>
 8012c7e:	e006      	b.n	8012c8e <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012c80:	4b11      	ldr	r3, [pc, #68]	; (8012cc8 <xTaskIncrementTick+0x17c>)
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	3301      	adds	r3, #1
 8012c86:	4a10      	ldr	r2, [pc, #64]	; (8012cc8 <xTaskIncrementTick+0x17c>)
 8012c88:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8012c8a:	f7fe f995 	bl	8010fb8 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012c8e:	4b0f      	ldr	r3, [pc, #60]	; (8012ccc <xTaskIncrementTick+0x180>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d001      	beq.n	8012c9a <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 8012c96:	2301      	movs	r3, #1
 8012c98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012c9a:	697b      	ldr	r3, [r7, #20]
}
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	3718      	adds	r7, #24
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}
 8012ca4:	20000e1c 	.word	0x20000e1c
 8012ca8:	20000df8 	.word	0x20000df8
 8012cac:	20000dac 	.word	0x20000dac
 8012cb0:	20000db0 	.word	0x20000db0
 8012cb4:	20000e0c 	.word	0x20000e0c
 8012cb8:	20000e14 	.word	0x20000e14
 8012cbc:	20000dfc 	.word	0x20000dfc
 8012cc0:	20000924 	.word	0x20000924
 8012cc4:	20000920 	.word	0x20000920
 8012cc8:	20000e04 	.word	0x20000e04
 8012ccc:	20000e08 	.word	0x20000e08

08012cd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b086      	sub	sp, #24
 8012cd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012cd6:	4b3b      	ldr	r3, [pc, #236]	; (8012dc4 <vTaskSwitchContext+0xf4>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d003      	beq.n	8012ce6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012cde:	4b3a      	ldr	r3, [pc, #232]	; (8012dc8 <vTaskSwitchContext+0xf8>)
 8012ce0:	2201      	movs	r2, #1
 8012ce2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012ce4:	e069      	b.n	8012dba <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8012ce6:	4b38      	ldr	r3, [pc, #224]	; (8012dc8 <vTaskSwitchContext+0xf8>)
 8012ce8:	2200      	movs	r2, #0
 8012cea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8012cec:	4b37      	ldr	r3, [pc, #220]	; (8012dcc <vTaskSwitchContext+0xfc>)
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cf2:	613b      	str	r3, [r7, #16]
 8012cf4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8012cf8:	60fb      	str	r3, [r7, #12]
 8012cfa:	693b      	ldr	r3, [r7, #16]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	68fa      	ldr	r2, [r7, #12]
 8012d00:	429a      	cmp	r2, r3
 8012d02:	d111      	bne.n	8012d28 <vTaskSwitchContext+0x58>
 8012d04:	693b      	ldr	r3, [r7, #16]
 8012d06:	3304      	adds	r3, #4
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	68fa      	ldr	r2, [r7, #12]
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	d10b      	bne.n	8012d28 <vTaskSwitchContext+0x58>
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	3308      	adds	r3, #8
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	68fa      	ldr	r2, [r7, #12]
 8012d18:	429a      	cmp	r2, r3
 8012d1a:	d105      	bne.n	8012d28 <vTaskSwitchContext+0x58>
 8012d1c:	693b      	ldr	r3, [r7, #16]
 8012d1e:	330c      	adds	r3, #12
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	68fa      	ldr	r2, [r7, #12]
 8012d24:	429a      	cmp	r2, r3
 8012d26:	d008      	beq.n	8012d3a <vTaskSwitchContext+0x6a>
 8012d28:	4b28      	ldr	r3, [pc, #160]	; (8012dcc <vTaskSwitchContext+0xfc>)
 8012d2a:	681a      	ldr	r2, [r3, #0]
 8012d2c:	4b27      	ldr	r3, [pc, #156]	; (8012dcc <vTaskSwitchContext+0xfc>)
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	3334      	adds	r3, #52	; 0x34
 8012d32:	4619      	mov	r1, r3
 8012d34:	4610      	mov	r0, r2
 8012d36:	f7ed fc42 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d3a:	4b25      	ldr	r3, [pc, #148]	; (8012dd0 <vTaskSwitchContext+0x100>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	617b      	str	r3, [r7, #20]
 8012d40:	e011      	b.n	8012d66 <vTaskSwitchContext+0x96>
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d10b      	bne.n	8012d60 <vTaskSwitchContext+0x90>
 8012d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d4c:	b672      	cpsid	i
 8012d4e:	f383 8811 	msr	BASEPRI, r3
 8012d52:	f3bf 8f6f 	isb	sy
 8012d56:	f3bf 8f4f 	dsb	sy
 8012d5a:	b662      	cpsie	i
 8012d5c:	607b      	str	r3, [r7, #4]
 8012d5e:	e7fe      	b.n	8012d5e <vTaskSwitchContext+0x8e>
 8012d60:	697b      	ldr	r3, [r7, #20]
 8012d62:	3b01      	subs	r3, #1
 8012d64:	617b      	str	r3, [r7, #20]
 8012d66:	491b      	ldr	r1, [pc, #108]	; (8012dd4 <vTaskSwitchContext+0x104>)
 8012d68:	697a      	ldr	r2, [r7, #20]
 8012d6a:	4613      	mov	r3, r2
 8012d6c:	009b      	lsls	r3, r3, #2
 8012d6e:	4413      	add	r3, r2
 8012d70:	009b      	lsls	r3, r3, #2
 8012d72:	440b      	add	r3, r1
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d0e3      	beq.n	8012d42 <vTaskSwitchContext+0x72>
 8012d7a:	697a      	ldr	r2, [r7, #20]
 8012d7c:	4613      	mov	r3, r2
 8012d7e:	009b      	lsls	r3, r3, #2
 8012d80:	4413      	add	r3, r2
 8012d82:	009b      	lsls	r3, r3, #2
 8012d84:	4a13      	ldr	r2, [pc, #76]	; (8012dd4 <vTaskSwitchContext+0x104>)
 8012d86:	4413      	add	r3, r2
 8012d88:	60bb      	str	r3, [r7, #8]
 8012d8a:	68bb      	ldr	r3, [r7, #8]
 8012d8c:	685b      	ldr	r3, [r3, #4]
 8012d8e:	685a      	ldr	r2, [r3, #4]
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	605a      	str	r2, [r3, #4]
 8012d94:	68bb      	ldr	r3, [r7, #8]
 8012d96:	685a      	ldr	r2, [r3, #4]
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	3308      	adds	r3, #8
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d104      	bne.n	8012daa <vTaskSwitchContext+0xda>
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	685b      	ldr	r3, [r3, #4]
 8012da4:	685a      	ldr	r2, [r3, #4]
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	605a      	str	r2, [r3, #4]
 8012daa:	68bb      	ldr	r3, [r7, #8]
 8012dac:	685b      	ldr	r3, [r3, #4]
 8012dae:	68db      	ldr	r3, [r3, #12]
 8012db0:	4a06      	ldr	r2, [pc, #24]	; (8012dcc <vTaskSwitchContext+0xfc>)
 8012db2:	6013      	str	r3, [r2, #0]
 8012db4:	4a06      	ldr	r2, [pc, #24]	; (8012dd0 <vTaskSwitchContext+0x100>)
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	6013      	str	r3, [r2, #0]
}
 8012dba:	bf00      	nop
 8012dbc:	3718      	adds	r7, #24
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}
 8012dc2:	bf00      	nop
 8012dc4:	20000e1c 	.word	0x20000e1c
 8012dc8:	20000e08 	.word	0x20000e08
 8012dcc:	20000920 	.word	0x20000920
 8012dd0:	20000dfc 	.word	0x20000dfc
 8012dd4:	20000924 	.word	0x20000924

08012dd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b084      	sub	sp, #16
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
 8012de0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d10b      	bne.n	8012e00 <vTaskPlaceOnEventList+0x28>
 8012de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dec:	b672      	cpsid	i
 8012dee:	f383 8811 	msr	BASEPRI, r3
 8012df2:	f3bf 8f6f 	isb	sy
 8012df6:	f3bf 8f4f 	dsb	sy
 8012dfa:	b662      	cpsie	i
 8012dfc:	60fb      	str	r3, [r7, #12]
 8012dfe:	e7fe      	b.n	8012dfe <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012e00:	4b07      	ldr	r3, [pc, #28]	; (8012e20 <vTaskPlaceOnEventList+0x48>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	3318      	adds	r3, #24
 8012e06:	4619      	mov	r1, r3
 8012e08:	6878      	ldr	r0, [r7, #4]
 8012e0a:	f7fe f962 	bl	80110d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012e0e:	2101      	movs	r1, #1
 8012e10:	6838      	ldr	r0, [r7, #0]
 8012e12:	f000 fb91 	bl	8013538 <prvAddCurrentTaskToDelayedList>
}
 8012e16:	bf00      	nop
 8012e18:	3710      	adds	r7, #16
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}
 8012e1e:	bf00      	nop
 8012e20:	20000920 	.word	0x20000920

08012e24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b086      	sub	sp, #24
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	60f8      	str	r0, [r7, #12]
 8012e2c:	60b9      	str	r1, [r7, #8]
 8012e2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d10b      	bne.n	8012e4e <vTaskPlaceOnEventListRestricted+0x2a>
 8012e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e3a:	b672      	cpsid	i
 8012e3c:	f383 8811 	msr	BASEPRI, r3
 8012e40:	f3bf 8f6f 	isb	sy
 8012e44:	f3bf 8f4f 	dsb	sy
 8012e48:	b662      	cpsie	i
 8012e4a:	617b      	str	r3, [r7, #20]
 8012e4c:	e7fe      	b.n	8012e4c <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012e4e:	4b0a      	ldr	r3, [pc, #40]	; (8012e78 <vTaskPlaceOnEventListRestricted+0x54>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	3318      	adds	r3, #24
 8012e54:	4619      	mov	r1, r3
 8012e56:	68f8      	ldr	r0, [r7, #12]
 8012e58:	f7fe f917 	bl	801108a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d002      	beq.n	8012e68 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8012e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e66:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012e68:	6879      	ldr	r1, [r7, #4]
 8012e6a:	68b8      	ldr	r0, [r7, #8]
 8012e6c:	f000 fb64 	bl	8013538 <prvAddCurrentTaskToDelayedList>
	}
 8012e70:	bf00      	nop
 8012e72:	3718      	adds	r7, #24
 8012e74:	46bd      	mov	sp, r7
 8012e76:	bd80      	pop	{r7, pc}
 8012e78:	20000920 	.word	0x20000920

08012e7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b086      	sub	sp, #24
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	68db      	ldr	r3, [r3, #12]
 8012e88:	68db      	ldr	r3, [r3, #12]
 8012e8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012e8c:	693b      	ldr	r3, [r7, #16]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d10b      	bne.n	8012eaa <xTaskRemoveFromEventList+0x2e>
 8012e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e96:	b672      	cpsid	i
 8012e98:	f383 8811 	msr	BASEPRI, r3
 8012e9c:	f3bf 8f6f 	isb	sy
 8012ea0:	f3bf 8f4f 	dsb	sy
 8012ea4:	b662      	cpsie	i
 8012ea6:	60fb      	str	r3, [r7, #12]
 8012ea8:	e7fe      	b.n	8012ea8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	3318      	adds	r3, #24
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f7fe f948 	bl	8011144 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012eb4:	4b1d      	ldr	r3, [pc, #116]	; (8012f2c <xTaskRemoveFromEventList+0xb0>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d11d      	bne.n	8012ef8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012ebc:	693b      	ldr	r3, [r7, #16]
 8012ebe:	3304      	adds	r3, #4
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f7fe f93f 	bl	8011144 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012ec6:	693b      	ldr	r3, [r7, #16]
 8012ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eca:	4b19      	ldr	r3, [pc, #100]	; (8012f30 <xTaskRemoveFromEventList+0xb4>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	d903      	bls.n	8012eda <xTaskRemoveFromEventList+0x5e>
 8012ed2:	693b      	ldr	r3, [r7, #16]
 8012ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ed6:	4a16      	ldr	r2, [pc, #88]	; (8012f30 <xTaskRemoveFromEventList+0xb4>)
 8012ed8:	6013      	str	r3, [r2, #0]
 8012eda:	693b      	ldr	r3, [r7, #16]
 8012edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ede:	4613      	mov	r3, r2
 8012ee0:	009b      	lsls	r3, r3, #2
 8012ee2:	4413      	add	r3, r2
 8012ee4:	009b      	lsls	r3, r3, #2
 8012ee6:	4a13      	ldr	r2, [pc, #76]	; (8012f34 <xTaskRemoveFromEventList+0xb8>)
 8012ee8:	441a      	add	r2, r3
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	3304      	adds	r3, #4
 8012eee:	4619      	mov	r1, r3
 8012ef0:	4610      	mov	r0, r2
 8012ef2:	f7fe f8ca 	bl	801108a <vListInsertEnd>
 8012ef6:	e005      	b.n	8012f04 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012ef8:	693b      	ldr	r3, [r7, #16]
 8012efa:	3318      	adds	r3, #24
 8012efc:	4619      	mov	r1, r3
 8012efe:	480e      	ldr	r0, [pc, #56]	; (8012f38 <xTaskRemoveFromEventList+0xbc>)
 8012f00:	f7fe f8c3 	bl	801108a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f08:	4b0c      	ldr	r3, [pc, #48]	; (8012f3c <xTaskRemoveFromEventList+0xc0>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	d905      	bls.n	8012f1e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012f12:	2301      	movs	r3, #1
 8012f14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012f16:	4b0a      	ldr	r3, [pc, #40]	; (8012f40 <xTaskRemoveFromEventList+0xc4>)
 8012f18:	2201      	movs	r2, #1
 8012f1a:	601a      	str	r2, [r3, #0]
 8012f1c:	e001      	b.n	8012f22 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8012f1e:	2300      	movs	r3, #0
 8012f20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012f22:	697b      	ldr	r3, [r7, #20]
}
 8012f24:	4618      	mov	r0, r3
 8012f26:	3718      	adds	r7, #24
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	bd80      	pop	{r7, pc}
 8012f2c:	20000e1c 	.word	0x20000e1c
 8012f30:	20000dfc 	.word	0x20000dfc
 8012f34:	20000924 	.word	0x20000924
 8012f38:	20000db4 	.word	0x20000db4
 8012f3c:	20000920 	.word	0x20000920
 8012f40:	20000e08 	.word	0x20000e08

08012f44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012f44:	b480      	push	{r7}
 8012f46:	b083      	sub	sp, #12
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012f4c:	4b06      	ldr	r3, [pc, #24]	; (8012f68 <vTaskInternalSetTimeOutState+0x24>)
 8012f4e:	681a      	ldr	r2, [r3, #0]
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012f54:	4b05      	ldr	r3, [pc, #20]	; (8012f6c <vTaskInternalSetTimeOutState+0x28>)
 8012f56:	681a      	ldr	r2, [r3, #0]
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	605a      	str	r2, [r3, #4]
}
 8012f5c:	bf00      	nop
 8012f5e:	370c      	adds	r7, #12
 8012f60:	46bd      	mov	sp, r7
 8012f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f66:	4770      	bx	lr
 8012f68:	20000e0c 	.word	0x20000e0c
 8012f6c:	20000df8 	.word	0x20000df8

08012f70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b088      	sub	sp, #32
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
 8012f78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d10b      	bne.n	8012f98 <xTaskCheckForTimeOut+0x28>
 8012f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f84:	b672      	cpsid	i
 8012f86:	f383 8811 	msr	BASEPRI, r3
 8012f8a:	f3bf 8f6f 	isb	sy
 8012f8e:	f3bf 8f4f 	dsb	sy
 8012f92:	b662      	cpsie	i
 8012f94:	613b      	str	r3, [r7, #16]
 8012f96:	e7fe      	b.n	8012f96 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d10b      	bne.n	8012fb6 <xTaskCheckForTimeOut+0x46>
 8012f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fa2:	b672      	cpsid	i
 8012fa4:	f383 8811 	msr	BASEPRI, r3
 8012fa8:	f3bf 8f6f 	isb	sy
 8012fac:	f3bf 8f4f 	dsb	sy
 8012fb0:	b662      	cpsie	i
 8012fb2:	60fb      	str	r3, [r7, #12]
 8012fb4:	e7fe      	b.n	8012fb4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8012fb6:	f000 ff6f 	bl	8013e98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012fba:	4b1d      	ldr	r3, [pc, #116]	; (8013030 <xTaskCheckForTimeOut+0xc0>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	685b      	ldr	r3, [r3, #4]
 8012fc4:	69ba      	ldr	r2, [r7, #24]
 8012fc6:	1ad3      	subs	r3, r2, r3
 8012fc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012fd2:	d102      	bne.n	8012fda <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	61fb      	str	r3, [r7, #28]
 8012fd8:	e023      	b.n	8013022 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	681a      	ldr	r2, [r3, #0]
 8012fde:	4b15      	ldr	r3, [pc, #84]	; (8013034 <xTaskCheckForTimeOut+0xc4>)
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d007      	beq.n	8012ff6 <xTaskCheckForTimeOut+0x86>
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	685b      	ldr	r3, [r3, #4]
 8012fea:	69ba      	ldr	r2, [r7, #24]
 8012fec:	429a      	cmp	r2, r3
 8012fee:	d302      	bcc.n	8012ff6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012ff0:	2301      	movs	r3, #1
 8012ff2:	61fb      	str	r3, [r7, #28]
 8012ff4:	e015      	b.n	8013022 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	697a      	ldr	r2, [r7, #20]
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d20b      	bcs.n	8013018 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013000:	683b      	ldr	r3, [r7, #0]
 8013002:	681a      	ldr	r2, [r3, #0]
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	1ad2      	subs	r2, r2, r3
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f7ff ff99 	bl	8012f44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013012:	2300      	movs	r3, #0
 8013014:	61fb      	str	r3, [r7, #28]
 8013016:	e004      	b.n	8013022 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8013018:	683b      	ldr	r3, [r7, #0]
 801301a:	2200      	movs	r2, #0
 801301c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801301e:	2301      	movs	r3, #1
 8013020:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013022:	f000 ff6b 	bl	8013efc <vPortExitCritical>

	return xReturn;
 8013026:	69fb      	ldr	r3, [r7, #28]
}
 8013028:	4618      	mov	r0, r3
 801302a:	3720      	adds	r7, #32
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}
 8013030:	20000df8 	.word	0x20000df8
 8013034:	20000e0c 	.word	0x20000e0c

08013038 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013038:	b480      	push	{r7}
 801303a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801303c:	4b03      	ldr	r3, [pc, #12]	; (801304c <vTaskMissedYield+0x14>)
 801303e:	2201      	movs	r2, #1
 8013040:	601a      	str	r2, [r3, #0]
}
 8013042:	bf00      	nop
 8013044:	46bd      	mov	sp, r7
 8013046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304a:	4770      	bx	lr
 801304c:	20000e08 	.word	0x20000e08

08013050 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b082      	sub	sp, #8
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013058:	f000 f854 	bl	8013104 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801305c:	4b07      	ldr	r3, [pc, #28]	; (801307c <prvIdleTask+0x2c>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	2b01      	cmp	r3, #1
 8013062:	d907      	bls.n	8013074 <prvIdleTask+0x24>
			{
				taskYIELD();
 8013064:	4b06      	ldr	r3, [pc, #24]	; (8013080 <prvIdleTask+0x30>)
 8013066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801306a:	601a      	str	r2, [r3, #0]
 801306c:	f3bf 8f4f 	dsb	sy
 8013070:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8013074:	f7ed fa9c 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8013078:	e7ee      	b.n	8013058 <prvIdleTask+0x8>
 801307a:	bf00      	nop
 801307c:	20000924 	.word	0x20000924
 8013080:	e000ed04 	.word	0xe000ed04

08013084 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b082      	sub	sp, #8
 8013088:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801308a:	2300      	movs	r3, #0
 801308c:	607b      	str	r3, [r7, #4]
 801308e:	e00c      	b.n	80130aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013090:	687a      	ldr	r2, [r7, #4]
 8013092:	4613      	mov	r3, r2
 8013094:	009b      	lsls	r3, r3, #2
 8013096:	4413      	add	r3, r2
 8013098:	009b      	lsls	r3, r3, #2
 801309a:	4a12      	ldr	r2, [pc, #72]	; (80130e4 <prvInitialiseTaskLists+0x60>)
 801309c:	4413      	add	r3, r2
 801309e:	4618      	mov	r0, r3
 80130a0:	f7fd ffc6 	bl	8011030 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	3301      	adds	r3, #1
 80130a8:	607b      	str	r3, [r7, #4]
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2b37      	cmp	r3, #55	; 0x37
 80130ae:	d9ef      	bls.n	8013090 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80130b0:	480d      	ldr	r0, [pc, #52]	; (80130e8 <prvInitialiseTaskLists+0x64>)
 80130b2:	f7fd ffbd 	bl	8011030 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80130b6:	480d      	ldr	r0, [pc, #52]	; (80130ec <prvInitialiseTaskLists+0x68>)
 80130b8:	f7fd ffba 	bl	8011030 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80130bc:	480c      	ldr	r0, [pc, #48]	; (80130f0 <prvInitialiseTaskLists+0x6c>)
 80130be:	f7fd ffb7 	bl	8011030 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80130c2:	480c      	ldr	r0, [pc, #48]	; (80130f4 <prvInitialiseTaskLists+0x70>)
 80130c4:	f7fd ffb4 	bl	8011030 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80130c8:	480b      	ldr	r0, [pc, #44]	; (80130f8 <prvInitialiseTaskLists+0x74>)
 80130ca:	f7fd ffb1 	bl	8011030 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80130ce:	4b0b      	ldr	r3, [pc, #44]	; (80130fc <prvInitialiseTaskLists+0x78>)
 80130d0:	4a05      	ldr	r2, [pc, #20]	; (80130e8 <prvInitialiseTaskLists+0x64>)
 80130d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80130d4:	4b0a      	ldr	r3, [pc, #40]	; (8013100 <prvInitialiseTaskLists+0x7c>)
 80130d6:	4a05      	ldr	r2, [pc, #20]	; (80130ec <prvInitialiseTaskLists+0x68>)
 80130d8:	601a      	str	r2, [r3, #0]
}
 80130da:	bf00      	nop
 80130dc:	3708      	adds	r7, #8
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}
 80130e2:	bf00      	nop
 80130e4:	20000924 	.word	0x20000924
 80130e8:	20000d84 	.word	0x20000d84
 80130ec:	20000d98 	.word	0x20000d98
 80130f0:	20000db4 	.word	0x20000db4
 80130f4:	20000dc8 	.word	0x20000dc8
 80130f8:	20000de0 	.word	0x20000de0
 80130fc:	20000dac 	.word	0x20000dac
 8013100:	20000db0 	.word	0x20000db0

08013104 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b082      	sub	sp, #8
 8013108:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801310a:	e019      	b.n	8013140 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801310c:	f000 fec4 	bl	8013e98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013110:	4b0f      	ldr	r3, [pc, #60]	; (8013150 <prvCheckTasksWaitingTermination+0x4c>)
 8013112:	68db      	ldr	r3, [r3, #12]
 8013114:	68db      	ldr	r3, [r3, #12]
 8013116:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	3304      	adds	r3, #4
 801311c:	4618      	mov	r0, r3
 801311e:	f7fe f811 	bl	8011144 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013122:	4b0c      	ldr	r3, [pc, #48]	; (8013154 <prvCheckTasksWaitingTermination+0x50>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	3b01      	subs	r3, #1
 8013128:	4a0a      	ldr	r2, [pc, #40]	; (8013154 <prvCheckTasksWaitingTermination+0x50>)
 801312a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801312c:	4b0a      	ldr	r3, [pc, #40]	; (8013158 <prvCheckTasksWaitingTermination+0x54>)
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	3b01      	subs	r3, #1
 8013132:	4a09      	ldr	r2, [pc, #36]	; (8013158 <prvCheckTasksWaitingTermination+0x54>)
 8013134:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013136:	f000 fee1 	bl	8013efc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801313a:	6878      	ldr	r0, [r7, #4]
 801313c:	f000 f80e 	bl	801315c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013140:	4b05      	ldr	r3, [pc, #20]	; (8013158 <prvCheckTasksWaitingTermination+0x54>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d1e1      	bne.n	801310c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013148:	bf00      	nop
 801314a:	3708      	adds	r7, #8
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}
 8013150:	20000dc8 	.word	0x20000dc8
 8013154:	20000df4 	.word	0x20000df4
 8013158:	20000ddc 	.word	0x20000ddc

0801315c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801315c:	b580      	push	{r7, lr}
 801315e:	b084      	sub	sp, #16
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801316a:	2b00      	cmp	r3, #0
 801316c:	d108      	bne.n	8013180 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013172:	4618      	mov	r0, r3
 8013174:	f001 f87e 	bl	8014274 <vPortFree>
				vPortFree( pxTCB );
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f001 f87b 	bl	8014274 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801317e:	e019      	b.n	80131b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013186:	2b01      	cmp	r3, #1
 8013188:	d103      	bne.n	8013192 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f001 f872 	bl	8014274 <vPortFree>
	}
 8013190:	e010      	b.n	80131b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013198:	2b02      	cmp	r3, #2
 801319a:	d00b      	beq.n	80131b4 <prvDeleteTCB+0x58>
 801319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131a0:	b672      	cpsid	i
 80131a2:	f383 8811 	msr	BASEPRI, r3
 80131a6:	f3bf 8f6f 	isb	sy
 80131aa:	f3bf 8f4f 	dsb	sy
 80131ae:	b662      	cpsie	i
 80131b0:	60fb      	str	r3, [r7, #12]
 80131b2:	e7fe      	b.n	80131b2 <prvDeleteTCB+0x56>
	}
 80131b4:	bf00      	nop
 80131b6:	3710      	adds	r7, #16
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}

080131bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80131bc:	b480      	push	{r7}
 80131be:	b083      	sub	sp, #12
 80131c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80131c2:	4b0c      	ldr	r3, [pc, #48]	; (80131f4 <prvResetNextTaskUnblockTime+0x38>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d104      	bne.n	80131d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80131cc:	4b0a      	ldr	r3, [pc, #40]	; (80131f8 <prvResetNextTaskUnblockTime+0x3c>)
 80131ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80131d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80131d4:	e008      	b.n	80131e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131d6:	4b07      	ldr	r3, [pc, #28]	; (80131f4 <prvResetNextTaskUnblockTime+0x38>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	68db      	ldr	r3, [r3, #12]
 80131dc:	68db      	ldr	r3, [r3, #12]
 80131de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	685b      	ldr	r3, [r3, #4]
 80131e4:	4a04      	ldr	r2, [pc, #16]	; (80131f8 <prvResetNextTaskUnblockTime+0x3c>)
 80131e6:	6013      	str	r3, [r2, #0]
}
 80131e8:	bf00      	nop
 80131ea:	370c      	adds	r7, #12
 80131ec:	46bd      	mov	sp, r7
 80131ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f2:	4770      	bx	lr
 80131f4:	20000dac 	.word	0x20000dac
 80131f8:	20000e14 	.word	0x20000e14

080131fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80131fc:	b480      	push	{r7}
 80131fe:	b083      	sub	sp, #12
 8013200:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8013202:	4b05      	ldr	r3, [pc, #20]	; (8013218 <xTaskGetCurrentTaskHandle+0x1c>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	607b      	str	r3, [r7, #4]

		return xReturn;
 8013208:	687b      	ldr	r3, [r7, #4]
	}
 801320a:	4618      	mov	r0, r3
 801320c:	370c      	adds	r7, #12
 801320e:	46bd      	mov	sp, r7
 8013210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013214:	4770      	bx	lr
 8013216:	bf00      	nop
 8013218:	20000920 	.word	0x20000920

0801321c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801321c:	b480      	push	{r7}
 801321e:	b083      	sub	sp, #12
 8013220:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013222:	4b0b      	ldr	r3, [pc, #44]	; (8013250 <xTaskGetSchedulerState+0x34>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d102      	bne.n	8013230 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801322a:	2301      	movs	r3, #1
 801322c:	607b      	str	r3, [r7, #4]
 801322e:	e008      	b.n	8013242 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013230:	4b08      	ldr	r3, [pc, #32]	; (8013254 <xTaskGetSchedulerState+0x38>)
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d102      	bne.n	801323e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013238:	2302      	movs	r3, #2
 801323a:	607b      	str	r3, [r7, #4]
 801323c:	e001      	b.n	8013242 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801323e:	2300      	movs	r3, #0
 8013240:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013242:	687b      	ldr	r3, [r7, #4]
	}
 8013244:	4618      	mov	r0, r3
 8013246:	370c      	adds	r7, #12
 8013248:	46bd      	mov	sp, r7
 801324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324e:	4770      	bx	lr
 8013250:	20000e00 	.word	0x20000e00
 8013254:	20000e1c 	.word	0x20000e1c

08013258 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013258:	b580      	push	{r7, lr}
 801325a:	b084      	sub	sp, #16
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013264:	2300      	movs	r3, #0
 8013266:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d051      	beq.n	8013312 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013272:	4b2a      	ldr	r3, [pc, #168]	; (801331c <xTaskPriorityInherit+0xc4>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013278:	429a      	cmp	r2, r3
 801327a:	d241      	bcs.n	8013300 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801327c:	68bb      	ldr	r3, [r7, #8]
 801327e:	699b      	ldr	r3, [r3, #24]
 8013280:	2b00      	cmp	r3, #0
 8013282:	db06      	blt.n	8013292 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013284:	4b25      	ldr	r3, [pc, #148]	; (801331c <xTaskPriorityInherit+0xc4>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801328a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	6959      	ldr	r1, [r3, #20]
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801329a:	4613      	mov	r3, r2
 801329c:	009b      	lsls	r3, r3, #2
 801329e:	4413      	add	r3, r2
 80132a0:	009b      	lsls	r3, r3, #2
 80132a2:	4a1f      	ldr	r2, [pc, #124]	; (8013320 <xTaskPriorityInherit+0xc8>)
 80132a4:	4413      	add	r3, r2
 80132a6:	4299      	cmp	r1, r3
 80132a8:	d122      	bne.n	80132f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	3304      	adds	r3, #4
 80132ae:	4618      	mov	r0, r3
 80132b0:	f7fd ff48 	bl	8011144 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80132b4:	4b19      	ldr	r3, [pc, #100]	; (801331c <xTaskPriorityInherit+0xc4>)
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132ba:	68bb      	ldr	r3, [r7, #8]
 80132bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80132be:	68bb      	ldr	r3, [r7, #8]
 80132c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132c2:	4b18      	ldr	r3, [pc, #96]	; (8013324 <xTaskPriorityInherit+0xcc>)
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	429a      	cmp	r2, r3
 80132c8:	d903      	bls.n	80132d2 <xTaskPriorityInherit+0x7a>
 80132ca:	68bb      	ldr	r3, [r7, #8]
 80132cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132ce:	4a15      	ldr	r2, [pc, #84]	; (8013324 <xTaskPriorityInherit+0xcc>)
 80132d0:	6013      	str	r3, [r2, #0]
 80132d2:	68bb      	ldr	r3, [r7, #8]
 80132d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132d6:	4613      	mov	r3, r2
 80132d8:	009b      	lsls	r3, r3, #2
 80132da:	4413      	add	r3, r2
 80132dc:	009b      	lsls	r3, r3, #2
 80132de:	4a10      	ldr	r2, [pc, #64]	; (8013320 <xTaskPriorityInherit+0xc8>)
 80132e0:	441a      	add	r2, r3
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	3304      	adds	r3, #4
 80132e6:	4619      	mov	r1, r3
 80132e8:	4610      	mov	r0, r2
 80132ea:	f7fd fece 	bl	801108a <vListInsertEnd>
 80132ee:	e004      	b.n	80132fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80132f0:	4b0a      	ldr	r3, [pc, #40]	; (801331c <xTaskPriorityInherit+0xc4>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80132fa:	2301      	movs	r3, #1
 80132fc:	60fb      	str	r3, [r7, #12]
 80132fe:	e008      	b.n	8013312 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013300:	68bb      	ldr	r3, [r7, #8]
 8013302:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013304:	4b05      	ldr	r3, [pc, #20]	; (801331c <xTaskPriorityInherit+0xc4>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801330a:	429a      	cmp	r2, r3
 801330c:	d201      	bcs.n	8013312 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801330e:	2301      	movs	r3, #1
 8013310:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013312:	68fb      	ldr	r3, [r7, #12]
	}
 8013314:	4618      	mov	r0, r3
 8013316:	3710      	adds	r7, #16
 8013318:	46bd      	mov	sp, r7
 801331a:	bd80      	pop	{r7, pc}
 801331c:	20000920 	.word	0x20000920
 8013320:	20000924 	.word	0x20000924
 8013324:	20000dfc 	.word	0x20000dfc

08013328 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013328:	b580      	push	{r7, lr}
 801332a:	b086      	sub	sp, #24
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013334:	2300      	movs	r3, #0
 8013336:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d058      	beq.n	80133f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801333e:	4b2f      	ldr	r3, [pc, #188]	; (80133fc <xTaskPriorityDisinherit+0xd4>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	693a      	ldr	r2, [r7, #16]
 8013344:	429a      	cmp	r2, r3
 8013346:	d00b      	beq.n	8013360 <xTaskPriorityDisinherit+0x38>
 8013348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801334c:	b672      	cpsid	i
 801334e:	f383 8811 	msr	BASEPRI, r3
 8013352:	f3bf 8f6f 	isb	sy
 8013356:	f3bf 8f4f 	dsb	sy
 801335a:	b662      	cpsie	i
 801335c:	60fb      	str	r3, [r7, #12]
 801335e:	e7fe      	b.n	801335e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013364:	2b00      	cmp	r3, #0
 8013366:	d10b      	bne.n	8013380 <xTaskPriorityDisinherit+0x58>
 8013368:	f04f 0350 	mov.w	r3, #80	; 0x50
 801336c:	b672      	cpsid	i
 801336e:	f383 8811 	msr	BASEPRI, r3
 8013372:	f3bf 8f6f 	isb	sy
 8013376:	f3bf 8f4f 	dsb	sy
 801337a:	b662      	cpsie	i
 801337c:	60bb      	str	r3, [r7, #8]
 801337e:	e7fe      	b.n	801337e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013384:	1e5a      	subs	r2, r3, #1
 8013386:	693b      	ldr	r3, [r7, #16]
 8013388:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013392:	429a      	cmp	r2, r3
 8013394:	d02c      	beq.n	80133f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013396:	693b      	ldr	r3, [r7, #16]
 8013398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801339a:	2b00      	cmp	r3, #0
 801339c:	d128      	bne.n	80133f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801339e:	693b      	ldr	r3, [r7, #16]
 80133a0:	3304      	adds	r3, #4
 80133a2:	4618      	mov	r0, r3
 80133a4:	f7fd fece 	bl	8011144 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80133a8:	693b      	ldr	r3, [r7, #16]
 80133aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80133ac:	693b      	ldr	r3, [r7, #16]
 80133ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80133b0:	693b      	ldr	r3, [r7, #16]
 80133b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80133b8:	693b      	ldr	r3, [r7, #16]
 80133ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80133bc:	693b      	ldr	r3, [r7, #16]
 80133be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133c0:	4b0f      	ldr	r3, [pc, #60]	; (8013400 <xTaskPriorityDisinherit+0xd8>)
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d903      	bls.n	80133d0 <xTaskPriorityDisinherit+0xa8>
 80133c8:	693b      	ldr	r3, [r7, #16]
 80133ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133cc:	4a0c      	ldr	r2, [pc, #48]	; (8013400 <xTaskPriorityDisinherit+0xd8>)
 80133ce:	6013      	str	r3, [r2, #0]
 80133d0:	693b      	ldr	r3, [r7, #16]
 80133d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133d4:	4613      	mov	r3, r2
 80133d6:	009b      	lsls	r3, r3, #2
 80133d8:	4413      	add	r3, r2
 80133da:	009b      	lsls	r3, r3, #2
 80133dc:	4a09      	ldr	r2, [pc, #36]	; (8013404 <xTaskPriorityDisinherit+0xdc>)
 80133de:	441a      	add	r2, r3
 80133e0:	693b      	ldr	r3, [r7, #16]
 80133e2:	3304      	adds	r3, #4
 80133e4:	4619      	mov	r1, r3
 80133e6:	4610      	mov	r0, r2
 80133e8:	f7fd fe4f 	bl	801108a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80133ec:	2301      	movs	r3, #1
 80133ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80133f0:	697b      	ldr	r3, [r7, #20]
	}
 80133f2:	4618      	mov	r0, r3
 80133f4:	3718      	adds	r7, #24
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}
 80133fa:	bf00      	nop
 80133fc:	20000920 	.word	0x20000920
 8013400:	20000dfc 	.word	0x20000dfc
 8013404:	20000924 	.word	0x20000924

08013408 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013408:	b580      	push	{r7, lr}
 801340a:	b088      	sub	sp, #32
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
 8013410:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013416:	2301      	movs	r3, #1
 8013418:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d06c      	beq.n	80134fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013420:	69bb      	ldr	r3, [r7, #24]
 8013422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013424:	2b00      	cmp	r3, #0
 8013426:	d10b      	bne.n	8013440 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8013428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801342c:	b672      	cpsid	i
 801342e:	f383 8811 	msr	BASEPRI, r3
 8013432:	f3bf 8f6f 	isb	sy
 8013436:	f3bf 8f4f 	dsb	sy
 801343a:	b662      	cpsie	i
 801343c:	60fb      	str	r3, [r7, #12]
 801343e:	e7fe      	b.n	801343e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013440:	69bb      	ldr	r3, [r7, #24]
 8013442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013444:	683a      	ldr	r2, [r7, #0]
 8013446:	429a      	cmp	r2, r3
 8013448:	d902      	bls.n	8013450 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	61fb      	str	r3, [r7, #28]
 801344e:	e002      	b.n	8013456 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013450:	69bb      	ldr	r3, [r7, #24]
 8013452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013454:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013456:	69bb      	ldr	r3, [r7, #24]
 8013458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801345a:	69fa      	ldr	r2, [r7, #28]
 801345c:	429a      	cmp	r2, r3
 801345e:	d04c      	beq.n	80134fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013460:	69bb      	ldr	r3, [r7, #24]
 8013462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013464:	697a      	ldr	r2, [r7, #20]
 8013466:	429a      	cmp	r2, r3
 8013468:	d147      	bne.n	80134fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801346a:	4b26      	ldr	r3, [pc, #152]	; (8013504 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	69ba      	ldr	r2, [r7, #24]
 8013470:	429a      	cmp	r2, r3
 8013472:	d10b      	bne.n	801348c <vTaskPriorityDisinheritAfterTimeout+0x84>
 8013474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013478:	b672      	cpsid	i
 801347a:	f383 8811 	msr	BASEPRI, r3
 801347e:	f3bf 8f6f 	isb	sy
 8013482:	f3bf 8f4f 	dsb	sy
 8013486:	b662      	cpsie	i
 8013488:	60bb      	str	r3, [r7, #8]
 801348a:	e7fe      	b.n	801348a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801348c:	69bb      	ldr	r3, [r7, #24]
 801348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013490:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013492:	69bb      	ldr	r3, [r7, #24]
 8013494:	69fa      	ldr	r2, [r7, #28]
 8013496:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013498:	69bb      	ldr	r3, [r7, #24]
 801349a:	699b      	ldr	r3, [r3, #24]
 801349c:	2b00      	cmp	r3, #0
 801349e:	db04      	blt.n	80134aa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80134a0:	69fb      	ldr	r3, [r7, #28]
 80134a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80134a6:	69bb      	ldr	r3, [r7, #24]
 80134a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80134aa:	69bb      	ldr	r3, [r7, #24]
 80134ac:	6959      	ldr	r1, [r3, #20]
 80134ae:	693a      	ldr	r2, [r7, #16]
 80134b0:	4613      	mov	r3, r2
 80134b2:	009b      	lsls	r3, r3, #2
 80134b4:	4413      	add	r3, r2
 80134b6:	009b      	lsls	r3, r3, #2
 80134b8:	4a13      	ldr	r2, [pc, #76]	; (8013508 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80134ba:	4413      	add	r3, r2
 80134bc:	4299      	cmp	r1, r3
 80134be:	d11c      	bne.n	80134fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134c0:	69bb      	ldr	r3, [r7, #24]
 80134c2:	3304      	adds	r3, #4
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7fd fe3d 	bl	8011144 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80134ca:	69bb      	ldr	r3, [r7, #24]
 80134cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134ce:	4b0f      	ldr	r3, [pc, #60]	; (801350c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d903      	bls.n	80134de <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80134d6:	69bb      	ldr	r3, [r7, #24]
 80134d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134da:	4a0c      	ldr	r2, [pc, #48]	; (801350c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80134dc:	6013      	str	r3, [r2, #0]
 80134de:	69bb      	ldr	r3, [r7, #24]
 80134e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134e2:	4613      	mov	r3, r2
 80134e4:	009b      	lsls	r3, r3, #2
 80134e6:	4413      	add	r3, r2
 80134e8:	009b      	lsls	r3, r3, #2
 80134ea:	4a07      	ldr	r2, [pc, #28]	; (8013508 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80134ec:	441a      	add	r2, r3
 80134ee:	69bb      	ldr	r3, [r7, #24]
 80134f0:	3304      	adds	r3, #4
 80134f2:	4619      	mov	r1, r3
 80134f4:	4610      	mov	r0, r2
 80134f6:	f7fd fdc8 	bl	801108a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80134fa:	bf00      	nop
 80134fc:	3720      	adds	r7, #32
 80134fe:	46bd      	mov	sp, r7
 8013500:	bd80      	pop	{r7, pc}
 8013502:	bf00      	nop
 8013504:	20000920 	.word	0x20000920
 8013508:	20000924 	.word	0x20000924
 801350c:	20000dfc 	.word	0x20000dfc

08013510 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013510:	b480      	push	{r7}
 8013512:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013514:	4b07      	ldr	r3, [pc, #28]	; (8013534 <pvTaskIncrementMutexHeldCount+0x24>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d004      	beq.n	8013526 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801351c:	4b05      	ldr	r3, [pc, #20]	; (8013534 <pvTaskIncrementMutexHeldCount+0x24>)
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013522:	3201      	adds	r2, #1
 8013524:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8013526:	4b03      	ldr	r3, [pc, #12]	; (8013534 <pvTaskIncrementMutexHeldCount+0x24>)
 8013528:	681b      	ldr	r3, [r3, #0]
	}
 801352a:	4618      	mov	r0, r3
 801352c:	46bd      	mov	sp, r7
 801352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013532:	4770      	bx	lr
 8013534:	20000920 	.word	0x20000920

08013538 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b084      	sub	sp, #16
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
 8013540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013542:	4b21      	ldr	r3, [pc, #132]	; (80135c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013548:	4b20      	ldr	r3, [pc, #128]	; (80135cc <prvAddCurrentTaskToDelayedList+0x94>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	3304      	adds	r3, #4
 801354e:	4618      	mov	r0, r3
 8013550:	f7fd fdf8 	bl	8011144 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801355a:	d10a      	bne.n	8013572 <prvAddCurrentTaskToDelayedList+0x3a>
 801355c:	683b      	ldr	r3, [r7, #0]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d007      	beq.n	8013572 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013562:	4b1a      	ldr	r3, [pc, #104]	; (80135cc <prvAddCurrentTaskToDelayedList+0x94>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	3304      	adds	r3, #4
 8013568:	4619      	mov	r1, r3
 801356a:	4819      	ldr	r0, [pc, #100]	; (80135d0 <prvAddCurrentTaskToDelayedList+0x98>)
 801356c:	f7fd fd8d 	bl	801108a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013570:	e026      	b.n	80135c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013572:	68fa      	ldr	r2, [r7, #12]
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	4413      	add	r3, r2
 8013578:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801357a:	4b14      	ldr	r3, [pc, #80]	; (80135cc <prvAddCurrentTaskToDelayedList+0x94>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	68ba      	ldr	r2, [r7, #8]
 8013580:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013582:	68ba      	ldr	r2, [r7, #8]
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	429a      	cmp	r2, r3
 8013588:	d209      	bcs.n	801359e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801358a:	4b12      	ldr	r3, [pc, #72]	; (80135d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801358c:	681a      	ldr	r2, [r3, #0]
 801358e:	4b0f      	ldr	r3, [pc, #60]	; (80135cc <prvAddCurrentTaskToDelayedList+0x94>)
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	3304      	adds	r3, #4
 8013594:	4619      	mov	r1, r3
 8013596:	4610      	mov	r0, r2
 8013598:	f7fd fd9b 	bl	80110d2 <vListInsert>
}
 801359c:	e010      	b.n	80135c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801359e:	4b0e      	ldr	r3, [pc, #56]	; (80135d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80135a0:	681a      	ldr	r2, [r3, #0]
 80135a2:	4b0a      	ldr	r3, [pc, #40]	; (80135cc <prvAddCurrentTaskToDelayedList+0x94>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	3304      	adds	r3, #4
 80135a8:	4619      	mov	r1, r3
 80135aa:	4610      	mov	r0, r2
 80135ac:	f7fd fd91 	bl	80110d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80135b0:	4b0a      	ldr	r3, [pc, #40]	; (80135dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	68ba      	ldr	r2, [r7, #8]
 80135b6:	429a      	cmp	r2, r3
 80135b8:	d202      	bcs.n	80135c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80135ba:	4a08      	ldr	r2, [pc, #32]	; (80135dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	6013      	str	r3, [r2, #0]
}
 80135c0:	bf00      	nop
 80135c2:	3710      	adds	r7, #16
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}
 80135c8:	20000df8 	.word	0x20000df8
 80135cc:	20000920 	.word	0x20000920
 80135d0:	20000de0 	.word	0x20000de0
 80135d4:	20000db0 	.word	0x20000db0
 80135d8:	20000dac 	.word	0x20000dac
 80135dc:	20000e14 	.word	0x20000e14

080135e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b08a      	sub	sp, #40	; 0x28
 80135e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80135e6:	2300      	movs	r3, #0
 80135e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80135ea:	f000 fb0d 	bl	8013c08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80135ee:	4b1d      	ldr	r3, [pc, #116]	; (8013664 <xTimerCreateTimerTask+0x84>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d021      	beq.n	801363a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80135f6:	2300      	movs	r3, #0
 80135f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80135fa:	2300      	movs	r3, #0
 80135fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80135fe:	1d3a      	adds	r2, r7, #4
 8013600:	f107 0108 	add.w	r1, r7, #8
 8013604:	f107 030c 	add.w	r3, r7, #12
 8013608:	4618      	mov	r0, r3
 801360a:	f7fd fcf7 	bl	8010ffc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801360e:	6879      	ldr	r1, [r7, #4]
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	68fa      	ldr	r2, [r7, #12]
 8013614:	9202      	str	r2, [sp, #8]
 8013616:	9301      	str	r3, [sp, #4]
 8013618:	2302      	movs	r3, #2
 801361a:	9300      	str	r3, [sp, #0]
 801361c:	2300      	movs	r3, #0
 801361e:	460a      	mov	r2, r1
 8013620:	4911      	ldr	r1, [pc, #68]	; (8013668 <xTimerCreateTimerTask+0x88>)
 8013622:	4812      	ldr	r0, [pc, #72]	; (801366c <xTimerCreateTimerTask+0x8c>)
 8013624:	f7fe fea2 	bl	801236c <xTaskCreateStatic>
 8013628:	4602      	mov	r2, r0
 801362a:	4b11      	ldr	r3, [pc, #68]	; (8013670 <xTimerCreateTimerTask+0x90>)
 801362c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801362e:	4b10      	ldr	r3, [pc, #64]	; (8013670 <xTimerCreateTimerTask+0x90>)
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d001      	beq.n	801363a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013636:	2301      	movs	r3, #1
 8013638:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801363a:	697b      	ldr	r3, [r7, #20]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d10b      	bne.n	8013658 <xTimerCreateTimerTask+0x78>
 8013640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013644:	b672      	cpsid	i
 8013646:	f383 8811 	msr	BASEPRI, r3
 801364a:	f3bf 8f6f 	isb	sy
 801364e:	f3bf 8f4f 	dsb	sy
 8013652:	b662      	cpsie	i
 8013654:	613b      	str	r3, [r7, #16]
 8013656:	e7fe      	b.n	8013656 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8013658:	697b      	ldr	r3, [r7, #20]
}
 801365a:	4618      	mov	r0, r3
 801365c:	3718      	adds	r7, #24
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}
 8013662:	bf00      	nop
 8013664:	20000e50 	.word	0x20000e50
 8013668:	080223d8 	.word	0x080223d8
 801366c:	080137ad 	.word	0x080137ad
 8013670:	20000e54 	.word	0x20000e54

08013674 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b08a      	sub	sp, #40	; 0x28
 8013678:	af00      	add	r7, sp, #0
 801367a:	60f8      	str	r0, [r7, #12]
 801367c:	60b9      	str	r1, [r7, #8]
 801367e:	607a      	str	r2, [r7, #4]
 8013680:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013682:	2300      	movs	r3, #0
 8013684:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d10b      	bne.n	80136a4 <xTimerGenericCommand+0x30>
 801368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013690:	b672      	cpsid	i
 8013692:	f383 8811 	msr	BASEPRI, r3
 8013696:	f3bf 8f6f 	isb	sy
 801369a:	f3bf 8f4f 	dsb	sy
 801369e:	b662      	cpsie	i
 80136a0:	623b      	str	r3, [r7, #32]
 80136a2:	e7fe      	b.n	80136a2 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80136a4:	4b19      	ldr	r3, [pc, #100]	; (801370c <xTimerGenericCommand+0x98>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d02a      	beq.n	8013702 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	2b05      	cmp	r3, #5
 80136bc:	dc18      	bgt.n	80136f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80136be:	f7ff fdad 	bl	801321c <xTaskGetSchedulerState>
 80136c2:	4603      	mov	r3, r0
 80136c4:	2b02      	cmp	r3, #2
 80136c6:	d109      	bne.n	80136dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80136c8:	4b10      	ldr	r3, [pc, #64]	; (801370c <xTimerGenericCommand+0x98>)
 80136ca:	6818      	ldr	r0, [r3, #0]
 80136cc:	f107 0110 	add.w	r1, r7, #16
 80136d0:	2300      	movs	r3, #0
 80136d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136d4:	f7fd ffd2 	bl	801167c <xQueueGenericSend>
 80136d8:	6278      	str	r0, [r7, #36]	; 0x24
 80136da:	e012      	b.n	8013702 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80136dc:	4b0b      	ldr	r3, [pc, #44]	; (801370c <xTimerGenericCommand+0x98>)
 80136de:	6818      	ldr	r0, [r3, #0]
 80136e0:	f107 0110 	add.w	r1, r7, #16
 80136e4:	2300      	movs	r3, #0
 80136e6:	2200      	movs	r2, #0
 80136e8:	f7fd ffc8 	bl	801167c <xQueueGenericSend>
 80136ec:	6278      	str	r0, [r7, #36]	; 0x24
 80136ee:	e008      	b.n	8013702 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80136f0:	4b06      	ldr	r3, [pc, #24]	; (801370c <xTimerGenericCommand+0x98>)
 80136f2:	6818      	ldr	r0, [r3, #0]
 80136f4:	f107 0110 	add.w	r1, r7, #16
 80136f8:	2300      	movs	r3, #0
 80136fa:	683a      	ldr	r2, [r7, #0]
 80136fc:	f7fe f8c0 	bl	8011880 <xQueueGenericSendFromISR>
 8013700:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013704:	4618      	mov	r0, r3
 8013706:	3728      	adds	r7, #40	; 0x28
 8013708:	46bd      	mov	sp, r7
 801370a:	bd80      	pop	{r7, pc}
 801370c:	20000e50 	.word	0x20000e50

08013710 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b088      	sub	sp, #32
 8013714:	af02      	add	r7, sp, #8
 8013716:	6078      	str	r0, [r7, #4]
 8013718:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801371a:	4b23      	ldr	r3, [pc, #140]	; (80137a8 <prvProcessExpiredTimer+0x98>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	68db      	ldr	r3, [r3, #12]
 8013720:	68db      	ldr	r3, [r3, #12]
 8013722:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013724:	697b      	ldr	r3, [r7, #20]
 8013726:	3304      	adds	r3, #4
 8013728:	4618      	mov	r0, r3
 801372a:	f7fd fd0b 	bl	8011144 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801372e:	697b      	ldr	r3, [r7, #20]
 8013730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013734:	f003 0304 	and.w	r3, r3, #4
 8013738:	2b00      	cmp	r3, #0
 801373a:	d023      	beq.n	8013784 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	699a      	ldr	r2, [r3, #24]
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	18d1      	adds	r1, r2, r3
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	683a      	ldr	r2, [r7, #0]
 8013748:	6978      	ldr	r0, [r7, #20]
 801374a:	f000 f8d3 	bl	80138f4 <prvInsertTimerInActiveList>
 801374e:	4603      	mov	r3, r0
 8013750:	2b00      	cmp	r3, #0
 8013752:	d020      	beq.n	8013796 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013754:	2300      	movs	r3, #0
 8013756:	9300      	str	r3, [sp, #0]
 8013758:	2300      	movs	r3, #0
 801375a:	687a      	ldr	r2, [r7, #4]
 801375c:	2100      	movs	r1, #0
 801375e:	6978      	ldr	r0, [r7, #20]
 8013760:	f7ff ff88 	bl	8013674 <xTimerGenericCommand>
 8013764:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013766:	693b      	ldr	r3, [r7, #16]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d114      	bne.n	8013796 <prvProcessExpiredTimer+0x86>
 801376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013770:	b672      	cpsid	i
 8013772:	f383 8811 	msr	BASEPRI, r3
 8013776:	f3bf 8f6f 	isb	sy
 801377a:	f3bf 8f4f 	dsb	sy
 801377e:	b662      	cpsie	i
 8013780:	60fb      	str	r3, [r7, #12]
 8013782:	e7fe      	b.n	8013782 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013784:	697b      	ldr	r3, [r7, #20]
 8013786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801378a:	f023 0301 	bic.w	r3, r3, #1
 801378e:	b2da      	uxtb	r2, r3
 8013790:	697b      	ldr	r3, [r7, #20]
 8013792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013796:	697b      	ldr	r3, [r7, #20]
 8013798:	6a1b      	ldr	r3, [r3, #32]
 801379a:	6978      	ldr	r0, [r7, #20]
 801379c:	4798      	blx	r3
}
 801379e:	bf00      	nop
 80137a0:	3718      	adds	r7, #24
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bd80      	pop	{r7, pc}
 80137a6:	bf00      	nop
 80137a8:	20000e48 	.word	0x20000e48

080137ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b084      	sub	sp, #16
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80137b4:	f107 0308 	add.w	r3, r7, #8
 80137b8:	4618      	mov	r0, r3
 80137ba:	f000 f857 	bl	801386c <prvGetNextExpireTime>
 80137be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	4619      	mov	r1, r3
 80137c4:	68f8      	ldr	r0, [r7, #12]
 80137c6:	f000 f803 	bl	80137d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80137ca:	f000 f8d5 	bl	8013978 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80137ce:	e7f1      	b.n	80137b4 <prvTimerTask+0x8>

080137d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b084      	sub	sp, #16
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
 80137d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80137da:	f7ff f8e9 	bl	80129b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80137de:	f107 0308 	add.w	r3, r7, #8
 80137e2:	4618      	mov	r0, r3
 80137e4:	f000 f866 	bl	80138b4 <prvSampleTimeNow>
 80137e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d130      	bne.n	8013852 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d10a      	bne.n	801380c <prvProcessTimerOrBlockTask+0x3c>
 80137f6:	687a      	ldr	r2, [r7, #4]
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	429a      	cmp	r2, r3
 80137fc:	d806      	bhi.n	801380c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80137fe:	f7ff f8e5 	bl	80129cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013802:	68f9      	ldr	r1, [r7, #12]
 8013804:	6878      	ldr	r0, [r7, #4]
 8013806:	f7ff ff83 	bl	8013710 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801380a:	e024      	b.n	8013856 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d008      	beq.n	8013824 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013812:	4b13      	ldr	r3, [pc, #76]	; (8013860 <prvProcessTimerOrBlockTask+0x90>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d101      	bne.n	8013820 <prvProcessTimerOrBlockTask+0x50>
 801381c:	2301      	movs	r3, #1
 801381e:	e000      	b.n	8013822 <prvProcessTimerOrBlockTask+0x52>
 8013820:	2300      	movs	r3, #0
 8013822:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013824:	4b0f      	ldr	r3, [pc, #60]	; (8013864 <prvProcessTimerOrBlockTask+0x94>)
 8013826:	6818      	ldr	r0, [r3, #0]
 8013828:	687a      	ldr	r2, [r7, #4]
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	1ad3      	subs	r3, r2, r3
 801382e:	683a      	ldr	r2, [r7, #0]
 8013830:	4619      	mov	r1, r3
 8013832:	f7fe fd67 	bl	8012304 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013836:	f7ff f8c9 	bl	80129cc <xTaskResumeAll>
 801383a:	4603      	mov	r3, r0
 801383c:	2b00      	cmp	r3, #0
 801383e:	d10a      	bne.n	8013856 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013840:	4b09      	ldr	r3, [pc, #36]	; (8013868 <prvProcessTimerOrBlockTask+0x98>)
 8013842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013846:	601a      	str	r2, [r3, #0]
 8013848:	f3bf 8f4f 	dsb	sy
 801384c:	f3bf 8f6f 	isb	sy
}
 8013850:	e001      	b.n	8013856 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013852:	f7ff f8bb 	bl	80129cc <xTaskResumeAll>
}
 8013856:	bf00      	nop
 8013858:	3710      	adds	r7, #16
 801385a:	46bd      	mov	sp, r7
 801385c:	bd80      	pop	{r7, pc}
 801385e:	bf00      	nop
 8013860:	20000e4c 	.word	0x20000e4c
 8013864:	20000e50 	.word	0x20000e50
 8013868:	e000ed04 	.word	0xe000ed04

0801386c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801386c:	b480      	push	{r7}
 801386e:	b085      	sub	sp, #20
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013874:	4b0e      	ldr	r3, [pc, #56]	; (80138b0 <prvGetNextExpireTime+0x44>)
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d101      	bne.n	8013882 <prvGetNextExpireTime+0x16>
 801387e:	2201      	movs	r2, #1
 8013880:	e000      	b.n	8013884 <prvGetNextExpireTime+0x18>
 8013882:	2200      	movs	r2, #0
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d105      	bne.n	801389c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013890:	4b07      	ldr	r3, [pc, #28]	; (80138b0 <prvGetNextExpireTime+0x44>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	68db      	ldr	r3, [r3, #12]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	60fb      	str	r3, [r7, #12]
 801389a:	e001      	b.n	80138a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801389c:	2300      	movs	r3, #0
 801389e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80138a0:	68fb      	ldr	r3, [r7, #12]
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	3714      	adds	r7, #20
 80138a6:	46bd      	mov	sp, r7
 80138a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ac:	4770      	bx	lr
 80138ae:	bf00      	nop
 80138b0:	20000e48 	.word	0x20000e48

080138b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b084      	sub	sp, #16
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80138bc:	f7ff f924 	bl	8012b08 <xTaskGetTickCount>
 80138c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80138c2:	4b0b      	ldr	r3, [pc, #44]	; (80138f0 <prvSampleTimeNow+0x3c>)
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	68fa      	ldr	r2, [r7, #12]
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d205      	bcs.n	80138d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80138cc:	f000 f936 	bl	8013b3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	2201      	movs	r2, #1
 80138d4:	601a      	str	r2, [r3, #0]
 80138d6:	e002      	b.n	80138de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	2200      	movs	r2, #0
 80138dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80138de:	4a04      	ldr	r2, [pc, #16]	; (80138f0 <prvSampleTimeNow+0x3c>)
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80138e4:	68fb      	ldr	r3, [r7, #12]
}
 80138e6:	4618      	mov	r0, r3
 80138e8:	3710      	adds	r7, #16
 80138ea:	46bd      	mov	sp, r7
 80138ec:	bd80      	pop	{r7, pc}
 80138ee:	bf00      	nop
 80138f0:	20000e58 	.word	0x20000e58

080138f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b086      	sub	sp, #24
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	60f8      	str	r0, [r7, #12]
 80138fc:	60b9      	str	r1, [r7, #8]
 80138fe:	607a      	str	r2, [r7, #4]
 8013900:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013902:	2300      	movs	r3, #0
 8013904:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	68ba      	ldr	r2, [r7, #8]
 801390a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	68fa      	ldr	r2, [r7, #12]
 8013910:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013912:	68ba      	ldr	r2, [r7, #8]
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	429a      	cmp	r2, r3
 8013918:	d812      	bhi.n	8013940 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801391a:	687a      	ldr	r2, [r7, #4]
 801391c:	683b      	ldr	r3, [r7, #0]
 801391e:	1ad2      	subs	r2, r2, r3
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	699b      	ldr	r3, [r3, #24]
 8013924:	429a      	cmp	r2, r3
 8013926:	d302      	bcc.n	801392e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013928:	2301      	movs	r3, #1
 801392a:	617b      	str	r3, [r7, #20]
 801392c:	e01b      	b.n	8013966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801392e:	4b10      	ldr	r3, [pc, #64]	; (8013970 <prvInsertTimerInActiveList+0x7c>)
 8013930:	681a      	ldr	r2, [r3, #0]
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	3304      	adds	r3, #4
 8013936:	4619      	mov	r1, r3
 8013938:	4610      	mov	r0, r2
 801393a:	f7fd fbca 	bl	80110d2 <vListInsert>
 801393e:	e012      	b.n	8013966 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013940:	687a      	ldr	r2, [r7, #4]
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	429a      	cmp	r2, r3
 8013946:	d206      	bcs.n	8013956 <prvInsertTimerInActiveList+0x62>
 8013948:	68ba      	ldr	r2, [r7, #8]
 801394a:	683b      	ldr	r3, [r7, #0]
 801394c:	429a      	cmp	r2, r3
 801394e:	d302      	bcc.n	8013956 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013950:	2301      	movs	r3, #1
 8013952:	617b      	str	r3, [r7, #20]
 8013954:	e007      	b.n	8013966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013956:	4b07      	ldr	r3, [pc, #28]	; (8013974 <prvInsertTimerInActiveList+0x80>)
 8013958:	681a      	ldr	r2, [r3, #0]
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	3304      	adds	r3, #4
 801395e:	4619      	mov	r1, r3
 8013960:	4610      	mov	r0, r2
 8013962:	f7fd fbb6 	bl	80110d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013966:	697b      	ldr	r3, [r7, #20]
}
 8013968:	4618      	mov	r0, r3
 801396a:	3718      	adds	r7, #24
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}
 8013970:	20000e4c 	.word	0x20000e4c
 8013974:	20000e48 	.word	0x20000e48

08013978 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b08e      	sub	sp, #56	; 0x38
 801397c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801397e:	e0cc      	b.n	8013b1a <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	2b00      	cmp	r3, #0
 8013984:	da19      	bge.n	80139ba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013986:	1d3b      	adds	r3, r7, #4
 8013988:	3304      	adds	r3, #4
 801398a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801398e:	2b00      	cmp	r3, #0
 8013990:	d10b      	bne.n	80139aa <prvProcessReceivedCommands+0x32>
 8013992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013996:	b672      	cpsid	i
 8013998:	f383 8811 	msr	BASEPRI, r3
 801399c:	f3bf 8f6f 	isb	sy
 80139a0:	f3bf 8f4f 	dsb	sy
 80139a4:	b662      	cpsie	i
 80139a6:	61fb      	str	r3, [r7, #28]
 80139a8:	e7fe      	b.n	80139a8 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80139aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139b0:	6850      	ldr	r0, [r2, #4]
 80139b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139b4:	6892      	ldr	r2, [r2, #8]
 80139b6:	4611      	mov	r1, r2
 80139b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	f2c0 80ab 	blt.w	8013b18 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80139c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139c8:	695b      	ldr	r3, [r3, #20]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d004      	beq.n	80139d8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80139ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d0:	3304      	adds	r3, #4
 80139d2:	4618      	mov	r0, r3
 80139d4:	f7fd fbb6 	bl	8011144 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80139d8:	463b      	mov	r3, r7
 80139da:	4618      	mov	r0, r3
 80139dc:	f7ff ff6a 	bl	80138b4 <prvSampleTimeNow>
 80139e0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2b09      	cmp	r3, #9
 80139e6:	f200 8098 	bhi.w	8013b1a <prvProcessReceivedCommands+0x1a2>
 80139ea:	a201      	add	r2, pc, #4	; (adr r2, 80139f0 <prvProcessReceivedCommands+0x78>)
 80139ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139f0:	08013a19 	.word	0x08013a19
 80139f4:	08013a19 	.word	0x08013a19
 80139f8:	08013a19 	.word	0x08013a19
 80139fc:	08013a8f 	.word	0x08013a8f
 8013a00:	08013aa3 	.word	0x08013aa3
 8013a04:	08013aef 	.word	0x08013aef
 8013a08:	08013a19 	.word	0x08013a19
 8013a0c:	08013a19 	.word	0x08013a19
 8013a10:	08013a8f 	.word	0x08013a8f
 8013a14:	08013aa3 	.word	0x08013aa3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a1e:	f043 0301 	orr.w	r3, r3, #1
 8013a22:	b2da      	uxtb	r2, r3
 8013a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013a2a:	68ba      	ldr	r2, [r7, #8]
 8013a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a2e:	699b      	ldr	r3, [r3, #24]
 8013a30:	18d1      	adds	r1, r2, r3
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a38:	f7ff ff5c 	bl	80138f4 <prvInsertTimerInActiveList>
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d06b      	beq.n	8013b1a <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a44:	6a1b      	ldr	r3, [r3, #32]
 8013a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a50:	f003 0304 	and.w	r3, r3, #4
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d060      	beq.n	8013b1a <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013a58:	68ba      	ldr	r2, [r7, #8]
 8013a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a5c:	699b      	ldr	r3, [r3, #24]
 8013a5e:	441a      	add	r2, r3
 8013a60:	2300      	movs	r3, #0
 8013a62:	9300      	str	r3, [sp, #0]
 8013a64:	2300      	movs	r3, #0
 8013a66:	2100      	movs	r1, #0
 8013a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a6a:	f7ff fe03 	bl	8013674 <xTimerGenericCommand>
 8013a6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013a70:	6a3b      	ldr	r3, [r7, #32]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d151      	bne.n	8013b1a <prvProcessReceivedCommands+0x1a2>
 8013a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a7a:	b672      	cpsid	i
 8013a7c:	f383 8811 	msr	BASEPRI, r3
 8013a80:	f3bf 8f6f 	isb	sy
 8013a84:	f3bf 8f4f 	dsb	sy
 8013a88:	b662      	cpsie	i
 8013a8a:	61bb      	str	r3, [r7, #24]
 8013a8c:	e7fe      	b.n	8013a8c <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a94:	f023 0301 	bic.w	r3, r3, #1
 8013a98:	b2da      	uxtb	r2, r3
 8013a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013aa0:	e03b      	b.n	8013b1a <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013aa8:	f043 0301 	orr.w	r3, r3, #1
 8013aac:	b2da      	uxtb	r2, r3
 8013aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013ab4:	68ba      	ldr	r2, [r7, #8]
 8013ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013abc:	699b      	ldr	r3, [r3, #24]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d10b      	bne.n	8013ada <prvProcessReceivedCommands+0x162>
 8013ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac6:	b672      	cpsid	i
 8013ac8:	f383 8811 	msr	BASEPRI, r3
 8013acc:	f3bf 8f6f 	isb	sy
 8013ad0:	f3bf 8f4f 	dsb	sy
 8013ad4:	b662      	cpsie	i
 8013ad6:	617b      	str	r3, [r7, #20]
 8013ad8:	e7fe      	b.n	8013ad8 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013adc:	699a      	ldr	r2, [r3, #24]
 8013ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae0:	18d1      	adds	r1, r2, r3
 8013ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ae8:	f7ff ff04 	bl	80138f4 <prvInsertTimerInActiveList>
					break;
 8013aec:	e015      	b.n	8013b1a <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013af4:	f003 0302 	and.w	r3, r3, #2
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d103      	bne.n	8013b04 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8013afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013afe:	f000 fbb9 	bl	8014274 <vPortFree>
 8013b02:	e00a      	b.n	8013b1a <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b0a:	f023 0301 	bic.w	r3, r3, #1
 8013b0e:	b2da      	uxtb	r2, r3
 8013b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013b16:	e000      	b.n	8013b1a <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013b18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013b1a:	4b07      	ldr	r3, [pc, #28]	; (8013b38 <prvProcessReceivedCommands+0x1c0>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	1d39      	adds	r1, r7, #4
 8013b20:	2200      	movs	r2, #0
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7fd ffda 	bl	8011adc <xQueueReceive>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	f47f af28 	bne.w	8013980 <prvProcessReceivedCommands+0x8>
	}
}
 8013b30:	bf00      	nop
 8013b32:	3730      	adds	r7, #48	; 0x30
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}
 8013b38:	20000e50 	.word	0x20000e50

08013b3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b088      	sub	sp, #32
 8013b40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013b42:	e049      	b.n	8013bd8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013b44:	4b2e      	ldr	r3, [pc, #184]	; (8013c00 <prvSwitchTimerLists+0xc4>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	68db      	ldr	r3, [r3, #12]
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b4e:	4b2c      	ldr	r3, [pc, #176]	; (8013c00 <prvSwitchTimerLists+0xc4>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	68db      	ldr	r3, [r3, #12]
 8013b54:	68db      	ldr	r3, [r3, #12]
 8013b56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	3304      	adds	r3, #4
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7fd faf1 	bl	8011144 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	6a1b      	ldr	r3, [r3, #32]
 8013b66:	68f8      	ldr	r0, [r7, #12]
 8013b68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b70:	f003 0304 	and.w	r3, r3, #4
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d02f      	beq.n	8013bd8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	699b      	ldr	r3, [r3, #24]
 8013b7c:	693a      	ldr	r2, [r7, #16]
 8013b7e:	4413      	add	r3, r2
 8013b80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013b82:	68ba      	ldr	r2, [r7, #8]
 8013b84:	693b      	ldr	r3, [r7, #16]
 8013b86:	429a      	cmp	r2, r3
 8013b88:	d90e      	bls.n	8013ba8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	68ba      	ldr	r2, [r7, #8]
 8013b8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	68fa      	ldr	r2, [r7, #12]
 8013b94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013b96:	4b1a      	ldr	r3, [pc, #104]	; (8013c00 <prvSwitchTimerLists+0xc4>)
 8013b98:	681a      	ldr	r2, [r3, #0]
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	3304      	adds	r3, #4
 8013b9e:	4619      	mov	r1, r3
 8013ba0:	4610      	mov	r0, r2
 8013ba2:	f7fd fa96 	bl	80110d2 <vListInsert>
 8013ba6:	e017      	b.n	8013bd8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013ba8:	2300      	movs	r3, #0
 8013baa:	9300      	str	r3, [sp, #0]
 8013bac:	2300      	movs	r3, #0
 8013bae:	693a      	ldr	r2, [r7, #16]
 8013bb0:	2100      	movs	r1, #0
 8013bb2:	68f8      	ldr	r0, [r7, #12]
 8013bb4:	f7ff fd5e 	bl	8013674 <xTimerGenericCommand>
 8013bb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d10b      	bne.n	8013bd8 <prvSwitchTimerLists+0x9c>
 8013bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bc4:	b672      	cpsid	i
 8013bc6:	f383 8811 	msr	BASEPRI, r3
 8013bca:	f3bf 8f6f 	isb	sy
 8013bce:	f3bf 8f4f 	dsb	sy
 8013bd2:	b662      	cpsie	i
 8013bd4:	603b      	str	r3, [r7, #0]
 8013bd6:	e7fe      	b.n	8013bd6 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013bd8:	4b09      	ldr	r3, [pc, #36]	; (8013c00 <prvSwitchTimerLists+0xc4>)
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d1b0      	bne.n	8013b44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013be2:	4b07      	ldr	r3, [pc, #28]	; (8013c00 <prvSwitchTimerLists+0xc4>)
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013be8:	4b06      	ldr	r3, [pc, #24]	; (8013c04 <prvSwitchTimerLists+0xc8>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	4a04      	ldr	r2, [pc, #16]	; (8013c00 <prvSwitchTimerLists+0xc4>)
 8013bee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013bf0:	4a04      	ldr	r2, [pc, #16]	; (8013c04 <prvSwitchTimerLists+0xc8>)
 8013bf2:	697b      	ldr	r3, [r7, #20]
 8013bf4:	6013      	str	r3, [r2, #0]
}
 8013bf6:	bf00      	nop
 8013bf8:	3718      	adds	r7, #24
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd80      	pop	{r7, pc}
 8013bfe:	bf00      	nop
 8013c00:	20000e48 	.word	0x20000e48
 8013c04:	20000e4c 	.word	0x20000e4c

08013c08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b082      	sub	sp, #8
 8013c0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013c0e:	f000 f943 	bl	8013e98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013c12:	4b15      	ldr	r3, [pc, #84]	; (8013c68 <prvCheckForValidListAndQueue+0x60>)
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d120      	bne.n	8013c5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013c1a:	4814      	ldr	r0, [pc, #80]	; (8013c6c <prvCheckForValidListAndQueue+0x64>)
 8013c1c:	f7fd fa08 	bl	8011030 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013c20:	4813      	ldr	r0, [pc, #76]	; (8013c70 <prvCheckForValidListAndQueue+0x68>)
 8013c22:	f7fd fa05 	bl	8011030 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013c26:	4b13      	ldr	r3, [pc, #76]	; (8013c74 <prvCheckForValidListAndQueue+0x6c>)
 8013c28:	4a10      	ldr	r2, [pc, #64]	; (8013c6c <prvCheckForValidListAndQueue+0x64>)
 8013c2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013c2c:	4b12      	ldr	r3, [pc, #72]	; (8013c78 <prvCheckForValidListAndQueue+0x70>)
 8013c2e:	4a10      	ldr	r2, [pc, #64]	; (8013c70 <prvCheckForValidListAndQueue+0x68>)
 8013c30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013c32:	2300      	movs	r3, #0
 8013c34:	9300      	str	r3, [sp, #0]
 8013c36:	4b11      	ldr	r3, [pc, #68]	; (8013c7c <prvCheckForValidListAndQueue+0x74>)
 8013c38:	4a11      	ldr	r2, [pc, #68]	; (8013c80 <prvCheckForValidListAndQueue+0x78>)
 8013c3a:	2110      	movs	r1, #16
 8013c3c:	200a      	movs	r0, #10
 8013c3e:	f7fd fb15 	bl	801126c <xQueueGenericCreateStatic>
 8013c42:	4602      	mov	r2, r0
 8013c44:	4b08      	ldr	r3, [pc, #32]	; (8013c68 <prvCheckForValidListAndQueue+0x60>)
 8013c46:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013c48:	4b07      	ldr	r3, [pc, #28]	; (8013c68 <prvCheckForValidListAndQueue+0x60>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d005      	beq.n	8013c5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013c50:	4b05      	ldr	r3, [pc, #20]	; (8013c68 <prvCheckForValidListAndQueue+0x60>)
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	490b      	ldr	r1, [pc, #44]	; (8013c84 <prvCheckForValidListAndQueue+0x7c>)
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7fe fb02 	bl	8012260 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013c5c:	f000 f94e 	bl	8013efc <vPortExitCritical>
}
 8013c60:	bf00      	nop
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd80      	pop	{r7, pc}
 8013c66:	bf00      	nop
 8013c68:	20000e50 	.word	0x20000e50
 8013c6c:	20000e20 	.word	0x20000e20
 8013c70:	20000e34 	.word	0x20000e34
 8013c74:	20000e48 	.word	0x20000e48
 8013c78:	20000e4c 	.word	0x20000e4c
 8013c7c:	20000efc 	.word	0x20000efc
 8013c80:	20000e5c 	.word	0x20000e5c
 8013c84:	080223e0 	.word	0x080223e0

08013c88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013c88:	b480      	push	{r7}
 8013c8a:	b085      	sub	sp, #20
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	60b9      	str	r1, [r7, #8]
 8013c92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	3b04      	subs	r3, #4
 8013c98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	3b04      	subs	r3, #4
 8013ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	f023 0201 	bic.w	r2, r3, #1
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	3b04      	subs	r3, #4
 8013cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013cb8:	4a0c      	ldr	r2, [pc, #48]	; (8013cec <pxPortInitialiseStack+0x64>)
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	3b14      	subs	r3, #20
 8013cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013cc4:	687a      	ldr	r2, [r7, #4]
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	3b04      	subs	r3, #4
 8013cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	f06f 0202 	mvn.w	r2, #2
 8013cd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	3b20      	subs	r3, #32
 8013cdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013cde:	68fb      	ldr	r3, [r7, #12]
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3714      	adds	r7, #20
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cea:	4770      	bx	lr
 8013cec:	08013cf1 	.word	0x08013cf1

08013cf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013cf0:	b480      	push	{r7}
 8013cf2:	b085      	sub	sp, #20
 8013cf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013cfa:	4b13      	ldr	r3, [pc, #76]	; (8013d48 <prvTaskExitError+0x58>)
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d02:	d00b      	beq.n	8013d1c <prvTaskExitError+0x2c>
 8013d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d08:	b672      	cpsid	i
 8013d0a:	f383 8811 	msr	BASEPRI, r3
 8013d0e:	f3bf 8f6f 	isb	sy
 8013d12:	f3bf 8f4f 	dsb	sy
 8013d16:	b662      	cpsie	i
 8013d18:	60fb      	str	r3, [r7, #12]
 8013d1a:	e7fe      	b.n	8013d1a <prvTaskExitError+0x2a>
 8013d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d20:	b672      	cpsid	i
 8013d22:	f383 8811 	msr	BASEPRI, r3
 8013d26:	f3bf 8f6f 	isb	sy
 8013d2a:	f3bf 8f4f 	dsb	sy
 8013d2e:	b662      	cpsie	i
 8013d30:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013d32:	bf00      	nop
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d0fc      	beq.n	8013d34 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013d3a:	bf00      	nop
 8013d3c:	3714      	adds	r7, #20
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d44:	4770      	bx	lr
 8013d46:	bf00      	nop
 8013d48:	20000030 	.word	0x20000030
 8013d4c:	00000000 	.word	0x00000000

08013d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013d50:	4b07      	ldr	r3, [pc, #28]	; (8013d70 <pxCurrentTCBConst2>)
 8013d52:	6819      	ldr	r1, [r3, #0]
 8013d54:	6808      	ldr	r0, [r1, #0]
 8013d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d5a:	f380 8809 	msr	PSP, r0
 8013d5e:	f3bf 8f6f 	isb	sy
 8013d62:	f04f 0000 	mov.w	r0, #0
 8013d66:	f380 8811 	msr	BASEPRI, r0
 8013d6a:	4770      	bx	lr
 8013d6c:	f3af 8000 	nop.w

08013d70 <pxCurrentTCBConst2>:
 8013d70:	20000920 	.word	0x20000920
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013d74:	bf00      	nop
 8013d76:	bf00      	nop

08013d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013d78:	4808      	ldr	r0, [pc, #32]	; (8013d9c <prvPortStartFirstTask+0x24>)
 8013d7a:	6800      	ldr	r0, [r0, #0]
 8013d7c:	6800      	ldr	r0, [r0, #0]
 8013d7e:	f380 8808 	msr	MSP, r0
 8013d82:	f04f 0000 	mov.w	r0, #0
 8013d86:	f380 8814 	msr	CONTROL, r0
 8013d8a:	b662      	cpsie	i
 8013d8c:	b661      	cpsie	f
 8013d8e:	f3bf 8f4f 	dsb	sy
 8013d92:	f3bf 8f6f 	isb	sy
 8013d96:	df00      	svc	0
 8013d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013d9a:	bf00      	nop
 8013d9c:	e000ed08 	.word	0xe000ed08

08013da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b084      	sub	sp, #16
 8013da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013da6:	4b36      	ldr	r3, [pc, #216]	; (8013e80 <xPortStartScheduler+0xe0>)
 8013da8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	781b      	ldrb	r3, [r3, #0]
 8013dae:	b2db      	uxtb	r3, r3
 8013db0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	22ff      	movs	r2, #255	; 0xff
 8013db6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	781b      	ldrb	r3, [r3, #0]
 8013dbc:	b2db      	uxtb	r3, r3
 8013dbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013dc0:	78fb      	ldrb	r3, [r7, #3]
 8013dc2:	b2db      	uxtb	r3, r3
 8013dc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013dc8:	b2da      	uxtb	r2, r3
 8013dca:	4b2e      	ldr	r3, [pc, #184]	; (8013e84 <xPortStartScheduler+0xe4>)
 8013dcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013dce:	4b2e      	ldr	r3, [pc, #184]	; (8013e88 <xPortStartScheduler+0xe8>)
 8013dd0:	2207      	movs	r2, #7
 8013dd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013dd4:	e009      	b.n	8013dea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013dd6:	4b2c      	ldr	r3, [pc, #176]	; (8013e88 <xPortStartScheduler+0xe8>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	3b01      	subs	r3, #1
 8013ddc:	4a2a      	ldr	r2, [pc, #168]	; (8013e88 <xPortStartScheduler+0xe8>)
 8013dde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013de0:	78fb      	ldrb	r3, [r7, #3]
 8013de2:	b2db      	uxtb	r3, r3
 8013de4:	005b      	lsls	r3, r3, #1
 8013de6:	b2db      	uxtb	r3, r3
 8013de8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013dea:	78fb      	ldrb	r3, [r7, #3]
 8013dec:	b2db      	uxtb	r3, r3
 8013dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013df2:	2b80      	cmp	r3, #128	; 0x80
 8013df4:	d0ef      	beq.n	8013dd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013df6:	4b24      	ldr	r3, [pc, #144]	; (8013e88 <xPortStartScheduler+0xe8>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	f1c3 0307 	rsb	r3, r3, #7
 8013dfe:	2b04      	cmp	r3, #4
 8013e00:	d00b      	beq.n	8013e1a <xPortStartScheduler+0x7a>
 8013e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e06:	b672      	cpsid	i
 8013e08:	f383 8811 	msr	BASEPRI, r3
 8013e0c:	f3bf 8f6f 	isb	sy
 8013e10:	f3bf 8f4f 	dsb	sy
 8013e14:	b662      	cpsie	i
 8013e16:	60bb      	str	r3, [r7, #8]
 8013e18:	e7fe      	b.n	8013e18 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013e1a:	4b1b      	ldr	r3, [pc, #108]	; (8013e88 <xPortStartScheduler+0xe8>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	021b      	lsls	r3, r3, #8
 8013e20:	4a19      	ldr	r2, [pc, #100]	; (8013e88 <xPortStartScheduler+0xe8>)
 8013e22:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013e24:	4b18      	ldr	r3, [pc, #96]	; (8013e88 <xPortStartScheduler+0xe8>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013e2c:	4a16      	ldr	r2, [pc, #88]	; (8013e88 <xPortStartScheduler+0xe8>)
 8013e2e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	b2da      	uxtb	r2, r3
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013e38:	4b14      	ldr	r3, [pc, #80]	; (8013e8c <xPortStartScheduler+0xec>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	4a13      	ldr	r2, [pc, #76]	; (8013e8c <xPortStartScheduler+0xec>)
 8013e3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013e42:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013e44:	4b11      	ldr	r3, [pc, #68]	; (8013e8c <xPortStartScheduler+0xec>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	4a10      	ldr	r2, [pc, #64]	; (8013e8c <xPortStartScheduler+0xec>)
 8013e4a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013e4e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013e50:	f000 f8d4 	bl	8013ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013e54:	4b0e      	ldr	r3, [pc, #56]	; (8013e90 <xPortStartScheduler+0xf0>)
 8013e56:	2200      	movs	r2, #0
 8013e58:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013e5a:	f000 f8f3 	bl	8014044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013e5e:	4b0d      	ldr	r3, [pc, #52]	; (8013e94 <xPortStartScheduler+0xf4>)
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	4a0c      	ldr	r2, [pc, #48]	; (8013e94 <xPortStartScheduler+0xf4>)
 8013e64:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013e68:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013e6a:	f7ff ff85 	bl	8013d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013e6e:	f7fe ff2f 	bl	8012cd0 <vTaskSwitchContext>
	prvTaskExitError();
 8013e72:	f7ff ff3d 	bl	8013cf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013e76:	2300      	movs	r3, #0
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	3710      	adds	r7, #16
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}
 8013e80:	e000e400 	.word	0xe000e400
 8013e84:	20000f4c 	.word	0x20000f4c
 8013e88:	20000f50 	.word	0x20000f50
 8013e8c:	e000ed20 	.word	0xe000ed20
 8013e90:	20000030 	.word	0x20000030
 8013e94:	e000ef34 	.word	0xe000ef34

08013e98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013e98:	b480      	push	{r7}
 8013e9a:	b083      	sub	sp, #12
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ea2:	b672      	cpsid	i
 8013ea4:	f383 8811 	msr	BASEPRI, r3
 8013ea8:	f3bf 8f6f 	isb	sy
 8013eac:	f3bf 8f4f 	dsb	sy
 8013eb0:	b662      	cpsie	i
 8013eb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013eb4:	4b0f      	ldr	r3, [pc, #60]	; (8013ef4 <vPortEnterCritical+0x5c>)
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	3301      	adds	r3, #1
 8013eba:	4a0e      	ldr	r2, [pc, #56]	; (8013ef4 <vPortEnterCritical+0x5c>)
 8013ebc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013ebe:	4b0d      	ldr	r3, [pc, #52]	; (8013ef4 <vPortEnterCritical+0x5c>)
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	2b01      	cmp	r3, #1
 8013ec4:	d110      	bne.n	8013ee8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013ec6:	4b0c      	ldr	r3, [pc, #48]	; (8013ef8 <vPortEnterCritical+0x60>)
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	b2db      	uxtb	r3, r3
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d00b      	beq.n	8013ee8 <vPortEnterCritical+0x50>
 8013ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ed4:	b672      	cpsid	i
 8013ed6:	f383 8811 	msr	BASEPRI, r3
 8013eda:	f3bf 8f6f 	isb	sy
 8013ede:	f3bf 8f4f 	dsb	sy
 8013ee2:	b662      	cpsie	i
 8013ee4:	603b      	str	r3, [r7, #0]
 8013ee6:	e7fe      	b.n	8013ee6 <vPortEnterCritical+0x4e>
	}
}
 8013ee8:	bf00      	nop
 8013eea:	370c      	adds	r7, #12
 8013eec:	46bd      	mov	sp, r7
 8013eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef2:	4770      	bx	lr
 8013ef4:	20000030 	.word	0x20000030
 8013ef8:	e000ed04 	.word	0xe000ed04

08013efc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013efc:	b480      	push	{r7}
 8013efe:	b083      	sub	sp, #12
 8013f00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013f02:	4b12      	ldr	r3, [pc, #72]	; (8013f4c <vPortExitCritical+0x50>)
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d10b      	bne.n	8013f22 <vPortExitCritical+0x26>
 8013f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f0e:	b672      	cpsid	i
 8013f10:	f383 8811 	msr	BASEPRI, r3
 8013f14:	f3bf 8f6f 	isb	sy
 8013f18:	f3bf 8f4f 	dsb	sy
 8013f1c:	b662      	cpsie	i
 8013f1e:	607b      	str	r3, [r7, #4]
 8013f20:	e7fe      	b.n	8013f20 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8013f22:	4b0a      	ldr	r3, [pc, #40]	; (8013f4c <vPortExitCritical+0x50>)
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	3b01      	subs	r3, #1
 8013f28:	4a08      	ldr	r2, [pc, #32]	; (8013f4c <vPortExitCritical+0x50>)
 8013f2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013f2c:	4b07      	ldr	r3, [pc, #28]	; (8013f4c <vPortExitCritical+0x50>)
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d104      	bne.n	8013f3e <vPortExitCritical+0x42>
 8013f34:	2300      	movs	r3, #0
 8013f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013f38:	683b      	ldr	r3, [r7, #0]
 8013f3a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8013f3e:	bf00      	nop
 8013f40:	370c      	adds	r7, #12
 8013f42:	46bd      	mov	sp, r7
 8013f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f48:	4770      	bx	lr
 8013f4a:	bf00      	nop
 8013f4c:	20000030 	.word	0x20000030

08013f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013f50:	f3ef 8009 	mrs	r0, PSP
 8013f54:	f3bf 8f6f 	isb	sy
 8013f58:	4b15      	ldr	r3, [pc, #84]	; (8013fb0 <pxCurrentTCBConst>)
 8013f5a:	681a      	ldr	r2, [r3, #0]
 8013f5c:	f01e 0f10 	tst.w	lr, #16
 8013f60:	bf08      	it	eq
 8013f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f6a:	6010      	str	r0, [r2, #0]
 8013f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013f74:	b672      	cpsid	i
 8013f76:	f380 8811 	msr	BASEPRI, r0
 8013f7a:	f3bf 8f4f 	dsb	sy
 8013f7e:	f3bf 8f6f 	isb	sy
 8013f82:	b662      	cpsie	i
 8013f84:	f7fe fea4 	bl	8012cd0 <vTaskSwitchContext>
 8013f88:	f04f 0000 	mov.w	r0, #0
 8013f8c:	f380 8811 	msr	BASEPRI, r0
 8013f90:	bc09      	pop	{r0, r3}
 8013f92:	6819      	ldr	r1, [r3, #0]
 8013f94:	6808      	ldr	r0, [r1, #0]
 8013f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f9a:	f01e 0f10 	tst.w	lr, #16
 8013f9e:	bf08      	it	eq
 8013fa0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013fa4:	f380 8809 	msr	PSP, r0
 8013fa8:	f3bf 8f6f 	isb	sy
 8013fac:	4770      	bx	lr
 8013fae:	bf00      	nop

08013fb0 <pxCurrentTCBConst>:
 8013fb0:	20000920 	.word	0x20000920
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013fb4:	bf00      	nop
 8013fb6:	bf00      	nop

08013fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b082      	sub	sp, #8
 8013fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8013fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fc2:	b672      	cpsid	i
 8013fc4:	f383 8811 	msr	BASEPRI, r3
 8013fc8:	f3bf 8f6f 	isb	sy
 8013fcc:	f3bf 8f4f 	dsb	sy
 8013fd0:	b662      	cpsie	i
 8013fd2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013fd4:	f7fe fdba 	bl	8012b4c <xTaskIncrementTick>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d003      	beq.n	8013fe6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013fde:	4b06      	ldr	r3, [pc, #24]	; (8013ff8 <SysTick_Handler+0x40>)
 8013fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fe4:	601a      	str	r2, [r3, #0]
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8013ff0:	bf00      	nop
 8013ff2:	3708      	adds	r7, #8
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}
 8013ff8:	e000ed04 	.word	0xe000ed04

08013ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013ffc:	b480      	push	{r7}
 8013ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014000:	4b0b      	ldr	r3, [pc, #44]	; (8014030 <vPortSetupTimerInterrupt+0x34>)
 8014002:	2200      	movs	r2, #0
 8014004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014006:	4b0b      	ldr	r3, [pc, #44]	; (8014034 <vPortSetupTimerInterrupt+0x38>)
 8014008:	2200      	movs	r2, #0
 801400a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801400c:	4b0a      	ldr	r3, [pc, #40]	; (8014038 <vPortSetupTimerInterrupt+0x3c>)
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	4a0a      	ldr	r2, [pc, #40]	; (801403c <vPortSetupTimerInterrupt+0x40>)
 8014012:	fba2 2303 	umull	r2, r3, r2, r3
 8014016:	099b      	lsrs	r3, r3, #6
 8014018:	4a09      	ldr	r2, [pc, #36]	; (8014040 <vPortSetupTimerInterrupt+0x44>)
 801401a:	3b01      	subs	r3, #1
 801401c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801401e:	4b04      	ldr	r3, [pc, #16]	; (8014030 <vPortSetupTimerInterrupt+0x34>)
 8014020:	2207      	movs	r2, #7
 8014022:	601a      	str	r2, [r3, #0]
}
 8014024:	bf00      	nop
 8014026:	46bd      	mov	sp, r7
 8014028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402c:	4770      	bx	lr
 801402e:	bf00      	nop
 8014030:	e000e010 	.word	0xe000e010
 8014034:	e000e018 	.word	0xe000e018
 8014038:	20000000 	.word	0x20000000
 801403c:	10624dd3 	.word	0x10624dd3
 8014040:	e000e014 	.word	0xe000e014

08014044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014044:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014054 <vPortEnableVFP+0x10>
 8014048:	6801      	ldr	r1, [r0, #0]
 801404a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801404e:	6001      	str	r1, [r0, #0]
 8014050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014052:	bf00      	nop
 8014054:	e000ed88 	.word	0xe000ed88

08014058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014058:	b480      	push	{r7}
 801405a:	b085      	sub	sp, #20
 801405c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801405e:	f3ef 8305 	mrs	r3, IPSR
 8014062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	2b0f      	cmp	r3, #15
 8014068:	d915      	bls.n	8014096 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801406a:	4a18      	ldr	r2, [pc, #96]	; (80140cc <vPortValidateInterruptPriority+0x74>)
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	4413      	add	r3, r2
 8014070:	781b      	ldrb	r3, [r3, #0]
 8014072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014074:	4b16      	ldr	r3, [pc, #88]	; (80140d0 <vPortValidateInterruptPriority+0x78>)
 8014076:	781b      	ldrb	r3, [r3, #0]
 8014078:	7afa      	ldrb	r2, [r7, #11]
 801407a:	429a      	cmp	r2, r3
 801407c:	d20b      	bcs.n	8014096 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014082:	b672      	cpsid	i
 8014084:	f383 8811 	msr	BASEPRI, r3
 8014088:	f3bf 8f6f 	isb	sy
 801408c:	f3bf 8f4f 	dsb	sy
 8014090:	b662      	cpsie	i
 8014092:	607b      	str	r3, [r7, #4]
 8014094:	e7fe      	b.n	8014094 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014096:	4b0f      	ldr	r3, [pc, #60]	; (80140d4 <vPortValidateInterruptPriority+0x7c>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801409e:	4b0e      	ldr	r3, [pc, #56]	; (80140d8 <vPortValidateInterruptPriority+0x80>)
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	429a      	cmp	r2, r3
 80140a4:	d90b      	bls.n	80140be <vPortValidateInterruptPriority+0x66>
 80140a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140aa:	b672      	cpsid	i
 80140ac:	f383 8811 	msr	BASEPRI, r3
 80140b0:	f3bf 8f6f 	isb	sy
 80140b4:	f3bf 8f4f 	dsb	sy
 80140b8:	b662      	cpsie	i
 80140ba:	603b      	str	r3, [r7, #0]
 80140bc:	e7fe      	b.n	80140bc <vPortValidateInterruptPriority+0x64>
	}
 80140be:	bf00      	nop
 80140c0:	3714      	adds	r7, #20
 80140c2:	46bd      	mov	sp, r7
 80140c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c8:	4770      	bx	lr
 80140ca:	bf00      	nop
 80140cc:	e000e3f0 	.word	0xe000e3f0
 80140d0:	20000f4c 	.word	0x20000f4c
 80140d4:	e000ed0c 	.word	0xe000ed0c
 80140d8:	20000f50 	.word	0x20000f50

080140dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b08a      	sub	sp, #40	; 0x28
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80140e4:	2300      	movs	r3, #0
 80140e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80140e8:	f7fe fc62 	bl	80129b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80140ec:	4b5c      	ldr	r3, [pc, #368]	; (8014260 <pvPortMalloc+0x184>)
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d101      	bne.n	80140f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80140f4:	f000 f91a 	bl	801432c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80140f8:	4b5a      	ldr	r3, [pc, #360]	; (8014264 <pvPortMalloc+0x188>)
 80140fa:	681a      	ldr	r2, [r3, #0]
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	4013      	ands	r3, r2
 8014100:	2b00      	cmp	r3, #0
 8014102:	f040 8090 	bne.w	8014226 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d01e      	beq.n	801414a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801410c:	2208      	movs	r2, #8
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	4413      	add	r3, r2
 8014112:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f003 0307 	and.w	r3, r3, #7
 801411a:	2b00      	cmp	r3, #0
 801411c:	d015      	beq.n	801414a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	f023 0307 	bic.w	r3, r3, #7
 8014124:	3308      	adds	r3, #8
 8014126:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	f003 0307 	and.w	r3, r3, #7
 801412e:	2b00      	cmp	r3, #0
 8014130:	d00b      	beq.n	801414a <pvPortMalloc+0x6e>
 8014132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014136:	b672      	cpsid	i
 8014138:	f383 8811 	msr	BASEPRI, r3
 801413c:	f3bf 8f6f 	isb	sy
 8014140:	f3bf 8f4f 	dsb	sy
 8014144:	b662      	cpsie	i
 8014146:	617b      	str	r3, [r7, #20]
 8014148:	e7fe      	b.n	8014148 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d06a      	beq.n	8014226 <pvPortMalloc+0x14a>
 8014150:	4b45      	ldr	r3, [pc, #276]	; (8014268 <pvPortMalloc+0x18c>)
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	687a      	ldr	r2, [r7, #4]
 8014156:	429a      	cmp	r2, r3
 8014158:	d865      	bhi.n	8014226 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801415a:	4b44      	ldr	r3, [pc, #272]	; (801426c <pvPortMalloc+0x190>)
 801415c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801415e:	4b43      	ldr	r3, [pc, #268]	; (801426c <pvPortMalloc+0x190>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014164:	e004      	b.n	8014170 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8014166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014168:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014172:	685b      	ldr	r3, [r3, #4]
 8014174:	687a      	ldr	r2, [r7, #4]
 8014176:	429a      	cmp	r2, r3
 8014178:	d903      	bls.n	8014182 <pvPortMalloc+0xa6>
 801417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d1f1      	bne.n	8014166 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014182:	4b37      	ldr	r3, [pc, #220]	; (8014260 <pvPortMalloc+0x184>)
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014188:	429a      	cmp	r2, r3
 801418a:	d04c      	beq.n	8014226 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801418c:	6a3b      	ldr	r3, [r7, #32]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	2208      	movs	r2, #8
 8014192:	4413      	add	r3, r2
 8014194:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014198:	681a      	ldr	r2, [r3, #0]
 801419a:	6a3b      	ldr	r3, [r7, #32]
 801419c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141a0:	685a      	ldr	r2, [r3, #4]
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	1ad2      	subs	r2, r2, r3
 80141a6:	2308      	movs	r3, #8
 80141a8:	005b      	lsls	r3, r3, #1
 80141aa:	429a      	cmp	r2, r3
 80141ac:	d920      	bls.n	80141f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80141ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	4413      	add	r3, r2
 80141b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80141b6:	69bb      	ldr	r3, [r7, #24]
 80141b8:	f003 0307 	and.w	r3, r3, #7
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d00b      	beq.n	80141d8 <pvPortMalloc+0xfc>
 80141c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c4:	b672      	cpsid	i
 80141c6:	f383 8811 	msr	BASEPRI, r3
 80141ca:	f3bf 8f6f 	isb	sy
 80141ce:	f3bf 8f4f 	dsb	sy
 80141d2:	b662      	cpsie	i
 80141d4:	613b      	str	r3, [r7, #16]
 80141d6:	e7fe      	b.n	80141d6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80141d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141da:	685a      	ldr	r2, [r3, #4]
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	1ad2      	subs	r2, r2, r3
 80141e0:	69bb      	ldr	r3, [r7, #24]
 80141e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80141e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e6:	687a      	ldr	r2, [r7, #4]
 80141e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80141ea:	69b8      	ldr	r0, [r7, #24]
 80141ec:	f000 f900 	bl	80143f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80141f0:	4b1d      	ldr	r3, [pc, #116]	; (8014268 <pvPortMalloc+0x18c>)
 80141f2:	681a      	ldr	r2, [r3, #0]
 80141f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141f6:	685b      	ldr	r3, [r3, #4]
 80141f8:	1ad3      	subs	r3, r2, r3
 80141fa:	4a1b      	ldr	r2, [pc, #108]	; (8014268 <pvPortMalloc+0x18c>)
 80141fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80141fe:	4b1a      	ldr	r3, [pc, #104]	; (8014268 <pvPortMalloc+0x18c>)
 8014200:	681a      	ldr	r2, [r3, #0]
 8014202:	4b1b      	ldr	r3, [pc, #108]	; (8014270 <pvPortMalloc+0x194>)
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	429a      	cmp	r2, r3
 8014208:	d203      	bcs.n	8014212 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801420a:	4b17      	ldr	r3, [pc, #92]	; (8014268 <pvPortMalloc+0x18c>)
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	4a18      	ldr	r2, [pc, #96]	; (8014270 <pvPortMalloc+0x194>)
 8014210:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014214:	685a      	ldr	r2, [r3, #4]
 8014216:	4b13      	ldr	r3, [pc, #76]	; (8014264 <pvPortMalloc+0x188>)
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	431a      	orrs	r2, r3
 801421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801421e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014222:	2200      	movs	r2, #0
 8014224:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014226:	f7fe fbd1 	bl	80129cc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801422a:	69fb      	ldr	r3, [r7, #28]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d101      	bne.n	8014234 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8014230:	f7ec f9d0 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014234:	69fb      	ldr	r3, [r7, #28]
 8014236:	f003 0307 	and.w	r3, r3, #7
 801423a:	2b00      	cmp	r3, #0
 801423c:	d00b      	beq.n	8014256 <pvPortMalloc+0x17a>
 801423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014242:	b672      	cpsid	i
 8014244:	f383 8811 	msr	BASEPRI, r3
 8014248:	f3bf 8f6f 	isb	sy
 801424c:	f3bf 8f4f 	dsb	sy
 8014250:	b662      	cpsie	i
 8014252:	60fb      	str	r3, [r7, #12]
 8014254:	e7fe      	b.n	8014254 <pvPortMalloc+0x178>
	return pvReturn;
 8014256:	69fb      	ldr	r3, [r7, #28]
}
 8014258:	4618      	mov	r0, r3
 801425a:	3728      	adds	r7, #40	; 0x28
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}
 8014260:	20008f5c 	.word	0x20008f5c
 8014264:	20008f68 	.word	0x20008f68
 8014268:	20008f60 	.word	0x20008f60
 801426c:	20008f54 	.word	0x20008f54
 8014270:	20008f64 	.word	0x20008f64

08014274 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b086      	sub	sp, #24
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d04a      	beq.n	801431c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014286:	2308      	movs	r3, #8
 8014288:	425b      	negs	r3, r3
 801428a:	697a      	ldr	r2, [r7, #20]
 801428c:	4413      	add	r3, r2
 801428e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014290:	697b      	ldr	r3, [r7, #20]
 8014292:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014294:	693b      	ldr	r3, [r7, #16]
 8014296:	685a      	ldr	r2, [r3, #4]
 8014298:	4b22      	ldr	r3, [pc, #136]	; (8014324 <vPortFree+0xb0>)
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	4013      	ands	r3, r2
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d10b      	bne.n	80142ba <vPortFree+0x46>
 80142a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142a6:	b672      	cpsid	i
 80142a8:	f383 8811 	msr	BASEPRI, r3
 80142ac:	f3bf 8f6f 	isb	sy
 80142b0:	f3bf 8f4f 	dsb	sy
 80142b4:	b662      	cpsie	i
 80142b6:	60fb      	str	r3, [r7, #12]
 80142b8:	e7fe      	b.n	80142b8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80142ba:	693b      	ldr	r3, [r7, #16]
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d00b      	beq.n	80142da <vPortFree+0x66>
 80142c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142c6:	b672      	cpsid	i
 80142c8:	f383 8811 	msr	BASEPRI, r3
 80142cc:	f3bf 8f6f 	isb	sy
 80142d0:	f3bf 8f4f 	dsb	sy
 80142d4:	b662      	cpsie	i
 80142d6:	60bb      	str	r3, [r7, #8]
 80142d8:	e7fe      	b.n	80142d8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80142da:	693b      	ldr	r3, [r7, #16]
 80142dc:	685a      	ldr	r2, [r3, #4]
 80142de:	4b11      	ldr	r3, [pc, #68]	; (8014324 <vPortFree+0xb0>)
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	4013      	ands	r3, r2
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d019      	beq.n	801431c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80142e8:	693b      	ldr	r3, [r7, #16]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d115      	bne.n	801431c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80142f0:	693b      	ldr	r3, [r7, #16]
 80142f2:	685a      	ldr	r2, [r3, #4]
 80142f4:	4b0b      	ldr	r3, [pc, #44]	; (8014324 <vPortFree+0xb0>)
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	43db      	mvns	r3, r3
 80142fa:	401a      	ands	r2, r3
 80142fc:	693b      	ldr	r3, [r7, #16]
 80142fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014300:	f7fe fb56 	bl	80129b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014304:	693b      	ldr	r3, [r7, #16]
 8014306:	685a      	ldr	r2, [r3, #4]
 8014308:	4b07      	ldr	r3, [pc, #28]	; (8014328 <vPortFree+0xb4>)
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	4413      	add	r3, r2
 801430e:	4a06      	ldr	r2, [pc, #24]	; (8014328 <vPortFree+0xb4>)
 8014310:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014312:	6938      	ldr	r0, [r7, #16]
 8014314:	f000 f86c 	bl	80143f0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014318:	f7fe fb58 	bl	80129cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801431c:	bf00      	nop
 801431e:	3718      	adds	r7, #24
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}
 8014324:	20008f68 	.word	0x20008f68
 8014328:	20008f60 	.word	0x20008f60

0801432c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801432c:	b480      	push	{r7}
 801432e:	b085      	sub	sp, #20
 8014330:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014336:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014338:	4b27      	ldr	r3, [pc, #156]	; (80143d8 <prvHeapInit+0xac>)
 801433a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	f003 0307 	and.w	r3, r3, #7
 8014342:	2b00      	cmp	r3, #0
 8014344:	d00c      	beq.n	8014360 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	3307      	adds	r3, #7
 801434a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	f023 0307 	bic.w	r3, r3, #7
 8014352:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014354:	68ba      	ldr	r2, [r7, #8]
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	1ad3      	subs	r3, r2, r3
 801435a:	4a1f      	ldr	r2, [pc, #124]	; (80143d8 <prvHeapInit+0xac>)
 801435c:	4413      	add	r3, r2
 801435e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014364:	4a1d      	ldr	r2, [pc, #116]	; (80143dc <prvHeapInit+0xb0>)
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801436a:	4b1c      	ldr	r3, [pc, #112]	; (80143dc <prvHeapInit+0xb0>)
 801436c:	2200      	movs	r2, #0
 801436e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	68ba      	ldr	r2, [r7, #8]
 8014374:	4413      	add	r3, r2
 8014376:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014378:	2208      	movs	r2, #8
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	1a9b      	subs	r3, r3, r2
 801437e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	f023 0307 	bic.w	r3, r3, #7
 8014386:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	4a15      	ldr	r2, [pc, #84]	; (80143e0 <prvHeapInit+0xb4>)
 801438c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801438e:	4b14      	ldr	r3, [pc, #80]	; (80143e0 <prvHeapInit+0xb4>)
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	2200      	movs	r2, #0
 8014394:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014396:	4b12      	ldr	r3, [pc, #72]	; (80143e0 <prvHeapInit+0xb4>)
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	2200      	movs	r2, #0
 801439c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	68fa      	ldr	r2, [r7, #12]
 80143a6:	1ad2      	subs	r2, r2, r3
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80143ac:	4b0c      	ldr	r3, [pc, #48]	; (80143e0 <prvHeapInit+0xb4>)
 80143ae:	681a      	ldr	r2, [r3, #0]
 80143b0:	683b      	ldr	r3, [r7, #0]
 80143b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	685b      	ldr	r3, [r3, #4]
 80143b8:	4a0a      	ldr	r2, [pc, #40]	; (80143e4 <prvHeapInit+0xb8>)
 80143ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	685b      	ldr	r3, [r3, #4]
 80143c0:	4a09      	ldr	r2, [pc, #36]	; (80143e8 <prvHeapInit+0xbc>)
 80143c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80143c4:	4b09      	ldr	r3, [pc, #36]	; (80143ec <prvHeapInit+0xc0>)
 80143c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80143ca:	601a      	str	r2, [r3, #0]
}
 80143cc:	bf00      	nop
 80143ce:	3714      	adds	r7, #20
 80143d0:	46bd      	mov	sp, r7
 80143d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d6:	4770      	bx	lr
 80143d8:	20000f54 	.word	0x20000f54
 80143dc:	20008f54 	.word	0x20008f54
 80143e0:	20008f5c 	.word	0x20008f5c
 80143e4:	20008f64 	.word	0x20008f64
 80143e8:	20008f60 	.word	0x20008f60
 80143ec:	20008f68 	.word	0x20008f68

080143f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80143f0:	b480      	push	{r7}
 80143f2:	b085      	sub	sp, #20
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80143f8:	4b28      	ldr	r3, [pc, #160]	; (801449c <prvInsertBlockIntoFreeList+0xac>)
 80143fa:	60fb      	str	r3, [r7, #12]
 80143fc:	e002      	b.n	8014404 <prvInsertBlockIntoFreeList+0x14>
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	60fb      	str	r3, [r7, #12]
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	687a      	ldr	r2, [r7, #4]
 801440a:	429a      	cmp	r2, r3
 801440c:	d8f7      	bhi.n	80143fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	685b      	ldr	r3, [r3, #4]
 8014416:	68ba      	ldr	r2, [r7, #8]
 8014418:	4413      	add	r3, r2
 801441a:	687a      	ldr	r2, [r7, #4]
 801441c:	429a      	cmp	r2, r3
 801441e:	d108      	bne.n	8014432 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	685a      	ldr	r2, [r3, #4]
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	685b      	ldr	r3, [r3, #4]
 8014428:	441a      	add	r2, r3
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	685b      	ldr	r3, [r3, #4]
 801443a:	68ba      	ldr	r2, [r7, #8]
 801443c:	441a      	add	r2, r3
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	429a      	cmp	r2, r3
 8014444:	d118      	bne.n	8014478 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	681a      	ldr	r2, [r3, #0]
 801444a:	4b15      	ldr	r3, [pc, #84]	; (80144a0 <prvInsertBlockIntoFreeList+0xb0>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	429a      	cmp	r2, r3
 8014450:	d00d      	beq.n	801446e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	685a      	ldr	r2, [r3, #4]
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	685b      	ldr	r3, [r3, #4]
 801445c:	441a      	add	r2, r3
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	681a      	ldr	r2, [r3, #0]
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	601a      	str	r2, [r3, #0]
 801446c:	e008      	b.n	8014480 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801446e:	4b0c      	ldr	r3, [pc, #48]	; (80144a0 <prvInsertBlockIntoFreeList+0xb0>)
 8014470:	681a      	ldr	r2, [r3, #0]
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	601a      	str	r2, [r3, #0]
 8014476:	e003      	b.n	8014480 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	681a      	ldr	r2, [r3, #0]
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014480:	68fa      	ldr	r2, [r7, #12]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	429a      	cmp	r2, r3
 8014486:	d002      	beq.n	801448e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	687a      	ldr	r2, [r7, #4]
 801448c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801448e:	bf00      	nop
 8014490:	3714      	adds	r7, #20
 8014492:	46bd      	mov	sp, r7
 8014494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014498:	4770      	bx	lr
 801449a:	bf00      	nop
 801449c:	20008f54 	.word	0x20008f54
 80144a0:	20008f5c 	.word	0x20008f5c

080144a4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b084      	sub	sp, #16
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
 80144ac:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80144ae:	f007 faab 	bl	801ba08 <sys_timeouts_sleeptime>
 80144b2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80144ba:	d10b      	bne.n	80144d4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80144bc:	4813      	ldr	r0, [pc, #76]	; (801450c <tcpip_timeouts_mbox_fetch+0x68>)
 80144be:	f00c f9be 	bl	802083e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80144c2:	2200      	movs	r2, #0
 80144c4:	6839      	ldr	r1, [r7, #0]
 80144c6:	6878      	ldr	r0, [r7, #4]
 80144c8:	f00c f946 	bl	8020758 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80144cc:	480f      	ldr	r0, [pc, #60]	; (801450c <tcpip_timeouts_mbox_fetch+0x68>)
 80144ce:	f00c f9a7 	bl	8020820 <sys_mutex_lock>
    return;
 80144d2:	e018      	b.n	8014506 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d102      	bne.n	80144e0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80144da:	f007 fa5b 	bl	801b994 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80144de:	e7e6      	b.n	80144ae <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80144e0:	480a      	ldr	r0, [pc, #40]	; (801450c <tcpip_timeouts_mbox_fetch+0x68>)
 80144e2:	f00c f9ac 	bl	802083e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80144e6:	68fa      	ldr	r2, [r7, #12]
 80144e8:	6839      	ldr	r1, [r7, #0]
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f00c f934 	bl	8020758 <sys_arch_mbox_fetch>
 80144f0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80144f2:	4806      	ldr	r0, [pc, #24]	; (801450c <tcpip_timeouts_mbox_fetch+0x68>)
 80144f4:	f00c f994 	bl	8020820 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80144fe:	d102      	bne.n	8014506 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8014500:	f007 fa48 	bl	801b994 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8014504:	e7d3      	b.n	80144ae <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8014506:	3710      	adds	r7, #16
 8014508:	46bd      	mov	sp, r7
 801450a:	bd80      	pop	{r7, pc}
 801450c:	2000cbfc 	.word	0x2000cbfc

08014510 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b084      	sub	sp, #16
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8014518:	4810      	ldr	r0, [pc, #64]	; (801455c <tcpip_thread+0x4c>)
 801451a:	f00c f981 	bl	8020820 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801451e:	4b10      	ldr	r3, [pc, #64]	; (8014560 <tcpip_thread+0x50>)
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d005      	beq.n	8014532 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8014526:	4b0e      	ldr	r3, [pc, #56]	; (8014560 <tcpip_thread+0x50>)
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	4a0e      	ldr	r2, [pc, #56]	; (8014564 <tcpip_thread+0x54>)
 801452c:	6812      	ldr	r2, [r2, #0]
 801452e:	4610      	mov	r0, r2
 8014530:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8014532:	f107 030c 	add.w	r3, r7, #12
 8014536:	4619      	mov	r1, r3
 8014538:	480b      	ldr	r0, [pc, #44]	; (8014568 <tcpip_thread+0x58>)
 801453a:	f7ff ffb3 	bl	80144a4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d106      	bne.n	8014552 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8014544:	4b09      	ldr	r3, [pc, #36]	; (801456c <tcpip_thread+0x5c>)
 8014546:	2291      	movs	r2, #145	; 0x91
 8014548:	4909      	ldr	r1, [pc, #36]	; (8014570 <tcpip_thread+0x60>)
 801454a:	480a      	ldr	r0, [pc, #40]	; (8014574 <tcpip_thread+0x64>)
 801454c:	f00c ffe8 	bl	8021520 <iprintf>
      continue;
 8014550:	e003      	b.n	801455a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	4618      	mov	r0, r3
 8014556:	f000 f80f 	bl	8014578 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801455a:	e7ea      	b.n	8014532 <tcpip_thread+0x22>
 801455c:	2000cbfc 	.word	0x2000cbfc
 8014560:	20008f6c 	.word	0x20008f6c
 8014564:	20008f70 	.word	0x20008f70
 8014568:	20008f74 	.word	0x20008f74
 801456c:	080223e8 	.word	0x080223e8
 8014570:	08022418 	.word	0x08022418
 8014574:	08022438 	.word	0x08022438

08014578 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	781b      	ldrb	r3, [r3, #0]
 8014584:	2b01      	cmp	r3, #1
 8014586:	d018      	beq.n	80145ba <tcpip_thread_handle_msg+0x42>
 8014588:	2b02      	cmp	r3, #2
 801458a:	d021      	beq.n	80145d0 <tcpip_thread_handle_msg+0x58>
 801458c:	2b00      	cmp	r3, #0
 801458e:	d126      	bne.n	80145de <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	68db      	ldr	r3, [r3, #12]
 8014594:	687a      	ldr	r2, [r7, #4]
 8014596:	6850      	ldr	r0, [r2, #4]
 8014598:	687a      	ldr	r2, [r7, #4]
 801459a:	6892      	ldr	r2, [r2, #8]
 801459c:	4611      	mov	r1, r2
 801459e:	4798      	blx	r3
 80145a0:	4603      	mov	r3, r0
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d004      	beq.n	80145b0 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	685b      	ldr	r3, [r3, #4]
 80145aa:	4618      	mov	r0, r3
 80145ac:	f001 fce6 	bl	8015f7c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80145b0:	6879      	ldr	r1, [r7, #4]
 80145b2:	2009      	movs	r0, #9
 80145b4:	f000 fe1c 	bl	80151f0 <memp_free>
      break;
 80145b8:	e018      	b.n	80145ec <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	685b      	ldr	r3, [r3, #4]
 80145be:	687a      	ldr	r2, [r7, #4]
 80145c0:	6892      	ldr	r2, [r2, #8]
 80145c2:	4610      	mov	r0, r2
 80145c4:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80145c6:	6879      	ldr	r1, [r7, #4]
 80145c8:	2008      	movs	r0, #8
 80145ca:	f000 fe11 	bl	80151f0 <memp_free>
      break;
 80145ce:	e00d      	b.n	80145ec <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	687a      	ldr	r2, [r7, #4]
 80145d6:	6892      	ldr	r2, [r2, #8]
 80145d8:	4610      	mov	r0, r2
 80145da:	4798      	blx	r3
      break;
 80145dc:	e006      	b.n	80145ec <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80145de:	4b05      	ldr	r3, [pc, #20]	; (80145f4 <tcpip_thread_handle_msg+0x7c>)
 80145e0:	22cf      	movs	r2, #207	; 0xcf
 80145e2:	4905      	ldr	r1, [pc, #20]	; (80145f8 <tcpip_thread_handle_msg+0x80>)
 80145e4:	4805      	ldr	r0, [pc, #20]	; (80145fc <tcpip_thread_handle_msg+0x84>)
 80145e6:	f00c ff9b 	bl	8021520 <iprintf>
      break;
 80145ea:	bf00      	nop
  }
}
 80145ec:	bf00      	nop
 80145ee:	3708      	adds	r7, #8
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}
 80145f4:	080223e8 	.word	0x080223e8
 80145f8:	08022418 	.word	0x08022418
 80145fc:	08022438 	.word	0x08022438

08014600 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b086      	sub	sp, #24
 8014604:	af00      	add	r7, sp, #0
 8014606:	60f8      	str	r0, [r7, #12]
 8014608:	60b9      	str	r1, [r7, #8]
 801460a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801460c:	481a      	ldr	r0, [pc, #104]	; (8014678 <tcpip_inpkt+0x78>)
 801460e:	f00c f8d4 	bl	80207ba <sys_mbox_valid>
 8014612:	4603      	mov	r3, r0
 8014614:	2b00      	cmp	r3, #0
 8014616:	d105      	bne.n	8014624 <tcpip_inpkt+0x24>
 8014618:	4b18      	ldr	r3, [pc, #96]	; (801467c <tcpip_inpkt+0x7c>)
 801461a:	22fc      	movs	r2, #252	; 0xfc
 801461c:	4918      	ldr	r1, [pc, #96]	; (8014680 <tcpip_inpkt+0x80>)
 801461e:	4819      	ldr	r0, [pc, #100]	; (8014684 <tcpip_inpkt+0x84>)
 8014620:	f00c ff7e 	bl	8021520 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8014624:	2009      	movs	r0, #9
 8014626:	f000 fd91 	bl	801514c <memp_malloc>
 801462a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801462c:	697b      	ldr	r3, [r7, #20]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d102      	bne.n	8014638 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8014632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014636:	e01a      	b.n	801466e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8014638:	697b      	ldr	r3, [r7, #20]
 801463a:	2200      	movs	r2, #0
 801463c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801463e:	697b      	ldr	r3, [r7, #20]
 8014640:	68fa      	ldr	r2, [r7, #12]
 8014642:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8014644:	697b      	ldr	r3, [r7, #20]
 8014646:	68ba      	ldr	r2, [r7, #8]
 8014648:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801464a:	697b      	ldr	r3, [r7, #20]
 801464c:	687a      	ldr	r2, [r7, #4]
 801464e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8014650:	6979      	ldr	r1, [r7, #20]
 8014652:	4809      	ldr	r0, [pc, #36]	; (8014678 <tcpip_inpkt+0x78>)
 8014654:	f00c f866 	bl	8020724 <sys_mbox_trypost>
 8014658:	4603      	mov	r3, r0
 801465a:	2b00      	cmp	r3, #0
 801465c:	d006      	beq.n	801466c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801465e:	6979      	ldr	r1, [r7, #20]
 8014660:	2009      	movs	r0, #9
 8014662:	f000 fdc5 	bl	80151f0 <memp_free>
    return ERR_MEM;
 8014666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801466a:	e000      	b.n	801466e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801466c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801466e:	4618      	mov	r0, r3
 8014670:	3718      	adds	r7, #24
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}
 8014676:	bf00      	nop
 8014678:	20008f74 	.word	0x20008f74
 801467c:	080223e8 	.word	0x080223e8
 8014680:	08022460 	.word	0x08022460
 8014684:	08022438 	.word	0x08022438

08014688 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b082      	sub	sp, #8
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
 8014690:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014698:	f003 0318 	and.w	r3, r3, #24
 801469c:	2b00      	cmp	r3, #0
 801469e:	d006      	beq.n	80146ae <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80146a0:	4a08      	ldr	r2, [pc, #32]	; (80146c4 <tcpip_input+0x3c>)
 80146a2:	6839      	ldr	r1, [r7, #0]
 80146a4:	6878      	ldr	r0, [r7, #4]
 80146a6:	f7ff ffab 	bl	8014600 <tcpip_inpkt>
 80146aa:	4603      	mov	r3, r0
 80146ac:	e005      	b.n	80146ba <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80146ae:	4a06      	ldr	r2, [pc, #24]	; (80146c8 <tcpip_input+0x40>)
 80146b0:	6839      	ldr	r1, [r7, #0]
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f7ff ffa4 	bl	8014600 <tcpip_inpkt>
 80146b8:	4603      	mov	r3, r0
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3708      	adds	r7, #8
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}
 80146c2:	bf00      	nop
 80146c4:	08020545 	.word	0x08020545
 80146c8:	0801f429 	.word	0x0801f429

080146cc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b084      	sub	sp, #16
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
 80146d4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80146d6:	4819      	ldr	r0, [pc, #100]	; (801473c <tcpip_try_callback+0x70>)
 80146d8:	f00c f86f 	bl	80207ba <sys_mbox_valid>
 80146dc:	4603      	mov	r3, r0
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d106      	bne.n	80146f0 <tcpip_try_callback+0x24>
 80146e2:	4b17      	ldr	r3, [pc, #92]	; (8014740 <tcpip_try_callback+0x74>)
 80146e4:	f240 125d 	movw	r2, #349	; 0x15d
 80146e8:	4916      	ldr	r1, [pc, #88]	; (8014744 <tcpip_try_callback+0x78>)
 80146ea:	4817      	ldr	r0, [pc, #92]	; (8014748 <tcpip_try_callback+0x7c>)
 80146ec:	f00c ff18 	bl	8021520 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80146f0:	2008      	movs	r0, #8
 80146f2:	f000 fd2b 	bl	801514c <memp_malloc>
 80146f6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d102      	bne.n	8014704 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80146fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014702:	e017      	b.n	8014734 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	2201      	movs	r2, #1
 8014708:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	687a      	ldr	r2, [r7, #4]
 801470e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	683a      	ldr	r2, [r7, #0]
 8014714:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8014716:	68f9      	ldr	r1, [r7, #12]
 8014718:	4808      	ldr	r0, [pc, #32]	; (801473c <tcpip_try_callback+0x70>)
 801471a:	f00c f803 	bl	8020724 <sys_mbox_trypost>
 801471e:	4603      	mov	r3, r0
 8014720:	2b00      	cmp	r3, #0
 8014722:	d006      	beq.n	8014732 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8014724:	68f9      	ldr	r1, [r7, #12]
 8014726:	2008      	movs	r0, #8
 8014728:	f000 fd62 	bl	80151f0 <memp_free>
    return ERR_MEM;
 801472c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014730:	e000      	b.n	8014734 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8014732:	2300      	movs	r3, #0
}
 8014734:	4618      	mov	r0, r3
 8014736:	3710      	adds	r7, #16
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}
 801473c:	20008f74 	.word	0x20008f74
 8014740:	080223e8 	.word	0x080223e8
 8014744:	08022460 	.word	0x08022460
 8014748:	08022438 	.word	0x08022438

0801474c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b084      	sub	sp, #16
 8014750:	af02      	add	r7, sp, #8
 8014752:	6078      	str	r0, [r7, #4]
 8014754:	6039      	str	r1, [r7, #0]
  lwip_init();
 8014756:	f000 f871 	bl	801483c <lwip_init>

  tcpip_init_done = initfunc;
 801475a:	4a17      	ldr	r2, [pc, #92]	; (80147b8 <tcpip_init+0x6c>)
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8014760:	4a16      	ldr	r2, [pc, #88]	; (80147bc <tcpip_init+0x70>)
 8014762:	683b      	ldr	r3, [r7, #0]
 8014764:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8014766:	2106      	movs	r1, #6
 8014768:	4815      	ldr	r0, [pc, #84]	; (80147c0 <tcpip_init+0x74>)
 801476a:	f00b ffc1 	bl	80206f0 <sys_mbox_new>
 801476e:	4603      	mov	r3, r0
 8014770:	2b00      	cmp	r3, #0
 8014772:	d006      	beq.n	8014782 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8014774:	4b13      	ldr	r3, [pc, #76]	; (80147c4 <tcpip_init+0x78>)
 8014776:	f240 2261 	movw	r2, #609	; 0x261
 801477a:	4913      	ldr	r1, [pc, #76]	; (80147c8 <tcpip_init+0x7c>)
 801477c:	4813      	ldr	r0, [pc, #76]	; (80147cc <tcpip_init+0x80>)
 801477e:	f00c fecf 	bl	8021520 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8014782:	4813      	ldr	r0, [pc, #76]	; (80147d0 <tcpip_init+0x84>)
 8014784:	f00c f836 	bl	80207f4 <sys_mutex_new>
 8014788:	4603      	mov	r3, r0
 801478a:	2b00      	cmp	r3, #0
 801478c:	d006      	beq.n	801479c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801478e:	4b0d      	ldr	r3, [pc, #52]	; (80147c4 <tcpip_init+0x78>)
 8014790:	f240 2265 	movw	r2, #613	; 0x265
 8014794:	490f      	ldr	r1, [pc, #60]	; (80147d4 <tcpip_init+0x88>)
 8014796:	480d      	ldr	r0, [pc, #52]	; (80147cc <tcpip_init+0x80>)
 8014798:	f00c fec2 	bl	8021520 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801479c:	2318      	movs	r3, #24
 801479e:	9300      	str	r3, [sp, #0]
 80147a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80147a4:	2200      	movs	r2, #0
 80147a6:	490c      	ldr	r1, [pc, #48]	; (80147d8 <tcpip_init+0x8c>)
 80147a8:	480c      	ldr	r0, [pc, #48]	; (80147dc <tcpip_init+0x90>)
 80147aa:	f00c f855 	bl	8020858 <sys_thread_new>
}
 80147ae:	bf00      	nop
 80147b0:	3708      	adds	r7, #8
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}
 80147b6:	bf00      	nop
 80147b8:	20008f6c 	.word	0x20008f6c
 80147bc:	20008f70 	.word	0x20008f70
 80147c0:	20008f74 	.word	0x20008f74
 80147c4:	080223e8 	.word	0x080223e8
 80147c8:	08022470 	.word	0x08022470
 80147cc:	08022438 	.word	0x08022438
 80147d0:	2000cbfc 	.word	0x2000cbfc
 80147d4:	08022494 	.word	0x08022494
 80147d8:	08014511 	.word	0x08014511
 80147dc:	080224b8 	.word	0x080224b8

080147e0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80147e0:	b480      	push	{r7}
 80147e2:	b083      	sub	sp, #12
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	4603      	mov	r3, r0
 80147e8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80147ea:	88fb      	ldrh	r3, [r7, #6]
 80147ec:	021b      	lsls	r3, r3, #8
 80147ee:	b21a      	sxth	r2, r3
 80147f0:	88fb      	ldrh	r3, [r7, #6]
 80147f2:	0a1b      	lsrs	r3, r3, #8
 80147f4:	b29b      	uxth	r3, r3
 80147f6:	b21b      	sxth	r3, r3
 80147f8:	4313      	orrs	r3, r2
 80147fa:	b21b      	sxth	r3, r3
 80147fc:	b29b      	uxth	r3, r3
}
 80147fe:	4618      	mov	r0, r3
 8014800:	370c      	adds	r7, #12
 8014802:	46bd      	mov	sp, r7
 8014804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014808:	4770      	bx	lr

0801480a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801480a:	b480      	push	{r7}
 801480c:	b083      	sub	sp, #12
 801480e:	af00      	add	r7, sp, #0
 8014810:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	061a      	lsls	r2, r3, #24
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	021b      	lsls	r3, r3, #8
 801481a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801481e:	431a      	orrs	r2, r3
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	0a1b      	lsrs	r3, r3, #8
 8014824:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014828:	431a      	orrs	r2, r3
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	0e1b      	lsrs	r3, r3, #24
 801482e:	4313      	orrs	r3, r2
}
 8014830:	4618      	mov	r0, r3
 8014832:	370c      	adds	r7, #12
 8014834:	46bd      	mov	sp, r7
 8014836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801483a:	4770      	bx	lr

0801483c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801483c:	b580      	push	{r7, lr}
 801483e:	b082      	sub	sp, #8
 8014840:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8014842:	2300      	movs	r3, #0
 8014844:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8014846:	f00b ffc9 	bl	80207dc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801484a:	f000 f8d5 	bl	80149f8 <mem_init>
  memp_init();
 801484e:	f000 fc31 	bl	80150b4 <memp_init>
  pbuf_init();
  netif_init();
 8014852:	f000 fcf7 	bl	8015244 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8014856:	f007 f90f 	bl	801ba78 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801485a:	f001 fe39 	bl	80164d0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801485e:	f007 f853 	bl	801b908 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8014862:	bf00      	nop
 8014864:	3708      	adds	r7, #8
 8014866:	46bd      	mov	sp, r7
 8014868:	bd80      	pop	{r7, pc}
	...

0801486c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801486c:	b480      	push	{r7}
 801486e:	b083      	sub	sp, #12
 8014870:	af00      	add	r7, sp, #0
 8014872:	4603      	mov	r3, r0
 8014874:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8014876:	4b05      	ldr	r3, [pc, #20]	; (801488c <ptr_to_mem+0x20>)
 8014878:	681a      	ldr	r2, [r3, #0]
 801487a:	88fb      	ldrh	r3, [r7, #6]
 801487c:	4413      	add	r3, r2
}
 801487e:	4618      	mov	r0, r3
 8014880:	370c      	adds	r7, #12
 8014882:	46bd      	mov	sp, r7
 8014884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014888:	4770      	bx	lr
 801488a:	bf00      	nop
 801488c:	20008f78 	.word	0x20008f78

08014890 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8014890:	b480      	push	{r7}
 8014892:	b083      	sub	sp, #12
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	4a05      	ldr	r2, [pc, #20]	; (80148b0 <mem_to_ptr+0x20>)
 801489c:	6812      	ldr	r2, [r2, #0]
 801489e:	1a9b      	subs	r3, r3, r2
 80148a0:	b29b      	uxth	r3, r3
}
 80148a2:	4618      	mov	r0, r3
 80148a4:	370c      	adds	r7, #12
 80148a6:	46bd      	mov	sp, r7
 80148a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ac:	4770      	bx	lr
 80148ae:	bf00      	nop
 80148b0:	20008f78 	.word	0x20008f78

080148b4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80148b4:	b590      	push	{r4, r7, lr}
 80148b6:	b085      	sub	sp, #20
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80148bc:	4b45      	ldr	r3, [pc, #276]	; (80149d4 <plug_holes+0x120>)
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	687a      	ldr	r2, [r7, #4]
 80148c2:	429a      	cmp	r2, r3
 80148c4:	d206      	bcs.n	80148d4 <plug_holes+0x20>
 80148c6:	4b44      	ldr	r3, [pc, #272]	; (80149d8 <plug_holes+0x124>)
 80148c8:	f240 12df 	movw	r2, #479	; 0x1df
 80148cc:	4943      	ldr	r1, [pc, #268]	; (80149dc <plug_holes+0x128>)
 80148ce:	4844      	ldr	r0, [pc, #272]	; (80149e0 <plug_holes+0x12c>)
 80148d0:	f00c fe26 	bl	8021520 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80148d4:	4b43      	ldr	r3, [pc, #268]	; (80149e4 <plug_holes+0x130>)
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	687a      	ldr	r2, [r7, #4]
 80148da:	429a      	cmp	r2, r3
 80148dc:	d306      	bcc.n	80148ec <plug_holes+0x38>
 80148de:	4b3e      	ldr	r3, [pc, #248]	; (80149d8 <plug_holes+0x124>)
 80148e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80148e4:	4940      	ldr	r1, [pc, #256]	; (80149e8 <plug_holes+0x134>)
 80148e6:	483e      	ldr	r0, [pc, #248]	; (80149e0 <plug_holes+0x12c>)
 80148e8:	f00c fe1a 	bl	8021520 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	791b      	ldrb	r3, [r3, #4]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d006      	beq.n	8014902 <plug_holes+0x4e>
 80148f4:	4b38      	ldr	r3, [pc, #224]	; (80149d8 <plug_holes+0x124>)
 80148f6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80148fa:	493c      	ldr	r1, [pc, #240]	; (80149ec <plug_holes+0x138>)
 80148fc:	4838      	ldr	r0, [pc, #224]	; (80149e0 <plug_holes+0x12c>)
 80148fe:	f00c fe0f 	bl	8021520 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	881b      	ldrh	r3, [r3, #0]
 8014906:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801490a:	d906      	bls.n	801491a <plug_holes+0x66>
 801490c:	4b32      	ldr	r3, [pc, #200]	; (80149d8 <plug_holes+0x124>)
 801490e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8014912:	4937      	ldr	r1, [pc, #220]	; (80149f0 <plug_holes+0x13c>)
 8014914:	4832      	ldr	r0, [pc, #200]	; (80149e0 <plug_holes+0x12c>)
 8014916:	f00c fe03 	bl	8021520 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	881b      	ldrh	r3, [r3, #0]
 801491e:	4618      	mov	r0, r3
 8014920:	f7ff ffa4 	bl	801486c <ptr_to_mem>
 8014924:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8014926:	687a      	ldr	r2, [r7, #4]
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	429a      	cmp	r2, r3
 801492c:	d024      	beq.n	8014978 <plug_holes+0xc4>
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	791b      	ldrb	r3, [r3, #4]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d120      	bne.n	8014978 <plug_holes+0xc4>
 8014936:	4b2b      	ldr	r3, [pc, #172]	; (80149e4 <plug_holes+0x130>)
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	68fa      	ldr	r2, [r7, #12]
 801493c:	429a      	cmp	r2, r3
 801493e:	d01b      	beq.n	8014978 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8014940:	4b2c      	ldr	r3, [pc, #176]	; (80149f4 <plug_holes+0x140>)
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	68fa      	ldr	r2, [r7, #12]
 8014946:	429a      	cmp	r2, r3
 8014948:	d102      	bne.n	8014950 <plug_holes+0x9c>
      lfree = mem;
 801494a:	4a2a      	ldr	r2, [pc, #168]	; (80149f4 <plug_holes+0x140>)
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	881a      	ldrh	r2, [r3, #0]
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	881b      	ldrh	r3, [r3, #0]
 801495c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014960:	d00a      	beq.n	8014978 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	881b      	ldrh	r3, [r3, #0]
 8014966:	4618      	mov	r0, r3
 8014968:	f7ff ff80 	bl	801486c <ptr_to_mem>
 801496c:	4604      	mov	r4, r0
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f7ff ff8e 	bl	8014890 <mem_to_ptr>
 8014974:	4603      	mov	r3, r0
 8014976:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	885b      	ldrh	r3, [r3, #2]
 801497c:	4618      	mov	r0, r3
 801497e:	f7ff ff75 	bl	801486c <ptr_to_mem>
 8014982:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8014984:	68ba      	ldr	r2, [r7, #8]
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	429a      	cmp	r2, r3
 801498a:	d01f      	beq.n	80149cc <plug_holes+0x118>
 801498c:	68bb      	ldr	r3, [r7, #8]
 801498e:	791b      	ldrb	r3, [r3, #4]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d11b      	bne.n	80149cc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8014994:	4b17      	ldr	r3, [pc, #92]	; (80149f4 <plug_holes+0x140>)
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	687a      	ldr	r2, [r7, #4]
 801499a:	429a      	cmp	r2, r3
 801499c:	d102      	bne.n	80149a4 <plug_holes+0xf0>
      lfree = pmem;
 801499e:	4a15      	ldr	r2, [pc, #84]	; (80149f4 <plug_holes+0x140>)
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	881a      	ldrh	r2, [r3, #0]
 80149a8:	68bb      	ldr	r3, [r7, #8]
 80149aa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	881b      	ldrh	r3, [r3, #0]
 80149b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80149b4:	d00a      	beq.n	80149cc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	881b      	ldrh	r3, [r3, #0]
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7ff ff56 	bl	801486c <ptr_to_mem>
 80149c0:	4604      	mov	r4, r0
 80149c2:	68b8      	ldr	r0, [r7, #8]
 80149c4:	f7ff ff64 	bl	8014890 <mem_to_ptr>
 80149c8:	4603      	mov	r3, r0
 80149ca:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80149cc:	bf00      	nop
 80149ce:	3714      	adds	r7, #20
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bd90      	pop	{r4, r7, pc}
 80149d4:	20008f78 	.word	0x20008f78
 80149d8:	080224c8 	.word	0x080224c8
 80149dc:	080224f8 	.word	0x080224f8
 80149e0:	08022510 	.word	0x08022510
 80149e4:	20008f7c 	.word	0x20008f7c
 80149e8:	08022538 	.word	0x08022538
 80149ec:	08022554 	.word	0x08022554
 80149f0:	08022570 	.word	0x08022570
 80149f4:	20008f84 	.word	0x20008f84

080149f8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b082      	sub	sp, #8
 80149fc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80149fe:	4b1f      	ldr	r3, [pc, #124]	; (8014a7c <mem_init+0x84>)
 8014a00:	3303      	adds	r3, #3
 8014a02:	f023 0303 	bic.w	r3, r3, #3
 8014a06:	461a      	mov	r2, r3
 8014a08:	4b1d      	ldr	r3, [pc, #116]	; (8014a80 <mem_init+0x88>)
 8014a0a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8014a0c:	4b1c      	ldr	r3, [pc, #112]	; (8014a80 <mem_init+0x88>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8014a18:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	2200      	movs	r2, #0
 8014a24:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8014a26:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8014a2a:	f7ff ff1f 	bl	801486c <ptr_to_mem>
 8014a2e:	4602      	mov	r2, r0
 8014a30:	4b14      	ldr	r3, [pc, #80]	; (8014a84 <mem_init+0x8c>)
 8014a32:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8014a34:	4b13      	ldr	r3, [pc, #76]	; (8014a84 <mem_init+0x8c>)
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	2201      	movs	r2, #1
 8014a3a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8014a3c:	4b11      	ldr	r3, [pc, #68]	; (8014a84 <mem_init+0x8c>)
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8014a44:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8014a46:	4b0f      	ldr	r3, [pc, #60]	; (8014a84 <mem_init+0x8c>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8014a4e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8014a50:	4b0b      	ldr	r3, [pc, #44]	; (8014a80 <mem_init+0x88>)
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	4a0c      	ldr	r2, [pc, #48]	; (8014a88 <mem_init+0x90>)
 8014a56:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8014a58:	480c      	ldr	r0, [pc, #48]	; (8014a8c <mem_init+0x94>)
 8014a5a:	f00b fecb 	bl	80207f4 <sys_mutex_new>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d006      	beq.n	8014a72 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8014a64:	4b0a      	ldr	r3, [pc, #40]	; (8014a90 <mem_init+0x98>)
 8014a66:	f240 221f 	movw	r2, #543	; 0x21f
 8014a6a:	490a      	ldr	r1, [pc, #40]	; (8014a94 <mem_init+0x9c>)
 8014a6c:	480a      	ldr	r0, [pc, #40]	; (8014a98 <mem_init+0xa0>)
 8014a6e:	f00c fd57 	bl	8021520 <iprintf>
  }
}
 8014a72:	bf00      	nop
 8014a74:	3708      	adds	r7, #8
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}
 8014a7a:	bf00      	nop
 8014a7c:	2000cc18 	.word	0x2000cc18
 8014a80:	20008f78 	.word	0x20008f78
 8014a84:	20008f7c 	.word	0x20008f7c
 8014a88:	20008f84 	.word	0x20008f84
 8014a8c:	20008f80 	.word	0x20008f80
 8014a90:	080224c8 	.word	0x080224c8
 8014a94:	0802259c 	.word	0x0802259c
 8014a98:	08022510 	.word	0x08022510

08014a9c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b086      	sub	sp, #24
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8014aa4:	6878      	ldr	r0, [r7, #4]
 8014aa6:	f7ff fef3 	bl	8014890 <mem_to_ptr>
 8014aaa:	4603      	mov	r3, r0
 8014aac:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	881b      	ldrh	r3, [r3, #0]
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f7ff feda 	bl	801486c <ptr_to_mem>
 8014ab8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	885b      	ldrh	r3, [r3, #2]
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f7ff fed4 	bl	801486c <ptr_to_mem>
 8014ac4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	881b      	ldrh	r3, [r3, #0]
 8014aca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014ace:	d818      	bhi.n	8014b02 <mem_link_valid+0x66>
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	885b      	ldrh	r3, [r3, #2]
 8014ad4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014ad8:	d813      	bhi.n	8014b02 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014ade:	8afa      	ldrh	r2, [r7, #22]
 8014ae0:	429a      	cmp	r2, r3
 8014ae2:	d004      	beq.n	8014aee <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	881b      	ldrh	r3, [r3, #0]
 8014ae8:	8afa      	ldrh	r2, [r7, #22]
 8014aea:	429a      	cmp	r2, r3
 8014aec:	d109      	bne.n	8014b02 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014aee:	4b08      	ldr	r3, [pc, #32]	; (8014b10 <mem_link_valid+0x74>)
 8014af0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014af2:	693a      	ldr	r2, [r7, #16]
 8014af4:	429a      	cmp	r2, r3
 8014af6:	d006      	beq.n	8014b06 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014af8:	693b      	ldr	r3, [r7, #16]
 8014afa:	885b      	ldrh	r3, [r3, #2]
 8014afc:	8afa      	ldrh	r2, [r7, #22]
 8014afe:	429a      	cmp	r2, r3
 8014b00:	d001      	beq.n	8014b06 <mem_link_valid+0x6a>
    return 0;
 8014b02:	2300      	movs	r3, #0
 8014b04:	e000      	b.n	8014b08 <mem_link_valid+0x6c>
  }
  return 1;
 8014b06:	2301      	movs	r3, #1
}
 8014b08:	4618      	mov	r0, r3
 8014b0a:	3718      	adds	r7, #24
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	bd80      	pop	{r7, pc}
 8014b10:	20008f7c 	.word	0x20008f7c

08014b14 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b088      	sub	sp, #32
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d070      	beq.n	8014c04 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	f003 0303 	and.w	r3, r3, #3
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d00d      	beq.n	8014b48 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8014b2c:	4b37      	ldr	r3, [pc, #220]	; (8014c0c <mem_free+0xf8>)
 8014b2e:	f240 2273 	movw	r2, #627	; 0x273
 8014b32:	4937      	ldr	r1, [pc, #220]	; (8014c10 <mem_free+0xfc>)
 8014b34:	4837      	ldr	r0, [pc, #220]	; (8014c14 <mem_free+0x100>)
 8014b36:	f00c fcf3 	bl	8021520 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014b3a:	f00b fead 	bl	8020898 <sys_arch_protect>
 8014b3e:	60f8      	str	r0, [r7, #12]
 8014b40:	68f8      	ldr	r0, [r7, #12]
 8014b42:	f00b feb7 	bl	80208b4 <sys_arch_unprotect>
    return;
 8014b46:	e05e      	b.n	8014c06 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	3b08      	subs	r3, #8
 8014b4c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8014b4e:	4b32      	ldr	r3, [pc, #200]	; (8014c18 <mem_free+0x104>)
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	69fa      	ldr	r2, [r7, #28]
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d306      	bcc.n	8014b66 <mem_free+0x52>
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	f103 020c 	add.w	r2, r3, #12
 8014b5e:	4b2f      	ldr	r3, [pc, #188]	; (8014c1c <mem_free+0x108>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	429a      	cmp	r2, r3
 8014b64:	d90d      	bls.n	8014b82 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8014b66:	4b29      	ldr	r3, [pc, #164]	; (8014c0c <mem_free+0xf8>)
 8014b68:	f240 227f 	movw	r2, #639	; 0x27f
 8014b6c:	492c      	ldr	r1, [pc, #176]	; (8014c20 <mem_free+0x10c>)
 8014b6e:	4829      	ldr	r0, [pc, #164]	; (8014c14 <mem_free+0x100>)
 8014b70:	f00c fcd6 	bl	8021520 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014b74:	f00b fe90 	bl	8020898 <sys_arch_protect>
 8014b78:	6138      	str	r0, [r7, #16]
 8014b7a:	6938      	ldr	r0, [r7, #16]
 8014b7c:	f00b fe9a 	bl	80208b4 <sys_arch_unprotect>
    return;
 8014b80:	e041      	b.n	8014c06 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8014b82:	4828      	ldr	r0, [pc, #160]	; (8014c24 <mem_free+0x110>)
 8014b84:	f00b fe4c 	bl	8020820 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8014b88:	69fb      	ldr	r3, [r7, #28]
 8014b8a:	791b      	ldrb	r3, [r3, #4]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d110      	bne.n	8014bb2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8014b90:	4b1e      	ldr	r3, [pc, #120]	; (8014c0c <mem_free+0xf8>)
 8014b92:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8014b96:	4924      	ldr	r1, [pc, #144]	; (8014c28 <mem_free+0x114>)
 8014b98:	481e      	ldr	r0, [pc, #120]	; (8014c14 <mem_free+0x100>)
 8014b9a:	f00c fcc1 	bl	8021520 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014b9e:	4821      	ldr	r0, [pc, #132]	; (8014c24 <mem_free+0x110>)
 8014ba0:	f00b fe4d 	bl	802083e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014ba4:	f00b fe78 	bl	8020898 <sys_arch_protect>
 8014ba8:	6178      	str	r0, [r7, #20]
 8014baa:	6978      	ldr	r0, [r7, #20]
 8014bac:	f00b fe82 	bl	80208b4 <sys_arch_unprotect>
    return;
 8014bb0:	e029      	b.n	8014c06 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8014bb2:	69f8      	ldr	r0, [r7, #28]
 8014bb4:	f7ff ff72 	bl	8014a9c <mem_link_valid>
 8014bb8:	4603      	mov	r3, r0
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d110      	bne.n	8014be0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8014bbe:	4b13      	ldr	r3, [pc, #76]	; (8014c0c <mem_free+0xf8>)
 8014bc0:	f240 2295 	movw	r2, #661	; 0x295
 8014bc4:	4919      	ldr	r1, [pc, #100]	; (8014c2c <mem_free+0x118>)
 8014bc6:	4813      	ldr	r0, [pc, #76]	; (8014c14 <mem_free+0x100>)
 8014bc8:	f00c fcaa 	bl	8021520 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014bcc:	4815      	ldr	r0, [pc, #84]	; (8014c24 <mem_free+0x110>)
 8014bce:	f00b fe36 	bl	802083e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014bd2:	f00b fe61 	bl	8020898 <sys_arch_protect>
 8014bd6:	61b8      	str	r0, [r7, #24]
 8014bd8:	69b8      	ldr	r0, [r7, #24]
 8014bda:	f00b fe6b 	bl	80208b4 <sys_arch_unprotect>
    return;
 8014bde:	e012      	b.n	8014c06 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8014be0:	69fb      	ldr	r3, [r7, #28]
 8014be2:	2200      	movs	r2, #0
 8014be4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8014be6:	4b12      	ldr	r3, [pc, #72]	; (8014c30 <mem_free+0x11c>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	69fa      	ldr	r2, [r7, #28]
 8014bec:	429a      	cmp	r2, r3
 8014bee:	d202      	bcs.n	8014bf6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8014bf0:	4a0f      	ldr	r2, [pc, #60]	; (8014c30 <mem_free+0x11c>)
 8014bf2:	69fb      	ldr	r3, [r7, #28]
 8014bf4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8014bf6:	69f8      	ldr	r0, [r7, #28]
 8014bf8:	f7ff fe5c 	bl	80148b4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014bfc:	4809      	ldr	r0, [pc, #36]	; (8014c24 <mem_free+0x110>)
 8014bfe:	f00b fe1e 	bl	802083e <sys_mutex_unlock>
 8014c02:	e000      	b.n	8014c06 <mem_free+0xf2>
    return;
 8014c04:	bf00      	nop
}
 8014c06:	3720      	adds	r7, #32
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	bd80      	pop	{r7, pc}
 8014c0c:	080224c8 	.word	0x080224c8
 8014c10:	080225b8 	.word	0x080225b8
 8014c14:	08022510 	.word	0x08022510
 8014c18:	20008f78 	.word	0x20008f78
 8014c1c:	20008f7c 	.word	0x20008f7c
 8014c20:	080225dc 	.word	0x080225dc
 8014c24:	20008f80 	.word	0x20008f80
 8014c28:	080225f8 	.word	0x080225f8
 8014c2c:	08022620 	.word	0x08022620
 8014c30:	20008f84 	.word	0x20008f84

08014c34 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b088      	sub	sp, #32
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
 8014c3c:	460b      	mov	r3, r1
 8014c3e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8014c40:	887b      	ldrh	r3, [r7, #2]
 8014c42:	3303      	adds	r3, #3
 8014c44:	b29b      	uxth	r3, r3
 8014c46:	f023 0303 	bic.w	r3, r3, #3
 8014c4a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8014c4c:	8bfb      	ldrh	r3, [r7, #30]
 8014c4e:	2b0b      	cmp	r3, #11
 8014c50:	d801      	bhi.n	8014c56 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8014c52:	230c      	movs	r3, #12
 8014c54:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8014c56:	8bfb      	ldrh	r3, [r7, #30]
 8014c58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014c5c:	d803      	bhi.n	8014c66 <mem_trim+0x32>
 8014c5e:	8bfa      	ldrh	r2, [r7, #30]
 8014c60:	887b      	ldrh	r3, [r7, #2]
 8014c62:	429a      	cmp	r2, r3
 8014c64:	d201      	bcs.n	8014c6a <mem_trim+0x36>
    return NULL;
 8014c66:	2300      	movs	r3, #0
 8014c68:	e0d8      	b.n	8014e1c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8014c6a:	4b6e      	ldr	r3, [pc, #440]	; (8014e24 <mem_trim+0x1f0>)
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	687a      	ldr	r2, [r7, #4]
 8014c70:	429a      	cmp	r2, r3
 8014c72:	d304      	bcc.n	8014c7e <mem_trim+0x4a>
 8014c74:	4b6c      	ldr	r3, [pc, #432]	; (8014e28 <mem_trim+0x1f4>)
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	687a      	ldr	r2, [r7, #4]
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d306      	bcc.n	8014c8c <mem_trim+0x58>
 8014c7e:	4b6b      	ldr	r3, [pc, #428]	; (8014e2c <mem_trim+0x1f8>)
 8014c80:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014c84:	496a      	ldr	r1, [pc, #424]	; (8014e30 <mem_trim+0x1fc>)
 8014c86:	486b      	ldr	r0, [pc, #428]	; (8014e34 <mem_trim+0x200>)
 8014c88:	f00c fc4a 	bl	8021520 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8014c8c:	4b65      	ldr	r3, [pc, #404]	; (8014e24 <mem_trim+0x1f0>)
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	687a      	ldr	r2, [r7, #4]
 8014c92:	429a      	cmp	r2, r3
 8014c94:	d304      	bcc.n	8014ca0 <mem_trim+0x6c>
 8014c96:	4b64      	ldr	r3, [pc, #400]	; (8014e28 <mem_trim+0x1f4>)
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	687a      	ldr	r2, [r7, #4]
 8014c9c:	429a      	cmp	r2, r3
 8014c9e:	d307      	bcc.n	8014cb0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014ca0:	f00b fdfa 	bl	8020898 <sys_arch_protect>
 8014ca4:	60b8      	str	r0, [r7, #8]
 8014ca6:	68b8      	ldr	r0, [r7, #8]
 8014ca8:	f00b fe04 	bl	80208b4 <sys_arch_unprotect>
    return rmem;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	e0b5      	b.n	8014e1c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	3b08      	subs	r3, #8
 8014cb4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8014cb6:	69b8      	ldr	r0, [r7, #24]
 8014cb8:	f7ff fdea 	bl	8014890 <mem_to_ptr>
 8014cbc:	4603      	mov	r3, r0
 8014cbe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8014cc0:	69bb      	ldr	r3, [r7, #24]
 8014cc2:	881a      	ldrh	r2, [r3, #0]
 8014cc4:	8afb      	ldrh	r3, [r7, #22]
 8014cc6:	1ad3      	subs	r3, r2, r3
 8014cc8:	b29b      	uxth	r3, r3
 8014cca:	3b08      	subs	r3, #8
 8014ccc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8014cce:	8bfa      	ldrh	r2, [r7, #30]
 8014cd0:	8abb      	ldrh	r3, [r7, #20]
 8014cd2:	429a      	cmp	r2, r3
 8014cd4:	d906      	bls.n	8014ce4 <mem_trim+0xb0>
 8014cd6:	4b55      	ldr	r3, [pc, #340]	; (8014e2c <mem_trim+0x1f8>)
 8014cd8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8014cdc:	4956      	ldr	r1, [pc, #344]	; (8014e38 <mem_trim+0x204>)
 8014cde:	4855      	ldr	r0, [pc, #340]	; (8014e34 <mem_trim+0x200>)
 8014ce0:	f00c fc1e 	bl	8021520 <iprintf>
  if (newsize > size) {
 8014ce4:	8bfa      	ldrh	r2, [r7, #30]
 8014ce6:	8abb      	ldrh	r3, [r7, #20]
 8014ce8:	429a      	cmp	r2, r3
 8014cea:	d901      	bls.n	8014cf0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8014cec:	2300      	movs	r3, #0
 8014cee:	e095      	b.n	8014e1c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8014cf0:	8bfa      	ldrh	r2, [r7, #30]
 8014cf2:	8abb      	ldrh	r3, [r7, #20]
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	d101      	bne.n	8014cfc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	e08f      	b.n	8014e1c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8014cfc:	484f      	ldr	r0, [pc, #316]	; (8014e3c <mem_trim+0x208>)
 8014cfe:	f00b fd8f 	bl	8020820 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8014d02:	69bb      	ldr	r3, [r7, #24]
 8014d04:	881b      	ldrh	r3, [r3, #0]
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7ff fdb0 	bl	801486c <ptr_to_mem>
 8014d0c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8014d0e:	693b      	ldr	r3, [r7, #16]
 8014d10:	791b      	ldrb	r3, [r3, #4]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d13f      	bne.n	8014d96 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014d16:	69bb      	ldr	r3, [r7, #24]
 8014d18:	881b      	ldrh	r3, [r3, #0]
 8014d1a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014d1e:	d106      	bne.n	8014d2e <mem_trim+0xfa>
 8014d20:	4b42      	ldr	r3, [pc, #264]	; (8014e2c <mem_trim+0x1f8>)
 8014d22:	f240 22f5 	movw	r2, #757	; 0x2f5
 8014d26:	4946      	ldr	r1, [pc, #280]	; (8014e40 <mem_trim+0x20c>)
 8014d28:	4842      	ldr	r0, [pc, #264]	; (8014e34 <mem_trim+0x200>)
 8014d2a:	f00c fbf9 	bl	8021520 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8014d2e:	693b      	ldr	r3, [r7, #16]
 8014d30:	881b      	ldrh	r3, [r3, #0]
 8014d32:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014d34:	8afa      	ldrh	r2, [r7, #22]
 8014d36:	8bfb      	ldrh	r3, [r7, #30]
 8014d38:	4413      	add	r3, r2
 8014d3a:	b29b      	uxth	r3, r3
 8014d3c:	3308      	adds	r3, #8
 8014d3e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8014d40:	4b40      	ldr	r3, [pc, #256]	; (8014e44 <mem_trim+0x210>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	693a      	ldr	r2, [r7, #16]
 8014d46:	429a      	cmp	r2, r3
 8014d48:	d106      	bne.n	8014d58 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8014d4a:	89fb      	ldrh	r3, [r7, #14]
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f7ff fd8d 	bl	801486c <ptr_to_mem>
 8014d52:	4602      	mov	r2, r0
 8014d54:	4b3b      	ldr	r3, [pc, #236]	; (8014e44 <mem_trim+0x210>)
 8014d56:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8014d58:	89fb      	ldrh	r3, [r7, #14]
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7ff fd86 	bl	801486c <ptr_to_mem>
 8014d60:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	2200      	movs	r2, #0
 8014d66:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8014d68:	693b      	ldr	r3, [r7, #16]
 8014d6a:	89ba      	ldrh	r2, [r7, #12]
 8014d6c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8014d6e:	693b      	ldr	r3, [r7, #16]
 8014d70:	8afa      	ldrh	r2, [r7, #22]
 8014d72:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8014d74:	69bb      	ldr	r3, [r7, #24]
 8014d76:	89fa      	ldrh	r2, [r7, #14]
 8014d78:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014d7a:	693b      	ldr	r3, [r7, #16]
 8014d7c:	881b      	ldrh	r3, [r3, #0]
 8014d7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014d82:	d047      	beq.n	8014e14 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014d84:	693b      	ldr	r3, [r7, #16]
 8014d86:	881b      	ldrh	r3, [r3, #0]
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f7ff fd6f 	bl	801486c <ptr_to_mem>
 8014d8e:	4602      	mov	r2, r0
 8014d90:	89fb      	ldrh	r3, [r7, #14]
 8014d92:	8053      	strh	r3, [r2, #2]
 8014d94:	e03e      	b.n	8014e14 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8014d96:	8bfb      	ldrh	r3, [r7, #30]
 8014d98:	f103 0214 	add.w	r2, r3, #20
 8014d9c:	8abb      	ldrh	r3, [r7, #20]
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d838      	bhi.n	8014e14 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014da2:	8afa      	ldrh	r2, [r7, #22]
 8014da4:	8bfb      	ldrh	r3, [r7, #30]
 8014da6:	4413      	add	r3, r2
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	3308      	adds	r3, #8
 8014dac:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014dae:	69bb      	ldr	r3, [r7, #24]
 8014db0:	881b      	ldrh	r3, [r3, #0]
 8014db2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014db6:	d106      	bne.n	8014dc6 <mem_trim+0x192>
 8014db8:	4b1c      	ldr	r3, [pc, #112]	; (8014e2c <mem_trim+0x1f8>)
 8014dba:	f240 3216 	movw	r2, #790	; 0x316
 8014dbe:	4920      	ldr	r1, [pc, #128]	; (8014e40 <mem_trim+0x20c>)
 8014dc0:	481c      	ldr	r0, [pc, #112]	; (8014e34 <mem_trim+0x200>)
 8014dc2:	f00c fbad 	bl	8021520 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8014dc6:	89fb      	ldrh	r3, [r7, #14]
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f7ff fd4f 	bl	801486c <ptr_to_mem>
 8014dce:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8014dd0:	4b1c      	ldr	r3, [pc, #112]	; (8014e44 <mem_trim+0x210>)
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	693a      	ldr	r2, [r7, #16]
 8014dd6:	429a      	cmp	r2, r3
 8014dd8:	d202      	bcs.n	8014de0 <mem_trim+0x1ac>
      lfree = mem2;
 8014dda:	4a1a      	ldr	r2, [pc, #104]	; (8014e44 <mem_trim+0x210>)
 8014ddc:	693b      	ldr	r3, [r7, #16]
 8014dde:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8014de0:	693b      	ldr	r3, [r7, #16]
 8014de2:	2200      	movs	r2, #0
 8014de4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8014de6:	69bb      	ldr	r3, [r7, #24]
 8014de8:	881a      	ldrh	r2, [r3, #0]
 8014dea:	693b      	ldr	r3, [r7, #16]
 8014dec:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8014dee:	693b      	ldr	r3, [r7, #16]
 8014df0:	8afa      	ldrh	r2, [r7, #22]
 8014df2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8014df4:	69bb      	ldr	r3, [r7, #24]
 8014df6:	89fa      	ldrh	r2, [r7, #14]
 8014df8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014dfa:	693b      	ldr	r3, [r7, #16]
 8014dfc:	881b      	ldrh	r3, [r3, #0]
 8014dfe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014e02:	d007      	beq.n	8014e14 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014e04:	693b      	ldr	r3, [r7, #16]
 8014e06:	881b      	ldrh	r3, [r3, #0]
 8014e08:	4618      	mov	r0, r3
 8014e0a:	f7ff fd2f 	bl	801486c <ptr_to_mem>
 8014e0e:	4602      	mov	r2, r0
 8014e10:	89fb      	ldrh	r3, [r7, #14]
 8014e12:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014e14:	4809      	ldr	r0, [pc, #36]	; (8014e3c <mem_trim+0x208>)
 8014e16:	f00b fd12 	bl	802083e <sys_mutex_unlock>
  return rmem;
 8014e1a:	687b      	ldr	r3, [r7, #4]
}
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	3720      	adds	r7, #32
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}
 8014e24:	20008f78 	.word	0x20008f78
 8014e28:	20008f7c 	.word	0x20008f7c
 8014e2c:	080224c8 	.word	0x080224c8
 8014e30:	08022654 	.word	0x08022654
 8014e34:	08022510 	.word	0x08022510
 8014e38:	0802266c 	.word	0x0802266c
 8014e3c:	20008f80 	.word	0x20008f80
 8014e40:	0802268c 	.word	0x0802268c
 8014e44:	20008f84 	.word	0x20008f84

08014e48 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b088      	sub	sp, #32
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	4603      	mov	r3, r0
 8014e50:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8014e52:	88fb      	ldrh	r3, [r7, #6]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d101      	bne.n	8014e5c <mem_malloc+0x14>
    return NULL;
 8014e58:	2300      	movs	r3, #0
 8014e5a:	e0e2      	b.n	8015022 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8014e5c:	88fb      	ldrh	r3, [r7, #6]
 8014e5e:	3303      	adds	r3, #3
 8014e60:	b29b      	uxth	r3, r3
 8014e62:	f023 0303 	bic.w	r3, r3, #3
 8014e66:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8014e68:	8bbb      	ldrh	r3, [r7, #28]
 8014e6a:	2b0b      	cmp	r3, #11
 8014e6c:	d801      	bhi.n	8014e72 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8014e6e:	230c      	movs	r3, #12
 8014e70:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8014e72:	8bbb      	ldrh	r3, [r7, #28]
 8014e74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014e78:	d803      	bhi.n	8014e82 <mem_malloc+0x3a>
 8014e7a:	8bba      	ldrh	r2, [r7, #28]
 8014e7c:	88fb      	ldrh	r3, [r7, #6]
 8014e7e:	429a      	cmp	r2, r3
 8014e80:	d201      	bcs.n	8014e86 <mem_malloc+0x3e>
    return NULL;
 8014e82:	2300      	movs	r3, #0
 8014e84:	e0cd      	b.n	8015022 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8014e86:	4869      	ldr	r0, [pc, #420]	; (801502c <mem_malloc+0x1e4>)
 8014e88:	f00b fcca 	bl	8020820 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014e8c:	4b68      	ldr	r3, [pc, #416]	; (8015030 <mem_malloc+0x1e8>)
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7ff fcfd 	bl	8014890 <mem_to_ptr>
 8014e96:	4603      	mov	r3, r0
 8014e98:	83fb      	strh	r3, [r7, #30]
 8014e9a:	e0b7      	b.n	801500c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8014e9c:	8bfb      	ldrh	r3, [r7, #30]
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f7ff fce4 	bl	801486c <ptr_to_mem>
 8014ea4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8014ea6:	697b      	ldr	r3, [r7, #20]
 8014ea8:	791b      	ldrb	r3, [r3, #4]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	f040 80a7 	bne.w	8014ffe <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8014eb0:	697b      	ldr	r3, [r7, #20]
 8014eb2:	881b      	ldrh	r3, [r3, #0]
 8014eb4:	461a      	mov	r2, r3
 8014eb6:	8bfb      	ldrh	r3, [r7, #30]
 8014eb8:	1ad3      	subs	r3, r2, r3
 8014eba:	f1a3 0208 	sub.w	r2, r3, #8
 8014ebe:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8014ec0:	429a      	cmp	r2, r3
 8014ec2:	f0c0 809c 	bcc.w	8014ffe <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8014ec6:	697b      	ldr	r3, [r7, #20]
 8014ec8:	881b      	ldrh	r3, [r3, #0]
 8014eca:	461a      	mov	r2, r3
 8014ecc:	8bfb      	ldrh	r3, [r7, #30]
 8014ece:	1ad3      	subs	r3, r2, r3
 8014ed0:	f1a3 0208 	sub.w	r2, r3, #8
 8014ed4:	8bbb      	ldrh	r3, [r7, #28]
 8014ed6:	3314      	adds	r3, #20
 8014ed8:	429a      	cmp	r2, r3
 8014eda:	d333      	bcc.n	8014f44 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8014edc:	8bfa      	ldrh	r2, [r7, #30]
 8014ede:	8bbb      	ldrh	r3, [r7, #28]
 8014ee0:	4413      	add	r3, r2
 8014ee2:	b29b      	uxth	r3, r3
 8014ee4:	3308      	adds	r3, #8
 8014ee6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8014ee8:	8a7b      	ldrh	r3, [r7, #18]
 8014eea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014eee:	d106      	bne.n	8014efe <mem_malloc+0xb6>
 8014ef0:	4b50      	ldr	r3, [pc, #320]	; (8015034 <mem_malloc+0x1ec>)
 8014ef2:	f240 3287 	movw	r2, #903	; 0x387
 8014ef6:	4950      	ldr	r1, [pc, #320]	; (8015038 <mem_malloc+0x1f0>)
 8014ef8:	4850      	ldr	r0, [pc, #320]	; (801503c <mem_malloc+0x1f4>)
 8014efa:	f00c fb11 	bl	8021520 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8014efe:	8a7b      	ldrh	r3, [r7, #18]
 8014f00:	4618      	mov	r0, r3
 8014f02:	f7ff fcb3 	bl	801486c <ptr_to_mem>
 8014f06:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8014f0e:	697b      	ldr	r3, [r7, #20]
 8014f10:	881a      	ldrh	r2, [r3, #0]
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	8bfa      	ldrh	r2, [r7, #30]
 8014f1a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	8a7a      	ldrh	r2, [r7, #18]
 8014f20:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8014f22:	697b      	ldr	r3, [r7, #20]
 8014f24:	2201      	movs	r2, #1
 8014f26:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	881b      	ldrh	r3, [r3, #0]
 8014f2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014f30:	d00b      	beq.n	8014f4a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	881b      	ldrh	r3, [r3, #0]
 8014f36:	4618      	mov	r0, r3
 8014f38:	f7ff fc98 	bl	801486c <ptr_to_mem>
 8014f3c:	4602      	mov	r2, r0
 8014f3e:	8a7b      	ldrh	r3, [r7, #18]
 8014f40:	8053      	strh	r3, [r2, #2]
 8014f42:	e002      	b.n	8014f4a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014f44:	697b      	ldr	r3, [r7, #20]
 8014f46:	2201      	movs	r2, #1
 8014f48:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8014f4a:	4b39      	ldr	r3, [pc, #228]	; (8015030 <mem_malloc+0x1e8>)
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	697a      	ldr	r2, [r7, #20]
 8014f50:	429a      	cmp	r2, r3
 8014f52:	d127      	bne.n	8014fa4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8014f54:	4b36      	ldr	r3, [pc, #216]	; (8015030 <mem_malloc+0x1e8>)
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8014f5a:	e005      	b.n	8014f68 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8014f5c:	69bb      	ldr	r3, [r7, #24]
 8014f5e:	881b      	ldrh	r3, [r3, #0]
 8014f60:	4618      	mov	r0, r3
 8014f62:	f7ff fc83 	bl	801486c <ptr_to_mem>
 8014f66:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8014f68:	69bb      	ldr	r3, [r7, #24]
 8014f6a:	791b      	ldrb	r3, [r3, #4]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d004      	beq.n	8014f7a <mem_malloc+0x132>
 8014f70:	4b33      	ldr	r3, [pc, #204]	; (8015040 <mem_malloc+0x1f8>)
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	69ba      	ldr	r2, [r7, #24]
 8014f76:	429a      	cmp	r2, r3
 8014f78:	d1f0      	bne.n	8014f5c <mem_malloc+0x114>
          }
          lfree = cur;
 8014f7a:	4a2d      	ldr	r2, [pc, #180]	; (8015030 <mem_malloc+0x1e8>)
 8014f7c:	69bb      	ldr	r3, [r7, #24]
 8014f7e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8014f80:	4b2b      	ldr	r3, [pc, #172]	; (8015030 <mem_malloc+0x1e8>)
 8014f82:	681a      	ldr	r2, [r3, #0]
 8014f84:	4b2e      	ldr	r3, [pc, #184]	; (8015040 <mem_malloc+0x1f8>)
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	429a      	cmp	r2, r3
 8014f8a:	d00b      	beq.n	8014fa4 <mem_malloc+0x15c>
 8014f8c:	4b28      	ldr	r3, [pc, #160]	; (8015030 <mem_malloc+0x1e8>)
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	791b      	ldrb	r3, [r3, #4]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d006      	beq.n	8014fa4 <mem_malloc+0x15c>
 8014f96:	4b27      	ldr	r3, [pc, #156]	; (8015034 <mem_malloc+0x1ec>)
 8014f98:	f240 32b5 	movw	r2, #949	; 0x3b5
 8014f9c:	4929      	ldr	r1, [pc, #164]	; (8015044 <mem_malloc+0x1fc>)
 8014f9e:	4827      	ldr	r0, [pc, #156]	; (801503c <mem_malloc+0x1f4>)
 8014fa0:	f00c fabe 	bl	8021520 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8014fa4:	4821      	ldr	r0, [pc, #132]	; (801502c <mem_malloc+0x1e4>)
 8014fa6:	f00b fc4a 	bl	802083e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8014faa:	8bba      	ldrh	r2, [r7, #28]
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	4413      	add	r3, r2
 8014fb0:	3308      	adds	r3, #8
 8014fb2:	4a23      	ldr	r2, [pc, #140]	; (8015040 <mem_malloc+0x1f8>)
 8014fb4:	6812      	ldr	r2, [r2, #0]
 8014fb6:	4293      	cmp	r3, r2
 8014fb8:	d906      	bls.n	8014fc8 <mem_malloc+0x180>
 8014fba:	4b1e      	ldr	r3, [pc, #120]	; (8015034 <mem_malloc+0x1ec>)
 8014fbc:	f240 32ba 	movw	r2, #954	; 0x3ba
 8014fc0:	4921      	ldr	r1, [pc, #132]	; (8015048 <mem_malloc+0x200>)
 8014fc2:	481e      	ldr	r0, [pc, #120]	; (801503c <mem_malloc+0x1f4>)
 8014fc4:	f00c faac 	bl	8021520 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8014fc8:	697b      	ldr	r3, [r7, #20]
 8014fca:	f003 0303 	and.w	r3, r3, #3
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d006      	beq.n	8014fe0 <mem_malloc+0x198>
 8014fd2:	4b18      	ldr	r3, [pc, #96]	; (8015034 <mem_malloc+0x1ec>)
 8014fd4:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8014fd8:	491c      	ldr	r1, [pc, #112]	; (801504c <mem_malloc+0x204>)
 8014fda:	4818      	ldr	r0, [pc, #96]	; (801503c <mem_malloc+0x1f4>)
 8014fdc:	f00c faa0 	bl	8021520 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	f003 0303 	and.w	r3, r3, #3
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d006      	beq.n	8014ff8 <mem_malloc+0x1b0>
 8014fea:	4b12      	ldr	r3, [pc, #72]	; (8015034 <mem_malloc+0x1ec>)
 8014fec:	f240 32be 	movw	r2, #958	; 0x3be
 8014ff0:	4917      	ldr	r1, [pc, #92]	; (8015050 <mem_malloc+0x208>)
 8014ff2:	4812      	ldr	r0, [pc, #72]	; (801503c <mem_malloc+0x1f4>)
 8014ff4:	f00c fa94 	bl	8021520 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8014ff8:	697b      	ldr	r3, [r7, #20]
 8014ffa:	3308      	adds	r3, #8
 8014ffc:	e011      	b.n	8015022 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8014ffe:	8bfb      	ldrh	r3, [r7, #30]
 8015000:	4618      	mov	r0, r3
 8015002:	f7ff fc33 	bl	801486c <ptr_to_mem>
 8015006:	4603      	mov	r3, r0
 8015008:	881b      	ldrh	r3, [r3, #0]
 801500a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801500c:	8bfa      	ldrh	r2, [r7, #30]
 801500e:	8bbb      	ldrh	r3, [r7, #28]
 8015010:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8015014:	429a      	cmp	r2, r3
 8015016:	f4ff af41 	bcc.w	8014e9c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801501a:	4804      	ldr	r0, [pc, #16]	; (801502c <mem_malloc+0x1e4>)
 801501c:	f00b fc0f 	bl	802083e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8015020:	2300      	movs	r3, #0
}
 8015022:	4618      	mov	r0, r3
 8015024:	3720      	adds	r7, #32
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}
 801502a:	bf00      	nop
 801502c:	20008f80 	.word	0x20008f80
 8015030:	20008f84 	.word	0x20008f84
 8015034:	080224c8 	.word	0x080224c8
 8015038:	0802268c 	.word	0x0802268c
 801503c:	08022510 	.word	0x08022510
 8015040:	20008f7c 	.word	0x20008f7c
 8015044:	080226a0 	.word	0x080226a0
 8015048:	080226bc 	.word	0x080226bc
 801504c:	080226ec 	.word	0x080226ec
 8015050:	0802271c 	.word	0x0802271c

08015054 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8015054:	b480      	push	{r7}
 8015056:	b085      	sub	sp, #20
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	689b      	ldr	r3, [r3, #8]
 8015060:	2200      	movs	r2, #0
 8015062:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	685b      	ldr	r3, [r3, #4]
 8015068:	3303      	adds	r3, #3
 801506a:	f023 0303 	bic.w	r3, r3, #3
 801506e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8015070:	2300      	movs	r3, #0
 8015072:	60fb      	str	r3, [r7, #12]
 8015074:	e011      	b.n	801509a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	689b      	ldr	r3, [r3, #8]
 801507a:	681a      	ldr	r2, [r3, #0]
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	689b      	ldr	r3, [r3, #8]
 8015084:	68ba      	ldr	r2, [r7, #8]
 8015086:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	881b      	ldrh	r3, [r3, #0]
 801508c:	461a      	mov	r2, r3
 801508e:	68bb      	ldr	r3, [r7, #8]
 8015090:	4413      	add	r3, r2
 8015092:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	3301      	adds	r3, #1
 8015098:	60fb      	str	r3, [r7, #12]
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	885b      	ldrh	r3, [r3, #2]
 801509e:	461a      	mov	r2, r3
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	4293      	cmp	r3, r2
 80150a4:	dbe7      	blt.n	8015076 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80150a6:	bf00      	nop
 80150a8:	3714      	adds	r7, #20
 80150aa:	46bd      	mov	sp, r7
 80150ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b0:	4770      	bx	lr
	...

080150b4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b082      	sub	sp, #8
 80150b8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80150ba:	2300      	movs	r3, #0
 80150bc:	80fb      	strh	r3, [r7, #6]
 80150be:	e009      	b.n	80150d4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80150c0:	88fb      	ldrh	r3, [r7, #6]
 80150c2:	4a08      	ldr	r2, [pc, #32]	; (80150e4 <memp_init+0x30>)
 80150c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80150c8:	4618      	mov	r0, r3
 80150ca:	f7ff ffc3 	bl	8015054 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80150ce:	88fb      	ldrh	r3, [r7, #6]
 80150d0:	3301      	adds	r3, #1
 80150d2:	80fb      	strh	r3, [r7, #6]
 80150d4:	88fb      	ldrh	r3, [r7, #6]
 80150d6:	2b0c      	cmp	r3, #12
 80150d8:	d9f2      	bls.n	80150c0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80150da:	bf00      	nop
 80150dc:	3708      	adds	r7, #8
 80150de:	46bd      	mov	sp, r7
 80150e0:	bd80      	pop	{r7, pc}
 80150e2:	bf00      	nop
 80150e4:	08025314 	.word	0x08025314

080150e8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b084      	sub	sp, #16
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80150f0:	f00b fbd2 	bl	8020898 <sys_arch_protect>
 80150f4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	689b      	ldr	r3, [r3, #8]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d015      	beq.n	8015130 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	689b      	ldr	r3, [r3, #8]
 8015108:	68ba      	ldr	r2, [r7, #8]
 801510a:	6812      	ldr	r2, [r2, #0]
 801510c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801510e:	68bb      	ldr	r3, [r7, #8]
 8015110:	f003 0303 	and.w	r3, r3, #3
 8015114:	2b00      	cmp	r3, #0
 8015116:	d006      	beq.n	8015126 <do_memp_malloc_pool+0x3e>
 8015118:	4b09      	ldr	r3, [pc, #36]	; (8015140 <do_memp_malloc_pool+0x58>)
 801511a:	f240 1219 	movw	r2, #281	; 0x119
 801511e:	4909      	ldr	r1, [pc, #36]	; (8015144 <do_memp_malloc_pool+0x5c>)
 8015120:	4809      	ldr	r0, [pc, #36]	; (8015148 <do_memp_malloc_pool+0x60>)
 8015122:	f00c f9fd 	bl	8021520 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8015126:	68f8      	ldr	r0, [r7, #12]
 8015128:	f00b fbc4 	bl	80208b4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801512c:	68bb      	ldr	r3, [r7, #8]
 801512e:	e003      	b.n	8015138 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8015130:	68f8      	ldr	r0, [r7, #12]
 8015132:	f00b fbbf 	bl	80208b4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8015136:	2300      	movs	r3, #0
}
 8015138:	4618      	mov	r0, r3
 801513a:	3710      	adds	r7, #16
 801513c:	46bd      	mov	sp, r7
 801513e:	bd80      	pop	{r7, pc}
 8015140:	08022740 	.word	0x08022740
 8015144:	08022770 	.word	0x08022770
 8015148:	08022794 	.word	0x08022794

0801514c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b084      	sub	sp, #16
 8015150:	af00      	add	r7, sp, #0
 8015152:	4603      	mov	r3, r0
 8015154:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8015156:	79fb      	ldrb	r3, [r7, #7]
 8015158:	2b0c      	cmp	r3, #12
 801515a:	d908      	bls.n	801516e <memp_malloc+0x22>
 801515c:	4b0a      	ldr	r3, [pc, #40]	; (8015188 <memp_malloc+0x3c>)
 801515e:	f240 1257 	movw	r2, #343	; 0x157
 8015162:	490a      	ldr	r1, [pc, #40]	; (801518c <memp_malloc+0x40>)
 8015164:	480a      	ldr	r0, [pc, #40]	; (8015190 <memp_malloc+0x44>)
 8015166:	f00c f9db 	bl	8021520 <iprintf>
 801516a:	2300      	movs	r3, #0
 801516c:	e008      	b.n	8015180 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801516e:	79fb      	ldrb	r3, [r7, #7]
 8015170:	4a08      	ldr	r2, [pc, #32]	; (8015194 <memp_malloc+0x48>)
 8015172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015176:	4618      	mov	r0, r3
 8015178:	f7ff ffb6 	bl	80150e8 <do_memp_malloc_pool>
 801517c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801517e:	68fb      	ldr	r3, [r7, #12]
}
 8015180:	4618      	mov	r0, r3
 8015182:	3710      	adds	r7, #16
 8015184:	46bd      	mov	sp, r7
 8015186:	bd80      	pop	{r7, pc}
 8015188:	08022740 	.word	0x08022740
 801518c:	080227d0 	.word	0x080227d0
 8015190:	08022794 	.word	0x08022794
 8015194:	08025314 	.word	0x08025314

08015198 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b084      	sub	sp, #16
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
 80151a0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80151a2:	683b      	ldr	r3, [r7, #0]
 80151a4:	f003 0303 	and.w	r3, r3, #3
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d006      	beq.n	80151ba <do_memp_free_pool+0x22>
 80151ac:	4b0d      	ldr	r3, [pc, #52]	; (80151e4 <do_memp_free_pool+0x4c>)
 80151ae:	f240 126d 	movw	r2, #365	; 0x16d
 80151b2:	490d      	ldr	r1, [pc, #52]	; (80151e8 <do_memp_free_pool+0x50>)
 80151b4:	480d      	ldr	r0, [pc, #52]	; (80151ec <do_memp_free_pool+0x54>)
 80151b6:	f00c f9b3 	bl	8021520 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80151ba:	683b      	ldr	r3, [r7, #0]
 80151bc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80151be:	f00b fb6b 	bl	8020898 <sys_arch_protect>
 80151c2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	689b      	ldr	r3, [r3, #8]
 80151c8:	681a      	ldr	r2, [r3, #0]
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	689b      	ldr	r3, [r3, #8]
 80151d2:	68fa      	ldr	r2, [r7, #12]
 80151d4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80151d6:	68b8      	ldr	r0, [r7, #8]
 80151d8:	f00b fb6c 	bl	80208b4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80151dc:	bf00      	nop
 80151de:	3710      	adds	r7, #16
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}
 80151e4:	08022740 	.word	0x08022740
 80151e8:	080227f0 	.word	0x080227f0
 80151ec:	08022794 	.word	0x08022794

080151f0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b082      	sub	sp, #8
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	4603      	mov	r3, r0
 80151f8:	6039      	str	r1, [r7, #0]
 80151fa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80151fc:	79fb      	ldrb	r3, [r7, #7]
 80151fe:	2b0c      	cmp	r3, #12
 8015200:	d907      	bls.n	8015212 <memp_free+0x22>
 8015202:	4b0c      	ldr	r3, [pc, #48]	; (8015234 <memp_free+0x44>)
 8015204:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8015208:	490b      	ldr	r1, [pc, #44]	; (8015238 <memp_free+0x48>)
 801520a:	480c      	ldr	r0, [pc, #48]	; (801523c <memp_free+0x4c>)
 801520c:	f00c f988 	bl	8021520 <iprintf>
 8015210:	e00c      	b.n	801522c <memp_free+0x3c>

  if (mem == NULL) {
 8015212:	683b      	ldr	r3, [r7, #0]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d008      	beq.n	801522a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8015218:	79fb      	ldrb	r3, [r7, #7]
 801521a:	4a09      	ldr	r2, [pc, #36]	; (8015240 <memp_free+0x50>)
 801521c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015220:	6839      	ldr	r1, [r7, #0]
 8015222:	4618      	mov	r0, r3
 8015224:	f7ff ffb8 	bl	8015198 <do_memp_free_pool>
 8015228:	e000      	b.n	801522c <memp_free+0x3c>
    return;
 801522a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801522c:	3708      	adds	r7, #8
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}
 8015232:	bf00      	nop
 8015234:	08022740 	.word	0x08022740
 8015238:	08022810 	.word	0x08022810
 801523c:	08022794 	.word	0x08022794
 8015240:	08025314 	.word	0x08025314

08015244 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015244:	b480      	push	{r7}
 8015246:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015248:	bf00      	nop
 801524a:	46bd      	mov	sp, r7
 801524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015250:	4770      	bx	lr
	...

08015254 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b086      	sub	sp, #24
 8015258:	af00      	add	r7, sp, #0
 801525a:	60f8      	str	r0, [r7, #12]
 801525c:	60b9      	str	r1, [r7, #8]
 801525e:	607a      	str	r2, [r7, #4]
 8015260:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d108      	bne.n	801527a <netif_add+0x26>
 8015268:	4b5c      	ldr	r3, [pc, #368]	; (80153dc <netif_add+0x188>)
 801526a:	f240 1227 	movw	r2, #295	; 0x127
 801526e:	495c      	ldr	r1, [pc, #368]	; (80153e0 <netif_add+0x18c>)
 8015270:	485c      	ldr	r0, [pc, #368]	; (80153e4 <netif_add+0x190>)
 8015272:	f00c f955 	bl	8021520 <iprintf>
 8015276:	2300      	movs	r3, #0
 8015278:	e0ac      	b.n	80153d4 <netif_add+0x180>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801527c:	2b00      	cmp	r3, #0
 801527e:	d108      	bne.n	8015292 <netif_add+0x3e>
 8015280:	4b56      	ldr	r3, [pc, #344]	; (80153dc <netif_add+0x188>)
 8015282:	f44f 7294 	mov.w	r2, #296	; 0x128
 8015286:	4958      	ldr	r1, [pc, #352]	; (80153e8 <netif_add+0x194>)
 8015288:	4856      	ldr	r0, [pc, #344]	; (80153e4 <netif_add+0x190>)
 801528a:	f00c f949 	bl	8021520 <iprintf>
 801528e:	2300      	movs	r3, #0
 8015290:	e0a0      	b.n	80153d4 <netif_add+0x180>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8015292:	68bb      	ldr	r3, [r7, #8]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d101      	bne.n	801529c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8015298:	4b54      	ldr	r3, [pc, #336]	; (80153ec <netif_add+0x198>)
 801529a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d101      	bne.n	80152a6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80152a2:	4b52      	ldr	r3, [pc, #328]	; (80153ec <netif_add+0x198>)
 80152a4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80152a6:	683b      	ldr	r3, [r7, #0]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d101      	bne.n	80152b0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80152ac:	4b4f      	ldr	r3, [pc, #316]	; (80153ec <netif_add+0x198>)
 80152ae:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	2200      	movs	r2, #0
 80152b4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	2200      	movs	r2, #0
 80152ba:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	2200      	movs	r2, #0
 80152c0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	4a4a      	ldr	r2, [pc, #296]	; (80153f0 <netif_add+0x19c>)
 80152c6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	2200      	movs	r2, #0
 80152cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  netif->flags = 0;
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	2200      	movs	r2, #0
 80152d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	3328      	adds	r3, #40	; 0x28
 80152da:	2204      	movs	r2, #4
 80152dc:	2100      	movs	r1, #0
 80152de:	4618      	mov	r0, r3
 80152e0:	f00c f86e 	bl	80213c0 <memset>
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	2200      	movs	r2, #0
 80152e8:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	2200      	movs	r2, #0
 80152ee:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	6a3a      	ldr	r2, [r7, #32]
 80152f4:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 80152f6:	4b3f      	ldr	r3, [pc, #252]	; (80153f4 <netif_add+0x1a0>)
 80152f8:	781a      	ldrb	r2, [r3, #0]
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  netif->input = input;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015304:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8015306:	683b      	ldr	r3, [r7, #0]
 8015308:	687a      	ldr	r2, [r7, #4]
 801530a:	68b9      	ldr	r1, [r7, #8]
 801530c:	68f8      	ldr	r0, [r7, #12]
 801530e:	f000 f91b 	bl	8015548 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8015312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015314:	68f8      	ldr	r0, [r7, #12]
 8015316:	4798      	blx	r3
 8015318:	4603      	mov	r3, r0
 801531a:	2b00      	cmp	r3, #0
 801531c:	d001      	beq.n	8015322 <netif_add+0xce>
    return NULL;
 801531e:	2300      	movs	r3, #0
 8015320:	e058      	b.n	80153d4 <netif_add+0x180>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015328:	2bff      	cmp	r3, #255	; 0xff
 801532a:	d103      	bne.n	8015334 <netif_add+0xe0>
        netif->num = 0;
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	2200      	movs	r2, #0
 8015330:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      }
      num_netifs = 0;
 8015334:	2300      	movs	r3, #0
 8015336:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015338:	4b2f      	ldr	r3, [pc, #188]	; (80153f8 <netif_add+0x1a4>)
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	617b      	str	r3, [r7, #20]
 801533e:	e02b      	b.n	8015398 <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8015340:	697a      	ldr	r2, [r7, #20]
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	429a      	cmp	r2, r3
 8015346:	d106      	bne.n	8015356 <netif_add+0x102>
 8015348:	4b24      	ldr	r3, [pc, #144]	; (80153dc <netif_add+0x188>)
 801534a:	f240 128b 	movw	r2, #395	; 0x18b
 801534e:	492b      	ldr	r1, [pc, #172]	; (80153fc <netif_add+0x1a8>)
 8015350:	4824      	ldr	r0, [pc, #144]	; (80153e4 <netif_add+0x190>)
 8015352:	f00c f8e5 	bl	8021520 <iprintf>
        num_netifs++;
 8015356:	693b      	ldr	r3, [r7, #16]
 8015358:	3301      	adds	r3, #1
 801535a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801535c:	693b      	ldr	r3, [r7, #16]
 801535e:	2bff      	cmp	r3, #255	; 0xff
 8015360:	dd06      	ble.n	8015370 <netif_add+0x11c>
 8015362:	4b1e      	ldr	r3, [pc, #120]	; (80153dc <netif_add+0x188>)
 8015364:	f240 128d 	movw	r2, #397	; 0x18d
 8015368:	4925      	ldr	r1, [pc, #148]	; (8015400 <netif_add+0x1ac>)
 801536a:	481e      	ldr	r0, [pc, #120]	; (80153e4 <netif_add+0x190>)
 801536c:	f00c f8d8 	bl	8021520 <iprintf>
        if (netif2->num == netif->num) {
 8015370:	697b      	ldr	r3, [r7, #20]
 8015372:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801537c:	429a      	cmp	r2, r3
 801537e:	d108      	bne.n	8015392 <netif_add+0x13e>
          netif->num++;
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015386:	3301      	adds	r3, #1
 8015388:	b2da      	uxtb	r2, r3
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          break;
 8015390:	e005      	b.n	801539e <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015392:	697b      	ldr	r3, [r7, #20]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	617b      	str	r3, [r7, #20]
 8015398:	697b      	ldr	r3, [r7, #20]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d1d0      	bne.n	8015340 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 801539e:	697b      	ldr	r3, [r7, #20]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d1be      	bne.n	8015322 <netif_add+0xce>
  }
  if (netif->num == 254) {
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80153aa:	2bfe      	cmp	r3, #254	; 0xfe
 80153ac:	d103      	bne.n	80153b6 <netif_add+0x162>
    netif_num = 0;
 80153ae:	4b11      	ldr	r3, [pc, #68]	; (80153f4 <netif_add+0x1a0>)
 80153b0:	2200      	movs	r2, #0
 80153b2:	701a      	strb	r2, [r3, #0]
 80153b4:	e006      	b.n	80153c4 <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80153bc:	3301      	adds	r3, #1
 80153be:	b2da      	uxtb	r2, r3
 80153c0:	4b0c      	ldr	r3, [pc, #48]	; (80153f4 <netif_add+0x1a0>)
 80153c2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80153c4:	4b0c      	ldr	r3, [pc, #48]	; (80153f8 <netif_add+0x1a4>)
 80153c6:	681a      	ldr	r2, [r3, #0]
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80153cc:	4a0a      	ldr	r2, [pc, #40]	; (80153f8 <netif_add+0x1a4>)
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80153d2:	68fb      	ldr	r3, [r7, #12]
}
 80153d4:	4618      	mov	r0, r3
 80153d6:	3718      	adds	r7, #24
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}
 80153dc:	0802282c 	.word	0x0802282c
 80153e0:	080228c0 	.word	0x080228c0
 80153e4:	0802287c 	.word	0x0802287c
 80153e8:	080228dc 	.word	0x080228dc
 80153ec:	08025398 	.word	0x08025398
 80153f0:	0801584b 	.word	0x0801584b
 80153f4:	20008fbc 	.word	0x20008fbc
 80153f8:	20010324 	.word	0x20010324
 80153fc:	08022900 	.word	0x08022900
 8015400:	08022914 	.word	0x08022914

08015404 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b082      	sub	sp, #8
 8015408:	af00      	add	r7, sp, #0
 801540a:	6078      	str	r0, [r7, #4]
 801540c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801540e:	6839      	ldr	r1, [r7, #0]
 8015410:	6878      	ldr	r0, [r7, #4]
 8015412:	f002 fb99 	bl	8017b48 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8015416:	6839      	ldr	r1, [r7, #0]
 8015418:	6878      	ldr	r0, [r7, #4]
 801541a:	f006 ffb9 	bl	801c390 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801541e:	bf00      	nop
 8015420:	3708      	adds	r7, #8
 8015422:	46bd      	mov	sp, r7
 8015424:	bd80      	pop	{r7, pc}
	...

08015428 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b086      	sub	sp, #24
 801542c:	af00      	add	r7, sp, #0
 801542e:	60f8      	str	r0, [r7, #12]
 8015430:	60b9      	str	r1, [r7, #8]
 8015432:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8015434:	68bb      	ldr	r3, [r7, #8]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d106      	bne.n	8015448 <netif_do_set_ipaddr+0x20>
 801543a:	4b21      	ldr	r3, [pc, #132]	; (80154c0 <netif_do_set_ipaddr+0x98>)
 801543c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8015440:	4920      	ldr	r1, [pc, #128]	; (80154c4 <netif_do_set_ipaddr+0x9c>)
 8015442:	4821      	ldr	r0, [pc, #132]	; (80154c8 <netif_do_set_ipaddr+0xa0>)
 8015444:	f00c f86c 	bl	8021520 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d106      	bne.n	801545c <netif_do_set_ipaddr+0x34>
 801544e:	4b1c      	ldr	r3, [pc, #112]	; (80154c0 <netif_do_set_ipaddr+0x98>)
 8015450:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8015454:	491b      	ldr	r1, [pc, #108]	; (80154c4 <netif_do_set_ipaddr+0x9c>)
 8015456:	481c      	ldr	r0, [pc, #112]	; (80154c8 <netif_do_set_ipaddr+0xa0>)
 8015458:	f00c f862 	bl	8021520 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	681a      	ldr	r2, [r3, #0]
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	3304      	adds	r3, #4
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	429a      	cmp	r2, r3
 8015468:	d024      	beq.n	80154b4 <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801546a:	68bb      	ldr	r3, [r7, #8]
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	3304      	adds	r3, #4
 8015474:	681a      	ldr	r2, [r3, #0]
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801547a:	f107 0314 	add.w	r3, r7, #20
 801547e:	4619      	mov	r1, r3
 8015480:	6878      	ldr	r0, [r7, #4]
 8015482:	f7ff ffbf 	bl	8015404 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8015486:	68bb      	ldr	r3, [r7, #8]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d002      	beq.n	8015492 <netif_do_set_ipaddr+0x6a>
 801548c:	68bb      	ldr	r3, [r7, #8]
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	e000      	b.n	8015494 <netif_do_set_ipaddr+0x6c>
 8015492:	2300      	movs	r3, #0
 8015494:	68fa      	ldr	r2, [r7, #12]
 8015496:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8015498:	2101      	movs	r1, #1
 801549a:	68f8      	ldr	r0, [r7, #12]
 801549c:	f000 f8e2 	bl	8015664 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	69db      	ldr	r3, [r3, #28]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d003      	beq.n	80154b0 <netif_do_set_ipaddr+0x88>
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	69db      	ldr	r3, [r3, #28]
 80154ac:	68f8      	ldr	r0, [r7, #12]
 80154ae:	4798      	blx	r3
    return 1; /* address changed */
 80154b0:	2301      	movs	r3, #1
 80154b2:	e000      	b.n	80154b6 <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 80154b4:	2300      	movs	r3, #0
}
 80154b6:	4618      	mov	r0, r3
 80154b8:	3718      	adds	r7, #24
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bd80      	pop	{r7, pc}
 80154be:	bf00      	nop
 80154c0:	0802282c 	.word	0x0802282c
 80154c4:	08022944 	.word	0x08022944
 80154c8:	0802287c 	.word	0x0802287c

080154cc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80154cc:	b480      	push	{r7}
 80154ce:	b085      	sub	sp, #20
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	60f8      	str	r0, [r7, #12]
 80154d4:	60b9      	str	r1, [r7, #8]
 80154d6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	681a      	ldr	r2, [r3, #0]
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	3308      	adds	r3, #8
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	429a      	cmp	r2, r3
 80154e4:	d00a      	beq.n	80154fc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80154e6:	68bb      	ldr	r3, [r7, #8]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d002      	beq.n	80154f2 <netif_do_set_netmask+0x26>
 80154ec:	68bb      	ldr	r3, [r7, #8]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	e000      	b.n	80154f4 <netif_do_set_netmask+0x28>
 80154f2:	2300      	movs	r3, #0
 80154f4:	68fa      	ldr	r2, [r7, #12]
 80154f6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80154f8:	2301      	movs	r3, #1
 80154fa:	e000      	b.n	80154fe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80154fc:	2300      	movs	r3, #0
}
 80154fe:	4618      	mov	r0, r3
 8015500:	3714      	adds	r7, #20
 8015502:	46bd      	mov	sp, r7
 8015504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015508:	4770      	bx	lr

0801550a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801550a:	b480      	push	{r7}
 801550c:	b085      	sub	sp, #20
 801550e:	af00      	add	r7, sp, #0
 8015510:	60f8      	str	r0, [r7, #12]
 8015512:	60b9      	str	r1, [r7, #8]
 8015514:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8015516:	68bb      	ldr	r3, [r7, #8]
 8015518:	681a      	ldr	r2, [r3, #0]
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	330c      	adds	r3, #12
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	429a      	cmp	r2, r3
 8015522:	d00a      	beq.n	801553a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8015524:	68bb      	ldr	r3, [r7, #8]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d002      	beq.n	8015530 <netif_do_set_gw+0x26>
 801552a:	68bb      	ldr	r3, [r7, #8]
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	e000      	b.n	8015532 <netif_do_set_gw+0x28>
 8015530:	2300      	movs	r3, #0
 8015532:	68fa      	ldr	r2, [r7, #12]
 8015534:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8015536:	2301      	movs	r3, #1
 8015538:	e000      	b.n	801553c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801553a:	2300      	movs	r3, #0
}
 801553c:	4618      	mov	r0, r3
 801553e:	3714      	adds	r7, #20
 8015540:	46bd      	mov	sp, r7
 8015542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015546:	4770      	bx	lr

08015548 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b088      	sub	sp, #32
 801554c:	af00      	add	r7, sp, #0
 801554e:	60f8      	str	r0, [r7, #12]
 8015550:	60b9      	str	r1, [r7, #8]
 8015552:	607a      	str	r2, [r7, #4]
 8015554:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8015556:	2300      	movs	r3, #0
 8015558:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801555a:	2300      	movs	r3, #0
 801555c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801555e:	68bb      	ldr	r3, [r7, #8]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d101      	bne.n	8015568 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8015564:	4b1c      	ldr	r3, [pc, #112]	; (80155d8 <netif_set_addr+0x90>)
 8015566:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d101      	bne.n	8015572 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801556e:	4b1a      	ldr	r3, [pc, #104]	; (80155d8 <netif_set_addr+0x90>)
 8015570:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d101      	bne.n	801557c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8015578:	4b17      	ldr	r3, [pc, #92]	; (80155d8 <netif_set_addr+0x90>)
 801557a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801557c:	68bb      	ldr	r3, [r7, #8]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d003      	beq.n	801558a <netif_set_addr+0x42>
 8015582:	68bb      	ldr	r3, [r7, #8]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d101      	bne.n	801558e <netif_set_addr+0x46>
 801558a:	2301      	movs	r3, #1
 801558c:	e000      	b.n	8015590 <netif_set_addr+0x48>
 801558e:	2300      	movs	r3, #0
 8015590:	617b      	str	r3, [r7, #20]
  if (remove) {
 8015592:	697b      	ldr	r3, [r7, #20]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d006      	beq.n	80155a6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015598:	f107 0310 	add.w	r3, r7, #16
 801559c:	461a      	mov	r2, r3
 801559e:	68b9      	ldr	r1, [r7, #8]
 80155a0:	68f8      	ldr	r0, [r7, #12]
 80155a2:	f7ff ff41 	bl	8015428 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80155a6:	69fa      	ldr	r2, [r7, #28]
 80155a8:	6879      	ldr	r1, [r7, #4]
 80155aa:	68f8      	ldr	r0, [r7, #12]
 80155ac:	f7ff ff8e 	bl	80154cc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80155b0:	69ba      	ldr	r2, [r7, #24]
 80155b2:	6839      	ldr	r1, [r7, #0]
 80155b4:	68f8      	ldr	r0, [r7, #12]
 80155b6:	f7ff ffa8 	bl	801550a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80155ba:	697b      	ldr	r3, [r7, #20]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d106      	bne.n	80155ce <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80155c0:	f107 0310 	add.w	r3, r7, #16
 80155c4:	461a      	mov	r2, r3
 80155c6:	68b9      	ldr	r1, [r7, #8]
 80155c8:	68f8      	ldr	r0, [r7, #12]
 80155ca:	f7ff ff2d 	bl	8015428 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80155ce:	bf00      	nop
 80155d0:	3720      	adds	r7, #32
 80155d2:	46bd      	mov	sp, r7
 80155d4:	bd80      	pop	{r7, pc}
 80155d6:	bf00      	nop
 80155d8:	08025398 	.word	0x08025398

080155dc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80155dc:	b480      	push	{r7}
 80155de:	b083      	sub	sp, #12
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80155e4:	4a04      	ldr	r2, [pc, #16]	; (80155f8 <netif_set_default+0x1c>)
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80155ea:	bf00      	nop
 80155ec:	370c      	adds	r7, #12
 80155ee:	46bd      	mov	sp, r7
 80155f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f4:	4770      	bx	lr
 80155f6:	bf00      	nop
 80155f8:	20010328 	.word	0x20010328

080155fc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b082      	sub	sp, #8
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d107      	bne.n	801561a <netif_set_up+0x1e>
 801560a:	4b13      	ldr	r3, [pc, #76]	; (8015658 <netif_set_up+0x5c>)
 801560c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8015610:	4912      	ldr	r1, [pc, #72]	; (801565c <netif_set_up+0x60>)
 8015612:	4813      	ldr	r0, [pc, #76]	; (8015660 <netif_set_up+0x64>)
 8015614:	f00b ff84 	bl	8021520 <iprintf>
 8015618:	e01b      	b.n	8015652 <netif_set_up+0x56>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015620:	f003 0301 	and.w	r3, r3, #1
 8015624:	2b00      	cmp	r3, #0
 8015626:	d114      	bne.n	8015652 <netif_set_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801562e:	f043 0301 	orr.w	r3, r3, #1
 8015632:	b2da      	uxtb	r2, r3
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	69db      	ldr	r3, [r3, #28]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d003      	beq.n	801564a <netif_set_up+0x4e>
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	69db      	ldr	r3, [r3, #28]
 8015646:	6878      	ldr	r0, [r7, #4]
 8015648:	4798      	blx	r3
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801564a:	2103      	movs	r1, #3
 801564c:	6878      	ldr	r0, [r7, #4]
 801564e:	f000 f809 	bl	8015664 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8015652:	3708      	adds	r7, #8
 8015654:	46bd      	mov	sp, r7
 8015656:	bd80      	pop	{r7, pc}
 8015658:	0802282c 	.word	0x0802282c
 801565c:	080229b4 	.word	0x080229b4
 8015660:	0802287c 	.word	0x0802287c

08015664 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b082      	sub	sp, #8
 8015668:	af00      	add	r7, sp, #0
 801566a:	6078      	str	r0, [r7, #4]
 801566c:	460b      	mov	r3, r1
 801566e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d106      	bne.n	8015684 <netif_issue_reports+0x20>
 8015676:	4b18      	ldr	r3, [pc, #96]	; (80156d8 <netif_issue_reports+0x74>)
 8015678:	f240 326d 	movw	r2, #877	; 0x36d
 801567c:	4917      	ldr	r1, [pc, #92]	; (80156dc <netif_issue_reports+0x78>)
 801567e:	4818      	ldr	r0, [pc, #96]	; (80156e0 <netif_issue_reports+0x7c>)
 8015680:	f00b ff4e 	bl	8021520 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801568a:	f003 0304 	and.w	r3, r3, #4
 801568e:	2b00      	cmp	r3, #0
 8015690:	d01e      	beq.n	80156d0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015698:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801569c:	2b00      	cmp	r3, #0
 801569e:	d017      	beq.n	80156d0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80156a0:	78fb      	ldrb	r3, [r7, #3]
 80156a2:	f003 0301 	and.w	r3, r3, #1
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d013      	beq.n	80156d2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	3304      	adds	r3, #4
 80156ae:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d00e      	beq.n	80156d2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80156ba:	f003 0308 	and.w	r3, r3, #8
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d007      	beq.n	80156d2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	3304      	adds	r3, #4
 80156c6:	4619      	mov	r1, r3
 80156c8:	6878      	ldr	r0, [r7, #4]
 80156ca:	f009 fc73 	bl	801efb4 <etharp_request>
 80156ce:	e000      	b.n	80156d2 <netif_issue_reports+0x6e>
    return;
 80156d0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80156d2:	3708      	adds	r7, #8
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}
 80156d8:	0802282c 	.word	0x0802282c
 80156dc:	080229d0 	.word	0x080229d0
 80156e0:	0802287c 	.word	0x0802287c

080156e4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b082      	sub	sp, #8
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d107      	bne.n	8015702 <netif_set_down+0x1e>
 80156f2:	4b16      	ldr	r3, [pc, #88]	; (801574c <netif_set_down+0x68>)
 80156f4:	f240 329b 	movw	r2, #923	; 0x39b
 80156f8:	4915      	ldr	r1, [pc, #84]	; (8015750 <netif_set_down+0x6c>)
 80156fa:	4816      	ldr	r0, [pc, #88]	; (8015754 <netif_set_down+0x70>)
 80156fc:	f00b ff10 	bl	8021520 <iprintf>
 8015700:	e021      	b.n	8015746 <netif_set_down+0x62>

  if (netif->flags & NETIF_FLAG_UP) {
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015708:	f003 0301 	and.w	r3, r3, #1
 801570c:	2b00      	cmp	r3, #0
 801570e:	d01a      	beq.n	8015746 <netif_set_down+0x62>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015716:	f023 0301 	bic.w	r3, r3, #1
 801571a:	b2da      	uxtb	r2, r3
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015728:	f003 0308 	and.w	r3, r3, #8
 801572c:	2b00      	cmp	r3, #0
 801572e:	d002      	beq.n	8015736 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8015730:	6878      	ldr	r0, [r7, #4]
 8015732:	f008 fff9 	bl	801e728 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	69db      	ldr	r3, [r3, #28]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d003      	beq.n	8015746 <netif_set_down+0x62>
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	69db      	ldr	r3, [r3, #28]
 8015742:	6878      	ldr	r0, [r7, #4]
 8015744:	4798      	blx	r3
  }
}
 8015746:	3708      	adds	r7, #8
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}
 801574c:	0802282c 	.word	0x0802282c
 8015750:	080229f4 	.word	0x080229f4
 8015754:	0802287c 	.word	0x0802287c

08015758 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b082      	sub	sp, #8
 801575c:	af00      	add	r7, sp, #0
 801575e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d107      	bne.n	8015776 <netif_set_link_up+0x1e>
 8015766:	4b15      	ldr	r3, [pc, #84]	; (80157bc <netif_set_link_up+0x64>)
 8015768:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801576c:	4914      	ldr	r1, [pc, #80]	; (80157c0 <netif_set_link_up+0x68>)
 801576e:	4815      	ldr	r0, [pc, #84]	; (80157c4 <netif_set_link_up+0x6c>)
 8015770:	f00b fed6 	bl	8021520 <iprintf>
 8015774:	e01e      	b.n	80157b4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801577c:	f003 0304 	and.w	r3, r3, #4
 8015780:	2b00      	cmp	r3, #0
 8015782:	d117      	bne.n	80157b4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801578a:	f043 0304 	orr.w	r3, r3, #4
 801578e:	b2da      	uxtb	r2, r3
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8015796:	6878      	ldr	r0, [r7, #4]
 8015798:	f007 fa26 	bl	801cbe8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801579c:	2103      	movs	r1, #3
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f7ff ff60 	bl	8015664 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	6a1b      	ldr	r3, [r3, #32]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d003      	beq.n	80157b4 <netif_set_link_up+0x5c>
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	6a1b      	ldr	r3, [r3, #32]
 80157b0:	6878      	ldr	r0, [r7, #4]
 80157b2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80157b4:	3708      	adds	r7, #8
 80157b6:	46bd      	mov	sp, r7
 80157b8:	bd80      	pop	{r7, pc}
 80157ba:	bf00      	nop
 80157bc:	0802282c 	.word	0x0802282c
 80157c0:	08022a14 	.word	0x08022a14
 80157c4:	0802287c 	.word	0x0802287c

080157c8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b082      	sub	sp, #8
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d107      	bne.n	80157e6 <netif_set_link_down+0x1e>
 80157d6:	4b11      	ldr	r3, [pc, #68]	; (801581c <netif_set_link_down+0x54>)
 80157d8:	f240 4206 	movw	r2, #1030	; 0x406
 80157dc:	4910      	ldr	r1, [pc, #64]	; (8015820 <netif_set_link_down+0x58>)
 80157de:	4811      	ldr	r0, [pc, #68]	; (8015824 <netif_set_link_down+0x5c>)
 80157e0:	f00b fe9e 	bl	8021520 <iprintf>
 80157e4:	e017      	b.n	8015816 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80157ec:	f003 0304 	and.w	r3, r3, #4
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d010      	beq.n	8015816 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80157fa:	f023 0304 	bic.w	r3, r3, #4
 80157fe:	b2da      	uxtb	r2, r3
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	6a1b      	ldr	r3, [r3, #32]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d003      	beq.n	8015816 <netif_set_link_down+0x4e>
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	6a1b      	ldr	r3, [r3, #32]
 8015812:	6878      	ldr	r0, [r7, #4]
 8015814:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8015816:	3708      	adds	r7, #8
 8015818:	46bd      	mov	sp, r7
 801581a:	bd80      	pop	{r7, pc}
 801581c:	0802282c 	.word	0x0802282c
 8015820:	08022a38 	.word	0x08022a38
 8015824:	0802287c 	.word	0x0802287c

08015828 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8015828:	b480      	push	{r7}
 801582a:	b083      	sub	sp, #12
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
 8015830:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d002      	beq.n	801583e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	683a      	ldr	r2, [r7, #0]
 801583c:	621a      	str	r2, [r3, #32]
  }
}
 801583e:	bf00      	nop
 8015840:	370c      	adds	r7, #12
 8015842:	46bd      	mov	sp, r7
 8015844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015848:	4770      	bx	lr

0801584a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801584a:	b480      	push	{r7}
 801584c:	b085      	sub	sp, #20
 801584e:	af00      	add	r7, sp, #0
 8015850:	60f8      	str	r0, [r7, #12]
 8015852:	60b9      	str	r1, [r7, #8]
 8015854:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8015856:	f06f 030b 	mvn.w	r3, #11
}
 801585a:	4618      	mov	r0, r3
 801585c:	3714      	adds	r7, #20
 801585e:	46bd      	mov	sp, r7
 8015860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015864:	4770      	bx	lr
	...

08015868 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8015868:	b480      	push	{r7}
 801586a:	b085      	sub	sp, #20
 801586c:	af00      	add	r7, sp, #0
 801586e:	4603      	mov	r3, r0
 8015870:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8015872:	79fb      	ldrb	r3, [r7, #7]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d013      	beq.n	80158a0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8015878:	4b0d      	ldr	r3, [pc, #52]	; (80158b0 <netif_get_by_index+0x48>)
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	60fb      	str	r3, [r7, #12]
 801587e:	e00c      	b.n	801589a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015886:	3301      	adds	r3, #1
 8015888:	b2db      	uxtb	r3, r3
 801588a:	79fa      	ldrb	r2, [r7, #7]
 801588c:	429a      	cmp	r2, r3
 801588e:	d101      	bne.n	8015894 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	e006      	b.n	80158a2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	60fb      	str	r3, [r7, #12]
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d1ef      	bne.n	8015880 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80158a0:	2300      	movs	r3, #0
}
 80158a2:	4618      	mov	r0, r3
 80158a4:	3714      	adds	r7, #20
 80158a6:	46bd      	mov	sp, r7
 80158a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ac:	4770      	bx	lr
 80158ae:	bf00      	nop
 80158b0:	20010324 	.word	0x20010324

080158b4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b082      	sub	sp, #8
 80158b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80158ba:	f00a ffed 	bl	8020898 <sys_arch_protect>
 80158be:	6038      	str	r0, [r7, #0]
 80158c0:	4b0d      	ldr	r3, [pc, #52]	; (80158f8 <pbuf_free_ooseq+0x44>)
 80158c2:	2200      	movs	r2, #0
 80158c4:	701a      	strb	r2, [r3, #0]
 80158c6:	6838      	ldr	r0, [r7, #0]
 80158c8:	f00a fff4 	bl	80208b4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80158cc:	4b0b      	ldr	r3, [pc, #44]	; (80158fc <pbuf_free_ooseq+0x48>)
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	607b      	str	r3, [r7, #4]
 80158d2:	e00a      	b.n	80158ea <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d003      	beq.n	80158e4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80158dc:	6878      	ldr	r0, [r7, #4]
 80158de:	f002 f971 	bl	8017bc4 <tcp_free_ooseq>
      return;
 80158e2:	e005      	b.n	80158f0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	68db      	ldr	r3, [r3, #12]
 80158e8:	607b      	str	r3, [r7, #4]
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d1f1      	bne.n	80158d4 <pbuf_free_ooseq+0x20>
    }
  }
}
 80158f0:	3708      	adds	r7, #8
 80158f2:	46bd      	mov	sp, r7
 80158f4:	bd80      	pop	{r7, pc}
 80158f6:	bf00      	nop
 80158f8:	2001032c 	.word	0x2001032c
 80158fc:	20010334 	.word	0x20010334

08015900 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b082      	sub	sp, #8
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8015908:	f7ff ffd4 	bl	80158b4 <pbuf_free_ooseq>
}
 801590c:	bf00      	nop
 801590e:	3708      	adds	r7, #8
 8015910:	46bd      	mov	sp, r7
 8015912:	bd80      	pop	{r7, pc}

08015914 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b082      	sub	sp, #8
 8015918:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801591a:	f00a ffbd 	bl	8020898 <sys_arch_protect>
 801591e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8015920:	4b0f      	ldr	r3, [pc, #60]	; (8015960 <pbuf_pool_is_empty+0x4c>)
 8015922:	781b      	ldrb	r3, [r3, #0]
 8015924:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8015926:	4b0e      	ldr	r3, [pc, #56]	; (8015960 <pbuf_pool_is_empty+0x4c>)
 8015928:	2201      	movs	r2, #1
 801592a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f00a ffc1 	bl	80208b4 <sys_arch_unprotect>

  if (!queued) {
 8015932:	78fb      	ldrb	r3, [r7, #3]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d10f      	bne.n	8015958 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8015938:	2100      	movs	r1, #0
 801593a:	480a      	ldr	r0, [pc, #40]	; (8015964 <pbuf_pool_is_empty+0x50>)
 801593c:	f7fe fec6 	bl	80146cc <tcpip_try_callback>
 8015940:	4603      	mov	r3, r0
 8015942:	2b00      	cmp	r3, #0
 8015944:	d008      	beq.n	8015958 <pbuf_pool_is_empty+0x44>
 8015946:	f00a ffa7 	bl	8020898 <sys_arch_protect>
 801594a:	6078      	str	r0, [r7, #4]
 801594c:	4b04      	ldr	r3, [pc, #16]	; (8015960 <pbuf_pool_is_empty+0x4c>)
 801594e:	2200      	movs	r2, #0
 8015950:	701a      	strb	r2, [r3, #0]
 8015952:	6878      	ldr	r0, [r7, #4]
 8015954:	f00a ffae 	bl	80208b4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8015958:	bf00      	nop
 801595a:	3708      	adds	r7, #8
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}
 8015960:	2001032c 	.word	0x2001032c
 8015964:	08015901 	.word	0x08015901

08015968 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8015968:	b480      	push	{r7}
 801596a:	b085      	sub	sp, #20
 801596c:	af00      	add	r7, sp, #0
 801596e:	60f8      	str	r0, [r7, #12]
 8015970:	60b9      	str	r1, [r7, #8]
 8015972:	4611      	mov	r1, r2
 8015974:	461a      	mov	r2, r3
 8015976:	460b      	mov	r3, r1
 8015978:	80fb      	strh	r3, [r7, #6]
 801597a:	4613      	mov	r3, r2
 801597c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	2200      	movs	r2, #0
 8015982:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	68ba      	ldr	r2, [r7, #8]
 8015988:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	88fa      	ldrh	r2, [r7, #6]
 801598e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	88ba      	ldrh	r2, [r7, #4]
 8015994:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8015996:	8b3b      	ldrh	r3, [r7, #24]
 8015998:	b2da      	uxtb	r2, r3
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	7f3a      	ldrb	r2, [r7, #28]
 80159a2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	2201      	movs	r2, #1
 80159a8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	2200      	movs	r2, #0
 80159ae:	73da      	strb	r2, [r3, #15]
}
 80159b0:	bf00      	nop
 80159b2:	3714      	adds	r7, #20
 80159b4:	46bd      	mov	sp, r7
 80159b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ba:	4770      	bx	lr

080159bc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b08c      	sub	sp, #48	; 0x30
 80159c0:	af02      	add	r7, sp, #8
 80159c2:	4603      	mov	r3, r0
 80159c4:	71fb      	strb	r3, [r7, #7]
 80159c6:	460b      	mov	r3, r1
 80159c8:	80bb      	strh	r3, [r7, #4]
 80159ca:	4613      	mov	r3, r2
 80159cc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80159ce:	79fb      	ldrb	r3, [r7, #7]
 80159d0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80159d2:	887b      	ldrh	r3, [r7, #2]
 80159d4:	2b41      	cmp	r3, #65	; 0x41
 80159d6:	d00b      	beq.n	80159f0 <pbuf_alloc+0x34>
 80159d8:	2b41      	cmp	r3, #65	; 0x41
 80159da:	dc02      	bgt.n	80159e2 <pbuf_alloc+0x26>
 80159dc:	2b01      	cmp	r3, #1
 80159de:	d007      	beq.n	80159f0 <pbuf_alloc+0x34>
 80159e0:	e0c2      	b.n	8015b68 <pbuf_alloc+0x1ac>
 80159e2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80159e6:	d00b      	beq.n	8015a00 <pbuf_alloc+0x44>
 80159e8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80159ec:	d070      	beq.n	8015ad0 <pbuf_alloc+0x114>
 80159ee:	e0bb      	b.n	8015b68 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80159f0:	887a      	ldrh	r2, [r7, #2]
 80159f2:	88bb      	ldrh	r3, [r7, #4]
 80159f4:	4619      	mov	r1, r3
 80159f6:	2000      	movs	r0, #0
 80159f8:	f000 f8d2 	bl	8015ba0 <pbuf_alloc_reference>
 80159fc:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80159fe:	e0bd      	b.n	8015b7c <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8015a00:	2300      	movs	r3, #0
 8015a02:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8015a04:	2300      	movs	r3, #0
 8015a06:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8015a08:	88bb      	ldrh	r3, [r7, #4]
 8015a0a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8015a0c:	200c      	movs	r0, #12
 8015a0e:	f7ff fb9d 	bl	801514c <memp_malloc>
 8015a12:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8015a14:	693b      	ldr	r3, [r7, #16]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d109      	bne.n	8015a2e <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8015a1a:	f7ff ff7b 	bl	8015914 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8015a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d002      	beq.n	8015a2a <pbuf_alloc+0x6e>
            pbuf_free(p);
 8015a24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a26:	f000 faa9 	bl	8015f7c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	e0a7      	b.n	8015b7e <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8015a2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a30:	3303      	adds	r3, #3
 8015a32:	b29b      	uxth	r3, r3
 8015a34:	f023 0303 	bic.w	r3, r3, #3
 8015a38:	b29b      	uxth	r3, r3
 8015a3a:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8015a3e:	b29b      	uxth	r3, r3
 8015a40:	8b7a      	ldrh	r2, [r7, #26]
 8015a42:	4293      	cmp	r3, r2
 8015a44:	bf28      	it	cs
 8015a46:	4613      	movcs	r3, r2
 8015a48:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8015a4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a4c:	3310      	adds	r3, #16
 8015a4e:	693a      	ldr	r2, [r7, #16]
 8015a50:	4413      	add	r3, r2
 8015a52:	3303      	adds	r3, #3
 8015a54:	f023 0303 	bic.w	r3, r3, #3
 8015a58:	4618      	mov	r0, r3
 8015a5a:	89f9      	ldrh	r1, [r7, #14]
 8015a5c:	8b7a      	ldrh	r2, [r7, #26]
 8015a5e:	2300      	movs	r3, #0
 8015a60:	9301      	str	r3, [sp, #4]
 8015a62:	887b      	ldrh	r3, [r7, #2]
 8015a64:	9300      	str	r3, [sp, #0]
 8015a66:	460b      	mov	r3, r1
 8015a68:	4601      	mov	r1, r0
 8015a6a:	6938      	ldr	r0, [r7, #16]
 8015a6c:	f7ff ff7c 	bl	8015968 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8015a70:	693b      	ldr	r3, [r7, #16]
 8015a72:	685b      	ldr	r3, [r3, #4]
 8015a74:	f003 0303 	and.w	r3, r3, #3
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d006      	beq.n	8015a8a <pbuf_alloc+0xce>
 8015a7c:	4b42      	ldr	r3, [pc, #264]	; (8015b88 <pbuf_alloc+0x1cc>)
 8015a7e:	f240 1201 	movw	r2, #257	; 0x101
 8015a82:	4942      	ldr	r1, [pc, #264]	; (8015b8c <pbuf_alloc+0x1d0>)
 8015a84:	4842      	ldr	r0, [pc, #264]	; (8015b90 <pbuf_alloc+0x1d4>)
 8015a86:	f00b fd4b 	bl	8021520 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8015a8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a8c:	3303      	adds	r3, #3
 8015a8e:	f023 0303 	bic.w	r3, r3, #3
 8015a92:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8015a96:	d106      	bne.n	8015aa6 <pbuf_alloc+0xea>
 8015a98:	4b3b      	ldr	r3, [pc, #236]	; (8015b88 <pbuf_alloc+0x1cc>)
 8015a9a:	f240 1203 	movw	r2, #259	; 0x103
 8015a9e:	493d      	ldr	r1, [pc, #244]	; (8015b94 <pbuf_alloc+0x1d8>)
 8015aa0:	483b      	ldr	r0, [pc, #236]	; (8015b90 <pbuf_alloc+0x1d4>)
 8015aa2:	f00b fd3d 	bl	8021520 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8015aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d102      	bne.n	8015ab2 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8015aac:	693b      	ldr	r3, [r7, #16]
 8015aae:	627b      	str	r3, [r7, #36]	; 0x24
 8015ab0:	e002      	b.n	8015ab8 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8015ab2:	69fb      	ldr	r3, [r7, #28]
 8015ab4:	693a      	ldr	r2, [r7, #16]
 8015ab6:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8015ab8:	693b      	ldr	r3, [r7, #16]
 8015aba:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8015abc:	8b7a      	ldrh	r2, [r7, #26]
 8015abe:	89fb      	ldrh	r3, [r7, #14]
 8015ac0:	1ad3      	subs	r3, r2, r3
 8015ac2:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8015ac8:	8b7b      	ldrh	r3, [r7, #26]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d19e      	bne.n	8015a0c <pbuf_alloc+0x50>
      break;
 8015ace:	e055      	b.n	8015b7c <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8015ad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015ad2:	3303      	adds	r3, #3
 8015ad4:	b29b      	uxth	r3, r3
 8015ad6:	f023 0303 	bic.w	r3, r3, #3
 8015ada:	b29a      	uxth	r2, r3
 8015adc:	88bb      	ldrh	r3, [r7, #4]
 8015ade:	3303      	adds	r3, #3
 8015ae0:	b29b      	uxth	r3, r3
 8015ae2:	f023 0303 	bic.w	r3, r3, #3
 8015ae6:	b29b      	uxth	r3, r3
 8015ae8:	4413      	add	r3, r2
 8015aea:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8015aec:	8b3b      	ldrh	r3, [r7, #24]
 8015aee:	3310      	adds	r3, #16
 8015af0:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015af2:	8b3a      	ldrh	r2, [r7, #24]
 8015af4:	88bb      	ldrh	r3, [r7, #4]
 8015af6:	3303      	adds	r3, #3
 8015af8:	f023 0303 	bic.w	r3, r3, #3
 8015afc:	429a      	cmp	r2, r3
 8015afe:	d306      	bcc.n	8015b0e <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8015b00:	8afa      	ldrh	r2, [r7, #22]
 8015b02:	88bb      	ldrh	r3, [r7, #4]
 8015b04:	3303      	adds	r3, #3
 8015b06:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015b0a:	429a      	cmp	r2, r3
 8015b0c:	d201      	bcs.n	8015b12 <pbuf_alloc+0x156>
        return NULL;
 8015b0e:	2300      	movs	r3, #0
 8015b10:	e035      	b.n	8015b7e <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8015b12:	8afb      	ldrh	r3, [r7, #22]
 8015b14:	4618      	mov	r0, r3
 8015b16:	f7ff f997 	bl	8014e48 <mem_malloc>
 8015b1a:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8015b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d101      	bne.n	8015b26 <pbuf_alloc+0x16a>
        return NULL;
 8015b22:	2300      	movs	r3, #0
 8015b24:	e02b      	b.n	8015b7e <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8015b26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b28:	3310      	adds	r3, #16
 8015b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b2c:	4413      	add	r3, r2
 8015b2e:	3303      	adds	r3, #3
 8015b30:	f023 0303 	bic.w	r3, r3, #3
 8015b34:	4618      	mov	r0, r3
 8015b36:	88b9      	ldrh	r1, [r7, #4]
 8015b38:	88ba      	ldrh	r2, [r7, #4]
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	9301      	str	r3, [sp, #4]
 8015b3e:	887b      	ldrh	r3, [r7, #2]
 8015b40:	9300      	str	r3, [sp, #0]
 8015b42:	460b      	mov	r3, r1
 8015b44:	4601      	mov	r1, r0
 8015b46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b48:	f7ff ff0e 	bl	8015968 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8015b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b4e:	685b      	ldr	r3, [r3, #4]
 8015b50:	f003 0303 	and.w	r3, r3, #3
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d010      	beq.n	8015b7a <pbuf_alloc+0x1be>
 8015b58:	4b0b      	ldr	r3, [pc, #44]	; (8015b88 <pbuf_alloc+0x1cc>)
 8015b5a:	f240 1223 	movw	r2, #291	; 0x123
 8015b5e:	490e      	ldr	r1, [pc, #56]	; (8015b98 <pbuf_alloc+0x1dc>)
 8015b60:	480b      	ldr	r0, [pc, #44]	; (8015b90 <pbuf_alloc+0x1d4>)
 8015b62:	f00b fcdd 	bl	8021520 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8015b66:	e008      	b.n	8015b7a <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8015b68:	4b07      	ldr	r3, [pc, #28]	; (8015b88 <pbuf_alloc+0x1cc>)
 8015b6a:	f240 1227 	movw	r2, #295	; 0x127
 8015b6e:	490b      	ldr	r1, [pc, #44]	; (8015b9c <pbuf_alloc+0x1e0>)
 8015b70:	4807      	ldr	r0, [pc, #28]	; (8015b90 <pbuf_alloc+0x1d4>)
 8015b72:	f00b fcd5 	bl	8021520 <iprintf>
      return NULL;
 8015b76:	2300      	movs	r3, #0
 8015b78:	e001      	b.n	8015b7e <pbuf_alloc+0x1c2>
      break;
 8015b7a:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8015b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015b7e:	4618      	mov	r0, r3
 8015b80:	3728      	adds	r7, #40	; 0x28
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}
 8015b86:	bf00      	nop
 8015b88:	08022a5c 	.word	0x08022a5c
 8015b8c:	08022a8c 	.word	0x08022a8c
 8015b90:	08022abc 	.word	0x08022abc
 8015b94:	08022ae4 	.word	0x08022ae4
 8015b98:	08022b18 	.word	0x08022b18
 8015b9c:	08022b44 	.word	0x08022b44

08015ba0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b086      	sub	sp, #24
 8015ba4:	af02      	add	r7, sp, #8
 8015ba6:	6078      	str	r0, [r7, #4]
 8015ba8:	460b      	mov	r3, r1
 8015baa:	807b      	strh	r3, [r7, #2]
 8015bac:	4613      	mov	r3, r2
 8015bae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8015bb0:	883b      	ldrh	r3, [r7, #0]
 8015bb2:	2b41      	cmp	r3, #65	; 0x41
 8015bb4:	d009      	beq.n	8015bca <pbuf_alloc_reference+0x2a>
 8015bb6:	883b      	ldrh	r3, [r7, #0]
 8015bb8:	2b01      	cmp	r3, #1
 8015bba:	d006      	beq.n	8015bca <pbuf_alloc_reference+0x2a>
 8015bbc:	4b0f      	ldr	r3, [pc, #60]	; (8015bfc <pbuf_alloc_reference+0x5c>)
 8015bbe:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8015bc2:	490f      	ldr	r1, [pc, #60]	; (8015c00 <pbuf_alloc_reference+0x60>)
 8015bc4:	480f      	ldr	r0, [pc, #60]	; (8015c04 <pbuf_alloc_reference+0x64>)
 8015bc6:	f00b fcab 	bl	8021520 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8015bca:	200b      	movs	r0, #11
 8015bcc:	f7ff fabe 	bl	801514c <memp_malloc>
 8015bd0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d101      	bne.n	8015bdc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8015bd8:	2300      	movs	r3, #0
 8015bda:	e00b      	b.n	8015bf4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8015bdc:	8879      	ldrh	r1, [r7, #2]
 8015bde:	887a      	ldrh	r2, [r7, #2]
 8015be0:	2300      	movs	r3, #0
 8015be2:	9301      	str	r3, [sp, #4]
 8015be4:	883b      	ldrh	r3, [r7, #0]
 8015be6:	9300      	str	r3, [sp, #0]
 8015be8:	460b      	mov	r3, r1
 8015bea:	6879      	ldr	r1, [r7, #4]
 8015bec:	68f8      	ldr	r0, [r7, #12]
 8015bee:	f7ff febb 	bl	8015968 <pbuf_init_alloced_pbuf>
  return p;
 8015bf2:	68fb      	ldr	r3, [r7, #12]
}
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	3710      	adds	r7, #16
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	bd80      	pop	{r7, pc}
 8015bfc:	08022a5c 	.word	0x08022a5c
 8015c00:	08022b60 	.word	0x08022b60
 8015c04:	08022abc 	.word	0x08022abc

08015c08 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b088      	sub	sp, #32
 8015c0c:	af02      	add	r7, sp, #8
 8015c0e:	607b      	str	r3, [r7, #4]
 8015c10:	4603      	mov	r3, r0
 8015c12:	73fb      	strb	r3, [r7, #15]
 8015c14:	460b      	mov	r3, r1
 8015c16:	81bb      	strh	r3, [r7, #12]
 8015c18:	4613      	mov	r3, r2
 8015c1a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8015c1c:	7bfb      	ldrb	r3, [r7, #15]
 8015c1e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8015c20:	8a7b      	ldrh	r3, [r7, #18]
 8015c22:	3303      	adds	r3, #3
 8015c24:	f023 0203 	bic.w	r2, r3, #3
 8015c28:	89bb      	ldrh	r3, [r7, #12]
 8015c2a:	441a      	add	r2, r3
 8015c2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c2e:	429a      	cmp	r2, r3
 8015c30:	d901      	bls.n	8015c36 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8015c32:	2300      	movs	r3, #0
 8015c34:	e018      	b.n	8015c68 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8015c36:	6a3b      	ldr	r3, [r7, #32]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d007      	beq.n	8015c4c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8015c3c:	8a7b      	ldrh	r3, [r7, #18]
 8015c3e:	3303      	adds	r3, #3
 8015c40:	f023 0303 	bic.w	r3, r3, #3
 8015c44:	6a3a      	ldr	r2, [r7, #32]
 8015c46:	4413      	add	r3, r2
 8015c48:	617b      	str	r3, [r7, #20]
 8015c4a:	e001      	b.n	8015c50 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8015c50:	6878      	ldr	r0, [r7, #4]
 8015c52:	89b9      	ldrh	r1, [r7, #12]
 8015c54:	89ba      	ldrh	r2, [r7, #12]
 8015c56:	2302      	movs	r3, #2
 8015c58:	9301      	str	r3, [sp, #4]
 8015c5a:	897b      	ldrh	r3, [r7, #10]
 8015c5c:	9300      	str	r3, [sp, #0]
 8015c5e:	460b      	mov	r3, r1
 8015c60:	6979      	ldr	r1, [r7, #20]
 8015c62:	f7ff fe81 	bl	8015968 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8015c66:	687b      	ldr	r3, [r7, #4]
}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	3718      	adds	r7, #24
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}

08015c70 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b084      	sub	sp, #16
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
 8015c78:	460b      	mov	r3, r1
 8015c7a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d106      	bne.n	8015c90 <pbuf_realloc+0x20>
 8015c82:	4b3a      	ldr	r3, [pc, #232]	; (8015d6c <pbuf_realloc+0xfc>)
 8015c84:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8015c88:	4939      	ldr	r1, [pc, #228]	; (8015d70 <pbuf_realloc+0x100>)
 8015c8a:	483a      	ldr	r0, [pc, #232]	; (8015d74 <pbuf_realloc+0x104>)
 8015c8c:	f00b fc48 	bl	8021520 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	891b      	ldrh	r3, [r3, #8]
 8015c94:	887a      	ldrh	r2, [r7, #2]
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d264      	bcs.n	8015d64 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	891a      	ldrh	r2, [r3, #8]
 8015c9e:	887b      	ldrh	r3, [r7, #2]
 8015ca0:	1ad3      	subs	r3, r2, r3
 8015ca2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8015ca4:	887b      	ldrh	r3, [r7, #2]
 8015ca6:	817b      	strh	r3, [r7, #10]
  q = p;
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8015cac:	e018      	b.n	8015ce0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	895b      	ldrh	r3, [r3, #10]
 8015cb2:	897a      	ldrh	r2, [r7, #10]
 8015cb4:	1ad3      	subs	r3, r2, r3
 8015cb6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	891a      	ldrh	r2, [r3, #8]
 8015cbc:	893b      	ldrh	r3, [r7, #8]
 8015cbe:	1ad3      	subs	r3, r2, r3
 8015cc0:	b29a      	uxth	r2, r3
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d106      	bne.n	8015ce0 <pbuf_realloc+0x70>
 8015cd2:	4b26      	ldr	r3, [pc, #152]	; (8015d6c <pbuf_realloc+0xfc>)
 8015cd4:	f240 12af 	movw	r2, #431	; 0x1af
 8015cd8:	4927      	ldr	r1, [pc, #156]	; (8015d78 <pbuf_realloc+0x108>)
 8015cda:	4826      	ldr	r0, [pc, #152]	; (8015d74 <pbuf_realloc+0x104>)
 8015cdc:	f00b fc20 	bl	8021520 <iprintf>
  while (rem_len > q->len) {
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	895b      	ldrh	r3, [r3, #10]
 8015ce4:	897a      	ldrh	r2, [r7, #10]
 8015ce6:	429a      	cmp	r2, r3
 8015ce8:	d8e1      	bhi.n	8015cae <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	7b1b      	ldrb	r3, [r3, #12]
 8015cee:	f003 030f 	and.w	r3, r3, #15
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d122      	bne.n	8015d3c <pbuf_realloc+0xcc>
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	895b      	ldrh	r3, [r3, #10]
 8015cfa:	897a      	ldrh	r2, [r7, #10]
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	d01d      	beq.n	8015d3c <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	7b5b      	ldrb	r3, [r3, #13]
 8015d04:	f003 0302 	and.w	r3, r3, #2
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d117      	bne.n	8015d3c <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	685b      	ldr	r3, [r3, #4]
 8015d10:	461a      	mov	r2, r3
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	1ad3      	subs	r3, r2, r3
 8015d16:	b29a      	uxth	r2, r3
 8015d18:	897b      	ldrh	r3, [r7, #10]
 8015d1a:	4413      	add	r3, r2
 8015d1c:	b29b      	uxth	r3, r3
 8015d1e:	4619      	mov	r1, r3
 8015d20:	68f8      	ldr	r0, [r7, #12]
 8015d22:	f7fe ff87 	bl	8014c34 <mem_trim>
 8015d26:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d106      	bne.n	8015d3c <pbuf_realloc+0xcc>
 8015d2e:	4b0f      	ldr	r3, [pc, #60]	; (8015d6c <pbuf_realloc+0xfc>)
 8015d30:	f240 12bd 	movw	r2, #445	; 0x1bd
 8015d34:	4911      	ldr	r1, [pc, #68]	; (8015d7c <pbuf_realloc+0x10c>)
 8015d36:	480f      	ldr	r0, [pc, #60]	; (8015d74 <pbuf_realloc+0x104>)
 8015d38:	f00b fbf2 	bl	8021520 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	897a      	ldrh	r2, [r7, #10]
 8015d40:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	895a      	ldrh	r2, [r3, #10]
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d004      	beq.n	8015d5c <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	4618      	mov	r0, r3
 8015d58:	f000 f910 	bl	8015f7c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	2200      	movs	r2, #0
 8015d60:	601a      	str	r2, [r3, #0]
 8015d62:	e000      	b.n	8015d66 <pbuf_realloc+0xf6>
    return;
 8015d64:	bf00      	nop

}
 8015d66:	3710      	adds	r7, #16
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}
 8015d6c:	08022a5c 	.word	0x08022a5c
 8015d70:	08022b74 	.word	0x08022b74
 8015d74:	08022abc 	.word	0x08022abc
 8015d78:	08022b8c 	.word	0x08022b8c
 8015d7c:	08022ba4 	.word	0x08022ba4

08015d80 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b086      	sub	sp, #24
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	60f8      	str	r0, [r7, #12]
 8015d88:	60b9      	str	r1, [r7, #8]
 8015d8a:	4613      	mov	r3, r2
 8015d8c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d106      	bne.n	8015da2 <pbuf_add_header_impl+0x22>
 8015d94:	4b2b      	ldr	r3, [pc, #172]	; (8015e44 <pbuf_add_header_impl+0xc4>)
 8015d96:	f240 12df 	movw	r2, #479	; 0x1df
 8015d9a:	492b      	ldr	r1, [pc, #172]	; (8015e48 <pbuf_add_header_impl+0xc8>)
 8015d9c:	482b      	ldr	r0, [pc, #172]	; (8015e4c <pbuf_add_header_impl+0xcc>)
 8015d9e:	f00b fbbf 	bl	8021520 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d003      	beq.n	8015db0 <pbuf_add_header_impl+0x30>
 8015da8:	68bb      	ldr	r3, [r7, #8]
 8015daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015dae:	d301      	bcc.n	8015db4 <pbuf_add_header_impl+0x34>
    return 1;
 8015db0:	2301      	movs	r3, #1
 8015db2:	e043      	b.n	8015e3c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8015db4:	68bb      	ldr	r3, [r7, #8]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d101      	bne.n	8015dbe <pbuf_add_header_impl+0x3e>
    return 0;
 8015dba:	2300      	movs	r3, #0
 8015dbc:	e03e      	b.n	8015e3c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8015dbe:	68bb      	ldr	r3, [r7, #8]
 8015dc0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	891a      	ldrh	r2, [r3, #8]
 8015dc6:	8a7b      	ldrh	r3, [r7, #18]
 8015dc8:	4413      	add	r3, r2
 8015dca:	b29b      	uxth	r3, r3
 8015dcc:	8a7a      	ldrh	r2, [r7, #18]
 8015dce:	429a      	cmp	r2, r3
 8015dd0:	d901      	bls.n	8015dd6 <pbuf_add_header_impl+0x56>
    return 1;
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	e032      	b.n	8015e3c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	7b1b      	ldrb	r3, [r3, #12]
 8015dda:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8015ddc:	8a3b      	ldrh	r3, [r7, #16]
 8015dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d00c      	beq.n	8015e00 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	685a      	ldr	r2, [r3, #4]
 8015dea:	68bb      	ldr	r3, [r7, #8]
 8015dec:	425b      	negs	r3, r3
 8015dee:	4413      	add	r3, r2
 8015df0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	3310      	adds	r3, #16
 8015df6:	697a      	ldr	r2, [r7, #20]
 8015df8:	429a      	cmp	r2, r3
 8015dfa:	d20d      	bcs.n	8015e18 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8015dfc:	2301      	movs	r3, #1
 8015dfe:	e01d      	b.n	8015e3c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8015e00:	79fb      	ldrb	r3, [r7, #7]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d006      	beq.n	8015e14 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	685a      	ldr	r2, [r3, #4]
 8015e0a:	68bb      	ldr	r3, [r7, #8]
 8015e0c:	425b      	negs	r3, r3
 8015e0e:	4413      	add	r3, r2
 8015e10:	617b      	str	r3, [r7, #20]
 8015e12:	e001      	b.n	8015e18 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8015e14:	2301      	movs	r3, #1
 8015e16:	e011      	b.n	8015e3c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	697a      	ldr	r2, [r7, #20]
 8015e1c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	895a      	ldrh	r2, [r3, #10]
 8015e22:	8a7b      	ldrh	r3, [r7, #18]
 8015e24:	4413      	add	r3, r2
 8015e26:	b29a      	uxth	r2, r3
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	891a      	ldrh	r2, [r3, #8]
 8015e30:	8a7b      	ldrh	r3, [r7, #18]
 8015e32:	4413      	add	r3, r2
 8015e34:	b29a      	uxth	r2, r3
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	811a      	strh	r2, [r3, #8]


  return 0;
 8015e3a:	2300      	movs	r3, #0
}
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	3718      	adds	r7, #24
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd80      	pop	{r7, pc}
 8015e44:	08022a5c 	.word	0x08022a5c
 8015e48:	08022bc0 	.word	0x08022bc0
 8015e4c:	08022abc 	.word	0x08022abc

08015e50 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b082      	sub	sp, #8
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
 8015e58:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8015e5a:	2200      	movs	r2, #0
 8015e5c:	6839      	ldr	r1, [r7, #0]
 8015e5e:	6878      	ldr	r0, [r7, #4]
 8015e60:	f7ff ff8e 	bl	8015d80 <pbuf_add_header_impl>
 8015e64:	4603      	mov	r3, r0
}
 8015e66:	4618      	mov	r0, r3
 8015e68:	3708      	adds	r7, #8
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	bd80      	pop	{r7, pc}
	...

08015e70 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b084      	sub	sp, #16
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
 8015e78:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d106      	bne.n	8015e8e <pbuf_remove_header+0x1e>
 8015e80:	4b20      	ldr	r3, [pc, #128]	; (8015f04 <pbuf_remove_header+0x94>)
 8015e82:	f240 224b 	movw	r2, #587	; 0x24b
 8015e86:	4920      	ldr	r1, [pc, #128]	; (8015f08 <pbuf_remove_header+0x98>)
 8015e88:	4820      	ldr	r0, [pc, #128]	; (8015f0c <pbuf_remove_header+0x9c>)
 8015e8a:	f00b fb49 	bl	8021520 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d003      	beq.n	8015e9c <pbuf_remove_header+0x2c>
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e9a:	d301      	bcc.n	8015ea0 <pbuf_remove_header+0x30>
    return 1;
 8015e9c:	2301      	movs	r3, #1
 8015e9e:	e02c      	b.n	8015efa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8015ea0:	683b      	ldr	r3, [r7, #0]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d101      	bne.n	8015eaa <pbuf_remove_header+0x3a>
    return 0;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	e027      	b.n	8015efa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8015eaa:	683b      	ldr	r3, [r7, #0]
 8015eac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	895b      	ldrh	r3, [r3, #10]
 8015eb2:	89fa      	ldrh	r2, [r7, #14]
 8015eb4:	429a      	cmp	r2, r3
 8015eb6:	d908      	bls.n	8015eca <pbuf_remove_header+0x5a>
 8015eb8:	4b12      	ldr	r3, [pc, #72]	; (8015f04 <pbuf_remove_header+0x94>)
 8015eba:	f240 2255 	movw	r2, #597	; 0x255
 8015ebe:	4914      	ldr	r1, [pc, #80]	; (8015f10 <pbuf_remove_header+0xa0>)
 8015ec0:	4812      	ldr	r0, [pc, #72]	; (8015f0c <pbuf_remove_header+0x9c>)
 8015ec2:	f00b fb2d 	bl	8021520 <iprintf>
 8015ec6:	2301      	movs	r3, #1
 8015ec8:	e017      	b.n	8015efa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	685b      	ldr	r3, [r3, #4]
 8015ece:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	685a      	ldr	r2, [r3, #4]
 8015ed4:	683b      	ldr	r3, [r7, #0]
 8015ed6:	441a      	add	r2, r3
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	895a      	ldrh	r2, [r3, #10]
 8015ee0:	89fb      	ldrh	r3, [r7, #14]
 8015ee2:	1ad3      	subs	r3, r2, r3
 8015ee4:	b29a      	uxth	r2, r3
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	891a      	ldrh	r2, [r3, #8]
 8015eee:	89fb      	ldrh	r3, [r7, #14]
 8015ef0:	1ad3      	subs	r3, r2, r3
 8015ef2:	b29a      	uxth	r2, r3
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8015ef8:	2300      	movs	r3, #0
}
 8015efa:	4618      	mov	r0, r3
 8015efc:	3710      	adds	r7, #16
 8015efe:	46bd      	mov	sp, r7
 8015f00:	bd80      	pop	{r7, pc}
 8015f02:	bf00      	nop
 8015f04:	08022a5c 	.word	0x08022a5c
 8015f08:	08022bc0 	.word	0x08022bc0
 8015f0c:	08022abc 	.word	0x08022abc
 8015f10:	08022bcc 	.word	0x08022bcc

08015f14 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b082      	sub	sp, #8
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
 8015f1c:	460b      	mov	r3, r1
 8015f1e:	807b      	strh	r3, [r7, #2]
 8015f20:	4613      	mov	r3, r2
 8015f22:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8015f24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	da08      	bge.n	8015f3e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8015f2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f30:	425b      	negs	r3, r3
 8015f32:	4619      	mov	r1, r3
 8015f34:	6878      	ldr	r0, [r7, #4]
 8015f36:	f7ff ff9b 	bl	8015e70 <pbuf_remove_header>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	e007      	b.n	8015f4e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8015f3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f42:	787a      	ldrb	r2, [r7, #1]
 8015f44:	4619      	mov	r1, r3
 8015f46:	6878      	ldr	r0, [r7, #4]
 8015f48:	f7ff ff1a 	bl	8015d80 <pbuf_add_header_impl>
 8015f4c:	4603      	mov	r3, r0
  }
}
 8015f4e:	4618      	mov	r0, r3
 8015f50:	3708      	adds	r7, #8
 8015f52:	46bd      	mov	sp, r7
 8015f54:	bd80      	pop	{r7, pc}

08015f56 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8015f56:	b580      	push	{r7, lr}
 8015f58:	b082      	sub	sp, #8
 8015f5a:	af00      	add	r7, sp, #0
 8015f5c:	6078      	str	r0, [r7, #4]
 8015f5e:	460b      	mov	r3, r1
 8015f60:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8015f62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f66:	2201      	movs	r2, #1
 8015f68:	4619      	mov	r1, r3
 8015f6a:	6878      	ldr	r0, [r7, #4]
 8015f6c:	f7ff ffd2 	bl	8015f14 <pbuf_header_impl>
 8015f70:	4603      	mov	r3, r0
}
 8015f72:	4618      	mov	r0, r3
 8015f74:	3708      	adds	r7, #8
 8015f76:	46bd      	mov	sp, r7
 8015f78:	bd80      	pop	{r7, pc}
	...

08015f7c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b088      	sub	sp, #32
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d10b      	bne.n	8015fa2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d106      	bne.n	8015f9e <pbuf_free+0x22>
 8015f90:	4b3b      	ldr	r3, [pc, #236]	; (8016080 <pbuf_free+0x104>)
 8015f92:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8015f96:	493b      	ldr	r1, [pc, #236]	; (8016084 <pbuf_free+0x108>)
 8015f98:	483b      	ldr	r0, [pc, #236]	; (8016088 <pbuf_free+0x10c>)
 8015f9a:	f00b fac1 	bl	8021520 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	e069      	b.n	8016076 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8015fa6:	e062      	b.n	801606e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8015fa8:	f00a fc76 	bl	8020898 <sys_arch_protect>
 8015fac:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	7b9b      	ldrb	r3, [r3, #14]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d106      	bne.n	8015fc4 <pbuf_free+0x48>
 8015fb6:	4b32      	ldr	r3, [pc, #200]	; (8016080 <pbuf_free+0x104>)
 8015fb8:	f240 22f1 	movw	r2, #753	; 0x2f1
 8015fbc:	4933      	ldr	r1, [pc, #204]	; (801608c <pbuf_free+0x110>)
 8015fbe:	4832      	ldr	r0, [pc, #200]	; (8016088 <pbuf_free+0x10c>)
 8015fc0:	f00b faae 	bl	8021520 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	7b9b      	ldrb	r3, [r3, #14]
 8015fc8:	3b01      	subs	r3, #1
 8015fca:	b2da      	uxtb	r2, r3
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	739a      	strb	r2, [r3, #14]
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	7b9b      	ldrb	r3, [r3, #14]
 8015fd4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8015fd6:	69b8      	ldr	r0, [r7, #24]
 8015fd8:	f00a fc6c 	bl	80208b4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8015fdc:	7dfb      	ldrb	r3, [r7, #23]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d143      	bne.n	801606a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	7b1b      	ldrb	r3, [r3, #12]
 8015fec:	f003 030f 	and.w	r3, r3, #15
 8015ff0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	7b5b      	ldrb	r3, [r3, #13]
 8015ff6:	f003 0302 	and.w	r3, r3, #2
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d011      	beq.n	8016022 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8016002:	68bb      	ldr	r3, [r7, #8]
 8016004:	691b      	ldr	r3, [r3, #16]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d106      	bne.n	8016018 <pbuf_free+0x9c>
 801600a:	4b1d      	ldr	r3, [pc, #116]	; (8016080 <pbuf_free+0x104>)
 801600c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8016010:	491f      	ldr	r1, [pc, #124]	; (8016090 <pbuf_free+0x114>)
 8016012:	481d      	ldr	r0, [pc, #116]	; (8016088 <pbuf_free+0x10c>)
 8016014:	f00b fa84 	bl	8021520 <iprintf>
        pc->custom_free_function(p);
 8016018:	68bb      	ldr	r3, [r7, #8]
 801601a:	691b      	ldr	r3, [r3, #16]
 801601c:	6878      	ldr	r0, [r7, #4]
 801601e:	4798      	blx	r3
 8016020:	e01d      	b.n	801605e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8016022:	7bfb      	ldrb	r3, [r7, #15]
 8016024:	2b02      	cmp	r3, #2
 8016026:	d104      	bne.n	8016032 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8016028:	6879      	ldr	r1, [r7, #4]
 801602a:	200c      	movs	r0, #12
 801602c:	f7ff f8e0 	bl	80151f0 <memp_free>
 8016030:	e015      	b.n	801605e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8016032:	7bfb      	ldrb	r3, [r7, #15]
 8016034:	2b01      	cmp	r3, #1
 8016036:	d104      	bne.n	8016042 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8016038:	6879      	ldr	r1, [r7, #4]
 801603a:	200b      	movs	r0, #11
 801603c:	f7ff f8d8 	bl	80151f0 <memp_free>
 8016040:	e00d      	b.n	801605e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8016042:	7bfb      	ldrb	r3, [r7, #15]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d103      	bne.n	8016050 <pbuf_free+0xd4>
          mem_free(p);
 8016048:	6878      	ldr	r0, [r7, #4]
 801604a:	f7fe fd63 	bl	8014b14 <mem_free>
 801604e:	e006      	b.n	801605e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8016050:	4b0b      	ldr	r3, [pc, #44]	; (8016080 <pbuf_free+0x104>)
 8016052:	f240 320f 	movw	r2, #783	; 0x30f
 8016056:	490f      	ldr	r1, [pc, #60]	; (8016094 <pbuf_free+0x118>)
 8016058:	480b      	ldr	r0, [pc, #44]	; (8016088 <pbuf_free+0x10c>)
 801605a:	f00b fa61 	bl	8021520 <iprintf>
        }
      }
      count++;
 801605e:	7ffb      	ldrb	r3, [r7, #31]
 8016060:	3301      	adds	r3, #1
 8016062:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8016064:	693b      	ldr	r3, [r7, #16]
 8016066:	607b      	str	r3, [r7, #4]
 8016068:	e001      	b.n	801606e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801606a:	2300      	movs	r3, #0
 801606c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d199      	bne.n	8015fa8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8016074:	7ffb      	ldrb	r3, [r7, #31]
}
 8016076:	4618      	mov	r0, r3
 8016078:	3720      	adds	r7, #32
 801607a:	46bd      	mov	sp, r7
 801607c:	bd80      	pop	{r7, pc}
 801607e:	bf00      	nop
 8016080:	08022a5c 	.word	0x08022a5c
 8016084:	08022bc0 	.word	0x08022bc0
 8016088:	08022abc 	.word	0x08022abc
 801608c:	08022bec 	.word	0x08022bec
 8016090:	08022c04 	.word	0x08022c04
 8016094:	08022c28 	.word	0x08022c28

08016098 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8016098:	b480      	push	{r7}
 801609a:	b085      	sub	sp, #20
 801609c:	af00      	add	r7, sp, #0
 801609e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80160a0:	2300      	movs	r3, #0
 80160a2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80160a4:	e005      	b.n	80160b2 <pbuf_clen+0x1a>
    ++len;
 80160a6:	89fb      	ldrh	r3, [r7, #14]
 80160a8:	3301      	adds	r3, #1
 80160aa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d1f6      	bne.n	80160a6 <pbuf_clen+0xe>
  }
  return len;
 80160b8:	89fb      	ldrh	r3, [r7, #14]
}
 80160ba:	4618      	mov	r0, r3
 80160bc:	3714      	adds	r7, #20
 80160be:	46bd      	mov	sp, r7
 80160c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c4:	4770      	bx	lr
	...

080160c8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b084      	sub	sp, #16
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d016      	beq.n	8016104 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80160d6:	f00a fbdf 	bl	8020898 <sys_arch_protect>
 80160da:	60f8      	str	r0, [r7, #12]
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	7b9b      	ldrb	r3, [r3, #14]
 80160e0:	3301      	adds	r3, #1
 80160e2:	b2da      	uxtb	r2, r3
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	739a      	strb	r2, [r3, #14]
 80160e8:	68f8      	ldr	r0, [r7, #12]
 80160ea:	f00a fbe3 	bl	80208b4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	7b9b      	ldrb	r3, [r3, #14]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d106      	bne.n	8016104 <pbuf_ref+0x3c>
 80160f6:	4b05      	ldr	r3, [pc, #20]	; (801610c <pbuf_ref+0x44>)
 80160f8:	f240 3242 	movw	r2, #834	; 0x342
 80160fc:	4904      	ldr	r1, [pc, #16]	; (8016110 <pbuf_ref+0x48>)
 80160fe:	4805      	ldr	r0, [pc, #20]	; (8016114 <pbuf_ref+0x4c>)
 8016100:	f00b fa0e 	bl	8021520 <iprintf>
  }
}
 8016104:	bf00      	nop
 8016106:	3710      	adds	r7, #16
 8016108:	46bd      	mov	sp, r7
 801610a:	bd80      	pop	{r7, pc}
 801610c:	08022a5c 	.word	0x08022a5c
 8016110:	08022c3c 	.word	0x08022c3c
 8016114:	08022abc 	.word	0x08022abc

08016118 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b084      	sub	sp, #16
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
 8016120:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d002      	beq.n	801612e <pbuf_cat+0x16>
 8016128:	683b      	ldr	r3, [r7, #0]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d107      	bne.n	801613e <pbuf_cat+0x26>
 801612e:	4b20      	ldr	r3, [pc, #128]	; (80161b0 <pbuf_cat+0x98>)
 8016130:	f240 325a 	movw	r2, #858	; 0x35a
 8016134:	491f      	ldr	r1, [pc, #124]	; (80161b4 <pbuf_cat+0x9c>)
 8016136:	4820      	ldr	r0, [pc, #128]	; (80161b8 <pbuf_cat+0xa0>)
 8016138:	f00b f9f2 	bl	8021520 <iprintf>
 801613c:	e034      	b.n	80161a8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	60fb      	str	r3, [r7, #12]
 8016142:	e00a      	b.n	801615a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	891a      	ldrh	r2, [r3, #8]
 8016148:	683b      	ldr	r3, [r7, #0]
 801614a:	891b      	ldrh	r3, [r3, #8]
 801614c:	4413      	add	r3, r2
 801614e:	b29a      	uxth	r2, r3
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	60fb      	str	r3, [r7, #12]
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d1f0      	bne.n	8016144 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	891a      	ldrh	r2, [r3, #8]
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	895b      	ldrh	r3, [r3, #10]
 801616a:	429a      	cmp	r2, r3
 801616c:	d006      	beq.n	801617c <pbuf_cat+0x64>
 801616e:	4b10      	ldr	r3, [pc, #64]	; (80161b0 <pbuf_cat+0x98>)
 8016170:	f240 3262 	movw	r2, #866	; 0x362
 8016174:	4911      	ldr	r1, [pc, #68]	; (80161bc <pbuf_cat+0xa4>)
 8016176:	4810      	ldr	r0, [pc, #64]	; (80161b8 <pbuf_cat+0xa0>)
 8016178:	f00b f9d2 	bl	8021520 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d006      	beq.n	8016192 <pbuf_cat+0x7a>
 8016184:	4b0a      	ldr	r3, [pc, #40]	; (80161b0 <pbuf_cat+0x98>)
 8016186:	f240 3263 	movw	r2, #867	; 0x363
 801618a:	490d      	ldr	r1, [pc, #52]	; (80161c0 <pbuf_cat+0xa8>)
 801618c:	480a      	ldr	r0, [pc, #40]	; (80161b8 <pbuf_cat+0xa0>)
 801618e:	f00b f9c7 	bl	8021520 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	891a      	ldrh	r2, [r3, #8]
 8016196:	683b      	ldr	r3, [r7, #0]
 8016198:	891b      	ldrh	r3, [r3, #8]
 801619a:	4413      	add	r3, r2
 801619c:	b29a      	uxth	r2, r3
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	683a      	ldr	r2, [r7, #0]
 80161a6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80161a8:	3710      	adds	r7, #16
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}
 80161ae:	bf00      	nop
 80161b0:	08022a5c 	.word	0x08022a5c
 80161b4:	08022c50 	.word	0x08022c50
 80161b8:	08022abc 	.word	0x08022abc
 80161bc:	08022c88 	.word	0x08022c88
 80161c0:	08022cb8 	.word	0x08022cb8

080161c4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b082      	sub	sp, #8
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
 80161cc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80161ce:	6839      	ldr	r1, [r7, #0]
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f7ff ffa1 	bl	8016118 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80161d6:	6838      	ldr	r0, [r7, #0]
 80161d8:	f7ff ff76 	bl	80160c8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80161dc:	bf00      	nop
 80161de:	3708      	adds	r7, #8
 80161e0:	46bd      	mov	sp, r7
 80161e2:	bd80      	pop	{r7, pc}

080161e4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b086      	sub	sp, #24
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
 80161ec:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80161ee:	2300      	movs	r3, #0
 80161f0:	617b      	str	r3, [r7, #20]
 80161f2:	2300      	movs	r3, #0
 80161f4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d008      	beq.n	801620e <pbuf_copy+0x2a>
 80161fc:	683b      	ldr	r3, [r7, #0]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d005      	beq.n	801620e <pbuf_copy+0x2a>
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	891a      	ldrh	r2, [r3, #8]
 8016206:	683b      	ldr	r3, [r7, #0]
 8016208:	891b      	ldrh	r3, [r3, #8]
 801620a:	429a      	cmp	r2, r3
 801620c:	d209      	bcs.n	8016222 <pbuf_copy+0x3e>
 801620e:	4b57      	ldr	r3, [pc, #348]	; (801636c <pbuf_copy+0x188>)
 8016210:	f240 32ca 	movw	r2, #970	; 0x3ca
 8016214:	4956      	ldr	r1, [pc, #344]	; (8016370 <pbuf_copy+0x18c>)
 8016216:	4857      	ldr	r0, [pc, #348]	; (8016374 <pbuf_copy+0x190>)
 8016218:	f00b f982 	bl	8021520 <iprintf>
 801621c:	f06f 030f 	mvn.w	r3, #15
 8016220:	e09f      	b.n	8016362 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	895b      	ldrh	r3, [r3, #10]
 8016226:	461a      	mov	r2, r3
 8016228:	697b      	ldr	r3, [r7, #20]
 801622a:	1ad2      	subs	r2, r2, r3
 801622c:	683b      	ldr	r3, [r7, #0]
 801622e:	895b      	ldrh	r3, [r3, #10]
 8016230:	4619      	mov	r1, r3
 8016232:	693b      	ldr	r3, [r7, #16]
 8016234:	1acb      	subs	r3, r1, r3
 8016236:	429a      	cmp	r2, r3
 8016238:	d306      	bcc.n	8016248 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801623a:	683b      	ldr	r3, [r7, #0]
 801623c:	895b      	ldrh	r3, [r3, #10]
 801623e:	461a      	mov	r2, r3
 8016240:	693b      	ldr	r3, [r7, #16]
 8016242:	1ad3      	subs	r3, r2, r3
 8016244:	60fb      	str	r3, [r7, #12]
 8016246:	e005      	b.n	8016254 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	895b      	ldrh	r3, [r3, #10]
 801624c:	461a      	mov	r2, r3
 801624e:	697b      	ldr	r3, [r7, #20]
 8016250:	1ad3      	subs	r3, r2, r3
 8016252:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	685a      	ldr	r2, [r3, #4]
 8016258:	697b      	ldr	r3, [r7, #20]
 801625a:	18d0      	adds	r0, r2, r3
 801625c:	683b      	ldr	r3, [r7, #0]
 801625e:	685a      	ldr	r2, [r3, #4]
 8016260:	693b      	ldr	r3, [r7, #16]
 8016262:	4413      	add	r3, r2
 8016264:	68fa      	ldr	r2, [r7, #12]
 8016266:	4619      	mov	r1, r3
 8016268:	f00b f89f 	bl	80213aa <memcpy>
    offset_to += len;
 801626c:	697a      	ldr	r2, [r7, #20]
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	4413      	add	r3, r2
 8016272:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8016274:	693a      	ldr	r2, [r7, #16]
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	4413      	add	r3, r2
 801627a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	895b      	ldrh	r3, [r3, #10]
 8016280:	461a      	mov	r2, r3
 8016282:	697b      	ldr	r3, [r7, #20]
 8016284:	4293      	cmp	r3, r2
 8016286:	d906      	bls.n	8016296 <pbuf_copy+0xb2>
 8016288:	4b38      	ldr	r3, [pc, #224]	; (801636c <pbuf_copy+0x188>)
 801628a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801628e:	493a      	ldr	r1, [pc, #232]	; (8016378 <pbuf_copy+0x194>)
 8016290:	4838      	ldr	r0, [pc, #224]	; (8016374 <pbuf_copy+0x190>)
 8016292:	f00b f945 	bl	8021520 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8016296:	683b      	ldr	r3, [r7, #0]
 8016298:	895b      	ldrh	r3, [r3, #10]
 801629a:	461a      	mov	r2, r3
 801629c:	693b      	ldr	r3, [r7, #16]
 801629e:	4293      	cmp	r3, r2
 80162a0:	d906      	bls.n	80162b0 <pbuf_copy+0xcc>
 80162a2:	4b32      	ldr	r3, [pc, #200]	; (801636c <pbuf_copy+0x188>)
 80162a4:	f240 32da 	movw	r2, #986	; 0x3da
 80162a8:	4934      	ldr	r1, [pc, #208]	; (801637c <pbuf_copy+0x198>)
 80162aa:	4832      	ldr	r0, [pc, #200]	; (8016374 <pbuf_copy+0x190>)
 80162ac:	f00b f938 	bl	8021520 <iprintf>
    if (offset_from >= p_from->len) {
 80162b0:	683b      	ldr	r3, [r7, #0]
 80162b2:	895b      	ldrh	r3, [r3, #10]
 80162b4:	461a      	mov	r2, r3
 80162b6:	693b      	ldr	r3, [r7, #16]
 80162b8:	4293      	cmp	r3, r2
 80162ba:	d304      	bcc.n	80162c6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80162bc:	2300      	movs	r3, #0
 80162be:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80162c0:	683b      	ldr	r3, [r7, #0]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	895b      	ldrh	r3, [r3, #10]
 80162ca:	461a      	mov	r2, r3
 80162cc:	697b      	ldr	r3, [r7, #20]
 80162ce:	4293      	cmp	r3, r2
 80162d0:	d114      	bne.n	80162fc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80162d2:	2300      	movs	r3, #0
 80162d4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d10c      	bne.n	80162fc <pbuf_copy+0x118>
 80162e2:	683b      	ldr	r3, [r7, #0]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d009      	beq.n	80162fc <pbuf_copy+0x118>
 80162e8:	4b20      	ldr	r3, [pc, #128]	; (801636c <pbuf_copy+0x188>)
 80162ea:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80162ee:	4924      	ldr	r1, [pc, #144]	; (8016380 <pbuf_copy+0x19c>)
 80162f0:	4820      	ldr	r0, [pc, #128]	; (8016374 <pbuf_copy+0x190>)
 80162f2:	f00b f915 	bl	8021520 <iprintf>
 80162f6:	f06f 030f 	mvn.w	r3, #15
 80162fa:	e032      	b.n	8016362 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80162fc:	683b      	ldr	r3, [r7, #0]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d013      	beq.n	801632a <pbuf_copy+0x146>
 8016302:	683b      	ldr	r3, [r7, #0]
 8016304:	895a      	ldrh	r2, [r3, #10]
 8016306:	683b      	ldr	r3, [r7, #0]
 8016308:	891b      	ldrh	r3, [r3, #8]
 801630a:	429a      	cmp	r2, r3
 801630c:	d10d      	bne.n	801632a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801630e:	683b      	ldr	r3, [r7, #0]
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d009      	beq.n	801632a <pbuf_copy+0x146>
 8016316:	4b15      	ldr	r3, [pc, #84]	; (801636c <pbuf_copy+0x188>)
 8016318:	f240 32ea 	movw	r2, #1002	; 0x3ea
 801631c:	4919      	ldr	r1, [pc, #100]	; (8016384 <pbuf_copy+0x1a0>)
 801631e:	4815      	ldr	r0, [pc, #84]	; (8016374 <pbuf_copy+0x190>)
 8016320:	f00b f8fe 	bl	8021520 <iprintf>
 8016324:	f06f 0305 	mvn.w	r3, #5
 8016328:	e01b      	b.n	8016362 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d013      	beq.n	8016358 <pbuf_copy+0x174>
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	895a      	ldrh	r2, [r3, #10]
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	891b      	ldrh	r3, [r3, #8]
 8016338:	429a      	cmp	r2, r3
 801633a:	d10d      	bne.n	8016358 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d009      	beq.n	8016358 <pbuf_copy+0x174>
 8016344:	4b09      	ldr	r3, [pc, #36]	; (801636c <pbuf_copy+0x188>)
 8016346:	f240 32ef 	movw	r2, #1007	; 0x3ef
 801634a:	490e      	ldr	r1, [pc, #56]	; (8016384 <pbuf_copy+0x1a0>)
 801634c:	4809      	ldr	r0, [pc, #36]	; (8016374 <pbuf_copy+0x190>)
 801634e:	f00b f8e7 	bl	8021520 <iprintf>
 8016352:	f06f 0305 	mvn.w	r3, #5
 8016356:	e004      	b.n	8016362 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8016358:	683b      	ldr	r3, [r7, #0]
 801635a:	2b00      	cmp	r3, #0
 801635c:	f47f af61 	bne.w	8016222 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8016360:	2300      	movs	r3, #0
}
 8016362:	4618      	mov	r0, r3
 8016364:	3718      	adds	r7, #24
 8016366:	46bd      	mov	sp, r7
 8016368:	bd80      	pop	{r7, pc}
 801636a:	bf00      	nop
 801636c:	08022a5c 	.word	0x08022a5c
 8016370:	08022d04 	.word	0x08022d04
 8016374:	08022abc 	.word	0x08022abc
 8016378:	08022d34 	.word	0x08022d34
 801637c:	08022d4c 	.word	0x08022d4c
 8016380:	08022d68 	.word	0x08022d68
 8016384:	08022d78 	.word	0x08022d78

08016388 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b088      	sub	sp, #32
 801638c:	af00      	add	r7, sp, #0
 801638e:	60f8      	str	r0, [r7, #12]
 8016390:	60b9      	str	r1, [r7, #8]
 8016392:	4611      	mov	r1, r2
 8016394:	461a      	mov	r2, r3
 8016396:	460b      	mov	r3, r1
 8016398:	80fb      	strh	r3, [r7, #6]
 801639a:	4613      	mov	r3, r2
 801639c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801639e:	2300      	movs	r3, #0
 80163a0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80163a2:	2300      	movs	r3, #0
 80163a4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d108      	bne.n	80163be <pbuf_copy_partial+0x36>
 80163ac:	4b2b      	ldr	r3, [pc, #172]	; (801645c <pbuf_copy_partial+0xd4>)
 80163ae:	f240 420a 	movw	r2, #1034	; 0x40a
 80163b2:	492b      	ldr	r1, [pc, #172]	; (8016460 <pbuf_copy_partial+0xd8>)
 80163b4:	482b      	ldr	r0, [pc, #172]	; (8016464 <pbuf_copy_partial+0xdc>)
 80163b6:	f00b f8b3 	bl	8021520 <iprintf>
 80163ba:	2300      	movs	r3, #0
 80163bc:	e04a      	b.n	8016454 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80163be:	68bb      	ldr	r3, [r7, #8]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d108      	bne.n	80163d6 <pbuf_copy_partial+0x4e>
 80163c4:	4b25      	ldr	r3, [pc, #148]	; (801645c <pbuf_copy_partial+0xd4>)
 80163c6:	f240 420b 	movw	r2, #1035	; 0x40b
 80163ca:	4927      	ldr	r1, [pc, #156]	; (8016468 <pbuf_copy_partial+0xe0>)
 80163cc:	4825      	ldr	r0, [pc, #148]	; (8016464 <pbuf_copy_partial+0xdc>)
 80163ce:	f00b f8a7 	bl	8021520 <iprintf>
 80163d2:	2300      	movs	r3, #0
 80163d4:	e03e      	b.n	8016454 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	61fb      	str	r3, [r7, #28]
 80163da:	e034      	b.n	8016446 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80163dc:	88bb      	ldrh	r3, [r7, #4]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d00a      	beq.n	80163f8 <pbuf_copy_partial+0x70>
 80163e2:	69fb      	ldr	r3, [r7, #28]
 80163e4:	895b      	ldrh	r3, [r3, #10]
 80163e6:	88ba      	ldrh	r2, [r7, #4]
 80163e8:	429a      	cmp	r2, r3
 80163ea:	d305      	bcc.n	80163f8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80163ec:	69fb      	ldr	r3, [r7, #28]
 80163ee:	895b      	ldrh	r3, [r3, #10]
 80163f0:	88ba      	ldrh	r2, [r7, #4]
 80163f2:	1ad3      	subs	r3, r2, r3
 80163f4:	80bb      	strh	r3, [r7, #4]
 80163f6:	e023      	b.n	8016440 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80163f8:	69fb      	ldr	r3, [r7, #28]
 80163fa:	895a      	ldrh	r2, [r3, #10]
 80163fc:	88bb      	ldrh	r3, [r7, #4]
 80163fe:	1ad3      	subs	r3, r2, r3
 8016400:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8016402:	8b3a      	ldrh	r2, [r7, #24]
 8016404:	88fb      	ldrh	r3, [r7, #6]
 8016406:	429a      	cmp	r2, r3
 8016408:	d901      	bls.n	801640e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801640a:	88fb      	ldrh	r3, [r7, #6]
 801640c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801640e:	8b7b      	ldrh	r3, [r7, #26]
 8016410:	68ba      	ldr	r2, [r7, #8]
 8016412:	18d0      	adds	r0, r2, r3
 8016414:	69fb      	ldr	r3, [r7, #28]
 8016416:	685a      	ldr	r2, [r3, #4]
 8016418:	88bb      	ldrh	r3, [r7, #4]
 801641a:	4413      	add	r3, r2
 801641c:	8b3a      	ldrh	r2, [r7, #24]
 801641e:	4619      	mov	r1, r3
 8016420:	f00a ffc3 	bl	80213aa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8016424:	8afa      	ldrh	r2, [r7, #22]
 8016426:	8b3b      	ldrh	r3, [r7, #24]
 8016428:	4413      	add	r3, r2
 801642a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801642c:	8b7a      	ldrh	r2, [r7, #26]
 801642e:	8b3b      	ldrh	r3, [r7, #24]
 8016430:	4413      	add	r3, r2
 8016432:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8016434:	88fa      	ldrh	r2, [r7, #6]
 8016436:	8b3b      	ldrh	r3, [r7, #24]
 8016438:	1ad3      	subs	r3, r2, r3
 801643a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801643c:	2300      	movs	r3, #0
 801643e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016440:	69fb      	ldr	r3, [r7, #28]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	61fb      	str	r3, [r7, #28]
 8016446:	88fb      	ldrh	r3, [r7, #6]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d002      	beq.n	8016452 <pbuf_copy_partial+0xca>
 801644c:	69fb      	ldr	r3, [r7, #28]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d1c4      	bne.n	80163dc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8016452:	8afb      	ldrh	r3, [r7, #22]
}
 8016454:	4618      	mov	r0, r3
 8016456:	3720      	adds	r7, #32
 8016458:	46bd      	mov	sp, r7
 801645a:	bd80      	pop	{r7, pc}
 801645c:	08022a5c 	.word	0x08022a5c
 8016460:	08022da4 	.word	0x08022da4
 8016464:	08022abc 	.word	0x08022abc
 8016468:	08022dc4 	.word	0x08022dc4

0801646c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b084      	sub	sp, #16
 8016470:	af00      	add	r7, sp, #0
 8016472:	4603      	mov	r3, r0
 8016474:	603a      	str	r2, [r7, #0]
 8016476:	71fb      	strb	r3, [r7, #7]
 8016478:	460b      	mov	r3, r1
 801647a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801647c:	683b      	ldr	r3, [r7, #0]
 801647e:	8919      	ldrh	r1, [r3, #8]
 8016480:	88ba      	ldrh	r2, [r7, #4]
 8016482:	79fb      	ldrb	r3, [r7, #7]
 8016484:	4618      	mov	r0, r3
 8016486:	f7ff fa99 	bl	80159bc <pbuf_alloc>
 801648a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d101      	bne.n	8016496 <pbuf_clone+0x2a>
    return NULL;
 8016492:	2300      	movs	r3, #0
 8016494:	e011      	b.n	80164ba <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8016496:	6839      	ldr	r1, [r7, #0]
 8016498:	68f8      	ldr	r0, [r7, #12]
 801649a:	f7ff fea3 	bl	80161e4 <pbuf_copy>
 801649e:	4603      	mov	r3, r0
 80164a0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80164a2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d006      	beq.n	80164b8 <pbuf_clone+0x4c>
 80164aa:	4b06      	ldr	r3, [pc, #24]	; (80164c4 <pbuf_clone+0x58>)
 80164ac:	f240 5224 	movw	r2, #1316	; 0x524
 80164b0:	4905      	ldr	r1, [pc, #20]	; (80164c8 <pbuf_clone+0x5c>)
 80164b2:	4806      	ldr	r0, [pc, #24]	; (80164cc <pbuf_clone+0x60>)
 80164b4:	f00b f834 	bl	8021520 <iprintf>
  return q;
 80164b8:	68fb      	ldr	r3, [r7, #12]
}
 80164ba:	4618      	mov	r0, r3
 80164bc:	3710      	adds	r7, #16
 80164be:	46bd      	mov	sp, r7
 80164c0:	bd80      	pop	{r7, pc}
 80164c2:	bf00      	nop
 80164c4:	08022a5c 	.word	0x08022a5c
 80164c8:	08022ed0 	.word	0x08022ed0
 80164cc:	08022abc 	.word	0x08022abc

080164d0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80164d4:	f00b f8a0 	bl	8021618 <rand>
 80164d8:	4603      	mov	r3, r0
 80164da:	b29b      	uxth	r3, r3
 80164dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80164e0:	b29b      	uxth	r3, r3
 80164e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80164e6:	b29a      	uxth	r2, r3
 80164e8:	4b01      	ldr	r3, [pc, #4]	; (80164f0 <tcp_init+0x20>)
 80164ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80164ec:	bf00      	nop
 80164ee:	bd80      	pop	{r7, pc}
 80164f0:	20000034 	.word	0x20000034

080164f4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b082      	sub	sp, #8
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	7d1b      	ldrb	r3, [r3, #20]
 8016500:	2b01      	cmp	r3, #1
 8016502:	d105      	bne.n	8016510 <tcp_free+0x1c>
 8016504:	4b06      	ldr	r3, [pc, #24]	; (8016520 <tcp_free+0x2c>)
 8016506:	22d4      	movs	r2, #212	; 0xd4
 8016508:	4906      	ldr	r1, [pc, #24]	; (8016524 <tcp_free+0x30>)
 801650a:	4807      	ldr	r0, [pc, #28]	; (8016528 <tcp_free+0x34>)
 801650c:	f00b f808 	bl	8021520 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8016510:	6879      	ldr	r1, [r7, #4]
 8016512:	2001      	movs	r0, #1
 8016514:	f7fe fe6c 	bl	80151f0 <memp_free>
}
 8016518:	bf00      	nop
 801651a:	3708      	adds	r7, #8
 801651c:	46bd      	mov	sp, r7
 801651e:	bd80      	pop	{r7, pc}
 8016520:	08022f5c 	.word	0x08022f5c
 8016524:	08022f8c 	.word	0x08022f8c
 8016528:	08022fa0 	.word	0x08022fa0

0801652c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b082      	sub	sp, #8
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	7d1b      	ldrb	r3, [r3, #20]
 8016538:	2b01      	cmp	r3, #1
 801653a:	d105      	bne.n	8016548 <tcp_free_listen+0x1c>
 801653c:	4b06      	ldr	r3, [pc, #24]	; (8016558 <tcp_free_listen+0x2c>)
 801653e:	22df      	movs	r2, #223	; 0xdf
 8016540:	4906      	ldr	r1, [pc, #24]	; (801655c <tcp_free_listen+0x30>)
 8016542:	4807      	ldr	r0, [pc, #28]	; (8016560 <tcp_free_listen+0x34>)
 8016544:	f00a ffec 	bl	8021520 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8016548:	6879      	ldr	r1, [r7, #4]
 801654a:	2002      	movs	r0, #2
 801654c:	f7fe fe50 	bl	80151f0 <memp_free>
}
 8016550:	bf00      	nop
 8016552:	3708      	adds	r7, #8
 8016554:	46bd      	mov	sp, r7
 8016556:	bd80      	pop	{r7, pc}
 8016558:	08022f5c 	.word	0x08022f5c
 801655c:	08022fc8 	.word	0x08022fc8
 8016560:	08022fa0 	.word	0x08022fa0

08016564 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8016564:	b580      	push	{r7, lr}
 8016566:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8016568:	f000 fe98 	bl	801729c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801656c:	4b07      	ldr	r3, [pc, #28]	; (801658c <tcp_tmr+0x28>)
 801656e:	781b      	ldrb	r3, [r3, #0]
 8016570:	3301      	adds	r3, #1
 8016572:	b2da      	uxtb	r2, r3
 8016574:	4b05      	ldr	r3, [pc, #20]	; (801658c <tcp_tmr+0x28>)
 8016576:	701a      	strb	r2, [r3, #0]
 8016578:	4b04      	ldr	r3, [pc, #16]	; (801658c <tcp_tmr+0x28>)
 801657a:	781b      	ldrb	r3, [r3, #0]
 801657c:	f003 0301 	and.w	r3, r3, #1
 8016580:	2b00      	cmp	r3, #0
 8016582:	d001      	beq.n	8016588 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8016584:	f000 fb4c 	bl	8016c20 <tcp_slowtmr>
  }
}
 8016588:	bf00      	nop
 801658a:	bd80      	pop	{r7, pc}
 801658c:	20008fbd 	.word	0x20008fbd

08016590 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b084      	sub	sp, #16
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
 8016598:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801659a:	683b      	ldr	r3, [r7, #0]
 801659c:	2b00      	cmp	r3, #0
 801659e:	d105      	bne.n	80165ac <tcp_remove_listener+0x1c>
 80165a0:	4b0d      	ldr	r3, [pc, #52]	; (80165d8 <tcp_remove_listener+0x48>)
 80165a2:	22ff      	movs	r2, #255	; 0xff
 80165a4:	490d      	ldr	r1, [pc, #52]	; (80165dc <tcp_remove_listener+0x4c>)
 80165a6:	480e      	ldr	r0, [pc, #56]	; (80165e0 <tcp_remove_listener+0x50>)
 80165a8:	f00a ffba 	bl	8021520 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	60fb      	str	r3, [r7, #12]
 80165b0:	e00a      	b.n	80165c8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80165b6:	683a      	ldr	r2, [r7, #0]
 80165b8:	429a      	cmp	r2, r3
 80165ba:	d102      	bne.n	80165c2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	2200      	movs	r2, #0
 80165c0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	68db      	ldr	r3, [r3, #12]
 80165c6:	60fb      	str	r3, [r7, #12]
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d1f1      	bne.n	80165b2 <tcp_remove_listener+0x22>
    }
  }
}
 80165ce:	bf00      	nop
 80165d0:	3710      	adds	r7, #16
 80165d2:	46bd      	mov	sp, r7
 80165d4:	bd80      	pop	{r7, pc}
 80165d6:	bf00      	nop
 80165d8:	08022f5c 	.word	0x08022f5c
 80165dc:	08022fe4 	.word	0x08022fe4
 80165e0:	08022fa0 	.word	0x08022fa0

080165e4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b084      	sub	sp, #16
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d106      	bne.n	8016600 <tcp_listen_closed+0x1c>
 80165f2:	4b14      	ldr	r3, [pc, #80]	; (8016644 <tcp_listen_closed+0x60>)
 80165f4:	f240 1211 	movw	r2, #273	; 0x111
 80165f8:	4913      	ldr	r1, [pc, #76]	; (8016648 <tcp_listen_closed+0x64>)
 80165fa:	4814      	ldr	r0, [pc, #80]	; (801664c <tcp_listen_closed+0x68>)
 80165fc:	f00a ff90 	bl	8021520 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	7d1b      	ldrb	r3, [r3, #20]
 8016604:	2b01      	cmp	r3, #1
 8016606:	d006      	beq.n	8016616 <tcp_listen_closed+0x32>
 8016608:	4b0e      	ldr	r3, [pc, #56]	; (8016644 <tcp_listen_closed+0x60>)
 801660a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801660e:	4910      	ldr	r1, [pc, #64]	; (8016650 <tcp_listen_closed+0x6c>)
 8016610:	480e      	ldr	r0, [pc, #56]	; (801664c <tcp_listen_closed+0x68>)
 8016612:	f00a ff85 	bl	8021520 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016616:	2301      	movs	r3, #1
 8016618:	60fb      	str	r3, [r7, #12]
 801661a:	e00b      	b.n	8016634 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801661c:	4a0d      	ldr	r2, [pc, #52]	; (8016654 <tcp_listen_closed+0x70>)
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	6879      	ldr	r1, [r7, #4]
 8016628:	4618      	mov	r0, r3
 801662a:	f7ff ffb1 	bl	8016590 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	3301      	adds	r3, #1
 8016632:	60fb      	str	r3, [r7, #12]
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	2b03      	cmp	r3, #3
 8016638:	d9f0      	bls.n	801661c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801663a:	bf00      	nop
 801663c:	3710      	adds	r7, #16
 801663e:	46bd      	mov	sp, r7
 8016640:	bd80      	pop	{r7, pc}
 8016642:	bf00      	nop
 8016644:	08022f5c 	.word	0x08022f5c
 8016648:	0802300c 	.word	0x0802300c
 801664c:	08022fa0 	.word	0x08022fa0
 8016650:	08023018 	.word	0x08023018
 8016654:	08025360 	.word	0x08025360

08016658 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8016658:	b5b0      	push	{r4, r5, r7, lr}
 801665a:	b088      	sub	sp, #32
 801665c:	af04      	add	r7, sp, #16
 801665e:	6078      	str	r0, [r7, #4]
 8016660:	460b      	mov	r3, r1
 8016662:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d106      	bne.n	8016678 <tcp_close_shutdown+0x20>
 801666a:	4b61      	ldr	r3, [pc, #388]	; (80167f0 <tcp_close_shutdown+0x198>)
 801666c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8016670:	4960      	ldr	r1, [pc, #384]	; (80167f4 <tcp_close_shutdown+0x19c>)
 8016672:	4861      	ldr	r0, [pc, #388]	; (80167f8 <tcp_close_shutdown+0x1a0>)
 8016674:	f00a ff54 	bl	8021520 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8016678:	78fb      	ldrb	r3, [r7, #3]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d066      	beq.n	801674c <tcp_close_shutdown+0xf4>
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	7d1b      	ldrb	r3, [r3, #20]
 8016682:	2b04      	cmp	r3, #4
 8016684:	d003      	beq.n	801668e <tcp_close_shutdown+0x36>
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	7d1b      	ldrb	r3, [r3, #20]
 801668a:	2b07      	cmp	r3, #7
 801668c:	d15e      	bne.n	801674c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016692:	2b00      	cmp	r3, #0
 8016694:	d104      	bne.n	80166a0 <tcp_close_shutdown+0x48>
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801669a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801669e:	d055      	beq.n	801674c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	8b5b      	ldrh	r3, [r3, #26]
 80166a4:	f003 0310 	and.w	r3, r3, #16
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d106      	bne.n	80166ba <tcp_close_shutdown+0x62>
 80166ac:	4b50      	ldr	r3, [pc, #320]	; (80167f0 <tcp_close_shutdown+0x198>)
 80166ae:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80166b2:	4952      	ldr	r1, [pc, #328]	; (80167fc <tcp_close_shutdown+0x1a4>)
 80166b4:	4850      	ldr	r0, [pc, #320]	; (80167f8 <tcp_close_shutdown+0x1a0>)
 80166b6:	f00a ff33 	bl	8021520 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80166c2:	687d      	ldr	r5, [r7, #4]
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	3304      	adds	r3, #4
 80166c8:	687a      	ldr	r2, [r7, #4]
 80166ca:	8ad2      	ldrh	r2, [r2, #22]
 80166cc:	6879      	ldr	r1, [r7, #4]
 80166ce:	8b09      	ldrh	r1, [r1, #24]
 80166d0:	9102      	str	r1, [sp, #8]
 80166d2:	9201      	str	r2, [sp, #4]
 80166d4:	9300      	str	r3, [sp, #0]
 80166d6:	462b      	mov	r3, r5
 80166d8:	4622      	mov	r2, r4
 80166da:	4601      	mov	r1, r0
 80166dc:	6878      	ldr	r0, [r7, #4]
 80166de:	f004 fe91 	bl	801b404 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80166e2:	6878      	ldr	r0, [r7, #4]
 80166e4:	f001 f8ba 	bl	801785c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80166e8:	4b45      	ldr	r3, [pc, #276]	; (8016800 <tcp_close_shutdown+0x1a8>)
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	687a      	ldr	r2, [r7, #4]
 80166ee:	429a      	cmp	r2, r3
 80166f0:	d105      	bne.n	80166fe <tcp_close_shutdown+0xa6>
 80166f2:	4b43      	ldr	r3, [pc, #268]	; (8016800 <tcp_close_shutdown+0x1a8>)
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	68db      	ldr	r3, [r3, #12]
 80166f8:	4a41      	ldr	r2, [pc, #260]	; (8016800 <tcp_close_shutdown+0x1a8>)
 80166fa:	6013      	str	r3, [r2, #0]
 80166fc:	e013      	b.n	8016726 <tcp_close_shutdown+0xce>
 80166fe:	4b40      	ldr	r3, [pc, #256]	; (8016800 <tcp_close_shutdown+0x1a8>)
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	60fb      	str	r3, [r7, #12]
 8016704:	e00c      	b.n	8016720 <tcp_close_shutdown+0xc8>
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	68db      	ldr	r3, [r3, #12]
 801670a:	687a      	ldr	r2, [r7, #4]
 801670c:	429a      	cmp	r2, r3
 801670e:	d104      	bne.n	801671a <tcp_close_shutdown+0xc2>
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	68da      	ldr	r2, [r3, #12]
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	60da      	str	r2, [r3, #12]
 8016718:	e005      	b.n	8016726 <tcp_close_shutdown+0xce>
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	68db      	ldr	r3, [r3, #12]
 801671e:	60fb      	str	r3, [r7, #12]
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d1ef      	bne.n	8016706 <tcp_close_shutdown+0xae>
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	2200      	movs	r2, #0
 801672a:	60da      	str	r2, [r3, #12]
 801672c:	4b35      	ldr	r3, [pc, #212]	; (8016804 <tcp_close_shutdown+0x1ac>)
 801672e:	2201      	movs	r2, #1
 8016730:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8016732:	4b35      	ldr	r3, [pc, #212]	; (8016808 <tcp_close_shutdown+0x1b0>)
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	687a      	ldr	r2, [r7, #4]
 8016738:	429a      	cmp	r2, r3
 801673a:	d102      	bne.n	8016742 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801673c:	f003 fd4c 	bl	801a1d8 <tcp_trigger_input_pcb_close>
 8016740:	e002      	b.n	8016748 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8016742:	6878      	ldr	r0, [r7, #4]
 8016744:	f7ff fed6 	bl	80164f4 <tcp_free>
      }
      return ERR_OK;
 8016748:	2300      	movs	r3, #0
 801674a:	e04d      	b.n	80167e8 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	7d1b      	ldrb	r3, [r3, #20]
 8016750:	2b01      	cmp	r3, #1
 8016752:	d02d      	beq.n	80167b0 <tcp_close_shutdown+0x158>
 8016754:	2b02      	cmp	r3, #2
 8016756:	d036      	beq.n	80167c6 <tcp_close_shutdown+0x16e>
 8016758:	2b00      	cmp	r3, #0
 801675a:	d13f      	bne.n	80167dc <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	8adb      	ldrh	r3, [r3, #22]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d021      	beq.n	80167a8 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016764:	4b29      	ldr	r3, [pc, #164]	; (801680c <tcp_close_shutdown+0x1b4>)
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	687a      	ldr	r2, [r7, #4]
 801676a:	429a      	cmp	r2, r3
 801676c:	d105      	bne.n	801677a <tcp_close_shutdown+0x122>
 801676e:	4b27      	ldr	r3, [pc, #156]	; (801680c <tcp_close_shutdown+0x1b4>)
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	68db      	ldr	r3, [r3, #12]
 8016774:	4a25      	ldr	r2, [pc, #148]	; (801680c <tcp_close_shutdown+0x1b4>)
 8016776:	6013      	str	r3, [r2, #0]
 8016778:	e013      	b.n	80167a2 <tcp_close_shutdown+0x14a>
 801677a:	4b24      	ldr	r3, [pc, #144]	; (801680c <tcp_close_shutdown+0x1b4>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	60bb      	str	r3, [r7, #8]
 8016780:	e00c      	b.n	801679c <tcp_close_shutdown+0x144>
 8016782:	68bb      	ldr	r3, [r7, #8]
 8016784:	68db      	ldr	r3, [r3, #12]
 8016786:	687a      	ldr	r2, [r7, #4]
 8016788:	429a      	cmp	r2, r3
 801678a:	d104      	bne.n	8016796 <tcp_close_shutdown+0x13e>
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	68da      	ldr	r2, [r3, #12]
 8016790:	68bb      	ldr	r3, [r7, #8]
 8016792:	60da      	str	r2, [r3, #12]
 8016794:	e005      	b.n	80167a2 <tcp_close_shutdown+0x14a>
 8016796:	68bb      	ldr	r3, [r7, #8]
 8016798:	68db      	ldr	r3, [r3, #12]
 801679a:	60bb      	str	r3, [r7, #8]
 801679c:	68bb      	ldr	r3, [r7, #8]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d1ef      	bne.n	8016782 <tcp_close_shutdown+0x12a>
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	2200      	movs	r2, #0
 80167a6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80167a8:	6878      	ldr	r0, [r7, #4]
 80167aa:	f7ff fea3 	bl	80164f4 <tcp_free>
      break;
 80167ae:	e01a      	b.n	80167e6 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 80167b0:	6878      	ldr	r0, [r7, #4]
 80167b2:	f7ff ff17 	bl	80165e4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80167b6:	6879      	ldr	r1, [r7, #4]
 80167b8:	4815      	ldr	r0, [pc, #84]	; (8016810 <tcp_close_shutdown+0x1b8>)
 80167ba:	f001 f89f 	bl	80178fc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80167be:	6878      	ldr	r0, [r7, #4]
 80167c0:	f7ff feb4 	bl	801652c <tcp_free_listen>
      break;
 80167c4:	e00f      	b.n	80167e6 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80167c6:	6879      	ldr	r1, [r7, #4]
 80167c8:	480d      	ldr	r0, [pc, #52]	; (8016800 <tcp_close_shutdown+0x1a8>)
 80167ca:	f001 f897 	bl	80178fc <tcp_pcb_remove>
 80167ce:	4b0d      	ldr	r3, [pc, #52]	; (8016804 <tcp_close_shutdown+0x1ac>)
 80167d0:	2201      	movs	r2, #1
 80167d2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80167d4:	6878      	ldr	r0, [r7, #4]
 80167d6:	f7ff fe8d 	bl	80164f4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80167da:	e004      	b.n	80167e6 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 80167dc:	6878      	ldr	r0, [r7, #4]
 80167de:	f000 f819 	bl	8016814 <tcp_close_shutdown_fin>
 80167e2:	4603      	mov	r3, r0
 80167e4:	e000      	b.n	80167e8 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 80167e6:	2300      	movs	r3, #0
}
 80167e8:	4618      	mov	r0, r3
 80167ea:	3710      	adds	r7, #16
 80167ec:	46bd      	mov	sp, r7
 80167ee:	bdb0      	pop	{r4, r5, r7, pc}
 80167f0:	08022f5c 	.word	0x08022f5c
 80167f4:	08023030 	.word	0x08023030
 80167f8:	08022fa0 	.word	0x08022fa0
 80167fc:	08023050 	.word	0x08023050
 8016800:	20010334 	.word	0x20010334
 8016804:	20010330 	.word	0x20010330
 8016808:	20010348 	.word	0x20010348
 801680c:	20010340 	.word	0x20010340
 8016810:	2001033c 	.word	0x2001033c

08016814 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8016814:	b580      	push	{r7, lr}
 8016816:	b084      	sub	sp, #16
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d106      	bne.n	8016830 <tcp_close_shutdown_fin+0x1c>
 8016822:	4b2c      	ldr	r3, [pc, #176]	; (80168d4 <tcp_close_shutdown_fin+0xc0>)
 8016824:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8016828:	492b      	ldr	r1, [pc, #172]	; (80168d8 <tcp_close_shutdown_fin+0xc4>)
 801682a:	482c      	ldr	r0, [pc, #176]	; (80168dc <tcp_close_shutdown_fin+0xc8>)
 801682c:	f00a fe78 	bl	8021520 <iprintf>

  switch (pcb->state) {
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	7d1b      	ldrb	r3, [r3, #20]
 8016834:	2b04      	cmp	r3, #4
 8016836:	d010      	beq.n	801685a <tcp_close_shutdown_fin+0x46>
 8016838:	2b07      	cmp	r3, #7
 801683a:	d01b      	beq.n	8016874 <tcp_close_shutdown_fin+0x60>
 801683c:	2b03      	cmp	r3, #3
 801683e:	d126      	bne.n	801688e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8016840:	6878      	ldr	r0, [r7, #4]
 8016842:	f003 fedb 	bl	801a5fc <tcp_send_fin>
 8016846:	4603      	mov	r3, r0
 8016848:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801684a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d11f      	bne.n	8016892 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	2205      	movs	r2, #5
 8016856:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016858:	e01b      	b.n	8016892 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801685a:	6878      	ldr	r0, [r7, #4]
 801685c:	f003 fece 	bl	801a5fc <tcp_send_fin>
 8016860:	4603      	mov	r3, r0
 8016862:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d114      	bne.n	8016896 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	2205      	movs	r2, #5
 8016870:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016872:	e010      	b.n	8016896 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8016874:	6878      	ldr	r0, [r7, #4]
 8016876:	f003 fec1 	bl	801a5fc <tcp_send_fin>
 801687a:	4603      	mov	r3, r0
 801687c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801687e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d109      	bne.n	801689a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	2209      	movs	r2, #9
 801688a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801688c:	e005      	b.n	801689a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801688e:	2300      	movs	r3, #0
 8016890:	e01c      	b.n	80168cc <tcp_close_shutdown_fin+0xb8>
      break;
 8016892:	bf00      	nop
 8016894:	e002      	b.n	801689c <tcp_close_shutdown_fin+0x88>
      break;
 8016896:	bf00      	nop
 8016898:	e000      	b.n	801689c <tcp_close_shutdown_fin+0x88>
      break;
 801689a:	bf00      	nop
  }

  if (err == ERR_OK) {
 801689c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d103      	bne.n	80168ac <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80168a4:	6878      	ldr	r0, [r7, #4]
 80168a6:	f003 ffe7 	bl	801a878 <tcp_output>
 80168aa:	e00d      	b.n	80168c8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 80168ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80168b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80168b4:	d108      	bne.n	80168c8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	8b5b      	ldrh	r3, [r3, #26]
 80168ba:	f043 0308 	orr.w	r3, r3, #8
 80168be:	b29a      	uxth	r2, r3
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80168c4:	2300      	movs	r3, #0
 80168c6:	e001      	b.n	80168cc <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 80168c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80168cc:	4618      	mov	r0, r3
 80168ce:	3710      	adds	r7, #16
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}
 80168d4:	08022f5c 	.word	0x08022f5c
 80168d8:	0802300c 	.word	0x0802300c
 80168dc:	08022fa0 	.word	0x08022fa0

080168e0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80168e0:	b580      	push	{r7, lr}
 80168e2:	b082      	sub	sp, #8
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d109      	bne.n	8016902 <tcp_close+0x22>
 80168ee:	4b0f      	ldr	r3, [pc, #60]	; (801692c <tcp_close+0x4c>)
 80168f0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80168f4:	490e      	ldr	r1, [pc, #56]	; (8016930 <tcp_close+0x50>)
 80168f6:	480f      	ldr	r0, [pc, #60]	; (8016934 <tcp_close+0x54>)
 80168f8:	f00a fe12 	bl	8021520 <iprintf>
 80168fc:	f06f 030f 	mvn.w	r3, #15
 8016900:	e00f      	b.n	8016922 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	7d1b      	ldrb	r3, [r3, #20]
 8016906:	2b01      	cmp	r3, #1
 8016908:	d006      	beq.n	8016918 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	8b5b      	ldrh	r3, [r3, #26]
 801690e:	f043 0310 	orr.w	r3, r3, #16
 8016912:	b29a      	uxth	r2, r3
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8016918:	2101      	movs	r1, #1
 801691a:	6878      	ldr	r0, [r7, #4]
 801691c:	f7ff fe9c 	bl	8016658 <tcp_close_shutdown>
 8016920:	4603      	mov	r3, r0
}
 8016922:	4618      	mov	r0, r3
 8016924:	3708      	adds	r7, #8
 8016926:	46bd      	mov	sp, r7
 8016928:	bd80      	pop	{r7, pc}
 801692a:	bf00      	nop
 801692c:	08022f5c 	.word	0x08022f5c
 8016930:	0802306c 	.word	0x0802306c
 8016934:	08022fa0 	.word	0x08022fa0

08016938 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b08e      	sub	sp, #56	; 0x38
 801693c:	af04      	add	r7, sp, #16
 801693e:	6078      	str	r0, [r7, #4]
 8016940:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d107      	bne.n	8016958 <tcp_abandon+0x20>
 8016948:	4b52      	ldr	r3, [pc, #328]	; (8016a94 <tcp_abandon+0x15c>)
 801694a:	f240 223d 	movw	r2, #573	; 0x23d
 801694e:	4952      	ldr	r1, [pc, #328]	; (8016a98 <tcp_abandon+0x160>)
 8016950:	4852      	ldr	r0, [pc, #328]	; (8016a9c <tcp_abandon+0x164>)
 8016952:	f00a fde5 	bl	8021520 <iprintf>
 8016956:	e099      	b.n	8016a8c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	7d1b      	ldrb	r3, [r3, #20]
 801695c:	2b01      	cmp	r3, #1
 801695e:	d106      	bne.n	801696e <tcp_abandon+0x36>
 8016960:	4b4c      	ldr	r3, [pc, #304]	; (8016a94 <tcp_abandon+0x15c>)
 8016962:	f240 2241 	movw	r2, #577	; 0x241
 8016966:	494e      	ldr	r1, [pc, #312]	; (8016aa0 <tcp_abandon+0x168>)
 8016968:	484c      	ldr	r0, [pc, #304]	; (8016a9c <tcp_abandon+0x164>)
 801696a:	f00a fdd9 	bl	8021520 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	7d1b      	ldrb	r3, [r3, #20]
 8016972:	2b0a      	cmp	r3, #10
 8016974:	d107      	bne.n	8016986 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8016976:	6879      	ldr	r1, [r7, #4]
 8016978:	484a      	ldr	r0, [pc, #296]	; (8016aa4 <tcp_abandon+0x16c>)
 801697a:	f000 ffbf 	bl	80178fc <tcp_pcb_remove>
    tcp_free(pcb);
 801697e:	6878      	ldr	r0, [r7, #4]
 8016980:	f7ff fdb8 	bl	80164f4 <tcp_free>
 8016984:	e082      	b.n	8016a8c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8016986:	2300      	movs	r3, #0
 8016988:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801698a:	2300      	movs	r3, #0
 801698c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016992:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016998:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80169a0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	691b      	ldr	r3, [r3, #16]
 80169a6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	7d1b      	ldrb	r3, [r3, #20]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d126      	bne.n	80169fe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	8adb      	ldrh	r3, [r3, #22]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d02e      	beq.n	8016a16 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80169b8:	4b3b      	ldr	r3, [pc, #236]	; (8016aa8 <tcp_abandon+0x170>)
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	687a      	ldr	r2, [r7, #4]
 80169be:	429a      	cmp	r2, r3
 80169c0:	d105      	bne.n	80169ce <tcp_abandon+0x96>
 80169c2:	4b39      	ldr	r3, [pc, #228]	; (8016aa8 <tcp_abandon+0x170>)
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	68db      	ldr	r3, [r3, #12]
 80169c8:	4a37      	ldr	r2, [pc, #220]	; (8016aa8 <tcp_abandon+0x170>)
 80169ca:	6013      	str	r3, [r2, #0]
 80169cc:	e013      	b.n	80169f6 <tcp_abandon+0xbe>
 80169ce:	4b36      	ldr	r3, [pc, #216]	; (8016aa8 <tcp_abandon+0x170>)
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	61fb      	str	r3, [r7, #28]
 80169d4:	e00c      	b.n	80169f0 <tcp_abandon+0xb8>
 80169d6:	69fb      	ldr	r3, [r7, #28]
 80169d8:	68db      	ldr	r3, [r3, #12]
 80169da:	687a      	ldr	r2, [r7, #4]
 80169dc:	429a      	cmp	r2, r3
 80169de:	d104      	bne.n	80169ea <tcp_abandon+0xb2>
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	68da      	ldr	r2, [r3, #12]
 80169e4:	69fb      	ldr	r3, [r7, #28]
 80169e6:	60da      	str	r2, [r3, #12]
 80169e8:	e005      	b.n	80169f6 <tcp_abandon+0xbe>
 80169ea:	69fb      	ldr	r3, [r7, #28]
 80169ec:	68db      	ldr	r3, [r3, #12]
 80169ee:	61fb      	str	r3, [r7, #28]
 80169f0:	69fb      	ldr	r3, [r7, #28]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d1ef      	bne.n	80169d6 <tcp_abandon+0x9e>
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	2200      	movs	r2, #0
 80169fa:	60da      	str	r2, [r3, #12]
 80169fc:	e00b      	b.n	8016a16 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80169fe:	683b      	ldr	r3, [r7, #0]
 8016a00:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	8adb      	ldrh	r3, [r3, #22]
 8016a06:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016a08:	6879      	ldr	r1, [r7, #4]
 8016a0a:	4828      	ldr	r0, [pc, #160]	; (8016aac <tcp_abandon+0x174>)
 8016a0c:	f000 ff76 	bl	80178fc <tcp_pcb_remove>
 8016a10:	4b27      	ldr	r3, [pc, #156]	; (8016ab0 <tcp_abandon+0x178>)
 8016a12:	2201      	movs	r2, #1
 8016a14:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d004      	beq.n	8016a28 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a22:	4618      	mov	r0, r3
 8016a24:	f000 fd1a 	bl	801745c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d004      	beq.n	8016a3a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a34:	4618      	mov	r0, r3
 8016a36:	f000 fd11 	bl	801745c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d004      	beq.n	8016a4c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016a46:	4618      	mov	r0, r3
 8016a48:	f000 fd08 	bl	801745c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8016a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d00e      	beq.n	8016a70 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8016a52:	6879      	ldr	r1, [r7, #4]
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	3304      	adds	r3, #4
 8016a58:	687a      	ldr	r2, [r7, #4]
 8016a5a:	8b12      	ldrh	r2, [r2, #24]
 8016a5c:	9202      	str	r2, [sp, #8]
 8016a5e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016a60:	9201      	str	r2, [sp, #4]
 8016a62:	9300      	str	r3, [sp, #0]
 8016a64:	460b      	mov	r3, r1
 8016a66:	697a      	ldr	r2, [r7, #20]
 8016a68:	69b9      	ldr	r1, [r7, #24]
 8016a6a:	6878      	ldr	r0, [r7, #4]
 8016a6c:	f004 fcca 	bl	801b404 <tcp_rst>
    }
    last_state = pcb->state;
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	7d1b      	ldrb	r3, [r3, #20]
 8016a74:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8016a76:	6878      	ldr	r0, [r7, #4]
 8016a78:	f7ff fd3c 	bl	80164f4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8016a7c:	693b      	ldr	r3, [r7, #16]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d004      	beq.n	8016a8c <tcp_abandon+0x154>
 8016a82:	693b      	ldr	r3, [r7, #16]
 8016a84:	f06f 010c 	mvn.w	r1, #12
 8016a88:	68f8      	ldr	r0, [r7, #12]
 8016a8a:	4798      	blx	r3
  }
}
 8016a8c:	3728      	adds	r7, #40	; 0x28
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	bd80      	pop	{r7, pc}
 8016a92:	bf00      	nop
 8016a94:	08022f5c 	.word	0x08022f5c
 8016a98:	080230a0 	.word	0x080230a0
 8016a9c:	08022fa0 	.word	0x08022fa0
 8016aa0:	080230bc 	.word	0x080230bc
 8016aa4:	20010344 	.word	0x20010344
 8016aa8:	20010340 	.word	0x20010340
 8016aac:	20010334 	.word	0x20010334
 8016ab0:	20010330 	.word	0x20010330

08016ab4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b082      	sub	sp, #8
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8016abc:	2101      	movs	r1, #1
 8016abe:	6878      	ldr	r0, [r7, #4]
 8016ac0:	f7ff ff3a 	bl	8016938 <tcp_abandon>
}
 8016ac4:	bf00      	nop
 8016ac6:	3708      	adds	r7, #8
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	bd80      	pop	{r7, pc}

08016acc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b084      	sub	sp, #16
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d106      	bne.n	8016ae8 <tcp_update_rcv_ann_wnd+0x1c>
 8016ada:	4b25      	ldr	r3, [pc, #148]	; (8016b70 <tcp_update_rcv_ann_wnd+0xa4>)
 8016adc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8016ae0:	4924      	ldr	r1, [pc, #144]	; (8016b74 <tcp_update_rcv_ann_wnd+0xa8>)
 8016ae2:	4825      	ldr	r0, [pc, #148]	; (8016b78 <tcp_update_rcv_ann_wnd+0xac>)
 8016ae4:	f00a fd1c 	bl	8021520 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aec:	687a      	ldr	r2, [r7, #4]
 8016aee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8016af0:	4413      	add	r3, r2
 8016af2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016af8:	687a      	ldr	r2, [r7, #4]
 8016afa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8016afc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8016b00:	bf28      	it	cs
 8016b02:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8016b06:	b292      	uxth	r2, r2
 8016b08:	4413      	add	r3, r2
 8016b0a:	68fa      	ldr	r2, [r7, #12]
 8016b0c:	1ad3      	subs	r3, r2, r3
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	db08      	blt.n	8016b24 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b1e:	68fa      	ldr	r2, [r7, #12]
 8016b20:	1ad3      	subs	r3, r2, r3
 8016b22:	e020      	b.n	8016b66 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b2c:	1ad3      	subs	r3, r2, r3
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	dd03      	ble.n	8016b3a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	2200      	movs	r2, #0
 8016b36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016b38:	e014      	b.n	8016b64 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b42:	1ad3      	subs	r3, r2, r3
 8016b44:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016b46:	68bb      	ldr	r3, [r7, #8]
 8016b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016b4c:	d306      	bcc.n	8016b5c <tcp_update_rcv_ann_wnd+0x90>
 8016b4e:	4b08      	ldr	r3, [pc, #32]	; (8016b70 <tcp_update_rcv_ann_wnd+0xa4>)
 8016b50:	f240 32b6 	movw	r2, #950	; 0x3b6
 8016b54:	4909      	ldr	r1, [pc, #36]	; (8016b7c <tcp_update_rcv_ann_wnd+0xb0>)
 8016b56:	4808      	ldr	r0, [pc, #32]	; (8016b78 <tcp_update_rcv_ann_wnd+0xac>)
 8016b58:	f00a fce2 	bl	8021520 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016b5c:	68bb      	ldr	r3, [r7, #8]
 8016b5e:	b29a      	uxth	r2, r3
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8016b64:	2300      	movs	r3, #0
  }
}
 8016b66:	4618      	mov	r0, r3
 8016b68:	3710      	adds	r7, #16
 8016b6a:	46bd      	mov	sp, r7
 8016b6c:	bd80      	pop	{r7, pc}
 8016b6e:	bf00      	nop
 8016b70:	08022f5c 	.word	0x08022f5c
 8016b74:	080231b8 	.word	0x080231b8
 8016b78:	08022fa0 	.word	0x08022fa0
 8016b7c:	080231dc 	.word	0x080231dc

08016b80 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b084      	sub	sp, #16
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
 8016b88:	460b      	mov	r3, r1
 8016b8a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d107      	bne.n	8016ba2 <tcp_recved+0x22>
 8016b92:	4b1f      	ldr	r3, [pc, #124]	; (8016c10 <tcp_recved+0x90>)
 8016b94:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016b98:	491e      	ldr	r1, [pc, #120]	; (8016c14 <tcp_recved+0x94>)
 8016b9a:	481f      	ldr	r0, [pc, #124]	; (8016c18 <tcp_recved+0x98>)
 8016b9c:	f00a fcc0 	bl	8021520 <iprintf>
 8016ba0:	e032      	b.n	8016c08 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	7d1b      	ldrb	r3, [r3, #20]
 8016ba6:	2b01      	cmp	r3, #1
 8016ba8:	d106      	bne.n	8016bb8 <tcp_recved+0x38>
 8016baa:	4b19      	ldr	r3, [pc, #100]	; (8016c10 <tcp_recved+0x90>)
 8016bac:	f240 32d3 	movw	r2, #979	; 0x3d3
 8016bb0:	491a      	ldr	r1, [pc, #104]	; (8016c1c <tcp_recved+0x9c>)
 8016bb2:	4819      	ldr	r0, [pc, #100]	; (8016c18 <tcp_recved+0x98>)
 8016bb4:	f00a fcb4 	bl	8021520 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016bbc:	887b      	ldrh	r3, [r7, #2]
 8016bbe:	4413      	add	r3, r2
 8016bc0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8016bc2:	89fb      	ldrh	r3, [r7, #14]
 8016bc4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016bc8:	d804      	bhi.n	8016bd4 <tcp_recved+0x54>
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016bce:	89fa      	ldrh	r2, [r7, #14]
 8016bd0:	429a      	cmp	r2, r3
 8016bd2:	d204      	bcs.n	8016bde <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016bda:	851a      	strh	r2, [r3, #40]	; 0x28
 8016bdc:	e002      	b.n	8016be4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	89fa      	ldrh	r2, [r7, #14]
 8016be2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016be4:	6878      	ldr	r0, [r7, #4]
 8016be6:	f7ff ff71 	bl	8016acc <tcp_update_rcv_ann_wnd>
 8016bea:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016bec:	68bb      	ldr	r3, [r7, #8]
 8016bee:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8016bf2:	d309      	bcc.n	8016c08 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	8b5b      	ldrh	r3, [r3, #26]
 8016bf8:	f043 0302 	orr.w	r3, r3, #2
 8016bfc:	b29a      	uxth	r2, r3
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016c02:	6878      	ldr	r0, [r7, #4]
 8016c04:	f003 fe38 	bl	801a878 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016c08:	3710      	adds	r7, #16
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}
 8016c0e:	bf00      	nop
 8016c10:	08022f5c 	.word	0x08022f5c
 8016c14:	080231f8 	.word	0x080231f8
 8016c18:	08022fa0 	.word	0x08022fa0
 8016c1c:	08023210 	.word	0x08023210

08016c20 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016c20:	b5b0      	push	{r4, r5, r7, lr}
 8016c22:	b090      	sub	sp, #64	; 0x40
 8016c24:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8016c26:	2300      	movs	r3, #0
 8016c28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8016c2c:	4b94      	ldr	r3, [pc, #592]	; (8016e80 <tcp_slowtmr+0x260>)
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	3301      	adds	r3, #1
 8016c32:	4a93      	ldr	r2, [pc, #588]	; (8016e80 <tcp_slowtmr+0x260>)
 8016c34:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8016c36:	4b93      	ldr	r3, [pc, #588]	; (8016e84 <tcp_slowtmr+0x264>)
 8016c38:	781b      	ldrb	r3, [r3, #0]
 8016c3a:	3301      	adds	r3, #1
 8016c3c:	b2da      	uxtb	r2, r3
 8016c3e:	4b91      	ldr	r3, [pc, #580]	; (8016e84 <tcp_slowtmr+0x264>)
 8016c40:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8016c42:	2300      	movs	r3, #0
 8016c44:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8016c46:	4b90      	ldr	r3, [pc, #576]	; (8016e88 <tcp_slowtmr+0x268>)
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8016c4c:	e29d      	b.n	801718a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8016c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c50:	7d1b      	ldrb	r3, [r3, #20]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d106      	bne.n	8016c64 <tcp_slowtmr+0x44>
 8016c56:	4b8d      	ldr	r3, [pc, #564]	; (8016e8c <tcp_slowtmr+0x26c>)
 8016c58:	f240 42be 	movw	r2, #1214	; 0x4be
 8016c5c:	498c      	ldr	r1, [pc, #560]	; (8016e90 <tcp_slowtmr+0x270>)
 8016c5e:	488d      	ldr	r0, [pc, #564]	; (8016e94 <tcp_slowtmr+0x274>)
 8016c60:	f00a fc5e 	bl	8021520 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8016c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c66:	7d1b      	ldrb	r3, [r3, #20]
 8016c68:	2b01      	cmp	r3, #1
 8016c6a:	d106      	bne.n	8016c7a <tcp_slowtmr+0x5a>
 8016c6c:	4b87      	ldr	r3, [pc, #540]	; (8016e8c <tcp_slowtmr+0x26c>)
 8016c6e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8016c72:	4989      	ldr	r1, [pc, #548]	; (8016e98 <tcp_slowtmr+0x278>)
 8016c74:	4887      	ldr	r0, [pc, #540]	; (8016e94 <tcp_slowtmr+0x274>)
 8016c76:	f00a fc53 	bl	8021520 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8016c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c7c:	7d1b      	ldrb	r3, [r3, #20]
 8016c7e:	2b0a      	cmp	r3, #10
 8016c80:	d106      	bne.n	8016c90 <tcp_slowtmr+0x70>
 8016c82:	4b82      	ldr	r3, [pc, #520]	; (8016e8c <tcp_slowtmr+0x26c>)
 8016c84:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8016c88:	4984      	ldr	r1, [pc, #528]	; (8016e9c <tcp_slowtmr+0x27c>)
 8016c8a:	4882      	ldr	r0, [pc, #520]	; (8016e94 <tcp_slowtmr+0x274>)
 8016c8c:	f00a fc48 	bl	8021520 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8016c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c92:	7f9a      	ldrb	r2, [r3, #30]
 8016c94:	4b7b      	ldr	r3, [pc, #492]	; (8016e84 <tcp_slowtmr+0x264>)
 8016c96:	781b      	ldrb	r3, [r3, #0]
 8016c98:	429a      	cmp	r2, r3
 8016c9a:	d105      	bne.n	8016ca8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8016c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c9e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ca2:	68db      	ldr	r3, [r3, #12]
 8016ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8016ca6:	e270      	b.n	801718a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8016ca8:	4b76      	ldr	r3, [pc, #472]	; (8016e84 <tcp_slowtmr+0x264>)
 8016caa:	781a      	ldrb	r2, [r3, #0]
 8016cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cae:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cbe:	7d1b      	ldrb	r3, [r3, #20]
 8016cc0:	2b02      	cmp	r3, #2
 8016cc2:	d10a      	bne.n	8016cda <tcp_slowtmr+0xba>
 8016cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016cca:	2b05      	cmp	r3, #5
 8016ccc:	d905      	bls.n	8016cda <tcp_slowtmr+0xba>
      ++pcb_remove;
 8016cce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016cd2:	3301      	adds	r3, #1
 8016cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016cd8:	e11e      	b.n	8016f18 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8016cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016ce0:	2b0b      	cmp	r3, #11
 8016ce2:	d905      	bls.n	8016cf0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8016ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ce8:	3301      	adds	r3, #1
 8016cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016cee:	e113      	b.n	8016f18 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8016cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cf2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d075      	beq.n	8016de6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8016cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d006      	beq.n	8016d10 <tcp_slowtmr+0xf0>
 8016d02:	4b62      	ldr	r3, [pc, #392]	; (8016e8c <tcp_slowtmr+0x26c>)
 8016d04:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8016d08:	4965      	ldr	r1, [pc, #404]	; (8016ea0 <tcp_slowtmr+0x280>)
 8016d0a:	4862      	ldr	r0, [pc, #392]	; (8016e94 <tcp_slowtmr+0x274>)
 8016d0c:	f00a fc08 	bl	8021520 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8016d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d106      	bne.n	8016d26 <tcp_slowtmr+0x106>
 8016d18:	4b5c      	ldr	r3, [pc, #368]	; (8016e8c <tcp_slowtmr+0x26c>)
 8016d1a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8016d1e:	4961      	ldr	r1, [pc, #388]	; (8016ea4 <tcp_slowtmr+0x284>)
 8016d20:	485c      	ldr	r0, [pc, #368]	; (8016e94 <tcp_slowtmr+0x274>)
 8016d22:	f00a fbfd 	bl	8021520 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8016d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d28:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016d2c:	2b0b      	cmp	r3, #11
 8016d2e:	d905      	bls.n	8016d3c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8016d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d34:	3301      	adds	r3, #1
 8016d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016d3a:	e0ed      	b.n	8016f18 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8016d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d3e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016d42:	3b01      	subs	r3, #1
 8016d44:	4a58      	ldr	r2, [pc, #352]	; (8016ea8 <tcp_slowtmr+0x288>)
 8016d46:	5cd3      	ldrb	r3, [r2, r3]
 8016d48:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8016d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016d50:	7c7a      	ldrb	r2, [r7, #17]
 8016d52:	429a      	cmp	r2, r3
 8016d54:	d907      	bls.n	8016d66 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8016d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016d5c:	3301      	adds	r3, #1
 8016d5e:	b2da      	uxtb	r2, r3
 8016d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d62:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8016d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016d6c:	7c7a      	ldrb	r2, [r7, #17]
 8016d6e:	429a      	cmp	r2, r3
 8016d70:	f200 80d2 	bhi.w	8016f18 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8016d74:	2301      	movs	r3, #1
 8016d76:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8016d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d108      	bne.n	8016d94 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8016d82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016d84:	f004 fc32 	bl	801b5ec <tcp_zero_window_probe>
 8016d88:	4603      	mov	r3, r0
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d014      	beq.n	8016db8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8016d8e:	2300      	movs	r3, #0
 8016d90:	623b      	str	r3, [r7, #32]
 8016d92:	e011      	b.n	8016db8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8016d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016d9a:	4619      	mov	r1, r3
 8016d9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016d9e:	f003 fae5 	bl	801a36c <tcp_split_unsent_seg>
 8016da2:	4603      	mov	r3, r0
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d107      	bne.n	8016db8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8016da8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016daa:	f003 fd65 	bl	801a878 <tcp_output>
 8016dae:	4603      	mov	r3, r0
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d101      	bne.n	8016db8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8016db4:	2300      	movs	r3, #0
 8016db6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8016db8:	6a3b      	ldr	r3, [r7, #32]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	f000 80ac 	beq.w	8016f18 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8016dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8016dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016dce:	2b06      	cmp	r3, #6
 8016dd0:	f200 80a2 	bhi.w	8016f18 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8016dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dd6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016dda:	3301      	adds	r3, #1
 8016ddc:	b2da      	uxtb	r2, r3
 8016dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016de0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8016de4:	e098      	b.n	8016f18 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8016de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016de8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	db0f      	blt.n	8016e10 <tcp_slowtmr+0x1f0>
 8016df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016df2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016df6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016dfa:	4293      	cmp	r3, r2
 8016dfc:	d008      	beq.n	8016e10 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8016dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016e04:	b29b      	uxth	r3, r3
 8016e06:	3301      	adds	r3, #1
 8016e08:	b29b      	uxth	r3, r3
 8016e0a:	b21a      	sxth	r2, r3
 8016e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e0e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8016e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e12:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8016e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e18:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8016e1c:	429a      	cmp	r2, r3
 8016e1e:	db7b      	blt.n	8016f18 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8016e20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e22:	f004 f821 	bl	801ae68 <tcp_rexmit_rto_prepare>
 8016e26:	4603      	mov	r3, r0
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d007      	beq.n	8016e3c <tcp_slowtmr+0x21c>
 8016e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d171      	bne.n	8016f18 <tcp_slowtmr+0x2f8>
 8016e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d06d      	beq.n	8016f18 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8016e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e3e:	7d1b      	ldrb	r3, [r3, #20]
 8016e40:	2b02      	cmp	r3, #2
 8016e42:	d03a      	beq.n	8016eba <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8016e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016e4a:	2b0c      	cmp	r3, #12
 8016e4c:	bf28      	it	cs
 8016e4e:	230c      	movcs	r3, #12
 8016e50:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8016e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016e58:	10db      	asrs	r3, r3, #3
 8016e5a:	b21b      	sxth	r3, r3
 8016e5c:	461a      	mov	r2, r3
 8016e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016e64:	4413      	add	r3, r2
 8016e66:	7efa      	ldrb	r2, [r7, #27]
 8016e68:	4910      	ldr	r1, [pc, #64]	; (8016eac <tcp_slowtmr+0x28c>)
 8016e6a:	5c8a      	ldrb	r2, [r1, r2]
 8016e6c:	4093      	lsls	r3, r2
 8016e6e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8016e70:	697b      	ldr	r3, [r7, #20]
 8016e72:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8016e76:	4293      	cmp	r3, r2
 8016e78:	dc1a      	bgt.n	8016eb0 <tcp_slowtmr+0x290>
 8016e7a:	697b      	ldr	r3, [r7, #20]
 8016e7c:	b21a      	sxth	r2, r3
 8016e7e:	e019      	b.n	8016eb4 <tcp_slowtmr+0x294>
 8016e80:	20010338 	.word	0x20010338
 8016e84:	20008fbe 	.word	0x20008fbe
 8016e88:	20010334 	.word	0x20010334
 8016e8c:	08022f5c 	.word	0x08022f5c
 8016e90:	080232a0 	.word	0x080232a0
 8016e94:	08022fa0 	.word	0x08022fa0
 8016e98:	080232cc 	.word	0x080232cc
 8016e9c:	080232f8 	.word	0x080232f8
 8016ea0:	08023328 	.word	0x08023328
 8016ea4:	0802335c 	.word	0x0802335c
 8016ea8:	08025358 	.word	0x08025358
 8016eac:	08025348 	.word	0x08025348
 8016eb0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8016eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ebc:	2200      	movs	r2, #0
 8016ebe:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8016ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ec2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ec8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016ecc:	4293      	cmp	r3, r2
 8016ece:	bf28      	it	cs
 8016ed0:	4613      	movcs	r3, r2
 8016ed2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8016ed4:	8a7b      	ldrh	r3, [r7, #18]
 8016ed6:	085b      	lsrs	r3, r3, #1
 8016ed8:	b29a      	uxth	r2, r3
 8016eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016edc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8016ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ee2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016eea:	005b      	lsls	r3, r3, #1
 8016eec:	b29b      	uxth	r3, r3
 8016eee:	429a      	cmp	r2, r3
 8016ef0:	d206      	bcs.n	8016f00 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8016ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ef4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016ef6:	005b      	lsls	r3, r3, #1
 8016ef8:	b29a      	uxth	r2, r3
 8016efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016efc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8016f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f02:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8016f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8016f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f0c:	2200      	movs	r2, #0
 8016f0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8016f12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016f14:	f004 f818 	bl	801af48 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8016f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f1a:	7d1b      	ldrb	r3, [r3, #20]
 8016f1c:	2b06      	cmp	r3, #6
 8016f1e:	d111      	bne.n	8016f44 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8016f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f22:	8b5b      	ldrh	r3, [r3, #26]
 8016f24:	f003 0310 	and.w	r3, r3, #16
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d00b      	beq.n	8016f44 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016f2c:	4b9c      	ldr	r3, [pc, #624]	; (80171a0 <tcp_slowtmr+0x580>)
 8016f2e:	681a      	ldr	r2, [r3, #0]
 8016f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f32:	6a1b      	ldr	r3, [r3, #32]
 8016f34:	1ad3      	subs	r3, r2, r3
 8016f36:	2b28      	cmp	r3, #40	; 0x28
 8016f38:	d904      	bls.n	8016f44 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8016f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f3e:	3301      	adds	r3, #1
 8016f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f46:	7a5b      	ldrb	r3, [r3, #9]
 8016f48:	f003 0308 	and.w	r3, r3, #8
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d04a      	beq.n	8016fe6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8016f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f52:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016f54:	2b04      	cmp	r3, #4
 8016f56:	d003      	beq.n	8016f60 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8016f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f5a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8016f5c:	2b07      	cmp	r3, #7
 8016f5e:	d142      	bne.n	8016fe6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016f60:	4b8f      	ldr	r3, [pc, #572]	; (80171a0 <tcp_slowtmr+0x580>)
 8016f62:	681a      	ldr	r2, [r3, #0]
 8016f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f66:	6a1b      	ldr	r3, [r3, #32]
 8016f68:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8016f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f6c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016f70:	4b8c      	ldr	r3, [pc, #560]	; (80171a4 <tcp_slowtmr+0x584>)
 8016f72:	440b      	add	r3, r1
 8016f74:	498c      	ldr	r1, [pc, #560]	; (80171a8 <tcp_slowtmr+0x588>)
 8016f76:	fba1 1303 	umull	r1, r3, r1, r3
 8016f7a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016f7c:	429a      	cmp	r2, r3
 8016f7e:	d90a      	bls.n	8016f96 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8016f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f84:	3301      	adds	r3, #1
 8016f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8016f8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f8e:	3301      	adds	r3, #1
 8016f90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016f94:	e027      	b.n	8016fe6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016f96:	4b82      	ldr	r3, [pc, #520]	; (80171a0 <tcp_slowtmr+0x580>)
 8016f98:	681a      	ldr	r2, [r3, #0]
 8016f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f9c:	6a1b      	ldr	r3, [r3, #32]
 8016f9e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8016fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fa2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fa8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016fac:	4618      	mov	r0, r3
 8016fae:	4b7f      	ldr	r3, [pc, #508]	; (80171ac <tcp_slowtmr+0x58c>)
 8016fb0:	fb03 f300 	mul.w	r3, r3, r0
 8016fb4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8016fb6:	497c      	ldr	r1, [pc, #496]	; (80171a8 <tcp_slowtmr+0x588>)
 8016fb8:	fba1 1303 	umull	r1, r3, r1, r3
 8016fbc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016fbe:	429a      	cmp	r2, r3
 8016fc0:	d911      	bls.n	8016fe6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8016fc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016fc4:	f004 fad2 	bl	801b56c <tcp_keepalive>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8016fce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d107      	bne.n	8016fe6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8016fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fd8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016fdc:	3301      	adds	r3, #1
 8016fde:	b2da      	uxtb	r2, r3
 8016fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fe2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8016fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d011      	beq.n	8017012 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8016fee:	4b6c      	ldr	r3, [pc, #432]	; (80171a0 <tcp_slowtmr+0x580>)
 8016ff0:	681a      	ldr	r2, [r3, #0]
 8016ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ff4:	6a1b      	ldr	r3, [r3, #32]
 8016ff6:	1ad2      	subs	r2, r2, r3
 8016ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ffa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8016ffe:	4619      	mov	r1, r3
 8017000:	460b      	mov	r3, r1
 8017002:	005b      	lsls	r3, r3, #1
 8017004:	440b      	add	r3, r1
 8017006:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8017008:	429a      	cmp	r2, r3
 801700a:	d302      	bcc.n	8017012 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801700c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801700e:	f000 fdd9 	bl	8017bc4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8017012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017014:	7d1b      	ldrb	r3, [r3, #20]
 8017016:	2b03      	cmp	r3, #3
 8017018:	d10b      	bne.n	8017032 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801701a:	4b61      	ldr	r3, [pc, #388]	; (80171a0 <tcp_slowtmr+0x580>)
 801701c:	681a      	ldr	r2, [r3, #0]
 801701e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017020:	6a1b      	ldr	r3, [r3, #32]
 8017022:	1ad3      	subs	r3, r2, r3
 8017024:	2b28      	cmp	r3, #40	; 0x28
 8017026:	d904      	bls.n	8017032 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8017028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801702c:	3301      	adds	r3, #1
 801702e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8017032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017034:	7d1b      	ldrb	r3, [r3, #20]
 8017036:	2b09      	cmp	r3, #9
 8017038:	d10b      	bne.n	8017052 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801703a:	4b59      	ldr	r3, [pc, #356]	; (80171a0 <tcp_slowtmr+0x580>)
 801703c:	681a      	ldr	r2, [r3, #0]
 801703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017040:	6a1b      	ldr	r3, [r3, #32]
 8017042:	1ad3      	subs	r3, r2, r3
 8017044:	2bf0      	cmp	r3, #240	; 0xf0
 8017046:	d904      	bls.n	8017052 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8017048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801704c:	3301      	adds	r3, #1
 801704e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017056:	2b00      	cmp	r3, #0
 8017058:	d060      	beq.n	801711c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801705c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017060:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8017062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017064:	f000 fbfa 	bl	801785c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8017068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801706a:	2b00      	cmp	r3, #0
 801706c:	d010      	beq.n	8017090 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801706e:	4b50      	ldr	r3, [pc, #320]	; (80171b0 <tcp_slowtmr+0x590>)
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017074:	429a      	cmp	r2, r3
 8017076:	d106      	bne.n	8017086 <tcp_slowtmr+0x466>
 8017078:	4b4e      	ldr	r3, [pc, #312]	; (80171b4 <tcp_slowtmr+0x594>)
 801707a:	f240 526d 	movw	r2, #1389	; 0x56d
 801707e:	494e      	ldr	r1, [pc, #312]	; (80171b8 <tcp_slowtmr+0x598>)
 8017080:	484e      	ldr	r0, [pc, #312]	; (80171bc <tcp_slowtmr+0x59c>)
 8017082:	f00a fa4d 	bl	8021520 <iprintf>
        prev->next = pcb->next;
 8017086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017088:	68da      	ldr	r2, [r3, #12]
 801708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801708c:	60da      	str	r2, [r3, #12]
 801708e:	e00f      	b.n	80170b0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8017090:	4b47      	ldr	r3, [pc, #284]	; (80171b0 <tcp_slowtmr+0x590>)
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017096:	429a      	cmp	r2, r3
 8017098:	d006      	beq.n	80170a8 <tcp_slowtmr+0x488>
 801709a:	4b46      	ldr	r3, [pc, #280]	; (80171b4 <tcp_slowtmr+0x594>)
 801709c:	f240 5271 	movw	r2, #1393	; 0x571
 80170a0:	4947      	ldr	r1, [pc, #284]	; (80171c0 <tcp_slowtmr+0x5a0>)
 80170a2:	4846      	ldr	r0, [pc, #280]	; (80171bc <tcp_slowtmr+0x59c>)
 80170a4:	f00a fa3c 	bl	8021520 <iprintf>
        tcp_active_pcbs = pcb->next;
 80170a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170aa:	68db      	ldr	r3, [r3, #12]
 80170ac:	4a40      	ldr	r2, [pc, #256]	; (80171b0 <tcp_slowtmr+0x590>)
 80170ae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80170b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d013      	beq.n	80170e0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80170b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80170bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80170c0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80170c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170c4:	3304      	adds	r3, #4
 80170c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80170c8:	8ad2      	ldrh	r2, [r2, #22]
 80170ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80170cc:	8b09      	ldrh	r1, [r1, #24]
 80170ce:	9102      	str	r1, [sp, #8]
 80170d0:	9201      	str	r2, [sp, #4]
 80170d2:	9300      	str	r3, [sp, #0]
 80170d4:	462b      	mov	r3, r5
 80170d6:	4622      	mov	r2, r4
 80170d8:	4601      	mov	r1, r0
 80170da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80170dc:	f004 f992 	bl	801b404 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80170e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e2:	691b      	ldr	r3, [r3, #16]
 80170e4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80170e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e8:	7d1b      	ldrb	r3, [r3, #20]
 80170ea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80170ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80170f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170f2:	68db      	ldr	r3, [r3, #12]
 80170f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80170f6:	6838      	ldr	r0, [r7, #0]
 80170f8:	f7ff f9fc 	bl	80164f4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80170fc:	4b31      	ldr	r3, [pc, #196]	; (80171c4 <tcp_slowtmr+0x5a4>)
 80170fe:	2200      	movs	r2, #0
 8017100:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d004      	beq.n	8017112 <tcp_slowtmr+0x4f2>
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	f06f 010c 	mvn.w	r1, #12
 801710e:	68b8      	ldr	r0, [r7, #8]
 8017110:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8017112:	4b2c      	ldr	r3, [pc, #176]	; (80171c4 <tcp_slowtmr+0x5a4>)
 8017114:	781b      	ldrb	r3, [r3, #0]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d037      	beq.n	801718a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801711a:	e592      	b.n	8016c42 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801711c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801711e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017122:	68db      	ldr	r3, [r3, #12]
 8017124:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8017126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017128:	7f1b      	ldrb	r3, [r3, #28]
 801712a:	3301      	adds	r3, #1
 801712c:	b2da      	uxtb	r2, r3
 801712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017130:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8017132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017134:	7f1a      	ldrb	r2, [r3, #28]
 8017136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017138:	7f5b      	ldrb	r3, [r3, #29]
 801713a:	429a      	cmp	r2, r3
 801713c:	d325      	bcc.n	801718a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017140:	2200      	movs	r2, #0
 8017142:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8017144:	4b1f      	ldr	r3, [pc, #124]	; (80171c4 <tcp_slowtmr+0x5a4>)
 8017146:	2200      	movs	r2, #0
 8017148:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801714a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801714c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017150:	2b00      	cmp	r3, #0
 8017152:	d00b      	beq.n	801716c <tcp_slowtmr+0x54c>
 8017154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801715a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801715c:	6912      	ldr	r2, [r2, #16]
 801715e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017160:	4610      	mov	r0, r2
 8017162:	4798      	blx	r3
 8017164:	4603      	mov	r3, r0
 8017166:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801716a:	e002      	b.n	8017172 <tcp_slowtmr+0x552>
 801716c:	2300      	movs	r3, #0
 801716e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8017172:	4b14      	ldr	r3, [pc, #80]	; (80171c4 <tcp_slowtmr+0x5a4>)
 8017174:	781b      	ldrb	r3, [r3, #0]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d000      	beq.n	801717c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801717a:	e562      	b.n	8016c42 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801717c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8017180:	2b00      	cmp	r3, #0
 8017182:	d102      	bne.n	801718a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8017184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017186:	f003 fb77 	bl	801a878 <tcp_output>
  while (pcb != NULL) {
 801718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801718c:	2b00      	cmp	r3, #0
 801718e:	f47f ad5e 	bne.w	8016c4e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8017192:	2300      	movs	r3, #0
 8017194:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8017196:	4b0c      	ldr	r3, [pc, #48]	; (80171c8 <tcp_slowtmr+0x5a8>)
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801719c:	e069      	b.n	8017272 <tcp_slowtmr+0x652>
 801719e:	bf00      	nop
 80171a0:	20010338 	.word	0x20010338
 80171a4:	000a4cb8 	.word	0x000a4cb8
 80171a8:	10624dd3 	.word	0x10624dd3
 80171ac:	000124f8 	.word	0x000124f8
 80171b0:	20010334 	.word	0x20010334
 80171b4:	08022f5c 	.word	0x08022f5c
 80171b8:	08023394 	.word	0x08023394
 80171bc:	08022fa0 	.word	0x08022fa0
 80171c0:	080233c0 	.word	0x080233c0
 80171c4:	20010330 	.word	0x20010330
 80171c8:	20010344 	.word	0x20010344
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80171cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ce:	7d1b      	ldrb	r3, [r3, #20]
 80171d0:	2b0a      	cmp	r3, #10
 80171d2:	d006      	beq.n	80171e2 <tcp_slowtmr+0x5c2>
 80171d4:	4b2a      	ldr	r3, [pc, #168]	; (8017280 <tcp_slowtmr+0x660>)
 80171d6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80171da:	492a      	ldr	r1, [pc, #168]	; (8017284 <tcp_slowtmr+0x664>)
 80171dc:	482a      	ldr	r0, [pc, #168]	; (8017288 <tcp_slowtmr+0x668>)
 80171de:	f00a f99f 	bl	8021520 <iprintf>
    pcb_remove = 0;
 80171e2:	2300      	movs	r3, #0
 80171e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80171e8:	4b28      	ldr	r3, [pc, #160]	; (801728c <tcp_slowtmr+0x66c>)
 80171ea:	681a      	ldr	r2, [r3, #0]
 80171ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ee:	6a1b      	ldr	r3, [r3, #32]
 80171f0:	1ad3      	subs	r3, r2, r3
 80171f2:	2bf0      	cmp	r3, #240	; 0xf0
 80171f4:	d904      	bls.n	8017200 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80171f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171fa:	3301      	adds	r3, #1
 80171fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017204:	2b00      	cmp	r3, #0
 8017206:	d02f      	beq.n	8017268 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8017208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801720a:	f000 fb27 	bl	801785c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801720e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017210:	2b00      	cmp	r3, #0
 8017212:	d010      	beq.n	8017236 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8017214:	4b1e      	ldr	r3, [pc, #120]	; (8017290 <tcp_slowtmr+0x670>)
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801721a:	429a      	cmp	r2, r3
 801721c:	d106      	bne.n	801722c <tcp_slowtmr+0x60c>
 801721e:	4b18      	ldr	r3, [pc, #96]	; (8017280 <tcp_slowtmr+0x660>)
 8017220:	f240 52af 	movw	r2, #1455	; 0x5af
 8017224:	491b      	ldr	r1, [pc, #108]	; (8017294 <tcp_slowtmr+0x674>)
 8017226:	4818      	ldr	r0, [pc, #96]	; (8017288 <tcp_slowtmr+0x668>)
 8017228:	f00a f97a 	bl	8021520 <iprintf>
        prev->next = pcb->next;
 801722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801722e:	68da      	ldr	r2, [r3, #12]
 8017230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017232:	60da      	str	r2, [r3, #12]
 8017234:	e00f      	b.n	8017256 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8017236:	4b16      	ldr	r3, [pc, #88]	; (8017290 <tcp_slowtmr+0x670>)
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801723c:	429a      	cmp	r2, r3
 801723e:	d006      	beq.n	801724e <tcp_slowtmr+0x62e>
 8017240:	4b0f      	ldr	r3, [pc, #60]	; (8017280 <tcp_slowtmr+0x660>)
 8017242:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8017246:	4914      	ldr	r1, [pc, #80]	; (8017298 <tcp_slowtmr+0x678>)
 8017248:	480f      	ldr	r0, [pc, #60]	; (8017288 <tcp_slowtmr+0x668>)
 801724a:	f00a f969 	bl	8021520 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801724e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017250:	68db      	ldr	r3, [r3, #12]
 8017252:	4a0f      	ldr	r2, [pc, #60]	; (8017290 <tcp_slowtmr+0x670>)
 8017254:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8017256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017258:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801725a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801725c:	68db      	ldr	r3, [r3, #12]
 801725e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8017260:	69f8      	ldr	r0, [r7, #28]
 8017262:	f7ff f947 	bl	80164f4 <tcp_free>
 8017266:	e004      	b.n	8017272 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8017268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801726a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801726e:	68db      	ldr	r3, [r3, #12]
 8017270:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017274:	2b00      	cmp	r3, #0
 8017276:	d1a9      	bne.n	80171cc <tcp_slowtmr+0x5ac>
    }
  }
}
 8017278:	bf00      	nop
 801727a:	3730      	adds	r7, #48	; 0x30
 801727c:	46bd      	mov	sp, r7
 801727e:	bdb0      	pop	{r4, r5, r7, pc}
 8017280:	08022f5c 	.word	0x08022f5c
 8017284:	080233ec 	.word	0x080233ec
 8017288:	08022fa0 	.word	0x08022fa0
 801728c:	20010338 	.word	0x20010338
 8017290:	20010344 	.word	0x20010344
 8017294:	0802341c 	.word	0x0802341c
 8017298:	08023444 	.word	0x08023444

0801729c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801729c:	b580      	push	{r7, lr}
 801729e:	b082      	sub	sp, #8
 80172a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80172a2:	4b2d      	ldr	r3, [pc, #180]	; (8017358 <tcp_fasttmr+0xbc>)
 80172a4:	781b      	ldrb	r3, [r3, #0]
 80172a6:	3301      	adds	r3, #1
 80172a8:	b2da      	uxtb	r2, r3
 80172aa:	4b2b      	ldr	r3, [pc, #172]	; (8017358 <tcp_fasttmr+0xbc>)
 80172ac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80172ae:	4b2b      	ldr	r3, [pc, #172]	; (801735c <tcp_fasttmr+0xc0>)
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80172b4:	e048      	b.n	8017348 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	7f9a      	ldrb	r2, [r3, #30]
 80172ba:	4b27      	ldr	r3, [pc, #156]	; (8017358 <tcp_fasttmr+0xbc>)
 80172bc:	781b      	ldrb	r3, [r3, #0]
 80172be:	429a      	cmp	r2, r3
 80172c0:	d03f      	beq.n	8017342 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80172c2:	4b25      	ldr	r3, [pc, #148]	; (8017358 <tcp_fasttmr+0xbc>)
 80172c4:	781a      	ldrb	r2, [r3, #0]
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	8b5b      	ldrh	r3, [r3, #26]
 80172ce:	f003 0301 	and.w	r3, r3, #1
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d010      	beq.n	80172f8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	8b5b      	ldrh	r3, [r3, #26]
 80172da:	f043 0302 	orr.w	r3, r3, #2
 80172de:	b29a      	uxth	r2, r3
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80172e4:	6878      	ldr	r0, [r7, #4]
 80172e6:	f003 fac7 	bl	801a878 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	8b5b      	ldrh	r3, [r3, #26]
 80172ee:	f023 0303 	bic.w	r3, r3, #3
 80172f2:	b29a      	uxth	r2, r3
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	8b5b      	ldrh	r3, [r3, #26]
 80172fc:	f003 0308 	and.w	r3, r3, #8
 8017300:	2b00      	cmp	r3, #0
 8017302:	d009      	beq.n	8017318 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	8b5b      	ldrh	r3, [r3, #26]
 8017308:	f023 0308 	bic.w	r3, r3, #8
 801730c:	b29a      	uxth	r2, r3
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8017312:	6878      	ldr	r0, [r7, #4]
 8017314:	f7ff fa7e 	bl	8016814 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	68db      	ldr	r3, [r3, #12]
 801731c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017322:	2b00      	cmp	r3, #0
 8017324:	d00a      	beq.n	801733c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8017326:	4b0e      	ldr	r3, [pc, #56]	; (8017360 <tcp_fasttmr+0xc4>)
 8017328:	2200      	movs	r2, #0
 801732a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801732c:	6878      	ldr	r0, [r7, #4]
 801732e:	f000 f819 	bl	8017364 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8017332:	4b0b      	ldr	r3, [pc, #44]	; (8017360 <tcp_fasttmr+0xc4>)
 8017334:	781b      	ldrb	r3, [r3, #0]
 8017336:	2b00      	cmp	r3, #0
 8017338:	d000      	beq.n	801733c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801733a:	e7b8      	b.n	80172ae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801733c:	683b      	ldr	r3, [r7, #0]
 801733e:	607b      	str	r3, [r7, #4]
 8017340:	e002      	b.n	8017348 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	68db      	ldr	r3, [r3, #12]
 8017346:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d1b3      	bne.n	80172b6 <tcp_fasttmr+0x1a>
    }
  }
}
 801734e:	bf00      	nop
 8017350:	3708      	adds	r7, #8
 8017352:	46bd      	mov	sp, r7
 8017354:	bd80      	pop	{r7, pc}
 8017356:	bf00      	nop
 8017358:	20008fbe 	.word	0x20008fbe
 801735c:	20010334 	.word	0x20010334
 8017360:	20010330 	.word	0x20010330

08017364 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8017364:	b590      	push	{r4, r7, lr}
 8017366:	b085      	sub	sp, #20
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d109      	bne.n	8017386 <tcp_process_refused_data+0x22>
 8017372:	4b37      	ldr	r3, [pc, #220]	; (8017450 <tcp_process_refused_data+0xec>)
 8017374:	f240 6209 	movw	r2, #1545	; 0x609
 8017378:	4936      	ldr	r1, [pc, #216]	; (8017454 <tcp_process_refused_data+0xf0>)
 801737a:	4837      	ldr	r0, [pc, #220]	; (8017458 <tcp_process_refused_data+0xf4>)
 801737c:	f00a f8d0 	bl	8021520 <iprintf>
 8017380:	f06f 030f 	mvn.w	r3, #15
 8017384:	e060      	b.n	8017448 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801738a:	7b5b      	ldrb	r3, [r3, #13]
 801738c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017392:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	2200      	movs	r2, #0
 8017398:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d00b      	beq.n	80173bc <tcp_process_refused_data+0x58>
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	6918      	ldr	r0, [r3, #16]
 80173ae:	2300      	movs	r3, #0
 80173b0:	68ba      	ldr	r2, [r7, #8]
 80173b2:	6879      	ldr	r1, [r7, #4]
 80173b4:	47a0      	blx	r4
 80173b6:	4603      	mov	r3, r0
 80173b8:	73fb      	strb	r3, [r7, #15]
 80173ba:	e007      	b.n	80173cc <tcp_process_refused_data+0x68>
 80173bc:	2300      	movs	r3, #0
 80173be:	68ba      	ldr	r2, [r7, #8]
 80173c0:	6879      	ldr	r1, [r7, #4]
 80173c2:	2000      	movs	r0, #0
 80173c4:	f000 f8a2 	bl	801750c <tcp_recv_null>
 80173c8:	4603      	mov	r3, r0
 80173ca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80173cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d12a      	bne.n	801742a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80173d4:	7bbb      	ldrb	r3, [r7, #14]
 80173d6:	f003 0320 	and.w	r3, r3, #32
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d033      	beq.n	8017446 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80173e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80173e6:	d005      	beq.n	80173f4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80173ec:	3301      	adds	r3, #1
 80173ee:	b29a      	uxth	r2, r3
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d00b      	beq.n	8017416 <tcp_process_refused_data+0xb2>
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	6918      	ldr	r0, [r3, #16]
 8017408:	2300      	movs	r3, #0
 801740a:	2200      	movs	r2, #0
 801740c:	6879      	ldr	r1, [r7, #4]
 801740e:	47a0      	blx	r4
 8017410:	4603      	mov	r3, r0
 8017412:	73fb      	strb	r3, [r7, #15]
 8017414:	e001      	b.n	801741a <tcp_process_refused_data+0xb6>
 8017416:	2300      	movs	r3, #0
 8017418:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801741a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801741e:	f113 0f0d 	cmn.w	r3, #13
 8017422:	d110      	bne.n	8017446 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8017424:	f06f 030c 	mvn.w	r3, #12
 8017428:	e00e      	b.n	8017448 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801742a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801742e:	f113 0f0d 	cmn.w	r3, #13
 8017432:	d102      	bne.n	801743a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8017434:	f06f 030c 	mvn.w	r3, #12
 8017438:	e006      	b.n	8017448 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	68ba      	ldr	r2, [r7, #8]
 801743e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8017440:	f06f 0304 	mvn.w	r3, #4
 8017444:	e000      	b.n	8017448 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8017446:	2300      	movs	r3, #0
}
 8017448:	4618      	mov	r0, r3
 801744a:	3714      	adds	r7, #20
 801744c:	46bd      	mov	sp, r7
 801744e:	bd90      	pop	{r4, r7, pc}
 8017450:	08022f5c 	.word	0x08022f5c
 8017454:	0802346c 	.word	0x0802346c
 8017458:	08022fa0 	.word	0x08022fa0

0801745c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b084      	sub	sp, #16
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8017464:	e007      	b.n	8017476 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801746c:	6878      	ldr	r0, [r7, #4]
 801746e:	f000 f809 	bl	8017484 <tcp_seg_free>
    seg = next;
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d1f4      	bne.n	8017466 <tcp_segs_free+0xa>
  }
}
 801747c:	bf00      	nop
 801747e:	3710      	adds	r7, #16
 8017480:	46bd      	mov	sp, r7
 8017482:	bd80      	pop	{r7, pc}

08017484 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b082      	sub	sp, #8
 8017488:	af00      	add	r7, sp, #0
 801748a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d00c      	beq.n	80174ac <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	685b      	ldr	r3, [r3, #4]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d004      	beq.n	80174a4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	685b      	ldr	r3, [r3, #4]
 801749e:	4618      	mov	r0, r3
 80174a0:	f7fe fd6c 	bl	8015f7c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80174a4:	6879      	ldr	r1, [r7, #4]
 80174a6:	2003      	movs	r0, #3
 80174a8:	f7fd fea2 	bl	80151f0 <memp_free>
  }
}
 80174ac:	bf00      	nop
 80174ae:	3708      	adds	r7, #8
 80174b0:	46bd      	mov	sp, r7
 80174b2:	bd80      	pop	{r7, pc}

080174b4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80174b4:	b580      	push	{r7, lr}
 80174b6:	b084      	sub	sp, #16
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d106      	bne.n	80174d0 <tcp_seg_copy+0x1c>
 80174c2:	4b0f      	ldr	r3, [pc, #60]	; (8017500 <tcp_seg_copy+0x4c>)
 80174c4:	f240 6282 	movw	r2, #1666	; 0x682
 80174c8:	490e      	ldr	r1, [pc, #56]	; (8017504 <tcp_seg_copy+0x50>)
 80174ca:	480f      	ldr	r0, [pc, #60]	; (8017508 <tcp_seg_copy+0x54>)
 80174cc:	f00a f828 	bl	8021520 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80174d0:	2003      	movs	r0, #3
 80174d2:	f7fd fe3b 	bl	801514c <memp_malloc>
 80174d6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d101      	bne.n	80174e2 <tcp_seg_copy+0x2e>
    return NULL;
 80174de:	2300      	movs	r3, #0
 80174e0:	e00a      	b.n	80174f8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80174e2:	2210      	movs	r2, #16
 80174e4:	6879      	ldr	r1, [r7, #4]
 80174e6:	68f8      	ldr	r0, [r7, #12]
 80174e8:	f009 ff5f 	bl	80213aa <memcpy>
  pbuf_ref(cseg->p);
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	685b      	ldr	r3, [r3, #4]
 80174f0:	4618      	mov	r0, r3
 80174f2:	f7fe fde9 	bl	80160c8 <pbuf_ref>
  return cseg;
 80174f6:	68fb      	ldr	r3, [r7, #12]
}
 80174f8:	4618      	mov	r0, r3
 80174fa:	3710      	adds	r7, #16
 80174fc:	46bd      	mov	sp, r7
 80174fe:	bd80      	pop	{r7, pc}
 8017500:	08022f5c 	.word	0x08022f5c
 8017504:	080234b0 	.word	0x080234b0
 8017508:	08022fa0 	.word	0x08022fa0

0801750c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801750c:	b580      	push	{r7, lr}
 801750e:	b084      	sub	sp, #16
 8017510:	af00      	add	r7, sp, #0
 8017512:	60f8      	str	r0, [r7, #12]
 8017514:	60b9      	str	r1, [r7, #8]
 8017516:	607a      	str	r2, [r7, #4]
 8017518:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801751a:	68bb      	ldr	r3, [r7, #8]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d109      	bne.n	8017534 <tcp_recv_null+0x28>
 8017520:	4b12      	ldr	r3, [pc, #72]	; (801756c <tcp_recv_null+0x60>)
 8017522:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017526:	4912      	ldr	r1, [pc, #72]	; (8017570 <tcp_recv_null+0x64>)
 8017528:	4812      	ldr	r0, [pc, #72]	; (8017574 <tcp_recv_null+0x68>)
 801752a:	f009 fff9 	bl	8021520 <iprintf>
 801752e:	f06f 030f 	mvn.w	r3, #15
 8017532:	e016      	b.n	8017562 <tcp_recv_null+0x56>

  if (p != NULL) {
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	2b00      	cmp	r3, #0
 8017538:	d009      	beq.n	801754e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	891b      	ldrh	r3, [r3, #8]
 801753e:	4619      	mov	r1, r3
 8017540:	68b8      	ldr	r0, [r7, #8]
 8017542:	f7ff fb1d 	bl	8016b80 <tcp_recved>
    pbuf_free(p);
 8017546:	6878      	ldr	r0, [r7, #4]
 8017548:	f7fe fd18 	bl	8015f7c <pbuf_free>
 801754c:	e008      	b.n	8017560 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801754e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d104      	bne.n	8017560 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8017556:	68b8      	ldr	r0, [r7, #8]
 8017558:	f7ff f9c2 	bl	80168e0 <tcp_close>
 801755c:	4603      	mov	r3, r0
 801755e:	e000      	b.n	8017562 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8017560:	2300      	movs	r3, #0
}
 8017562:	4618      	mov	r0, r3
 8017564:	3710      	adds	r7, #16
 8017566:	46bd      	mov	sp, r7
 8017568:	bd80      	pop	{r7, pc}
 801756a:	bf00      	nop
 801756c:	08022f5c 	.word	0x08022f5c
 8017570:	080234cc 	.word	0x080234cc
 8017574:	08022fa0 	.word	0x08022fa0

08017578 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8017578:	b580      	push	{r7, lr}
 801757a:	b086      	sub	sp, #24
 801757c:	af00      	add	r7, sp, #0
 801757e:	4603      	mov	r3, r0
 8017580:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8017582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017586:	2b00      	cmp	r3, #0
 8017588:	db01      	blt.n	801758e <tcp_kill_prio+0x16>
 801758a:	79fb      	ldrb	r3, [r7, #7]
 801758c:	e000      	b.n	8017590 <tcp_kill_prio+0x18>
 801758e:	237f      	movs	r3, #127	; 0x7f
 8017590:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8017592:	7afb      	ldrb	r3, [r7, #11]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d034      	beq.n	8017602 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8017598:	7afb      	ldrb	r3, [r7, #11]
 801759a:	3b01      	subs	r3, #1
 801759c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801759e:	2300      	movs	r3, #0
 80175a0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80175a2:	2300      	movs	r3, #0
 80175a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80175a6:	4b19      	ldr	r3, [pc, #100]	; (801760c <tcp_kill_prio+0x94>)
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	617b      	str	r3, [r7, #20]
 80175ac:	e01f      	b.n	80175ee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80175ae:	697b      	ldr	r3, [r7, #20]
 80175b0:	7d5b      	ldrb	r3, [r3, #21]
 80175b2:	7afa      	ldrb	r2, [r7, #11]
 80175b4:	429a      	cmp	r2, r3
 80175b6:	d80c      	bhi.n	80175d2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80175b8:	697b      	ldr	r3, [r7, #20]
 80175ba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80175bc:	7afa      	ldrb	r2, [r7, #11]
 80175be:	429a      	cmp	r2, r3
 80175c0:	d112      	bne.n	80175e8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80175c2:	4b13      	ldr	r3, [pc, #76]	; (8017610 <tcp_kill_prio+0x98>)
 80175c4:	681a      	ldr	r2, [r3, #0]
 80175c6:	697b      	ldr	r3, [r7, #20]
 80175c8:	6a1b      	ldr	r3, [r3, #32]
 80175ca:	1ad3      	subs	r3, r2, r3
 80175cc:	68fa      	ldr	r2, [r7, #12]
 80175ce:	429a      	cmp	r2, r3
 80175d0:	d80a      	bhi.n	80175e8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80175d2:	4b0f      	ldr	r3, [pc, #60]	; (8017610 <tcp_kill_prio+0x98>)
 80175d4:	681a      	ldr	r2, [r3, #0]
 80175d6:	697b      	ldr	r3, [r7, #20]
 80175d8:	6a1b      	ldr	r3, [r3, #32]
 80175da:	1ad3      	subs	r3, r2, r3
 80175dc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80175de:	697b      	ldr	r3, [r7, #20]
 80175e0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80175e2:	697b      	ldr	r3, [r7, #20]
 80175e4:	7d5b      	ldrb	r3, [r3, #21]
 80175e6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80175e8:	697b      	ldr	r3, [r7, #20]
 80175ea:	68db      	ldr	r3, [r3, #12]
 80175ec:	617b      	str	r3, [r7, #20]
 80175ee:	697b      	ldr	r3, [r7, #20]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d1dc      	bne.n	80175ae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80175f4:	693b      	ldr	r3, [r7, #16]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d004      	beq.n	8017604 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80175fa:	6938      	ldr	r0, [r7, #16]
 80175fc:	f7ff fa5a 	bl	8016ab4 <tcp_abort>
 8017600:	e000      	b.n	8017604 <tcp_kill_prio+0x8c>
    return;
 8017602:	bf00      	nop
  }
}
 8017604:	3718      	adds	r7, #24
 8017606:	46bd      	mov	sp, r7
 8017608:	bd80      	pop	{r7, pc}
 801760a:	bf00      	nop
 801760c:	20010334 	.word	0x20010334
 8017610:	20010338 	.word	0x20010338

08017614 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b086      	sub	sp, #24
 8017618:	af00      	add	r7, sp, #0
 801761a:	4603      	mov	r3, r0
 801761c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801761e:	79fb      	ldrb	r3, [r7, #7]
 8017620:	2b08      	cmp	r3, #8
 8017622:	d009      	beq.n	8017638 <tcp_kill_state+0x24>
 8017624:	79fb      	ldrb	r3, [r7, #7]
 8017626:	2b09      	cmp	r3, #9
 8017628:	d006      	beq.n	8017638 <tcp_kill_state+0x24>
 801762a:	4b1a      	ldr	r3, [pc, #104]	; (8017694 <tcp_kill_state+0x80>)
 801762c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8017630:	4919      	ldr	r1, [pc, #100]	; (8017698 <tcp_kill_state+0x84>)
 8017632:	481a      	ldr	r0, [pc, #104]	; (801769c <tcp_kill_state+0x88>)
 8017634:	f009 ff74 	bl	8021520 <iprintf>

  inactivity = 0;
 8017638:	2300      	movs	r3, #0
 801763a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801763c:	2300      	movs	r3, #0
 801763e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017640:	4b17      	ldr	r3, [pc, #92]	; (80176a0 <tcp_kill_state+0x8c>)
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	617b      	str	r3, [r7, #20]
 8017646:	e017      	b.n	8017678 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8017648:	697b      	ldr	r3, [r7, #20]
 801764a:	7d1b      	ldrb	r3, [r3, #20]
 801764c:	79fa      	ldrb	r2, [r7, #7]
 801764e:	429a      	cmp	r2, r3
 8017650:	d10f      	bne.n	8017672 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017652:	4b14      	ldr	r3, [pc, #80]	; (80176a4 <tcp_kill_state+0x90>)
 8017654:	681a      	ldr	r2, [r3, #0]
 8017656:	697b      	ldr	r3, [r7, #20]
 8017658:	6a1b      	ldr	r3, [r3, #32]
 801765a:	1ad3      	subs	r3, r2, r3
 801765c:	68fa      	ldr	r2, [r7, #12]
 801765e:	429a      	cmp	r2, r3
 8017660:	d807      	bhi.n	8017672 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8017662:	4b10      	ldr	r3, [pc, #64]	; (80176a4 <tcp_kill_state+0x90>)
 8017664:	681a      	ldr	r2, [r3, #0]
 8017666:	697b      	ldr	r3, [r7, #20]
 8017668:	6a1b      	ldr	r3, [r3, #32]
 801766a:	1ad3      	subs	r3, r2, r3
 801766c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801766e:	697b      	ldr	r3, [r7, #20]
 8017670:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017672:	697b      	ldr	r3, [r7, #20]
 8017674:	68db      	ldr	r3, [r3, #12]
 8017676:	617b      	str	r3, [r7, #20]
 8017678:	697b      	ldr	r3, [r7, #20]
 801767a:	2b00      	cmp	r3, #0
 801767c:	d1e4      	bne.n	8017648 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801767e:	693b      	ldr	r3, [r7, #16]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d003      	beq.n	801768c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017684:	2100      	movs	r1, #0
 8017686:	6938      	ldr	r0, [r7, #16]
 8017688:	f7ff f956 	bl	8016938 <tcp_abandon>
  }
}
 801768c:	bf00      	nop
 801768e:	3718      	adds	r7, #24
 8017690:	46bd      	mov	sp, r7
 8017692:	bd80      	pop	{r7, pc}
 8017694:	08022f5c 	.word	0x08022f5c
 8017698:	080234e8 	.word	0x080234e8
 801769c:	08022fa0 	.word	0x08022fa0
 80176a0:	20010334 	.word	0x20010334
 80176a4:	20010338 	.word	0x20010338

080176a8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b084      	sub	sp, #16
 80176ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80176ae:	2300      	movs	r3, #0
 80176b0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80176b2:	2300      	movs	r3, #0
 80176b4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80176b6:	4b12      	ldr	r3, [pc, #72]	; (8017700 <tcp_kill_timewait+0x58>)
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	60fb      	str	r3, [r7, #12]
 80176bc:	e012      	b.n	80176e4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80176be:	4b11      	ldr	r3, [pc, #68]	; (8017704 <tcp_kill_timewait+0x5c>)
 80176c0:	681a      	ldr	r2, [r3, #0]
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	6a1b      	ldr	r3, [r3, #32]
 80176c6:	1ad3      	subs	r3, r2, r3
 80176c8:	687a      	ldr	r2, [r7, #4]
 80176ca:	429a      	cmp	r2, r3
 80176cc:	d807      	bhi.n	80176de <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80176ce:	4b0d      	ldr	r3, [pc, #52]	; (8017704 <tcp_kill_timewait+0x5c>)
 80176d0:	681a      	ldr	r2, [r3, #0]
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	6a1b      	ldr	r3, [r3, #32]
 80176d6:	1ad3      	subs	r3, r2, r3
 80176d8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	68db      	ldr	r3, [r3, #12]
 80176e2:	60fb      	str	r3, [r7, #12]
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d1e9      	bne.n	80176be <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80176ea:	68bb      	ldr	r3, [r7, #8]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d002      	beq.n	80176f6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80176f0:	68b8      	ldr	r0, [r7, #8]
 80176f2:	f7ff f9df 	bl	8016ab4 <tcp_abort>
  }
}
 80176f6:	bf00      	nop
 80176f8:	3710      	adds	r7, #16
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd80      	pop	{r7, pc}
 80176fe:	bf00      	nop
 8017700:	20010344 	.word	0x20010344
 8017704:	20010338 	.word	0x20010338

08017708 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b082      	sub	sp, #8
 801770c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801770e:	4b10      	ldr	r3, [pc, #64]	; (8017750 <tcp_handle_closepend+0x48>)
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017714:	e014      	b.n	8017740 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	68db      	ldr	r3, [r3, #12]
 801771a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	8b5b      	ldrh	r3, [r3, #26]
 8017720:	f003 0308 	and.w	r3, r3, #8
 8017724:	2b00      	cmp	r3, #0
 8017726:	d009      	beq.n	801773c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	8b5b      	ldrh	r3, [r3, #26]
 801772c:	f023 0308 	bic.w	r3, r3, #8
 8017730:	b29a      	uxth	r2, r3
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8017736:	6878      	ldr	r0, [r7, #4]
 8017738:	f7ff f86c 	bl	8016814 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801773c:	683b      	ldr	r3, [r7, #0]
 801773e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d1e7      	bne.n	8017716 <tcp_handle_closepend+0xe>
  }
}
 8017746:	bf00      	nop
 8017748:	3708      	adds	r7, #8
 801774a:	46bd      	mov	sp, r7
 801774c:	bd80      	pop	{r7, pc}
 801774e:	bf00      	nop
 8017750:	20010334 	.word	0x20010334

08017754 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017754:	b580      	push	{r7, lr}
 8017756:	b084      	sub	sp, #16
 8017758:	af00      	add	r7, sp, #0
 801775a:	4603      	mov	r3, r0
 801775c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801775e:	2001      	movs	r0, #1
 8017760:	f7fd fcf4 	bl	801514c <memp_malloc>
 8017764:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d126      	bne.n	80177ba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801776c:	f7ff ffcc 	bl	8017708 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017770:	f7ff ff9a 	bl	80176a8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017774:	2001      	movs	r0, #1
 8017776:	f7fd fce9 	bl	801514c <memp_malloc>
 801777a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d11b      	bne.n	80177ba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017782:	2009      	movs	r0, #9
 8017784:	f7ff ff46 	bl	8017614 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017788:	2001      	movs	r0, #1
 801778a:	f7fd fcdf 	bl	801514c <memp_malloc>
 801778e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	2b00      	cmp	r3, #0
 8017794:	d111      	bne.n	80177ba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8017796:	2008      	movs	r0, #8
 8017798:	f7ff ff3c 	bl	8017614 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801779c:	2001      	movs	r0, #1
 801779e:	f7fd fcd5 	bl	801514c <memp_malloc>
 80177a2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d107      	bne.n	80177ba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80177aa:	79fb      	ldrb	r3, [r7, #7]
 80177ac:	4618      	mov	r0, r3
 80177ae:	f7ff fee3 	bl	8017578 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80177b2:	2001      	movs	r0, #1
 80177b4:	f7fd fcca 	bl	801514c <memp_malloc>
 80177b8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d03f      	beq.n	8017840 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80177c0:	229c      	movs	r2, #156	; 0x9c
 80177c2:	2100      	movs	r1, #0
 80177c4:	68f8      	ldr	r0, [r7, #12]
 80177c6:	f009 fdfb 	bl	80213c0 <memset>
    pcb->prio = prio;
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	79fa      	ldrb	r2, [r7, #7]
 80177ce:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80177d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80177e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	22ff      	movs	r2, #255	; 0xff
 80177ee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80177f6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	2206      	movs	r2, #6
 80177fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	2206      	movs	r2, #6
 8017804:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801780c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	2201      	movs	r2, #1
 8017812:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8017816:	4b0d      	ldr	r3, [pc, #52]	; (801784c <tcp_alloc+0xf8>)
 8017818:	681a      	ldr	r2, [r3, #0]
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801781e:	4b0c      	ldr	r3, [pc, #48]	; (8017850 <tcp_alloc+0xfc>)
 8017820:	781a      	ldrb	r2, [r3, #0]
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801782c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	4a08      	ldr	r2, [pc, #32]	; (8017854 <tcp_alloc+0x100>)
 8017834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	4a07      	ldr	r2, [pc, #28]	; (8017858 <tcp_alloc+0x104>)
 801783c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017840:	68fb      	ldr	r3, [r7, #12]
}
 8017842:	4618      	mov	r0, r3
 8017844:	3710      	adds	r7, #16
 8017846:	46bd      	mov	sp, r7
 8017848:	bd80      	pop	{r7, pc}
 801784a:	bf00      	nop
 801784c:	20010338 	.word	0x20010338
 8017850:	20008fbe 	.word	0x20008fbe
 8017854:	0801750d 	.word	0x0801750d
 8017858:	006ddd00 	.word	0x006ddd00

0801785c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801785c:	b580      	push	{r7, lr}
 801785e:	b082      	sub	sp, #8
 8017860:	af00      	add	r7, sp, #0
 8017862:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	2b00      	cmp	r3, #0
 8017868:	d107      	bne.n	801787a <tcp_pcb_purge+0x1e>
 801786a:	4b21      	ldr	r3, [pc, #132]	; (80178f0 <tcp_pcb_purge+0x94>)
 801786c:	f640 0251 	movw	r2, #2129	; 0x851
 8017870:	4920      	ldr	r1, [pc, #128]	; (80178f4 <tcp_pcb_purge+0x98>)
 8017872:	4821      	ldr	r0, [pc, #132]	; (80178f8 <tcp_pcb_purge+0x9c>)
 8017874:	f009 fe54 	bl	8021520 <iprintf>
 8017878:	e037      	b.n	80178ea <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	7d1b      	ldrb	r3, [r3, #20]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d033      	beq.n	80178ea <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017886:	2b0a      	cmp	r3, #10
 8017888:	d02f      	beq.n	80178ea <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801788e:	2b01      	cmp	r3, #1
 8017890:	d02b      	beq.n	80178ea <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017896:	2b00      	cmp	r3, #0
 8017898:	d007      	beq.n	80178aa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801789e:	4618      	mov	r0, r3
 80178a0:	f7fe fb6c 	bl	8015f7c <pbuf_free>
      pcb->refused_data = NULL;
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	2200      	movs	r2, #0
 80178a8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d002      	beq.n	80178b8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f000 f986 	bl	8017bc4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80178be:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80178c4:	4618      	mov	r0, r3
 80178c6:	f7ff fdc9 	bl	801745c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80178ce:	4618      	mov	r0, r3
 80178d0:	f7ff fdc4 	bl	801745c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	2200      	movs	r2, #0
 80178d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	2200      	movs	r2, #0
 80178e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80178ea:	3708      	adds	r7, #8
 80178ec:	46bd      	mov	sp, r7
 80178ee:	bd80      	pop	{r7, pc}
 80178f0:	08022f5c 	.word	0x08022f5c
 80178f4:	080235a8 	.word	0x080235a8
 80178f8:	08022fa0 	.word	0x08022fa0

080178fc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b084      	sub	sp, #16
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
 8017904:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017906:	683b      	ldr	r3, [r7, #0]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d106      	bne.n	801791a <tcp_pcb_remove+0x1e>
 801790c:	4b3e      	ldr	r3, [pc, #248]	; (8017a08 <tcp_pcb_remove+0x10c>)
 801790e:	f640 0283 	movw	r2, #2179	; 0x883
 8017912:	493e      	ldr	r1, [pc, #248]	; (8017a0c <tcp_pcb_remove+0x110>)
 8017914:	483e      	ldr	r0, [pc, #248]	; (8017a10 <tcp_pcb_remove+0x114>)
 8017916:	f009 fe03 	bl	8021520 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d106      	bne.n	801792e <tcp_pcb_remove+0x32>
 8017920:	4b39      	ldr	r3, [pc, #228]	; (8017a08 <tcp_pcb_remove+0x10c>)
 8017922:	f640 0284 	movw	r2, #2180	; 0x884
 8017926:	493b      	ldr	r1, [pc, #236]	; (8017a14 <tcp_pcb_remove+0x118>)
 8017928:	4839      	ldr	r0, [pc, #228]	; (8017a10 <tcp_pcb_remove+0x114>)
 801792a:	f009 fdf9 	bl	8021520 <iprintf>

  TCP_RMV(pcblist, pcb);
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	683a      	ldr	r2, [r7, #0]
 8017934:	429a      	cmp	r2, r3
 8017936:	d105      	bne.n	8017944 <tcp_pcb_remove+0x48>
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	68da      	ldr	r2, [r3, #12]
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	601a      	str	r2, [r3, #0]
 8017942:	e013      	b.n	801796c <tcp_pcb_remove+0x70>
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	60fb      	str	r3, [r7, #12]
 801794a:	e00c      	b.n	8017966 <tcp_pcb_remove+0x6a>
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	68db      	ldr	r3, [r3, #12]
 8017950:	683a      	ldr	r2, [r7, #0]
 8017952:	429a      	cmp	r2, r3
 8017954:	d104      	bne.n	8017960 <tcp_pcb_remove+0x64>
 8017956:	683b      	ldr	r3, [r7, #0]
 8017958:	68da      	ldr	r2, [r3, #12]
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	60da      	str	r2, [r3, #12]
 801795e:	e005      	b.n	801796c <tcp_pcb_remove+0x70>
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	68db      	ldr	r3, [r3, #12]
 8017964:	60fb      	str	r3, [r7, #12]
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	2b00      	cmp	r3, #0
 801796a:	d1ef      	bne.n	801794c <tcp_pcb_remove+0x50>
 801796c:	683b      	ldr	r3, [r7, #0]
 801796e:	2200      	movs	r2, #0
 8017970:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8017972:	6838      	ldr	r0, [r7, #0]
 8017974:	f7ff ff72 	bl	801785c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8017978:	683b      	ldr	r3, [r7, #0]
 801797a:	7d1b      	ldrb	r3, [r3, #20]
 801797c:	2b0a      	cmp	r3, #10
 801797e:	d013      	beq.n	80179a8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8017980:	683b      	ldr	r3, [r7, #0]
 8017982:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017984:	2b01      	cmp	r3, #1
 8017986:	d00f      	beq.n	80179a8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8017988:	683b      	ldr	r3, [r7, #0]
 801798a:	8b5b      	ldrh	r3, [r3, #26]
 801798c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8017990:	2b00      	cmp	r3, #0
 8017992:	d009      	beq.n	80179a8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017994:	683b      	ldr	r3, [r7, #0]
 8017996:	8b5b      	ldrh	r3, [r3, #26]
 8017998:	f043 0302 	orr.w	r3, r3, #2
 801799c:	b29a      	uxth	r2, r3
 801799e:	683b      	ldr	r3, [r7, #0]
 80179a0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80179a2:	6838      	ldr	r0, [r7, #0]
 80179a4:	f002 ff68 	bl	801a878 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80179a8:	683b      	ldr	r3, [r7, #0]
 80179aa:	7d1b      	ldrb	r3, [r3, #20]
 80179ac:	2b01      	cmp	r3, #1
 80179ae:	d020      	beq.n	80179f2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80179b0:	683b      	ldr	r3, [r7, #0]
 80179b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d006      	beq.n	80179c6 <tcp_pcb_remove+0xca>
 80179b8:	4b13      	ldr	r3, [pc, #76]	; (8017a08 <tcp_pcb_remove+0x10c>)
 80179ba:	f640 0293 	movw	r2, #2195	; 0x893
 80179be:	4916      	ldr	r1, [pc, #88]	; (8017a18 <tcp_pcb_remove+0x11c>)
 80179c0:	4813      	ldr	r0, [pc, #76]	; (8017a10 <tcp_pcb_remove+0x114>)
 80179c2:	f009 fdad 	bl	8021520 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80179c6:	683b      	ldr	r3, [r7, #0]
 80179c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d006      	beq.n	80179dc <tcp_pcb_remove+0xe0>
 80179ce:	4b0e      	ldr	r3, [pc, #56]	; (8017a08 <tcp_pcb_remove+0x10c>)
 80179d0:	f640 0294 	movw	r2, #2196	; 0x894
 80179d4:	4911      	ldr	r1, [pc, #68]	; (8017a1c <tcp_pcb_remove+0x120>)
 80179d6:	480e      	ldr	r0, [pc, #56]	; (8017a10 <tcp_pcb_remove+0x114>)
 80179d8:	f009 fda2 	bl	8021520 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80179dc:	683b      	ldr	r3, [r7, #0]
 80179de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d006      	beq.n	80179f2 <tcp_pcb_remove+0xf6>
 80179e4:	4b08      	ldr	r3, [pc, #32]	; (8017a08 <tcp_pcb_remove+0x10c>)
 80179e6:	f640 0296 	movw	r2, #2198	; 0x896
 80179ea:	490d      	ldr	r1, [pc, #52]	; (8017a20 <tcp_pcb_remove+0x124>)
 80179ec:	4808      	ldr	r0, [pc, #32]	; (8017a10 <tcp_pcb_remove+0x114>)
 80179ee:	f009 fd97 	bl	8021520 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80179f2:	683b      	ldr	r3, [r7, #0]
 80179f4:	2200      	movs	r2, #0
 80179f6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80179f8:	683b      	ldr	r3, [r7, #0]
 80179fa:	2200      	movs	r2, #0
 80179fc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80179fe:	bf00      	nop
 8017a00:	3710      	adds	r7, #16
 8017a02:	46bd      	mov	sp, r7
 8017a04:	bd80      	pop	{r7, pc}
 8017a06:	bf00      	nop
 8017a08:	08022f5c 	.word	0x08022f5c
 8017a0c:	080235c4 	.word	0x080235c4
 8017a10:	08022fa0 	.word	0x08022fa0
 8017a14:	080235e0 	.word	0x080235e0
 8017a18:	08023600 	.word	0x08023600
 8017a1c:	08023618 	.word	0x08023618
 8017a20:	08023634 	.word	0x08023634

08017a24 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017a24:	b580      	push	{r7, lr}
 8017a26:	b082      	sub	sp, #8
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d106      	bne.n	8017a40 <tcp_next_iss+0x1c>
 8017a32:	4b0a      	ldr	r3, [pc, #40]	; (8017a5c <tcp_next_iss+0x38>)
 8017a34:	f640 02af 	movw	r2, #2223	; 0x8af
 8017a38:	4909      	ldr	r1, [pc, #36]	; (8017a60 <tcp_next_iss+0x3c>)
 8017a3a:	480a      	ldr	r0, [pc, #40]	; (8017a64 <tcp_next_iss+0x40>)
 8017a3c:	f009 fd70 	bl	8021520 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8017a40:	4b09      	ldr	r3, [pc, #36]	; (8017a68 <tcp_next_iss+0x44>)
 8017a42:	681a      	ldr	r2, [r3, #0]
 8017a44:	4b09      	ldr	r3, [pc, #36]	; (8017a6c <tcp_next_iss+0x48>)
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	4413      	add	r3, r2
 8017a4a:	4a07      	ldr	r2, [pc, #28]	; (8017a68 <tcp_next_iss+0x44>)
 8017a4c:	6013      	str	r3, [r2, #0]
  return iss;
 8017a4e:	4b06      	ldr	r3, [pc, #24]	; (8017a68 <tcp_next_iss+0x44>)
 8017a50:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8017a52:	4618      	mov	r0, r3
 8017a54:	3708      	adds	r7, #8
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bd80      	pop	{r7, pc}
 8017a5a:	bf00      	nop
 8017a5c:	08022f5c 	.word	0x08022f5c
 8017a60:	0802364c 	.word	0x0802364c
 8017a64:	08022fa0 	.word	0x08022fa0
 8017a68:	20000038 	.word	0x20000038
 8017a6c:	20010338 	.word	0x20010338

08017a70 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b086      	sub	sp, #24
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	4603      	mov	r3, r0
 8017a78:	60b9      	str	r1, [r7, #8]
 8017a7a:	607a      	str	r2, [r7, #4]
 8017a7c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d106      	bne.n	8017a92 <tcp_eff_send_mss_netif+0x22>
 8017a84:	4b14      	ldr	r3, [pc, #80]	; (8017ad8 <tcp_eff_send_mss_netif+0x68>)
 8017a86:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8017a8a:	4914      	ldr	r1, [pc, #80]	; (8017adc <tcp_eff_send_mss_netif+0x6c>)
 8017a8c:	4814      	ldr	r0, [pc, #80]	; (8017ae0 <tcp_eff_send_mss_netif+0x70>)
 8017a8e:	f009 fd47 	bl	8021520 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8017a92:	68bb      	ldr	r3, [r7, #8]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d101      	bne.n	8017a9c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8017a98:	89fb      	ldrh	r3, [r7, #14]
 8017a9a:	e019      	b.n	8017ad0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8017a9c:	68bb      	ldr	r3, [r7, #8]
 8017a9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017aa0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8017aa2:	8afb      	ldrh	r3, [r7, #22]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d012      	beq.n	8017ace <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8017aa8:	2328      	movs	r3, #40	; 0x28
 8017aaa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8017aac:	8afa      	ldrh	r2, [r7, #22]
 8017aae:	8abb      	ldrh	r3, [r7, #20]
 8017ab0:	429a      	cmp	r2, r3
 8017ab2:	d904      	bls.n	8017abe <tcp_eff_send_mss_netif+0x4e>
 8017ab4:	8afa      	ldrh	r2, [r7, #22]
 8017ab6:	8abb      	ldrh	r3, [r7, #20]
 8017ab8:	1ad3      	subs	r3, r2, r3
 8017aba:	b29b      	uxth	r3, r3
 8017abc:	e000      	b.n	8017ac0 <tcp_eff_send_mss_netif+0x50>
 8017abe:	2300      	movs	r3, #0
 8017ac0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017ac2:	8a7a      	ldrh	r2, [r7, #18]
 8017ac4:	89fb      	ldrh	r3, [r7, #14]
 8017ac6:	4293      	cmp	r3, r2
 8017ac8:	bf28      	it	cs
 8017aca:	4613      	movcs	r3, r2
 8017acc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8017ace:	89fb      	ldrh	r3, [r7, #14]
}
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	3718      	adds	r7, #24
 8017ad4:	46bd      	mov	sp, r7
 8017ad6:	bd80      	pop	{r7, pc}
 8017ad8:	08022f5c 	.word	0x08022f5c
 8017adc:	08023668 	.word	0x08023668
 8017ae0:	08022fa0 	.word	0x08022fa0

08017ae4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8017ae4:	b580      	push	{r7, lr}
 8017ae6:	b084      	sub	sp, #16
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	6078      	str	r0, [r7, #4]
 8017aec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8017aee:	683b      	ldr	r3, [r7, #0]
 8017af0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d119      	bne.n	8017b2c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8017af8:	4b10      	ldr	r3, [pc, #64]	; (8017b3c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8017afa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8017afe:	4910      	ldr	r1, [pc, #64]	; (8017b40 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8017b00:	4810      	ldr	r0, [pc, #64]	; (8017b44 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8017b02:	f009 fd0d 	bl	8021520 <iprintf>

  while (pcb != NULL) {
 8017b06:	e011      	b.n	8017b2c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	681a      	ldr	r2, [r3, #0]
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	429a      	cmp	r2, r3
 8017b12:	d108      	bne.n	8017b26 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	68db      	ldr	r3, [r3, #12]
 8017b18:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8017b1a:	68f8      	ldr	r0, [r7, #12]
 8017b1c:	f7fe ffca 	bl	8016ab4 <tcp_abort>
      pcb = next;
 8017b20:	68bb      	ldr	r3, [r7, #8]
 8017b22:	60fb      	str	r3, [r7, #12]
 8017b24:	e002      	b.n	8017b2c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	68db      	ldr	r3, [r3, #12]
 8017b2a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d1ea      	bne.n	8017b08 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8017b32:	bf00      	nop
 8017b34:	3710      	adds	r7, #16
 8017b36:	46bd      	mov	sp, r7
 8017b38:	bd80      	pop	{r7, pc}
 8017b3a:	bf00      	nop
 8017b3c:	08022f5c 	.word	0x08022f5c
 8017b40:	08023690 	.word	0x08023690
 8017b44:	08022fa0 	.word	0x08022fa0

08017b48 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017b48:	b580      	push	{r7, lr}
 8017b4a:	b084      	sub	sp, #16
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	6078      	str	r0, [r7, #4]
 8017b50:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d02a      	beq.n	8017bae <tcp_netif_ip_addr_changed+0x66>
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d026      	beq.n	8017bae <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017b60:	4b15      	ldr	r3, [pc, #84]	; (8017bb8 <tcp_netif_ip_addr_changed+0x70>)
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	4619      	mov	r1, r3
 8017b66:	6878      	ldr	r0, [r7, #4]
 8017b68:	f7ff ffbc 	bl	8017ae4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017b6c:	4b13      	ldr	r3, [pc, #76]	; (8017bbc <tcp_netif_ip_addr_changed+0x74>)
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	4619      	mov	r1, r3
 8017b72:	6878      	ldr	r0, [r7, #4]
 8017b74:	f7ff ffb6 	bl	8017ae4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8017b78:	683b      	ldr	r3, [r7, #0]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d017      	beq.n	8017bae <tcp_netif_ip_addr_changed+0x66>
 8017b7e:	683b      	ldr	r3, [r7, #0]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d013      	beq.n	8017bae <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017b86:	4b0e      	ldr	r3, [pc, #56]	; (8017bc0 <tcp_netif_ip_addr_changed+0x78>)
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	60fb      	str	r3, [r7, #12]
 8017b8c:	e00c      	b.n	8017ba8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	681a      	ldr	r2, [r3, #0]
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	429a      	cmp	r2, r3
 8017b98:	d103      	bne.n	8017ba2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8017b9a:	683b      	ldr	r3, [r7, #0]
 8017b9c:	681a      	ldr	r2, [r3, #0]
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	68db      	ldr	r3, [r3, #12]
 8017ba6:	60fb      	str	r3, [r7, #12]
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d1ef      	bne.n	8017b8e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8017bae:	bf00      	nop
 8017bb0:	3710      	adds	r7, #16
 8017bb2:	46bd      	mov	sp, r7
 8017bb4:	bd80      	pop	{r7, pc}
 8017bb6:	bf00      	nop
 8017bb8:	20010334 	.word	0x20010334
 8017bbc:	20010340 	.word	0x20010340
 8017bc0:	2001033c 	.word	0x2001033c

08017bc4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b082      	sub	sp, #8
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d007      	beq.n	8017be4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017bd8:	4618      	mov	r0, r3
 8017bda:	f7ff fc3f 	bl	801745c <tcp_segs_free>
    pcb->ooseq = NULL;
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	2200      	movs	r2, #0
 8017be2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8017be4:	bf00      	nop
 8017be6:	3708      	adds	r7, #8
 8017be8:	46bd      	mov	sp, r7
 8017bea:	bd80      	pop	{r7, pc}

08017bec <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8017bec:	b590      	push	{r4, r7, lr}
 8017bee:	b08d      	sub	sp, #52	; 0x34
 8017bf0:	af04      	add	r7, sp, #16
 8017bf2:	6078      	str	r0, [r7, #4]
 8017bf4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d105      	bne.n	8017c08 <tcp_input+0x1c>
 8017bfc:	4b9b      	ldr	r3, [pc, #620]	; (8017e6c <tcp_input+0x280>)
 8017bfe:	2283      	movs	r2, #131	; 0x83
 8017c00:	499b      	ldr	r1, [pc, #620]	; (8017e70 <tcp_input+0x284>)
 8017c02:	489c      	ldr	r0, [pc, #624]	; (8017e74 <tcp_input+0x288>)
 8017c04:	f009 fc8c 	bl	8021520 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	685b      	ldr	r3, [r3, #4]
 8017c0c:	4a9a      	ldr	r2, [pc, #616]	; (8017e78 <tcp_input+0x28c>)
 8017c0e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	895b      	ldrh	r3, [r3, #10]
 8017c14:	2b13      	cmp	r3, #19
 8017c16:	f240 83c4 	bls.w	80183a2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017c1a:	4b98      	ldr	r3, [pc, #608]	; (8017e7c <tcp_input+0x290>)
 8017c1c:	695a      	ldr	r2, [r3, #20]
 8017c1e:	4b97      	ldr	r3, [pc, #604]	; (8017e7c <tcp_input+0x290>)
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	4619      	mov	r1, r3
 8017c24:	4610      	mov	r0, r2
 8017c26:	f007 fe17 	bl	801f858 <ip4_addr_isbroadcast_u32>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	f040 83ba 	bne.w	80183a6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8017c32:	4b92      	ldr	r3, [pc, #584]	; (8017e7c <tcp_input+0x290>)
 8017c34:	695b      	ldr	r3, [r3, #20]
 8017c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017c3a:	2be0      	cmp	r3, #224	; 0xe0
 8017c3c:	f000 83b3 	beq.w	80183a6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8017c40:	4b8d      	ldr	r3, [pc, #564]	; (8017e78 <tcp_input+0x28c>)
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	899b      	ldrh	r3, [r3, #12]
 8017c46:	b29b      	uxth	r3, r3
 8017c48:	4618      	mov	r0, r3
 8017c4a:	f7fc fdc9 	bl	80147e0 <lwip_htons>
 8017c4e:	4603      	mov	r3, r0
 8017c50:	0b1b      	lsrs	r3, r3, #12
 8017c52:	b29b      	uxth	r3, r3
 8017c54:	b2db      	uxtb	r3, r3
 8017c56:	009b      	lsls	r3, r3, #2
 8017c58:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8017c5a:	7cbb      	ldrb	r3, [r7, #18]
 8017c5c:	2b13      	cmp	r3, #19
 8017c5e:	f240 83a2 	bls.w	80183a6 <tcp_input+0x7ba>
 8017c62:	7cbb      	ldrb	r3, [r7, #18]
 8017c64:	b29a      	uxth	r2, r3
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	891b      	ldrh	r3, [r3, #8]
 8017c6a:	429a      	cmp	r2, r3
 8017c6c:	f200 839b 	bhi.w	80183a6 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8017c70:	7cbb      	ldrb	r3, [r7, #18]
 8017c72:	b29b      	uxth	r3, r3
 8017c74:	3b14      	subs	r3, #20
 8017c76:	b29a      	uxth	r2, r3
 8017c78:	4b81      	ldr	r3, [pc, #516]	; (8017e80 <tcp_input+0x294>)
 8017c7a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8017c7c:	4b81      	ldr	r3, [pc, #516]	; (8017e84 <tcp_input+0x298>)
 8017c7e:	2200      	movs	r2, #0
 8017c80:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	895a      	ldrh	r2, [r3, #10]
 8017c86:	7cbb      	ldrb	r3, [r7, #18]
 8017c88:	b29b      	uxth	r3, r3
 8017c8a:	429a      	cmp	r2, r3
 8017c8c:	d309      	bcc.n	8017ca2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8017c8e:	4b7c      	ldr	r3, [pc, #496]	; (8017e80 <tcp_input+0x294>)
 8017c90:	881a      	ldrh	r2, [r3, #0]
 8017c92:	4b7d      	ldr	r3, [pc, #500]	; (8017e88 <tcp_input+0x29c>)
 8017c94:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8017c96:	7cbb      	ldrb	r3, [r7, #18]
 8017c98:	4619      	mov	r1, r3
 8017c9a:	6878      	ldr	r0, [r7, #4]
 8017c9c:	f7fe f8e8 	bl	8015e70 <pbuf_remove_header>
 8017ca0:	e04e      	b.n	8017d40 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d105      	bne.n	8017cb6 <tcp_input+0xca>
 8017caa:	4b70      	ldr	r3, [pc, #448]	; (8017e6c <tcp_input+0x280>)
 8017cac:	22c2      	movs	r2, #194	; 0xc2
 8017cae:	4977      	ldr	r1, [pc, #476]	; (8017e8c <tcp_input+0x2a0>)
 8017cb0:	4870      	ldr	r0, [pc, #448]	; (8017e74 <tcp_input+0x288>)
 8017cb2:	f009 fc35 	bl	8021520 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8017cb6:	2114      	movs	r1, #20
 8017cb8:	6878      	ldr	r0, [r7, #4]
 8017cba:	f7fe f8d9 	bl	8015e70 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	895a      	ldrh	r2, [r3, #10]
 8017cc2:	4b71      	ldr	r3, [pc, #452]	; (8017e88 <tcp_input+0x29c>)
 8017cc4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8017cc6:	4b6e      	ldr	r3, [pc, #440]	; (8017e80 <tcp_input+0x294>)
 8017cc8:	881a      	ldrh	r2, [r3, #0]
 8017cca:	4b6f      	ldr	r3, [pc, #444]	; (8017e88 <tcp_input+0x29c>)
 8017ccc:	881b      	ldrh	r3, [r3, #0]
 8017cce:	1ad3      	subs	r3, r2, r3
 8017cd0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8017cd2:	4b6d      	ldr	r3, [pc, #436]	; (8017e88 <tcp_input+0x29c>)
 8017cd4:	881b      	ldrh	r3, [r3, #0]
 8017cd6:	4619      	mov	r1, r3
 8017cd8:	6878      	ldr	r0, [r7, #4]
 8017cda:	f7fe f8c9 	bl	8015e70 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	895b      	ldrh	r3, [r3, #10]
 8017ce4:	8a3a      	ldrh	r2, [r7, #16]
 8017ce6:	429a      	cmp	r2, r3
 8017ce8:	f200 835f 	bhi.w	80183aa <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	685b      	ldr	r3, [r3, #4]
 8017cf2:	4a64      	ldr	r2, [pc, #400]	; (8017e84 <tcp_input+0x298>)
 8017cf4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	8a3a      	ldrh	r2, [r7, #16]
 8017cfc:	4611      	mov	r1, r2
 8017cfe:	4618      	mov	r0, r3
 8017d00:	f7fe f8b6 	bl	8015e70 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	891a      	ldrh	r2, [r3, #8]
 8017d08:	8a3b      	ldrh	r3, [r7, #16]
 8017d0a:	1ad3      	subs	r3, r2, r3
 8017d0c:	b29a      	uxth	r2, r3
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	895b      	ldrh	r3, [r3, #10]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d005      	beq.n	8017d26 <tcp_input+0x13a>
 8017d1a:	4b54      	ldr	r3, [pc, #336]	; (8017e6c <tcp_input+0x280>)
 8017d1c:	22df      	movs	r2, #223	; 0xdf
 8017d1e:	495c      	ldr	r1, [pc, #368]	; (8017e90 <tcp_input+0x2a4>)
 8017d20:	4854      	ldr	r0, [pc, #336]	; (8017e74 <tcp_input+0x288>)
 8017d22:	f009 fbfd 	bl	8021520 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	891a      	ldrh	r2, [r3, #8]
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	891b      	ldrh	r3, [r3, #8]
 8017d30:	429a      	cmp	r2, r3
 8017d32:	d005      	beq.n	8017d40 <tcp_input+0x154>
 8017d34:	4b4d      	ldr	r3, [pc, #308]	; (8017e6c <tcp_input+0x280>)
 8017d36:	22e0      	movs	r2, #224	; 0xe0
 8017d38:	4956      	ldr	r1, [pc, #344]	; (8017e94 <tcp_input+0x2a8>)
 8017d3a:	484e      	ldr	r0, [pc, #312]	; (8017e74 <tcp_input+0x288>)
 8017d3c:	f009 fbf0 	bl	8021520 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8017d40:	4b4d      	ldr	r3, [pc, #308]	; (8017e78 <tcp_input+0x28c>)
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	881b      	ldrh	r3, [r3, #0]
 8017d46:	b29a      	uxth	r2, r3
 8017d48:	4b4b      	ldr	r3, [pc, #300]	; (8017e78 <tcp_input+0x28c>)
 8017d4a:	681c      	ldr	r4, [r3, #0]
 8017d4c:	4610      	mov	r0, r2
 8017d4e:	f7fc fd47 	bl	80147e0 <lwip_htons>
 8017d52:	4603      	mov	r3, r0
 8017d54:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017d56:	4b48      	ldr	r3, [pc, #288]	; (8017e78 <tcp_input+0x28c>)
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	885b      	ldrh	r3, [r3, #2]
 8017d5c:	b29a      	uxth	r2, r3
 8017d5e:	4b46      	ldr	r3, [pc, #280]	; (8017e78 <tcp_input+0x28c>)
 8017d60:	681c      	ldr	r4, [r3, #0]
 8017d62:	4610      	mov	r0, r2
 8017d64:	f7fc fd3c 	bl	80147e0 <lwip_htons>
 8017d68:	4603      	mov	r3, r0
 8017d6a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017d6c:	4b42      	ldr	r3, [pc, #264]	; (8017e78 <tcp_input+0x28c>)
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	685a      	ldr	r2, [r3, #4]
 8017d72:	4b41      	ldr	r3, [pc, #260]	; (8017e78 <tcp_input+0x28c>)
 8017d74:	681c      	ldr	r4, [r3, #0]
 8017d76:	4610      	mov	r0, r2
 8017d78:	f7fc fd47 	bl	801480a <lwip_htonl>
 8017d7c:	4603      	mov	r3, r0
 8017d7e:	6063      	str	r3, [r4, #4]
 8017d80:	6863      	ldr	r3, [r4, #4]
 8017d82:	4a45      	ldr	r2, [pc, #276]	; (8017e98 <tcp_input+0x2ac>)
 8017d84:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8017d86:	4b3c      	ldr	r3, [pc, #240]	; (8017e78 <tcp_input+0x28c>)
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	689a      	ldr	r2, [r3, #8]
 8017d8c:	4b3a      	ldr	r3, [pc, #232]	; (8017e78 <tcp_input+0x28c>)
 8017d8e:	681c      	ldr	r4, [r3, #0]
 8017d90:	4610      	mov	r0, r2
 8017d92:	f7fc fd3a 	bl	801480a <lwip_htonl>
 8017d96:	4603      	mov	r3, r0
 8017d98:	60a3      	str	r3, [r4, #8]
 8017d9a:	68a3      	ldr	r3, [r4, #8]
 8017d9c:	4a3f      	ldr	r2, [pc, #252]	; (8017e9c <tcp_input+0x2b0>)
 8017d9e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017da0:	4b35      	ldr	r3, [pc, #212]	; (8017e78 <tcp_input+0x28c>)
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	89db      	ldrh	r3, [r3, #14]
 8017da6:	b29a      	uxth	r2, r3
 8017da8:	4b33      	ldr	r3, [pc, #204]	; (8017e78 <tcp_input+0x28c>)
 8017daa:	681c      	ldr	r4, [r3, #0]
 8017dac:	4610      	mov	r0, r2
 8017dae:	f7fc fd17 	bl	80147e0 <lwip_htons>
 8017db2:	4603      	mov	r3, r0
 8017db4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8017db6:	4b30      	ldr	r3, [pc, #192]	; (8017e78 <tcp_input+0x28c>)
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	899b      	ldrh	r3, [r3, #12]
 8017dbc:	b29b      	uxth	r3, r3
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	f7fc fd0e 	bl	80147e0 <lwip_htons>
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	b2db      	uxtb	r3, r3
 8017dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017dcc:	b2da      	uxtb	r2, r3
 8017dce:	4b34      	ldr	r3, [pc, #208]	; (8017ea0 <tcp_input+0x2b4>)
 8017dd0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	891a      	ldrh	r2, [r3, #8]
 8017dd6:	4b33      	ldr	r3, [pc, #204]	; (8017ea4 <tcp_input+0x2b8>)
 8017dd8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8017dda:	4b31      	ldr	r3, [pc, #196]	; (8017ea0 <tcp_input+0x2b4>)
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	f003 0303 	and.w	r3, r3, #3
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d00c      	beq.n	8017e00 <tcp_input+0x214>
    tcplen++;
 8017de6:	4b2f      	ldr	r3, [pc, #188]	; (8017ea4 <tcp_input+0x2b8>)
 8017de8:	881b      	ldrh	r3, [r3, #0]
 8017dea:	3301      	adds	r3, #1
 8017dec:	b29a      	uxth	r2, r3
 8017dee:	4b2d      	ldr	r3, [pc, #180]	; (8017ea4 <tcp_input+0x2b8>)
 8017df0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	891a      	ldrh	r2, [r3, #8]
 8017df6:	4b2b      	ldr	r3, [pc, #172]	; (8017ea4 <tcp_input+0x2b8>)
 8017df8:	881b      	ldrh	r3, [r3, #0]
 8017dfa:	429a      	cmp	r2, r3
 8017dfc:	f200 82d7 	bhi.w	80183ae <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8017e00:	2300      	movs	r3, #0
 8017e02:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017e04:	4b28      	ldr	r3, [pc, #160]	; (8017ea8 <tcp_input+0x2bc>)
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	61fb      	str	r3, [r7, #28]
 8017e0a:	e09d      	b.n	8017f48 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017e0c:	69fb      	ldr	r3, [r7, #28]
 8017e0e:	7d1b      	ldrb	r3, [r3, #20]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d105      	bne.n	8017e20 <tcp_input+0x234>
 8017e14:	4b15      	ldr	r3, [pc, #84]	; (8017e6c <tcp_input+0x280>)
 8017e16:	22fb      	movs	r2, #251	; 0xfb
 8017e18:	4924      	ldr	r1, [pc, #144]	; (8017eac <tcp_input+0x2c0>)
 8017e1a:	4816      	ldr	r0, [pc, #88]	; (8017e74 <tcp_input+0x288>)
 8017e1c:	f009 fb80 	bl	8021520 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017e20:	69fb      	ldr	r3, [r7, #28]
 8017e22:	7d1b      	ldrb	r3, [r3, #20]
 8017e24:	2b0a      	cmp	r3, #10
 8017e26:	d105      	bne.n	8017e34 <tcp_input+0x248>
 8017e28:	4b10      	ldr	r3, [pc, #64]	; (8017e6c <tcp_input+0x280>)
 8017e2a:	22fc      	movs	r2, #252	; 0xfc
 8017e2c:	4920      	ldr	r1, [pc, #128]	; (8017eb0 <tcp_input+0x2c4>)
 8017e2e:	4811      	ldr	r0, [pc, #68]	; (8017e74 <tcp_input+0x288>)
 8017e30:	f009 fb76 	bl	8021520 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017e34:	69fb      	ldr	r3, [r7, #28]
 8017e36:	7d1b      	ldrb	r3, [r3, #20]
 8017e38:	2b01      	cmp	r3, #1
 8017e3a:	d105      	bne.n	8017e48 <tcp_input+0x25c>
 8017e3c:	4b0b      	ldr	r3, [pc, #44]	; (8017e6c <tcp_input+0x280>)
 8017e3e:	22fd      	movs	r2, #253	; 0xfd
 8017e40:	491c      	ldr	r1, [pc, #112]	; (8017eb4 <tcp_input+0x2c8>)
 8017e42:	480c      	ldr	r0, [pc, #48]	; (8017e74 <tcp_input+0x288>)
 8017e44:	f009 fb6c 	bl	8021520 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e48:	69fb      	ldr	r3, [r7, #28]
 8017e4a:	7a1b      	ldrb	r3, [r3, #8]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d033      	beq.n	8017eb8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017e50:	69fb      	ldr	r3, [r7, #28]
 8017e52:	7a1a      	ldrb	r2, [r3, #8]
 8017e54:	4b09      	ldr	r3, [pc, #36]	; (8017e7c <tcp_input+0x290>)
 8017e56:	685b      	ldr	r3, [r3, #4]
 8017e58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017e5c:	3301      	adds	r3, #1
 8017e5e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e60:	429a      	cmp	r2, r3
 8017e62:	d029      	beq.n	8017eb8 <tcp_input+0x2cc>
      prev = pcb;
 8017e64:	69fb      	ldr	r3, [r7, #28]
 8017e66:	61bb      	str	r3, [r7, #24]
      continue;
 8017e68:	e06b      	b.n	8017f42 <tcp_input+0x356>
 8017e6a:	bf00      	nop
 8017e6c:	080236c4 	.word	0x080236c4
 8017e70:	080236f8 	.word	0x080236f8
 8017e74:	08023710 	.word	0x08023710
 8017e78:	20008fd0 	.word	0x20008fd0
 8017e7c:	2000cc00 	.word	0x2000cc00
 8017e80:	20008fd4 	.word	0x20008fd4
 8017e84:	20008fd8 	.word	0x20008fd8
 8017e88:	20008fd6 	.word	0x20008fd6
 8017e8c:	08023738 	.word	0x08023738
 8017e90:	08023748 	.word	0x08023748
 8017e94:	08023754 	.word	0x08023754
 8017e98:	20008fe0 	.word	0x20008fe0
 8017e9c:	20008fe4 	.word	0x20008fe4
 8017ea0:	20008fec 	.word	0x20008fec
 8017ea4:	20008fea 	.word	0x20008fea
 8017ea8:	20010334 	.word	0x20010334
 8017eac:	08023774 	.word	0x08023774
 8017eb0:	0802379c 	.word	0x0802379c
 8017eb4:	080237c8 	.word	0x080237c8
    }

    if (pcb->remote_port == tcphdr->src &&
 8017eb8:	69fb      	ldr	r3, [r7, #28]
 8017eba:	8b1a      	ldrh	r2, [r3, #24]
 8017ebc:	4b94      	ldr	r3, [pc, #592]	; (8018110 <tcp_input+0x524>)
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	881b      	ldrh	r3, [r3, #0]
 8017ec2:	b29b      	uxth	r3, r3
 8017ec4:	429a      	cmp	r2, r3
 8017ec6:	d13a      	bne.n	8017f3e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8017ec8:	69fb      	ldr	r3, [r7, #28]
 8017eca:	8ada      	ldrh	r2, [r3, #22]
 8017ecc:	4b90      	ldr	r3, [pc, #576]	; (8018110 <tcp_input+0x524>)
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	885b      	ldrh	r3, [r3, #2]
 8017ed2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017ed4:	429a      	cmp	r2, r3
 8017ed6:	d132      	bne.n	8017f3e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017ed8:	69fb      	ldr	r3, [r7, #28]
 8017eda:	685a      	ldr	r2, [r3, #4]
 8017edc:	4b8d      	ldr	r3, [pc, #564]	; (8018114 <tcp_input+0x528>)
 8017ede:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8017ee0:	429a      	cmp	r2, r3
 8017ee2:	d12c      	bne.n	8017f3e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017ee4:	69fb      	ldr	r3, [r7, #28]
 8017ee6:	681a      	ldr	r2, [r3, #0]
 8017ee8:	4b8a      	ldr	r3, [pc, #552]	; (8018114 <tcp_input+0x528>)
 8017eea:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017eec:	429a      	cmp	r2, r3
 8017eee:	d126      	bne.n	8017f3e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017ef0:	69fb      	ldr	r3, [r7, #28]
 8017ef2:	68db      	ldr	r3, [r3, #12]
 8017ef4:	69fa      	ldr	r2, [r7, #28]
 8017ef6:	429a      	cmp	r2, r3
 8017ef8:	d106      	bne.n	8017f08 <tcp_input+0x31c>
 8017efa:	4b87      	ldr	r3, [pc, #540]	; (8018118 <tcp_input+0x52c>)
 8017efc:	f240 120d 	movw	r2, #269	; 0x10d
 8017f00:	4986      	ldr	r1, [pc, #536]	; (801811c <tcp_input+0x530>)
 8017f02:	4887      	ldr	r0, [pc, #540]	; (8018120 <tcp_input+0x534>)
 8017f04:	f009 fb0c 	bl	8021520 <iprintf>
      if (prev != NULL) {
 8017f08:	69bb      	ldr	r3, [r7, #24]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d00a      	beq.n	8017f24 <tcp_input+0x338>
        prev->next = pcb->next;
 8017f0e:	69fb      	ldr	r3, [r7, #28]
 8017f10:	68da      	ldr	r2, [r3, #12]
 8017f12:	69bb      	ldr	r3, [r7, #24]
 8017f14:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017f16:	4b83      	ldr	r3, [pc, #524]	; (8018124 <tcp_input+0x538>)
 8017f18:	681a      	ldr	r2, [r3, #0]
 8017f1a:	69fb      	ldr	r3, [r7, #28]
 8017f1c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8017f1e:	4a81      	ldr	r2, [pc, #516]	; (8018124 <tcp_input+0x538>)
 8017f20:	69fb      	ldr	r3, [r7, #28]
 8017f22:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017f24:	69fb      	ldr	r3, [r7, #28]
 8017f26:	68db      	ldr	r3, [r3, #12]
 8017f28:	69fa      	ldr	r2, [r7, #28]
 8017f2a:	429a      	cmp	r2, r3
 8017f2c:	d111      	bne.n	8017f52 <tcp_input+0x366>
 8017f2e:	4b7a      	ldr	r3, [pc, #488]	; (8018118 <tcp_input+0x52c>)
 8017f30:	f240 1215 	movw	r2, #277	; 0x115
 8017f34:	497c      	ldr	r1, [pc, #496]	; (8018128 <tcp_input+0x53c>)
 8017f36:	487a      	ldr	r0, [pc, #488]	; (8018120 <tcp_input+0x534>)
 8017f38:	f009 faf2 	bl	8021520 <iprintf>
      break;
 8017f3c:	e009      	b.n	8017f52 <tcp_input+0x366>
    }
    prev = pcb;
 8017f3e:	69fb      	ldr	r3, [r7, #28]
 8017f40:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f42:	69fb      	ldr	r3, [r7, #28]
 8017f44:	68db      	ldr	r3, [r3, #12]
 8017f46:	61fb      	str	r3, [r7, #28]
 8017f48:	69fb      	ldr	r3, [r7, #28]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	f47f af5e 	bne.w	8017e0c <tcp_input+0x220>
 8017f50:	e000      	b.n	8017f54 <tcp_input+0x368>
      break;
 8017f52:	bf00      	nop
  }

  if (pcb == NULL) {
 8017f54:	69fb      	ldr	r3, [r7, #28]
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	f040 8095 	bne.w	8018086 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f5c:	4b73      	ldr	r3, [pc, #460]	; (801812c <tcp_input+0x540>)
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	61fb      	str	r3, [r7, #28]
 8017f62:	e03f      	b.n	8017fe4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017f64:	69fb      	ldr	r3, [r7, #28]
 8017f66:	7d1b      	ldrb	r3, [r3, #20]
 8017f68:	2b0a      	cmp	r3, #10
 8017f6a:	d006      	beq.n	8017f7a <tcp_input+0x38e>
 8017f6c:	4b6a      	ldr	r3, [pc, #424]	; (8018118 <tcp_input+0x52c>)
 8017f6e:	f240 121f 	movw	r2, #287	; 0x11f
 8017f72:	496f      	ldr	r1, [pc, #444]	; (8018130 <tcp_input+0x544>)
 8017f74:	486a      	ldr	r0, [pc, #424]	; (8018120 <tcp_input+0x534>)
 8017f76:	f009 fad3 	bl	8021520 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017f7a:	69fb      	ldr	r3, [r7, #28]
 8017f7c:	7a1b      	ldrb	r3, [r3, #8]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d009      	beq.n	8017f96 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017f82:	69fb      	ldr	r3, [r7, #28]
 8017f84:	7a1a      	ldrb	r2, [r3, #8]
 8017f86:	4b63      	ldr	r3, [pc, #396]	; (8018114 <tcp_input+0x528>)
 8017f88:	685b      	ldr	r3, [r3, #4]
 8017f8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017f8e:	3301      	adds	r3, #1
 8017f90:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017f92:	429a      	cmp	r2, r3
 8017f94:	d122      	bne.n	8017fdc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8017f96:	69fb      	ldr	r3, [r7, #28]
 8017f98:	8b1a      	ldrh	r2, [r3, #24]
 8017f9a:	4b5d      	ldr	r3, [pc, #372]	; (8018110 <tcp_input+0x524>)
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	881b      	ldrh	r3, [r3, #0]
 8017fa0:	b29b      	uxth	r3, r3
 8017fa2:	429a      	cmp	r2, r3
 8017fa4:	d11b      	bne.n	8017fde <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8017fa6:	69fb      	ldr	r3, [r7, #28]
 8017fa8:	8ada      	ldrh	r2, [r3, #22]
 8017faa:	4b59      	ldr	r3, [pc, #356]	; (8018110 <tcp_input+0x524>)
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	885b      	ldrh	r3, [r3, #2]
 8017fb0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8017fb2:	429a      	cmp	r2, r3
 8017fb4:	d113      	bne.n	8017fde <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017fb6:	69fb      	ldr	r3, [r7, #28]
 8017fb8:	685a      	ldr	r2, [r3, #4]
 8017fba:	4b56      	ldr	r3, [pc, #344]	; (8018114 <tcp_input+0x528>)
 8017fbc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8017fbe:	429a      	cmp	r2, r3
 8017fc0:	d10d      	bne.n	8017fde <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017fc2:	69fb      	ldr	r3, [r7, #28]
 8017fc4:	681a      	ldr	r2, [r3, #0]
 8017fc6:	4b53      	ldr	r3, [pc, #332]	; (8018114 <tcp_input+0x528>)
 8017fc8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017fca:	429a      	cmp	r2, r3
 8017fcc:	d107      	bne.n	8017fde <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8017fce:	69f8      	ldr	r0, [r7, #28]
 8017fd0:	f000 fb52 	bl	8018678 <tcp_timewait_input>
        }
        pbuf_free(p);
 8017fd4:	6878      	ldr	r0, [r7, #4]
 8017fd6:	f7fd ffd1 	bl	8015f7c <pbuf_free>
        return;
 8017fda:	e1ee      	b.n	80183ba <tcp_input+0x7ce>
        continue;
 8017fdc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017fde:	69fb      	ldr	r3, [r7, #28]
 8017fe0:	68db      	ldr	r3, [r3, #12]
 8017fe2:	61fb      	str	r3, [r7, #28]
 8017fe4:	69fb      	ldr	r3, [r7, #28]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d1bc      	bne.n	8017f64 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8017fea:	2300      	movs	r3, #0
 8017fec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017fee:	4b51      	ldr	r3, [pc, #324]	; (8018134 <tcp_input+0x548>)
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	617b      	str	r3, [r7, #20]
 8017ff4:	e02a      	b.n	801804c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017ff6:	697b      	ldr	r3, [r7, #20]
 8017ff8:	7a1b      	ldrb	r3, [r3, #8]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d00c      	beq.n	8018018 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017ffe:	697b      	ldr	r3, [r7, #20]
 8018000:	7a1a      	ldrb	r2, [r3, #8]
 8018002:	4b44      	ldr	r3, [pc, #272]	; (8018114 <tcp_input+0x528>)
 8018004:	685b      	ldr	r3, [r3, #4]
 8018006:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801800a:	3301      	adds	r3, #1
 801800c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801800e:	429a      	cmp	r2, r3
 8018010:	d002      	beq.n	8018018 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8018012:	697b      	ldr	r3, [r7, #20]
 8018014:	61bb      	str	r3, [r7, #24]
        continue;
 8018016:	e016      	b.n	8018046 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8018018:	697b      	ldr	r3, [r7, #20]
 801801a:	8ada      	ldrh	r2, [r3, #22]
 801801c:	4b3c      	ldr	r3, [pc, #240]	; (8018110 <tcp_input+0x524>)
 801801e:	681b      	ldr	r3, [r3, #0]
 8018020:	885b      	ldrh	r3, [r3, #2]
 8018022:	b29b      	uxth	r3, r3
 8018024:	429a      	cmp	r2, r3
 8018026:	d10c      	bne.n	8018042 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8018028:	697b      	ldr	r3, [r7, #20]
 801802a:	681a      	ldr	r2, [r3, #0]
 801802c:	4b39      	ldr	r3, [pc, #228]	; (8018114 <tcp_input+0x528>)
 801802e:	695b      	ldr	r3, [r3, #20]
 8018030:	429a      	cmp	r2, r3
 8018032:	d00f      	beq.n	8018054 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8018034:	697b      	ldr	r3, [r7, #20]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d00d      	beq.n	8018056 <tcp_input+0x46a>
 801803a:	697b      	ldr	r3, [r7, #20]
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d009      	beq.n	8018056 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8018042:	697b      	ldr	r3, [r7, #20]
 8018044:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018046:	697b      	ldr	r3, [r7, #20]
 8018048:	68db      	ldr	r3, [r3, #12]
 801804a:	617b      	str	r3, [r7, #20]
 801804c:	697b      	ldr	r3, [r7, #20]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d1d1      	bne.n	8017ff6 <tcp_input+0x40a>
 8018052:	e000      	b.n	8018056 <tcp_input+0x46a>
            break;
 8018054:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8018056:	697b      	ldr	r3, [r7, #20]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d014      	beq.n	8018086 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801805c:	69bb      	ldr	r3, [r7, #24]
 801805e:	2b00      	cmp	r3, #0
 8018060:	d00a      	beq.n	8018078 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8018062:	697b      	ldr	r3, [r7, #20]
 8018064:	68da      	ldr	r2, [r3, #12]
 8018066:	69bb      	ldr	r3, [r7, #24]
 8018068:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801806a:	4b32      	ldr	r3, [pc, #200]	; (8018134 <tcp_input+0x548>)
 801806c:	681a      	ldr	r2, [r3, #0]
 801806e:	697b      	ldr	r3, [r7, #20]
 8018070:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8018072:	4a30      	ldr	r2, [pc, #192]	; (8018134 <tcp_input+0x548>)
 8018074:	697b      	ldr	r3, [r7, #20]
 8018076:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8018078:	6978      	ldr	r0, [r7, #20]
 801807a:	f000 f9ff 	bl	801847c <tcp_listen_input>
      }
      pbuf_free(p);
 801807e:	6878      	ldr	r0, [r7, #4]
 8018080:	f7fd ff7c 	bl	8015f7c <pbuf_free>
      return;
 8018084:	e199      	b.n	80183ba <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8018086:	69fb      	ldr	r3, [r7, #28]
 8018088:	2b00      	cmp	r3, #0
 801808a:	f000 8160 	beq.w	801834e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801808e:	4b2a      	ldr	r3, [pc, #168]	; (8018138 <tcp_input+0x54c>)
 8018090:	2200      	movs	r2, #0
 8018092:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	891a      	ldrh	r2, [r3, #8]
 8018098:	4b27      	ldr	r3, [pc, #156]	; (8018138 <tcp_input+0x54c>)
 801809a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801809c:	4a26      	ldr	r2, [pc, #152]	; (8018138 <tcp_input+0x54c>)
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80180a2:	4b1b      	ldr	r3, [pc, #108]	; (8018110 <tcp_input+0x524>)
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	4a24      	ldr	r2, [pc, #144]	; (8018138 <tcp_input+0x54c>)
 80180a8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80180aa:	4b24      	ldr	r3, [pc, #144]	; (801813c <tcp_input+0x550>)
 80180ac:	2200      	movs	r2, #0
 80180ae:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80180b0:	4b23      	ldr	r3, [pc, #140]	; (8018140 <tcp_input+0x554>)
 80180b2:	2200      	movs	r2, #0
 80180b4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80180b6:	4b23      	ldr	r3, [pc, #140]	; (8018144 <tcp_input+0x558>)
 80180b8:	2200      	movs	r2, #0
 80180ba:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80180bc:	4b22      	ldr	r3, [pc, #136]	; (8018148 <tcp_input+0x55c>)
 80180be:	781b      	ldrb	r3, [r3, #0]
 80180c0:	f003 0308 	and.w	r3, r3, #8
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d006      	beq.n	80180d6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	7b5b      	ldrb	r3, [r3, #13]
 80180cc:	f043 0301 	orr.w	r3, r3, #1
 80180d0:	b2da      	uxtb	r2, r3
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80180d6:	69fb      	ldr	r3, [r7, #28]
 80180d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d038      	beq.n	8018150 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80180de:	69f8      	ldr	r0, [r7, #28]
 80180e0:	f7ff f940 	bl	8017364 <tcp_process_refused_data>
 80180e4:	4603      	mov	r3, r0
 80180e6:	f113 0f0d 	cmn.w	r3, #13
 80180ea:	d007      	beq.n	80180fc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80180ec:	69fb      	ldr	r3, [r7, #28]
 80180ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d02d      	beq.n	8018150 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80180f4:	4b15      	ldr	r3, [pc, #84]	; (801814c <tcp_input+0x560>)
 80180f6:	881b      	ldrh	r3, [r3, #0]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d029      	beq.n	8018150 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80180fc:	69fb      	ldr	r3, [r7, #28]
 80180fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018100:	2b00      	cmp	r3, #0
 8018102:	f040 8104 	bne.w	801830e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8018106:	69f8      	ldr	r0, [r7, #28]
 8018108:	f003 f9ce 	bl	801b4a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801810c:	e0ff      	b.n	801830e <tcp_input+0x722>
 801810e:	bf00      	nop
 8018110:	20008fd0 	.word	0x20008fd0
 8018114:	2000cc00 	.word	0x2000cc00
 8018118:	080236c4 	.word	0x080236c4
 801811c:	080237f0 	.word	0x080237f0
 8018120:	08023710 	.word	0x08023710
 8018124:	20010334 	.word	0x20010334
 8018128:	0802381c 	.word	0x0802381c
 801812c:	20010344 	.word	0x20010344
 8018130:	08023848 	.word	0x08023848
 8018134:	2001033c 	.word	0x2001033c
 8018138:	20008fc0 	.word	0x20008fc0
 801813c:	20008ff0 	.word	0x20008ff0
 8018140:	20008fed 	.word	0x20008fed
 8018144:	20008fe8 	.word	0x20008fe8
 8018148:	20008fec 	.word	0x20008fec
 801814c:	20008fea 	.word	0x20008fea
      }
    }
    tcp_input_pcb = pcb;
 8018150:	4a9b      	ldr	r2, [pc, #620]	; (80183c0 <tcp_input+0x7d4>)
 8018152:	69fb      	ldr	r3, [r7, #28]
 8018154:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8018156:	69f8      	ldr	r0, [r7, #28]
 8018158:	f000 fb0a 	bl	8018770 <tcp_process>
 801815c:	4603      	mov	r3, r0
 801815e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8018160:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018164:	f113 0f0d 	cmn.w	r3, #13
 8018168:	f000 80d3 	beq.w	8018312 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801816c:	4b95      	ldr	r3, [pc, #596]	; (80183c4 <tcp_input+0x7d8>)
 801816e:	781b      	ldrb	r3, [r3, #0]
 8018170:	f003 0308 	and.w	r3, r3, #8
 8018174:	2b00      	cmp	r3, #0
 8018176:	d015      	beq.n	80181a4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8018178:	69fb      	ldr	r3, [r7, #28]
 801817a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801817e:	2b00      	cmp	r3, #0
 8018180:	d008      	beq.n	8018194 <tcp_input+0x5a8>
 8018182:	69fb      	ldr	r3, [r7, #28]
 8018184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018188:	69fa      	ldr	r2, [r7, #28]
 801818a:	6912      	ldr	r2, [r2, #16]
 801818c:	f06f 010d 	mvn.w	r1, #13
 8018190:	4610      	mov	r0, r2
 8018192:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018194:	69f9      	ldr	r1, [r7, #28]
 8018196:	488c      	ldr	r0, [pc, #560]	; (80183c8 <tcp_input+0x7dc>)
 8018198:	f7ff fbb0 	bl	80178fc <tcp_pcb_remove>
        tcp_free(pcb);
 801819c:	69f8      	ldr	r0, [r7, #28]
 801819e:	f7fe f9a9 	bl	80164f4 <tcp_free>
 80181a2:	e0c1      	b.n	8018328 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80181a4:	2300      	movs	r3, #0
 80181a6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80181a8:	4b88      	ldr	r3, [pc, #544]	; (80183cc <tcp_input+0x7e0>)
 80181aa:	881b      	ldrh	r3, [r3, #0]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d01d      	beq.n	80181ec <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80181b0:	4b86      	ldr	r3, [pc, #536]	; (80183cc <tcp_input+0x7e0>)
 80181b2:	881b      	ldrh	r3, [r3, #0]
 80181b4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80181b6:	69fb      	ldr	r3, [r7, #28]
 80181b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d00a      	beq.n	80181d6 <tcp_input+0x5ea>
 80181c0:	69fb      	ldr	r3, [r7, #28]
 80181c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80181c6:	69fa      	ldr	r2, [r7, #28]
 80181c8:	6910      	ldr	r0, [r2, #16]
 80181ca:	89fa      	ldrh	r2, [r7, #14]
 80181cc:	69f9      	ldr	r1, [r7, #28]
 80181ce:	4798      	blx	r3
 80181d0:	4603      	mov	r3, r0
 80181d2:	74fb      	strb	r3, [r7, #19]
 80181d4:	e001      	b.n	80181da <tcp_input+0x5ee>
 80181d6:	2300      	movs	r3, #0
 80181d8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80181da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80181de:	f113 0f0d 	cmn.w	r3, #13
 80181e2:	f000 8098 	beq.w	8018316 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80181e6:	4b79      	ldr	r3, [pc, #484]	; (80183cc <tcp_input+0x7e0>)
 80181e8:	2200      	movs	r2, #0
 80181ea:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80181ec:	69f8      	ldr	r0, [r7, #28]
 80181ee:	f000 f905 	bl	80183fc <tcp_input_delayed_close>
 80181f2:	4603      	mov	r3, r0
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	f040 8090 	bne.w	801831a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80181fa:	4b75      	ldr	r3, [pc, #468]	; (80183d0 <tcp_input+0x7e4>)
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d041      	beq.n	8018286 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8018202:	69fb      	ldr	r3, [r7, #28]
 8018204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018206:	2b00      	cmp	r3, #0
 8018208:	d006      	beq.n	8018218 <tcp_input+0x62c>
 801820a:	4b72      	ldr	r3, [pc, #456]	; (80183d4 <tcp_input+0x7e8>)
 801820c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8018210:	4971      	ldr	r1, [pc, #452]	; (80183d8 <tcp_input+0x7ec>)
 8018212:	4872      	ldr	r0, [pc, #456]	; (80183dc <tcp_input+0x7f0>)
 8018214:	f009 f984 	bl	8021520 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8018218:	69fb      	ldr	r3, [r7, #28]
 801821a:	8b5b      	ldrh	r3, [r3, #26]
 801821c:	f003 0310 	and.w	r3, r3, #16
 8018220:	2b00      	cmp	r3, #0
 8018222:	d008      	beq.n	8018236 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8018224:	4b6a      	ldr	r3, [pc, #424]	; (80183d0 <tcp_input+0x7e4>)
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	4618      	mov	r0, r3
 801822a:	f7fd fea7 	bl	8015f7c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801822e:	69f8      	ldr	r0, [r7, #28]
 8018230:	f7fe fc40 	bl	8016ab4 <tcp_abort>
            goto aborted;
 8018234:	e078      	b.n	8018328 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8018236:	69fb      	ldr	r3, [r7, #28]
 8018238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801823c:	2b00      	cmp	r3, #0
 801823e:	d00c      	beq.n	801825a <tcp_input+0x66e>
 8018240:	69fb      	ldr	r3, [r7, #28]
 8018242:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018246:	69fb      	ldr	r3, [r7, #28]
 8018248:	6918      	ldr	r0, [r3, #16]
 801824a:	4b61      	ldr	r3, [pc, #388]	; (80183d0 <tcp_input+0x7e4>)
 801824c:	681a      	ldr	r2, [r3, #0]
 801824e:	2300      	movs	r3, #0
 8018250:	69f9      	ldr	r1, [r7, #28]
 8018252:	47a0      	blx	r4
 8018254:	4603      	mov	r3, r0
 8018256:	74fb      	strb	r3, [r7, #19]
 8018258:	e008      	b.n	801826c <tcp_input+0x680>
 801825a:	4b5d      	ldr	r3, [pc, #372]	; (80183d0 <tcp_input+0x7e4>)
 801825c:	681a      	ldr	r2, [r3, #0]
 801825e:	2300      	movs	r3, #0
 8018260:	69f9      	ldr	r1, [r7, #28]
 8018262:	2000      	movs	r0, #0
 8018264:	f7ff f952 	bl	801750c <tcp_recv_null>
 8018268:	4603      	mov	r3, r0
 801826a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801826c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018270:	f113 0f0d 	cmn.w	r3, #13
 8018274:	d053      	beq.n	801831e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8018276:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d003      	beq.n	8018286 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801827e:	4b54      	ldr	r3, [pc, #336]	; (80183d0 <tcp_input+0x7e4>)
 8018280:	681a      	ldr	r2, [r3, #0]
 8018282:	69fb      	ldr	r3, [r7, #28]
 8018284:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8018286:	4b4f      	ldr	r3, [pc, #316]	; (80183c4 <tcp_input+0x7d8>)
 8018288:	781b      	ldrb	r3, [r3, #0]
 801828a:	f003 0320 	and.w	r3, r3, #32
 801828e:	2b00      	cmp	r3, #0
 8018290:	d030      	beq.n	80182f4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8018292:	69fb      	ldr	r3, [r7, #28]
 8018294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018296:	2b00      	cmp	r3, #0
 8018298:	d009      	beq.n	80182ae <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801829a:	69fb      	ldr	r3, [r7, #28]
 801829c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801829e:	7b5a      	ldrb	r2, [r3, #13]
 80182a0:	69fb      	ldr	r3, [r7, #28]
 80182a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80182a4:	f042 0220 	orr.w	r2, r2, #32
 80182a8:	b2d2      	uxtb	r2, r2
 80182aa:	735a      	strb	r2, [r3, #13]
 80182ac:	e022      	b.n	80182f4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80182ae:	69fb      	ldr	r3, [r7, #28]
 80182b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80182b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80182b6:	d005      	beq.n	80182c4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80182b8:	69fb      	ldr	r3, [r7, #28]
 80182ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80182bc:	3301      	adds	r3, #1
 80182be:	b29a      	uxth	r2, r3
 80182c0:	69fb      	ldr	r3, [r7, #28]
 80182c2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80182c4:	69fb      	ldr	r3, [r7, #28]
 80182c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d00b      	beq.n	80182e6 <tcp_input+0x6fa>
 80182ce:	69fb      	ldr	r3, [r7, #28]
 80182d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80182d4:	69fb      	ldr	r3, [r7, #28]
 80182d6:	6918      	ldr	r0, [r3, #16]
 80182d8:	2300      	movs	r3, #0
 80182da:	2200      	movs	r2, #0
 80182dc:	69f9      	ldr	r1, [r7, #28]
 80182de:	47a0      	blx	r4
 80182e0:	4603      	mov	r3, r0
 80182e2:	74fb      	strb	r3, [r7, #19]
 80182e4:	e001      	b.n	80182ea <tcp_input+0x6fe>
 80182e6:	2300      	movs	r3, #0
 80182e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80182ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80182ee:	f113 0f0d 	cmn.w	r3, #13
 80182f2:	d016      	beq.n	8018322 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80182f4:	4b32      	ldr	r3, [pc, #200]	; (80183c0 <tcp_input+0x7d4>)
 80182f6:	2200      	movs	r2, #0
 80182f8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80182fa:	69f8      	ldr	r0, [r7, #28]
 80182fc:	f000 f87e 	bl	80183fc <tcp_input_delayed_close>
 8018300:	4603      	mov	r3, r0
 8018302:	2b00      	cmp	r3, #0
 8018304:	d10f      	bne.n	8018326 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8018306:	69f8      	ldr	r0, [r7, #28]
 8018308:	f002 fab6 	bl	801a878 <tcp_output>
 801830c:	e00c      	b.n	8018328 <tcp_input+0x73c>
        goto aborted;
 801830e:	bf00      	nop
 8018310:	e00a      	b.n	8018328 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8018312:	bf00      	nop
 8018314:	e008      	b.n	8018328 <tcp_input+0x73c>
              goto aborted;
 8018316:	bf00      	nop
 8018318:	e006      	b.n	8018328 <tcp_input+0x73c>
          goto aborted;
 801831a:	bf00      	nop
 801831c:	e004      	b.n	8018328 <tcp_input+0x73c>
            goto aborted;
 801831e:	bf00      	nop
 8018320:	e002      	b.n	8018328 <tcp_input+0x73c>
              goto aborted;
 8018322:	bf00      	nop
 8018324:	e000      	b.n	8018328 <tcp_input+0x73c>
          goto aborted;
 8018326:	bf00      	nop
    tcp_input_pcb = NULL;
 8018328:	4b25      	ldr	r3, [pc, #148]	; (80183c0 <tcp_input+0x7d4>)
 801832a:	2200      	movs	r2, #0
 801832c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801832e:	4b28      	ldr	r3, [pc, #160]	; (80183d0 <tcp_input+0x7e4>)
 8018330:	2200      	movs	r2, #0
 8018332:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8018334:	4b2a      	ldr	r3, [pc, #168]	; (80183e0 <tcp_input+0x7f4>)
 8018336:	685b      	ldr	r3, [r3, #4]
 8018338:	2b00      	cmp	r3, #0
 801833a:	d03d      	beq.n	80183b8 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 801833c:	4b28      	ldr	r3, [pc, #160]	; (80183e0 <tcp_input+0x7f4>)
 801833e:	685b      	ldr	r3, [r3, #4]
 8018340:	4618      	mov	r0, r3
 8018342:	f7fd fe1b 	bl	8015f7c <pbuf_free>
      inseg.p = NULL;
 8018346:	4b26      	ldr	r3, [pc, #152]	; (80183e0 <tcp_input+0x7f4>)
 8018348:	2200      	movs	r2, #0
 801834a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801834c:	e034      	b.n	80183b8 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801834e:	4b25      	ldr	r3, [pc, #148]	; (80183e4 <tcp_input+0x7f8>)
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	899b      	ldrh	r3, [r3, #12]
 8018354:	b29b      	uxth	r3, r3
 8018356:	4618      	mov	r0, r3
 8018358:	f7fc fa42 	bl	80147e0 <lwip_htons>
 801835c:	4603      	mov	r3, r0
 801835e:	b2db      	uxtb	r3, r3
 8018360:	f003 0304 	and.w	r3, r3, #4
 8018364:	2b00      	cmp	r3, #0
 8018366:	d118      	bne.n	801839a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018368:	4b1f      	ldr	r3, [pc, #124]	; (80183e8 <tcp_input+0x7fc>)
 801836a:	6819      	ldr	r1, [r3, #0]
 801836c:	4b1f      	ldr	r3, [pc, #124]	; (80183ec <tcp_input+0x800>)
 801836e:	881b      	ldrh	r3, [r3, #0]
 8018370:	461a      	mov	r2, r3
 8018372:	4b1f      	ldr	r3, [pc, #124]	; (80183f0 <tcp_input+0x804>)
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018378:	4b1a      	ldr	r3, [pc, #104]	; (80183e4 <tcp_input+0x7f8>)
 801837a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801837c:	885b      	ldrh	r3, [r3, #2]
 801837e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018380:	4a18      	ldr	r2, [pc, #96]	; (80183e4 <tcp_input+0x7f8>)
 8018382:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018384:	8812      	ldrh	r2, [r2, #0]
 8018386:	b292      	uxth	r2, r2
 8018388:	9202      	str	r2, [sp, #8]
 801838a:	9301      	str	r3, [sp, #4]
 801838c:	4b19      	ldr	r3, [pc, #100]	; (80183f4 <tcp_input+0x808>)
 801838e:	9300      	str	r3, [sp, #0]
 8018390:	4b19      	ldr	r3, [pc, #100]	; (80183f8 <tcp_input+0x80c>)
 8018392:	4602      	mov	r2, r0
 8018394:	2000      	movs	r0, #0
 8018396:	f003 f835 	bl	801b404 <tcp_rst>
    pbuf_free(p);
 801839a:	6878      	ldr	r0, [r7, #4]
 801839c:	f7fd fdee 	bl	8015f7c <pbuf_free>
  return;
 80183a0:	e00a      	b.n	80183b8 <tcp_input+0x7cc>
    goto dropped;
 80183a2:	bf00      	nop
 80183a4:	e004      	b.n	80183b0 <tcp_input+0x7c4>
dropped:
 80183a6:	bf00      	nop
 80183a8:	e002      	b.n	80183b0 <tcp_input+0x7c4>
      goto dropped;
 80183aa:	bf00      	nop
 80183ac:	e000      	b.n	80183b0 <tcp_input+0x7c4>
      goto dropped;
 80183ae:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80183b0:	6878      	ldr	r0, [r7, #4]
 80183b2:	f7fd fde3 	bl	8015f7c <pbuf_free>
 80183b6:	e000      	b.n	80183ba <tcp_input+0x7ce>
  return;
 80183b8:	bf00      	nop
}
 80183ba:	3724      	adds	r7, #36	; 0x24
 80183bc:	46bd      	mov	sp, r7
 80183be:	bd90      	pop	{r4, r7, pc}
 80183c0:	20010348 	.word	0x20010348
 80183c4:	20008fed 	.word	0x20008fed
 80183c8:	20010334 	.word	0x20010334
 80183cc:	20008fe8 	.word	0x20008fe8
 80183d0:	20008ff0 	.word	0x20008ff0
 80183d4:	080236c4 	.word	0x080236c4
 80183d8:	08023878 	.word	0x08023878
 80183dc:	08023710 	.word	0x08023710
 80183e0:	20008fc0 	.word	0x20008fc0
 80183e4:	20008fd0 	.word	0x20008fd0
 80183e8:	20008fe4 	.word	0x20008fe4
 80183ec:	20008fea 	.word	0x20008fea
 80183f0:	20008fe0 	.word	0x20008fe0
 80183f4:	2000cc10 	.word	0x2000cc10
 80183f8:	2000cc14 	.word	0x2000cc14

080183fc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80183fc:	b580      	push	{r7, lr}
 80183fe:	b082      	sub	sp, #8
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d106      	bne.n	8018418 <tcp_input_delayed_close+0x1c>
 801840a:	4b17      	ldr	r3, [pc, #92]	; (8018468 <tcp_input_delayed_close+0x6c>)
 801840c:	f240 225a 	movw	r2, #602	; 0x25a
 8018410:	4916      	ldr	r1, [pc, #88]	; (801846c <tcp_input_delayed_close+0x70>)
 8018412:	4817      	ldr	r0, [pc, #92]	; (8018470 <tcp_input_delayed_close+0x74>)
 8018414:	f009 f884 	bl	8021520 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8018418:	4b16      	ldr	r3, [pc, #88]	; (8018474 <tcp_input_delayed_close+0x78>)
 801841a:	781b      	ldrb	r3, [r3, #0]
 801841c:	f003 0310 	and.w	r3, r3, #16
 8018420:	2b00      	cmp	r3, #0
 8018422:	d01c      	beq.n	801845e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	8b5b      	ldrh	r3, [r3, #26]
 8018428:	f003 0310 	and.w	r3, r3, #16
 801842c:	2b00      	cmp	r3, #0
 801842e:	d10d      	bne.n	801844c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018436:	2b00      	cmp	r3, #0
 8018438:	d008      	beq.n	801844c <tcp_input_delayed_close+0x50>
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018440:	687a      	ldr	r2, [r7, #4]
 8018442:	6912      	ldr	r2, [r2, #16]
 8018444:	f06f 010e 	mvn.w	r1, #14
 8018448:	4610      	mov	r0, r2
 801844a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801844c:	6879      	ldr	r1, [r7, #4]
 801844e:	480a      	ldr	r0, [pc, #40]	; (8018478 <tcp_input_delayed_close+0x7c>)
 8018450:	f7ff fa54 	bl	80178fc <tcp_pcb_remove>
    tcp_free(pcb);
 8018454:	6878      	ldr	r0, [r7, #4]
 8018456:	f7fe f84d 	bl	80164f4 <tcp_free>
    return 1;
 801845a:	2301      	movs	r3, #1
 801845c:	e000      	b.n	8018460 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801845e:	2300      	movs	r3, #0
}
 8018460:	4618      	mov	r0, r3
 8018462:	3708      	adds	r7, #8
 8018464:	46bd      	mov	sp, r7
 8018466:	bd80      	pop	{r7, pc}
 8018468:	080236c4 	.word	0x080236c4
 801846c:	08023894 	.word	0x08023894
 8018470:	08023710 	.word	0x08023710
 8018474:	20008fed 	.word	0x20008fed
 8018478:	20010334 	.word	0x20010334

0801847c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801847c:	b590      	push	{r4, r7, lr}
 801847e:	b08b      	sub	sp, #44	; 0x2c
 8018480:	af04      	add	r7, sp, #16
 8018482:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8018484:	4b6f      	ldr	r3, [pc, #444]	; (8018644 <tcp_listen_input+0x1c8>)
 8018486:	781b      	ldrb	r3, [r3, #0]
 8018488:	f003 0304 	and.w	r3, r3, #4
 801848c:	2b00      	cmp	r3, #0
 801848e:	f040 80d3 	bne.w	8018638 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d106      	bne.n	80184a6 <tcp_listen_input+0x2a>
 8018498:	4b6b      	ldr	r3, [pc, #428]	; (8018648 <tcp_listen_input+0x1cc>)
 801849a:	f240 2281 	movw	r2, #641	; 0x281
 801849e:	496b      	ldr	r1, [pc, #428]	; (801864c <tcp_listen_input+0x1d0>)
 80184a0:	486b      	ldr	r0, [pc, #428]	; (8018650 <tcp_listen_input+0x1d4>)
 80184a2:	f009 f83d 	bl	8021520 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80184a6:	4b67      	ldr	r3, [pc, #412]	; (8018644 <tcp_listen_input+0x1c8>)
 80184a8:	781b      	ldrb	r3, [r3, #0]
 80184aa:	f003 0310 	and.w	r3, r3, #16
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d019      	beq.n	80184e6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80184b2:	4b68      	ldr	r3, [pc, #416]	; (8018654 <tcp_listen_input+0x1d8>)
 80184b4:	6819      	ldr	r1, [r3, #0]
 80184b6:	4b68      	ldr	r3, [pc, #416]	; (8018658 <tcp_listen_input+0x1dc>)
 80184b8:	881b      	ldrh	r3, [r3, #0]
 80184ba:	461a      	mov	r2, r3
 80184bc:	4b67      	ldr	r3, [pc, #412]	; (801865c <tcp_listen_input+0x1e0>)
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80184c2:	4b67      	ldr	r3, [pc, #412]	; (8018660 <tcp_listen_input+0x1e4>)
 80184c4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80184c6:	885b      	ldrh	r3, [r3, #2]
 80184c8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80184ca:	4a65      	ldr	r2, [pc, #404]	; (8018660 <tcp_listen_input+0x1e4>)
 80184cc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80184ce:	8812      	ldrh	r2, [r2, #0]
 80184d0:	b292      	uxth	r2, r2
 80184d2:	9202      	str	r2, [sp, #8]
 80184d4:	9301      	str	r3, [sp, #4]
 80184d6:	4b63      	ldr	r3, [pc, #396]	; (8018664 <tcp_listen_input+0x1e8>)
 80184d8:	9300      	str	r3, [sp, #0]
 80184da:	4b63      	ldr	r3, [pc, #396]	; (8018668 <tcp_listen_input+0x1ec>)
 80184dc:	4602      	mov	r2, r0
 80184de:	6878      	ldr	r0, [r7, #4]
 80184e0:	f002 ff90 	bl	801b404 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80184e4:	e0aa      	b.n	801863c <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 80184e6:	4b57      	ldr	r3, [pc, #348]	; (8018644 <tcp_listen_input+0x1c8>)
 80184e8:	781b      	ldrb	r3, [r3, #0]
 80184ea:	f003 0302 	and.w	r3, r3, #2
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	f000 80a4 	beq.w	801863c <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	7d5b      	ldrb	r3, [r3, #21]
 80184f8:	4618      	mov	r0, r3
 80184fa:	f7ff f92b 	bl	8017754 <tcp_alloc>
 80184fe:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018500:	697b      	ldr	r3, [r7, #20]
 8018502:	2b00      	cmp	r3, #0
 8018504:	d111      	bne.n	801852a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	699b      	ldr	r3, [r3, #24]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d00a      	beq.n	8018524 <tcp_listen_input+0xa8>
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	699b      	ldr	r3, [r3, #24]
 8018512:	687a      	ldr	r2, [r7, #4]
 8018514:	6910      	ldr	r0, [r2, #16]
 8018516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801851a:	2100      	movs	r1, #0
 801851c:	4798      	blx	r3
 801851e:	4603      	mov	r3, r0
 8018520:	73bb      	strb	r3, [r7, #14]
      return;
 8018522:	e08c      	b.n	801863e <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018524:	23f0      	movs	r3, #240	; 0xf0
 8018526:	73bb      	strb	r3, [r7, #14]
      return;
 8018528:	e089      	b.n	801863e <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801852a:	4b50      	ldr	r3, [pc, #320]	; (801866c <tcp_listen_input+0x1f0>)
 801852c:	695a      	ldr	r2, [r3, #20]
 801852e:	697b      	ldr	r3, [r7, #20]
 8018530:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8018532:	4b4e      	ldr	r3, [pc, #312]	; (801866c <tcp_listen_input+0x1f0>)
 8018534:	691a      	ldr	r2, [r3, #16]
 8018536:	697b      	ldr	r3, [r7, #20]
 8018538:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	8ada      	ldrh	r2, [r3, #22]
 801853e:	697b      	ldr	r3, [r7, #20]
 8018540:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8018542:	4b47      	ldr	r3, [pc, #284]	; (8018660 <tcp_listen_input+0x1e4>)
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	881b      	ldrh	r3, [r3, #0]
 8018548:	b29a      	uxth	r2, r3
 801854a:	697b      	ldr	r3, [r7, #20]
 801854c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801854e:	697b      	ldr	r3, [r7, #20]
 8018550:	2203      	movs	r2, #3
 8018552:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8018554:	4b41      	ldr	r3, [pc, #260]	; (801865c <tcp_listen_input+0x1e0>)
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	1c5a      	adds	r2, r3, #1
 801855a:	697b      	ldr	r3, [r7, #20]
 801855c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801855e:	697b      	ldr	r3, [r7, #20]
 8018560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018562:	697b      	ldr	r3, [r7, #20]
 8018564:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8018566:	6978      	ldr	r0, [r7, #20]
 8018568:	f7ff fa5c 	bl	8017a24 <tcp_next_iss>
 801856c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801856e:	697b      	ldr	r3, [r7, #20]
 8018570:	693a      	ldr	r2, [r7, #16]
 8018572:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8018574:	697b      	ldr	r3, [r7, #20]
 8018576:	693a      	ldr	r2, [r7, #16]
 8018578:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801857a:	697b      	ldr	r3, [r7, #20]
 801857c:	693a      	ldr	r2, [r7, #16]
 801857e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8018580:	697b      	ldr	r3, [r7, #20]
 8018582:	693a      	ldr	r2, [r7, #16]
 8018584:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8018586:	4b35      	ldr	r3, [pc, #212]	; (801865c <tcp_listen_input+0x1e0>)
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	1e5a      	subs	r2, r3, #1
 801858c:	697b      	ldr	r3, [r7, #20]
 801858e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	691a      	ldr	r2, [r3, #16]
 8018594:	697b      	ldr	r3, [r7, #20]
 8018596:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8018598:	697b      	ldr	r3, [r7, #20]
 801859a:	687a      	ldr	r2, [r7, #4]
 801859c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	7a5b      	ldrb	r3, [r3, #9]
 80185a2:	f003 030c 	and.w	r3, r3, #12
 80185a6:	b2da      	uxtb	r2, r3
 80185a8:	697b      	ldr	r3, [r7, #20]
 80185aa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	7a1a      	ldrb	r2, [r3, #8]
 80185b0:	697b      	ldr	r3, [r7, #20]
 80185b2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80185b4:	4b2e      	ldr	r3, [pc, #184]	; (8018670 <tcp_listen_input+0x1f4>)
 80185b6:	681a      	ldr	r2, [r3, #0]
 80185b8:	697b      	ldr	r3, [r7, #20]
 80185ba:	60da      	str	r2, [r3, #12]
 80185bc:	4a2c      	ldr	r2, [pc, #176]	; (8018670 <tcp_listen_input+0x1f4>)
 80185be:	697b      	ldr	r3, [r7, #20]
 80185c0:	6013      	str	r3, [r2, #0]
 80185c2:	f003 f8e1 	bl	801b788 <tcp_timer_needed>
 80185c6:	4b2b      	ldr	r3, [pc, #172]	; (8018674 <tcp_listen_input+0x1f8>)
 80185c8:	2201      	movs	r2, #1
 80185ca:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80185cc:	6978      	ldr	r0, [r7, #20]
 80185ce:	f001 fd8f 	bl	801a0f0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80185d2:	4b23      	ldr	r3, [pc, #140]	; (8018660 <tcp_listen_input+0x1e4>)
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	89db      	ldrh	r3, [r3, #14]
 80185d8:	b29a      	uxth	r2, r3
 80185da:	697b      	ldr	r3, [r7, #20]
 80185dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80185e0:	697b      	ldr	r3, [r7, #20]
 80185e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80185e6:	697b      	ldr	r3, [r7, #20]
 80185e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80185ec:	697b      	ldr	r3, [r7, #20]
 80185ee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80185f0:	697b      	ldr	r3, [r7, #20]
 80185f2:	3304      	adds	r3, #4
 80185f4:	4618      	mov	r0, r3
 80185f6:	f006 fe7d 	bl	801f2f4 <ip4_route>
 80185fa:	4601      	mov	r1, r0
 80185fc:	697b      	ldr	r3, [r7, #20]
 80185fe:	3304      	adds	r3, #4
 8018600:	461a      	mov	r2, r3
 8018602:	4620      	mov	r0, r4
 8018604:	f7ff fa34 	bl	8017a70 <tcp_eff_send_mss_netif>
 8018608:	4603      	mov	r3, r0
 801860a:	461a      	mov	r2, r3
 801860c:	697b      	ldr	r3, [r7, #20]
 801860e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018610:	2112      	movs	r1, #18
 8018612:	6978      	ldr	r0, [r7, #20]
 8018614:	f002 f842 	bl	801a69c <tcp_enqueue_flags>
 8018618:	4603      	mov	r3, r0
 801861a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801861c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d004      	beq.n	801862e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8018624:	2100      	movs	r1, #0
 8018626:	6978      	ldr	r0, [r7, #20]
 8018628:	f7fe f986 	bl	8016938 <tcp_abandon>
      return;
 801862c:	e007      	b.n	801863e <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 801862e:	6978      	ldr	r0, [r7, #20]
 8018630:	f002 f922 	bl	801a878 <tcp_output>
  return;
 8018634:	bf00      	nop
 8018636:	e001      	b.n	801863c <tcp_listen_input+0x1c0>
    return;
 8018638:	bf00      	nop
 801863a:	e000      	b.n	801863e <tcp_listen_input+0x1c2>
  return;
 801863c:	bf00      	nop
}
 801863e:	371c      	adds	r7, #28
 8018640:	46bd      	mov	sp, r7
 8018642:	bd90      	pop	{r4, r7, pc}
 8018644:	20008fec 	.word	0x20008fec
 8018648:	080236c4 	.word	0x080236c4
 801864c:	080238bc 	.word	0x080238bc
 8018650:	08023710 	.word	0x08023710
 8018654:	20008fe4 	.word	0x20008fe4
 8018658:	20008fea 	.word	0x20008fea
 801865c:	20008fe0 	.word	0x20008fe0
 8018660:	20008fd0 	.word	0x20008fd0
 8018664:	2000cc10 	.word	0x2000cc10
 8018668:	2000cc14 	.word	0x2000cc14
 801866c:	2000cc00 	.word	0x2000cc00
 8018670:	20010334 	.word	0x20010334
 8018674:	20010330 	.word	0x20010330

08018678 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8018678:	b580      	push	{r7, lr}
 801867a:	b086      	sub	sp, #24
 801867c:	af04      	add	r7, sp, #16
 801867e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018680:	4b30      	ldr	r3, [pc, #192]	; (8018744 <tcp_timewait_input+0xcc>)
 8018682:	781b      	ldrb	r3, [r3, #0]
 8018684:	f003 0304 	and.w	r3, r3, #4
 8018688:	2b00      	cmp	r3, #0
 801868a:	d154      	bne.n	8018736 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	2b00      	cmp	r3, #0
 8018690:	d106      	bne.n	80186a0 <tcp_timewait_input+0x28>
 8018692:	4b2d      	ldr	r3, [pc, #180]	; (8018748 <tcp_timewait_input+0xd0>)
 8018694:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018698:	492c      	ldr	r1, [pc, #176]	; (801874c <tcp_timewait_input+0xd4>)
 801869a:	482d      	ldr	r0, [pc, #180]	; (8018750 <tcp_timewait_input+0xd8>)
 801869c:	f008 ff40 	bl	8021520 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80186a0:	4b28      	ldr	r3, [pc, #160]	; (8018744 <tcp_timewait_input+0xcc>)
 80186a2:	781b      	ldrb	r3, [r3, #0]
 80186a4:	f003 0302 	and.w	r3, r3, #2
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d02a      	beq.n	8018702 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80186ac:	4b29      	ldr	r3, [pc, #164]	; (8018754 <tcp_timewait_input+0xdc>)
 80186ae:	681a      	ldr	r2, [r3, #0]
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186b4:	1ad3      	subs	r3, r2, r3
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	db2d      	blt.n	8018716 <tcp_timewait_input+0x9e>
 80186ba:	4b26      	ldr	r3, [pc, #152]	; (8018754 <tcp_timewait_input+0xdc>)
 80186bc:	681a      	ldr	r2, [r3, #0]
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186c2:	6879      	ldr	r1, [r7, #4]
 80186c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80186c6:	440b      	add	r3, r1
 80186c8:	1ad3      	subs	r3, r2, r3
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	dc23      	bgt.n	8018716 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80186ce:	4b22      	ldr	r3, [pc, #136]	; (8018758 <tcp_timewait_input+0xe0>)
 80186d0:	6819      	ldr	r1, [r3, #0]
 80186d2:	4b22      	ldr	r3, [pc, #136]	; (801875c <tcp_timewait_input+0xe4>)
 80186d4:	881b      	ldrh	r3, [r3, #0]
 80186d6:	461a      	mov	r2, r3
 80186d8:	4b1e      	ldr	r3, [pc, #120]	; (8018754 <tcp_timewait_input+0xdc>)
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80186de:	4b20      	ldr	r3, [pc, #128]	; (8018760 <tcp_timewait_input+0xe8>)
 80186e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80186e2:	885b      	ldrh	r3, [r3, #2]
 80186e4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80186e6:	4a1e      	ldr	r2, [pc, #120]	; (8018760 <tcp_timewait_input+0xe8>)
 80186e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80186ea:	8812      	ldrh	r2, [r2, #0]
 80186ec:	b292      	uxth	r2, r2
 80186ee:	9202      	str	r2, [sp, #8]
 80186f0:	9301      	str	r3, [sp, #4]
 80186f2:	4b1c      	ldr	r3, [pc, #112]	; (8018764 <tcp_timewait_input+0xec>)
 80186f4:	9300      	str	r3, [sp, #0]
 80186f6:	4b1c      	ldr	r3, [pc, #112]	; (8018768 <tcp_timewait_input+0xf0>)
 80186f8:	4602      	mov	r2, r0
 80186fa:	6878      	ldr	r0, [r7, #4]
 80186fc:	f002 fe82 	bl	801b404 <tcp_rst>
      return;
 8018700:	e01c      	b.n	801873c <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8018702:	4b10      	ldr	r3, [pc, #64]	; (8018744 <tcp_timewait_input+0xcc>)
 8018704:	781b      	ldrb	r3, [r3, #0]
 8018706:	f003 0301 	and.w	r3, r3, #1
 801870a:	2b00      	cmp	r3, #0
 801870c:	d003      	beq.n	8018716 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801870e:	4b17      	ldr	r3, [pc, #92]	; (801876c <tcp_timewait_input+0xf4>)
 8018710:	681a      	ldr	r2, [r3, #0]
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8018716:	4b11      	ldr	r3, [pc, #68]	; (801875c <tcp_timewait_input+0xe4>)
 8018718:	881b      	ldrh	r3, [r3, #0]
 801871a:	2b00      	cmp	r3, #0
 801871c:	d00d      	beq.n	801873a <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	8b5b      	ldrh	r3, [r3, #26]
 8018722:	f043 0302 	orr.w	r3, r3, #2
 8018726:	b29a      	uxth	r2, r3
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801872c:	6878      	ldr	r0, [r7, #4]
 801872e:	f002 f8a3 	bl	801a878 <tcp_output>
  }
  return;
 8018732:	bf00      	nop
 8018734:	e001      	b.n	801873a <tcp_timewait_input+0xc2>
    return;
 8018736:	bf00      	nop
 8018738:	e000      	b.n	801873c <tcp_timewait_input+0xc4>
  return;
 801873a:	bf00      	nop
}
 801873c:	3708      	adds	r7, #8
 801873e:	46bd      	mov	sp, r7
 8018740:	bd80      	pop	{r7, pc}
 8018742:	bf00      	nop
 8018744:	20008fec 	.word	0x20008fec
 8018748:	080236c4 	.word	0x080236c4
 801874c:	080238dc 	.word	0x080238dc
 8018750:	08023710 	.word	0x08023710
 8018754:	20008fe0 	.word	0x20008fe0
 8018758:	20008fe4 	.word	0x20008fe4
 801875c:	20008fea 	.word	0x20008fea
 8018760:	20008fd0 	.word	0x20008fd0
 8018764:	2000cc10 	.word	0x2000cc10
 8018768:	2000cc14 	.word	0x2000cc14
 801876c:	20010338 	.word	0x20010338

08018770 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8018770:	b590      	push	{r4, r7, lr}
 8018772:	b08d      	sub	sp, #52	; 0x34
 8018774:	af04      	add	r7, sp, #16
 8018776:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018778:	2300      	movs	r3, #0
 801877a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801877c:	2300      	movs	r3, #0
 801877e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d106      	bne.n	8018794 <tcp_process+0x24>
 8018786:	4ba5      	ldr	r3, [pc, #660]	; (8018a1c <tcp_process+0x2ac>)
 8018788:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801878c:	49a4      	ldr	r1, [pc, #656]	; (8018a20 <tcp_process+0x2b0>)
 801878e:	48a5      	ldr	r0, [pc, #660]	; (8018a24 <tcp_process+0x2b4>)
 8018790:	f008 fec6 	bl	8021520 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018794:	4ba4      	ldr	r3, [pc, #656]	; (8018a28 <tcp_process+0x2b8>)
 8018796:	781b      	ldrb	r3, [r3, #0]
 8018798:	f003 0304 	and.w	r3, r3, #4
 801879c:	2b00      	cmp	r3, #0
 801879e:	d04e      	beq.n	801883e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	7d1b      	ldrb	r3, [r3, #20]
 80187a4:	2b02      	cmp	r3, #2
 80187a6:	d108      	bne.n	80187ba <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80187ac:	4b9f      	ldr	r3, [pc, #636]	; (8018a2c <tcp_process+0x2bc>)
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	429a      	cmp	r2, r3
 80187b2:	d123      	bne.n	80187fc <tcp_process+0x8c>
        acceptable = 1;
 80187b4:	2301      	movs	r3, #1
 80187b6:	76fb      	strb	r3, [r7, #27]
 80187b8:	e020      	b.n	80187fc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80187be:	4b9c      	ldr	r3, [pc, #624]	; (8018a30 <tcp_process+0x2c0>)
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	429a      	cmp	r2, r3
 80187c4:	d102      	bne.n	80187cc <tcp_process+0x5c>
        acceptable = 1;
 80187c6:	2301      	movs	r3, #1
 80187c8:	76fb      	strb	r3, [r7, #27]
 80187ca:	e017      	b.n	80187fc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80187cc:	4b98      	ldr	r3, [pc, #608]	; (8018a30 <tcp_process+0x2c0>)
 80187ce:	681a      	ldr	r2, [r3, #0]
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187d4:	1ad3      	subs	r3, r2, r3
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	db10      	blt.n	80187fc <tcp_process+0x8c>
 80187da:	4b95      	ldr	r3, [pc, #596]	; (8018a30 <tcp_process+0x2c0>)
 80187dc:	681a      	ldr	r2, [r3, #0]
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187e2:	6879      	ldr	r1, [r7, #4]
 80187e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80187e6:	440b      	add	r3, r1
 80187e8:	1ad3      	subs	r3, r2, r3
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	dc06      	bgt.n	80187fc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	8b5b      	ldrh	r3, [r3, #26]
 80187f2:	f043 0302 	orr.w	r3, r3, #2
 80187f6:	b29a      	uxth	r2, r3
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80187fc:	7efb      	ldrb	r3, [r7, #27]
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d01b      	beq.n	801883a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	7d1b      	ldrb	r3, [r3, #20]
 8018806:	2b00      	cmp	r3, #0
 8018808:	d106      	bne.n	8018818 <tcp_process+0xa8>
 801880a:	4b84      	ldr	r3, [pc, #528]	; (8018a1c <tcp_process+0x2ac>)
 801880c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8018810:	4988      	ldr	r1, [pc, #544]	; (8018a34 <tcp_process+0x2c4>)
 8018812:	4884      	ldr	r0, [pc, #528]	; (8018a24 <tcp_process+0x2b4>)
 8018814:	f008 fe84 	bl	8021520 <iprintf>
      recv_flags |= TF_RESET;
 8018818:	4b87      	ldr	r3, [pc, #540]	; (8018a38 <tcp_process+0x2c8>)
 801881a:	781b      	ldrb	r3, [r3, #0]
 801881c:	f043 0308 	orr.w	r3, r3, #8
 8018820:	b2da      	uxtb	r2, r3
 8018822:	4b85      	ldr	r3, [pc, #532]	; (8018a38 <tcp_process+0x2c8>)
 8018824:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	8b5b      	ldrh	r3, [r3, #26]
 801882a:	f023 0301 	bic.w	r3, r3, #1
 801882e:	b29a      	uxth	r2, r3
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018834:	f06f 030d 	mvn.w	r3, #13
 8018838:	e37a      	b.n	8018f30 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801883a:	2300      	movs	r3, #0
 801883c:	e378      	b.n	8018f30 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801883e:	4b7a      	ldr	r3, [pc, #488]	; (8018a28 <tcp_process+0x2b8>)
 8018840:	781b      	ldrb	r3, [r3, #0]
 8018842:	f003 0302 	and.w	r3, r3, #2
 8018846:	2b00      	cmp	r3, #0
 8018848:	d010      	beq.n	801886c <tcp_process+0xfc>
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	7d1b      	ldrb	r3, [r3, #20]
 801884e:	2b02      	cmp	r3, #2
 8018850:	d00c      	beq.n	801886c <tcp_process+0xfc>
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	7d1b      	ldrb	r3, [r3, #20]
 8018856:	2b03      	cmp	r3, #3
 8018858:	d008      	beq.n	801886c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	8b5b      	ldrh	r3, [r3, #26]
 801885e:	f043 0302 	orr.w	r3, r3, #2
 8018862:	b29a      	uxth	r2, r3
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8018868:	2300      	movs	r3, #0
 801886a:	e361      	b.n	8018f30 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	8b5b      	ldrh	r3, [r3, #26]
 8018870:	f003 0310 	and.w	r3, r3, #16
 8018874:	2b00      	cmp	r3, #0
 8018876:	d103      	bne.n	8018880 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018878:	4b70      	ldr	r3, [pc, #448]	; (8018a3c <tcp_process+0x2cc>)
 801887a:	681a      	ldr	r2, [r3, #0]
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	2200      	movs	r2, #0
 8018884:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	2200      	movs	r2, #0
 801888c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8018890:	6878      	ldr	r0, [r7, #4]
 8018892:	f001 fc2d 	bl	801a0f0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	7d1b      	ldrb	r3, [r3, #20]
 801889a:	3b02      	subs	r3, #2
 801889c:	2b07      	cmp	r3, #7
 801889e:	f200 8337 	bhi.w	8018f10 <tcp_process+0x7a0>
 80188a2:	a201      	add	r2, pc, #4	; (adr r2, 80188a8 <tcp_process+0x138>)
 80188a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188a8:	080188c9 	.word	0x080188c9
 80188ac:	08018af9 	.word	0x08018af9
 80188b0:	08018c71 	.word	0x08018c71
 80188b4:	08018c9b 	.word	0x08018c9b
 80188b8:	08018dbf 	.word	0x08018dbf
 80188bc:	08018c71 	.word	0x08018c71
 80188c0:	08018e4b 	.word	0x08018e4b
 80188c4:	08018edb 	.word	0x08018edb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80188c8:	4b57      	ldr	r3, [pc, #348]	; (8018a28 <tcp_process+0x2b8>)
 80188ca:	781b      	ldrb	r3, [r3, #0]
 80188cc:	f003 0310 	and.w	r3, r3, #16
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	f000 80e4 	beq.w	8018a9e <tcp_process+0x32e>
 80188d6:	4b54      	ldr	r3, [pc, #336]	; (8018a28 <tcp_process+0x2b8>)
 80188d8:	781b      	ldrb	r3, [r3, #0]
 80188da:	f003 0302 	and.w	r3, r3, #2
 80188de:	2b00      	cmp	r3, #0
 80188e0:	f000 80dd 	beq.w	8018a9e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80188e8:	1c5a      	adds	r2, r3, #1
 80188ea:	4b50      	ldr	r3, [pc, #320]	; (8018a2c <tcp_process+0x2bc>)
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	429a      	cmp	r2, r3
 80188f0:	f040 80d5 	bne.w	8018a9e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80188f4:	4b4e      	ldr	r3, [pc, #312]	; (8018a30 <tcp_process+0x2c0>)
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	1c5a      	adds	r2, r3, #1
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8018906:	4b49      	ldr	r3, [pc, #292]	; (8018a2c <tcp_process+0x2bc>)
 8018908:	681a      	ldr	r2, [r3, #0]
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801890e:	4b4c      	ldr	r3, [pc, #304]	; (8018a40 <tcp_process+0x2d0>)
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	89db      	ldrh	r3, [r3, #14]
 8018914:	b29a      	uxth	r2, r3
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018928:	4b41      	ldr	r3, [pc, #260]	; (8018a30 <tcp_process+0x2c0>)
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	1e5a      	subs	r2, r3, #1
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	2204      	movs	r2, #4
 8018936:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	3304      	adds	r3, #4
 8018940:	4618      	mov	r0, r3
 8018942:	f006 fcd7 	bl	801f2f4 <ip4_route>
 8018946:	4601      	mov	r1, r0
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	3304      	adds	r3, #4
 801894c:	461a      	mov	r2, r3
 801894e:	4620      	mov	r0, r4
 8018950:	f7ff f88e 	bl	8017a70 <tcp_eff_send_mss_netif>
 8018954:	4603      	mov	r3, r0
 8018956:	461a      	mov	r2, r3
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018960:	009a      	lsls	r2, r3, #2
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018966:	005b      	lsls	r3, r3, #1
 8018968:	f241 111c 	movw	r1, #4380	; 0x111c
 801896c:	428b      	cmp	r3, r1
 801896e:	bf38      	it	cc
 8018970:	460b      	movcc	r3, r1
 8018972:	429a      	cmp	r2, r3
 8018974:	d204      	bcs.n	8018980 <tcp_process+0x210>
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801897a:	009b      	lsls	r3, r3, #2
 801897c:	b29b      	uxth	r3, r3
 801897e:	e00d      	b.n	801899c <tcp_process+0x22c>
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018984:	005b      	lsls	r3, r3, #1
 8018986:	f241 121c 	movw	r2, #4380	; 0x111c
 801898a:	4293      	cmp	r3, r2
 801898c:	d904      	bls.n	8018998 <tcp_process+0x228>
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018992:	005b      	lsls	r3, r3, #1
 8018994:	b29b      	uxth	r3, r3
 8018996:	e001      	b.n	801899c <tcp_process+0x22c>
 8018998:	f241 131c 	movw	r3, #4380	; 0x111c
 801899c:	687a      	ldr	r2, [r7, #4]
 801899e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d106      	bne.n	80189ba <tcp_process+0x24a>
 80189ac:	4b1b      	ldr	r3, [pc, #108]	; (8018a1c <tcp_process+0x2ac>)
 80189ae:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80189b2:	4924      	ldr	r1, [pc, #144]	; (8018a44 <tcp_process+0x2d4>)
 80189b4:	481b      	ldr	r0, [pc, #108]	; (8018a24 <tcp_process+0x2b4>)
 80189b6:	f008 fdb3 	bl	8021520 <iprintf>
        --pcb->snd_queuelen;
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80189c0:	3b01      	subs	r3, #1
 80189c2:	b29a      	uxth	r2, r3
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80189ce:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80189d0:	69fb      	ldr	r3, [r7, #28]
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d111      	bne.n	80189fa <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80189da:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80189dc:	69fb      	ldr	r3, [r7, #28]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d106      	bne.n	80189f0 <tcp_process+0x280>
 80189e2:	4b0e      	ldr	r3, [pc, #56]	; (8018a1c <tcp_process+0x2ac>)
 80189e4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80189e8:	4917      	ldr	r1, [pc, #92]	; (8018a48 <tcp_process+0x2d8>)
 80189ea:	480e      	ldr	r0, [pc, #56]	; (8018a24 <tcp_process+0x2b4>)
 80189ec:	f008 fd98 	bl	8021520 <iprintf>
          pcb->unsent = rseg->next;
 80189f0:	69fb      	ldr	r3, [r7, #28]
 80189f2:	681a      	ldr	r2, [r3, #0]
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80189f8:	e003      	b.n	8018a02 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80189fa:	69fb      	ldr	r3, [r7, #28]
 80189fc:	681a      	ldr	r2, [r3, #0]
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8018a02:	69f8      	ldr	r0, [r7, #28]
 8018a04:	f7fe fd3e 	bl	8017484 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d11d      	bne.n	8018a4c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018a16:	861a      	strh	r2, [r3, #48]	; 0x30
 8018a18:	e01f      	b.n	8018a5a <tcp_process+0x2ea>
 8018a1a:	bf00      	nop
 8018a1c:	080236c4 	.word	0x080236c4
 8018a20:	080238fc 	.word	0x080238fc
 8018a24:	08023710 	.word	0x08023710
 8018a28:	20008fec 	.word	0x20008fec
 8018a2c:	20008fe4 	.word	0x20008fe4
 8018a30:	20008fe0 	.word	0x20008fe0
 8018a34:	08023918 	.word	0x08023918
 8018a38:	20008fed 	.word	0x20008fed
 8018a3c:	20010338 	.word	0x20010338
 8018a40:	20008fd0 	.word	0x20008fd0
 8018a44:	08023938 	.word	0x08023938
 8018a48:	08023950 	.word	0x08023950
        } else {
          pcb->rtime = 0;
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	2200      	movs	r2, #0
 8018a50:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	2200      	movs	r2, #0
 8018a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d00a      	beq.n	8018a7a <tcp_process+0x30a>
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018a6a:	687a      	ldr	r2, [r7, #4]
 8018a6c:	6910      	ldr	r0, [r2, #16]
 8018a6e:	2200      	movs	r2, #0
 8018a70:	6879      	ldr	r1, [r7, #4]
 8018a72:	4798      	blx	r3
 8018a74:	4603      	mov	r3, r0
 8018a76:	76bb      	strb	r3, [r7, #26]
 8018a78:	e001      	b.n	8018a7e <tcp_process+0x30e>
 8018a7a:	2300      	movs	r3, #0
 8018a7c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8018a7e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018a82:	f113 0f0d 	cmn.w	r3, #13
 8018a86:	d102      	bne.n	8018a8e <tcp_process+0x31e>
          return ERR_ABRT;
 8018a88:	f06f 030c 	mvn.w	r3, #12
 8018a8c:	e250      	b.n	8018f30 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	8b5b      	ldrh	r3, [r3, #26]
 8018a92:	f043 0302 	orr.w	r3, r3, #2
 8018a96:	b29a      	uxth	r2, r3
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8018a9c:	e23a      	b.n	8018f14 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8018a9e:	4b9d      	ldr	r3, [pc, #628]	; (8018d14 <tcp_process+0x5a4>)
 8018aa0:	781b      	ldrb	r3, [r3, #0]
 8018aa2:	f003 0310 	and.w	r3, r3, #16
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	f000 8234 	beq.w	8018f14 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018aac:	4b9a      	ldr	r3, [pc, #616]	; (8018d18 <tcp_process+0x5a8>)
 8018aae:	6819      	ldr	r1, [r3, #0]
 8018ab0:	4b9a      	ldr	r3, [pc, #616]	; (8018d1c <tcp_process+0x5ac>)
 8018ab2:	881b      	ldrh	r3, [r3, #0]
 8018ab4:	461a      	mov	r2, r3
 8018ab6:	4b9a      	ldr	r3, [pc, #616]	; (8018d20 <tcp_process+0x5b0>)
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018abc:	4b99      	ldr	r3, [pc, #612]	; (8018d24 <tcp_process+0x5b4>)
 8018abe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ac0:	885b      	ldrh	r3, [r3, #2]
 8018ac2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018ac4:	4a97      	ldr	r2, [pc, #604]	; (8018d24 <tcp_process+0x5b4>)
 8018ac6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ac8:	8812      	ldrh	r2, [r2, #0]
 8018aca:	b292      	uxth	r2, r2
 8018acc:	9202      	str	r2, [sp, #8]
 8018ace:	9301      	str	r3, [sp, #4]
 8018ad0:	4b95      	ldr	r3, [pc, #596]	; (8018d28 <tcp_process+0x5b8>)
 8018ad2:	9300      	str	r3, [sp, #0]
 8018ad4:	4b95      	ldr	r3, [pc, #596]	; (8018d2c <tcp_process+0x5bc>)
 8018ad6:	4602      	mov	r2, r0
 8018ad8:	6878      	ldr	r0, [r7, #4]
 8018ada:	f002 fc93 	bl	801b404 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018ae4:	2b05      	cmp	r3, #5
 8018ae6:	f200 8215 	bhi.w	8018f14 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	2200      	movs	r2, #0
 8018aee:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8018af0:	6878      	ldr	r0, [r7, #4]
 8018af2:	f002 fa51 	bl	801af98 <tcp_rexmit_rto>
      break;
 8018af6:	e20d      	b.n	8018f14 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8018af8:	4b86      	ldr	r3, [pc, #536]	; (8018d14 <tcp_process+0x5a4>)
 8018afa:	781b      	ldrb	r3, [r3, #0]
 8018afc:	f003 0310 	and.w	r3, r3, #16
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	f000 80a1 	beq.w	8018c48 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018b06:	4b84      	ldr	r3, [pc, #528]	; (8018d18 <tcp_process+0x5a8>)
 8018b08:	681a      	ldr	r2, [r3, #0]
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b0e:	1ad3      	subs	r3, r2, r3
 8018b10:	3b01      	subs	r3, #1
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	db7e      	blt.n	8018c14 <tcp_process+0x4a4>
 8018b16:	4b80      	ldr	r3, [pc, #512]	; (8018d18 <tcp_process+0x5a8>)
 8018b18:	681a      	ldr	r2, [r3, #0]
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b1e:	1ad3      	subs	r3, r2, r3
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	dc77      	bgt.n	8018c14 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	2204      	movs	r2, #4
 8018b28:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d102      	bne.n	8018b38 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8018b32:	23fa      	movs	r3, #250	; 0xfa
 8018b34:	76bb      	strb	r3, [r7, #26]
 8018b36:	e01d      	b.n	8018b74 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018b3c:	699b      	ldr	r3, [r3, #24]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d106      	bne.n	8018b50 <tcp_process+0x3e0>
 8018b42:	4b7b      	ldr	r3, [pc, #492]	; (8018d30 <tcp_process+0x5c0>)
 8018b44:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8018b48:	497a      	ldr	r1, [pc, #488]	; (8018d34 <tcp_process+0x5c4>)
 8018b4a:	487b      	ldr	r0, [pc, #492]	; (8018d38 <tcp_process+0x5c8>)
 8018b4c:	f008 fce8 	bl	8021520 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018b54:	699b      	ldr	r3, [r3, #24]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d00a      	beq.n	8018b70 <tcp_process+0x400>
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018b5e:	699b      	ldr	r3, [r3, #24]
 8018b60:	687a      	ldr	r2, [r7, #4]
 8018b62:	6910      	ldr	r0, [r2, #16]
 8018b64:	2200      	movs	r2, #0
 8018b66:	6879      	ldr	r1, [r7, #4]
 8018b68:	4798      	blx	r3
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	76bb      	strb	r3, [r7, #26]
 8018b6e:	e001      	b.n	8018b74 <tcp_process+0x404>
 8018b70:	23f0      	movs	r3, #240	; 0xf0
 8018b72:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8018b74:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d00a      	beq.n	8018b92 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8018b7c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018b80:	f113 0f0d 	cmn.w	r3, #13
 8018b84:	d002      	beq.n	8018b8c <tcp_process+0x41c>
              tcp_abort(pcb);
 8018b86:	6878      	ldr	r0, [r7, #4]
 8018b88:	f7fd ff94 	bl	8016ab4 <tcp_abort>
            }
            return ERR_ABRT;
 8018b8c:	f06f 030c 	mvn.w	r3, #12
 8018b90:	e1ce      	b.n	8018f30 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8018b92:	6878      	ldr	r0, [r7, #4]
 8018b94:	f000 fae0 	bl	8019158 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8018b98:	4b68      	ldr	r3, [pc, #416]	; (8018d3c <tcp_process+0x5cc>)
 8018b9a:	881b      	ldrh	r3, [r3, #0]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d005      	beq.n	8018bac <tcp_process+0x43c>
            recv_acked--;
 8018ba0:	4b66      	ldr	r3, [pc, #408]	; (8018d3c <tcp_process+0x5cc>)
 8018ba2:	881b      	ldrh	r3, [r3, #0]
 8018ba4:	3b01      	subs	r3, #1
 8018ba6:	b29a      	uxth	r2, r3
 8018ba8:	4b64      	ldr	r3, [pc, #400]	; (8018d3c <tcp_process+0x5cc>)
 8018baa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018bb0:	009a      	lsls	r2, r3, #2
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018bb6:	005b      	lsls	r3, r3, #1
 8018bb8:	f241 111c 	movw	r1, #4380	; 0x111c
 8018bbc:	428b      	cmp	r3, r1
 8018bbe:	bf38      	it	cc
 8018bc0:	460b      	movcc	r3, r1
 8018bc2:	429a      	cmp	r2, r3
 8018bc4:	d204      	bcs.n	8018bd0 <tcp_process+0x460>
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018bca:	009b      	lsls	r3, r3, #2
 8018bcc:	b29b      	uxth	r3, r3
 8018bce:	e00d      	b.n	8018bec <tcp_process+0x47c>
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018bd4:	005b      	lsls	r3, r3, #1
 8018bd6:	f241 121c 	movw	r2, #4380	; 0x111c
 8018bda:	4293      	cmp	r3, r2
 8018bdc:	d904      	bls.n	8018be8 <tcp_process+0x478>
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018be2:	005b      	lsls	r3, r3, #1
 8018be4:	b29b      	uxth	r3, r3
 8018be6:	e001      	b.n	8018bec <tcp_process+0x47c>
 8018be8:	f241 131c 	movw	r3, #4380	; 0x111c
 8018bec:	687a      	ldr	r2, [r7, #4]
 8018bee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8018bf2:	4b53      	ldr	r3, [pc, #332]	; (8018d40 <tcp_process+0x5d0>)
 8018bf4:	781b      	ldrb	r3, [r3, #0]
 8018bf6:	f003 0320 	and.w	r3, r3, #32
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d037      	beq.n	8018c6e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	8b5b      	ldrh	r3, [r3, #26]
 8018c02:	f043 0302 	orr.w	r3, r3, #2
 8018c06:	b29a      	uxth	r2, r3
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	2207      	movs	r2, #7
 8018c10:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8018c12:	e02c      	b.n	8018c6e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018c14:	4b40      	ldr	r3, [pc, #256]	; (8018d18 <tcp_process+0x5a8>)
 8018c16:	6819      	ldr	r1, [r3, #0]
 8018c18:	4b40      	ldr	r3, [pc, #256]	; (8018d1c <tcp_process+0x5ac>)
 8018c1a:	881b      	ldrh	r3, [r3, #0]
 8018c1c:	461a      	mov	r2, r3
 8018c1e:	4b40      	ldr	r3, [pc, #256]	; (8018d20 <tcp_process+0x5b0>)
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018c24:	4b3f      	ldr	r3, [pc, #252]	; (8018d24 <tcp_process+0x5b4>)
 8018c26:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018c28:	885b      	ldrh	r3, [r3, #2]
 8018c2a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018c2c:	4a3d      	ldr	r2, [pc, #244]	; (8018d24 <tcp_process+0x5b4>)
 8018c2e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018c30:	8812      	ldrh	r2, [r2, #0]
 8018c32:	b292      	uxth	r2, r2
 8018c34:	9202      	str	r2, [sp, #8]
 8018c36:	9301      	str	r3, [sp, #4]
 8018c38:	4b3b      	ldr	r3, [pc, #236]	; (8018d28 <tcp_process+0x5b8>)
 8018c3a:	9300      	str	r3, [sp, #0]
 8018c3c:	4b3b      	ldr	r3, [pc, #236]	; (8018d2c <tcp_process+0x5bc>)
 8018c3e:	4602      	mov	r2, r0
 8018c40:	6878      	ldr	r0, [r7, #4]
 8018c42:	f002 fbdf 	bl	801b404 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8018c46:	e167      	b.n	8018f18 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8018c48:	4b32      	ldr	r3, [pc, #200]	; (8018d14 <tcp_process+0x5a4>)
 8018c4a:	781b      	ldrb	r3, [r3, #0]
 8018c4c:	f003 0302 	and.w	r3, r3, #2
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	f000 8161 	beq.w	8018f18 <tcp_process+0x7a8>
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c5a:	1e5a      	subs	r2, r3, #1
 8018c5c:	4b30      	ldr	r3, [pc, #192]	; (8018d20 <tcp_process+0x5b0>)
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	429a      	cmp	r2, r3
 8018c62:	f040 8159 	bne.w	8018f18 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8018c66:	6878      	ldr	r0, [r7, #4]
 8018c68:	f002 f9b8 	bl	801afdc <tcp_rexmit>
      break;
 8018c6c:	e154      	b.n	8018f18 <tcp_process+0x7a8>
 8018c6e:	e153      	b.n	8018f18 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8018c70:	6878      	ldr	r0, [r7, #4]
 8018c72:	f000 fa71 	bl	8019158 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8018c76:	4b32      	ldr	r3, [pc, #200]	; (8018d40 <tcp_process+0x5d0>)
 8018c78:	781b      	ldrb	r3, [r3, #0]
 8018c7a:	f003 0320 	and.w	r3, r3, #32
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	f000 814c 	beq.w	8018f1c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	8b5b      	ldrh	r3, [r3, #26]
 8018c88:	f043 0302 	orr.w	r3, r3, #2
 8018c8c:	b29a      	uxth	r2, r3
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	2207      	movs	r2, #7
 8018c96:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018c98:	e140      	b.n	8018f1c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8018c9a:	6878      	ldr	r0, [r7, #4]
 8018c9c:	f000 fa5c 	bl	8019158 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018ca0:	4b27      	ldr	r3, [pc, #156]	; (8018d40 <tcp_process+0x5d0>)
 8018ca2:	781b      	ldrb	r3, [r3, #0]
 8018ca4:	f003 0320 	and.w	r3, r3, #32
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d071      	beq.n	8018d90 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018cac:	4b19      	ldr	r3, [pc, #100]	; (8018d14 <tcp_process+0x5a4>)
 8018cae:	781b      	ldrb	r3, [r3, #0]
 8018cb0:	f003 0310 	and.w	r3, r3, #16
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d060      	beq.n	8018d7a <tcp_process+0x60a>
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018cbc:	4b16      	ldr	r3, [pc, #88]	; (8018d18 <tcp_process+0x5a8>)
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	429a      	cmp	r2, r3
 8018cc2:	d15a      	bne.n	8018d7a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d156      	bne.n	8018d7a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	8b5b      	ldrh	r3, [r3, #26]
 8018cd0:	f043 0302 	orr.w	r3, r3, #2
 8018cd4:	b29a      	uxth	r2, r3
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8018cda:	6878      	ldr	r0, [r7, #4]
 8018cdc:	f7fe fdbe 	bl	801785c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8018ce0:	4b18      	ldr	r3, [pc, #96]	; (8018d44 <tcp_process+0x5d4>)
 8018ce2:	681b      	ldr	r3, [r3, #0]
 8018ce4:	687a      	ldr	r2, [r7, #4]
 8018ce6:	429a      	cmp	r2, r3
 8018ce8:	d105      	bne.n	8018cf6 <tcp_process+0x586>
 8018cea:	4b16      	ldr	r3, [pc, #88]	; (8018d44 <tcp_process+0x5d4>)
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	68db      	ldr	r3, [r3, #12]
 8018cf0:	4a14      	ldr	r2, [pc, #80]	; (8018d44 <tcp_process+0x5d4>)
 8018cf2:	6013      	str	r3, [r2, #0]
 8018cf4:	e02e      	b.n	8018d54 <tcp_process+0x5e4>
 8018cf6:	4b13      	ldr	r3, [pc, #76]	; (8018d44 <tcp_process+0x5d4>)
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	617b      	str	r3, [r7, #20]
 8018cfc:	e027      	b.n	8018d4e <tcp_process+0x5de>
 8018cfe:	697b      	ldr	r3, [r7, #20]
 8018d00:	68db      	ldr	r3, [r3, #12]
 8018d02:	687a      	ldr	r2, [r7, #4]
 8018d04:	429a      	cmp	r2, r3
 8018d06:	d11f      	bne.n	8018d48 <tcp_process+0x5d8>
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	68da      	ldr	r2, [r3, #12]
 8018d0c:	697b      	ldr	r3, [r7, #20]
 8018d0e:	60da      	str	r2, [r3, #12]
 8018d10:	e020      	b.n	8018d54 <tcp_process+0x5e4>
 8018d12:	bf00      	nop
 8018d14:	20008fec 	.word	0x20008fec
 8018d18:	20008fe4 	.word	0x20008fe4
 8018d1c:	20008fea 	.word	0x20008fea
 8018d20:	20008fe0 	.word	0x20008fe0
 8018d24:	20008fd0 	.word	0x20008fd0
 8018d28:	2000cc10 	.word	0x2000cc10
 8018d2c:	2000cc14 	.word	0x2000cc14
 8018d30:	080236c4 	.word	0x080236c4
 8018d34:	08023964 	.word	0x08023964
 8018d38:	08023710 	.word	0x08023710
 8018d3c:	20008fe8 	.word	0x20008fe8
 8018d40:	20008fed 	.word	0x20008fed
 8018d44:	20010334 	.word	0x20010334
 8018d48:	697b      	ldr	r3, [r7, #20]
 8018d4a:	68db      	ldr	r3, [r3, #12]
 8018d4c:	617b      	str	r3, [r7, #20]
 8018d4e:	697b      	ldr	r3, [r7, #20]
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d1d4      	bne.n	8018cfe <tcp_process+0x58e>
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	2200      	movs	r2, #0
 8018d58:	60da      	str	r2, [r3, #12]
 8018d5a:	4b77      	ldr	r3, [pc, #476]	; (8018f38 <tcp_process+0x7c8>)
 8018d5c:	2201      	movs	r2, #1
 8018d5e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	220a      	movs	r2, #10
 8018d64:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8018d66:	4b75      	ldr	r3, [pc, #468]	; (8018f3c <tcp_process+0x7cc>)
 8018d68:	681a      	ldr	r2, [r3, #0]
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	60da      	str	r2, [r3, #12]
 8018d6e:	4a73      	ldr	r2, [pc, #460]	; (8018f3c <tcp_process+0x7cc>)
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	6013      	str	r3, [r2, #0]
 8018d74:	f002 fd08 	bl	801b788 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8018d78:	e0d2      	b.n	8018f20 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	8b5b      	ldrh	r3, [r3, #26]
 8018d7e:	f043 0302 	orr.w	r3, r3, #2
 8018d82:	b29a      	uxth	r2, r3
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	2208      	movs	r2, #8
 8018d8c:	751a      	strb	r2, [r3, #20]
      break;
 8018d8e:	e0c7      	b.n	8018f20 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018d90:	4b6b      	ldr	r3, [pc, #428]	; (8018f40 <tcp_process+0x7d0>)
 8018d92:	781b      	ldrb	r3, [r3, #0]
 8018d94:	f003 0310 	and.w	r3, r3, #16
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	f000 80c1 	beq.w	8018f20 <tcp_process+0x7b0>
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018da2:	4b68      	ldr	r3, [pc, #416]	; (8018f44 <tcp_process+0x7d4>)
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	429a      	cmp	r2, r3
 8018da8:	f040 80ba 	bne.w	8018f20 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	f040 80b5 	bne.w	8018f20 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	2206      	movs	r2, #6
 8018dba:	751a      	strb	r2, [r3, #20]
      break;
 8018dbc:	e0b0      	b.n	8018f20 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8018dbe:	6878      	ldr	r0, [r7, #4]
 8018dc0:	f000 f9ca 	bl	8019158 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018dc4:	4b60      	ldr	r3, [pc, #384]	; (8018f48 <tcp_process+0x7d8>)
 8018dc6:	781b      	ldrb	r3, [r3, #0]
 8018dc8:	f003 0320 	and.w	r3, r3, #32
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	f000 80a9 	beq.w	8018f24 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	8b5b      	ldrh	r3, [r3, #26]
 8018dd6:	f043 0302 	orr.w	r3, r3, #2
 8018dda:	b29a      	uxth	r2, r3
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8018de0:	6878      	ldr	r0, [r7, #4]
 8018de2:	f7fe fd3b 	bl	801785c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018de6:	4b59      	ldr	r3, [pc, #356]	; (8018f4c <tcp_process+0x7dc>)
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	687a      	ldr	r2, [r7, #4]
 8018dec:	429a      	cmp	r2, r3
 8018dee:	d105      	bne.n	8018dfc <tcp_process+0x68c>
 8018df0:	4b56      	ldr	r3, [pc, #344]	; (8018f4c <tcp_process+0x7dc>)
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	68db      	ldr	r3, [r3, #12]
 8018df6:	4a55      	ldr	r2, [pc, #340]	; (8018f4c <tcp_process+0x7dc>)
 8018df8:	6013      	str	r3, [r2, #0]
 8018dfa:	e013      	b.n	8018e24 <tcp_process+0x6b4>
 8018dfc:	4b53      	ldr	r3, [pc, #332]	; (8018f4c <tcp_process+0x7dc>)
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	613b      	str	r3, [r7, #16]
 8018e02:	e00c      	b.n	8018e1e <tcp_process+0x6ae>
 8018e04:	693b      	ldr	r3, [r7, #16]
 8018e06:	68db      	ldr	r3, [r3, #12]
 8018e08:	687a      	ldr	r2, [r7, #4]
 8018e0a:	429a      	cmp	r2, r3
 8018e0c:	d104      	bne.n	8018e18 <tcp_process+0x6a8>
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	68da      	ldr	r2, [r3, #12]
 8018e12:	693b      	ldr	r3, [r7, #16]
 8018e14:	60da      	str	r2, [r3, #12]
 8018e16:	e005      	b.n	8018e24 <tcp_process+0x6b4>
 8018e18:	693b      	ldr	r3, [r7, #16]
 8018e1a:	68db      	ldr	r3, [r3, #12]
 8018e1c:	613b      	str	r3, [r7, #16]
 8018e1e:	693b      	ldr	r3, [r7, #16]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d1ef      	bne.n	8018e04 <tcp_process+0x694>
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	2200      	movs	r2, #0
 8018e28:	60da      	str	r2, [r3, #12]
 8018e2a:	4b43      	ldr	r3, [pc, #268]	; (8018f38 <tcp_process+0x7c8>)
 8018e2c:	2201      	movs	r2, #1
 8018e2e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	220a      	movs	r2, #10
 8018e34:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018e36:	4b41      	ldr	r3, [pc, #260]	; (8018f3c <tcp_process+0x7cc>)
 8018e38:	681a      	ldr	r2, [r3, #0]
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	60da      	str	r2, [r3, #12]
 8018e3e:	4a3f      	ldr	r2, [pc, #252]	; (8018f3c <tcp_process+0x7cc>)
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	6013      	str	r3, [r2, #0]
 8018e44:	f002 fca0 	bl	801b788 <tcp_timer_needed>
      }
      break;
 8018e48:	e06c      	b.n	8018f24 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8018e4a:	6878      	ldr	r0, [r7, #4]
 8018e4c:	f000 f984 	bl	8019158 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018e50:	4b3b      	ldr	r3, [pc, #236]	; (8018f40 <tcp_process+0x7d0>)
 8018e52:	781b      	ldrb	r3, [r3, #0]
 8018e54:	f003 0310 	and.w	r3, r3, #16
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d065      	beq.n	8018f28 <tcp_process+0x7b8>
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018e60:	4b38      	ldr	r3, [pc, #224]	; (8018f44 <tcp_process+0x7d4>)
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	429a      	cmp	r2, r3
 8018e66:	d15f      	bne.n	8018f28 <tcp_process+0x7b8>
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d15b      	bne.n	8018f28 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8018e70:	6878      	ldr	r0, [r7, #4]
 8018e72:	f7fe fcf3 	bl	801785c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018e76:	4b35      	ldr	r3, [pc, #212]	; (8018f4c <tcp_process+0x7dc>)
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	687a      	ldr	r2, [r7, #4]
 8018e7c:	429a      	cmp	r2, r3
 8018e7e:	d105      	bne.n	8018e8c <tcp_process+0x71c>
 8018e80:	4b32      	ldr	r3, [pc, #200]	; (8018f4c <tcp_process+0x7dc>)
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	68db      	ldr	r3, [r3, #12]
 8018e86:	4a31      	ldr	r2, [pc, #196]	; (8018f4c <tcp_process+0x7dc>)
 8018e88:	6013      	str	r3, [r2, #0]
 8018e8a:	e013      	b.n	8018eb4 <tcp_process+0x744>
 8018e8c:	4b2f      	ldr	r3, [pc, #188]	; (8018f4c <tcp_process+0x7dc>)
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	60fb      	str	r3, [r7, #12]
 8018e92:	e00c      	b.n	8018eae <tcp_process+0x73e>
 8018e94:	68fb      	ldr	r3, [r7, #12]
 8018e96:	68db      	ldr	r3, [r3, #12]
 8018e98:	687a      	ldr	r2, [r7, #4]
 8018e9a:	429a      	cmp	r2, r3
 8018e9c:	d104      	bne.n	8018ea8 <tcp_process+0x738>
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	68da      	ldr	r2, [r3, #12]
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	60da      	str	r2, [r3, #12]
 8018ea6:	e005      	b.n	8018eb4 <tcp_process+0x744>
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	68db      	ldr	r3, [r3, #12]
 8018eac:	60fb      	str	r3, [r7, #12]
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d1ef      	bne.n	8018e94 <tcp_process+0x724>
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	60da      	str	r2, [r3, #12]
 8018eba:	4b1f      	ldr	r3, [pc, #124]	; (8018f38 <tcp_process+0x7c8>)
 8018ebc:	2201      	movs	r2, #1
 8018ebe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	220a      	movs	r2, #10
 8018ec4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018ec6:	4b1d      	ldr	r3, [pc, #116]	; (8018f3c <tcp_process+0x7cc>)
 8018ec8:	681a      	ldr	r2, [r3, #0]
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	60da      	str	r2, [r3, #12]
 8018ece:	4a1b      	ldr	r2, [pc, #108]	; (8018f3c <tcp_process+0x7cc>)
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	6013      	str	r3, [r2, #0]
 8018ed4:	f002 fc58 	bl	801b788 <tcp_timer_needed>
      }
      break;
 8018ed8:	e026      	b.n	8018f28 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8018eda:	6878      	ldr	r0, [r7, #4]
 8018edc:	f000 f93c 	bl	8019158 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018ee0:	4b17      	ldr	r3, [pc, #92]	; (8018f40 <tcp_process+0x7d0>)
 8018ee2:	781b      	ldrb	r3, [r3, #0]
 8018ee4:	f003 0310 	and.w	r3, r3, #16
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d01f      	beq.n	8018f2c <tcp_process+0x7bc>
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018ef0:	4b14      	ldr	r3, [pc, #80]	; (8018f44 <tcp_process+0x7d4>)
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	429a      	cmp	r2, r3
 8018ef6:	d119      	bne.n	8018f2c <tcp_process+0x7bc>
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d115      	bne.n	8018f2c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8018f00:	4b11      	ldr	r3, [pc, #68]	; (8018f48 <tcp_process+0x7d8>)
 8018f02:	781b      	ldrb	r3, [r3, #0]
 8018f04:	f043 0310 	orr.w	r3, r3, #16
 8018f08:	b2da      	uxtb	r2, r3
 8018f0a:	4b0f      	ldr	r3, [pc, #60]	; (8018f48 <tcp_process+0x7d8>)
 8018f0c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8018f0e:	e00d      	b.n	8018f2c <tcp_process+0x7bc>
    default:
      break;
 8018f10:	bf00      	nop
 8018f12:	e00c      	b.n	8018f2e <tcp_process+0x7be>
      break;
 8018f14:	bf00      	nop
 8018f16:	e00a      	b.n	8018f2e <tcp_process+0x7be>
      break;
 8018f18:	bf00      	nop
 8018f1a:	e008      	b.n	8018f2e <tcp_process+0x7be>
      break;
 8018f1c:	bf00      	nop
 8018f1e:	e006      	b.n	8018f2e <tcp_process+0x7be>
      break;
 8018f20:	bf00      	nop
 8018f22:	e004      	b.n	8018f2e <tcp_process+0x7be>
      break;
 8018f24:	bf00      	nop
 8018f26:	e002      	b.n	8018f2e <tcp_process+0x7be>
      break;
 8018f28:	bf00      	nop
 8018f2a:	e000      	b.n	8018f2e <tcp_process+0x7be>
      break;
 8018f2c:	bf00      	nop
  }
  return ERR_OK;
 8018f2e:	2300      	movs	r3, #0
}
 8018f30:	4618      	mov	r0, r3
 8018f32:	3724      	adds	r7, #36	; 0x24
 8018f34:	46bd      	mov	sp, r7
 8018f36:	bd90      	pop	{r4, r7, pc}
 8018f38:	20010330 	.word	0x20010330
 8018f3c:	20010344 	.word	0x20010344
 8018f40:	20008fec 	.word	0x20008fec
 8018f44:	20008fe4 	.word	0x20008fe4
 8018f48:	20008fed 	.word	0x20008fed
 8018f4c:	20010334 	.word	0x20010334

08018f50 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8018f50:	b590      	push	{r4, r7, lr}
 8018f52:	b085      	sub	sp, #20
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	6078      	str	r0, [r7, #4]
 8018f58:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d106      	bne.n	8018f6e <tcp_oos_insert_segment+0x1e>
 8018f60:	4b3b      	ldr	r3, [pc, #236]	; (8019050 <tcp_oos_insert_segment+0x100>)
 8018f62:	f240 421f 	movw	r2, #1055	; 0x41f
 8018f66:	493b      	ldr	r1, [pc, #236]	; (8019054 <tcp_oos_insert_segment+0x104>)
 8018f68:	483b      	ldr	r0, [pc, #236]	; (8019058 <tcp_oos_insert_segment+0x108>)
 8018f6a:	f008 fad9 	bl	8021520 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	68db      	ldr	r3, [r3, #12]
 8018f72:	899b      	ldrh	r3, [r3, #12]
 8018f74:	b29b      	uxth	r3, r3
 8018f76:	4618      	mov	r0, r3
 8018f78:	f7fb fc32 	bl	80147e0 <lwip_htons>
 8018f7c:	4603      	mov	r3, r0
 8018f7e:	b2db      	uxtb	r3, r3
 8018f80:	f003 0301 	and.w	r3, r3, #1
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d028      	beq.n	8018fda <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8018f88:	6838      	ldr	r0, [r7, #0]
 8018f8a:	f7fe fa67 	bl	801745c <tcp_segs_free>
    next = NULL;
 8018f8e:	2300      	movs	r3, #0
 8018f90:	603b      	str	r3, [r7, #0]
 8018f92:	e056      	b.n	8019042 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018f94:	683b      	ldr	r3, [r7, #0]
 8018f96:	68db      	ldr	r3, [r3, #12]
 8018f98:	899b      	ldrh	r3, [r3, #12]
 8018f9a:	b29b      	uxth	r3, r3
 8018f9c:	4618      	mov	r0, r3
 8018f9e:	f7fb fc1f 	bl	80147e0 <lwip_htons>
 8018fa2:	4603      	mov	r3, r0
 8018fa4:	b2db      	uxtb	r3, r3
 8018fa6:	f003 0301 	and.w	r3, r3, #1
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d00d      	beq.n	8018fca <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	68db      	ldr	r3, [r3, #12]
 8018fb2:	899b      	ldrh	r3, [r3, #12]
 8018fb4:	b29c      	uxth	r4, r3
 8018fb6:	2001      	movs	r0, #1
 8018fb8:	f7fb fc12 	bl	80147e0 <lwip_htons>
 8018fbc:	4603      	mov	r3, r0
 8018fbe:	461a      	mov	r2, r3
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	68db      	ldr	r3, [r3, #12]
 8018fc4:	4322      	orrs	r2, r4
 8018fc6:	b292      	uxth	r2, r2
 8018fc8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8018fca:	683b      	ldr	r3, [r7, #0]
 8018fcc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8018fce:	683b      	ldr	r3, [r7, #0]
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8018fd4:	68f8      	ldr	r0, [r7, #12]
 8018fd6:	f7fe fa55 	bl	8017484 <tcp_seg_free>
    while (next &&
 8018fda:	683b      	ldr	r3, [r7, #0]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d00e      	beq.n	8018ffe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	891b      	ldrh	r3, [r3, #8]
 8018fe4:	461a      	mov	r2, r3
 8018fe6:	4b1d      	ldr	r3, [pc, #116]	; (801905c <tcp_oos_insert_segment+0x10c>)
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	441a      	add	r2, r3
 8018fec:	683b      	ldr	r3, [r7, #0]
 8018fee:	68db      	ldr	r3, [r3, #12]
 8018ff0:	685b      	ldr	r3, [r3, #4]
 8018ff2:	6839      	ldr	r1, [r7, #0]
 8018ff4:	8909      	ldrh	r1, [r1, #8]
 8018ff6:	440b      	add	r3, r1
 8018ff8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	daca      	bge.n	8018f94 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8018ffe:	683b      	ldr	r3, [r7, #0]
 8019000:	2b00      	cmp	r3, #0
 8019002:	d01e      	beq.n	8019042 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	891b      	ldrh	r3, [r3, #8]
 8019008:	461a      	mov	r2, r3
 801900a:	4b14      	ldr	r3, [pc, #80]	; (801905c <tcp_oos_insert_segment+0x10c>)
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	441a      	add	r2, r3
 8019010:	683b      	ldr	r3, [r7, #0]
 8019012:	68db      	ldr	r3, [r3, #12]
 8019014:	685b      	ldr	r3, [r3, #4]
 8019016:	1ad3      	subs	r3, r2, r3
    if (next &&
 8019018:	2b00      	cmp	r3, #0
 801901a:	dd12      	ble.n	8019042 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801901c:	683b      	ldr	r3, [r7, #0]
 801901e:	68db      	ldr	r3, [r3, #12]
 8019020:	685b      	ldr	r3, [r3, #4]
 8019022:	b29a      	uxth	r2, r3
 8019024:	4b0d      	ldr	r3, [pc, #52]	; (801905c <tcp_oos_insert_segment+0x10c>)
 8019026:	681b      	ldr	r3, [r3, #0]
 8019028:	b29b      	uxth	r3, r3
 801902a:	1ad3      	subs	r3, r2, r3
 801902c:	b29a      	uxth	r2, r3
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	685a      	ldr	r2, [r3, #4]
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	891b      	ldrh	r3, [r3, #8]
 801903a:	4619      	mov	r1, r3
 801903c:	4610      	mov	r0, r2
 801903e:	f7fc fe17 	bl	8015c70 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	683a      	ldr	r2, [r7, #0]
 8019046:	601a      	str	r2, [r3, #0]
}
 8019048:	bf00      	nop
 801904a:	3714      	adds	r7, #20
 801904c:	46bd      	mov	sp, r7
 801904e:	bd90      	pop	{r4, r7, pc}
 8019050:	080236c4 	.word	0x080236c4
 8019054:	08023984 	.word	0x08023984
 8019058:	08023710 	.word	0x08023710
 801905c:	20008fe0 	.word	0x20008fe0

08019060 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8019060:	b5b0      	push	{r4, r5, r7, lr}
 8019062:	b086      	sub	sp, #24
 8019064:	af00      	add	r7, sp, #0
 8019066:	60f8      	str	r0, [r7, #12]
 8019068:	60b9      	str	r1, [r7, #8]
 801906a:	607a      	str	r2, [r7, #4]
 801906c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801906e:	e03e      	b.n	80190ee <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8019070:	68bb      	ldr	r3, [r7, #8]
 8019072:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8019074:	68bb      	ldr	r3, [r7, #8]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801907a:	697b      	ldr	r3, [r7, #20]
 801907c:	685b      	ldr	r3, [r3, #4]
 801907e:	4618      	mov	r0, r3
 8019080:	f7fd f80a 	bl	8016098 <pbuf_clen>
 8019084:	4603      	mov	r3, r0
 8019086:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801908e:	8a7a      	ldrh	r2, [r7, #18]
 8019090:	429a      	cmp	r2, r3
 8019092:	d906      	bls.n	80190a2 <tcp_free_acked_segments+0x42>
 8019094:	4b2a      	ldr	r3, [pc, #168]	; (8019140 <tcp_free_acked_segments+0xe0>)
 8019096:	f240 4257 	movw	r2, #1111	; 0x457
 801909a:	492a      	ldr	r1, [pc, #168]	; (8019144 <tcp_free_acked_segments+0xe4>)
 801909c:	482a      	ldr	r0, [pc, #168]	; (8019148 <tcp_free_acked_segments+0xe8>)
 801909e:	f008 fa3f 	bl	8021520 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80190a8:	8a7b      	ldrh	r3, [r7, #18]
 80190aa:	1ad3      	subs	r3, r2, r3
 80190ac:	b29a      	uxth	r2, r3
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80190b4:	697b      	ldr	r3, [r7, #20]
 80190b6:	891a      	ldrh	r2, [r3, #8]
 80190b8:	4b24      	ldr	r3, [pc, #144]	; (801914c <tcp_free_acked_segments+0xec>)
 80190ba:	881b      	ldrh	r3, [r3, #0]
 80190bc:	4413      	add	r3, r2
 80190be:	b29a      	uxth	r2, r3
 80190c0:	4b22      	ldr	r3, [pc, #136]	; (801914c <tcp_free_acked_segments+0xec>)
 80190c2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80190c4:	6978      	ldr	r0, [r7, #20]
 80190c6:	f7fe f9dd 	bl	8017484 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d00c      	beq.n	80190ee <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80190d4:	68bb      	ldr	r3, [r7, #8]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d109      	bne.n	80190ee <tcp_free_acked_segments+0x8e>
 80190da:	683b      	ldr	r3, [r7, #0]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d106      	bne.n	80190ee <tcp_free_acked_segments+0x8e>
 80190e0:	4b17      	ldr	r3, [pc, #92]	; (8019140 <tcp_free_acked_segments+0xe0>)
 80190e2:	f240 4262 	movw	r2, #1122	; 0x462
 80190e6:	491a      	ldr	r1, [pc, #104]	; (8019150 <tcp_free_acked_segments+0xf0>)
 80190e8:	4817      	ldr	r0, [pc, #92]	; (8019148 <tcp_free_acked_segments+0xe8>)
 80190ea:	f008 fa19 	bl	8021520 <iprintf>
  while (seg_list != NULL &&
 80190ee:	68bb      	ldr	r3, [r7, #8]
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d020      	beq.n	8019136 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80190f4:	68bb      	ldr	r3, [r7, #8]
 80190f6:	68db      	ldr	r3, [r3, #12]
 80190f8:	685b      	ldr	r3, [r3, #4]
 80190fa:	4618      	mov	r0, r3
 80190fc:	f7fb fb85 	bl	801480a <lwip_htonl>
 8019100:	4604      	mov	r4, r0
 8019102:	68bb      	ldr	r3, [r7, #8]
 8019104:	891b      	ldrh	r3, [r3, #8]
 8019106:	461d      	mov	r5, r3
 8019108:	68bb      	ldr	r3, [r7, #8]
 801910a:	68db      	ldr	r3, [r3, #12]
 801910c:	899b      	ldrh	r3, [r3, #12]
 801910e:	b29b      	uxth	r3, r3
 8019110:	4618      	mov	r0, r3
 8019112:	f7fb fb65 	bl	80147e0 <lwip_htons>
 8019116:	4603      	mov	r3, r0
 8019118:	b2db      	uxtb	r3, r3
 801911a:	f003 0303 	and.w	r3, r3, #3
 801911e:	2b00      	cmp	r3, #0
 8019120:	d001      	beq.n	8019126 <tcp_free_acked_segments+0xc6>
 8019122:	2301      	movs	r3, #1
 8019124:	e000      	b.n	8019128 <tcp_free_acked_segments+0xc8>
 8019126:	2300      	movs	r3, #0
 8019128:	442b      	add	r3, r5
 801912a:	18e2      	adds	r2, r4, r3
 801912c:	4b09      	ldr	r3, [pc, #36]	; (8019154 <tcp_free_acked_segments+0xf4>)
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8019132:	2b00      	cmp	r3, #0
 8019134:	dd9c      	ble.n	8019070 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8019136:	68bb      	ldr	r3, [r7, #8]
}
 8019138:	4618      	mov	r0, r3
 801913a:	3718      	adds	r7, #24
 801913c:	46bd      	mov	sp, r7
 801913e:	bdb0      	pop	{r4, r5, r7, pc}
 8019140:	080236c4 	.word	0x080236c4
 8019144:	080239ac 	.word	0x080239ac
 8019148:	08023710 	.word	0x08023710
 801914c:	20008fe8 	.word	0x20008fe8
 8019150:	080239d4 	.word	0x080239d4
 8019154:	20008fe4 	.word	0x20008fe4

08019158 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8019158:	b5b0      	push	{r4, r5, r7, lr}
 801915a:	b094      	sub	sp, #80	; 0x50
 801915c:	af00      	add	r7, sp, #0
 801915e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8019160:	2300      	movs	r3, #0
 8019162:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	2b00      	cmp	r3, #0
 8019168:	d106      	bne.n	8019178 <tcp_receive+0x20>
 801916a:	4ba6      	ldr	r3, [pc, #664]	; (8019404 <tcp_receive+0x2ac>)
 801916c:	f240 427b 	movw	r2, #1147	; 0x47b
 8019170:	49a5      	ldr	r1, [pc, #660]	; (8019408 <tcp_receive+0x2b0>)
 8019172:	48a6      	ldr	r0, [pc, #664]	; (801940c <tcp_receive+0x2b4>)
 8019174:	f008 f9d4 	bl	8021520 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	7d1b      	ldrb	r3, [r3, #20]
 801917c:	2b03      	cmp	r3, #3
 801917e:	d806      	bhi.n	801918e <tcp_receive+0x36>
 8019180:	4ba0      	ldr	r3, [pc, #640]	; (8019404 <tcp_receive+0x2ac>)
 8019182:	f240 427c 	movw	r2, #1148	; 0x47c
 8019186:	49a2      	ldr	r1, [pc, #648]	; (8019410 <tcp_receive+0x2b8>)
 8019188:	48a0      	ldr	r0, [pc, #640]	; (801940c <tcp_receive+0x2b4>)
 801918a:	f008 f9c9 	bl	8021520 <iprintf>

  if (flags & TCP_ACK) {
 801918e:	4ba1      	ldr	r3, [pc, #644]	; (8019414 <tcp_receive+0x2bc>)
 8019190:	781b      	ldrb	r3, [r3, #0]
 8019192:	f003 0310 	and.w	r3, r3, #16
 8019196:	2b00      	cmp	r3, #0
 8019198:	f000 8263 	beq.w	8019662 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80191a2:	461a      	mov	r2, r3
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80191a8:	4413      	add	r3, r2
 80191aa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80191b0:	4b99      	ldr	r3, [pc, #612]	; (8019418 <tcp_receive+0x2c0>)
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	1ad3      	subs	r3, r2, r3
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	db1b      	blt.n	80191f2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80191be:	4b96      	ldr	r3, [pc, #600]	; (8019418 <tcp_receive+0x2c0>)
 80191c0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80191c2:	429a      	cmp	r2, r3
 80191c4:	d106      	bne.n	80191d4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80191ca:	4b94      	ldr	r3, [pc, #592]	; (801941c <tcp_receive+0x2c4>)
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	1ad3      	subs	r3, r2, r3
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	db0e      	blt.n	80191f2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80191d8:	4b90      	ldr	r3, [pc, #576]	; (801941c <tcp_receive+0x2c4>)
 80191da:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80191dc:	429a      	cmp	r2, r3
 80191de:	d125      	bne.n	801922c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80191e0:	4b8f      	ldr	r3, [pc, #572]	; (8019420 <tcp_receive+0x2c8>)
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	89db      	ldrh	r3, [r3, #14]
 80191e6:	b29a      	uxth	r2, r3
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80191ee:	429a      	cmp	r2, r3
 80191f0:	d91c      	bls.n	801922c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80191f2:	4b8b      	ldr	r3, [pc, #556]	; (8019420 <tcp_receive+0x2c8>)
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	89db      	ldrh	r3, [r3, #14]
 80191f8:	b29a      	uxth	r2, r3
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801920c:	429a      	cmp	r2, r3
 801920e:	d205      	bcs.n	801921c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801921c:	4b7e      	ldr	r3, [pc, #504]	; (8019418 <tcp_receive+0x2c0>)
 801921e:	681a      	ldr	r2, [r3, #0]
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8019224:	4b7d      	ldr	r3, [pc, #500]	; (801941c <tcp_receive+0x2c4>)
 8019226:	681a      	ldr	r2, [r3, #0]
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801922c:	4b7b      	ldr	r3, [pc, #492]	; (801941c <tcp_receive+0x2c4>)
 801922e:	681a      	ldr	r2, [r3, #0]
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019234:	1ad3      	subs	r3, r2, r3
 8019236:	2b00      	cmp	r3, #0
 8019238:	dc58      	bgt.n	80192ec <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801923a:	4b7a      	ldr	r3, [pc, #488]	; (8019424 <tcp_receive+0x2cc>)
 801923c:	881b      	ldrh	r3, [r3, #0]
 801923e:	2b00      	cmp	r3, #0
 8019240:	d14b      	bne.n	80192da <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019246:	687a      	ldr	r2, [r7, #4]
 8019248:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801924c:	4413      	add	r3, r2
 801924e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019250:	429a      	cmp	r2, r3
 8019252:	d142      	bne.n	80192da <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801925a:	2b00      	cmp	r3, #0
 801925c:	db3d      	blt.n	80192da <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019262:	4b6e      	ldr	r3, [pc, #440]	; (801941c <tcp_receive+0x2c4>)
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	429a      	cmp	r2, r3
 8019268:	d137      	bne.n	80192da <tcp_receive+0x182>
              found_dupack = 1;
 801926a:	2301      	movs	r3, #1
 801926c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019274:	2bff      	cmp	r3, #255	; 0xff
 8019276:	d007      	beq.n	8019288 <tcp_receive+0x130>
                ++pcb->dupacks;
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801927e:	3301      	adds	r3, #1
 8019280:	b2da      	uxtb	r2, r3
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801928e:	2b03      	cmp	r3, #3
 8019290:	d91b      	bls.n	80192ca <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801929c:	4413      	add	r3, r2
 801929e:	b29a      	uxth	r2, r3
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80192a6:	429a      	cmp	r2, r3
 80192a8:	d30a      	bcc.n	80192c0 <tcp_receive+0x168>
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80192b4:	4413      	add	r3, r2
 80192b6:	b29a      	uxth	r2, r3
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80192be:	e004      	b.n	80192ca <tcp_receive+0x172>
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80192c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80192d0:	2b02      	cmp	r3, #2
 80192d2:	d902      	bls.n	80192da <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80192d4:	6878      	ldr	r0, [r7, #4]
 80192d6:	f001 feed 	bl	801b0b4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80192da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80192dc:	2b00      	cmp	r3, #0
 80192de:	f040 8160 	bne.w	80195a2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	2200      	movs	r2, #0
 80192e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80192ea:	e15a      	b.n	80195a2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80192ec:	4b4b      	ldr	r3, [pc, #300]	; (801941c <tcp_receive+0x2c4>)
 80192ee:	681a      	ldr	r2, [r3, #0]
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80192f4:	1ad3      	subs	r3, r2, r3
 80192f6:	3b01      	subs	r3, #1
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	f2c0 814d 	blt.w	8019598 <tcp_receive+0x440>
 80192fe:	4b47      	ldr	r3, [pc, #284]	; (801941c <tcp_receive+0x2c4>)
 8019300:	681a      	ldr	r2, [r3, #0]
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019306:	1ad3      	subs	r3, r2, r3
 8019308:	2b00      	cmp	r3, #0
 801930a:	f300 8145 	bgt.w	8019598 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	8b5b      	ldrh	r3, [r3, #26]
 8019312:	f003 0304 	and.w	r3, r3, #4
 8019316:	2b00      	cmp	r3, #0
 8019318:	d010      	beq.n	801933c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	8b5b      	ldrh	r3, [r3, #26]
 801931e:	f023 0304 	bic.w	r3, r3, #4
 8019322:	b29a      	uxth	r2, r3
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	2200      	movs	r2, #0
 8019338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	2200      	movs	r2, #0
 8019340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801934a:	10db      	asrs	r3, r3, #3
 801934c:	b21b      	sxth	r3, r3
 801934e:	b29a      	uxth	r2, r3
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019356:	b29b      	uxth	r3, r3
 8019358:	4413      	add	r3, r2
 801935a:	b29b      	uxth	r3, r3
 801935c:	b21a      	sxth	r2, r3
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8019364:	4b2d      	ldr	r3, [pc, #180]	; (801941c <tcp_receive+0x2c4>)
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	b29a      	uxth	r2, r3
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801936e:	b29b      	uxth	r3, r3
 8019370:	1ad3      	subs	r3, r2, r3
 8019372:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	2200      	movs	r2, #0
 8019378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801937c:	4b27      	ldr	r3, [pc, #156]	; (801941c <tcp_receive+0x2c4>)
 801937e:	681a      	ldr	r2, [r3, #0]
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	7d1b      	ldrb	r3, [r3, #20]
 8019388:	2b03      	cmp	r3, #3
 801938a:	f240 8096 	bls.w	80194ba <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801939a:	429a      	cmp	r2, r3
 801939c:	d244      	bcs.n	8019428 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	8b5b      	ldrh	r3, [r3, #26]
 80193a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d001      	beq.n	80193ae <tcp_receive+0x256>
 80193aa:	2301      	movs	r3, #1
 80193ac:	e000      	b.n	80193b0 <tcp_receive+0x258>
 80193ae:	2302      	movs	r3, #2
 80193b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80193b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80193b8:	b29a      	uxth	r2, r3
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80193be:	fb12 f303 	smulbb	r3, r2, r3
 80193c2:	b29b      	uxth	r3, r3
 80193c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80193c6:	4293      	cmp	r3, r2
 80193c8:	bf28      	it	cs
 80193ca:	4613      	movcs	r3, r2
 80193cc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80193d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80193d6:	4413      	add	r3, r2
 80193d8:	b29a      	uxth	r2, r3
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80193e0:	429a      	cmp	r2, r3
 80193e2:	d309      	bcc.n	80193f8 <tcp_receive+0x2a0>
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80193ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80193ec:	4413      	add	r3, r2
 80193ee:	b29a      	uxth	r2, r3
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80193f6:	e060      	b.n	80194ba <tcp_receive+0x362>
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80193fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019402:	e05a      	b.n	80194ba <tcp_receive+0x362>
 8019404:	080236c4 	.word	0x080236c4
 8019408:	080239f4 	.word	0x080239f4
 801940c:	08023710 	.word	0x08023710
 8019410:	08023a10 	.word	0x08023a10
 8019414:	20008fec 	.word	0x20008fec
 8019418:	20008fe0 	.word	0x20008fe0
 801941c:	20008fe4 	.word	0x20008fe4
 8019420:	20008fd0 	.word	0x20008fd0
 8019424:	20008fea 	.word	0x20008fea
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801942e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019430:	4413      	add	r3, r2
 8019432:	b29a      	uxth	r2, r3
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801943a:	429a      	cmp	r2, r3
 801943c:	d309      	bcc.n	8019452 <tcp_receive+0x2fa>
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019444:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019446:	4413      	add	r3, r2
 8019448:	b29a      	uxth	r2, r3
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8019450:	e004      	b.n	801945c <tcp_receive+0x304>
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019458:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019468:	429a      	cmp	r2, r3
 801946a:	d326      	bcc.n	80194ba <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019478:	1ad3      	subs	r3, r2, r3
 801947a:	b29a      	uxth	r2, r3
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801948c:	4413      	add	r3, r2
 801948e:	b29a      	uxth	r2, r3
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019496:	429a      	cmp	r2, r3
 8019498:	d30a      	bcc.n	80194b0 <tcp_receive+0x358>
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80194a4:	4413      	add	r3, r2
 80194a6:	b29a      	uxth	r2, r3
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80194ae:	e004      	b.n	80194ba <tcp_receive+0x362>
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80194b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80194c2:	4a98      	ldr	r2, [pc, #608]	; (8019724 <tcp_receive+0x5cc>)
 80194c4:	6878      	ldr	r0, [r7, #4]
 80194c6:	f7ff fdcb 	bl	8019060 <tcp_free_acked_segments>
 80194ca:	4602      	mov	r2, r0
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80194d8:	4a93      	ldr	r2, [pc, #588]	; (8019728 <tcp_receive+0x5d0>)
 80194da:	6878      	ldr	r0, [r7, #4]
 80194dc:	f7ff fdc0 	bl	8019060 <tcp_free_acked_segments>
 80194e0:	4602      	mov	r2, r0
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d104      	bne.n	80194f8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80194f4:	861a      	strh	r2, [r3, #48]	; 0x30
 80194f6:	e002      	b.n	80194fe <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	2200      	movs	r2, #0
 80194fc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	2200      	movs	r2, #0
 8019502:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019508:	2b00      	cmp	r3, #0
 801950a:	d103      	bne.n	8019514 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	2200      	movs	r2, #0
 8019510:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801951a:	4b84      	ldr	r3, [pc, #528]	; (801972c <tcp_receive+0x5d4>)
 801951c:	881b      	ldrh	r3, [r3, #0]
 801951e:	4413      	add	r3, r2
 8019520:	b29a      	uxth	r2, r3
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	8b5b      	ldrh	r3, [r3, #26]
 801952c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019530:	2b00      	cmp	r3, #0
 8019532:	d035      	beq.n	80195a0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019538:	2b00      	cmp	r3, #0
 801953a:	d118      	bne.n	801956e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019540:	2b00      	cmp	r3, #0
 8019542:	d00c      	beq.n	801955e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801954c:	68db      	ldr	r3, [r3, #12]
 801954e:	685b      	ldr	r3, [r3, #4]
 8019550:	4618      	mov	r0, r3
 8019552:	f7fb f95a 	bl	801480a <lwip_htonl>
 8019556:	4603      	mov	r3, r0
 8019558:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801955a:	2b00      	cmp	r3, #0
 801955c:	dc20      	bgt.n	80195a0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	8b5b      	ldrh	r3, [r3, #26]
 8019562:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019566:	b29a      	uxth	r2, r3
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801956c:	e018      	b.n	80195a0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019576:	68db      	ldr	r3, [r3, #12]
 8019578:	685b      	ldr	r3, [r3, #4]
 801957a:	4618      	mov	r0, r3
 801957c:	f7fb f945 	bl	801480a <lwip_htonl>
 8019580:	4603      	mov	r3, r0
 8019582:	1ae3      	subs	r3, r4, r3
 8019584:	2b00      	cmp	r3, #0
 8019586:	dc0b      	bgt.n	80195a0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	8b5b      	ldrh	r3, [r3, #26]
 801958c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019590:	b29a      	uxth	r2, r3
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019596:	e003      	b.n	80195a0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8019598:	6878      	ldr	r0, [r7, #4]
 801959a:	f001 ff85 	bl	801b4a8 <tcp_send_empty_ack>
 801959e:	e000      	b.n	80195a2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80195a0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d05b      	beq.n	8019662 <tcp_receive+0x50a>
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80195ae:	4b60      	ldr	r3, [pc, #384]	; (8019730 <tcp_receive+0x5d8>)
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	1ad3      	subs	r3, r2, r3
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	da54      	bge.n	8019662 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80195b8:	4b5e      	ldr	r3, [pc, #376]	; (8019734 <tcp_receive+0x5dc>)
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	b29a      	uxth	r2, r3
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80195c2:	b29b      	uxth	r3, r3
 80195c4:	1ad3      	subs	r3, r2, r3
 80195c6:	b29b      	uxth	r3, r3
 80195c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80195cc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80195d6:	10db      	asrs	r3, r3, #3
 80195d8:	b21b      	sxth	r3, r3
 80195da:	b29b      	uxth	r3, r3
 80195dc:	1ad3      	subs	r3, r2, r3
 80195de:	b29b      	uxth	r3, r3
 80195e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80195ea:	b29a      	uxth	r2, r3
 80195ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80195f0:	4413      	add	r3, r2
 80195f2:	b29b      	uxth	r3, r3
 80195f4:	b21a      	sxth	r2, r3
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80195fa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80195fe:	2b00      	cmp	r3, #0
 8019600:	da05      	bge.n	801960e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8019602:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019606:	425b      	negs	r3, r3
 8019608:	b29b      	uxth	r3, r3
 801960a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801960e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019618:	109b      	asrs	r3, r3, #2
 801961a:	b21b      	sxth	r3, r3
 801961c:	b29b      	uxth	r3, r3
 801961e:	1ad3      	subs	r3, r2, r3
 8019620:	b29b      	uxth	r3, r3
 8019622:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801962c:	b29a      	uxth	r2, r3
 801962e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019632:	4413      	add	r3, r2
 8019634:	b29b      	uxth	r3, r3
 8019636:	b21a      	sxth	r2, r3
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019642:	10db      	asrs	r3, r3, #3
 8019644:	b21b      	sxth	r3, r3
 8019646:	b29a      	uxth	r2, r3
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801964e:	b29b      	uxth	r3, r3
 8019650:	4413      	add	r3, r2
 8019652:	b29b      	uxth	r3, r3
 8019654:	b21a      	sxth	r2, r3
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	2200      	movs	r2, #0
 8019660:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019662:	4b35      	ldr	r3, [pc, #212]	; (8019738 <tcp_receive+0x5e0>)
 8019664:	881b      	ldrh	r3, [r3, #0]
 8019666:	2b00      	cmp	r3, #0
 8019668:	f000 84e1 	beq.w	801a02e <tcp_receive+0xed6>
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	7d1b      	ldrb	r3, [r3, #20]
 8019670:	2b06      	cmp	r3, #6
 8019672:	f200 84dc 	bhi.w	801a02e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801967a:	4b30      	ldr	r3, [pc, #192]	; (801973c <tcp_receive+0x5e4>)
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	1ad3      	subs	r3, r2, r3
 8019680:	3b01      	subs	r3, #1
 8019682:	2b00      	cmp	r3, #0
 8019684:	f2c0 808e 	blt.w	80197a4 <tcp_receive+0x64c>
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801968c:	4b2a      	ldr	r3, [pc, #168]	; (8019738 <tcp_receive+0x5e0>)
 801968e:	881b      	ldrh	r3, [r3, #0]
 8019690:	4619      	mov	r1, r3
 8019692:	4b2a      	ldr	r3, [pc, #168]	; (801973c <tcp_receive+0x5e4>)
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	440b      	add	r3, r1
 8019698:	1ad3      	subs	r3, r2, r3
 801969a:	3301      	adds	r3, #1
 801969c:	2b00      	cmp	r3, #0
 801969e:	f300 8081 	bgt.w	80197a4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80196a2:	4b27      	ldr	r3, [pc, #156]	; (8019740 <tcp_receive+0x5e8>)
 80196a4:	685b      	ldr	r3, [r3, #4]
 80196a6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80196ac:	4b23      	ldr	r3, [pc, #140]	; (801973c <tcp_receive+0x5e4>)
 80196ae:	681b      	ldr	r3, [r3, #0]
 80196b0:	1ad3      	subs	r3, r2, r3
 80196b2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80196b4:	4b22      	ldr	r3, [pc, #136]	; (8019740 <tcp_receive+0x5e8>)
 80196b6:	685b      	ldr	r3, [r3, #4]
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d106      	bne.n	80196ca <tcp_receive+0x572>
 80196bc:	4b21      	ldr	r3, [pc, #132]	; (8019744 <tcp_receive+0x5ec>)
 80196be:	f240 5294 	movw	r2, #1428	; 0x594
 80196c2:	4921      	ldr	r1, [pc, #132]	; (8019748 <tcp_receive+0x5f0>)
 80196c4:	4821      	ldr	r0, [pc, #132]	; (801974c <tcp_receive+0x5f4>)
 80196c6:	f007 ff2b 	bl	8021520 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80196ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80196d0:	4293      	cmp	r3, r2
 80196d2:	d906      	bls.n	80196e2 <tcp_receive+0x58a>
 80196d4:	4b1b      	ldr	r3, [pc, #108]	; (8019744 <tcp_receive+0x5ec>)
 80196d6:	f240 5295 	movw	r2, #1429	; 0x595
 80196da:	491d      	ldr	r1, [pc, #116]	; (8019750 <tcp_receive+0x5f8>)
 80196dc:	481b      	ldr	r0, [pc, #108]	; (801974c <tcp_receive+0x5f4>)
 80196de:	f007 ff1f 	bl	8021520 <iprintf>
      off = (u16_t)off32;
 80196e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80196e8:	4b15      	ldr	r3, [pc, #84]	; (8019740 <tcp_receive+0x5e8>)
 80196ea:	685b      	ldr	r3, [r3, #4]
 80196ec:	891b      	ldrh	r3, [r3, #8]
 80196ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80196f2:	429a      	cmp	r2, r3
 80196f4:	d906      	bls.n	8019704 <tcp_receive+0x5ac>
 80196f6:	4b13      	ldr	r3, [pc, #76]	; (8019744 <tcp_receive+0x5ec>)
 80196f8:	f240 5297 	movw	r2, #1431	; 0x597
 80196fc:	4915      	ldr	r1, [pc, #84]	; (8019754 <tcp_receive+0x5fc>)
 80196fe:	4813      	ldr	r0, [pc, #76]	; (801974c <tcp_receive+0x5f4>)
 8019700:	f007 ff0e 	bl	8021520 <iprintf>
      inseg.len -= off;
 8019704:	4b0e      	ldr	r3, [pc, #56]	; (8019740 <tcp_receive+0x5e8>)
 8019706:	891a      	ldrh	r2, [r3, #8]
 8019708:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801970c:	1ad3      	subs	r3, r2, r3
 801970e:	b29a      	uxth	r2, r3
 8019710:	4b0b      	ldr	r3, [pc, #44]	; (8019740 <tcp_receive+0x5e8>)
 8019712:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019714:	4b0a      	ldr	r3, [pc, #40]	; (8019740 <tcp_receive+0x5e8>)
 8019716:	685b      	ldr	r3, [r3, #4]
 8019718:	891a      	ldrh	r2, [r3, #8]
 801971a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801971e:	1ad3      	subs	r3, r2, r3
 8019720:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8019722:	e029      	b.n	8019778 <tcp_receive+0x620>
 8019724:	08023a2c 	.word	0x08023a2c
 8019728:	08023a34 	.word	0x08023a34
 801972c:	20008fe8 	.word	0x20008fe8
 8019730:	20008fe4 	.word	0x20008fe4
 8019734:	20010338 	.word	0x20010338
 8019738:	20008fea 	.word	0x20008fea
 801973c:	20008fe0 	.word	0x20008fe0
 8019740:	20008fc0 	.word	0x20008fc0
 8019744:	080236c4 	.word	0x080236c4
 8019748:	08023a3c 	.word	0x08023a3c
 801974c:	08023710 	.word	0x08023710
 8019750:	08023a4c 	.word	0x08023a4c
 8019754:	08023a5c 	.word	0x08023a5c
        off -= p->len;
 8019758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801975a:	895b      	ldrh	r3, [r3, #10]
 801975c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019760:	1ad3      	subs	r3, r2, r3
 8019762:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8019766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019768:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801976a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801976c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801976e:	2200      	movs	r2, #0
 8019770:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8019772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8019778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801977a:	895b      	ldrh	r3, [r3, #10]
 801977c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019780:	429a      	cmp	r2, r3
 8019782:	d8e9      	bhi.n	8019758 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8019784:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019788:	4619      	mov	r1, r3
 801978a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801978c:	f7fc fb70 	bl	8015e70 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019794:	4a91      	ldr	r2, [pc, #580]	; (80199dc <tcp_receive+0x884>)
 8019796:	6013      	str	r3, [r2, #0]
 8019798:	4b91      	ldr	r3, [pc, #580]	; (80199e0 <tcp_receive+0x888>)
 801979a:	68db      	ldr	r3, [r3, #12]
 801979c:	4a8f      	ldr	r2, [pc, #572]	; (80199dc <tcp_receive+0x884>)
 801979e:	6812      	ldr	r2, [r2, #0]
 80197a0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80197a2:	e00d      	b.n	80197c0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80197a4:	4b8d      	ldr	r3, [pc, #564]	; (80199dc <tcp_receive+0x884>)
 80197a6:	681a      	ldr	r2, [r3, #0]
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197ac:	1ad3      	subs	r3, r2, r3
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	da06      	bge.n	80197c0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	8b5b      	ldrh	r3, [r3, #26]
 80197b6:	f043 0302 	orr.w	r3, r3, #2
 80197ba:	b29a      	uxth	r2, r3
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80197c0:	4b86      	ldr	r3, [pc, #536]	; (80199dc <tcp_receive+0x884>)
 80197c2:	681a      	ldr	r2, [r3, #0]
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197c8:	1ad3      	subs	r3, r2, r3
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	f2c0 842a 	blt.w	801a024 <tcp_receive+0xecc>
 80197d0:	4b82      	ldr	r3, [pc, #520]	; (80199dc <tcp_receive+0x884>)
 80197d2:	681a      	ldr	r2, [r3, #0]
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197d8:	6879      	ldr	r1, [r7, #4]
 80197da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80197dc:	440b      	add	r3, r1
 80197de:	1ad3      	subs	r3, r2, r3
 80197e0:	3301      	adds	r3, #1
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	f300 841e 	bgt.w	801a024 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80197ec:	4b7b      	ldr	r3, [pc, #492]	; (80199dc <tcp_receive+0x884>)
 80197ee:	681b      	ldr	r3, [r3, #0]
 80197f0:	429a      	cmp	r2, r3
 80197f2:	f040 829a 	bne.w	8019d2a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80197f6:	4b7a      	ldr	r3, [pc, #488]	; (80199e0 <tcp_receive+0x888>)
 80197f8:	891c      	ldrh	r4, [r3, #8]
 80197fa:	4b79      	ldr	r3, [pc, #484]	; (80199e0 <tcp_receive+0x888>)
 80197fc:	68db      	ldr	r3, [r3, #12]
 80197fe:	899b      	ldrh	r3, [r3, #12]
 8019800:	b29b      	uxth	r3, r3
 8019802:	4618      	mov	r0, r3
 8019804:	f7fa ffec 	bl	80147e0 <lwip_htons>
 8019808:	4603      	mov	r3, r0
 801980a:	b2db      	uxtb	r3, r3
 801980c:	f003 0303 	and.w	r3, r3, #3
 8019810:	2b00      	cmp	r3, #0
 8019812:	d001      	beq.n	8019818 <tcp_receive+0x6c0>
 8019814:	2301      	movs	r3, #1
 8019816:	e000      	b.n	801981a <tcp_receive+0x6c2>
 8019818:	2300      	movs	r3, #0
 801981a:	4423      	add	r3, r4
 801981c:	b29a      	uxth	r2, r3
 801981e:	4b71      	ldr	r3, [pc, #452]	; (80199e4 <tcp_receive+0x88c>)
 8019820:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019826:	4b6f      	ldr	r3, [pc, #444]	; (80199e4 <tcp_receive+0x88c>)
 8019828:	881b      	ldrh	r3, [r3, #0]
 801982a:	429a      	cmp	r2, r3
 801982c:	d275      	bcs.n	801991a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801982e:	4b6c      	ldr	r3, [pc, #432]	; (80199e0 <tcp_receive+0x888>)
 8019830:	68db      	ldr	r3, [r3, #12]
 8019832:	899b      	ldrh	r3, [r3, #12]
 8019834:	b29b      	uxth	r3, r3
 8019836:	4618      	mov	r0, r3
 8019838:	f7fa ffd2 	bl	80147e0 <lwip_htons>
 801983c:	4603      	mov	r3, r0
 801983e:	b2db      	uxtb	r3, r3
 8019840:	f003 0301 	and.w	r3, r3, #1
 8019844:	2b00      	cmp	r3, #0
 8019846:	d01f      	beq.n	8019888 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019848:	4b65      	ldr	r3, [pc, #404]	; (80199e0 <tcp_receive+0x888>)
 801984a:	68db      	ldr	r3, [r3, #12]
 801984c:	899b      	ldrh	r3, [r3, #12]
 801984e:	b29b      	uxth	r3, r3
 8019850:	b21b      	sxth	r3, r3
 8019852:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019856:	b21c      	sxth	r4, r3
 8019858:	4b61      	ldr	r3, [pc, #388]	; (80199e0 <tcp_receive+0x888>)
 801985a:	68db      	ldr	r3, [r3, #12]
 801985c:	899b      	ldrh	r3, [r3, #12]
 801985e:	b29b      	uxth	r3, r3
 8019860:	4618      	mov	r0, r3
 8019862:	f7fa ffbd 	bl	80147e0 <lwip_htons>
 8019866:	4603      	mov	r3, r0
 8019868:	b2db      	uxtb	r3, r3
 801986a:	b29b      	uxth	r3, r3
 801986c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019870:	b29b      	uxth	r3, r3
 8019872:	4618      	mov	r0, r3
 8019874:	f7fa ffb4 	bl	80147e0 <lwip_htons>
 8019878:	4603      	mov	r3, r0
 801987a:	b21b      	sxth	r3, r3
 801987c:	4323      	orrs	r3, r4
 801987e:	b21a      	sxth	r2, r3
 8019880:	4b57      	ldr	r3, [pc, #348]	; (80199e0 <tcp_receive+0x888>)
 8019882:	68db      	ldr	r3, [r3, #12]
 8019884:	b292      	uxth	r2, r2
 8019886:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801988c:	4b54      	ldr	r3, [pc, #336]	; (80199e0 <tcp_receive+0x888>)
 801988e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019890:	4b53      	ldr	r3, [pc, #332]	; (80199e0 <tcp_receive+0x888>)
 8019892:	68db      	ldr	r3, [r3, #12]
 8019894:	899b      	ldrh	r3, [r3, #12]
 8019896:	b29b      	uxth	r3, r3
 8019898:	4618      	mov	r0, r3
 801989a:	f7fa ffa1 	bl	80147e0 <lwip_htons>
 801989e:	4603      	mov	r3, r0
 80198a0:	b2db      	uxtb	r3, r3
 80198a2:	f003 0302 	and.w	r3, r3, #2
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d005      	beq.n	80198b6 <tcp_receive+0x75e>
            inseg.len -= 1;
 80198aa:	4b4d      	ldr	r3, [pc, #308]	; (80199e0 <tcp_receive+0x888>)
 80198ac:	891b      	ldrh	r3, [r3, #8]
 80198ae:	3b01      	subs	r3, #1
 80198b0:	b29a      	uxth	r2, r3
 80198b2:	4b4b      	ldr	r3, [pc, #300]	; (80199e0 <tcp_receive+0x888>)
 80198b4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80198b6:	4b4a      	ldr	r3, [pc, #296]	; (80199e0 <tcp_receive+0x888>)
 80198b8:	685a      	ldr	r2, [r3, #4]
 80198ba:	4b49      	ldr	r3, [pc, #292]	; (80199e0 <tcp_receive+0x888>)
 80198bc:	891b      	ldrh	r3, [r3, #8]
 80198be:	4619      	mov	r1, r3
 80198c0:	4610      	mov	r0, r2
 80198c2:	f7fc f9d5 	bl	8015c70 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80198c6:	4b46      	ldr	r3, [pc, #280]	; (80199e0 <tcp_receive+0x888>)
 80198c8:	891c      	ldrh	r4, [r3, #8]
 80198ca:	4b45      	ldr	r3, [pc, #276]	; (80199e0 <tcp_receive+0x888>)
 80198cc:	68db      	ldr	r3, [r3, #12]
 80198ce:	899b      	ldrh	r3, [r3, #12]
 80198d0:	b29b      	uxth	r3, r3
 80198d2:	4618      	mov	r0, r3
 80198d4:	f7fa ff84 	bl	80147e0 <lwip_htons>
 80198d8:	4603      	mov	r3, r0
 80198da:	b2db      	uxtb	r3, r3
 80198dc:	f003 0303 	and.w	r3, r3, #3
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d001      	beq.n	80198e8 <tcp_receive+0x790>
 80198e4:	2301      	movs	r3, #1
 80198e6:	e000      	b.n	80198ea <tcp_receive+0x792>
 80198e8:	2300      	movs	r3, #0
 80198ea:	4423      	add	r3, r4
 80198ec:	b29a      	uxth	r2, r3
 80198ee:	4b3d      	ldr	r3, [pc, #244]	; (80199e4 <tcp_receive+0x88c>)
 80198f0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80198f2:	4b3c      	ldr	r3, [pc, #240]	; (80199e4 <tcp_receive+0x88c>)
 80198f4:	881b      	ldrh	r3, [r3, #0]
 80198f6:	461a      	mov	r2, r3
 80198f8:	4b38      	ldr	r3, [pc, #224]	; (80199dc <tcp_receive+0x884>)
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	441a      	add	r2, r3
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019902:	6879      	ldr	r1, [r7, #4]
 8019904:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019906:	440b      	add	r3, r1
 8019908:	429a      	cmp	r2, r3
 801990a:	d006      	beq.n	801991a <tcp_receive+0x7c2>
 801990c:	4b36      	ldr	r3, [pc, #216]	; (80199e8 <tcp_receive+0x890>)
 801990e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8019912:	4936      	ldr	r1, [pc, #216]	; (80199ec <tcp_receive+0x894>)
 8019914:	4836      	ldr	r0, [pc, #216]	; (80199f0 <tcp_receive+0x898>)
 8019916:	f007 fe03 	bl	8021520 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801991e:	2b00      	cmp	r3, #0
 8019920:	f000 80e7 	beq.w	8019af2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019924:	4b2e      	ldr	r3, [pc, #184]	; (80199e0 <tcp_receive+0x888>)
 8019926:	68db      	ldr	r3, [r3, #12]
 8019928:	899b      	ldrh	r3, [r3, #12]
 801992a:	b29b      	uxth	r3, r3
 801992c:	4618      	mov	r0, r3
 801992e:	f7fa ff57 	bl	80147e0 <lwip_htons>
 8019932:	4603      	mov	r3, r0
 8019934:	b2db      	uxtb	r3, r3
 8019936:	f003 0301 	and.w	r3, r3, #1
 801993a:	2b00      	cmp	r3, #0
 801993c:	d010      	beq.n	8019960 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801993e:	e00a      	b.n	8019956 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019944:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801994a:	681a      	ldr	r2, [r3, #0]
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8019950:	68f8      	ldr	r0, [r7, #12]
 8019952:	f7fd fd97 	bl	8017484 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801995a:	2b00      	cmp	r3, #0
 801995c:	d1f0      	bne.n	8019940 <tcp_receive+0x7e8>
 801995e:	e0c8      	b.n	8019af2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019964:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019966:	e052      	b.n	8019a0e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801996a:	68db      	ldr	r3, [r3, #12]
 801996c:	899b      	ldrh	r3, [r3, #12]
 801996e:	b29b      	uxth	r3, r3
 8019970:	4618      	mov	r0, r3
 8019972:	f7fa ff35 	bl	80147e0 <lwip_htons>
 8019976:	4603      	mov	r3, r0
 8019978:	b2db      	uxtb	r3, r3
 801997a:	f003 0301 	and.w	r3, r3, #1
 801997e:	2b00      	cmp	r3, #0
 8019980:	d03d      	beq.n	80199fe <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019982:	4b17      	ldr	r3, [pc, #92]	; (80199e0 <tcp_receive+0x888>)
 8019984:	68db      	ldr	r3, [r3, #12]
 8019986:	899b      	ldrh	r3, [r3, #12]
 8019988:	b29b      	uxth	r3, r3
 801998a:	4618      	mov	r0, r3
 801998c:	f7fa ff28 	bl	80147e0 <lwip_htons>
 8019990:	4603      	mov	r3, r0
 8019992:	b2db      	uxtb	r3, r3
 8019994:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019998:	2b00      	cmp	r3, #0
 801999a:	d130      	bne.n	80199fe <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801999c:	4b10      	ldr	r3, [pc, #64]	; (80199e0 <tcp_receive+0x888>)
 801999e:	68db      	ldr	r3, [r3, #12]
 80199a0:	899b      	ldrh	r3, [r3, #12]
 80199a2:	b29c      	uxth	r4, r3
 80199a4:	2001      	movs	r0, #1
 80199a6:	f7fa ff1b 	bl	80147e0 <lwip_htons>
 80199aa:	4603      	mov	r3, r0
 80199ac:	461a      	mov	r2, r3
 80199ae:	4b0c      	ldr	r3, [pc, #48]	; (80199e0 <tcp_receive+0x888>)
 80199b0:	68db      	ldr	r3, [r3, #12]
 80199b2:	4322      	orrs	r2, r4
 80199b4:	b292      	uxth	r2, r2
 80199b6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80199b8:	4b09      	ldr	r3, [pc, #36]	; (80199e0 <tcp_receive+0x888>)
 80199ba:	891c      	ldrh	r4, [r3, #8]
 80199bc:	4b08      	ldr	r3, [pc, #32]	; (80199e0 <tcp_receive+0x888>)
 80199be:	68db      	ldr	r3, [r3, #12]
 80199c0:	899b      	ldrh	r3, [r3, #12]
 80199c2:	b29b      	uxth	r3, r3
 80199c4:	4618      	mov	r0, r3
 80199c6:	f7fa ff0b 	bl	80147e0 <lwip_htons>
 80199ca:	4603      	mov	r3, r0
 80199cc:	b2db      	uxtb	r3, r3
 80199ce:	f003 0303 	and.w	r3, r3, #3
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d00e      	beq.n	80199f4 <tcp_receive+0x89c>
 80199d6:	2301      	movs	r3, #1
 80199d8:	e00d      	b.n	80199f6 <tcp_receive+0x89e>
 80199da:	bf00      	nop
 80199dc:	20008fe0 	.word	0x20008fe0
 80199e0:	20008fc0 	.word	0x20008fc0
 80199e4:	20008fea 	.word	0x20008fea
 80199e8:	080236c4 	.word	0x080236c4
 80199ec:	08023a6c 	.word	0x08023a6c
 80199f0:	08023710 	.word	0x08023710
 80199f4:	2300      	movs	r3, #0
 80199f6:	4423      	add	r3, r4
 80199f8:	b29a      	uxth	r2, r3
 80199fa:	4b98      	ldr	r3, [pc, #608]	; (8019c5c <tcp_receive+0xb04>)
 80199fc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80199fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a00:	613b      	str	r3, [r7, #16]
              next = next->next;
 8019a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a04:	681b      	ldr	r3, [r3, #0]
 8019a06:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8019a08:	6938      	ldr	r0, [r7, #16]
 8019a0a:	f7fd fd3b 	bl	8017484 <tcp_seg_free>
            while (next &&
 8019a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d00e      	beq.n	8019a32 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019a14:	4b91      	ldr	r3, [pc, #580]	; (8019c5c <tcp_receive+0xb04>)
 8019a16:	881b      	ldrh	r3, [r3, #0]
 8019a18:	461a      	mov	r2, r3
 8019a1a:	4b91      	ldr	r3, [pc, #580]	; (8019c60 <tcp_receive+0xb08>)
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	441a      	add	r2, r3
 8019a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a22:	68db      	ldr	r3, [r3, #12]
 8019a24:	685b      	ldr	r3, [r3, #4]
 8019a26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019a28:	8909      	ldrh	r1, [r1, #8]
 8019a2a:	440b      	add	r3, r1
 8019a2c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	da9a      	bge.n	8019968 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d059      	beq.n	8019aec <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8019a38:	4b88      	ldr	r3, [pc, #544]	; (8019c5c <tcp_receive+0xb04>)
 8019a3a:	881b      	ldrh	r3, [r3, #0]
 8019a3c:	461a      	mov	r2, r3
 8019a3e:	4b88      	ldr	r3, [pc, #544]	; (8019c60 <tcp_receive+0xb08>)
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	441a      	add	r2, r3
 8019a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a46:	68db      	ldr	r3, [r3, #12]
 8019a48:	685b      	ldr	r3, [r3, #4]
 8019a4a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	dd4d      	ble.n	8019aec <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a52:	68db      	ldr	r3, [r3, #12]
 8019a54:	685b      	ldr	r3, [r3, #4]
 8019a56:	b29a      	uxth	r2, r3
 8019a58:	4b81      	ldr	r3, [pc, #516]	; (8019c60 <tcp_receive+0xb08>)
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	b29b      	uxth	r3, r3
 8019a5e:	1ad3      	subs	r3, r2, r3
 8019a60:	b29a      	uxth	r2, r3
 8019a62:	4b80      	ldr	r3, [pc, #512]	; (8019c64 <tcp_receive+0xb0c>)
 8019a64:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019a66:	4b7f      	ldr	r3, [pc, #508]	; (8019c64 <tcp_receive+0xb0c>)
 8019a68:	68db      	ldr	r3, [r3, #12]
 8019a6a:	899b      	ldrh	r3, [r3, #12]
 8019a6c:	b29b      	uxth	r3, r3
 8019a6e:	4618      	mov	r0, r3
 8019a70:	f7fa feb6 	bl	80147e0 <lwip_htons>
 8019a74:	4603      	mov	r3, r0
 8019a76:	b2db      	uxtb	r3, r3
 8019a78:	f003 0302 	and.w	r3, r3, #2
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	d005      	beq.n	8019a8c <tcp_receive+0x934>
                inseg.len -= 1;
 8019a80:	4b78      	ldr	r3, [pc, #480]	; (8019c64 <tcp_receive+0xb0c>)
 8019a82:	891b      	ldrh	r3, [r3, #8]
 8019a84:	3b01      	subs	r3, #1
 8019a86:	b29a      	uxth	r2, r3
 8019a88:	4b76      	ldr	r3, [pc, #472]	; (8019c64 <tcp_receive+0xb0c>)
 8019a8a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019a8c:	4b75      	ldr	r3, [pc, #468]	; (8019c64 <tcp_receive+0xb0c>)
 8019a8e:	685a      	ldr	r2, [r3, #4]
 8019a90:	4b74      	ldr	r3, [pc, #464]	; (8019c64 <tcp_receive+0xb0c>)
 8019a92:	891b      	ldrh	r3, [r3, #8]
 8019a94:	4619      	mov	r1, r3
 8019a96:	4610      	mov	r0, r2
 8019a98:	f7fc f8ea 	bl	8015c70 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019a9c:	4b71      	ldr	r3, [pc, #452]	; (8019c64 <tcp_receive+0xb0c>)
 8019a9e:	891c      	ldrh	r4, [r3, #8]
 8019aa0:	4b70      	ldr	r3, [pc, #448]	; (8019c64 <tcp_receive+0xb0c>)
 8019aa2:	68db      	ldr	r3, [r3, #12]
 8019aa4:	899b      	ldrh	r3, [r3, #12]
 8019aa6:	b29b      	uxth	r3, r3
 8019aa8:	4618      	mov	r0, r3
 8019aaa:	f7fa fe99 	bl	80147e0 <lwip_htons>
 8019aae:	4603      	mov	r3, r0
 8019ab0:	b2db      	uxtb	r3, r3
 8019ab2:	f003 0303 	and.w	r3, r3, #3
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d001      	beq.n	8019abe <tcp_receive+0x966>
 8019aba:	2301      	movs	r3, #1
 8019abc:	e000      	b.n	8019ac0 <tcp_receive+0x968>
 8019abe:	2300      	movs	r3, #0
 8019ac0:	4423      	add	r3, r4
 8019ac2:	b29a      	uxth	r2, r3
 8019ac4:	4b65      	ldr	r3, [pc, #404]	; (8019c5c <tcp_receive+0xb04>)
 8019ac6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019ac8:	4b64      	ldr	r3, [pc, #400]	; (8019c5c <tcp_receive+0xb04>)
 8019aca:	881b      	ldrh	r3, [r3, #0]
 8019acc:	461a      	mov	r2, r3
 8019ace:	4b64      	ldr	r3, [pc, #400]	; (8019c60 <tcp_receive+0xb08>)
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	441a      	add	r2, r3
 8019ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ad6:	68db      	ldr	r3, [r3, #12]
 8019ad8:	685b      	ldr	r3, [r3, #4]
 8019ada:	429a      	cmp	r2, r3
 8019adc:	d006      	beq.n	8019aec <tcp_receive+0x994>
 8019ade:	4b62      	ldr	r3, [pc, #392]	; (8019c68 <tcp_receive+0xb10>)
 8019ae0:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8019ae4:	4961      	ldr	r1, [pc, #388]	; (8019c6c <tcp_receive+0xb14>)
 8019ae6:	4862      	ldr	r0, [pc, #392]	; (8019c70 <tcp_receive+0xb18>)
 8019ae8:	f007 fd1a 	bl	8021520 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019af0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8019af2:	4b5a      	ldr	r3, [pc, #360]	; (8019c5c <tcp_receive+0xb04>)
 8019af4:	881b      	ldrh	r3, [r3, #0]
 8019af6:	461a      	mov	r2, r3
 8019af8:	4b59      	ldr	r3, [pc, #356]	; (8019c60 <tcp_receive+0xb08>)
 8019afa:	681b      	ldr	r3, [r3, #0]
 8019afc:	441a      	add	r2, r3
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019b06:	4b55      	ldr	r3, [pc, #340]	; (8019c5c <tcp_receive+0xb04>)
 8019b08:	881b      	ldrh	r3, [r3, #0]
 8019b0a:	429a      	cmp	r2, r3
 8019b0c:	d206      	bcs.n	8019b1c <tcp_receive+0x9c4>
 8019b0e:	4b56      	ldr	r3, [pc, #344]	; (8019c68 <tcp_receive+0xb10>)
 8019b10:	f240 6207 	movw	r2, #1543	; 0x607
 8019b14:	4957      	ldr	r1, [pc, #348]	; (8019c74 <tcp_receive+0xb1c>)
 8019b16:	4856      	ldr	r0, [pc, #344]	; (8019c70 <tcp_receive+0xb18>)
 8019b18:	f007 fd02 	bl	8021520 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019b20:	4b4e      	ldr	r3, [pc, #312]	; (8019c5c <tcp_receive+0xb04>)
 8019b22:	881b      	ldrh	r3, [r3, #0]
 8019b24:	1ad3      	subs	r3, r2, r3
 8019b26:	b29a      	uxth	r2, r3
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8019b2c:	6878      	ldr	r0, [r7, #4]
 8019b2e:	f7fc ffcd 	bl	8016acc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8019b32:	4b4c      	ldr	r3, [pc, #304]	; (8019c64 <tcp_receive+0xb0c>)
 8019b34:	685b      	ldr	r3, [r3, #4]
 8019b36:	891b      	ldrh	r3, [r3, #8]
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d006      	beq.n	8019b4a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8019b3c:	4b49      	ldr	r3, [pc, #292]	; (8019c64 <tcp_receive+0xb0c>)
 8019b3e:	685b      	ldr	r3, [r3, #4]
 8019b40:	4a4d      	ldr	r2, [pc, #308]	; (8019c78 <tcp_receive+0xb20>)
 8019b42:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8019b44:	4b47      	ldr	r3, [pc, #284]	; (8019c64 <tcp_receive+0xb0c>)
 8019b46:	2200      	movs	r2, #0
 8019b48:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019b4a:	4b46      	ldr	r3, [pc, #280]	; (8019c64 <tcp_receive+0xb0c>)
 8019b4c:	68db      	ldr	r3, [r3, #12]
 8019b4e:	899b      	ldrh	r3, [r3, #12]
 8019b50:	b29b      	uxth	r3, r3
 8019b52:	4618      	mov	r0, r3
 8019b54:	f7fa fe44 	bl	80147e0 <lwip_htons>
 8019b58:	4603      	mov	r3, r0
 8019b5a:	b2db      	uxtb	r3, r3
 8019b5c:	f003 0301 	and.w	r3, r3, #1
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	f000 80b8 	beq.w	8019cd6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8019b66:	4b45      	ldr	r3, [pc, #276]	; (8019c7c <tcp_receive+0xb24>)
 8019b68:	781b      	ldrb	r3, [r3, #0]
 8019b6a:	f043 0320 	orr.w	r3, r3, #32
 8019b6e:	b2da      	uxtb	r2, r3
 8019b70:	4b42      	ldr	r3, [pc, #264]	; (8019c7c <tcp_receive+0xb24>)
 8019b72:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8019b74:	e0af      	b.n	8019cd6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019b7a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019b80:	68db      	ldr	r3, [r3, #12]
 8019b82:	685b      	ldr	r3, [r3, #4]
 8019b84:	4a36      	ldr	r2, [pc, #216]	; (8019c60 <tcp_receive+0xb08>)
 8019b86:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019b88:	68bb      	ldr	r3, [r7, #8]
 8019b8a:	891b      	ldrh	r3, [r3, #8]
 8019b8c:	461c      	mov	r4, r3
 8019b8e:	68bb      	ldr	r3, [r7, #8]
 8019b90:	68db      	ldr	r3, [r3, #12]
 8019b92:	899b      	ldrh	r3, [r3, #12]
 8019b94:	b29b      	uxth	r3, r3
 8019b96:	4618      	mov	r0, r3
 8019b98:	f7fa fe22 	bl	80147e0 <lwip_htons>
 8019b9c:	4603      	mov	r3, r0
 8019b9e:	b2db      	uxtb	r3, r3
 8019ba0:	f003 0303 	and.w	r3, r3, #3
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d001      	beq.n	8019bac <tcp_receive+0xa54>
 8019ba8:	2301      	movs	r3, #1
 8019baa:	e000      	b.n	8019bae <tcp_receive+0xa56>
 8019bac:	2300      	movs	r3, #0
 8019bae:	191a      	adds	r2, r3, r4
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bb4:	441a      	add	r2, r3
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019bbe:	461c      	mov	r4, r3
 8019bc0:	68bb      	ldr	r3, [r7, #8]
 8019bc2:	891b      	ldrh	r3, [r3, #8]
 8019bc4:	461d      	mov	r5, r3
 8019bc6:	68bb      	ldr	r3, [r7, #8]
 8019bc8:	68db      	ldr	r3, [r3, #12]
 8019bca:	899b      	ldrh	r3, [r3, #12]
 8019bcc:	b29b      	uxth	r3, r3
 8019bce:	4618      	mov	r0, r3
 8019bd0:	f7fa fe06 	bl	80147e0 <lwip_htons>
 8019bd4:	4603      	mov	r3, r0
 8019bd6:	b2db      	uxtb	r3, r3
 8019bd8:	f003 0303 	and.w	r3, r3, #3
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d001      	beq.n	8019be4 <tcp_receive+0xa8c>
 8019be0:	2301      	movs	r3, #1
 8019be2:	e000      	b.n	8019be6 <tcp_receive+0xa8e>
 8019be4:	2300      	movs	r3, #0
 8019be6:	442b      	add	r3, r5
 8019be8:	429c      	cmp	r4, r3
 8019bea:	d206      	bcs.n	8019bfa <tcp_receive+0xaa2>
 8019bec:	4b1e      	ldr	r3, [pc, #120]	; (8019c68 <tcp_receive+0xb10>)
 8019bee:	f240 622c 	movw	r2, #1580	; 0x62c
 8019bf2:	4923      	ldr	r1, [pc, #140]	; (8019c80 <tcp_receive+0xb28>)
 8019bf4:	481e      	ldr	r0, [pc, #120]	; (8019c70 <tcp_receive+0xb18>)
 8019bf6:	f007 fc93 	bl	8021520 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8019bfa:	68bb      	ldr	r3, [r7, #8]
 8019bfc:	891b      	ldrh	r3, [r3, #8]
 8019bfe:	461c      	mov	r4, r3
 8019c00:	68bb      	ldr	r3, [r7, #8]
 8019c02:	68db      	ldr	r3, [r3, #12]
 8019c04:	899b      	ldrh	r3, [r3, #12]
 8019c06:	b29b      	uxth	r3, r3
 8019c08:	4618      	mov	r0, r3
 8019c0a:	f7fa fde9 	bl	80147e0 <lwip_htons>
 8019c0e:	4603      	mov	r3, r0
 8019c10:	b2db      	uxtb	r3, r3
 8019c12:	f003 0303 	and.w	r3, r3, #3
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d001      	beq.n	8019c1e <tcp_receive+0xac6>
 8019c1a:	2301      	movs	r3, #1
 8019c1c:	e000      	b.n	8019c20 <tcp_receive+0xac8>
 8019c1e:	2300      	movs	r3, #0
 8019c20:	1919      	adds	r1, r3, r4
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019c26:	b28b      	uxth	r3, r1
 8019c28:	1ad3      	subs	r3, r2, r3
 8019c2a:	b29a      	uxth	r2, r3
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8019c30:	6878      	ldr	r0, [r7, #4]
 8019c32:	f7fc ff4b 	bl	8016acc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8019c36:	68bb      	ldr	r3, [r7, #8]
 8019c38:	685b      	ldr	r3, [r3, #4]
 8019c3a:	891b      	ldrh	r3, [r3, #8]
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d028      	beq.n	8019c92 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8019c40:	4b0d      	ldr	r3, [pc, #52]	; (8019c78 <tcp_receive+0xb20>)
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d01d      	beq.n	8019c84 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8019c48:	4b0b      	ldr	r3, [pc, #44]	; (8019c78 <tcp_receive+0xb20>)
 8019c4a:	681a      	ldr	r2, [r3, #0]
 8019c4c:	68bb      	ldr	r3, [r7, #8]
 8019c4e:	685b      	ldr	r3, [r3, #4]
 8019c50:	4619      	mov	r1, r3
 8019c52:	4610      	mov	r0, r2
 8019c54:	f7fc fa60 	bl	8016118 <pbuf_cat>
 8019c58:	e018      	b.n	8019c8c <tcp_receive+0xb34>
 8019c5a:	bf00      	nop
 8019c5c:	20008fea 	.word	0x20008fea
 8019c60:	20008fe0 	.word	0x20008fe0
 8019c64:	20008fc0 	.word	0x20008fc0
 8019c68:	080236c4 	.word	0x080236c4
 8019c6c:	08023aa4 	.word	0x08023aa4
 8019c70:	08023710 	.word	0x08023710
 8019c74:	08023ae0 	.word	0x08023ae0
 8019c78:	20008ff0 	.word	0x20008ff0
 8019c7c:	20008fed 	.word	0x20008fed
 8019c80:	08023b00 	.word	0x08023b00
            } else {
              recv_data = cseg->p;
 8019c84:	68bb      	ldr	r3, [r7, #8]
 8019c86:	685b      	ldr	r3, [r3, #4]
 8019c88:	4a70      	ldr	r2, [pc, #448]	; (8019e4c <tcp_receive+0xcf4>)
 8019c8a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8019c8c:	68bb      	ldr	r3, [r7, #8]
 8019c8e:	2200      	movs	r2, #0
 8019c90:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019c92:	68bb      	ldr	r3, [r7, #8]
 8019c94:	68db      	ldr	r3, [r3, #12]
 8019c96:	899b      	ldrh	r3, [r3, #12]
 8019c98:	b29b      	uxth	r3, r3
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	f7fa fda0 	bl	80147e0 <lwip_htons>
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	b2db      	uxtb	r3, r3
 8019ca4:	f003 0301 	and.w	r3, r3, #1
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d00d      	beq.n	8019cc8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8019cac:	4b68      	ldr	r3, [pc, #416]	; (8019e50 <tcp_receive+0xcf8>)
 8019cae:	781b      	ldrb	r3, [r3, #0]
 8019cb0:	f043 0320 	orr.w	r3, r3, #32
 8019cb4:	b2da      	uxtb	r2, r3
 8019cb6:	4b66      	ldr	r3, [pc, #408]	; (8019e50 <tcp_receive+0xcf8>)
 8019cb8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	7d1b      	ldrb	r3, [r3, #20]
 8019cbe:	2b04      	cmp	r3, #4
 8019cc0:	d102      	bne.n	8019cc8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	2207      	movs	r2, #7
 8019cc6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8019cc8:	68bb      	ldr	r3, [r7, #8]
 8019cca:	681a      	ldr	r2, [r3, #0]
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8019cd0:	68b8      	ldr	r0, [r7, #8]
 8019cd2:	f7fd fbd7 	bl	8017484 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	d008      	beq.n	8019cf0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019ce2:	68db      	ldr	r3, [r3, #12]
 8019ce4:	685a      	ldr	r2, [r3, #4]
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8019cea:	429a      	cmp	r2, r3
 8019cec:	f43f af43 	beq.w	8019b76 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	8b5b      	ldrh	r3, [r3, #26]
 8019cf4:	f003 0301 	and.w	r3, r3, #1
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d00e      	beq.n	8019d1a <tcp_receive+0xbc2>
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	8b5b      	ldrh	r3, [r3, #26]
 8019d00:	f023 0301 	bic.w	r3, r3, #1
 8019d04:	b29a      	uxth	r2, r3
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	835a      	strh	r2, [r3, #26]
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	8b5b      	ldrh	r3, [r3, #26]
 8019d0e:	f043 0302 	orr.w	r3, r3, #2
 8019d12:	b29a      	uxth	r2, r3
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019d18:	e188      	b.n	801a02c <tcp_receive+0xed4>
        tcp_ack(pcb);
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	8b5b      	ldrh	r3, [r3, #26]
 8019d1e:	f043 0301 	orr.w	r3, r3, #1
 8019d22:	b29a      	uxth	r2, r3
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019d28:	e180      	b.n	801a02c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	d106      	bne.n	8019d40 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8019d32:	4848      	ldr	r0, [pc, #288]	; (8019e54 <tcp_receive+0xcfc>)
 8019d34:	f7fd fbbe 	bl	80174b4 <tcp_seg_copy>
 8019d38:	4602      	mov	r2, r0
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	675a      	str	r2, [r3, #116]	; 0x74
 8019d3e:	e16d      	b.n	801a01c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8019d40:	2300      	movs	r3, #0
 8019d42:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d48:	63bb      	str	r3, [r7, #56]	; 0x38
 8019d4a:	e157      	b.n	8019ffc <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8019d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d4e:	68db      	ldr	r3, [r3, #12]
 8019d50:	685a      	ldr	r2, [r3, #4]
 8019d52:	4b41      	ldr	r3, [pc, #260]	; (8019e58 <tcp_receive+0xd00>)
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	429a      	cmp	r2, r3
 8019d58:	d11d      	bne.n	8019d96 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8019d5a:	4b3e      	ldr	r3, [pc, #248]	; (8019e54 <tcp_receive+0xcfc>)
 8019d5c:	891a      	ldrh	r2, [r3, #8]
 8019d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d60:	891b      	ldrh	r3, [r3, #8]
 8019d62:	429a      	cmp	r2, r3
 8019d64:	f240 814f 	bls.w	801a006 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019d68:	483a      	ldr	r0, [pc, #232]	; (8019e54 <tcp_receive+0xcfc>)
 8019d6a:	f7fd fba3 	bl	80174b4 <tcp_seg_copy>
 8019d6e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8019d70:	697b      	ldr	r3, [r7, #20]
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	f000 8149 	beq.w	801a00a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8019d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d003      	beq.n	8019d86 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8019d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d80:	697a      	ldr	r2, [r7, #20]
 8019d82:	601a      	str	r2, [r3, #0]
 8019d84:	e002      	b.n	8019d8c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	697a      	ldr	r2, [r7, #20]
 8019d8a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8019d8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019d8e:	6978      	ldr	r0, [r7, #20]
 8019d90:	f7ff f8de 	bl	8018f50 <tcp_oos_insert_segment>
                }
                break;
 8019d94:	e139      	b.n	801a00a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8019d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d117      	bne.n	8019dcc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8019d9c:	4b2e      	ldr	r3, [pc, #184]	; (8019e58 <tcp_receive+0xd00>)
 8019d9e:	681a      	ldr	r2, [r3, #0]
 8019da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019da2:	68db      	ldr	r3, [r3, #12]
 8019da4:	685b      	ldr	r3, [r3, #4]
 8019da6:	1ad3      	subs	r3, r2, r3
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	da57      	bge.n	8019e5c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019dac:	4829      	ldr	r0, [pc, #164]	; (8019e54 <tcp_receive+0xcfc>)
 8019dae:	f7fd fb81 	bl	80174b4 <tcp_seg_copy>
 8019db2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8019db4:	69bb      	ldr	r3, [r7, #24]
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	f000 8129 	beq.w	801a00e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	69ba      	ldr	r2, [r7, #24]
 8019dc0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8019dc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019dc4:	69b8      	ldr	r0, [r7, #24]
 8019dc6:	f7ff f8c3 	bl	8018f50 <tcp_oos_insert_segment>
                  }
                  break;
 8019dca:	e120      	b.n	801a00e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019dcc:	4b22      	ldr	r3, [pc, #136]	; (8019e58 <tcp_receive+0xd00>)
 8019dce:	681a      	ldr	r2, [r3, #0]
 8019dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019dd2:	68db      	ldr	r3, [r3, #12]
 8019dd4:	685b      	ldr	r3, [r3, #4]
 8019dd6:	1ad3      	subs	r3, r2, r3
 8019dd8:	3b01      	subs	r3, #1
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	db3e      	blt.n	8019e5c <tcp_receive+0xd04>
 8019dde:	4b1e      	ldr	r3, [pc, #120]	; (8019e58 <tcp_receive+0xd00>)
 8019de0:	681a      	ldr	r2, [r3, #0]
 8019de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019de4:	68db      	ldr	r3, [r3, #12]
 8019de6:	685b      	ldr	r3, [r3, #4]
 8019de8:	1ad3      	subs	r3, r2, r3
 8019dea:	3301      	adds	r3, #1
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	dc35      	bgt.n	8019e5c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019df0:	4818      	ldr	r0, [pc, #96]	; (8019e54 <tcp_receive+0xcfc>)
 8019df2:	f7fd fb5f 	bl	80174b4 <tcp_seg_copy>
 8019df6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8019df8:	69fb      	ldr	r3, [r7, #28]
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	f000 8109 	beq.w	801a012 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8019e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e02:	68db      	ldr	r3, [r3, #12]
 8019e04:	685b      	ldr	r3, [r3, #4]
 8019e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019e08:	8912      	ldrh	r2, [r2, #8]
 8019e0a:	441a      	add	r2, r3
 8019e0c:	4b12      	ldr	r3, [pc, #72]	; (8019e58 <tcp_receive+0xd00>)
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	1ad3      	subs	r3, r2, r3
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	dd12      	ble.n	8019e3c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8019e16:	4b10      	ldr	r3, [pc, #64]	; (8019e58 <tcp_receive+0xd00>)
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	b29a      	uxth	r2, r3
 8019e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e1e:	68db      	ldr	r3, [r3, #12]
 8019e20:	685b      	ldr	r3, [r3, #4]
 8019e22:	b29b      	uxth	r3, r3
 8019e24:	1ad3      	subs	r3, r2, r3
 8019e26:	b29a      	uxth	r2, r3
 8019e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e2a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e2e:	685a      	ldr	r2, [r3, #4]
 8019e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e32:	891b      	ldrh	r3, [r3, #8]
 8019e34:	4619      	mov	r1, r3
 8019e36:	4610      	mov	r0, r2
 8019e38:	f7fb ff1a 	bl	8015c70 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e3e:	69fa      	ldr	r2, [r7, #28]
 8019e40:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8019e42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019e44:	69f8      	ldr	r0, [r7, #28]
 8019e46:	f7ff f883 	bl	8018f50 <tcp_oos_insert_segment>
                  }
                  break;
 8019e4a:	e0e2      	b.n	801a012 <tcp_receive+0xeba>
 8019e4c:	20008ff0 	.word	0x20008ff0
 8019e50:	20008fed 	.word	0x20008fed
 8019e54:	20008fc0 	.word	0x20008fc0
 8019e58:	20008fe0 	.word	0x20008fe0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8019e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e5e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8019e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	f040 80c6 	bne.w	8019ff6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8019e6a:	4b80      	ldr	r3, [pc, #512]	; (801a06c <tcp_receive+0xf14>)
 8019e6c:	681a      	ldr	r2, [r3, #0]
 8019e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e70:	68db      	ldr	r3, [r3, #12]
 8019e72:	685b      	ldr	r3, [r3, #4]
 8019e74:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	f340 80bd 	ble.w	8019ff6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e7e:	68db      	ldr	r3, [r3, #12]
 8019e80:	899b      	ldrh	r3, [r3, #12]
 8019e82:	b29b      	uxth	r3, r3
 8019e84:	4618      	mov	r0, r3
 8019e86:	f7fa fcab 	bl	80147e0 <lwip_htons>
 8019e8a:	4603      	mov	r3, r0
 8019e8c:	b2db      	uxtb	r3, r3
 8019e8e:	f003 0301 	and.w	r3, r3, #1
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	f040 80bf 	bne.w	801a016 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8019e98:	4875      	ldr	r0, [pc, #468]	; (801a070 <tcp_receive+0xf18>)
 8019e9a:	f7fd fb0b 	bl	80174b4 <tcp_seg_copy>
 8019e9e:	4602      	mov	r2, r0
 8019ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ea2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8019ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	f000 80b6 	beq.w	801a01a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8019eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019eb0:	68db      	ldr	r3, [r3, #12]
 8019eb2:	685b      	ldr	r3, [r3, #4]
 8019eb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019eb6:	8912      	ldrh	r2, [r2, #8]
 8019eb8:	441a      	add	r2, r3
 8019eba:	4b6c      	ldr	r3, [pc, #432]	; (801a06c <tcp_receive+0xf14>)
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	1ad3      	subs	r3, r2, r3
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	dd12      	ble.n	8019eea <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019ec4:	4b69      	ldr	r3, [pc, #420]	; (801a06c <tcp_receive+0xf14>)
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	b29a      	uxth	r2, r3
 8019eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ecc:	68db      	ldr	r3, [r3, #12]
 8019ece:	685b      	ldr	r3, [r3, #4]
 8019ed0:	b29b      	uxth	r3, r3
 8019ed2:	1ad3      	subs	r3, r2, r3
 8019ed4:	b29a      	uxth	r2, r3
 8019ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ed8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8019eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019edc:	685a      	ldr	r2, [r3, #4]
 8019ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ee0:	891b      	ldrh	r3, [r3, #8]
 8019ee2:	4619      	mov	r1, r3
 8019ee4:	4610      	mov	r0, r2
 8019ee6:	f7fb fec3 	bl	8015c70 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019eea:	4b62      	ldr	r3, [pc, #392]	; (801a074 <tcp_receive+0xf1c>)
 8019eec:	881b      	ldrh	r3, [r3, #0]
 8019eee:	461a      	mov	r2, r3
 8019ef0:	4b5e      	ldr	r3, [pc, #376]	; (801a06c <tcp_receive+0xf14>)
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	441a      	add	r2, r3
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019efa:	6879      	ldr	r1, [r7, #4]
 8019efc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019efe:	440b      	add	r3, r1
 8019f00:	1ad3      	subs	r3, r2, r3
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	f340 8089 	ble.w	801a01a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	68db      	ldr	r3, [r3, #12]
 8019f0e:	899b      	ldrh	r3, [r3, #12]
 8019f10:	b29b      	uxth	r3, r3
 8019f12:	4618      	mov	r0, r3
 8019f14:	f7fa fc64 	bl	80147e0 <lwip_htons>
 8019f18:	4603      	mov	r3, r0
 8019f1a:	b2db      	uxtb	r3, r3
 8019f1c:	f003 0301 	and.w	r3, r3, #1
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d022      	beq.n	8019f6a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	68db      	ldr	r3, [r3, #12]
 8019f2a:	899b      	ldrh	r3, [r3, #12]
 8019f2c:	b29b      	uxth	r3, r3
 8019f2e:	b21b      	sxth	r3, r3
 8019f30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019f34:	b21c      	sxth	r4, r3
 8019f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	68db      	ldr	r3, [r3, #12]
 8019f3c:	899b      	ldrh	r3, [r3, #12]
 8019f3e:	b29b      	uxth	r3, r3
 8019f40:	4618      	mov	r0, r3
 8019f42:	f7fa fc4d 	bl	80147e0 <lwip_htons>
 8019f46:	4603      	mov	r3, r0
 8019f48:	b2db      	uxtb	r3, r3
 8019f4a:	b29b      	uxth	r3, r3
 8019f4c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019f50:	b29b      	uxth	r3, r3
 8019f52:	4618      	mov	r0, r3
 8019f54:	f7fa fc44 	bl	80147e0 <lwip_htons>
 8019f58:	4603      	mov	r3, r0
 8019f5a:	b21b      	sxth	r3, r3
 8019f5c:	4323      	orrs	r3, r4
 8019f5e:	b21a      	sxth	r2, r3
 8019f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	68db      	ldr	r3, [r3, #12]
 8019f66:	b292      	uxth	r2, r2
 8019f68:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f6e:	b29a      	uxth	r2, r3
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019f74:	4413      	add	r3, r2
 8019f76:	b299      	uxth	r1, r3
 8019f78:	4b3c      	ldr	r3, [pc, #240]	; (801a06c <tcp_receive+0xf14>)
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	b29a      	uxth	r2, r3
 8019f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	1a8a      	subs	r2, r1, r2
 8019f84:	b292      	uxth	r2, r2
 8019f86:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8019f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	685a      	ldr	r2, [r3, #4]
 8019f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	891b      	ldrh	r3, [r3, #8]
 8019f94:	4619      	mov	r1, r3
 8019f96:	4610      	mov	r0, r2
 8019f98:	f7fb fe6a 	bl	8015c70 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	891c      	ldrh	r4, [r3, #8]
 8019fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	68db      	ldr	r3, [r3, #12]
 8019fa8:	899b      	ldrh	r3, [r3, #12]
 8019faa:	b29b      	uxth	r3, r3
 8019fac:	4618      	mov	r0, r3
 8019fae:	f7fa fc17 	bl	80147e0 <lwip_htons>
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	b2db      	uxtb	r3, r3
 8019fb6:	f003 0303 	and.w	r3, r3, #3
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d001      	beq.n	8019fc2 <tcp_receive+0xe6a>
 8019fbe:	2301      	movs	r3, #1
 8019fc0:	e000      	b.n	8019fc4 <tcp_receive+0xe6c>
 8019fc2:	2300      	movs	r3, #0
 8019fc4:	4423      	add	r3, r4
 8019fc6:	b29a      	uxth	r2, r3
 8019fc8:	4b2a      	ldr	r3, [pc, #168]	; (801a074 <tcp_receive+0xf1c>)
 8019fca:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019fcc:	4b29      	ldr	r3, [pc, #164]	; (801a074 <tcp_receive+0xf1c>)
 8019fce:	881b      	ldrh	r3, [r3, #0]
 8019fd0:	461a      	mov	r2, r3
 8019fd2:	4b26      	ldr	r3, [pc, #152]	; (801a06c <tcp_receive+0xf14>)
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	441a      	add	r2, r3
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fdc:	6879      	ldr	r1, [r7, #4]
 8019fde:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019fe0:	440b      	add	r3, r1
 8019fe2:	429a      	cmp	r2, r3
 8019fe4:	d019      	beq.n	801a01a <tcp_receive+0xec2>
 8019fe6:	4b24      	ldr	r3, [pc, #144]	; (801a078 <tcp_receive+0xf20>)
 8019fe8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8019fec:	4923      	ldr	r1, [pc, #140]	; (801a07c <tcp_receive+0xf24>)
 8019fee:	4824      	ldr	r0, [pc, #144]	; (801a080 <tcp_receive+0xf28>)
 8019ff0:	f007 fa96 	bl	8021520 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8019ff4:	e011      	b.n	801a01a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8019ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	f47f aea4 	bne.w	8019d4c <tcp_receive+0xbf4>
 801a004:	e00a      	b.n	801a01c <tcp_receive+0xec4>
                break;
 801a006:	bf00      	nop
 801a008:	e008      	b.n	801a01c <tcp_receive+0xec4>
                break;
 801a00a:	bf00      	nop
 801a00c:	e006      	b.n	801a01c <tcp_receive+0xec4>
                  break;
 801a00e:	bf00      	nop
 801a010:	e004      	b.n	801a01c <tcp_receive+0xec4>
                  break;
 801a012:	bf00      	nop
 801a014:	e002      	b.n	801a01c <tcp_receive+0xec4>
                  break;
 801a016:	bf00      	nop
 801a018:	e000      	b.n	801a01c <tcp_receive+0xec4>
                break;
 801a01a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801a01c:	6878      	ldr	r0, [r7, #4]
 801a01e:	f001 fa43 	bl	801b4a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801a022:	e003      	b.n	801a02c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a024:	6878      	ldr	r0, [r7, #4]
 801a026:	f001 fa3f 	bl	801b4a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a02a:	e01a      	b.n	801a062 <tcp_receive+0xf0a>
 801a02c:	e019      	b.n	801a062 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a02e:	4b0f      	ldr	r3, [pc, #60]	; (801a06c <tcp_receive+0xf14>)
 801a030:	681a      	ldr	r2, [r3, #0]
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a036:	1ad3      	subs	r3, r2, r3
 801a038:	2b00      	cmp	r3, #0
 801a03a:	db0a      	blt.n	801a052 <tcp_receive+0xefa>
 801a03c:	4b0b      	ldr	r3, [pc, #44]	; (801a06c <tcp_receive+0xf14>)
 801a03e:	681a      	ldr	r2, [r3, #0]
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a044:	6879      	ldr	r1, [r7, #4]
 801a046:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a048:	440b      	add	r3, r1
 801a04a:	1ad3      	subs	r3, r2, r3
 801a04c:	3301      	adds	r3, #1
 801a04e:	2b00      	cmp	r3, #0
 801a050:	dd07      	ble.n	801a062 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	8b5b      	ldrh	r3, [r3, #26]
 801a056:	f043 0302 	orr.w	r3, r3, #2
 801a05a:	b29a      	uxth	r2, r3
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801a060:	e7ff      	b.n	801a062 <tcp_receive+0xf0a>
 801a062:	bf00      	nop
 801a064:	3750      	adds	r7, #80	; 0x50
 801a066:	46bd      	mov	sp, r7
 801a068:	bdb0      	pop	{r4, r5, r7, pc}
 801a06a:	bf00      	nop
 801a06c:	20008fe0 	.word	0x20008fe0
 801a070:	20008fc0 	.word	0x20008fc0
 801a074:	20008fea 	.word	0x20008fea
 801a078:	080236c4 	.word	0x080236c4
 801a07c:	08023a6c 	.word	0x08023a6c
 801a080:	08023710 	.word	0x08023710

0801a084 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801a084:	b480      	push	{r7}
 801a086:	b083      	sub	sp, #12
 801a088:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801a08a:	4b15      	ldr	r3, [pc, #84]	; (801a0e0 <tcp_get_next_optbyte+0x5c>)
 801a08c:	881b      	ldrh	r3, [r3, #0]
 801a08e:	1c5a      	adds	r2, r3, #1
 801a090:	b291      	uxth	r1, r2
 801a092:	4a13      	ldr	r2, [pc, #76]	; (801a0e0 <tcp_get_next_optbyte+0x5c>)
 801a094:	8011      	strh	r1, [r2, #0]
 801a096:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a098:	4b12      	ldr	r3, [pc, #72]	; (801a0e4 <tcp_get_next_optbyte+0x60>)
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d004      	beq.n	801a0aa <tcp_get_next_optbyte+0x26>
 801a0a0:	4b11      	ldr	r3, [pc, #68]	; (801a0e8 <tcp_get_next_optbyte+0x64>)
 801a0a2:	881b      	ldrh	r3, [r3, #0]
 801a0a4:	88fa      	ldrh	r2, [r7, #6]
 801a0a6:	429a      	cmp	r2, r3
 801a0a8:	d208      	bcs.n	801a0bc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a0aa:	4b10      	ldr	r3, [pc, #64]	; (801a0ec <tcp_get_next_optbyte+0x68>)
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	3314      	adds	r3, #20
 801a0b0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801a0b2:	88fb      	ldrh	r3, [r7, #6]
 801a0b4:	683a      	ldr	r2, [r7, #0]
 801a0b6:	4413      	add	r3, r2
 801a0b8:	781b      	ldrb	r3, [r3, #0]
 801a0ba:	e00b      	b.n	801a0d4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a0bc:	88fb      	ldrh	r3, [r7, #6]
 801a0be:	b2da      	uxtb	r2, r3
 801a0c0:	4b09      	ldr	r3, [pc, #36]	; (801a0e8 <tcp_get_next_optbyte+0x64>)
 801a0c2:	881b      	ldrh	r3, [r3, #0]
 801a0c4:	b2db      	uxtb	r3, r3
 801a0c6:	1ad3      	subs	r3, r2, r3
 801a0c8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801a0ca:	4b06      	ldr	r3, [pc, #24]	; (801a0e4 <tcp_get_next_optbyte+0x60>)
 801a0cc:	681a      	ldr	r2, [r3, #0]
 801a0ce:	797b      	ldrb	r3, [r7, #5]
 801a0d0:	4413      	add	r3, r2
 801a0d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a0d4:	4618      	mov	r0, r3
 801a0d6:	370c      	adds	r7, #12
 801a0d8:	46bd      	mov	sp, r7
 801a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0de:	4770      	bx	lr
 801a0e0:	20008fdc 	.word	0x20008fdc
 801a0e4:	20008fd8 	.word	0x20008fd8
 801a0e8:	20008fd6 	.word	0x20008fd6
 801a0ec:	20008fd0 	.word	0x20008fd0

0801a0f0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	b084      	sub	sp, #16
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d106      	bne.n	801a10c <tcp_parseopt+0x1c>
 801a0fe:	4b31      	ldr	r3, [pc, #196]	; (801a1c4 <tcp_parseopt+0xd4>)
 801a100:	f240 727d 	movw	r2, #1917	; 0x77d
 801a104:	4930      	ldr	r1, [pc, #192]	; (801a1c8 <tcp_parseopt+0xd8>)
 801a106:	4831      	ldr	r0, [pc, #196]	; (801a1cc <tcp_parseopt+0xdc>)
 801a108:	f007 fa0a 	bl	8021520 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a10c:	4b30      	ldr	r3, [pc, #192]	; (801a1d0 <tcp_parseopt+0xe0>)
 801a10e:	881b      	ldrh	r3, [r3, #0]
 801a110:	2b00      	cmp	r3, #0
 801a112:	d053      	beq.n	801a1bc <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a114:	4b2f      	ldr	r3, [pc, #188]	; (801a1d4 <tcp_parseopt+0xe4>)
 801a116:	2200      	movs	r2, #0
 801a118:	801a      	strh	r2, [r3, #0]
 801a11a:	e043      	b.n	801a1a4 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 801a11c:	f7ff ffb2 	bl	801a084 <tcp_get_next_optbyte>
 801a120:	4603      	mov	r3, r0
 801a122:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a124:	7bfb      	ldrb	r3, [r7, #15]
 801a126:	2b01      	cmp	r3, #1
 801a128:	d03c      	beq.n	801a1a4 <tcp_parseopt+0xb4>
 801a12a:	2b02      	cmp	r3, #2
 801a12c:	d002      	beq.n	801a134 <tcp_parseopt+0x44>
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d03f      	beq.n	801a1b2 <tcp_parseopt+0xc2>
 801a132:	e026      	b.n	801a182 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a134:	f7ff ffa6 	bl	801a084 <tcp_get_next_optbyte>
 801a138:	4603      	mov	r3, r0
 801a13a:	2b04      	cmp	r3, #4
 801a13c:	d13b      	bne.n	801a1b6 <tcp_parseopt+0xc6>
 801a13e:	4b25      	ldr	r3, [pc, #148]	; (801a1d4 <tcp_parseopt+0xe4>)
 801a140:	881b      	ldrh	r3, [r3, #0]
 801a142:	3302      	adds	r3, #2
 801a144:	4a22      	ldr	r2, [pc, #136]	; (801a1d0 <tcp_parseopt+0xe0>)
 801a146:	8812      	ldrh	r2, [r2, #0]
 801a148:	4293      	cmp	r3, r2
 801a14a:	dc34      	bgt.n	801a1b6 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a14c:	f7ff ff9a 	bl	801a084 <tcp_get_next_optbyte>
 801a150:	4603      	mov	r3, r0
 801a152:	b29b      	uxth	r3, r3
 801a154:	021b      	lsls	r3, r3, #8
 801a156:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801a158:	f7ff ff94 	bl	801a084 <tcp_get_next_optbyte>
 801a15c:	4603      	mov	r3, r0
 801a15e:	b29a      	uxth	r2, r3
 801a160:	89bb      	ldrh	r3, [r7, #12]
 801a162:	4313      	orrs	r3, r2
 801a164:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a166:	89bb      	ldrh	r3, [r7, #12]
 801a168:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a16c:	d804      	bhi.n	801a178 <tcp_parseopt+0x88>
 801a16e:	89bb      	ldrh	r3, [r7, #12]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d001      	beq.n	801a178 <tcp_parseopt+0x88>
 801a174:	89ba      	ldrh	r2, [r7, #12]
 801a176:	e001      	b.n	801a17c <tcp_parseopt+0x8c>
 801a178:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801a180:	e010      	b.n	801a1a4 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801a182:	f7ff ff7f 	bl	801a084 <tcp_get_next_optbyte>
 801a186:	4603      	mov	r3, r0
 801a188:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801a18a:	7afb      	ldrb	r3, [r7, #11]
 801a18c:	2b01      	cmp	r3, #1
 801a18e:	d914      	bls.n	801a1ba <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801a190:	7afb      	ldrb	r3, [r7, #11]
 801a192:	b29a      	uxth	r2, r3
 801a194:	4b0f      	ldr	r3, [pc, #60]	; (801a1d4 <tcp_parseopt+0xe4>)
 801a196:	881b      	ldrh	r3, [r3, #0]
 801a198:	4413      	add	r3, r2
 801a19a:	b29b      	uxth	r3, r3
 801a19c:	3b02      	subs	r3, #2
 801a19e:	b29a      	uxth	r2, r3
 801a1a0:	4b0c      	ldr	r3, [pc, #48]	; (801a1d4 <tcp_parseopt+0xe4>)
 801a1a2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a1a4:	4b0b      	ldr	r3, [pc, #44]	; (801a1d4 <tcp_parseopt+0xe4>)
 801a1a6:	881a      	ldrh	r2, [r3, #0]
 801a1a8:	4b09      	ldr	r3, [pc, #36]	; (801a1d0 <tcp_parseopt+0xe0>)
 801a1aa:	881b      	ldrh	r3, [r3, #0]
 801a1ac:	429a      	cmp	r2, r3
 801a1ae:	d3b5      	bcc.n	801a11c <tcp_parseopt+0x2c>
 801a1b0:	e004      	b.n	801a1bc <tcp_parseopt+0xcc>
          return;
 801a1b2:	bf00      	nop
 801a1b4:	e002      	b.n	801a1bc <tcp_parseopt+0xcc>
            return;
 801a1b6:	bf00      	nop
 801a1b8:	e000      	b.n	801a1bc <tcp_parseopt+0xcc>
            return;
 801a1ba:	bf00      	nop
      }
    }
  }
}
 801a1bc:	3710      	adds	r7, #16
 801a1be:	46bd      	mov	sp, r7
 801a1c0:	bd80      	pop	{r7, pc}
 801a1c2:	bf00      	nop
 801a1c4:	080236c4 	.word	0x080236c4
 801a1c8:	08023b28 	.word	0x08023b28
 801a1cc:	08023710 	.word	0x08023710
 801a1d0:	20008fd4 	.word	0x20008fd4
 801a1d4:	20008fdc 	.word	0x20008fdc

0801a1d8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a1d8:	b480      	push	{r7}
 801a1da:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a1dc:	4b05      	ldr	r3, [pc, #20]	; (801a1f4 <tcp_trigger_input_pcb_close+0x1c>)
 801a1de:	781b      	ldrb	r3, [r3, #0]
 801a1e0:	f043 0310 	orr.w	r3, r3, #16
 801a1e4:	b2da      	uxtb	r2, r3
 801a1e6:	4b03      	ldr	r3, [pc, #12]	; (801a1f4 <tcp_trigger_input_pcb_close+0x1c>)
 801a1e8:	701a      	strb	r2, [r3, #0]
}
 801a1ea:	bf00      	nop
 801a1ec:	46bd      	mov	sp, r7
 801a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1f2:	4770      	bx	lr
 801a1f4:	20008fed 	.word	0x20008fed

0801a1f8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801a1f8:	b580      	push	{r7, lr}
 801a1fa:	b084      	sub	sp, #16
 801a1fc:	af00      	add	r7, sp, #0
 801a1fe:	60f8      	str	r0, [r7, #12]
 801a200:	60b9      	str	r1, [r7, #8]
 801a202:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a204:	68fb      	ldr	r3, [r7, #12]
 801a206:	2b00      	cmp	r3, #0
 801a208:	d00a      	beq.n	801a220 <tcp_route+0x28>
 801a20a:	68fb      	ldr	r3, [r7, #12]
 801a20c:	7a1b      	ldrb	r3, [r3, #8]
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d006      	beq.n	801a220 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801a212:	68fb      	ldr	r3, [r7, #12]
 801a214:	7a1b      	ldrb	r3, [r3, #8]
 801a216:	4618      	mov	r0, r3
 801a218:	f7fb fb26 	bl	8015868 <netif_get_by_index>
 801a21c:	4603      	mov	r3, r0
 801a21e:	e003      	b.n	801a228 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801a220:	6878      	ldr	r0, [r7, #4]
 801a222:	f005 f867 	bl	801f2f4 <ip4_route>
 801a226:	4603      	mov	r3, r0
  }
}
 801a228:	4618      	mov	r0, r3
 801a22a:	3710      	adds	r7, #16
 801a22c:	46bd      	mov	sp, r7
 801a22e:	bd80      	pop	{r7, pc}

0801a230 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801a230:	b590      	push	{r4, r7, lr}
 801a232:	b087      	sub	sp, #28
 801a234:	af00      	add	r7, sp, #0
 801a236:	60f8      	str	r0, [r7, #12]
 801a238:	60b9      	str	r1, [r7, #8]
 801a23a:	603b      	str	r3, [r7, #0]
 801a23c:	4613      	mov	r3, r2
 801a23e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	2b00      	cmp	r3, #0
 801a244:	d105      	bne.n	801a252 <tcp_create_segment+0x22>
 801a246:	4b44      	ldr	r3, [pc, #272]	; (801a358 <tcp_create_segment+0x128>)
 801a248:	22a3      	movs	r2, #163	; 0xa3
 801a24a:	4944      	ldr	r1, [pc, #272]	; (801a35c <tcp_create_segment+0x12c>)
 801a24c:	4844      	ldr	r0, [pc, #272]	; (801a360 <tcp_create_segment+0x130>)
 801a24e:	f007 f967 	bl	8021520 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a252:	68bb      	ldr	r3, [r7, #8]
 801a254:	2b00      	cmp	r3, #0
 801a256:	d105      	bne.n	801a264 <tcp_create_segment+0x34>
 801a258:	4b3f      	ldr	r3, [pc, #252]	; (801a358 <tcp_create_segment+0x128>)
 801a25a:	22a4      	movs	r2, #164	; 0xa4
 801a25c:	4941      	ldr	r1, [pc, #260]	; (801a364 <tcp_create_segment+0x134>)
 801a25e:	4840      	ldr	r0, [pc, #256]	; (801a360 <tcp_create_segment+0x130>)
 801a260:	f007 f95e 	bl	8021520 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a264:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a268:	009b      	lsls	r3, r3, #2
 801a26a:	b2db      	uxtb	r3, r3
 801a26c:	f003 0304 	and.w	r3, r3, #4
 801a270:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a272:	2003      	movs	r0, #3
 801a274:	f7fa ff6a 	bl	801514c <memp_malloc>
 801a278:	6138      	str	r0, [r7, #16]
 801a27a:	693b      	ldr	r3, [r7, #16]
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d104      	bne.n	801a28a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a280:	68b8      	ldr	r0, [r7, #8]
 801a282:	f7fb fe7b 	bl	8015f7c <pbuf_free>
    return NULL;
 801a286:	2300      	movs	r3, #0
 801a288:	e061      	b.n	801a34e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801a28a:	693b      	ldr	r3, [r7, #16]
 801a28c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a290:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a292:	693b      	ldr	r3, [r7, #16]
 801a294:	2200      	movs	r2, #0
 801a296:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a298:	693b      	ldr	r3, [r7, #16]
 801a29a:	68ba      	ldr	r2, [r7, #8]
 801a29c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a29e:	68bb      	ldr	r3, [r7, #8]
 801a2a0:	891a      	ldrh	r2, [r3, #8]
 801a2a2:	7dfb      	ldrb	r3, [r7, #23]
 801a2a4:	b29b      	uxth	r3, r3
 801a2a6:	429a      	cmp	r2, r3
 801a2a8:	d205      	bcs.n	801a2b6 <tcp_create_segment+0x86>
 801a2aa:	4b2b      	ldr	r3, [pc, #172]	; (801a358 <tcp_create_segment+0x128>)
 801a2ac:	22b0      	movs	r2, #176	; 0xb0
 801a2ae:	492e      	ldr	r1, [pc, #184]	; (801a368 <tcp_create_segment+0x138>)
 801a2b0:	482b      	ldr	r0, [pc, #172]	; (801a360 <tcp_create_segment+0x130>)
 801a2b2:	f007 f935 	bl	8021520 <iprintf>
  seg->len = p->tot_len - optlen;
 801a2b6:	68bb      	ldr	r3, [r7, #8]
 801a2b8:	891a      	ldrh	r2, [r3, #8]
 801a2ba:	7dfb      	ldrb	r3, [r7, #23]
 801a2bc:	b29b      	uxth	r3, r3
 801a2be:	1ad3      	subs	r3, r2, r3
 801a2c0:	b29a      	uxth	r2, r3
 801a2c2:	693b      	ldr	r3, [r7, #16]
 801a2c4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a2c6:	2114      	movs	r1, #20
 801a2c8:	68b8      	ldr	r0, [r7, #8]
 801a2ca:	f7fb fdc1 	bl	8015e50 <pbuf_add_header>
 801a2ce:	4603      	mov	r3, r0
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d004      	beq.n	801a2de <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801a2d4:	6938      	ldr	r0, [r7, #16]
 801a2d6:	f7fd f8d5 	bl	8017484 <tcp_seg_free>
    return NULL;
 801a2da:	2300      	movs	r3, #0
 801a2dc:	e037      	b.n	801a34e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a2de:	693b      	ldr	r3, [r7, #16]
 801a2e0:	685b      	ldr	r3, [r3, #4]
 801a2e2:	685a      	ldr	r2, [r3, #4]
 801a2e4:	693b      	ldr	r3, [r7, #16]
 801a2e6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a2e8:	68fb      	ldr	r3, [r7, #12]
 801a2ea:	8ada      	ldrh	r2, [r3, #22]
 801a2ec:	693b      	ldr	r3, [r7, #16]
 801a2ee:	68dc      	ldr	r4, [r3, #12]
 801a2f0:	4610      	mov	r0, r2
 801a2f2:	f7fa fa75 	bl	80147e0 <lwip_htons>
 801a2f6:	4603      	mov	r3, r0
 801a2f8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a2fa:	68fb      	ldr	r3, [r7, #12]
 801a2fc:	8b1a      	ldrh	r2, [r3, #24]
 801a2fe:	693b      	ldr	r3, [r7, #16]
 801a300:	68dc      	ldr	r4, [r3, #12]
 801a302:	4610      	mov	r0, r2
 801a304:	f7fa fa6c 	bl	80147e0 <lwip_htons>
 801a308:	4603      	mov	r3, r0
 801a30a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a30c:	693b      	ldr	r3, [r7, #16]
 801a30e:	68dc      	ldr	r4, [r3, #12]
 801a310:	6838      	ldr	r0, [r7, #0]
 801a312:	f7fa fa7a 	bl	801480a <lwip_htonl>
 801a316:	4603      	mov	r3, r0
 801a318:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a31a:	7dfb      	ldrb	r3, [r7, #23]
 801a31c:	089b      	lsrs	r3, r3, #2
 801a31e:	b2db      	uxtb	r3, r3
 801a320:	b29b      	uxth	r3, r3
 801a322:	3305      	adds	r3, #5
 801a324:	b29b      	uxth	r3, r3
 801a326:	031b      	lsls	r3, r3, #12
 801a328:	b29a      	uxth	r2, r3
 801a32a:	79fb      	ldrb	r3, [r7, #7]
 801a32c:	b29b      	uxth	r3, r3
 801a32e:	4313      	orrs	r3, r2
 801a330:	b29a      	uxth	r2, r3
 801a332:	693b      	ldr	r3, [r7, #16]
 801a334:	68dc      	ldr	r4, [r3, #12]
 801a336:	4610      	mov	r0, r2
 801a338:	f7fa fa52 	bl	80147e0 <lwip_htons>
 801a33c:	4603      	mov	r3, r0
 801a33e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a340:	693b      	ldr	r3, [r7, #16]
 801a342:	68db      	ldr	r3, [r3, #12]
 801a344:	2200      	movs	r2, #0
 801a346:	749a      	strb	r2, [r3, #18]
 801a348:	2200      	movs	r2, #0
 801a34a:	74da      	strb	r2, [r3, #19]
  return seg;
 801a34c:	693b      	ldr	r3, [r7, #16]
}
 801a34e:	4618      	mov	r0, r3
 801a350:	371c      	adds	r7, #28
 801a352:	46bd      	mov	sp, r7
 801a354:	bd90      	pop	{r4, r7, pc}
 801a356:	bf00      	nop
 801a358:	08023b44 	.word	0x08023b44
 801a35c:	08023b78 	.word	0x08023b78
 801a360:	08023b98 	.word	0x08023b98
 801a364:	08023bc0 	.word	0x08023bc0
 801a368:	08023be4 	.word	0x08023be4

0801a36c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801a36c:	b590      	push	{r4, r7, lr}
 801a36e:	b08b      	sub	sp, #44	; 0x2c
 801a370:	af02      	add	r7, sp, #8
 801a372:	6078      	str	r0, [r7, #4]
 801a374:	460b      	mov	r3, r1
 801a376:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801a378:	2300      	movs	r3, #0
 801a37a:	61fb      	str	r3, [r7, #28]
 801a37c:	2300      	movs	r3, #0
 801a37e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801a380:	2300      	movs	r3, #0
 801a382:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d106      	bne.n	801a398 <tcp_split_unsent_seg+0x2c>
 801a38a:	4b95      	ldr	r3, [pc, #596]	; (801a5e0 <tcp_split_unsent_seg+0x274>)
 801a38c:	f240 324b 	movw	r2, #843	; 0x34b
 801a390:	4994      	ldr	r1, [pc, #592]	; (801a5e4 <tcp_split_unsent_seg+0x278>)
 801a392:	4895      	ldr	r0, [pc, #596]	; (801a5e8 <tcp_split_unsent_seg+0x27c>)
 801a394:	f007 f8c4 	bl	8021520 <iprintf>

  useg = pcb->unsent;
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a39c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801a39e:	697b      	ldr	r3, [r7, #20]
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d102      	bne.n	801a3aa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801a3a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a3a8:	e116      	b.n	801a5d8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801a3aa:	887b      	ldrh	r3, [r7, #2]
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d109      	bne.n	801a3c4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801a3b0:	4b8b      	ldr	r3, [pc, #556]	; (801a5e0 <tcp_split_unsent_seg+0x274>)
 801a3b2:	f240 3253 	movw	r2, #851	; 0x353
 801a3b6:	498d      	ldr	r1, [pc, #564]	; (801a5ec <tcp_split_unsent_seg+0x280>)
 801a3b8:	488b      	ldr	r0, [pc, #556]	; (801a5e8 <tcp_split_unsent_seg+0x27c>)
 801a3ba:	f007 f8b1 	bl	8021520 <iprintf>
    return ERR_VAL;
 801a3be:	f06f 0305 	mvn.w	r3, #5
 801a3c2:	e109      	b.n	801a5d8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801a3c4:	697b      	ldr	r3, [r7, #20]
 801a3c6:	891b      	ldrh	r3, [r3, #8]
 801a3c8:	887a      	ldrh	r2, [r7, #2]
 801a3ca:	429a      	cmp	r2, r3
 801a3cc:	d301      	bcc.n	801a3d2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801a3ce:	2300      	movs	r3, #0
 801a3d0:	e102      	b.n	801a5d8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a3d6:	887a      	ldrh	r2, [r7, #2]
 801a3d8:	429a      	cmp	r2, r3
 801a3da:	d906      	bls.n	801a3ea <tcp_split_unsent_seg+0x7e>
 801a3dc:	4b80      	ldr	r3, [pc, #512]	; (801a5e0 <tcp_split_unsent_seg+0x274>)
 801a3de:	f240 325b 	movw	r2, #859	; 0x35b
 801a3e2:	4983      	ldr	r1, [pc, #524]	; (801a5f0 <tcp_split_unsent_seg+0x284>)
 801a3e4:	4880      	ldr	r0, [pc, #512]	; (801a5e8 <tcp_split_unsent_seg+0x27c>)
 801a3e6:	f007 f89b 	bl	8021520 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a3ea:	697b      	ldr	r3, [r7, #20]
 801a3ec:	891b      	ldrh	r3, [r3, #8]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d106      	bne.n	801a400 <tcp_split_unsent_seg+0x94>
 801a3f2:	4b7b      	ldr	r3, [pc, #492]	; (801a5e0 <tcp_split_unsent_seg+0x274>)
 801a3f4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801a3f8:	497e      	ldr	r1, [pc, #504]	; (801a5f4 <tcp_split_unsent_seg+0x288>)
 801a3fa:	487b      	ldr	r0, [pc, #492]	; (801a5e8 <tcp_split_unsent_seg+0x27c>)
 801a3fc:	f007 f890 	bl	8021520 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801a400:	697b      	ldr	r3, [r7, #20]
 801a402:	7a9b      	ldrb	r3, [r3, #10]
 801a404:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a406:	7bfb      	ldrb	r3, [r7, #15]
 801a408:	009b      	lsls	r3, r3, #2
 801a40a:	b2db      	uxtb	r3, r3
 801a40c:	f003 0304 	and.w	r3, r3, #4
 801a410:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801a412:	697b      	ldr	r3, [r7, #20]
 801a414:	891a      	ldrh	r2, [r3, #8]
 801a416:	887b      	ldrh	r3, [r7, #2]
 801a418:	1ad3      	subs	r3, r2, r3
 801a41a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a41c:	7bbb      	ldrb	r3, [r7, #14]
 801a41e:	b29a      	uxth	r2, r3
 801a420:	89bb      	ldrh	r3, [r7, #12]
 801a422:	4413      	add	r3, r2
 801a424:	b29b      	uxth	r3, r3
 801a426:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a42a:	4619      	mov	r1, r3
 801a42c:	2036      	movs	r0, #54	; 0x36
 801a42e:	f7fb fac5 	bl	80159bc <pbuf_alloc>
 801a432:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a434:	693b      	ldr	r3, [r7, #16]
 801a436:	2b00      	cmp	r3, #0
 801a438:	f000 80b7 	beq.w	801a5aa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801a43c:	697b      	ldr	r3, [r7, #20]
 801a43e:	685b      	ldr	r3, [r3, #4]
 801a440:	891a      	ldrh	r2, [r3, #8]
 801a442:	697b      	ldr	r3, [r7, #20]
 801a444:	891b      	ldrh	r3, [r3, #8]
 801a446:	1ad3      	subs	r3, r2, r3
 801a448:	b29a      	uxth	r2, r3
 801a44a:	887b      	ldrh	r3, [r7, #2]
 801a44c:	4413      	add	r3, r2
 801a44e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a450:	697b      	ldr	r3, [r7, #20]
 801a452:	6858      	ldr	r0, [r3, #4]
 801a454:	693b      	ldr	r3, [r7, #16]
 801a456:	685a      	ldr	r2, [r3, #4]
 801a458:	7bbb      	ldrb	r3, [r7, #14]
 801a45a:	18d1      	adds	r1, r2, r3
 801a45c:	897b      	ldrh	r3, [r7, #10]
 801a45e:	89ba      	ldrh	r2, [r7, #12]
 801a460:	f7fb ff92 	bl	8016388 <pbuf_copy_partial>
 801a464:	4603      	mov	r3, r0
 801a466:	461a      	mov	r2, r3
 801a468:	89bb      	ldrh	r3, [r7, #12]
 801a46a:	4293      	cmp	r3, r2
 801a46c:	f040 809f 	bne.w	801a5ae <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a470:	697b      	ldr	r3, [r7, #20]
 801a472:	68db      	ldr	r3, [r3, #12]
 801a474:	899b      	ldrh	r3, [r3, #12]
 801a476:	b29b      	uxth	r3, r3
 801a478:	4618      	mov	r0, r3
 801a47a:	f7fa f9b1 	bl	80147e0 <lwip_htons>
 801a47e:	4603      	mov	r3, r0
 801a480:	b2db      	uxtb	r3, r3
 801a482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a486:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801a488:	2300      	movs	r3, #0
 801a48a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801a48c:	7efb      	ldrb	r3, [r7, #27]
 801a48e:	f003 0308 	and.w	r3, r3, #8
 801a492:	2b00      	cmp	r3, #0
 801a494:	d007      	beq.n	801a4a6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801a496:	7efb      	ldrb	r3, [r7, #27]
 801a498:	f023 0308 	bic.w	r3, r3, #8
 801a49c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801a49e:	7ebb      	ldrb	r3, [r7, #26]
 801a4a0:	f043 0308 	orr.w	r3, r3, #8
 801a4a4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801a4a6:	7efb      	ldrb	r3, [r7, #27]
 801a4a8:	f003 0301 	and.w	r3, r3, #1
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	d007      	beq.n	801a4c0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801a4b0:	7efb      	ldrb	r3, [r7, #27]
 801a4b2:	f023 0301 	bic.w	r3, r3, #1
 801a4b6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801a4b8:	7ebb      	ldrb	r3, [r7, #26]
 801a4ba:	f043 0301 	orr.w	r3, r3, #1
 801a4be:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a4c0:	697b      	ldr	r3, [r7, #20]
 801a4c2:	68db      	ldr	r3, [r3, #12]
 801a4c4:	685b      	ldr	r3, [r3, #4]
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	f7fa f99f 	bl	801480a <lwip_htonl>
 801a4cc:	4602      	mov	r2, r0
 801a4ce:	887b      	ldrh	r3, [r7, #2]
 801a4d0:	18d1      	adds	r1, r2, r3
 801a4d2:	7eba      	ldrb	r2, [r7, #26]
 801a4d4:	7bfb      	ldrb	r3, [r7, #15]
 801a4d6:	9300      	str	r3, [sp, #0]
 801a4d8:	460b      	mov	r3, r1
 801a4da:	6939      	ldr	r1, [r7, #16]
 801a4dc:	6878      	ldr	r0, [r7, #4]
 801a4de:	f7ff fea7 	bl	801a230 <tcp_create_segment>
 801a4e2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801a4e4:	69fb      	ldr	r3, [r7, #28]
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d063      	beq.n	801a5b2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a4ea:	697b      	ldr	r3, [r7, #20]
 801a4ec:	685b      	ldr	r3, [r3, #4]
 801a4ee:	4618      	mov	r0, r3
 801a4f0:	f7fb fdd2 	bl	8016098 <pbuf_clen>
 801a4f4:	4603      	mov	r3, r0
 801a4f6:	461a      	mov	r2, r3
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a4fe:	1a9b      	subs	r3, r3, r2
 801a500:	b29a      	uxth	r2, r3
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a508:	697b      	ldr	r3, [r7, #20]
 801a50a:	6858      	ldr	r0, [r3, #4]
 801a50c:	697b      	ldr	r3, [r7, #20]
 801a50e:	685b      	ldr	r3, [r3, #4]
 801a510:	891a      	ldrh	r2, [r3, #8]
 801a512:	89bb      	ldrh	r3, [r7, #12]
 801a514:	1ad3      	subs	r3, r2, r3
 801a516:	b29b      	uxth	r3, r3
 801a518:	4619      	mov	r1, r3
 801a51a:	f7fb fba9 	bl	8015c70 <pbuf_realloc>
  useg->len -= remainder;
 801a51e:	697b      	ldr	r3, [r7, #20]
 801a520:	891a      	ldrh	r2, [r3, #8]
 801a522:	89bb      	ldrh	r3, [r7, #12]
 801a524:	1ad3      	subs	r3, r2, r3
 801a526:	b29a      	uxth	r2, r3
 801a528:	697b      	ldr	r3, [r7, #20]
 801a52a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a52c:	697b      	ldr	r3, [r7, #20]
 801a52e:	68db      	ldr	r3, [r3, #12]
 801a530:	899b      	ldrh	r3, [r3, #12]
 801a532:	b29c      	uxth	r4, r3
 801a534:	7efb      	ldrb	r3, [r7, #27]
 801a536:	b29b      	uxth	r3, r3
 801a538:	4618      	mov	r0, r3
 801a53a:	f7fa f951 	bl	80147e0 <lwip_htons>
 801a53e:	4603      	mov	r3, r0
 801a540:	461a      	mov	r2, r3
 801a542:	697b      	ldr	r3, [r7, #20]
 801a544:	68db      	ldr	r3, [r3, #12]
 801a546:	4322      	orrs	r2, r4
 801a548:	b292      	uxth	r2, r2
 801a54a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a54c:	697b      	ldr	r3, [r7, #20]
 801a54e:	685b      	ldr	r3, [r3, #4]
 801a550:	4618      	mov	r0, r3
 801a552:	f7fb fda1 	bl	8016098 <pbuf_clen>
 801a556:	4603      	mov	r3, r0
 801a558:	461a      	mov	r2, r3
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a560:	4413      	add	r3, r2
 801a562:	b29a      	uxth	r2, r3
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a56a:	69fb      	ldr	r3, [r7, #28]
 801a56c:	685b      	ldr	r3, [r3, #4]
 801a56e:	4618      	mov	r0, r3
 801a570:	f7fb fd92 	bl	8016098 <pbuf_clen>
 801a574:	4603      	mov	r3, r0
 801a576:	461a      	mov	r2, r3
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a57e:	4413      	add	r3, r2
 801a580:	b29a      	uxth	r2, r3
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a588:	697b      	ldr	r3, [r7, #20]
 801a58a:	681a      	ldr	r2, [r3, #0]
 801a58c:	69fb      	ldr	r3, [r7, #28]
 801a58e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a590:	697b      	ldr	r3, [r7, #20]
 801a592:	69fa      	ldr	r2, [r7, #28]
 801a594:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a596:	69fb      	ldr	r3, [r7, #28]
 801a598:	681b      	ldr	r3, [r3, #0]
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d103      	bne.n	801a5a6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	2200      	movs	r2, #0
 801a5a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a5a6:	2300      	movs	r3, #0
 801a5a8:	e016      	b.n	801a5d8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801a5aa:	bf00      	nop
 801a5ac:	e002      	b.n	801a5b4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a5ae:	bf00      	nop
 801a5b0:	e000      	b.n	801a5b4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a5b2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a5b4:	69fb      	ldr	r3, [r7, #28]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d006      	beq.n	801a5c8 <tcp_split_unsent_seg+0x25c>
 801a5ba:	4b09      	ldr	r3, [pc, #36]	; (801a5e0 <tcp_split_unsent_seg+0x274>)
 801a5bc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801a5c0:	490d      	ldr	r1, [pc, #52]	; (801a5f8 <tcp_split_unsent_seg+0x28c>)
 801a5c2:	4809      	ldr	r0, [pc, #36]	; (801a5e8 <tcp_split_unsent_seg+0x27c>)
 801a5c4:	f006 ffac 	bl	8021520 <iprintf>
  if (p != NULL) {
 801a5c8:	693b      	ldr	r3, [r7, #16]
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d002      	beq.n	801a5d4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801a5ce:	6938      	ldr	r0, [r7, #16]
 801a5d0:	f7fb fcd4 	bl	8015f7c <pbuf_free>
  }

  return ERR_MEM;
 801a5d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a5d8:	4618      	mov	r0, r3
 801a5da:	3724      	adds	r7, #36	; 0x24
 801a5dc:	46bd      	mov	sp, r7
 801a5de:	bd90      	pop	{r4, r7, pc}
 801a5e0:	08023b44 	.word	0x08023b44
 801a5e4:	08023ed8 	.word	0x08023ed8
 801a5e8:	08023b98 	.word	0x08023b98
 801a5ec:	08023efc 	.word	0x08023efc
 801a5f0:	08023f20 	.word	0x08023f20
 801a5f4:	08023f30 	.word	0x08023f30
 801a5f8:	08023f40 	.word	0x08023f40

0801a5fc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a5fc:	b590      	push	{r4, r7, lr}
 801a5fe:	b085      	sub	sp, #20
 801a600:	af00      	add	r7, sp, #0
 801a602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	2b00      	cmp	r3, #0
 801a608:	d106      	bne.n	801a618 <tcp_send_fin+0x1c>
 801a60a:	4b21      	ldr	r3, [pc, #132]	; (801a690 <tcp_send_fin+0x94>)
 801a60c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801a610:	4920      	ldr	r1, [pc, #128]	; (801a694 <tcp_send_fin+0x98>)
 801a612:	4821      	ldr	r0, [pc, #132]	; (801a698 <tcp_send_fin+0x9c>)
 801a614:	f006 ff84 	bl	8021520 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d02e      	beq.n	801a67e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a624:	60fb      	str	r3, [r7, #12]
 801a626:	e002      	b.n	801a62e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a628:	68fb      	ldr	r3, [r7, #12]
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a62e:	68fb      	ldr	r3, [r7, #12]
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	2b00      	cmp	r3, #0
 801a634:	d1f8      	bne.n	801a628 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a636:	68fb      	ldr	r3, [r7, #12]
 801a638:	68db      	ldr	r3, [r3, #12]
 801a63a:	899b      	ldrh	r3, [r3, #12]
 801a63c:	b29b      	uxth	r3, r3
 801a63e:	4618      	mov	r0, r3
 801a640:	f7fa f8ce 	bl	80147e0 <lwip_htons>
 801a644:	4603      	mov	r3, r0
 801a646:	b2db      	uxtb	r3, r3
 801a648:	f003 0307 	and.w	r3, r3, #7
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d116      	bne.n	801a67e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a650:	68fb      	ldr	r3, [r7, #12]
 801a652:	68db      	ldr	r3, [r3, #12]
 801a654:	899b      	ldrh	r3, [r3, #12]
 801a656:	b29c      	uxth	r4, r3
 801a658:	2001      	movs	r0, #1
 801a65a:	f7fa f8c1 	bl	80147e0 <lwip_htons>
 801a65e:	4603      	mov	r3, r0
 801a660:	461a      	mov	r2, r3
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	68db      	ldr	r3, [r3, #12]
 801a666:	4322      	orrs	r2, r4
 801a668:	b292      	uxth	r2, r2
 801a66a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	8b5b      	ldrh	r3, [r3, #26]
 801a670:	f043 0320 	orr.w	r3, r3, #32
 801a674:	b29a      	uxth	r2, r3
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a67a:	2300      	movs	r3, #0
 801a67c:	e004      	b.n	801a688 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a67e:	2101      	movs	r1, #1
 801a680:	6878      	ldr	r0, [r7, #4]
 801a682:	f000 f80b 	bl	801a69c <tcp_enqueue_flags>
 801a686:	4603      	mov	r3, r0
}
 801a688:	4618      	mov	r0, r3
 801a68a:	3714      	adds	r7, #20
 801a68c:	46bd      	mov	sp, r7
 801a68e:	bd90      	pop	{r4, r7, pc}
 801a690:	08023b44 	.word	0x08023b44
 801a694:	08023f4c 	.word	0x08023f4c
 801a698:	08023b98 	.word	0x08023b98

0801a69c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a69c:	b580      	push	{r7, lr}
 801a69e:	b08a      	sub	sp, #40	; 0x28
 801a6a0:	af02      	add	r7, sp, #8
 801a6a2:	6078      	str	r0, [r7, #4]
 801a6a4:	460b      	mov	r3, r1
 801a6a6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a6a8:	2300      	movs	r3, #0
 801a6aa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801a6ac:	2300      	movs	r3, #0
 801a6ae:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a6b0:	78fb      	ldrb	r3, [r7, #3]
 801a6b2:	f003 0303 	and.w	r3, r3, #3
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d106      	bne.n	801a6c8 <tcp_enqueue_flags+0x2c>
 801a6ba:	4b67      	ldr	r3, [pc, #412]	; (801a858 <tcp_enqueue_flags+0x1bc>)
 801a6bc:	f240 4212 	movw	r2, #1042	; 0x412
 801a6c0:	4966      	ldr	r1, [pc, #408]	; (801a85c <tcp_enqueue_flags+0x1c0>)
 801a6c2:	4867      	ldr	r0, [pc, #412]	; (801a860 <tcp_enqueue_flags+0x1c4>)
 801a6c4:	f006 ff2c 	bl	8021520 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d106      	bne.n	801a6dc <tcp_enqueue_flags+0x40>
 801a6ce:	4b62      	ldr	r3, [pc, #392]	; (801a858 <tcp_enqueue_flags+0x1bc>)
 801a6d0:	f240 4213 	movw	r2, #1043	; 0x413
 801a6d4:	4963      	ldr	r1, [pc, #396]	; (801a864 <tcp_enqueue_flags+0x1c8>)
 801a6d6:	4862      	ldr	r0, [pc, #392]	; (801a860 <tcp_enqueue_flags+0x1c4>)
 801a6d8:	f006 ff22 	bl	8021520 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a6dc:	78fb      	ldrb	r3, [r7, #3]
 801a6de:	f003 0302 	and.w	r3, r3, #2
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d001      	beq.n	801a6ea <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a6e6:	2301      	movs	r3, #1
 801a6e8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a6ea:	7ffb      	ldrb	r3, [r7, #31]
 801a6ec:	009b      	lsls	r3, r3, #2
 801a6ee:	b2db      	uxtb	r3, r3
 801a6f0:	f003 0304 	and.w	r3, r3, #4
 801a6f4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a6f6:	7dfb      	ldrb	r3, [r7, #23]
 801a6f8:	b29b      	uxth	r3, r3
 801a6fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a6fe:	4619      	mov	r1, r3
 801a700:	2036      	movs	r0, #54	; 0x36
 801a702:	f7fb f95b 	bl	80159bc <pbuf_alloc>
 801a706:	6138      	str	r0, [r7, #16]
 801a708:	693b      	ldr	r3, [r7, #16]
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d109      	bne.n	801a722 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	8b5b      	ldrh	r3, [r3, #26]
 801a712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a716:	b29a      	uxth	r2, r3
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a71c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a720:	e095      	b.n	801a84e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a722:	693b      	ldr	r3, [r7, #16]
 801a724:	895a      	ldrh	r2, [r3, #10]
 801a726:	7dfb      	ldrb	r3, [r7, #23]
 801a728:	b29b      	uxth	r3, r3
 801a72a:	429a      	cmp	r2, r3
 801a72c:	d206      	bcs.n	801a73c <tcp_enqueue_flags+0xa0>
 801a72e:	4b4a      	ldr	r3, [pc, #296]	; (801a858 <tcp_enqueue_flags+0x1bc>)
 801a730:	f240 423a 	movw	r2, #1082	; 0x43a
 801a734:	494c      	ldr	r1, [pc, #304]	; (801a868 <tcp_enqueue_flags+0x1cc>)
 801a736:	484a      	ldr	r0, [pc, #296]	; (801a860 <tcp_enqueue_flags+0x1c4>)
 801a738:	f006 fef2 	bl	8021520 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801a740:	78fa      	ldrb	r2, [r7, #3]
 801a742:	7ffb      	ldrb	r3, [r7, #31]
 801a744:	9300      	str	r3, [sp, #0]
 801a746:	460b      	mov	r3, r1
 801a748:	6939      	ldr	r1, [r7, #16]
 801a74a:	6878      	ldr	r0, [r7, #4]
 801a74c:	f7ff fd70 	bl	801a230 <tcp_create_segment>
 801a750:	60f8      	str	r0, [r7, #12]
 801a752:	68fb      	ldr	r3, [r7, #12]
 801a754:	2b00      	cmp	r3, #0
 801a756:	d109      	bne.n	801a76c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	8b5b      	ldrh	r3, [r3, #26]
 801a75c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a760:	b29a      	uxth	r2, r3
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a76a:	e070      	b.n	801a84e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a76c:	68fb      	ldr	r3, [r7, #12]
 801a76e:	68db      	ldr	r3, [r3, #12]
 801a770:	f003 0303 	and.w	r3, r3, #3
 801a774:	2b00      	cmp	r3, #0
 801a776:	d006      	beq.n	801a786 <tcp_enqueue_flags+0xea>
 801a778:	4b37      	ldr	r3, [pc, #220]	; (801a858 <tcp_enqueue_flags+0x1bc>)
 801a77a:	f240 4242 	movw	r2, #1090	; 0x442
 801a77e:	493b      	ldr	r1, [pc, #236]	; (801a86c <tcp_enqueue_flags+0x1d0>)
 801a780:	4837      	ldr	r0, [pc, #220]	; (801a860 <tcp_enqueue_flags+0x1c4>)
 801a782:	f006 fecd 	bl	8021520 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a786:	68fb      	ldr	r3, [r7, #12]
 801a788:	891b      	ldrh	r3, [r3, #8]
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d006      	beq.n	801a79c <tcp_enqueue_flags+0x100>
 801a78e:	4b32      	ldr	r3, [pc, #200]	; (801a858 <tcp_enqueue_flags+0x1bc>)
 801a790:	f240 4243 	movw	r2, #1091	; 0x443
 801a794:	4936      	ldr	r1, [pc, #216]	; (801a870 <tcp_enqueue_flags+0x1d4>)
 801a796:	4832      	ldr	r0, [pc, #200]	; (801a860 <tcp_enqueue_flags+0x1c4>)
 801a798:	f006 fec2 	bl	8021520 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d103      	bne.n	801a7ac <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	68fa      	ldr	r2, [r7, #12]
 801a7a8:	66da      	str	r2, [r3, #108]	; 0x6c
 801a7aa:	e00d      	b.n	801a7c8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a7b0:	61bb      	str	r3, [r7, #24]
 801a7b2:	e002      	b.n	801a7ba <tcp_enqueue_flags+0x11e>
 801a7b4:	69bb      	ldr	r3, [r7, #24]
 801a7b6:	681b      	ldr	r3, [r3, #0]
 801a7b8:	61bb      	str	r3, [r7, #24]
 801a7ba:	69bb      	ldr	r3, [r7, #24]
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d1f8      	bne.n	801a7b4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801a7c2:	69bb      	ldr	r3, [r7, #24]
 801a7c4:	68fa      	ldr	r2, [r7, #12]
 801a7c6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	2200      	movs	r2, #0
 801a7cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a7d0:	78fb      	ldrb	r3, [r7, #3]
 801a7d2:	f003 0302 	and.w	r3, r3, #2
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d104      	bne.n	801a7e4 <tcp_enqueue_flags+0x148>
 801a7da:	78fb      	ldrb	r3, [r7, #3]
 801a7dc:	f003 0301 	and.w	r3, r3, #1
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	d004      	beq.n	801a7ee <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a7e8:	1c5a      	adds	r2, r3, #1
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801a7ee:	78fb      	ldrb	r3, [r7, #3]
 801a7f0:	f003 0301 	and.w	r3, r3, #1
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d006      	beq.n	801a806 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	8b5b      	ldrh	r3, [r3, #26]
 801a7fc:	f043 0320 	orr.w	r3, r3, #32
 801a800:	b29a      	uxth	r2, r3
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a806:	68fb      	ldr	r3, [r7, #12]
 801a808:	685b      	ldr	r3, [r3, #4]
 801a80a:	4618      	mov	r0, r3
 801a80c:	f7fb fc44 	bl	8016098 <pbuf_clen>
 801a810:	4603      	mov	r3, r0
 801a812:	461a      	mov	r2, r3
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a81a:	4413      	add	r3, r2
 801a81c:	b29a      	uxth	r2, r3
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d00e      	beq.n	801a84c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a832:	2b00      	cmp	r3, #0
 801a834:	d10a      	bne.n	801a84c <tcp_enqueue_flags+0x1b0>
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d106      	bne.n	801a84c <tcp_enqueue_flags+0x1b0>
 801a83e:	4b06      	ldr	r3, [pc, #24]	; (801a858 <tcp_enqueue_flags+0x1bc>)
 801a840:	f240 4266 	movw	r2, #1126	; 0x466
 801a844:	490b      	ldr	r1, [pc, #44]	; (801a874 <tcp_enqueue_flags+0x1d8>)
 801a846:	4806      	ldr	r0, [pc, #24]	; (801a860 <tcp_enqueue_flags+0x1c4>)
 801a848:	f006 fe6a 	bl	8021520 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801a84c:	2300      	movs	r3, #0
}
 801a84e:	4618      	mov	r0, r3
 801a850:	3720      	adds	r7, #32
 801a852:	46bd      	mov	sp, r7
 801a854:	bd80      	pop	{r7, pc}
 801a856:	bf00      	nop
 801a858:	08023b44 	.word	0x08023b44
 801a85c:	08023f68 	.word	0x08023f68
 801a860:	08023b98 	.word	0x08023b98
 801a864:	08023fc0 	.word	0x08023fc0
 801a868:	08023fe0 	.word	0x08023fe0
 801a86c:	0802401c 	.word	0x0802401c
 801a870:	08024034 	.word	0x08024034
 801a874:	08024060 	.word	0x08024060

0801a878 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801a878:	b5b0      	push	{r4, r5, r7, lr}
 801a87a:	b08a      	sub	sp, #40	; 0x28
 801a87c:	af00      	add	r7, sp, #0
 801a87e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	2b00      	cmp	r3, #0
 801a884:	d106      	bne.n	801a894 <tcp_output+0x1c>
 801a886:	4ba0      	ldr	r3, [pc, #640]	; (801ab08 <tcp_output+0x290>)
 801a888:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801a88c:	499f      	ldr	r1, [pc, #636]	; (801ab0c <tcp_output+0x294>)
 801a88e:	48a0      	ldr	r0, [pc, #640]	; (801ab10 <tcp_output+0x298>)
 801a890:	f006 fe46 	bl	8021520 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	7d1b      	ldrb	r3, [r3, #20]
 801a898:	2b01      	cmp	r3, #1
 801a89a:	d106      	bne.n	801a8aa <tcp_output+0x32>
 801a89c:	4b9a      	ldr	r3, [pc, #616]	; (801ab08 <tcp_output+0x290>)
 801a89e:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801a8a2:	499c      	ldr	r1, [pc, #624]	; (801ab14 <tcp_output+0x29c>)
 801a8a4:	489a      	ldr	r0, [pc, #616]	; (801ab10 <tcp_output+0x298>)
 801a8a6:	f006 fe3b 	bl	8021520 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801a8aa:	4b9b      	ldr	r3, [pc, #620]	; (801ab18 <tcp_output+0x2a0>)
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	687a      	ldr	r2, [r7, #4]
 801a8b0:	429a      	cmp	r2, r3
 801a8b2:	d101      	bne.n	801a8b8 <tcp_output+0x40>
    return ERR_OK;
 801a8b4:	2300      	movs	r3, #0
 801a8b6:	e1d2      	b.n	801ac5e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a8c4:	429a      	cmp	r2, r3
 801a8c6:	d203      	bcs.n	801a8d0 <tcp_output+0x58>
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a8ce:	e002      	b.n	801a8d6 <tcp_output+0x5e>
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a8d6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a8dc:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801a8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	d10b      	bne.n	801a8fc <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	8b5b      	ldrh	r3, [r3, #26]
 801a8e8:	f003 0302 	and.w	r3, r3, #2
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	f000 81a9 	beq.w	801ac44 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801a8f2:	6878      	ldr	r0, [r7, #4]
 801a8f4:	f000 fdd8 	bl	801b4a8 <tcp_send_empty_ack>
 801a8f8:	4603      	mov	r3, r0
 801a8fa:	e1b0      	b.n	801ac5e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801a8fc:	6879      	ldr	r1, [r7, #4]
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	3304      	adds	r3, #4
 801a902:	461a      	mov	r2, r3
 801a904:	6878      	ldr	r0, [r7, #4]
 801a906:	f7ff fc77 	bl	801a1f8 <tcp_route>
 801a90a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801a90c:	697b      	ldr	r3, [r7, #20]
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d102      	bne.n	801a918 <tcp_output+0xa0>
    return ERR_RTE;
 801a912:	f06f 0303 	mvn.w	r3, #3
 801a916:	e1a2      	b.n	801ac5e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	d003      	beq.n	801a926 <tcp_output+0xae>
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	681b      	ldr	r3, [r3, #0]
 801a922:	2b00      	cmp	r3, #0
 801a924:	d111      	bne.n	801a94a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801a926:	697b      	ldr	r3, [r7, #20]
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d002      	beq.n	801a932 <tcp_output+0xba>
 801a92c:	697b      	ldr	r3, [r7, #20]
 801a92e:	3304      	adds	r3, #4
 801a930:	e000      	b.n	801a934 <tcp_output+0xbc>
 801a932:	2300      	movs	r3, #0
 801a934:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801a936:	693b      	ldr	r3, [r7, #16]
 801a938:	2b00      	cmp	r3, #0
 801a93a:	d102      	bne.n	801a942 <tcp_output+0xca>
      return ERR_RTE;
 801a93c:	f06f 0303 	mvn.w	r3, #3
 801a940:	e18d      	b.n	801ac5e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a942:	693b      	ldr	r3, [r7, #16]
 801a944:	681a      	ldr	r2, [r3, #0]
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a94c:	68db      	ldr	r3, [r3, #12]
 801a94e:	685b      	ldr	r3, [r3, #4]
 801a950:	4618      	mov	r0, r3
 801a952:	f7f9 ff5a 	bl	801480a <lwip_htonl>
 801a956:	4602      	mov	r2, r0
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a95c:	1ad3      	subs	r3, r2, r3
 801a95e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a960:	8912      	ldrh	r2, [r2, #8]
 801a962:	4413      	add	r3, r2
 801a964:	69ba      	ldr	r2, [r7, #24]
 801a966:	429a      	cmp	r2, r3
 801a968:	d227      	bcs.n	801a9ba <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a970:	461a      	mov	r2, r3
 801a972:	69bb      	ldr	r3, [r7, #24]
 801a974:	4293      	cmp	r3, r2
 801a976:	d114      	bne.n	801a9a2 <tcp_output+0x12a>
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d110      	bne.n	801a9a2 <tcp_output+0x12a>
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a986:	2b00      	cmp	r3, #0
 801a988:	d10b      	bne.n	801a9a2 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	2200      	movs	r2, #0
 801a98e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	2201      	movs	r2, #1
 801a996:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	2200      	movs	r2, #0
 801a99e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	8b5b      	ldrh	r3, [r3, #26]
 801a9a6:	f003 0302 	and.w	r3, r3, #2
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	f000 814c 	beq.w	801ac48 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801a9b0:	6878      	ldr	r0, [r7, #4]
 801a9b2:	f000 fd79 	bl	801b4a8 <tcp_send_empty_ack>
 801a9b6:	4603      	mov	r3, r0
 801a9b8:	e151      	b.n	801ac5e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	2200      	movs	r2, #0
 801a9be:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a9c6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801a9c8:	6a3b      	ldr	r3, [r7, #32]
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	f000 811b 	beq.w	801ac06 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801a9d0:	e002      	b.n	801a9d8 <tcp_output+0x160>
 801a9d2:	6a3b      	ldr	r3, [r7, #32]
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	623b      	str	r3, [r7, #32]
 801a9d8:	6a3b      	ldr	r3, [r7, #32]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d1f8      	bne.n	801a9d2 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801a9e0:	e111      	b.n	801ac06 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9e4:	68db      	ldr	r3, [r3, #12]
 801a9e6:	899b      	ldrh	r3, [r3, #12]
 801a9e8:	b29b      	uxth	r3, r3
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	f7f9 fef8 	bl	80147e0 <lwip_htons>
 801a9f0:	4603      	mov	r3, r0
 801a9f2:	b2db      	uxtb	r3, r3
 801a9f4:	f003 0304 	and.w	r3, r3, #4
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d006      	beq.n	801aa0a <tcp_output+0x192>
 801a9fc:	4b42      	ldr	r3, [pc, #264]	; (801ab08 <tcp_output+0x290>)
 801a9fe:	f240 5237 	movw	r2, #1335	; 0x537
 801aa02:	4946      	ldr	r1, [pc, #280]	; (801ab1c <tcp_output+0x2a4>)
 801aa04:	4842      	ldr	r0, [pc, #264]	; (801ab10 <tcp_output+0x298>)
 801aa06:	f006 fd8b 	bl	8021520 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d01f      	beq.n	801aa52 <tcp_output+0x1da>
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	8b5b      	ldrh	r3, [r3, #26]
 801aa16:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d119      	bne.n	801aa52 <tcp_output+0x1da>
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d00b      	beq.n	801aa3e <tcp_output+0x1c6>
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d110      	bne.n	801aa52 <tcp_output+0x1da>
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa34:	891a      	ldrh	r2, [r3, #8]
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aa3a:	429a      	cmp	r2, r3
 801aa3c:	d209      	bcs.n	801aa52 <tcp_output+0x1da>
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	d004      	beq.n	801aa52 <tcp_output+0x1da>
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aa4e:	2b08      	cmp	r3, #8
 801aa50:	d901      	bls.n	801aa56 <tcp_output+0x1de>
 801aa52:	2301      	movs	r3, #1
 801aa54:	e000      	b.n	801aa58 <tcp_output+0x1e0>
 801aa56:	2300      	movs	r3, #0
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	d106      	bne.n	801aa6a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	8b5b      	ldrh	r3, [r3, #26]
 801aa60:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	f000 80e3 	beq.w	801ac30 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	7d1b      	ldrb	r3, [r3, #20]
 801aa6e:	2b02      	cmp	r3, #2
 801aa70:	d00d      	beq.n	801aa8e <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801aa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa74:	68db      	ldr	r3, [r3, #12]
 801aa76:	899b      	ldrh	r3, [r3, #12]
 801aa78:	b29c      	uxth	r4, r3
 801aa7a:	2010      	movs	r0, #16
 801aa7c:	f7f9 feb0 	bl	80147e0 <lwip_htons>
 801aa80:	4603      	mov	r3, r0
 801aa82:	461a      	mov	r2, r3
 801aa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa86:	68db      	ldr	r3, [r3, #12]
 801aa88:	4322      	orrs	r2, r4
 801aa8a:	b292      	uxth	r2, r2
 801aa8c:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801aa8e:	697a      	ldr	r2, [r7, #20]
 801aa90:	6879      	ldr	r1, [r7, #4]
 801aa92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aa94:	f000 f908 	bl	801aca8 <tcp_output_segment>
 801aa98:	4603      	mov	r3, r0
 801aa9a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801aa9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d009      	beq.n	801aab8 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	8b5b      	ldrh	r3, [r3, #26]
 801aaa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aaac:	b29a      	uxth	r2, r3
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	835a      	strh	r2, [r3, #26]
      return err;
 801aab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aab6:	e0d2      	b.n	801ac5e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801aab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaba:	681a      	ldr	r2, [r3, #0]
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	7d1b      	ldrb	r3, [r3, #20]
 801aac4:	2b02      	cmp	r3, #2
 801aac6:	d006      	beq.n	801aad6 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	8b5b      	ldrh	r3, [r3, #26]
 801aacc:	f023 0303 	bic.w	r3, r3, #3
 801aad0:	b29a      	uxth	r2, r3
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801aad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aad8:	68db      	ldr	r3, [r3, #12]
 801aada:	685b      	ldr	r3, [r3, #4]
 801aadc:	4618      	mov	r0, r3
 801aade:	f7f9 fe94 	bl	801480a <lwip_htonl>
 801aae2:	4604      	mov	r4, r0
 801aae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aae6:	891b      	ldrh	r3, [r3, #8]
 801aae8:	461d      	mov	r5, r3
 801aaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaec:	68db      	ldr	r3, [r3, #12]
 801aaee:	899b      	ldrh	r3, [r3, #12]
 801aaf0:	b29b      	uxth	r3, r3
 801aaf2:	4618      	mov	r0, r3
 801aaf4:	f7f9 fe74 	bl	80147e0 <lwip_htons>
 801aaf8:	4603      	mov	r3, r0
 801aafa:	b2db      	uxtb	r3, r3
 801aafc:	f003 0303 	and.w	r3, r3, #3
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d00d      	beq.n	801ab20 <tcp_output+0x2a8>
 801ab04:	2301      	movs	r3, #1
 801ab06:	e00c      	b.n	801ab22 <tcp_output+0x2aa>
 801ab08:	08023b44 	.word	0x08023b44
 801ab0c:	08024088 	.word	0x08024088
 801ab10:	08023b98 	.word	0x08023b98
 801ab14:	080240a0 	.word	0x080240a0
 801ab18:	20010348 	.word	0x20010348
 801ab1c:	080240c8 	.word	0x080240c8
 801ab20:	2300      	movs	r3, #0
 801ab22:	442b      	add	r3, r5
 801ab24:	4423      	add	r3, r4
 801ab26:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ab2c:	68bb      	ldr	r3, [r7, #8]
 801ab2e:	1ad3      	subs	r3, r2, r3
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	da02      	bge.n	801ab3a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	68ba      	ldr	r2, [r7, #8]
 801ab38:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab3c:	891b      	ldrh	r3, [r3, #8]
 801ab3e:	461c      	mov	r4, r3
 801ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab42:	68db      	ldr	r3, [r3, #12]
 801ab44:	899b      	ldrh	r3, [r3, #12]
 801ab46:	b29b      	uxth	r3, r3
 801ab48:	4618      	mov	r0, r3
 801ab4a:	f7f9 fe49 	bl	80147e0 <lwip_htons>
 801ab4e:	4603      	mov	r3, r0
 801ab50:	b2db      	uxtb	r3, r3
 801ab52:	f003 0303 	and.w	r3, r3, #3
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d001      	beq.n	801ab5e <tcp_output+0x2e6>
 801ab5a:	2301      	movs	r3, #1
 801ab5c:	e000      	b.n	801ab60 <tcp_output+0x2e8>
 801ab5e:	2300      	movs	r3, #0
 801ab60:	4423      	add	r3, r4
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	d049      	beq.n	801abfa <tcp_output+0x382>
      seg->next = NULL;
 801ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab68:	2200      	movs	r2, #0
 801ab6a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d105      	bne.n	801ab80 <tcp_output+0x308>
        pcb->unacked = seg;
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab78:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801ab7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab7c:	623b      	str	r3, [r7, #32]
 801ab7e:	e03f      	b.n	801ac00 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801ab80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab82:	68db      	ldr	r3, [r3, #12]
 801ab84:	685b      	ldr	r3, [r3, #4]
 801ab86:	4618      	mov	r0, r3
 801ab88:	f7f9 fe3f 	bl	801480a <lwip_htonl>
 801ab8c:	4604      	mov	r4, r0
 801ab8e:	6a3b      	ldr	r3, [r7, #32]
 801ab90:	68db      	ldr	r3, [r3, #12]
 801ab92:	685b      	ldr	r3, [r3, #4]
 801ab94:	4618      	mov	r0, r3
 801ab96:	f7f9 fe38 	bl	801480a <lwip_htonl>
 801ab9a:	4603      	mov	r3, r0
 801ab9c:	1ae3      	subs	r3, r4, r3
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	da24      	bge.n	801abec <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	3370      	adds	r3, #112	; 0x70
 801aba6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801aba8:	e002      	b.n	801abb0 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801abaa:	69fb      	ldr	r3, [r7, #28]
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801abb0:	69fb      	ldr	r3, [r7, #28]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d011      	beq.n	801abdc <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801abb8:	69fb      	ldr	r3, [r7, #28]
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	68db      	ldr	r3, [r3, #12]
 801abbe:	685b      	ldr	r3, [r3, #4]
 801abc0:	4618      	mov	r0, r3
 801abc2:	f7f9 fe22 	bl	801480a <lwip_htonl>
 801abc6:	4604      	mov	r4, r0
 801abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abca:	68db      	ldr	r3, [r3, #12]
 801abcc:	685b      	ldr	r3, [r3, #4]
 801abce:	4618      	mov	r0, r3
 801abd0:	f7f9 fe1b 	bl	801480a <lwip_htonl>
 801abd4:	4603      	mov	r3, r0
 801abd6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801abd8:	2b00      	cmp	r3, #0
 801abda:	dbe6      	blt.n	801abaa <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 801abdc:	69fb      	ldr	r3, [r7, #28]
 801abde:	681a      	ldr	r2, [r3, #0]
 801abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abe2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801abe4:	69fb      	ldr	r3, [r7, #28]
 801abe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801abe8:	601a      	str	r2, [r3, #0]
 801abea:	e009      	b.n	801ac00 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801abec:	6a3b      	ldr	r3, [r7, #32]
 801abee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801abf0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801abf2:	6a3b      	ldr	r3, [r7, #32]
 801abf4:	681b      	ldr	r3, [r3, #0]
 801abf6:	623b      	str	r3, [r7, #32]
 801abf8:	e002      	b.n	801ac00 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801abfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801abfc:	f7fc fc42 	bl	8017484 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac04:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801ac06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d012      	beq.n	801ac32 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac0e:	68db      	ldr	r3, [r3, #12]
 801ac10:	685b      	ldr	r3, [r3, #4]
 801ac12:	4618      	mov	r0, r3
 801ac14:	f7f9 fdf9 	bl	801480a <lwip_htonl>
 801ac18:	4602      	mov	r2, r0
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ac1e:	1ad3      	subs	r3, r2, r3
 801ac20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ac22:	8912      	ldrh	r2, [r2, #8]
 801ac24:	4413      	add	r3, r2
  while (seg != NULL &&
 801ac26:	69ba      	ldr	r2, [r7, #24]
 801ac28:	429a      	cmp	r2, r3
 801ac2a:	f4bf aeda 	bcs.w	801a9e2 <tcp_output+0x16a>
 801ac2e:	e000      	b.n	801ac32 <tcp_output+0x3ba>
      break;
 801ac30:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d108      	bne.n	801ac4c <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	2200      	movs	r2, #0
 801ac3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801ac42:	e004      	b.n	801ac4e <tcp_output+0x3d6>
    goto output_done;
 801ac44:	bf00      	nop
 801ac46:	e002      	b.n	801ac4e <tcp_output+0x3d6>
    goto output_done;
 801ac48:	bf00      	nop
 801ac4a:	e000      	b.n	801ac4e <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801ac4c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	8b5b      	ldrh	r3, [r3, #26]
 801ac52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ac56:	b29a      	uxth	r2, r3
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801ac5c:	2300      	movs	r3, #0
}
 801ac5e:	4618      	mov	r0, r3
 801ac60:	3728      	adds	r7, #40	; 0x28
 801ac62:	46bd      	mov	sp, r7
 801ac64:	bdb0      	pop	{r4, r5, r7, pc}
 801ac66:	bf00      	nop

0801ac68 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801ac68:	b580      	push	{r7, lr}
 801ac6a:	b082      	sub	sp, #8
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d106      	bne.n	801ac84 <tcp_output_segment_busy+0x1c>
 801ac76:	4b09      	ldr	r3, [pc, #36]	; (801ac9c <tcp_output_segment_busy+0x34>)
 801ac78:	f240 529a 	movw	r2, #1434	; 0x59a
 801ac7c:	4908      	ldr	r1, [pc, #32]	; (801aca0 <tcp_output_segment_busy+0x38>)
 801ac7e:	4809      	ldr	r0, [pc, #36]	; (801aca4 <tcp_output_segment_busy+0x3c>)
 801ac80:	f006 fc4e 	bl	8021520 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	685b      	ldr	r3, [r3, #4]
 801ac88:	7b9b      	ldrb	r3, [r3, #14]
 801ac8a:	2b01      	cmp	r3, #1
 801ac8c:	d001      	beq.n	801ac92 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801ac8e:	2301      	movs	r3, #1
 801ac90:	e000      	b.n	801ac94 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801ac92:	2300      	movs	r3, #0
}
 801ac94:	4618      	mov	r0, r3
 801ac96:	3708      	adds	r7, #8
 801ac98:	46bd      	mov	sp, r7
 801ac9a:	bd80      	pop	{r7, pc}
 801ac9c:	08023b44 	.word	0x08023b44
 801aca0:	080240e0 	.word	0x080240e0
 801aca4:	08023b98 	.word	0x08023b98

0801aca8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801aca8:	b5b0      	push	{r4, r5, r7, lr}
 801acaa:	b08c      	sub	sp, #48	; 0x30
 801acac:	af04      	add	r7, sp, #16
 801acae:	60f8      	str	r0, [r7, #12]
 801acb0:	60b9      	str	r1, [r7, #8]
 801acb2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801acb4:	68fb      	ldr	r3, [r7, #12]
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d106      	bne.n	801acc8 <tcp_output_segment+0x20>
 801acba:	4b64      	ldr	r3, [pc, #400]	; (801ae4c <tcp_output_segment+0x1a4>)
 801acbc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801acc0:	4963      	ldr	r1, [pc, #396]	; (801ae50 <tcp_output_segment+0x1a8>)
 801acc2:	4864      	ldr	r0, [pc, #400]	; (801ae54 <tcp_output_segment+0x1ac>)
 801acc4:	f006 fc2c 	bl	8021520 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801acc8:	68bb      	ldr	r3, [r7, #8]
 801acca:	2b00      	cmp	r3, #0
 801accc:	d106      	bne.n	801acdc <tcp_output_segment+0x34>
 801acce:	4b5f      	ldr	r3, [pc, #380]	; (801ae4c <tcp_output_segment+0x1a4>)
 801acd0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801acd4:	4960      	ldr	r1, [pc, #384]	; (801ae58 <tcp_output_segment+0x1b0>)
 801acd6:	485f      	ldr	r0, [pc, #380]	; (801ae54 <tcp_output_segment+0x1ac>)
 801acd8:	f006 fc22 	bl	8021520 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d106      	bne.n	801acf0 <tcp_output_segment+0x48>
 801ace2:	4b5a      	ldr	r3, [pc, #360]	; (801ae4c <tcp_output_segment+0x1a4>)
 801ace4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801ace8:	495c      	ldr	r1, [pc, #368]	; (801ae5c <tcp_output_segment+0x1b4>)
 801acea:	485a      	ldr	r0, [pc, #360]	; (801ae54 <tcp_output_segment+0x1ac>)
 801acec:	f006 fc18 	bl	8021520 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801acf0:	68f8      	ldr	r0, [r7, #12]
 801acf2:	f7ff ffb9 	bl	801ac68 <tcp_output_segment_busy>
 801acf6:	4603      	mov	r3, r0
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	d001      	beq.n	801ad00 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801acfc:	2300      	movs	r3, #0
 801acfe:	e0a0      	b.n	801ae42 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801ad00:	68bb      	ldr	r3, [r7, #8]
 801ad02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ad04:	68fb      	ldr	r3, [r7, #12]
 801ad06:	68dc      	ldr	r4, [r3, #12]
 801ad08:	4610      	mov	r0, r2
 801ad0a:	f7f9 fd7e 	bl	801480a <lwip_htonl>
 801ad0e:	4603      	mov	r3, r0
 801ad10:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801ad12:	68bb      	ldr	r3, [r7, #8]
 801ad14:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	68dc      	ldr	r4, [r3, #12]
 801ad1a:	4610      	mov	r0, r2
 801ad1c:	f7f9 fd60 	bl	80147e0 <lwip_htons>
 801ad20:	4603      	mov	r3, r0
 801ad22:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ad24:	68bb      	ldr	r3, [r7, #8]
 801ad26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad28:	68ba      	ldr	r2, [r7, #8]
 801ad2a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801ad2c:	441a      	add	r2, r3
 801ad2e:	68bb      	ldr	r3, [r7, #8]
 801ad30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	68db      	ldr	r3, [r3, #12]
 801ad36:	3314      	adds	r3, #20
 801ad38:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801ad3a:	68fb      	ldr	r3, [r7, #12]
 801ad3c:	7a9b      	ldrb	r3, [r3, #10]
 801ad3e:	f003 0301 	and.w	r3, r3, #1
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d015      	beq.n	801ad72 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801ad46:	68bb      	ldr	r3, [r7, #8]
 801ad48:	3304      	adds	r3, #4
 801ad4a:	461a      	mov	r2, r3
 801ad4c:	6879      	ldr	r1, [r7, #4]
 801ad4e:	f44f 7006 	mov.w	r0, #536	; 0x218
 801ad52:	f7fc fe8d 	bl	8017a70 <tcp_eff_send_mss_netif>
 801ad56:	4603      	mov	r3, r0
 801ad58:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801ad5a:	8b7b      	ldrh	r3, [r7, #26]
 801ad5c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801ad60:	4618      	mov	r0, r3
 801ad62:	f7f9 fd52 	bl	801480a <lwip_htonl>
 801ad66:	4602      	mov	r2, r0
 801ad68:	69fb      	ldr	r3, [r7, #28]
 801ad6a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801ad6c:	69fb      	ldr	r3, [r7, #28]
 801ad6e:	3304      	adds	r3, #4
 801ad70:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801ad72:	68bb      	ldr	r3, [r7, #8]
 801ad74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	da02      	bge.n	801ad82 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801ad7c:	68bb      	ldr	r3, [r7, #8]
 801ad7e:	2200      	movs	r2, #0
 801ad80:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801ad82:	68bb      	ldr	r3, [r7, #8]
 801ad84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d10c      	bne.n	801ada4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801ad8a:	4b35      	ldr	r3, [pc, #212]	; (801ae60 <tcp_output_segment+0x1b8>)
 801ad8c:	681a      	ldr	r2, [r3, #0]
 801ad8e:	68bb      	ldr	r3, [r7, #8]
 801ad90:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801ad92:	68fb      	ldr	r3, [r7, #12]
 801ad94:	68db      	ldr	r3, [r3, #12]
 801ad96:	685b      	ldr	r3, [r3, #4]
 801ad98:	4618      	mov	r0, r3
 801ad9a:	f7f9 fd36 	bl	801480a <lwip_htonl>
 801ad9e:	4602      	mov	r2, r0
 801ada0:	68bb      	ldr	r3, [r7, #8]
 801ada2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801ada4:	68fb      	ldr	r3, [r7, #12]
 801ada6:	68db      	ldr	r3, [r3, #12]
 801ada8:	461a      	mov	r2, r3
 801adaa:	68fb      	ldr	r3, [r7, #12]
 801adac:	685b      	ldr	r3, [r3, #4]
 801adae:	685b      	ldr	r3, [r3, #4]
 801adb0:	1ad3      	subs	r3, r2, r3
 801adb2:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	685b      	ldr	r3, [r3, #4]
 801adb8:	8959      	ldrh	r1, [r3, #10]
 801adba:	68fb      	ldr	r3, [r7, #12]
 801adbc:	685b      	ldr	r3, [r3, #4]
 801adbe:	8b3a      	ldrh	r2, [r7, #24]
 801adc0:	1a8a      	subs	r2, r1, r2
 801adc2:	b292      	uxth	r2, r2
 801adc4:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801adc6:	68fb      	ldr	r3, [r7, #12]
 801adc8:	685b      	ldr	r3, [r3, #4]
 801adca:	8919      	ldrh	r1, [r3, #8]
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	685b      	ldr	r3, [r3, #4]
 801add0:	8b3a      	ldrh	r2, [r7, #24]
 801add2:	1a8a      	subs	r2, r1, r2
 801add4:	b292      	uxth	r2, r2
 801add6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801add8:	68fb      	ldr	r3, [r7, #12]
 801adda:	685b      	ldr	r3, [r3, #4]
 801addc:	68fa      	ldr	r2, [r7, #12]
 801adde:	68d2      	ldr	r2, [r2, #12]
 801ade0:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801ade2:	68fb      	ldr	r3, [r7, #12]
 801ade4:	68db      	ldr	r3, [r3, #12]
 801ade6:	2200      	movs	r2, #0
 801ade8:	741a      	strb	r2, [r3, #16]
 801adea:	2200      	movs	r2, #0
 801adec:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801adee:	68fb      	ldr	r3, [r7, #12]
 801adf0:	68db      	ldr	r3, [r3, #12]
 801adf2:	f103 0214 	add.w	r2, r3, #20
 801adf6:	68fb      	ldr	r3, [r7, #12]
 801adf8:	7a9b      	ldrb	r3, [r3, #10]
 801adfa:	009b      	lsls	r3, r3, #2
 801adfc:	f003 0304 	and.w	r3, r3, #4
 801ae00:	4413      	add	r3, r2
 801ae02:	69fa      	ldr	r2, [r7, #28]
 801ae04:	429a      	cmp	r2, r3
 801ae06:	d006      	beq.n	801ae16 <tcp_output_segment+0x16e>
 801ae08:	4b10      	ldr	r3, [pc, #64]	; (801ae4c <tcp_output_segment+0x1a4>)
 801ae0a:	f240 621c 	movw	r2, #1564	; 0x61c
 801ae0e:	4915      	ldr	r1, [pc, #84]	; (801ae64 <tcp_output_segment+0x1bc>)
 801ae10:	4810      	ldr	r0, [pc, #64]	; (801ae54 <tcp_output_segment+0x1ac>)
 801ae12:	f006 fb85 	bl	8021520 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801ae16:	68fb      	ldr	r3, [r7, #12]
 801ae18:	6858      	ldr	r0, [r3, #4]
 801ae1a:	68b9      	ldr	r1, [r7, #8]
 801ae1c:	68bb      	ldr	r3, [r7, #8]
 801ae1e:	1d1c      	adds	r4, r3, #4
 801ae20:	68bb      	ldr	r3, [r7, #8]
 801ae22:	7add      	ldrb	r5, [r3, #11]
 801ae24:	68bb      	ldr	r3, [r7, #8]
 801ae26:	7a9b      	ldrb	r3, [r3, #10]
 801ae28:	687a      	ldr	r2, [r7, #4]
 801ae2a:	9202      	str	r2, [sp, #8]
 801ae2c:	2206      	movs	r2, #6
 801ae2e:	9201      	str	r2, [sp, #4]
 801ae30:	9300      	str	r3, [sp, #0]
 801ae32:	462b      	mov	r3, r5
 801ae34:	4622      	mov	r2, r4
 801ae36:	f004 fc37 	bl	801f6a8 <ip4_output_if>
 801ae3a:	4603      	mov	r3, r0
 801ae3c:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801ae3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ae42:	4618      	mov	r0, r3
 801ae44:	3720      	adds	r7, #32
 801ae46:	46bd      	mov	sp, r7
 801ae48:	bdb0      	pop	{r4, r5, r7, pc}
 801ae4a:	bf00      	nop
 801ae4c:	08023b44 	.word	0x08023b44
 801ae50:	08024108 	.word	0x08024108
 801ae54:	08023b98 	.word	0x08023b98
 801ae58:	08024128 	.word	0x08024128
 801ae5c:	08024148 	.word	0x08024148
 801ae60:	20010338 	.word	0x20010338
 801ae64:	0802416c 	.word	0x0802416c

0801ae68 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801ae68:	b5b0      	push	{r4, r5, r7, lr}
 801ae6a:	b084      	sub	sp, #16
 801ae6c:	af00      	add	r7, sp, #0
 801ae6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d106      	bne.n	801ae84 <tcp_rexmit_rto_prepare+0x1c>
 801ae76:	4b31      	ldr	r3, [pc, #196]	; (801af3c <tcp_rexmit_rto_prepare+0xd4>)
 801ae78:	f240 6263 	movw	r2, #1635	; 0x663
 801ae7c:	4930      	ldr	r1, [pc, #192]	; (801af40 <tcp_rexmit_rto_prepare+0xd8>)
 801ae7e:	4831      	ldr	r0, [pc, #196]	; (801af44 <tcp_rexmit_rto_prepare+0xdc>)
 801ae80:	f006 fb4e 	bl	8021520 <iprintf>

  if (pcb->unacked == NULL) {
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d102      	bne.n	801ae92 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801ae8c:	f06f 0305 	mvn.w	r3, #5
 801ae90:	e050      	b.n	801af34 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ae96:	60fb      	str	r3, [r7, #12]
 801ae98:	e00b      	b.n	801aeb2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801ae9a:	68f8      	ldr	r0, [r7, #12]
 801ae9c:	f7ff fee4 	bl	801ac68 <tcp_output_segment_busy>
 801aea0:	4603      	mov	r3, r0
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d002      	beq.n	801aeac <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801aea6:	f06f 0305 	mvn.w	r3, #5
 801aeaa:	e043      	b.n	801af34 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	681b      	ldr	r3, [r3, #0]
 801aeb0:	60fb      	str	r3, [r7, #12]
 801aeb2:	68fb      	ldr	r3, [r7, #12]
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d1ef      	bne.n	801ae9a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801aeba:	68f8      	ldr	r0, [r7, #12]
 801aebc:	f7ff fed4 	bl	801ac68 <tcp_output_segment_busy>
 801aec0:	4603      	mov	r3, r0
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d002      	beq.n	801aecc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801aec6:	f06f 0305 	mvn.w	r3, #5
 801aeca:	e033      	b.n	801af34 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801aed0:	68fb      	ldr	r3, [r7, #12]
 801aed2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	2200      	movs	r2, #0
 801aee0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	8b5b      	ldrh	r3, [r3, #26]
 801aee6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801aeea:	b29a      	uxth	r2, r3
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801aef0:	68fb      	ldr	r3, [r7, #12]
 801aef2:	68db      	ldr	r3, [r3, #12]
 801aef4:	685b      	ldr	r3, [r3, #4]
 801aef6:	4618      	mov	r0, r3
 801aef8:	f7f9 fc87 	bl	801480a <lwip_htonl>
 801aefc:	4604      	mov	r4, r0
 801aefe:	68fb      	ldr	r3, [r7, #12]
 801af00:	891b      	ldrh	r3, [r3, #8]
 801af02:	461d      	mov	r5, r3
 801af04:	68fb      	ldr	r3, [r7, #12]
 801af06:	68db      	ldr	r3, [r3, #12]
 801af08:	899b      	ldrh	r3, [r3, #12]
 801af0a:	b29b      	uxth	r3, r3
 801af0c:	4618      	mov	r0, r3
 801af0e:	f7f9 fc67 	bl	80147e0 <lwip_htons>
 801af12:	4603      	mov	r3, r0
 801af14:	b2db      	uxtb	r3, r3
 801af16:	f003 0303 	and.w	r3, r3, #3
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d001      	beq.n	801af22 <tcp_rexmit_rto_prepare+0xba>
 801af1e:	2301      	movs	r3, #1
 801af20:	e000      	b.n	801af24 <tcp_rexmit_rto_prepare+0xbc>
 801af22:	2300      	movs	r3, #0
 801af24:	442b      	add	r3, r5
 801af26:	18e2      	adds	r2, r4, r3
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	2200      	movs	r2, #0
 801af30:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801af32:	2300      	movs	r3, #0
}
 801af34:	4618      	mov	r0, r3
 801af36:	3710      	adds	r7, #16
 801af38:	46bd      	mov	sp, r7
 801af3a:	bdb0      	pop	{r4, r5, r7, pc}
 801af3c:	08023b44 	.word	0x08023b44
 801af40:	08024180 	.word	0x08024180
 801af44:	08023b98 	.word	0x08023b98

0801af48 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801af48:	b580      	push	{r7, lr}
 801af4a:	b082      	sub	sp, #8
 801af4c:	af00      	add	r7, sp, #0
 801af4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	2b00      	cmp	r3, #0
 801af54:	d106      	bne.n	801af64 <tcp_rexmit_rto_commit+0x1c>
 801af56:	4b0d      	ldr	r3, [pc, #52]	; (801af8c <tcp_rexmit_rto_commit+0x44>)
 801af58:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801af5c:	490c      	ldr	r1, [pc, #48]	; (801af90 <tcp_rexmit_rto_commit+0x48>)
 801af5e:	480d      	ldr	r0, [pc, #52]	; (801af94 <tcp_rexmit_rto_commit+0x4c>)
 801af60:	f006 fade 	bl	8021520 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801af6a:	2bff      	cmp	r3, #255	; 0xff
 801af6c:	d007      	beq.n	801af7e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801af74:	3301      	adds	r3, #1
 801af76:	b2da      	uxtb	r2, r3
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801af7e:	6878      	ldr	r0, [r7, #4]
 801af80:	f7ff fc7a 	bl	801a878 <tcp_output>
}
 801af84:	bf00      	nop
 801af86:	3708      	adds	r7, #8
 801af88:	46bd      	mov	sp, r7
 801af8a:	bd80      	pop	{r7, pc}
 801af8c:	08023b44 	.word	0x08023b44
 801af90:	080241a4 	.word	0x080241a4
 801af94:	08023b98 	.word	0x08023b98

0801af98 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801af98:	b580      	push	{r7, lr}
 801af9a:	b082      	sub	sp, #8
 801af9c:	af00      	add	r7, sp, #0
 801af9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d106      	bne.n	801afb4 <tcp_rexmit_rto+0x1c>
 801afa6:	4b0a      	ldr	r3, [pc, #40]	; (801afd0 <tcp_rexmit_rto+0x38>)
 801afa8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801afac:	4909      	ldr	r1, [pc, #36]	; (801afd4 <tcp_rexmit_rto+0x3c>)
 801afae:	480a      	ldr	r0, [pc, #40]	; (801afd8 <tcp_rexmit_rto+0x40>)
 801afb0:	f006 fab6 	bl	8021520 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801afb4:	6878      	ldr	r0, [r7, #4]
 801afb6:	f7ff ff57 	bl	801ae68 <tcp_rexmit_rto_prepare>
 801afba:	4603      	mov	r3, r0
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d102      	bne.n	801afc6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801afc0:	6878      	ldr	r0, [r7, #4]
 801afc2:	f7ff ffc1 	bl	801af48 <tcp_rexmit_rto_commit>
  }
}
 801afc6:	bf00      	nop
 801afc8:	3708      	adds	r7, #8
 801afca:	46bd      	mov	sp, r7
 801afcc:	bd80      	pop	{r7, pc}
 801afce:	bf00      	nop
 801afd0:	08023b44 	.word	0x08023b44
 801afd4:	080241c8 	.word	0x080241c8
 801afd8:	08023b98 	.word	0x08023b98

0801afdc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801afdc:	b590      	push	{r4, r7, lr}
 801afde:	b085      	sub	sp, #20
 801afe0:	af00      	add	r7, sp, #0
 801afe2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d106      	bne.n	801aff8 <tcp_rexmit+0x1c>
 801afea:	4b2f      	ldr	r3, [pc, #188]	; (801b0a8 <tcp_rexmit+0xcc>)
 801afec:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801aff0:	492e      	ldr	r1, [pc, #184]	; (801b0ac <tcp_rexmit+0xd0>)
 801aff2:	482f      	ldr	r0, [pc, #188]	; (801b0b0 <tcp_rexmit+0xd4>)
 801aff4:	f006 fa94 	bl	8021520 <iprintf>

  if (pcb->unacked == NULL) {
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801affc:	2b00      	cmp	r3, #0
 801affe:	d102      	bne.n	801b006 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801b000:	f06f 0305 	mvn.w	r3, #5
 801b004:	e04c      	b.n	801b0a0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b00a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801b00c:	68b8      	ldr	r0, [r7, #8]
 801b00e:	f7ff fe2b 	bl	801ac68 <tcp_output_segment_busy>
 801b012:	4603      	mov	r3, r0
 801b014:	2b00      	cmp	r3, #0
 801b016:	d002      	beq.n	801b01e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801b018:	f06f 0305 	mvn.w	r3, #5
 801b01c:	e040      	b.n	801b0a0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801b01e:	68bb      	ldr	r3, [r7, #8]
 801b020:	681a      	ldr	r2, [r3, #0]
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	336c      	adds	r3, #108	; 0x6c
 801b02a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b02c:	e002      	b.n	801b034 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801b02e:	68fb      	ldr	r3, [r7, #12]
 801b030:	681b      	ldr	r3, [r3, #0]
 801b032:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d011      	beq.n	801b060 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b03c:	68fb      	ldr	r3, [r7, #12]
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	68db      	ldr	r3, [r3, #12]
 801b042:	685b      	ldr	r3, [r3, #4]
 801b044:	4618      	mov	r0, r3
 801b046:	f7f9 fbe0 	bl	801480a <lwip_htonl>
 801b04a:	4604      	mov	r4, r0
 801b04c:	68bb      	ldr	r3, [r7, #8]
 801b04e:	68db      	ldr	r3, [r3, #12]
 801b050:	685b      	ldr	r3, [r3, #4]
 801b052:	4618      	mov	r0, r3
 801b054:	f7f9 fbd9 	bl	801480a <lwip_htonl>
 801b058:	4603      	mov	r3, r0
 801b05a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	dbe6      	blt.n	801b02e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	681a      	ldr	r2, [r3, #0]
 801b064:	68bb      	ldr	r3, [r7, #8]
 801b066:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b068:	68fb      	ldr	r3, [r7, #12]
 801b06a:	68ba      	ldr	r2, [r7, #8]
 801b06c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b06e:	68bb      	ldr	r3, [r7, #8]
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	2b00      	cmp	r3, #0
 801b074:	d103      	bne.n	801b07e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	2200      	movs	r2, #0
 801b07a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b084:	2bff      	cmp	r3, #255	; 0xff
 801b086:	d007      	beq.n	801b098 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b08e:	3301      	adds	r3, #1
 801b090:	b2da      	uxtb	r2, r3
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	2200      	movs	r2, #0
 801b09c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801b09e:	2300      	movs	r3, #0
}
 801b0a0:	4618      	mov	r0, r3
 801b0a2:	3714      	adds	r7, #20
 801b0a4:	46bd      	mov	sp, r7
 801b0a6:	bd90      	pop	{r4, r7, pc}
 801b0a8:	08023b44 	.word	0x08023b44
 801b0ac:	080241e4 	.word	0x080241e4
 801b0b0:	08023b98 	.word	0x08023b98

0801b0b4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b0b4:	b580      	push	{r7, lr}
 801b0b6:	b082      	sub	sp, #8
 801b0b8:	af00      	add	r7, sp, #0
 801b0ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d106      	bne.n	801b0d0 <tcp_rexmit_fast+0x1c>
 801b0c2:	4b2f      	ldr	r3, [pc, #188]	; (801b180 <tcp_rexmit_fast+0xcc>)
 801b0c4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801b0c8:	492e      	ldr	r1, [pc, #184]	; (801b184 <tcp_rexmit_fast+0xd0>)
 801b0ca:	482f      	ldr	r0, [pc, #188]	; (801b188 <tcp_rexmit_fast+0xd4>)
 801b0cc:	f006 fa28 	bl	8021520 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d04f      	beq.n	801b178 <tcp_rexmit_fast+0xc4>
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	8b5b      	ldrh	r3, [r3, #26]
 801b0dc:	f003 0304 	and.w	r3, r3, #4
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d149      	bne.n	801b178 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801b0e4:	6878      	ldr	r0, [r7, #4]
 801b0e6:	f7ff ff79 	bl	801afdc <tcp_rexmit>
 801b0ea:	4603      	mov	r3, r0
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d143      	bne.n	801b178 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b0fc:	429a      	cmp	r2, r3
 801b0fe:	d208      	bcs.n	801b112 <tcp_rexmit_fast+0x5e>
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b106:	2b00      	cmp	r3, #0
 801b108:	da00      	bge.n	801b10c <tcp_rexmit_fast+0x58>
 801b10a:	3301      	adds	r3, #1
 801b10c:	105b      	asrs	r3, r3, #1
 801b10e:	b29b      	uxth	r3, r3
 801b110:	e007      	b.n	801b122 <tcp_rexmit_fast+0x6e>
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b118:	2b00      	cmp	r3, #0
 801b11a:	da00      	bge.n	801b11e <tcp_rexmit_fast+0x6a>
 801b11c:	3301      	adds	r3, #1
 801b11e:	105b      	asrs	r3, r3, #1
 801b120:	b29b      	uxth	r3, r3
 801b122:	687a      	ldr	r2, [r7, #4]
 801b124:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801b12e:	461a      	mov	r2, r3
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b134:	005b      	lsls	r3, r3, #1
 801b136:	429a      	cmp	r2, r3
 801b138:	d206      	bcs.n	801b148 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b13e:	005b      	lsls	r3, r3, #1
 801b140:	b29a      	uxth	r2, r3
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b152:	4619      	mov	r1, r3
 801b154:	0049      	lsls	r1, r1, #1
 801b156:	440b      	add	r3, r1
 801b158:	b29b      	uxth	r3, r3
 801b15a:	4413      	add	r3, r2
 801b15c:	b29a      	uxth	r2, r3
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	8b5b      	ldrh	r3, [r3, #26]
 801b168:	f043 0304 	orr.w	r3, r3, #4
 801b16c:	b29a      	uxth	r2, r3
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	2200      	movs	r2, #0
 801b176:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801b178:	bf00      	nop
 801b17a:	3708      	adds	r7, #8
 801b17c:	46bd      	mov	sp, r7
 801b17e:	bd80      	pop	{r7, pc}
 801b180:	08023b44 	.word	0x08023b44
 801b184:	080241fc 	.word	0x080241fc
 801b188:	08023b98 	.word	0x08023b98

0801b18c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801b18c:	b580      	push	{r7, lr}
 801b18e:	b086      	sub	sp, #24
 801b190:	af00      	add	r7, sp, #0
 801b192:	60f8      	str	r0, [r7, #12]
 801b194:	607b      	str	r3, [r7, #4]
 801b196:	460b      	mov	r3, r1
 801b198:	817b      	strh	r3, [r7, #10]
 801b19a:	4613      	mov	r3, r2
 801b19c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b19e:	897a      	ldrh	r2, [r7, #10]
 801b1a0:	893b      	ldrh	r3, [r7, #8]
 801b1a2:	4413      	add	r3, r2
 801b1a4:	b29b      	uxth	r3, r3
 801b1a6:	3314      	adds	r3, #20
 801b1a8:	b29b      	uxth	r3, r3
 801b1aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b1ae:	4619      	mov	r1, r3
 801b1b0:	2022      	movs	r0, #34	; 0x22
 801b1b2:	f7fa fc03 	bl	80159bc <pbuf_alloc>
 801b1b6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801b1b8:	697b      	ldr	r3, [r7, #20]
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d04e      	beq.n	801b25c <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b1be:	697b      	ldr	r3, [r7, #20]
 801b1c0:	895b      	ldrh	r3, [r3, #10]
 801b1c2:	461a      	mov	r2, r3
 801b1c4:	897b      	ldrh	r3, [r7, #10]
 801b1c6:	3314      	adds	r3, #20
 801b1c8:	429a      	cmp	r2, r3
 801b1ca:	da06      	bge.n	801b1da <tcp_output_alloc_header_common+0x4e>
 801b1cc:	4b26      	ldr	r3, [pc, #152]	; (801b268 <tcp_output_alloc_header_common+0xdc>)
 801b1ce:	f240 7224 	movw	r2, #1828	; 0x724
 801b1d2:	4926      	ldr	r1, [pc, #152]	; (801b26c <tcp_output_alloc_header_common+0xe0>)
 801b1d4:	4826      	ldr	r0, [pc, #152]	; (801b270 <tcp_output_alloc_header_common+0xe4>)
 801b1d6:	f006 f9a3 	bl	8021520 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801b1da:	697b      	ldr	r3, [r7, #20]
 801b1dc:	685b      	ldr	r3, [r3, #4]
 801b1de:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801b1e0:	8c3b      	ldrh	r3, [r7, #32]
 801b1e2:	4618      	mov	r0, r3
 801b1e4:	f7f9 fafc 	bl	80147e0 <lwip_htons>
 801b1e8:	4603      	mov	r3, r0
 801b1ea:	461a      	mov	r2, r3
 801b1ec:	693b      	ldr	r3, [r7, #16]
 801b1ee:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801b1f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b1f2:	4618      	mov	r0, r3
 801b1f4:	f7f9 faf4 	bl	80147e0 <lwip_htons>
 801b1f8:	4603      	mov	r3, r0
 801b1fa:	461a      	mov	r2, r3
 801b1fc:	693b      	ldr	r3, [r7, #16]
 801b1fe:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801b200:	693b      	ldr	r3, [r7, #16]
 801b202:	687a      	ldr	r2, [r7, #4]
 801b204:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801b206:	68f8      	ldr	r0, [r7, #12]
 801b208:	f7f9 faff 	bl	801480a <lwip_htonl>
 801b20c:	4602      	mov	r2, r0
 801b20e:	693b      	ldr	r3, [r7, #16]
 801b210:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801b212:	897b      	ldrh	r3, [r7, #10]
 801b214:	089b      	lsrs	r3, r3, #2
 801b216:	b29b      	uxth	r3, r3
 801b218:	3305      	adds	r3, #5
 801b21a:	b29b      	uxth	r3, r3
 801b21c:	031b      	lsls	r3, r3, #12
 801b21e:	b29a      	uxth	r2, r3
 801b220:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b224:	b29b      	uxth	r3, r3
 801b226:	4313      	orrs	r3, r2
 801b228:	b29b      	uxth	r3, r3
 801b22a:	4618      	mov	r0, r3
 801b22c:	f7f9 fad8 	bl	80147e0 <lwip_htons>
 801b230:	4603      	mov	r3, r0
 801b232:	461a      	mov	r2, r3
 801b234:	693b      	ldr	r3, [r7, #16]
 801b236:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801b238:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b23a:	4618      	mov	r0, r3
 801b23c:	f7f9 fad0 	bl	80147e0 <lwip_htons>
 801b240:	4603      	mov	r3, r0
 801b242:	461a      	mov	r2, r3
 801b244:	693b      	ldr	r3, [r7, #16]
 801b246:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801b248:	693b      	ldr	r3, [r7, #16]
 801b24a:	2200      	movs	r2, #0
 801b24c:	741a      	strb	r2, [r3, #16]
 801b24e:	2200      	movs	r2, #0
 801b250:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801b252:	693b      	ldr	r3, [r7, #16]
 801b254:	2200      	movs	r2, #0
 801b256:	749a      	strb	r2, [r3, #18]
 801b258:	2200      	movs	r2, #0
 801b25a:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801b25c:	697b      	ldr	r3, [r7, #20]
}
 801b25e:	4618      	mov	r0, r3
 801b260:	3718      	adds	r7, #24
 801b262:	46bd      	mov	sp, r7
 801b264:	bd80      	pop	{r7, pc}
 801b266:	bf00      	nop
 801b268:	08023b44 	.word	0x08023b44
 801b26c:	0802421c 	.word	0x0802421c
 801b270:	08023b98 	.word	0x08023b98

0801b274 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801b274:	b5b0      	push	{r4, r5, r7, lr}
 801b276:	b08a      	sub	sp, #40	; 0x28
 801b278:	af04      	add	r7, sp, #16
 801b27a:	60f8      	str	r0, [r7, #12]
 801b27c:	607b      	str	r3, [r7, #4]
 801b27e:	460b      	mov	r3, r1
 801b280:	817b      	strh	r3, [r7, #10]
 801b282:	4613      	mov	r3, r2
 801b284:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801b286:	68fb      	ldr	r3, [r7, #12]
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d106      	bne.n	801b29a <tcp_output_alloc_header+0x26>
 801b28c:	4b15      	ldr	r3, [pc, #84]	; (801b2e4 <tcp_output_alloc_header+0x70>)
 801b28e:	f240 7242 	movw	r2, #1858	; 0x742
 801b292:	4915      	ldr	r1, [pc, #84]	; (801b2e8 <tcp_output_alloc_header+0x74>)
 801b294:	4815      	ldr	r0, [pc, #84]	; (801b2ec <tcp_output_alloc_header+0x78>)
 801b296:	f006 f943 	bl	8021520 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801b29a:	68fb      	ldr	r3, [r7, #12]
 801b29c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801b29e:	68fb      	ldr	r3, [r7, #12]
 801b2a0:	8adb      	ldrh	r3, [r3, #22]
 801b2a2:	68fa      	ldr	r2, [r7, #12]
 801b2a4:	8b12      	ldrh	r2, [r2, #24]
 801b2a6:	68f9      	ldr	r1, [r7, #12]
 801b2a8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801b2aa:	893d      	ldrh	r5, [r7, #8]
 801b2ac:	897c      	ldrh	r4, [r7, #10]
 801b2ae:	9103      	str	r1, [sp, #12]
 801b2b0:	2110      	movs	r1, #16
 801b2b2:	9102      	str	r1, [sp, #8]
 801b2b4:	9201      	str	r2, [sp, #4]
 801b2b6:	9300      	str	r3, [sp, #0]
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	462a      	mov	r2, r5
 801b2bc:	4621      	mov	r1, r4
 801b2be:	f7ff ff65 	bl	801b18c <tcp_output_alloc_header_common>
 801b2c2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801b2c4:	697b      	ldr	r3, [r7, #20]
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d006      	beq.n	801b2d8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b2ce:	68fa      	ldr	r2, [r7, #12]
 801b2d0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b2d2:	441a      	add	r2, r3
 801b2d4:	68fb      	ldr	r3, [r7, #12]
 801b2d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801b2d8:	697b      	ldr	r3, [r7, #20]
}
 801b2da:	4618      	mov	r0, r3
 801b2dc:	3718      	adds	r7, #24
 801b2de:	46bd      	mov	sp, r7
 801b2e0:	bdb0      	pop	{r4, r5, r7, pc}
 801b2e2:	bf00      	nop
 801b2e4:	08023b44 	.word	0x08023b44
 801b2e8:	0802424c 	.word	0x0802424c
 801b2ec:	08023b98 	.word	0x08023b98

0801b2f0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801b2f0:	b580      	push	{r7, lr}
 801b2f2:	b088      	sub	sp, #32
 801b2f4:	af00      	add	r7, sp, #0
 801b2f6:	60f8      	str	r0, [r7, #12]
 801b2f8:	60b9      	str	r1, [r7, #8]
 801b2fa:	4611      	mov	r1, r2
 801b2fc:	461a      	mov	r2, r3
 801b2fe:	460b      	mov	r3, r1
 801b300:	71fb      	strb	r3, [r7, #7]
 801b302:	4613      	mov	r3, r2
 801b304:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801b306:	2300      	movs	r3, #0
 801b308:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801b30a:	68bb      	ldr	r3, [r7, #8]
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d106      	bne.n	801b31e <tcp_output_fill_options+0x2e>
 801b310:	4b13      	ldr	r3, [pc, #76]	; (801b360 <tcp_output_fill_options+0x70>)
 801b312:	f240 7256 	movw	r2, #1878	; 0x756
 801b316:	4913      	ldr	r1, [pc, #76]	; (801b364 <tcp_output_fill_options+0x74>)
 801b318:	4813      	ldr	r0, [pc, #76]	; (801b368 <tcp_output_fill_options+0x78>)
 801b31a:	f006 f901 	bl	8021520 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801b31e:	68bb      	ldr	r3, [r7, #8]
 801b320:	685b      	ldr	r3, [r3, #4]
 801b322:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801b324:	69bb      	ldr	r3, [r7, #24]
 801b326:	3314      	adds	r3, #20
 801b328:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801b32a:	69bb      	ldr	r3, [r7, #24]
 801b32c:	f103 0214 	add.w	r2, r3, #20
 801b330:	8bfb      	ldrh	r3, [r7, #30]
 801b332:	009b      	lsls	r3, r3, #2
 801b334:	4619      	mov	r1, r3
 801b336:	79fb      	ldrb	r3, [r7, #7]
 801b338:	009b      	lsls	r3, r3, #2
 801b33a:	f003 0304 	and.w	r3, r3, #4
 801b33e:	440b      	add	r3, r1
 801b340:	4413      	add	r3, r2
 801b342:	697a      	ldr	r2, [r7, #20]
 801b344:	429a      	cmp	r2, r3
 801b346:	d006      	beq.n	801b356 <tcp_output_fill_options+0x66>
 801b348:	4b05      	ldr	r3, [pc, #20]	; (801b360 <tcp_output_fill_options+0x70>)
 801b34a:	f240 7275 	movw	r2, #1909	; 0x775
 801b34e:	4907      	ldr	r1, [pc, #28]	; (801b36c <tcp_output_fill_options+0x7c>)
 801b350:	4805      	ldr	r0, [pc, #20]	; (801b368 <tcp_output_fill_options+0x78>)
 801b352:	f006 f8e5 	bl	8021520 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801b356:	bf00      	nop
 801b358:	3720      	adds	r7, #32
 801b35a:	46bd      	mov	sp, r7
 801b35c:	bd80      	pop	{r7, pc}
 801b35e:	bf00      	nop
 801b360:	08023b44 	.word	0x08023b44
 801b364:	08024274 	.word	0x08024274
 801b368:	08023b98 	.word	0x08023b98
 801b36c:	0802416c 	.word	0x0802416c

0801b370 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801b370:	b580      	push	{r7, lr}
 801b372:	b08a      	sub	sp, #40	; 0x28
 801b374:	af04      	add	r7, sp, #16
 801b376:	60f8      	str	r0, [r7, #12]
 801b378:	60b9      	str	r1, [r7, #8]
 801b37a:	607a      	str	r2, [r7, #4]
 801b37c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801b37e:	68bb      	ldr	r3, [r7, #8]
 801b380:	2b00      	cmp	r3, #0
 801b382:	d106      	bne.n	801b392 <tcp_output_control_segment+0x22>
 801b384:	4b1c      	ldr	r3, [pc, #112]	; (801b3f8 <tcp_output_control_segment+0x88>)
 801b386:	f240 7287 	movw	r2, #1927	; 0x787
 801b38a:	491c      	ldr	r1, [pc, #112]	; (801b3fc <tcp_output_control_segment+0x8c>)
 801b38c:	481c      	ldr	r0, [pc, #112]	; (801b400 <tcp_output_control_segment+0x90>)
 801b38e:	f006 f8c7 	bl	8021520 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801b392:	683a      	ldr	r2, [r7, #0]
 801b394:	6879      	ldr	r1, [r7, #4]
 801b396:	68f8      	ldr	r0, [r7, #12]
 801b398:	f7fe ff2e 	bl	801a1f8 <tcp_route>
 801b39c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801b39e:	693b      	ldr	r3, [r7, #16]
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d102      	bne.n	801b3aa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801b3a4:	23fc      	movs	r3, #252	; 0xfc
 801b3a6:	75fb      	strb	r3, [r7, #23]
 801b3a8:	e01c      	b.n	801b3e4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801b3aa:	68fb      	ldr	r3, [r7, #12]
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d006      	beq.n	801b3be <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801b3b0:	68fb      	ldr	r3, [r7, #12]
 801b3b2:	7adb      	ldrb	r3, [r3, #11]
 801b3b4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801b3b6:	68fb      	ldr	r3, [r7, #12]
 801b3b8:	7a9b      	ldrb	r3, [r3, #10]
 801b3ba:	757b      	strb	r3, [r7, #21]
 801b3bc:	e003      	b.n	801b3c6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801b3be:	23ff      	movs	r3, #255	; 0xff
 801b3c0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801b3c2:	2300      	movs	r3, #0
 801b3c4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801b3c6:	7dba      	ldrb	r2, [r7, #22]
 801b3c8:	693b      	ldr	r3, [r7, #16]
 801b3ca:	9302      	str	r3, [sp, #8]
 801b3cc:	2306      	movs	r3, #6
 801b3ce:	9301      	str	r3, [sp, #4]
 801b3d0:	7d7b      	ldrb	r3, [r7, #21]
 801b3d2:	9300      	str	r3, [sp, #0]
 801b3d4:	4613      	mov	r3, r2
 801b3d6:	683a      	ldr	r2, [r7, #0]
 801b3d8:	6879      	ldr	r1, [r7, #4]
 801b3da:	68b8      	ldr	r0, [r7, #8]
 801b3dc:	f004 f964 	bl	801f6a8 <ip4_output_if>
 801b3e0:	4603      	mov	r3, r0
 801b3e2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801b3e4:	68b8      	ldr	r0, [r7, #8]
 801b3e6:	f7fa fdc9 	bl	8015f7c <pbuf_free>
  return err;
 801b3ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b3ee:	4618      	mov	r0, r3
 801b3f0:	3718      	adds	r7, #24
 801b3f2:	46bd      	mov	sp, r7
 801b3f4:	bd80      	pop	{r7, pc}
 801b3f6:	bf00      	nop
 801b3f8:	08023b44 	.word	0x08023b44
 801b3fc:	0802429c 	.word	0x0802429c
 801b400:	08023b98 	.word	0x08023b98

0801b404 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801b404:	b590      	push	{r4, r7, lr}
 801b406:	b08b      	sub	sp, #44	; 0x2c
 801b408:	af04      	add	r7, sp, #16
 801b40a:	60f8      	str	r0, [r7, #12]
 801b40c:	60b9      	str	r1, [r7, #8]
 801b40e:	607a      	str	r2, [r7, #4]
 801b410:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801b412:	683b      	ldr	r3, [r7, #0]
 801b414:	2b00      	cmp	r3, #0
 801b416:	d106      	bne.n	801b426 <tcp_rst+0x22>
 801b418:	4b1f      	ldr	r3, [pc, #124]	; (801b498 <tcp_rst+0x94>)
 801b41a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801b41e:	491f      	ldr	r1, [pc, #124]	; (801b49c <tcp_rst+0x98>)
 801b420:	481f      	ldr	r0, [pc, #124]	; (801b4a0 <tcp_rst+0x9c>)
 801b422:	f006 f87d 	bl	8021520 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801b426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b428:	2b00      	cmp	r3, #0
 801b42a:	d106      	bne.n	801b43a <tcp_rst+0x36>
 801b42c:	4b1a      	ldr	r3, [pc, #104]	; (801b498 <tcp_rst+0x94>)
 801b42e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801b432:	491c      	ldr	r1, [pc, #112]	; (801b4a4 <tcp_rst+0xa0>)
 801b434:	481a      	ldr	r0, [pc, #104]	; (801b4a0 <tcp_rst+0x9c>)
 801b436:	f006 f873 	bl	8021520 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b43a:	2300      	movs	r3, #0
 801b43c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801b43e:	f246 0308 	movw	r3, #24584	; 0x6008
 801b442:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801b444:	7dfb      	ldrb	r3, [r7, #23]
 801b446:	b29c      	uxth	r4, r3
 801b448:	68b8      	ldr	r0, [r7, #8]
 801b44a:	f7f9 f9de 	bl	801480a <lwip_htonl>
 801b44e:	4602      	mov	r2, r0
 801b450:	8abb      	ldrh	r3, [r7, #20]
 801b452:	9303      	str	r3, [sp, #12]
 801b454:	2314      	movs	r3, #20
 801b456:	9302      	str	r3, [sp, #8]
 801b458:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801b45a:	9301      	str	r3, [sp, #4]
 801b45c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b45e:	9300      	str	r3, [sp, #0]
 801b460:	4613      	mov	r3, r2
 801b462:	2200      	movs	r2, #0
 801b464:	4621      	mov	r1, r4
 801b466:	6878      	ldr	r0, [r7, #4]
 801b468:	f7ff fe90 	bl	801b18c <tcp_output_alloc_header_common>
 801b46c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801b46e:	693b      	ldr	r3, [r7, #16]
 801b470:	2b00      	cmp	r3, #0
 801b472:	d00c      	beq.n	801b48e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b474:	7dfb      	ldrb	r3, [r7, #23]
 801b476:	2200      	movs	r2, #0
 801b478:	6939      	ldr	r1, [r7, #16]
 801b47a:	68f8      	ldr	r0, [r7, #12]
 801b47c:	f7ff ff38 	bl	801b2f0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b482:	683a      	ldr	r2, [r7, #0]
 801b484:	6939      	ldr	r1, [r7, #16]
 801b486:	68f8      	ldr	r0, [r7, #12]
 801b488:	f7ff ff72 	bl	801b370 <tcp_output_control_segment>
 801b48c:	e000      	b.n	801b490 <tcp_rst+0x8c>
    return;
 801b48e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b490:	371c      	adds	r7, #28
 801b492:	46bd      	mov	sp, r7
 801b494:	bd90      	pop	{r4, r7, pc}
 801b496:	bf00      	nop
 801b498:	08023b44 	.word	0x08023b44
 801b49c:	080242c8 	.word	0x080242c8
 801b4a0:	08023b98 	.word	0x08023b98
 801b4a4:	080242e4 	.word	0x080242e4

0801b4a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b4a8:	b590      	push	{r4, r7, lr}
 801b4aa:	b087      	sub	sp, #28
 801b4ac:	af00      	add	r7, sp, #0
 801b4ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801b4b0:	2300      	movs	r3, #0
 801b4b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801b4b4:	2300      	movs	r3, #0
 801b4b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d106      	bne.n	801b4cc <tcp_send_empty_ack+0x24>
 801b4be:	4b28      	ldr	r3, [pc, #160]	; (801b560 <tcp_send_empty_ack+0xb8>)
 801b4c0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801b4c4:	4927      	ldr	r1, [pc, #156]	; (801b564 <tcp_send_empty_ack+0xbc>)
 801b4c6:	4828      	ldr	r0, [pc, #160]	; (801b568 <tcp_send_empty_ack+0xc0>)
 801b4c8:	f006 f82a 	bl	8021520 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b4cc:	7dfb      	ldrb	r3, [r7, #23]
 801b4ce:	009b      	lsls	r3, r3, #2
 801b4d0:	b2db      	uxtb	r3, r3
 801b4d2:	f003 0304 	and.w	r3, r3, #4
 801b4d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b4d8:	7d7b      	ldrb	r3, [r7, #21]
 801b4da:	b29c      	uxth	r4, r3
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b4e0:	4618      	mov	r0, r3
 801b4e2:	f7f9 f992 	bl	801480a <lwip_htonl>
 801b4e6:	4603      	mov	r3, r0
 801b4e8:	2200      	movs	r2, #0
 801b4ea:	4621      	mov	r1, r4
 801b4ec:	6878      	ldr	r0, [r7, #4]
 801b4ee:	f7ff fec1 	bl	801b274 <tcp_output_alloc_header>
 801b4f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b4f4:	693b      	ldr	r3, [r7, #16]
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d109      	bne.n	801b50e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	8b5b      	ldrh	r3, [r3, #26]
 801b4fe:	f043 0303 	orr.w	r3, r3, #3
 801b502:	b29a      	uxth	r2, r3
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b508:	f06f 0301 	mvn.w	r3, #1
 801b50c:	e023      	b.n	801b556 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801b50e:	7dbb      	ldrb	r3, [r7, #22]
 801b510:	7dfa      	ldrb	r2, [r7, #23]
 801b512:	6939      	ldr	r1, [r7, #16]
 801b514:	6878      	ldr	r0, [r7, #4]
 801b516:	f7ff feeb 	bl	801b2f0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b51a:	687a      	ldr	r2, [r7, #4]
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	3304      	adds	r3, #4
 801b520:	6939      	ldr	r1, [r7, #16]
 801b522:	6878      	ldr	r0, [r7, #4]
 801b524:	f7ff ff24 	bl	801b370 <tcp_output_control_segment>
 801b528:	4603      	mov	r3, r0
 801b52a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801b52c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b530:	2b00      	cmp	r3, #0
 801b532:	d007      	beq.n	801b544 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	8b5b      	ldrh	r3, [r3, #26]
 801b538:	f043 0303 	orr.w	r3, r3, #3
 801b53c:	b29a      	uxth	r2, r3
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	835a      	strh	r2, [r3, #26]
 801b542:	e006      	b.n	801b552 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	8b5b      	ldrh	r3, [r3, #26]
 801b548:	f023 0303 	bic.w	r3, r3, #3
 801b54c:	b29a      	uxth	r2, r3
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801b552:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b556:	4618      	mov	r0, r3
 801b558:	371c      	adds	r7, #28
 801b55a:	46bd      	mov	sp, r7
 801b55c:	bd90      	pop	{r4, r7, pc}
 801b55e:	bf00      	nop
 801b560:	08023b44 	.word	0x08023b44
 801b564:	08024300 	.word	0x08024300
 801b568:	08023b98 	.word	0x08023b98

0801b56c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b56c:	b590      	push	{r4, r7, lr}
 801b56e:	b087      	sub	sp, #28
 801b570:	af00      	add	r7, sp, #0
 801b572:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b574:	2300      	movs	r3, #0
 801b576:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	d106      	bne.n	801b58c <tcp_keepalive+0x20>
 801b57e:	4b18      	ldr	r3, [pc, #96]	; (801b5e0 <tcp_keepalive+0x74>)
 801b580:	f640 0224 	movw	r2, #2084	; 0x824
 801b584:	4917      	ldr	r1, [pc, #92]	; (801b5e4 <tcp_keepalive+0x78>)
 801b586:	4818      	ldr	r0, [pc, #96]	; (801b5e8 <tcp_keepalive+0x7c>)
 801b588:	f005 ffca 	bl	8021520 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b58c:	7dfb      	ldrb	r3, [r7, #23]
 801b58e:	b29c      	uxth	r4, r3
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b594:	3b01      	subs	r3, #1
 801b596:	4618      	mov	r0, r3
 801b598:	f7f9 f937 	bl	801480a <lwip_htonl>
 801b59c:	4603      	mov	r3, r0
 801b59e:	2200      	movs	r2, #0
 801b5a0:	4621      	mov	r1, r4
 801b5a2:	6878      	ldr	r0, [r7, #4]
 801b5a4:	f7ff fe66 	bl	801b274 <tcp_output_alloc_header>
 801b5a8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b5aa:	693b      	ldr	r3, [r7, #16]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d102      	bne.n	801b5b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b5b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b5b4:	e010      	b.n	801b5d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b5b6:	7dfb      	ldrb	r3, [r7, #23]
 801b5b8:	2200      	movs	r2, #0
 801b5ba:	6939      	ldr	r1, [r7, #16]
 801b5bc:	6878      	ldr	r0, [r7, #4]
 801b5be:	f7ff fe97 	bl	801b2f0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b5c2:	687a      	ldr	r2, [r7, #4]
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	3304      	adds	r3, #4
 801b5c8:	6939      	ldr	r1, [r7, #16]
 801b5ca:	6878      	ldr	r0, [r7, #4]
 801b5cc:	f7ff fed0 	bl	801b370 <tcp_output_control_segment>
 801b5d0:	4603      	mov	r3, r0
 801b5d2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b5d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b5d8:	4618      	mov	r0, r3
 801b5da:	371c      	adds	r7, #28
 801b5dc:	46bd      	mov	sp, r7
 801b5de:	bd90      	pop	{r4, r7, pc}
 801b5e0:	08023b44 	.word	0x08023b44
 801b5e4:	08024320 	.word	0x08024320
 801b5e8:	08023b98 	.word	0x08023b98

0801b5ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b5ec:	b590      	push	{r4, r7, lr}
 801b5ee:	b08b      	sub	sp, #44	; 0x2c
 801b5f0:	af00      	add	r7, sp, #0
 801b5f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b5f4:	2300      	movs	r3, #0
 801b5f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d106      	bne.n	801b60e <tcp_zero_window_probe+0x22>
 801b600:	4b4c      	ldr	r3, [pc, #304]	; (801b734 <tcp_zero_window_probe+0x148>)
 801b602:	f640 024f 	movw	r2, #2127	; 0x84f
 801b606:	494c      	ldr	r1, [pc, #304]	; (801b738 <tcp_zero_window_probe+0x14c>)
 801b608:	484c      	ldr	r0, [pc, #304]	; (801b73c <tcp_zero_window_probe+0x150>)
 801b60a:	f005 ff89 	bl	8021520 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b612:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801b614:	6a3b      	ldr	r3, [r7, #32]
 801b616:	2b00      	cmp	r3, #0
 801b618:	d101      	bne.n	801b61e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b61a:	2300      	movs	r3, #0
 801b61c:	e086      	b.n	801b72c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b624:	2bff      	cmp	r3, #255	; 0xff
 801b626:	d007      	beq.n	801b638 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b62e:	3301      	adds	r3, #1
 801b630:	b2da      	uxtb	r2, r3
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b638:	6a3b      	ldr	r3, [r7, #32]
 801b63a:	68db      	ldr	r3, [r3, #12]
 801b63c:	899b      	ldrh	r3, [r3, #12]
 801b63e:	b29b      	uxth	r3, r3
 801b640:	4618      	mov	r0, r3
 801b642:	f7f9 f8cd 	bl	80147e0 <lwip_htons>
 801b646:	4603      	mov	r3, r0
 801b648:	b2db      	uxtb	r3, r3
 801b64a:	f003 0301 	and.w	r3, r3, #1
 801b64e:	2b00      	cmp	r3, #0
 801b650:	d005      	beq.n	801b65e <tcp_zero_window_probe+0x72>
 801b652:	6a3b      	ldr	r3, [r7, #32]
 801b654:	891b      	ldrh	r3, [r3, #8]
 801b656:	2b00      	cmp	r3, #0
 801b658:	d101      	bne.n	801b65e <tcp_zero_window_probe+0x72>
 801b65a:	2301      	movs	r3, #1
 801b65c:	e000      	b.n	801b660 <tcp_zero_window_probe+0x74>
 801b65e:	2300      	movs	r3, #0
 801b660:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b662:	7ffb      	ldrb	r3, [r7, #31]
 801b664:	2b00      	cmp	r3, #0
 801b666:	bf0c      	ite	eq
 801b668:	2301      	moveq	r3, #1
 801b66a:	2300      	movne	r3, #0
 801b66c:	b2db      	uxtb	r3, r3
 801b66e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b674:	b299      	uxth	r1, r3
 801b676:	6a3b      	ldr	r3, [r7, #32]
 801b678:	68db      	ldr	r3, [r3, #12]
 801b67a:	685b      	ldr	r3, [r3, #4]
 801b67c:	8bba      	ldrh	r2, [r7, #28]
 801b67e:	6878      	ldr	r0, [r7, #4]
 801b680:	f7ff fdf8 	bl	801b274 <tcp_output_alloc_header>
 801b684:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801b686:	69bb      	ldr	r3, [r7, #24]
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d102      	bne.n	801b692 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b68c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b690:	e04c      	b.n	801b72c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b692:	69bb      	ldr	r3, [r7, #24]
 801b694:	685b      	ldr	r3, [r3, #4]
 801b696:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801b698:	7ffb      	ldrb	r3, [r7, #31]
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d011      	beq.n	801b6c2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b69e:	697b      	ldr	r3, [r7, #20]
 801b6a0:	899b      	ldrh	r3, [r3, #12]
 801b6a2:	b29b      	uxth	r3, r3
 801b6a4:	b21b      	sxth	r3, r3
 801b6a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b6aa:	b21c      	sxth	r4, r3
 801b6ac:	2011      	movs	r0, #17
 801b6ae:	f7f9 f897 	bl	80147e0 <lwip_htons>
 801b6b2:	4603      	mov	r3, r0
 801b6b4:	b21b      	sxth	r3, r3
 801b6b6:	4323      	orrs	r3, r4
 801b6b8:	b21b      	sxth	r3, r3
 801b6ba:	b29a      	uxth	r2, r3
 801b6bc:	697b      	ldr	r3, [r7, #20]
 801b6be:	819a      	strh	r2, [r3, #12]
 801b6c0:	e010      	b.n	801b6e4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b6c2:	69bb      	ldr	r3, [r7, #24]
 801b6c4:	685b      	ldr	r3, [r3, #4]
 801b6c6:	3314      	adds	r3, #20
 801b6c8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b6ca:	6a3b      	ldr	r3, [r7, #32]
 801b6cc:	6858      	ldr	r0, [r3, #4]
 801b6ce:	6a3b      	ldr	r3, [r7, #32]
 801b6d0:	685b      	ldr	r3, [r3, #4]
 801b6d2:	891a      	ldrh	r2, [r3, #8]
 801b6d4:	6a3b      	ldr	r3, [r7, #32]
 801b6d6:	891b      	ldrh	r3, [r3, #8]
 801b6d8:	1ad3      	subs	r3, r2, r3
 801b6da:	b29b      	uxth	r3, r3
 801b6dc:	2201      	movs	r2, #1
 801b6de:	6939      	ldr	r1, [r7, #16]
 801b6e0:	f7fa fe52 	bl	8016388 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b6e4:	6a3b      	ldr	r3, [r7, #32]
 801b6e6:	68db      	ldr	r3, [r3, #12]
 801b6e8:	685b      	ldr	r3, [r3, #4]
 801b6ea:	4618      	mov	r0, r3
 801b6ec:	f7f9 f88d 	bl	801480a <lwip_htonl>
 801b6f0:	4603      	mov	r3, r0
 801b6f2:	3301      	adds	r3, #1
 801b6f4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b6fa:	68fb      	ldr	r3, [r7, #12]
 801b6fc:	1ad3      	subs	r3, r2, r3
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	da02      	bge.n	801b708 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	68fa      	ldr	r2, [r7, #12]
 801b706:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b70c:	2200      	movs	r2, #0
 801b70e:	69b9      	ldr	r1, [r7, #24]
 801b710:	6878      	ldr	r0, [r7, #4]
 801b712:	f7ff fded 	bl	801b2f0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b716:	687a      	ldr	r2, [r7, #4]
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	3304      	adds	r3, #4
 801b71c:	69b9      	ldr	r1, [r7, #24]
 801b71e:	6878      	ldr	r0, [r7, #4]
 801b720:	f7ff fe26 	bl	801b370 <tcp_output_control_segment>
 801b724:	4603      	mov	r3, r0
 801b726:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b728:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b72c:	4618      	mov	r0, r3
 801b72e:	372c      	adds	r7, #44	; 0x2c
 801b730:	46bd      	mov	sp, r7
 801b732:	bd90      	pop	{r4, r7, pc}
 801b734:	08023b44 	.word	0x08023b44
 801b738:	0802433c 	.word	0x0802433c
 801b73c:	08023b98 	.word	0x08023b98

0801b740 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b740:	b580      	push	{r7, lr}
 801b742:	b082      	sub	sp, #8
 801b744:	af00      	add	r7, sp, #0
 801b746:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b748:	f7fa ff0c 	bl	8016564 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b74c:	4b0a      	ldr	r3, [pc, #40]	; (801b778 <tcpip_tcp_timer+0x38>)
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	2b00      	cmp	r3, #0
 801b752:	d103      	bne.n	801b75c <tcpip_tcp_timer+0x1c>
 801b754:	4b09      	ldr	r3, [pc, #36]	; (801b77c <tcpip_tcp_timer+0x3c>)
 801b756:	681b      	ldr	r3, [r3, #0]
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d005      	beq.n	801b768 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b75c:	2200      	movs	r2, #0
 801b75e:	4908      	ldr	r1, [pc, #32]	; (801b780 <tcpip_tcp_timer+0x40>)
 801b760:	20fa      	movs	r0, #250	; 0xfa
 801b762:	f000 f8f1 	bl	801b948 <sys_timeout>
 801b766:	e002      	b.n	801b76e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b768:	4b06      	ldr	r3, [pc, #24]	; (801b784 <tcpip_tcp_timer+0x44>)
 801b76a:	2200      	movs	r2, #0
 801b76c:	601a      	str	r2, [r3, #0]
  }
}
 801b76e:	bf00      	nop
 801b770:	3708      	adds	r7, #8
 801b772:	46bd      	mov	sp, r7
 801b774:	bd80      	pop	{r7, pc}
 801b776:	bf00      	nop
 801b778:	20010334 	.word	0x20010334
 801b77c:	20010344 	.word	0x20010344
 801b780:	0801b741 	.word	0x0801b741
 801b784:	20008ffc 	.word	0x20008ffc

0801b788 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801b788:	b580      	push	{r7, lr}
 801b78a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b78c:	4b0a      	ldr	r3, [pc, #40]	; (801b7b8 <tcp_timer_needed+0x30>)
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	2b00      	cmp	r3, #0
 801b792:	d10f      	bne.n	801b7b4 <tcp_timer_needed+0x2c>
 801b794:	4b09      	ldr	r3, [pc, #36]	; (801b7bc <tcp_timer_needed+0x34>)
 801b796:	681b      	ldr	r3, [r3, #0]
 801b798:	2b00      	cmp	r3, #0
 801b79a:	d103      	bne.n	801b7a4 <tcp_timer_needed+0x1c>
 801b79c:	4b08      	ldr	r3, [pc, #32]	; (801b7c0 <tcp_timer_needed+0x38>)
 801b79e:	681b      	ldr	r3, [r3, #0]
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d007      	beq.n	801b7b4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801b7a4:	4b04      	ldr	r3, [pc, #16]	; (801b7b8 <tcp_timer_needed+0x30>)
 801b7a6:	2201      	movs	r2, #1
 801b7a8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b7aa:	2200      	movs	r2, #0
 801b7ac:	4905      	ldr	r1, [pc, #20]	; (801b7c4 <tcp_timer_needed+0x3c>)
 801b7ae:	20fa      	movs	r0, #250	; 0xfa
 801b7b0:	f000 f8ca 	bl	801b948 <sys_timeout>
  }
}
 801b7b4:	bf00      	nop
 801b7b6:	bd80      	pop	{r7, pc}
 801b7b8:	20008ffc 	.word	0x20008ffc
 801b7bc:	20010334 	.word	0x20010334
 801b7c0:	20010344 	.word	0x20010344
 801b7c4:	0801b741 	.word	0x0801b741

0801b7c8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b7c8:	b580      	push	{r7, lr}
 801b7ca:	b086      	sub	sp, #24
 801b7cc:	af00      	add	r7, sp, #0
 801b7ce:	60f8      	str	r0, [r7, #12]
 801b7d0:	60b9      	str	r1, [r7, #8]
 801b7d2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b7d4:	200a      	movs	r0, #10
 801b7d6:	f7f9 fcb9 	bl	801514c <memp_malloc>
 801b7da:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801b7dc:	693b      	ldr	r3, [r7, #16]
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d109      	bne.n	801b7f6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b7e2:	693b      	ldr	r3, [r7, #16]
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	d151      	bne.n	801b88c <sys_timeout_abs+0xc4>
 801b7e8:	4b2a      	ldr	r3, [pc, #168]	; (801b894 <sys_timeout_abs+0xcc>)
 801b7ea:	22be      	movs	r2, #190	; 0xbe
 801b7ec:	492a      	ldr	r1, [pc, #168]	; (801b898 <sys_timeout_abs+0xd0>)
 801b7ee:	482b      	ldr	r0, [pc, #172]	; (801b89c <sys_timeout_abs+0xd4>)
 801b7f0:	f005 fe96 	bl	8021520 <iprintf>
    return;
 801b7f4:	e04a      	b.n	801b88c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801b7f6:	693b      	ldr	r3, [r7, #16]
 801b7f8:	2200      	movs	r2, #0
 801b7fa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801b7fc:	693b      	ldr	r3, [r7, #16]
 801b7fe:	68ba      	ldr	r2, [r7, #8]
 801b800:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801b802:	693b      	ldr	r3, [r7, #16]
 801b804:	687a      	ldr	r2, [r7, #4]
 801b806:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801b808:	693b      	ldr	r3, [r7, #16]
 801b80a:	68fa      	ldr	r2, [r7, #12]
 801b80c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b80e:	4b24      	ldr	r3, [pc, #144]	; (801b8a0 <sys_timeout_abs+0xd8>)
 801b810:	681b      	ldr	r3, [r3, #0]
 801b812:	2b00      	cmp	r3, #0
 801b814:	d103      	bne.n	801b81e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801b816:	4a22      	ldr	r2, [pc, #136]	; (801b8a0 <sys_timeout_abs+0xd8>)
 801b818:	693b      	ldr	r3, [r7, #16]
 801b81a:	6013      	str	r3, [r2, #0]
    return;
 801b81c:	e037      	b.n	801b88e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801b81e:	693b      	ldr	r3, [r7, #16]
 801b820:	685a      	ldr	r2, [r3, #4]
 801b822:	4b1f      	ldr	r3, [pc, #124]	; (801b8a0 <sys_timeout_abs+0xd8>)
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	685b      	ldr	r3, [r3, #4]
 801b828:	1ad3      	subs	r3, r2, r3
 801b82a:	0fdb      	lsrs	r3, r3, #31
 801b82c:	f003 0301 	and.w	r3, r3, #1
 801b830:	b2db      	uxtb	r3, r3
 801b832:	2b00      	cmp	r3, #0
 801b834:	d007      	beq.n	801b846 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801b836:	4b1a      	ldr	r3, [pc, #104]	; (801b8a0 <sys_timeout_abs+0xd8>)
 801b838:	681a      	ldr	r2, [r3, #0]
 801b83a:	693b      	ldr	r3, [r7, #16]
 801b83c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801b83e:	4a18      	ldr	r2, [pc, #96]	; (801b8a0 <sys_timeout_abs+0xd8>)
 801b840:	693b      	ldr	r3, [r7, #16]
 801b842:	6013      	str	r3, [r2, #0]
 801b844:	e023      	b.n	801b88e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801b846:	4b16      	ldr	r3, [pc, #88]	; (801b8a0 <sys_timeout_abs+0xd8>)
 801b848:	681b      	ldr	r3, [r3, #0]
 801b84a:	617b      	str	r3, [r7, #20]
 801b84c:	e01a      	b.n	801b884 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801b84e:	697b      	ldr	r3, [r7, #20]
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	2b00      	cmp	r3, #0
 801b854:	d00b      	beq.n	801b86e <sys_timeout_abs+0xa6>
 801b856:	693b      	ldr	r3, [r7, #16]
 801b858:	685a      	ldr	r2, [r3, #4]
 801b85a:	697b      	ldr	r3, [r7, #20]
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	685b      	ldr	r3, [r3, #4]
 801b860:	1ad3      	subs	r3, r2, r3
 801b862:	0fdb      	lsrs	r3, r3, #31
 801b864:	f003 0301 	and.w	r3, r3, #1
 801b868:	b2db      	uxtb	r3, r3
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d007      	beq.n	801b87e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801b86e:	697b      	ldr	r3, [r7, #20]
 801b870:	681a      	ldr	r2, [r3, #0]
 801b872:	693b      	ldr	r3, [r7, #16]
 801b874:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801b876:	697b      	ldr	r3, [r7, #20]
 801b878:	693a      	ldr	r2, [r7, #16]
 801b87a:	601a      	str	r2, [r3, #0]
        break;
 801b87c:	e007      	b.n	801b88e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801b87e:	697b      	ldr	r3, [r7, #20]
 801b880:	681b      	ldr	r3, [r3, #0]
 801b882:	617b      	str	r3, [r7, #20]
 801b884:	697b      	ldr	r3, [r7, #20]
 801b886:	2b00      	cmp	r3, #0
 801b888:	d1e1      	bne.n	801b84e <sys_timeout_abs+0x86>
 801b88a:	e000      	b.n	801b88e <sys_timeout_abs+0xc6>
    return;
 801b88c:	bf00      	nop
      }
    }
  }
}
 801b88e:	3718      	adds	r7, #24
 801b890:	46bd      	mov	sp, r7
 801b892:	bd80      	pop	{r7, pc}
 801b894:	08024360 	.word	0x08024360
 801b898:	08024394 	.word	0x08024394
 801b89c:	080243d4 	.word	0x080243d4
 801b8a0:	20008ff4 	.word	0x20008ff4

0801b8a4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801b8a4:	b580      	push	{r7, lr}
 801b8a6:	b086      	sub	sp, #24
 801b8a8:	af00      	add	r7, sp, #0
 801b8aa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b8b0:	697b      	ldr	r3, [r7, #20]
 801b8b2:	685b      	ldr	r3, [r3, #4]
 801b8b4:	4798      	blx	r3

  now = sys_now();
 801b8b6:	f7f2 fba5 	bl	800e004 <sys_now>
 801b8ba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801b8bc:	697b      	ldr	r3, [r7, #20]
 801b8be:	681a      	ldr	r2, [r3, #0]
 801b8c0:	4b0f      	ldr	r3, [pc, #60]	; (801b900 <lwip_cyclic_timer+0x5c>)
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	4413      	add	r3, r2
 801b8c6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b8c8:	68fa      	ldr	r2, [r7, #12]
 801b8ca:	693b      	ldr	r3, [r7, #16]
 801b8cc:	1ad3      	subs	r3, r2, r3
 801b8ce:	0fdb      	lsrs	r3, r3, #31
 801b8d0:	f003 0301 	and.w	r3, r3, #1
 801b8d4:	b2db      	uxtb	r3, r3
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d009      	beq.n	801b8ee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b8da:	697b      	ldr	r3, [r7, #20]
 801b8dc:	681a      	ldr	r2, [r3, #0]
 801b8de:	693b      	ldr	r3, [r7, #16]
 801b8e0:	4413      	add	r3, r2
 801b8e2:	687a      	ldr	r2, [r7, #4]
 801b8e4:	4907      	ldr	r1, [pc, #28]	; (801b904 <lwip_cyclic_timer+0x60>)
 801b8e6:	4618      	mov	r0, r3
 801b8e8:	f7ff ff6e 	bl	801b7c8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801b8ec:	e004      	b.n	801b8f8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b8ee:	687a      	ldr	r2, [r7, #4]
 801b8f0:	4904      	ldr	r1, [pc, #16]	; (801b904 <lwip_cyclic_timer+0x60>)
 801b8f2:	68f8      	ldr	r0, [r7, #12]
 801b8f4:	f7ff ff68 	bl	801b7c8 <sys_timeout_abs>
}
 801b8f8:	bf00      	nop
 801b8fa:	3718      	adds	r7, #24
 801b8fc:	46bd      	mov	sp, r7
 801b8fe:	bd80      	pop	{r7, pc}
 801b900:	20008ff8 	.word	0x20008ff8
 801b904:	0801b8a5 	.word	0x0801b8a5

0801b908 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801b908:	b580      	push	{r7, lr}
 801b90a:	b082      	sub	sp, #8
 801b90c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b90e:	2301      	movs	r3, #1
 801b910:	607b      	str	r3, [r7, #4]
 801b912:	e00e      	b.n	801b932 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b914:	4a0a      	ldr	r2, [pc, #40]	; (801b940 <sys_timeouts_init+0x38>)
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	00db      	lsls	r3, r3, #3
 801b920:	4a07      	ldr	r2, [pc, #28]	; (801b940 <sys_timeouts_init+0x38>)
 801b922:	4413      	add	r3, r2
 801b924:	461a      	mov	r2, r3
 801b926:	4907      	ldr	r1, [pc, #28]	; (801b944 <sys_timeouts_init+0x3c>)
 801b928:	f000 f80e 	bl	801b948 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	3301      	adds	r3, #1
 801b930:	607b      	str	r3, [r7, #4]
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	2b04      	cmp	r3, #4
 801b936:	d9ed      	bls.n	801b914 <sys_timeouts_init+0xc>
  }
}
 801b938:	bf00      	nop
 801b93a:	3708      	adds	r7, #8
 801b93c:	46bd      	mov	sp, r7
 801b93e:	bd80      	pop	{r7, pc}
 801b940:	08025370 	.word	0x08025370
 801b944:	0801b8a5 	.word	0x0801b8a5

0801b948 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801b948:	b580      	push	{r7, lr}
 801b94a:	b086      	sub	sp, #24
 801b94c:	af00      	add	r7, sp, #0
 801b94e:	60f8      	str	r0, [r7, #12]
 801b950:	60b9      	str	r1, [r7, #8]
 801b952:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b954:	68fb      	ldr	r3, [r7, #12]
 801b956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b95a:	d306      	bcc.n	801b96a <sys_timeout+0x22>
 801b95c:	4b0a      	ldr	r3, [pc, #40]	; (801b988 <sys_timeout+0x40>)
 801b95e:	f240 1229 	movw	r2, #297	; 0x129
 801b962:	490a      	ldr	r1, [pc, #40]	; (801b98c <sys_timeout+0x44>)
 801b964:	480a      	ldr	r0, [pc, #40]	; (801b990 <sys_timeout+0x48>)
 801b966:	f005 fddb 	bl	8021520 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b96a:	f7f2 fb4b 	bl	800e004 <sys_now>
 801b96e:	4602      	mov	r2, r0
 801b970:	68fb      	ldr	r3, [r7, #12]
 801b972:	4413      	add	r3, r2
 801b974:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b976:	687a      	ldr	r2, [r7, #4]
 801b978:	68b9      	ldr	r1, [r7, #8]
 801b97a:	6978      	ldr	r0, [r7, #20]
 801b97c:	f7ff ff24 	bl	801b7c8 <sys_timeout_abs>
#endif
}
 801b980:	bf00      	nop
 801b982:	3718      	adds	r7, #24
 801b984:	46bd      	mov	sp, r7
 801b986:	bd80      	pop	{r7, pc}
 801b988:	08024360 	.word	0x08024360
 801b98c:	080243fc 	.word	0x080243fc
 801b990:	080243d4 	.word	0x080243d4

0801b994 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b994:	b580      	push	{r7, lr}
 801b996:	b084      	sub	sp, #16
 801b998:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b99a:	f7f2 fb33 	bl	800e004 <sys_now>
 801b99e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801b9a0:	4b17      	ldr	r3, [pc, #92]	; (801ba00 <sys_check_timeouts+0x6c>)
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801b9a6:	68bb      	ldr	r3, [r7, #8]
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	d022      	beq.n	801b9f2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b9ac:	68bb      	ldr	r3, [r7, #8]
 801b9ae:	685b      	ldr	r3, [r3, #4]
 801b9b0:	68fa      	ldr	r2, [r7, #12]
 801b9b2:	1ad3      	subs	r3, r2, r3
 801b9b4:	0fdb      	lsrs	r3, r3, #31
 801b9b6:	f003 0301 	and.w	r3, r3, #1
 801b9ba:	b2db      	uxtb	r3, r3
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d11a      	bne.n	801b9f6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801b9c0:	68bb      	ldr	r3, [r7, #8]
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	4a0e      	ldr	r2, [pc, #56]	; (801ba00 <sys_check_timeouts+0x6c>)
 801b9c6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801b9c8:	68bb      	ldr	r3, [r7, #8]
 801b9ca:	689b      	ldr	r3, [r3, #8]
 801b9cc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801b9ce:	68bb      	ldr	r3, [r7, #8]
 801b9d0:	68db      	ldr	r3, [r3, #12]
 801b9d2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801b9d4:	68bb      	ldr	r3, [r7, #8]
 801b9d6:	685b      	ldr	r3, [r3, #4]
 801b9d8:	4a0a      	ldr	r2, [pc, #40]	; (801ba04 <sys_check_timeouts+0x70>)
 801b9da:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b9dc:	68b9      	ldr	r1, [r7, #8]
 801b9de:	200a      	movs	r0, #10
 801b9e0:	f7f9 fc06 	bl	80151f0 <memp_free>
    if (handler != NULL) {
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d0da      	beq.n	801b9a0 <sys_check_timeouts+0xc>
      handler(arg);
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	6838      	ldr	r0, [r7, #0]
 801b9ee:	4798      	blx	r3
  do {
 801b9f0:	e7d6      	b.n	801b9a0 <sys_check_timeouts+0xc>
      return;
 801b9f2:	bf00      	nop
 801b9f4:	e000      	b.n	801b9f8 <sys_check_timeouts+0x64>
      return;
 801b9f6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b9f8:	3710      	adds	r7, #16
 801b9fa:	46bd      	mov	sp, r7
 801b9fc:	bd80      	pop	{r7, pc}
 801b9fe:	bf00      	nop
 801ba00:	20008ff4 	.word	0x20008ff4
 801ba04:	20008ff8 	.word	0x20008ff8

0801ba08 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801ba08:	b580      	push	{r7, lr}
 801ba0a:	b082      	sub	sp, #8
 801ba0c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801ba0e:	4b16      	ldr	r3, [pc, #88]	; (801ba68 <sys_timeouts_sleeptime+0x60>)
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d102      	bne.n	801ba1c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801ba16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ba1a:	e020      	b.n	801ba5e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801ba1c:	f7f2 faf2 	bl	800e004 <sys_now>
 801ba20:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801ba22:	4b11      	ldr	r3, [pc, #68]	; (801ba68 <sys_timeouts_sleeptime+0x60>)
 801ba24:	681b      	ldr	r3, [r3, #0]
 801ba26:	685a      	ldr	r2, [r3, #4]
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	1ad3      	subs	r3, r2, r3
 801ba2c:	0fdb      	lsrs	r3, r3, #31
 801ba2e:	f003 0301 	and.w	r3, r3, #1
 801ba32:	b2db      	uxtb	r3, r3
 801ba34:	2b00      	cmp	r3, #0
 801ba36:	d001      	beq.n	801ba3c <sys_timeouts_sleeptime+0x34>
    return 0;
 801ba38:	2300      	movs	r3, #0
 801ba3a:	e010      	b.n	801ba5e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801ba3c:	4b0a      	ldr	r3, [pc, #40]	; (801ba68 <sys_timeouts_sleeptime+0x60>)
 801ba3e:	681b      	ldr	r3, [r3, #0]
 801ba40:	685a      	ldr	r2, [r3, #4]
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	1ad3      	subs	r3, r2, r3
 801ba46:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801ba48:	683b      	ldr	r3, [r7, #0]
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	da06      	bge.n	801ba5c <sys_timeouts_sleeptime+0x54>
 801ba4e:	4b07      	ldr	r3, [pc, #28]	; (801ba6c <sys_timeouts_sleeptime+0x64>)
 801ba50:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801ba54:	4906      	ldr	r1, [pc, #24]	; (801ba70 <sys_timeouts_sleeptime+0x68>)
 801ba56:	4807      	ldr	r0, [pc, #28]	; (801ba74 <sys_timeouts_sleeptime+0x6c>)
 801ba58:	f005 fd62 	bl	8021520 <iprintf>
    return ret;
 801ba5c:	683b      	ldr	r3, [r7, #0]
  }
}
 801ba5e:	4618      	mov	r0, r3
 801ba60:	3708      	adds	r7, #8
 801ba62:	46bd      	mov	sp, r7
 801ba64:	bd80      	pop	{r7, pc}
 801ba66:	bf00      	nop
 801ba68:	20008ff4 	.word	0x20008ff4
 801ba6c:	08024360 	.word	0x08024360
 801ba70:	08024434 	.word	0x08024434
 801ba74:	080243d4 	.word	0x080243d4

0801ba78 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ba78:	b580      	push	{r7, lr}
 801ba7a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ba7c:	f005 fdcc 	bl	8021618 <rand>
 801ba80:	4603      	mov	r3, r0
 801ba82:	b29b      	uxth	r3, r3
 801ba84:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ba88:	b29b      	uxth	r3, r3
 801ba8a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ba8e:	b29a      	uxth	r2, r3
 801ba90:	4b01      	ldr	r3, [pc, #4]	; (801ba98 <udp_init+0x20>)
 801ba92:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ba94:	bf00      	nop
 801ba96:	bd80      	pop	{r7, pc}
 801ba98:	2000003c 	.word	0x2000003c

0801ba9c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801ba9c:	b480      	push	{r7}
 801ba9e:	b083      	sub	sp, #12
 801baa0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801baa2:	2300      	movs	r3, #0
 801baa4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801baa6:	4b17      	ldr	r3, [pc, #92]	; (801bb04 <udp_new_port+0x68>)
 801baa8:	881b      	ldrh	r3, [r3, #0]
 801baaa:	1c5a      	adds	r2, r3, #1
 801baac:	b291      	uxth	r1, r2
 801baae:	4a15      	ldr	r2, [pc, #84]	; (801bb04 <udp_new_port+0x68>)
 801bab0:	8011      	strh	r1, [r2, #0]
 801bab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bab6:	4293      	cmp	r3, r2
 801bab8:	d103      	bne.n	801bac2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801baba:	4b12      	ldr	r3, [pc, #72]	; (801bb04 <udp_new_port+0x68>)
 801babc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801bac0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bac2:	4b11      	ldr	r3, [pc, #68]	; (801bb08 <udp_new_port+0x6c>)
 801bac4:	681b      	ldr	r3, [r3, #0]
 801bac6:	603b      	str	r3, [r7, #0]
 801bac8:	e011      	b.n	801baee <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801baca:	683b      	ldr	r3, [r7, #0]
 801bacc:	8a5a      	ldrh	r2, [r3, #18]
 801bace:	4b0d      	ldr	r3, [pc, #52]	; (801bb04 <udp_new_port+0x68>)
 801bad0:	881b      	ldrh	r3, [r3, #0]
 801bad2:	429a      	cmp	r2, r3
 801bad4:	d108      	bne.n	801bae8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801bad6:	88fb      	ldrh	r3, [r7, #6]
 801bad8:	3301      	adds	r3, #1
 801bada:	80fb      	strh	r3, [r7, #6]
 801badc:	88fb      	ldrh	r3, [r7, #6]
 801bade:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801bae2:	d3e0      	bcc.n	801baa6 <udp_new_port+0xa>
        return 0;
 801bae4:	2300      	movs	r3, #0
 801bae6:	e007      	b.n	801baf8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bae8:	683b      	ldr	r3, [r7, #0]
 801baea:	68db      	ldr	r3, [r3, #12]
 801baec:	603b      	str	r3, [r7, #0]
 801baee:	683b      	ldr	r3, [r7, #0]
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	d1ea      	bne.n	801baca <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801baf4:	4b03      	ldr	r3, [pc, #12]	; (801bb04 <udp_new_port+0x68>)
 801baf6:	881b      	ldrh	r3, [r3, #0]
}
 801baf8:	4618      	mov	r0, r3
 801bafa:	370c      	adds	r7, #12
 801bafc:	46bd      	mov	sp, r7
 801bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb02:	4770      	bx	lr
 801bb04:	2000003c 	.word	0x2000003c
 801bb08:	2001034c 	.word	0x2001034c

0801bb0c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801bb0c:	b580      	push	{r7, lr}
 801bb0e:	b084      	sub	sp, #16
 801bb10:	af00      	add	r7, sp, #0
 801bb12:	60f8      	str	r0, [r7, #12]
 801bb14:	60b9      	str	r1, [r7, #8]
 801bb16:	4613      	mov	r3, r2
 801bb18:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801bb1a:	68fb      	ldr	r3, [r7, #12]
 801bb1c:	2b00      	cmp	r3, #0
 801bb1e:	d105      	bne.n	801bb2c <udp_input_local_match+0x20>
 801bb20:	4b27      	ldr	r3, [pc, #156]	; (801bbc0 <udp_input_local_match+0xb4>)
 801bb22:	2287      	movs	r2, #135	; 0x87
 801bb24:	4927      	ldr	r1, [pc, #156]	; (801bbc4 <udp_input_local_match+0xb8>)
 801bb26:	4828      	ldr	r0, [pc, #160]	; (801bbc8 <udp_input_local_match+0xbc>)
 801bb28:	f005 fcfa 	bl	8021520 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801bb2c:	68bb      	ldr	r3, [r7, #8]
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	d105      	bne.n	801bb3e <udp_input_local_match+0x32>
 801bb32:	4b23      	ldr	r3, [pc, #140]	; (801bbc0 <udp_input_local_match+0xb4>)
 801bb34:	2288      	movs	r2, #136	; 0x88
 801bb36:	4925      	ldr	r1, [pc, #148]	; (801bbcc <udp_input_local_match+0xc0>)
 801bb38:	4823      	ldr	r0, [pc, #140]	; (801bbc8 <udp_input_local_match+0xbc>)
 801bb3a:	f005 fcf1 	bl	8021520 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bb3e:	68fb      	ldr	r3, [r7, #12]
 801bb40:	7a1b      	ldrb	r3, [r3, #8]
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d00b      	beq.n	801bb5e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801bb46:	68fb      	ldr	r3, [r7, #12]
 801bb48:	7a1a      	ldrb	r2, [r3, #8]
 801bb4a:	4b21      	ldr	r3, [pc, #132]	; (801bbd0 <udp_input_local_match+0xc4>)
 801bb4c:	685b      	ldr	r3, [r3, #4]
 801bb4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bb52:	3301      	adds	r3, #1
 801bb54:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bb56:	429a      	cmp	r2, r3
 801bb58:	d001      	beq.n	801bb5e <udp_input_local_match+0x52>
    return 0;
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	e02b      	b.n	801bbb6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801bb5e:	79fb      	ldrb	r3, [r7, #7]
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	d018      	beq.n	801bb96 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bb64:	68fb      	ldr	r3, [r7, #12]
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	d013      	beq.n	801bb92 <udp_input_local_match+0x86>
 801bb6a:	68fb      	ldr	r3, [r7, #12]
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d00f      	beq.n	801bb92 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801bb72:	4b17      	ldr	r3, [pc, #92]	; (801bbd0 <udp_input_local_match+0xc4>)
 801bb74:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bb76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801bb7a:	d00a      	beq.n	801bb92 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801bb7c:	68fb      	ldr	r3, [r7, #12]
 801bb7e:	681a      	ldr	r2, [r3, #0]
 801bb80:	4b13      	ldr	r3, [pc, #76]	; (801bbd0 <udp_input_local_match+0xc4>)
 801bb82:	695b      	ldr	r3, [r3, #20]
 801bb84:	405a      	eors	r2, r3
 801bb86:	68bb      	ldr	r3, [r7, #8]
 801bb88:	3308      	adds	r3, #8
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d110      	bne.n	801bbb4 <udp_input_local_match+0xa8>
          return 1;
 801bb92:	2301      	movs	r3, #1
 801bb94:	e00f      	b.n	801bbb6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801bb96:	68fb      	ldr	r3, [r7, #12]
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d009      	beq.n	801bbb0 <udp_input_local_match+0xa4>
 801bb9c:	68fb      	ldr	r3, [r7, #12]
 801bb9e:	681b      	ldr	r3, [r3, #0]
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	d005      	beq.n	801bbb0 <udp_input_local_match+0xa4>
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	681a      	ldr	r2, [r3, #0]
 801bba8:	4b09      	ldr	r3, [pc, #36]	; (801bbd0 <udp_input_local_match+0xc4>)
 801bbaa:	695b      	ldr	r3, [r3, #20]
 801bbac:	429a      	cmp	r2, r3
 801bbae:	d101      	bne.n	801bbb4 <udp_input_local_match+0xa8>
        return 1;
 801bbb0:	2301      	movs	r3, #1
 801bbb2:	e000      	b.n	801bbb6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801bbb4:	2300      	movs	r3, #0
}
 801bbb6:	4618      	mov	r0, r3
 801bbb8:	3710      	adds	r7, #16
 801bbba:	46bd      	mov	sp, r7
 801bbbc:	bd80      	pop	{r7, pc}
 801bbbe:	bf00      	nop
 801bbc0:	08024448 	.word	0x08024448
 801bbc4:	08024478 	.word	0x08024478
 801bbc8:	0802449c 	.word	0x0802449c
 801bbcc:	080244c4 	.word	0x080244c4
 801bbd0:	2000cc00 	.word	0x2000cc00

0801bbd4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801bbd4:	b590      	push	{r4, r7, lr}
 801bbd6:	b08d      	sub	sp, #52	; 0x34
 801bbd8:	af02      	add	r7, sp, #8
 801bbda:	6078      	str	r0, [r7, #4]
 801bbdc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801bbde:	2300      	movs	r3, #0
 801bbe0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d105      	bne.n	801bbf4 <udp_input+0x20>
 801bbe8:	4b7c      	ldr	r3, [pc, #496]	; (801bddc <udp_input+0x208>)
 801bbea:	22cf      	movs	r2, #207	; 0xcf
 801bbec:	497c      	ldr	r1, [pc, #496]	; (801bde0 <udp_input+0x20c>)
 801bbee:	487d      	ldr	r0, [pc, #500]	; (801bde4 <udp_input+0x210>)
 801bbf0:	f005 fc96 	bl	8021520 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801bbf4:	683b      	ldr	r3, [r7, #0]
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d105      	bne.n	801bc06 <udp_input+0x32>
 801bbfa:	4b78      	ldr	r3, [pc, #480]	; (801bddc <udp_input+0x208>)
 801bbfc:	22d0      	movs	r2, #208	; 0xd0
 801bbfe:	497a      	ldr	r1, [pc, #488]	; (801bde8 <udp_input+0x214>)
 801bc00:	4878      	ldr	r0, [pc, #480]	; (801bde4 <udp_input+0x210>)
 801bc02:	f005 fc8d 	bl	8021520 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	895b      	ldrh	r3, [r3, #10]
 801bc0a:	2b07      	cmp	r3, #7
 801bc0c:	d803      	bhi.n	801bc16 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801bc0e:	6878      	ldr	r0, [r7, #4]
 801bc10:	f7fa f9b4 	bl	8015f7c <pbuf_free>
    goto end;
 801bc14:	e0de      	b.n	801bdd4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	685b      	ldr	r3, [r3, #4]
 801bc1a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801bc1c:	4b73      	ldr	r3, [pc, #460]	; (801bdec <udp_input+0x218>)
 801bc1e:	695a      	ldr	r2, [r3, #20]
 801bc20:	4b72      	ldr	r3, [pc, #456]	; (801bdec <udp_input+0x218>)
 801bc22:	681b      	ldr	r3, [r3, #0]
 801bc24:	4619      	mov	r1, r3
 801bc26:	4610      	mov	r0, r2
 801bc28:	f003 fe16 	bl	801f858 <ip4_addr_isbroadcast_u32>
 801bc2c:	4603      	mov	r3, r0
 801bc2e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801bc30:	697b      	ldr	r3, [r7, #20]
 801bc32:	881b      	ldrh	r3, [r3, #0]
 801bc34:	b29b      	uxth	r3, r3
 801bc36:	4618      	mov	r0, r3
 801bc38:	f7f8 fdd2 	bl	80147e0 <lwip_htons>
 801bc3c:	4603      	mov	r3, r0
 801bc3e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801bc40:	697b      	ldr	r3, [r7, #20]
 801bc42:	885b      	ldrh	r3, [r3, #2]
 801bc44:	b29b      	uxth	r3, r3
 801bc46:	4618      	mov	r0, r3
 801bc48:	f7f8 fdca 	bl	80147e0 <lwip_htons>
 801bc4c:	4603      	mov	r3, r0
 801bc4e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801bc50:	2300      	movs	r3, #0
 801bc52:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801bc54:	2300      	movs	r3, #0
 801bc56:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801bc58:	2300      	movs	r3, #0
 801bc5a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bc5c:	4b64      	ldr	r3, [pc, #400]	; (801bdf0 <udp_input+0x21c>)
 801bc5e:	681b      	ldr	r3, [r3, #0]
 801bc60:	627b      	str	r3, [r7, #36]	; 0x24
 801bc62:	e054      	b.n	801bd0e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801bc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc66:	8a5b      	ldrh	r3, [r3, #18]
 801bc68:	89fa      	ldrh	r2, [r7, #14]
 801bc6a:	429a      	cmp	r2, r3
 801bc6c:	d14a      	bne.n	801bd04 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801bc6e:	7cfb      	ldrb	r3, [r7, #19]
 801bc70:	461a      	mov	r2, r3
 801bc72:	6839      	ldr	r1, [r7, #0]
 801bc74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bc76:	f7ff ff49 	bl	801bb0c <udp_input_local_match>
 801bc7a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	d041      	beq.n	801bd04 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801bc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc82:	7c1b      	ldrb	r3, [r3, #16]
 801bc84:	f003 0304 	and.w	r3, r3, #4
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	d11d      	bne.n	801bcc8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801bc8c:	69fb      	ldr	r3, [r7, #28]
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d102      	bne.n	801bc98 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801bc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc94:	61fb      	str	r3, [r7, #28]
 801bc96:	e017      	b.n	801bcc8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801bc98:	7cfb      	ldrb	r3, [r7, #19]
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d014      	beq.n	801bcc8 <udp_input+0xf4>
 801bc9e:	4b53      	ldr	r3, [pc, #332]	; (801bdec <udp_input+0x218>)
 801bca0:	695b      	ldr	r3, [r3, #20]
 801bca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801bca6:	d10f      	bne.n	801bcc8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801bca8:	69fb      	ldr	r3, [r7, #28]
 801bcaa:	681a      	ldr	r2, [r3, #0]
 801bcac:	683b      	ldr	r3, [r7, #0]
 801bcae:	3304      	adds	r3, #4
 801bcb0:	681b      	ldr	r3, [r3, #0]
 801bcb2:	429a      	cmp	r2, r3
 801bcb4:	d008      	beq.n	801bcc8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801bcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcb8:	681a      	ldr	r2, [r3, #0]
 801bcba:	683b      	ldr	r3, [r7, #0]
 801bcbc:	3304      	adds	r3, #4
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	429a      	cmp	r2, r3
 801bcc2:	d101      	bne.n	801bcc8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801bcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcc6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801bcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcca:	8a9b      	ldrh	r3, [r3, #20]
 801bccc:	8a3a      	ldrh	r2, [r7, #16]
 801bcce:	429a      	cmp	r2, r3
 801bcd0:	d118      	bne.n	801bd04 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcd4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801bcd6:	2b00      	cmp	r3, #0
 801bcd8:	d005      	beq.n	801bce6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801bcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcdc:	685a      	ldr	r2, [r3, #4]
 801bcde:	4b43      	ldr	r3, [pc, #268]	; (801bdec <udp_input+0x218>)
 801bce0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801bce2:	429a      	cmp	r2, r3
 801bce4:	d10e      	bne.n	801bd04 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801bce6:	6a3b      	ldr	r3, [r7, #32]
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	d014      	beq.n	801bd16 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801bcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcee:	68da      	ldr	r2, [r3, #12]
 801bcf0:	6a3b      	ldr	r3, [r7, #32]
 801bcf2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801bcf4:	4b3e      	ldr	r3, [pc, #248]	; (801bdf0 <udp_input+0x21c>)
 801bcf6:	681a      	ldr	r2, [r3, #0]
 801bcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcfa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801bcfc:	4a3c      	ldr	r2, [pc, #240]	; (801bdf0 <udp_input+0x21c>)
 801bcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd00:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801bd02:	e008      	b.n	801bd16 <udp_input+0x142>
      }
    }

    prev = pcb;
 801bd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd06:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd0a:	68db      	ldr	r3, [r3, #12]
 801bd0c:	627b      	str	r3, [r7, #36]	; 0x24
 801bd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d1a7      	bne.n	801bc64 <udp_input+0x90>
 801bd14:	e000      	b.n	801bd18 <udp_input+0x144>
        break;
 801bd16:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801bd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	d101      	bne.n	801bd22 <udp_input+0x14e>
    pcb = uncon_pcb;
 801bd1e:	69fb      	ldr	r3, [r7, #28]
 801bd20:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801bd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	d002      	beq.n	801bd2e <udp_input+0x15a>
    for_us = 1;
 801bd28:	2301      	movs	r3, #1
 801bd2a:	76fb      	strb	r3, [r7, #27]
 801bd2c:	e00a      	b.n	801bd44 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801bd2e:	683b      	ldr	r3, [r7, #0]
 801bd30:	3304      	adds	r3, #4
 801bd32:	681a      	ldr	r2, [r3, #0]
 801bd34:	4b2d      	ldr	r3, [pc, #180]	; (801bdec <udp_input+0x218>)
 801bd36:	695b      	ldr	r3, [r3, #20]
 801bd38:	429a      	cmp	r2, r3
 801bd3a:	bf0c      	ite	eq
 801bd3c:	2301      	moveq	r3, #1
 801bd3e:	2300      	movne	r3, #0
 801bd40:	b2db      	uxtb	r3, r3
 801bd42:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801bd44:	7efb      	ldrb	r3, [r7, #27]
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d041      	beq.n	801bdce <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801bd4a:	2108      	movs	r1, #8
 801bd4c:	6878      	ldr	r0, [r7, #4]
 801bd4e:	f7fa f88f 	bl	8015e70 <pbuf_remove_header>
 801bd52:	4603      	mov	r3, r0
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d00a      	beq.n	801bd6e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801bd58:	4b20      	ldr	r3, [pc, #128]	; (801bddc <udp_input+0x208>)
 801bd5a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801bd5e:	4925      	ldr	r1, [pc, #148]	; (801bdf4 <udp_input+0x220>)
 801bd60:	4820      	ldr	r0, [pc, #128]	; (801bde4 <udp_input+0x210>)
 801bd62:	f005 fbdd 	bl	8021520 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801bd66:	6878      	ldr	r0, [r7, #4]
 801bd68:	f7fa f908 	bl	8015f7c <pbuf_free>
      goto end;
 801bd6c:	e032      	b.n	801bdd4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801bd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d012      	beq.n	801bd9a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801bd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd76:	699b      	ldr	r3, [r3, #24]
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d00a      	beq.n	801bd92 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801bd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd7e:	699c      	ldr	r4, [r3, #24]
 801bd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd82:	69d8      	ldr	r0, [r3, #28]
 801bd84:	8a3b      	ldrh	r3, [r7, #16]
 801bd86:	9300      	str	r3, [sp, #0]
 801bd88:	4b1b      	ldr	r3, [pc, #108]	; (801bdf8 <udp_input+0x224>)
 801bd8a:	687a      	ldr	r2, [r7, #4]
 801bd8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801bd8e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801bd90:	e021      	b.n	801bdd6 <udp_input+0x202>
        pbuf_free(p);
 801bd92:	6878      	ldr	r0, [r7, #4]
 801bd94:	f7fa f8f2 	bl	8015f7c <pbuf_free>
        goto end;
 801bd98:	e01c      	b.n	801bdd4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801bd9a:	7cfb      	ldrb	r3, [r7, #19]
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d112      	bne.n	801bdc6 <udp_input+0x1f2>
 801bda0:	4b12      	ldr	r3, [pc, #72]	; (801bdec <udp_input+0x218>)
 801bda2:	695b      	ldr	r3, [r3, #20]
 801bda4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801bda8:	2be0      	cmp	r3, #224	; 0xe0
 801bdaa:	d00c      	beq.n	801bdc6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801bdac:	4b0f      	ldr	r3, [pc, #60]	; (801bdec <udp_input+0x218>)
 801bdae:	899b      	ldrh	r3, [r3, #12]
 801bdb0:	3308      	adds	r3, #8
 801bdb2:	b29b      	uxth	r3, r3
 801bdb4:	b21b      	sxth	r3, r3
 801bdb6:	4619      	mov	r1, r3
 801bdb8:	6878      	ldr	r0, [r7, #4]
 801bdba:	f7fa f8cc 	bl	8015f56 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801bdbe:	2103      	movs	r1, #3
 801bdc0:	6878      	ldr	r0, [r7, #4]
 801bdc2:	f003 fa0d 	bl	801f1e0 <icmp_dest_unreach>
      pbuf_free(p);
 801bdc6:	6878      	ldr	r0, [r7, #4]
 801bdc8:	f7fa f8d8 	bl	8015f7c <pbuf_free>
  return;
 801bdcc:	e003      	b.n	801bdd6 <udp_input+0x202>
    pbuf_free(p);
 801bdce:	6878      	ldr	r0, [r7, #4]
 801bdd0:	f7fa f8d4 	bl	8015f7c <pbuf_free>
  return;
 801bdd4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801bdd6:	372c      	adds	r7, #44	; 0x2c
 801bdd8:	46bd      	mov	sp, r7
 801bdda:	bd90      	pop	{r4, r7, pc}
 801bddc:	08024448 	.word	0x08024448
 801bde0:	080244ec 	.word	0x080244ec
 801bde4:	0802449c 	.word	0x0802449c
 801bde8:	08024504 	.word	0x08024504
 801bdec:	2000cc00 	.word	0x2000cc00
 801bdf0:	2001034c 	.word	0x2001034c
 801bdf4:	08024520 	.word	0x08024520
 801bdf8:	2000cc10 	.word	0x2000cc10

0801bdfc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801bdfc:	b580      	push	{r7, lr}
 801bdfe:	b088      	sub	sp, #32
 801be00:	af02      	add	r7, sp, #8
 801be02:	60f8      	str	r0, [r7, #12]
 801be04:	60b9      	str	r1, [r7, #8]
 801be06:	607a      	str	r2, [r7, #4]
 801be08:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801be0a:	68fb      	ldr	r3, [r7, #12]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d109      	bne.n	801be24 <udp_sendto_if+0x28>
 801be10:	4b2e      	ldr	r3, [pc, #184]	; (801becc <udp_sendto_if+0xd0>)
 801be12:	f44f 7220 	mov.w	r2, #640	; 0x280
 801be16:	492e      	ldr	r1, [pc, #184]	; (801bed0 <udp_sendto_if+0xd4>)
 801be18:	482e      	ldr	r0, [pc, #184]	; (801bed4 <udp_sendto_if+0xd8>)
 801be1a:	f005 fb81 	bl	8021520 <iprintf>
 801be1e:	f06f 030f 	mvn.w	r3, #15
 801be22:	e04f      	b.n	801bec4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801be24:	68bb      	ldr	r3, [r7, #8]
 801be26:	2b00      	cmp	r3, #0
 801be28:	d109      	bne.n	801be3e <udp_sendto_if+0x42>
 801be2a:	4b28      	ldr	r3, [pc, #160]	; (801becc <udp_sendto_if+0xd0>)
 801be2c:	f240 2281 	movw	r2, #641	; 0x281
 801be30:	4929      	ldr	r1, [pc, #164]	; (801bed8 <udp_sendto_if+0xdc>)
 801be32:	4828      	ldr	r0, [pc, #160]	; (801bed4 <udp_sendto_if+0xd8>)
 801be34:	f005 fb74 	bl	8021520 <iprintf>
 801be38:	f06f 030f 	mvn.w	r3, #15
 801be3c:	e042      	b.n	801bec4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	2b00      	cmp	r3, #0
 801be42:	d109      	bne.n	801be58 <udp_sendto_if+0x5c>
 801be44:	4b21      	ldr	r3, [pc, #132]	; (801becc <udp_sendto_if+0xd0>)
 801be46:	f240 2282 	movw	r2, #642	; 0x282
 801be4a:	4924      	ldr	r1, [pc, #144]	; (801bedc <udp_sendto_if+0xe0>)
 801be4c:	4821      	ldr	r0, [pc, #132]	; (801bed4 <udp_sendto_if+0xd8>)
 801be4e:	f005 fb67 	bl	8021520 <iprintf>
 801be52:	f06f 030f 	mvn.w	r3, #15
 801be56:	e035      	b.n	801bec4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801be58:	6a3b      	ldr	r3, [r7, #32]
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d109      	bne.n	801be72 <udp_sendto_if+0x76>
 801be5e:	4b1b      	ldr	r3, [pc, #108]	; (801becc <udp_sendto_if+0xd0>)
 801be60:	f240 2283 	movw	r2, #643	; 0x283
 801be64:	491e      	ldr	r1, [pc, #120]	; (801bee0 <udp_sendto_if+0xe4>)
 801be66:	481b      	ldr	r0, [pc, #108]	; (801bed4 <udp_sendto_if+0xd8>)
 801be68:	f005 fb5a 	bl	8021520 <iprintf>
 801be6c:	f06f 030f 	mvn.w	r3, #15
 801be70:	e028      	b.n	801bec4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801be72:	68fb      	ldr	r3, [r7, #12]
 801be74:	2b00      	cmp	r3, #0
 801be76:	d009      	beq.n	801be8c <udp_sendto_if+0x90>
 801be78:	68fb      	ldr	r3, [r7, #12]
 801be7a:	681b      	ldr	r3, [r3, #0]
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d005      	beq.n	801be8c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801be80:	68fb      	ldr	r3, [r7, #12]
 801be82:	681b      	ldr	r3, [r3, #0]
 801be84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801be88:	2be0      	cmp	r3, #224	; 0xe0
 801be8a:	d103      	bne.n	801be94 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801be8c:	6a3b      	ldr	r3, [r7, #32]
 801be8e:	3304      	adds	r3, #4
 801be90:	617b      	str	r3, [r7, #20]
 801be92:	e00b      	b.n	801beac <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801be94:	68fb      	ldr	r3, [r7, #12]
 801be96:	681a      	ldr	r2, [r3, #0]
 801be98:	6a3b      	ldr	r3, [r7, #32]
 801be9a:	3304      	adds	r3, #4
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	429a      	cmp	r2, r3
 801bea0:	d002      	beq.n	801bea8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801bea2:	f06f 0303 	mvn.w	r3, #3
 801bea6:	e00d      	b.n	801bec4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801beac:	887a      	ldrh	r2, [r7, #2]
 801beae:	697b      	ldr	r3, [r7, #20]
 801beb0:	9301      	str	r3, [sp, #4]
 801beb2:	6a3b      	ldr	r3, [r7, #32]
 801beb4:	9300      	str	r3, [sp, #0]
 801beb6:	4613      	mov	r3, r2
 801beb8:	687a      	ldr	r2, [r7, #4]
 801beba:	68b9      	ldr	r1, [r7, #8]
 801bebc:	68f8      	ldr	r0, [r7, #12]
 801bebe:	f000 f811 	bl	801bee4 <udp_sendto_if_src>
 801bec2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801bec4:	4618      	mov	r0, r3
 801bec6:	3718      	adds	r7, #24
 801bec8:	46bd      	mov	sp, r7
 801beca:	bd80      	pop	{r7, pc}
 801becc:	08024448 	.word	0x08024448
 801bed0:	080245bc 	.word	0x080245bc
 801bed4:	0802449c 	.word	0x0802449c
 801bed8:	080245d8 	.word	0x080245d8
 801bedc:	080245f4 	.word	0x080245f4
 801bee0:	08024614 	.word	0x08024614

0801bee4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801bee4:	b580      	push	{r7, lr}
 801bee6:	b08c      	sub	sp, #48	; 0x30
 801bee8:	af04      	add	r7, sp, #16
 801beea:	60f8      	str	r0, [r7, #12]
 801beec:	60b9      	str	r1, [r7, #8]
 801beee:	607a      	str	r2, [r7, #4]
 801bef0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801bef2:	68fb      	ldr	r3, [r7, #12]
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d109      	bne.n	801bf0c <udp_sendto_if_src+0x28>
 801bef8:	4b65      	ldr	r3, [pc, #404]	; (801c090 <udp_sendto_if_src+0x1ac>)
 801befa:	f240 22d1 	movw	r2, #721	; 0x2d1
 801befe:	4965      	ldr	r1, [pc, #404]	; (801c094 <udp_sendto_if_src+0x1b0>)
 801bf00:	4865      	ldr	r0, [pc, #404]	; (801c098 <udp_sendto_if_src+0x1b4>)
 801bf02:	f005 fb0d 	bl	8021520 <iprintf>
 801bf06:	f06f 030f 	mvn.w	r3, #15
 801bf0a:	e0bc      	b.n	801c086 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801bf0c:	68bb      	ldr	r3, [r7, #8]
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	d109      	bne.n	801bf26 <udp_sendto_if_src+0x42>
 801bf12:	4b5f      	ldr	r3, [pc, #380]	; (801c090 <udp_sendto_if_src+0x1ac>)
 801bf14:	f240 22d2 	movw	r2, #722	; 0x2d2
 801bf18:	4960      	ldr	r1, [pc, #384]	; (801c09c <udp_sendto_if_src+0x1b8>)
 801bf1a:	485f      	ldr	r0, [pc, #380]	; (801c098 <udp_sendto_if_src+0x1b4>)
 801bf1c:	f005 fb00 	bl	8021520 <iprintf>
 801bf20:	f06f 030f 	mvn.w	r3, #15
 801bf24:	e0af      	b.n	801c086 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	d109      	bne.n	801bf40 <udp_sendto_if_src+0x5c>
 801bf2c:	4b58      	ldr	r3, [pc, #352]	; (801c090 <udp_sendto_if_src+0x1ac>)
 801bf2e:	f240 22d3 	movw	r2, #723	; 0x2d3
 801bf32:	495b      	ldr	r1, [pc, #364]	; (801c0a0 <udp_sendto_if_src+0x1bc>)
 801bf34:	4858      	ldr	r0, [pc, #352]	; (801c098 <udp_sendto_if_src+0x1b4>)
 801bf36:	f005 faf3 	bl	8021520 <iprintf>
 801bf3a:	f06f 030f 	mvn.w	r3, #15
 801bf3e:	e0a2      	b.n	801c086 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801bf40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d109      	bne.n	801bf5a <udp_sendto_if_src+0x76>
 801bf46:	4b52      	ldr	r3, [pc, #328]	; (801c090 <udp_sendto_if_src+0x1ac>)
 801bf48:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801bf4c:	4955      	ldr	r1, [pc, #340]	; (801c0a4 <udp_sendto_if_src+0x1c0>)
 801bf4e:	4852      	ldr	r0, [pc, #328]	; (801c098 <udp_sendto_if_src+0x1b4>)
 801bf50:	f005 fae6 	bl	8021520 <iprintf>
 801bf54:	f06f 030f 	mvn.w	r3, #15
 801bf58:	e095      	b.n	801c086 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801bf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	d109      	bne.n	801bf74 <udp_sendto_if_src+0x90>
 801bf60:	4b4b      	ldr	r3, [pc, #300]	; (801c090 <udp_sendto_if_src+0x1ac>)
 801bf62:	f240 22d5 	movw	r2, #725	; 0x2d5
 801bf66:	4950      	ldr	r1, [pc, #320]	; (801c0a8 <udp_sendto_if_src+0x1c4>)
 801bf68:	484b      	ldr	r0, [pc, #300]	; (801c098 <udp_sendto_if_src+0x1b4>)
 801bf6a:	f005 fad9 	bl	8021520 <iprintf>
 801bf6e:	f06f 030f 	mvn.w	r3, #15
 801bf72:	e088      	b.n	801c086 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801bf74:	68fb      	ldr	r3, [r7, #12]
 801bf76:	8a5b      	ldrh	r3, [r3, #18]
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	d10f      	bne.n	801bf9c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801bf7c:	68f9      	ldr	r1, [r7, #12]
 801bf7e:	68fb      	ldr	r3, [r7, #12]
 801bf80:	8a5b      	ldrh	r3, [r3, #18]
 801bf82:	461a      	mov	r2, r3
 801bf84:	68f8      	ldr	r0, [r7, #12]
 801bf86:	f000 f893 	bl	801c0b0 <udp_bind>
 801bf8a:	4603      	mov	r3, r0
 801bf8c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801bf8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d002      	beq.n	801bf9c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801bf96:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bf9a:	e074      	b.n	801c086 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801bf9c:	68bb      	ldr	r3, [r7, #8]
 801bf9e:	891b      	ldrh	r3, [r3, #8]
 801bfa0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801bfa4:	4293      	cmp	r3, r2
 801bfa6:	d902      	bls.n	801bfae <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801bfa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bfac:	e06b      	b.n	801c086 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801bfae:	2108      	movs	r1, #8
 801bfb0:	68b8      	ldr	r0, [r7, #8]
 801bfb2:	f7f9 ff4d 	bl	8015e50 <pbuf_add_header>
 801bfb6:	4603      	mov	r3, r0
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	d015      	beq.n	801bfe8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801bfbc:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bfc0:	2108      	movs	r1, #8
 801bfc2:	2022      	movs	r0, #34	; 0x22
 801bfc4:	f7f9 fcfa 	bl	80159bc <pbuf_alloc>
 801bfc8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801bfca:	69fb      	ldr	r3, [r7, #28]
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	d102      	bne.n	801bfd6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801bfd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bfd4:	e057      	b.n	801c086 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801bfd6:	68bb      	ldr	r3, [r7, #8]
 801bfd8:	891b      	ldrh	r3, [r3, #8]
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d006      	beq.n	801bfec <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801bfde:	68b9      	ldr	r1, [r7, #8]
 801bfe0:	69f8      	ldr	r0, [r7, #28]
 801bfe2:	f7fa f8ef 	bl	80161c4 <pbuf_chain>
 801bfe6:	e001      	b.n	801bfec <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801bfe8:	68bb      	ldr	r3, [r7, #8]
 801bfea:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801bfec:	69fb      	ldr	r3, [r7, #28]
 801bfee:	895b      	ldrh	r3, [r3, #10]
 801bff0:	2b07      	cmp	r3, #7
 801bff2:	d806      	bhi.n	801c002 <udp_sendto_if_src+0x11e>
 801bff4:	4b26      	ldr	r3, [pc, #152]	; (801c090 <udp_sendto_if_src+0x1ac>)
 801bff6:	f240 320e 	movw	r2, #782	; 0x30e
 801bffa:	492c      	ldr	r1, [pc, #176]	; (801c0ac <udp_sendto_if_src+0x1c8>)
 801bffc:	4826      	ldr	r0, [pc, #152]	; (801c098 <udp_sendto_if_src+0x1b4>)
 801bffe:	f005 fa8f 	bl	8021520 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801c002:	69fb      	ldr	r3, [r7, #28]
 801c004:	685b      	ldr	r3, [r3, #4]
 801c006:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801c008:	68fb      	ldr	r3, [r7, #12]
 801c00a:	8a5b      	ldrh	r3, [r3, #18]
 801c00c:	4618      	mov	r0, r3
 801c00e:	f7f8 fbe7 	bl	80147e0 <lwip_htons>
 801c012:	4603      	mov	r3, r0
 801c014:	461a      	mov	r2, r3
 801c016:	697b      	ldr	r3, [r7, #20]
 801c018:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801c01a:	887b      	ldrh	r3, [r7, #2]
 801c01c:	4618      	mov	r0, r3
 801c01e:	f7f8 fbdf 	bl	80147e0 <lwip_htons>
 801c022:	4603      	mov	r3, r0
 801c024:	461a      	mov	r2, r3
 801c026:	697b      	ldr	r3, [r7, #20]
 801c028:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801c02a:	697b      	ldr	r3, [r7, #20]
 801c02c:	2200      	movs	r2, #0
 801c02e:	719a      	strb	r2, [r3, #6]
 801c030:	2200      	movs	r2, #0
 801c032:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801c034:	69fb      	ldr	r3, [r7, #28]
 801c036:	891b      	ldrh	r3, [r3, #8]
 801c038:	4618      	mov	r0, r3
 801c03a:	f7f8 fbd1 	bl	80147e0 <lwip_htons>
 801c03e:	4603      	mov	r3, r0
 801c040:	461a      	mov	r2, r3
 801c042:	697b      	ldr	r3, [r7, #20]
 801c044:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801c046:	2311      	movs	r3, #17
 801c048:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801c04a:	68fb      	ldr	r3, [r7, #12]
 801c04c:	7adb      	ldrb	r3, [r3, #11]
 801c04e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c050:	68fb      	ldr	r3, [r7, #12]
 801c052:	7a9b      	ldrb	r3, [r3, #10]
 801c054:	7cb9      	ldrb	r1, [r7, #18]
 801c056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c058:	9202      	str	r2, [sp, #8]
 801c05a:	7cfa      	ldrb	r2, [r7, #19]
 801c05c:	9201      	str	r2, [sp, #4]
 801c05e:	9300      	str	r3, [sp, #0]
 801c060:	460b      	mov	r3, r1
 801c062:	687a      	ldr	r2, [r7, #4]
 801c064:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c066:	69f8      	ldr	r0, [r7, #28]
 801c068:	f003 fb48 	bl	801f6fc <ip4_output_if_src>
 801c06c:	4603      	mov	r3, r0
 801c06e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801c070:	69fa      	ldr	r2, [r7, #28]
 801c072:	68bb      	ldr	r3, [r7, #8]
 801c074:	429a      	cmp	r2, r3
 801c076:	d004      	beq.n	801c082 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801c078:	69f8      	ldr	r0, [r7, #28]
 801c07a:	f7f9 ff7f 	bl	8015f7c <pbuf_free>
    q = NULL;
 801c07e:	2300      	movs	r3, #0
 801c080:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801c082:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801c086:	4618      	mov	r0, r3
 801c088:	3720      	adds	r7, #32
 801c08a:	46bd      	mov	sp, r7
 801c08c:	bd80      	pop	{r7, pc}
 801c08e:	bf00      	nop
 801c090:	08024448 	.word	0x08024448
 801c094:	08024634 	.word	0x08024634
 801c098:	0802449c 	.word	0x0802449c
 801c09c:	08024654 	.word	0x08024654
 801c0a0:	08024674 	.word	0x08024674
 801c0a4:	08024698 	.word	0x08024698
 801c0a8:	080246bc 	.word	0x080246bc
 801c0ac:	080246e0 	.word	0x080246e0

0801c0b0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c0b0:	b580      	push	{r7, lr}
 801c0b2:	b086      	sub	sp, #24
 801c0b4:	af00      	add	r7, sp, #0
 801c0b6:	60f8      	str	r0, [r7, #12]
 801c0b8:	60b9      	str	r1, [r7, #8]
 801c0ba:	4613      	mov	r3, r2
 801c0bc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c0be:	68bb      	ldr	r3, [r7, #8]
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	d101      	bne.n	801c0c8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801c0c4:	4b39      	ldr	r3, [pc, #228]	; (801c1ac <udp_bind+0xfc>)
 801c0c6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c0c8:	68fb      	ldr	r3, [r7, #12]
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d109      	bne.n	801c0e2 <udp_bind+0x32>
 801c0ce:	4b38      	ldr	r3, [pc, #224]	; (801c1b0 <udp_bind+0x100>)
 801c0d0:	f240 32b7 	movw	r2, #951	; 0x3b7
 801c0d4:	4937      	ldr	r1, [pc, #220]	; (801c1b4 <udp_bind+0x104>)
 801c0d6:	4838      	ldr	r0, [pc, #224]	; (801c1b8 <udp_bind+0x108>)
 801c0d8:	f005 fa22 	bl	8021520 <iprintf>
 801c0dc:	f06f 030f 	mvn.w	r3, #15
 801c0e0:	e060      	b.n	801c1a4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801c0e2:	2300      	movs	r3, #0
 801c0e4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c0e6:	4b35      	ldr	r3, [pc, #212]	; (801c1bc <udp_bind+0x10c>)
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	617b      	str	r3, [r7, #20]
 801c0ec:	e009      	b.n	801c102 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c0ee:	68fa      	ldr	r2, [r7, #12]
 801c0f0:	697b      	ldr	r3, [r7, #20]
 801c0f2:	429a      	cmp	r2, r3
 801c0f4:	d102      	bne.n	801c0fc <udp_bind+0x4c>
      rebind = 1;
 801c0f6:	2301      	movs	r3, #1
 801c0f8:	74fb      	strb	r3, [r7, #19]
      break;
 801c0fa:	e005      	b.n	801c108 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c0fc:	697b      	ldr	r3, [r7, #20]
 801c0fe:	68db      	ldr	r3, [r3, #12]
 801c100:	617b      	str	r3, [r7, #20]
 801c102:	697b      	ldr	r3, [r7, #20]
 801c104:	2b00      	cmp	r3, #0
 801c106:	d1f2      	bne.n	801c0ee <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801c108:	88fb      	ldrh	r3, [r7, #6]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d109      	bne.n	801c122 <udp_bind+0x72>
    port = udp_new_port();
 801c10e:	f7ff fcc5 	bl	801ba9c <udp_new_port>
 801c112:	4603      	mov	r3, r0
 801c114:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c116:	88fb      	ldrh	r3, [r7, #6]
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d12c      	bne.n	801c176 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801c11c:	f06f 0307 	mvn.w	r3, #7
 801c120:	e040      	b.n	801c1a4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c122:	4b26      	ldr	r3, [pc, #152]	; (801c1bc <udp_bind+0x10c>)
 801c124:	681b      	ldr	r3, [r3, #0]
 801c126:	617b      	str	r3, [r7, #20]
 801c128:	e022      	b.n	801c170 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801c12a:	68fa      	ldr	r2, [r7, #12]
 801c12c:	697b      	ldr	r3, [r7, #20]
 801c12e:	429a      	cmp	r2, r3
 801c130:	d01b      	beq.n	801c16a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c132:	697b      	ldr	r3, [r7, #20]
 801c134:	8a5b      	ldrh	r3, [r3, #18]
 801c136:	88fa      	ldrh	r2, [r7, #6]
 801c138:	429a      	cmp	r2, r3
 801c13a:	d116      	bne.n	801c16a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c13c:	697b      	ldr	r3, [r7, #20]
 801c13e:	681a      	ldr	r2, [r3, #0]
 801c140:	68bb      	ldr	r3, [r7, #8]
 801c142:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c144:	429a      	cmp	r2, r3
 801c146:	d00d      	beq.n	801c164 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c148:	68bb      	ldr	r3, [r7, #8]
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	d00a      	beq.n	801c164 <udp_bind+0xb4>
 801c14e:	68bb      	ldr	r3, [r7, #8]
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	2b00      	cmp	r3, #0
 801c154:	d006      	beq.n	801c164 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c156:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c158:	2b00      	cmp	r3, #0
 801c15a:	d003      	beq.n	801c164 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c15c:	697b      	ldr	r3, [r7, #20]
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	2b00      	cmp	r3, #0
 801c162:	d102      	bne.n	801c16a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c164:	f06f 0307 	mvn.w	r3, #7
 801c168:	e01c      	b.n	801c1a4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c16a:	697b      	ldr	r3, [r7, #20]
 801c16c:	68db      	ldr	r3, [r3, #12]
 801c16e:	617b      	str	r3, [r7, #20]
 801c170:	697b      	ldr	r3, [r7, #20]
 801c172:	2b00      	cmp	r3, #0
 801c174:	d1d9      	bne.n	801c12a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c176:	68bb      	ldr	r3, [r7, #8]
 801c178:	2b00      	cmp	r3, #0
 801c17a:	d002      	beq.n	801c182 <udp_bind+0xd2>
 801c17c:	68bb      	ldr	r3, [r7, #8]
 801c17e:	681b      	ldr	r3, [r3, #0]
 801c180:	e000      	b.n	801c184 <udp_bind+0xd4>
 801c182:	2300      	movs	r3, #0
 801c184:	68fa      	ldr	r2, [r7, #12]
 801c186:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c188:	68fb      	ldr	r3, [r7, #12]
 801c18a:	88fa      	ldrh	r2, [r7, #6]
 801c18c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c18e:	7cfb      	ldrb	r3, [r7, #19]
 801c190:	2b00      	cmp	r3, #0
 801c192:	d106      	bne.n	801c1a2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c194:	4b09      	ldr	r3, [pc, #36]	; (801c1bc <udp_bind+0x10c>)
 801c196:	681a      	ldr	r2, [r3, #0]
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c19c:	4a07      	ldr	r2, [pc, #28]	; (801c1bc <udp_bind+0x10c>)
 801c19e:	68fb      	ldr	r3, [r7, #12]
 801c1a0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801c1a2:	2300      	movs	r3, #0
}
 801c1a4:	4618      	mov	r0, r3
 801c1a6:	3718      	adds	r7, #24
 801c1a8:	46bd      	mov	sp, r7
 801c1aa:	bd80      	pop	{r7, pc}
 801c1ac:	08025398 	.word	0x08025398
 801c1b0:	08024448 	.word	0x08024448
 801c1b4:	08024710 	.word	0x08024710
 801c1b8:	0802449c 	.word	0x0802449c
 801c1bc:	2001034c 	.word	0x2001034c

0801c1c0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c1c0:	b580      	push	{r7, lr}
 801c1c2:	b086      	sub	sp, #24
 801c1c4:	af00      	add	r7, sp, #0
 801c1c6:	60f8      	str	r0, [r7, #12]
 801c1c8:	60b9      	str	r1, [r7, #8]
 801c1ca:	4613      	mov	r3, r2
 801c1cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801c1ce:	68fb      	ldr	r3, [r7, #12]
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	d109      	bne.n	801c1e8 <udp_connect+0x28>
 801c1d4:	4b2c      	ldr	r3, [pc, #176]	; (801c288 <udp_connect+0xc8>)
 801c1d6:	f240 4235 	movw	r2, #1077	; 0x435
 801c1da:	492c      	ldr	r1, [pc, #176]	; (801c28c <udp_connect+0xcc>)
 801c1dc:	482c      	ldr	r0, [pc, #176]	; (801c290 <udp_connect+0xd0>)
 801c1de:	f005 f99f 	bl	8021520 <iprintf>
 801c1e2:	f06f 030f 	mvn.w	r3, #15
 801c1e6:	e04b      	b.n	801c280 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801c1e8:	68bb      	ldr	r3, [r7, #8]
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d109      	bne.n	801c202 <udp_connect+0x42>
 801c1ee:	4b26      	ldr	r3, [pc, #152]	; (801c288 <udp_connect+0xc8>)
 801c1f0:	f240 4236 	movw	r2, #1078	; 0x436
 801c1f4:	4927      	ldr	r1, [pc, #156]	; (801c294 <udp_connect+0xd4>)
 801c1f6:	4826      	ldr	r0, [pc, #152]	; (801c290 <udp_connect+0xd0>)
 801c1f8:	f005 f992 	bl	8021520 <iprintf>
 801c1fc:	f06f 030f 	mvn.w	r3, #15
 801c200:	e03e      	b.n	801c280 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801c202:	68fb      	ldr	r3, [r7, #12]
 801c204:	8a5b      	ldrh	r3, [r3, #18]
 801c206:	2b00      	cmp	r3, #0
 801c208:	d10f      	bne.n	801c22a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c20a:	68f9      	ldr	r1, [r7, #12]
 801c20c:	68fb      	ldr	r3, [r7, #12]
 801c20e:	8a5b      	ldrh	r3, [r3, #18]
 801c210:	461a      	mov	r2, r3
 801c212:	68f8      	ldr	r0, [r7, #12]
 801c214:	f7ff ff4c 	bl	801c0b0 <udp_bind>
 801c218:	4603      	mov	r3, r0
 801c21a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801c21c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c220:	2b00      	cmp	r3, #0
 801c222:	d002      	beq.n	801c22a <udp_connect+0x6a>
      return err;
 801c224:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c228:	e02a      	b.n	801c280 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801c22a:	68bb      	ldr	r3, [r7, #8]
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d002      	beq.n	801c236 <udp_connect+0x76>
 801c230:	68bb      	ldr	r3, [r7, #8]
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	e000      	b.n	801c238 <udp_connect+0x78>
 801c236:	2300      	movs	r3, #0
 801c238:	68fa      	ldr	r2, [r7, #12]
 801c23a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801c23c:	68fb      	ldr	r3, [r7, #12]
 801c23e:	88fa      	ldrh	r2, [r7, #6]
 801c240:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801c242:	68fb      	ldr	r3, [r7, #12]
 801c244:	7c1b      	ldrb	r3, [r3, #16]
 801c246:	f043 0304 	orr.w	r3, r3, #4
 801c24a:	b2da      	uxtb	r2, r3
 801c24c:	68fb      	ldr	r3, [r7, #12]
 801c24e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c250:	4b11      	ldr	r3, [pc, #68]	; (801c298 <udp_connect+0xd8>)
 801c252:	681b      	ldr	r3, [r3, #0]
 801c254:	617b      	str	r3, [r7, #20]
 801c256:	e008      	b.n	801c26a <udp_connect+0xaa>
    if (pcb == ipcb) {
 801c258:	68fa      	ldr	r2, [r7, #12]
 801c25a:	697b      	ldr	r3, [r7, #20]
 801c25c:	429a      	cmp	r2, r3
 801c25e:	d101      	bne.n	801c264 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801c260:	2300      	movs	r3, #0
 801c262:	e00d      	b.n	801c280 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c264:	697b      	ldr	r3, [r7, #20]
 801c266:	68db      	ldr	r3, [r3, #12]
 801c268:	617b      	str	r3, [r7, #20]
 801c26a:	697b      	ldr	r3, [r7, #20]
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d1f3      	bne.n	801c258 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801c270:	4b09      	ldr	r3, [pc, #36]	; (801c298 <udp_connect+0xd8>)
 801c272:	681a      	ldr	r2, [r3, #0]
 801c274:	68fb      	ldr	r3, [r7, #12]
 801c276:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801c278:	4a07      	ldr	r2, [pc, #28]	; (801c298 <udp_connect+0xd8>)
 801c27a:	68fb      	ldr	r3, [r7, #12]
 801c27c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801c27e:	2300      	movs	r3, #0
}
 801c280:	4618      	mov	r0, r3
 801c282:	3718      	adds	r7, #24
 801c284:	46bd      	mov	sp, r7
 801c286:	bd80      	pop	{r7, pc}
 801c288:	08024448 	.word	0x08024448
 801c28c:	08024728 	.word	0x08024728
 801c290:	0802449c 	.word	0x0802449c
 801c294:	08024744 	.word	0x08024744
 801c298:	2001034c 	.word	0x2001034c

0801c29c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801c29c:	b580      	push	{r7, lr}
 801c29e:	b084      	sub	sp, #16
 801c2a0:	af00      	add	r7, sp, #0
 801c2a2:	60f8      	str	r0, [r7, #12]
 801c2a4:	60b9      	str	r1, [r7, #8]
 801c2a6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d107      	bne.n	801c2be <udp_recv+0x22>
 801c2ae:	4b08      	ldr	r3, [pc, #32]	; (801c2d0 <udp_recv+0x34>)
 801c2b0:	f240 428a 	movw	r2, #1162	; 0x48a
 801c2b4:	4907      	ldr	r1, [pc, #28]	; (801c2d4 <udp_recv+0x38>)
 801c2b6:	4808      	ldr	r0, [pc, #32]	; (801c2d8 <udp_recv+0x3c>)
 801c2b8:	f005 f932 	bl	8021520 <iprintf>
 801c2bc:	e005      	b.n	801c2ca <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c2be:	68fb      	ldr	r3, [r7, #12]
 801c2c0:	68ba      	ldr	r2, [r7, #8]
 801c2c2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801c2c4:	68fb      	ldr	r3, [r7, #12]
 801c2c6:	687a      	ldr	r2, [r7, #4]
 801c2c8:	61da      	str	r2, [r3, #28]
}
 801c2ca:	3710      	adds	r7, #16
 801c2cc:	46bd      	mov	sp, r7
 801c2ce:	bd80      	pop	{r7, pc}
 801c2d0:	08024448 	.word	0x08024448
 801c2d4:	0802477c 	.word	0x0802477c
 801c2d8:	0802449c 	.word	0x0802449c

0801c2dc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c2dc:	b580      	push	{r7, lr}
 801c2de:	b084      	sub	sp, #16
 801c2e0:	af00      	add	r7, sp, #0
 801c2e2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	d107      	bne.n	801c2fa <udp_remove+0x1e>
 801c2ea:	4b19      	ldr	r3, [pc, #100]	; (801c350 <udp_remove+0x74>)
 801c2ec:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801c2f0:	4918      	ldr	r1, [pc, #96]	; (801c354 <udp_remove+0x78>)
 801c2f2:	4819      	ldr	r0, [pc, #100]	; (801c358 <udp_remove+0x7c>)
 801c2f4:	f005 f914 	bl	8021520 <iprintf>
 801c2f8:	e026      	b.n	801c348 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c2fa:	4b18      	ldr	r3, [pc, #96]	; (801c35c <udp_remove+0x80>)
 801c2fc:	681b      	ldr	r3, [r3, #0]
 801c2fe:	687a      	ldr	r2, [r7, #4]
 801c300:	429a      	cmp	r2, r3
 801c302:	d105      	bne.n	801c310 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c304:	4b15      	ldr	r3, [pc, #84]	; (801c35c <udp_remove+0x80>)
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	68db      	ldr	r3, [r3, #12]
 801c30a:	4a14      	ldr	r2, [pc, #80]	; (801c35c <udp_remove+0x80>)
 801c30c:	6013      	str	r3, [r2, #0]
 801c30e:	e017      	b.n	801c340 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c310:	4b12      	ldr	r3, [pc, #72]	; (801c35c <udp_remove+0x80>)
 801c312:	681b      	ldr	r3, [r3, #0]
 801c314:	60fb      	str	r3, [r7, #12]
 801c316:	e010      	b.n	801c33a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c318:	68fb      	ldr	r3, [r7, #12]
 801c31a:	68db      	ldr	r3, [r3, #12]
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d009      	beq.n	801c334 <udp_remove+0x58>
 801c320:	68fb      	ldr	r3, [r7, #12]
 801c322:	68db      	ldr	r3, [r3, #12]
 801c324:	687a      	ldr	r2, [r7, #4]
 801c326:	429a      	cmp	r2, r3
 801c328:	d104      	bne.n	801c334 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	68da      	ldr	r2, [r3, #12]
 801c32e:	68fb      	ldr	r3, [r7, #12]
 801c330:	60da      	str	r2, [r3, #12]
        break;
 801c332:	e005      	b.n	801c340 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	68db      	ldr	r3, [r3, #12]
 801c338:	60fb      	str	r3, [r7, #12]
 801c33a:	68fb      	ldr	r3, [r7, #12]
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d1eb      	bne.n	801c318 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c340:	6879      	ldr	r1, [r7, #4]
 801c342:	2000      	movs	r0, #0
 801c344:	f7f8 ff54 	bl	80151f0 <memp_free>
}
 801c348:	3710      	adds	r7, #16
 801c34a:	46bd      	mov	sp, r7
 801c34c:	bd80      	pop	{r7, pc}
 801c34e:	bf00      	nop
 801c350:	08024448 	.word	0x08024448
 801c354:	08024794 	.word	0x08024794
 801c358:	0802449c 	.word	0x0802449c
 801c35c:	2001034c 	.word	0x2001034c

0801c360 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c360:	b580      	push	{r7, lr}
 801c362:	b082      	sub	sp, #8
 801c364:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c366:	2000      	movs	r0, #0
 801c368:	f7f8 fef0 	bl	801514c <memp_malloc>
 801c36c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	2b00      	cmp	r3, #0
 801c372:	d007      	beq.n	801c384 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c374:	2220      	movs	r2, #32
 801c376:	2100      	movs	r1, #0
 801c378:	6878      	ldr	r0, [r7, #4]
 801c37a:	f005 f821 	bl	80213c0 <memset>
    pcb->ttl = UDP_TTL;
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	22ff      	movs	r2, #255	; 0xff
 801c382:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801c384:	687b      	ldr	r3, [r7, #4]
}
 801c386:	4618      	mov	r0, r3
 801c388:	3708      	adds	r7, #8
 801c38a:	46bd      	mov	sp, r7
 801c38c:	bd80      	pop	{r7, pc}
	...

0801c390 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c390:	b480      	push	{r7}
 801c392:	b085      	sub	sp, #20
 801c394:	af00      	add	r7, sp, #0
 801c396:	6078      	str	r0, [r7, #4]
 801c398:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c39a:	687b      	ldr	r3, [r7, #4]
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	d01e      	beq.n	801c3de <udp_netif_ip_addr_changed+0x4e>
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	681b      	ldr	r3, [r3, #0]
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	d01a      	beq.n	801c3de <udp_netif_ip_addr_changed+0x4e>
 801c3a8:	683b      	ldr	r3, [r7, #0]
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d017      	beq.n	801c3de <udp_netif_ip_addr_changed+0x4e>
 801c3ae:	683b      	ldr	r3, [r7, #0]
 801c3b0:	681b      	ldr	r3, [r3, #0]
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	d013      	beq.n	801c3de <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c3b6:	4b0d      	ldr	r3, [pc, #52]	; (801c3ec <udp_netif_ip_addr_changed+0x5c>)
 801c3b8:	681b      	ldr	r3, [r3, #0]
 801c3ba:	60fb      	str	r3, [r7, #12]
 801c3bc:	e00c      	b.n	801c3d8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c3be:	68fb      	ldr	r3, [r7, #12]
 801c3c0:	681a      	ldr	r2, [r3, #0]
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	681b      	ldr	r3, [r3, #0]
 801c3c6:	429a      	cmp	r2, r3
 801c3c8:	d103      	bne.n	801c3d2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c3ca:	683b      	ldr	r3, [r7, #0]
 801c3cc:	681a      	ldr	r2, [r3, #0]
 801c3ce:	68fb      	ldr	r3, [r7, #12]
 801c3d0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c3d2:	68fb      	ldr	r3, [r7, #12]
 801c3d4:	68db      	ldr	r3, [r3, #12]
 801c3d6:	60fb      	str	r3, [r7, #12]
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d1ef      	bne.n	801c3be <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c3de:	bf00      	nop
 801c3e0:	3714      	adds	r7, #20
 801c3e2:	46bd      	mov	sp, r7
 801c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3e8:	4770      	bx	lr
 801c3ea:	bf00      	nop
 801c3ec:	2001034c 	.word	0x2001034c

0801c3f0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801c3f0:	b580      	push	{r7, lr}
 801c3f2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801c3f4:	4b20      	ldr	r3, [pc, #128]	; (801c478 <dhcp_inc_pcb_refcount+0x88>)
 801c3f6:	781b      	ldrb	r3, [r3, #0]
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	d133      	bne.n	801c464 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801c3fc:	4b1f      	ldr	r3, [pc, #124]	; (801c47c <dhcp_inc_pcb_refcount+0x8c>)
 801c3fe:	681b      	ldr	r3, [r3, #0]
 801c400:	2b00      	cmp	r3, #0
 801c402:	d005      	beq.n	801c410 <dhcp_inc_pcb_refcount+0x20>
 801c404:	4b1e      	ldr	r3, [pc, #120]	; (801c480 <dhcp_inc_pcb_refcount+0x90>)
 801c406:	22e5      	movs	r2, #229	; 0xe5
 801c408:	491e      	ldr	r1, [pc, #120]	; (801c484 <dhcp_inc_pcb_refcount+0x94>)
 801c40a:	481f      	ldr	r0, [pc, #124]	; (801c488 <dhcp_inc_pcb_refcount+0x98>)
 801c40c:	f005 f888 	bl	8021520 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801c410:	f7ff ffa6 	bl	801c360 <udp_new>
 801c414:	4602      	mov	r2, r0
 801c416:	4b19      	ldr	r3, [pc, #100]	; (801c47c <dhcp_inc_pcb_refcount+0x8c>)
 801c418:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 801c41a:	4b18      	ldr	r3, [pc, #96]	; (801c47c <dhcp_inc_pcb_refcount+0x8c>)
 801c41c:	681b      	ldr	r3, [r3, #0]
 801c41e:	2b00      	cmp	r3, #0
 801c420:	d102      	bne.n	801c428 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801c422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c426:	e024      	b.n	801c472 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801c428:	4b14      	ldr	r3, [pc, #80]	; (801c47c <dhcp_inc_pcb_refcount+0x8c>)
 801c42a:	681b      	ldr	r3, [r3, #0]
 801c42c:	7a5a      	ldrb	r2, [r3, #9]
 801c42e:	4b13      	ldr	r3, [pc, #76]	; (801c47c <dhcp_inc_pcb_refcount+0x8c>)
 801c430:	681b      	ldr	r3, [r3, #0]
 801c432:	f042 0220 	orr.w	r2, r2, #32
 801c436:	b2d2      	uxtb	r2, r2
 801c438:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801c43a:	4b10      	ldr	r3, [pc, #64]	; (801c47c <dhcp_inc_pcb_refcount+0x8c>)
 801c43c:	681b      	ldr	r3, [r3, #0]
 801c43e:	2244      	movs	r2, #68	; 0x44
 801c440:	4912      	ldr	r1, [pc, #72]	; (801c48c <dhcp_inc_pcb_refcount+0x9c>)
 801c442:	4618      	mov	r0, r3
 801c444:	f7ff fe34 	bl	801c0b0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801c448:	4b0c      	ldr	r3, [pc, #48]	; (801c47c <dhcp_inc_pcb_refcount+0x8c>)
 801c44a:	681b      	ldr	r3, [r3, #0]
 801c44c:	2243      	movs	r2, #67	; 0x43
 801c44e:	490f      	ldr	r1, [pc, #60]	; (801c48c <dhcp_inc_pcb_refcount+0x9c>)
 801c450:	4618      	mov	r0, r3
 801c452:	f7ff feb5 	bl	801c1c0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801c456:	4b09      	ldr	r3, [pc, #36]	; (801c47c <dhcp_inc_pcb_refcount+0x8c>)
 801c458:	681b      	ldr	r3, [r3, #0]
 801c45a:	2200      	movs	r2, #0
 801c45c:	490c      	ldr	r1, [pc, #48]	; (801c490 <dhcp_inc_pcb_refcount+0xa0>)
 801c45e:	4618      	mov	r0, r3
 801c460:	f7ff ff1c 	bl	801c29c <udp_recv>
  }

  dhcp_pcb_refcount++;
 801c464:	4b04      	ldr	r3, [pc, #16]	; (801c478 <dhcp_inc_pcb_refcount+0x88>)
 801c466:	781b      	ldrb	r3, [r3, #0]
 801c468:	3301      	adds	r3, #1
 801c46a:	b2da      	uxtb	r2, r3
 801c46c:	4b02      	ldr	r3, [pc, #8]	; (801c478 <dhcp_inc_pcb_refcount+0x88>)
 801c46e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801c470:	2300      	movs	r3, #0
}
 801c472:	4618      	mov	r0, r3
 801c474:	bd80      	pop	{r7, pc}
 801c476:	bf00      	nop
 801c478:	20009004 	.word	0x20009004
 801c47c:	20009000 	.word	0x20009000
 801c480:	080247ac 	.word	0x080247ac
 801c484:	080247e4 	.word	0x080247e4
 801c488:	0802480c 	.word	0x0802480c
 801c48c:	08025398 	.word	0x08025398
 801c490:	0801dd4d 	.word	0x0801dd4d

0801c494 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801c494:	b580      	push	{r7, lr}
 801c496:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801c498:	4b0e      	ldr	r3, [pc, #56]	; (801c4d4 <dhcp_dec_pcb_refcount+0x40>)
 801c49a:	781b      	ldrb	r3, [r3, #0]
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d105      	bne.n	801c4ac <dhcp_dec_pcb_refcount+0x18>
 801c4a0:	4b0d      	ldr	r3, [pc, #52]	; (801c4d8 <dhcp_dec_pcb_refcount+0x44>)
 801c4a2:	22ff      	movs	r2, #255	; 0xff
 801c4a4:	490d      	ldr	r1, [pc, #52]	; (801c4dc <dhcp_dec_pcb_refcount+0x48>)
 801c4a6:	480e      	ldr	r0, [pc, #56]	; (801c4e0 <dhcp_dec_pcb_refcount+0x4c>)
 801c4a8:	f005 f83a 	bl	8021520 <iprintf>
  dhcp_pcb_refcount--;
 801c4ac:	4b09      	ldr	r3, [pc, #36]	; (801c4d4 <dhcp_dec_pcb_refcount+0x40>)
 801c4ae:	781b      	ldrb	r3, [r3, #0]
 801c4b0:	3b01      	subs	r3, #1
 801c4b2:	b2da      	uxtb	r2, r3
 801c4b4:	4b07      	ldr	r3, [pc, #28]	; (801c4d4 <dhcp_dec_pcb_refcount+0x40>)
 801c4b6:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801c4b8:	4b06      	ldr	r3, [pc, #24]	; (801c4d4 <dhcp_dec_pcb_refcount+0x40>)
 801c4ba:	781b      	ldrb	r3, [r3, #0]
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	d107      	bne.n	801c4d0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801c4c0:	4b08      	ldr	r3, [pc, #32]	; (801c4e4 <dhcp_dec_pcb_refcount+0x50>)
 801c4c2:	681b      	ldr	r3, [r3, #0]
 801c4c4:	4618      	mov	r0, r3
 801c4c6:	f7ff ff09 	bl	801c2dc <udp_remove>
    dhcp_pcb = NULL;
 801c4ca:	4b06      	ldr	r3, [pc, #24]	; (801c4e4 <dhcp_dec_pcb_refcount+0x50>)
 801c4cc:	2200      	movs	r2, #0
 801c4ce:	601a      	str	r2, [r3, #0]
  }
}
 801c4d0:	bf00      	nop
 801c4d2:	bd80      	pop	{r7, pc}
 801c4d4:	20009004 	.word	0x20009004
 801c4d8:	080247ac 	.word	0x080247ac
 801c4dc:	08024834 	.word	0x08024834
 801c4e0:	0802480c 	.word	0x0802480c
 801c4e4:	20009000 	.word	0x20009000

0801c4e8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801c4e8:	b580      	push	{r7, lr}
 801c4ea:	b084      	sub	sp, #16
 801c4ec:	af00      	add	r7, sp, #0
 801c4ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c4f4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801c4f6:	210c      	movs	r1, #12
 801c4f8:	68f8      	ldr	r0, [r7, #12]
 801c4fa:	f001 f869 	bl	801d5d0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801c4fe:	4b06      	ldr	r3, [pc, #24]	; (801c518 <dhcp_handle_nak+0x30>)
 801c500:	4a05      	ldr	r2, [pc, #20]	; (801c518 <dhcp_handle_nak+0x30>)
 801c502:	4905      	ldr	r1, [pc, #20]	; (801c518 <dhcp_handle_nak+0x30>)
 801c504:	6878      	ldr	r0, [r7, #4]
 801c506:	f7f9 f81f 	bl	8015548 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801c50a:	6878      	ldr	r0, [r7, #4]
 801c50c:	f000 fc5c 	bl	801cdc8 <dhcp_discover>
}
 801c510:	bf00      	nop
 801c512:	3710      	adds	r7, #16
 801c514:	46bd      	mov	sp, r7
 801c516:	bd80      	pop	{r7, pc}
 801c518:	08025398 	.word	0x08025398

0801c51c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801c51c:	b580      	push	{r7, lr}
 801c51e:	b084      	sub	sp, #16
 801c520:	af00      	add	r7, sp, #0
 801c522:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c528:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801c52a:	2108      	movs	r1, #8
 801c52c:	68f8      	ldr	r0, [r7, #12]
 801c52e:	f001 f84f 	bl	801d5d0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801c532:	68fb      	ldr	r3, [r7, #12]
 801c534:	331c      	adds	r3, #28
 801c536:	2200      	movs	r2, #0
 801c538:	4619      	mov	r1, r3
 801c53a:	6878      	ldr	r0, [r7, #4]
 801c53c:	f002 fb4e 	bl	801ebdc <etharp_query>
 801c540:	4603      	mov	r3, r0
 801c542:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801c544:	68fb      	ldr	r3, [r7, #12]
 801c546:	799b      	ldrb	r3, [r3, #6]
 801c548:	2bff      	cmp	r3, #255	; 0xff
 801c54a:	d005      	beq.n	801c558 <dhcp_check+0x3c>
    dhcp->tries++;
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	799b      	ldrb	r3, [r3, #6]
 801c550:	3301      	adds	r3, #1
 801c552:	b2da      	uxtb	r2, r3
 801c554:	68fb      	ldr	r3, [r7, #12]
 801c556:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801c558:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801c55c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c55e:	893b      	ldrh	r3, [r7, #8]
 801c560:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c564:	4a06      	ldr	r2, [pc, #24]	; (801c580 <dhcp_check+0x64>)
 801c566:	fb82 1203 	smull	r1, r2, r2, r3
 801c56a:	1152      	asrs	r2, r2, #5
 801c56c:	17db      	asrs	r3, r3, #31
 801c56e:	1ad3      	subs	r3, r2, r3
 801c570:	b29a      	uxth	r2, r3
 801c572:	68fb      	ldr	r3, [r7, #12]
 801c574:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801c576:	bf00      	nop
 801c578:	3710      	adds	r7, #16
 801c57a:	46bd      	mov	sp, r7
 801c57c:	bd80      	pop	{r7, pc}
 801c57e:	bf00      	nop
 801c580:	10624dd3 	.word	0x10624dd3

0801c584 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801c584:	b580      	push	{r7, lr}
 801c586:	b084      	sub	sp, #16
 801c588:	af00      	add	r7, sp, #0
 801c58a:	6078      	str	r0, [r7, #4]
 801c58c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c592:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801c594:	4b0c      	ldr	r3, [pc, #48]	; (801c5c8 <dhcp_handle_offer+0x44>)
 801c596:	789b      	ldrb	r3, [r3, #2]
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d011      	beq.n	801c5c0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801c59c:	68fb      	ldr	r3, [r7, #12]
 801c59e:	2200      	movs	r2, #0
 801c5a0:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801c5a2:	4b0a      	ldr	r3, [pc, #40]	; (801c5cc <dhcp_handle_offer+0x48>)
 801c5a4:	689b      	ldr	r3, [r3, #8]
 801c5a6:	4618      	mov	r0, r3
 801c5a8:	f7f8 f92f 	bl	801480a <lwip_htonl>
 801c5ac:	4602      	mov	r2, r0
 801c5ae:	68fb      	ldr	r3, [r7, #12]
 801c5b0:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801c5b2:	683b      	ldr	r3, [r7, #0]
 801c5b4:	691a      	ldr	r2, [r3, #16]
 801c5b6:	68fb      	ldr	r3, [r7, #12]
 801c5b8:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801c5ba:	6878      	ldr	r0, [r7, #4]
 801c5bc:	f000 f808 	bl	801c5d0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801c5c0:	bf00      	nop
 801c5c2:	3710      	adds	r7, #16
 801c5c4:	46bd      	mov	sp, r7
 801c5c6:	bd80      	pop	{r7, pc}
 801c5c8:	20010350 	.word	0x20010350
 801c5cc:	20010358 	.word	0x20010358

0801c5d0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801c5d0:	b5b0      	push	{r4, r5, r7, lr}
 801c5d2:	b08a      	sub	sp, #40	; 0x28
 801c5d4:	af02      	add	r7, sp, #8
 801c5d6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	2b00      	cmp	r3, #0
 801c5dc:	d109      	bne.n	801c5f2 <dhcp_select+0x22>
 801c5de:	4b71      	ldr	r3, [pc, #452]	; (801c7a4 <dhcp_select+0x1d4>)
 801c5e0:	f240 1277 	movw	r2, #375	; 0x177
 801c5e4:	4970      	ldr	r1, [pc, #448]	; (801c7a8 <dhcp_select+0x1d8>)
 801c5e6:	4871      	ldr	r0, [pc, #452]	; (801c7ac <dhcp_select+0x1dc>)
 801c5e8:	f004 ff9a 	bl	8021520 <iprintf>
 801c5ec:	f06f 030f 	mvn.w	r3, #15
 801c5f0:	e0d3      	b.n	801c79a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5f6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801c5f8:	69bb      	ldr	r3, [r7, #24]
 801c5fa:	2b00      	cmp	r3, #0
 801c5fc:	d109      	bne.n	801c612 <dhcp_select+0x42>
 801c5fe:	4b69      	ldr	r3, [pc, #420]	; (801c7a4 <dhcp_select+0x1d4>)
 801c600:	f240 1279 	movw	r2, #377	; 0x179
 801c604:	496a      	ldr	r1, [pc, #424]	; (801c7b0 <dhcp_select+0x1e0>)
 801c606:	4869      	ldr	r0, [pc, #420]	; (801c7ac <dhcp_select+0x1dc>)
 801c608:	f004 ff8a 	bl	8021520 <iprintf>
 801c60c:	f06f 0305 	mvn.w	r3, #5
 801c610:	e0c3      	b.n	801c79a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801c612:	2101      	movs	r1, #1
 801c614:	69b8      	ldr	r0, [r7, #24]
 801c616:	f000 ffdb 	bl	801d5d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c61a:	f107 030c 	add.w	r3, r7, #12
 801c61e:	2203      	movs	r2, #3
 801c620:	69b9      	ldr	r1, [r7, #24]
 801c622:	6878      	ldr	r0, [r7, #4]
 801c624:	f001 fc5e 	bl	801dee4 <dhcp_create_msg>
 801c628:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c62a:	697b      	ldr	r3, [r7, #20]
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	f000 8085 	beq.w	801c73c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c632:	697b      	ldr	r3, [r7, #20]
 801c634:	685b      	ldr	r3, [r3, #4]
 801c636:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c638:	89b8      	ldrh	r0, [r7, #12]
 801c63a:	693b      	ldr	r3, [r7, #16]
 801c63c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c640:	2302      	movs	r3, #2
 801c642:	2239      	movs	r2, #57	; 0x39
 801c644:	f000 ffde 	bl	801d604 <dhcp_option>
 801c648:	4603      	mov	r3, r0
 801c64a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c64c:	89b8      	ldrh	r0, [r7, #12]
 801c64e:	693b      	ldr	r3, [r7, #16]
 801c650:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c658:	461a      	mov	r2, r3
 801c65a:	f001 f82d 	bl	801d6b8 <dhcp_option_short>
 801c65e:	4603      	mov	r3, r0
 801c660:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c662:	89b8      	ldrh	r0, [r7, #12]
 801c664:	693b      	ldr	r3, [r7, #16]
 801c666:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c66a:	2304      	movs	r3, #4
 801c66c:	2232      	movs	r2, #50	; 0x32
 801c66e:	f000 ffc9 	bl	801d604 <dhcp_option>
 801c672:	4603      	mov	r3, r0
 801c674:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c676:	89bc      	ldrh	r4, [r7, #12]
 801c678:	693b      	ldr	r3, [r7, #16]
 801c67a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c67e:	69bb      	ldr	r3, [r7, #24]
 801c680:	69db      	ldr	r3, [r3, #28]
 801c682:	4618      	mov	r0, r3
 801c684:	f7f8 f8c1 	bl	801480a <lwip_htonl>
 801c688:	4603      	mov	r3, r0
 801c68a:	461a      	mov	r2, r3
 801c68c:	4629      	mov	r1, r5
 801c68e:	4620      	mov	r0, r4
 801c690:	f001 f844 	bl	801d71c <dhcp_option_long>
 801c694:	4603      	mov	r3, r0
 801c696:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801c698:	89b8      	ldrh	r0, [r7, #12]
 801c69a:	693b      	ldr	r3, [r7, #16]
 801c69c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c6a0:	2304      	movs	r3, #4
 801c6a2:	2236      	movs	r2, #54	; 0x36
 801c6a4:	f000 ffae 	bl	801d604 <dhcp_option>
 801c6a8:	4603      	mov	r3, r0
 801c6aa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801c6ac:	89bc      	ldrh	r4, [r7, #12]
 801c6ae:	693b      	ldr	r3, [r7, #16]
 801c6b0:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c6b4:	69bb      	ldr	r3, [r7, #24]
 801c6b6:	699b      	ldr	r3, [r3, #24]
 801c6b8:	4618      	mov	r0, r3
 801c6ba:	f7f8 f8a6 	bl	801480a <lwip_htonl>
 801c6be:	4603      	mov	r3, r0
 801c6c0:	461a      	mov	r2, r3
 801c6c2:	4629      	mov	r1, r5
 801c6c4:	4620      	mov	r0, r4
 801c6c6:	f001 f829 	bl	801d71c <dhcp_option_long>
 801c6ca:	4603      	mov	r3, r0
 801c6cc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c6ce:	89b8      	ldrh	r0, [r7, #12]
 801c6d0:	693b      	ldr	r3, [r7, #16]
 801c6d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c6d6:	2303      	movs	r3, #3
 801c6d8:	2237      	movs	r2, #55	; 0x37
 801c6da:	f000 ff93 	bl	801d604 <dhcp_option>
 801c6de:	4603      	mov	r3, r0
 801c6e0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c6e2:	2300      	movs	r3, #0
 801c6e4:	77bb      	strb	r3, [r7, #30]
 801c6e6:	e00e      	b.n	801c706 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c6e8:	89b8      	ldrh	r0, [r7, #12]
 801c6ea:	693b      	ldr	r3, [r7, #16]
 801c6ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c6f0:	7fbb      	ldrb	r3, [r7, #30]
 801c6f2:	4a30      	ldr	r2, [pc, #192]	; (801c7b4 <dhcp_select+0x1e4>)
 801c6f4:	5cd3      	ldrb	r3, [r2, r3]
 801c6f6:	461a      	mov	r2, r3
 801c6f8:	f000 ffb8 	bl	801d66c <dhcp_option_byte>
 801c6fc:	4603      	mov	r3, r0
 801c6fe:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c700:	7fbb      	ldrb	r3, [r7, #30]
 801c702:	3301      	adds	r3, #1
 801c704:	77bb      	strb	r3, [r7, #30]
 801c706:	7fbb      	ldrb	r3, [r7, #30]
 801c708:	2b02      	cmp	r3, #2
 801c70a:	d9ed      	bls.n	801c6e8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c70c:	89b8      	ldrh	r0, [r7, #12]
 801c70e:	693b      	ldr	r3, [r7, #16]
 801c710:	33f0      	adds	r3, #240	; 0xf0
 801c712:	697a      	ldr	r2, [r7, #20]
 801c714:	4619      	mov	r1, r3
 801c716:	f001 fcbb 	bl	801e090 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801c71a:	4b27      	ldr	r3, [pc, #156]	; (801c7b8 <dhcp_select+0x1e8>)
 801c71c:	6818      	ldr	r0, [r3, #0]
 801c71e:	4b27      	ldr	r3, [pc, #156]	; (801c7bc <dhcp_select+0x1ec>)
 801c720:	9301      	str	r3, [sp, #4]
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	9300      	str	r3, [sp, #0]
 801c726:	2343      	movs	r3, #67	; 0x43
 801c728:	4a25      	ldr	r2, [pc, #148]	; (801c7c0 <dhcp_select+0x1f0>)
 801c72a:	6979      	ldr	r1, [r7, #20]
 801c72c:	f7ff fbda 	bl	801bee4 <udp_sendto_if_src>
 801c730:	4603      	mov	r3, r0
 801c732:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c734:	6978      	ldr	r0, [r7, #20]
 801c736:	f7f9 fc21 	bl	8015f7c <pbuf_free>
 801c73a:	e001      	b.n	801c740 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c73c:	23ff      	movs	r3, #255	; 0xff
 801c73e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c740:	69bb      	ldr	r3, [r7, #24]
 801c742:	799b      	ldrb	r3, [r3, #6]
 801c744:	2bff      	cmp	r3, #255	; 0xff
 801c746:	d005      	beq.n	801c754 <dhcp_select+0x184>
    dhcp->tries++;
 801c748:	69bb      	ldr	r3, [r7, #24]
 801c74a:	799b      	ldrb	r3, [r3, #6]
 801c74c:	3301      	adds	r3, #1
 801c74e:	b2da      	uxtb	r2, r3
 801c750:	69bb      	ldr	r3, [r7, #24]
 801c752:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c754:	69bb      	ldr	r3, [r7, #24]
 801c756:	799b      	ldrb	r3, [r3, #6]
 801c758:	2b05      	cmp	r3, #5
 801c75a:	d80d      	bhi.n	801c778 <dhcp_select+0x1a8>
 801c75c:	69bb      	ldr	r3, [r7, #24]
 801c75e:	799b      	ldrb	r3, [r3, #6]
 801c760:	461a      	mov	r2, r3
 801c762:	2301      	movs	r3, #1
 801c764:	4093      	lsls	r3, r2
 801c766:	b29b      	uxth	r3, r3
 801c768:	461a      	mov	r2, r3
 801c76a:	0152      	lsls	r2, r2, #5
 801c76c:	1ad2      	subs	r2, r2, r3
 801c76e:	0092      	lsls	r2, r2, #2
 801c770:	4413      	add	r3, r2
 801c772:	00db      	lsls	r3, r3, #3
 801c774:	b29b      	uxth	r3, r3
 801c776:	e001      	b.n	801c77c <dhcp_select+0x1ac>
 801c778:	f64e 2360 	movw	r3, #60000	; 0xea60
 801c77c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c77e:	89fb      	ldrh	r3, [r7, #14]
 801c780:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c784:	4a0f      	ldr	r2, [pc, #60]	; (801c7c4 <dhcp_select+0x1f4>)
 801c786:	fb82 1203 	smull	r1, r2, r2, r3
 801c78a:	1152      	asrs	r2, r2, #5
 801c78c:	17db      	asrs	r3, r3, #31
 801c78e:	1ad3      	subs	r3, r2, r3
 801c790:	b29a      	uxth	r2, r3
 801c792:	69bb      	ldr	r3, [r7, #24]
 801c794:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c796:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c79a:	4618      	mov	r0, r3
 801c79c:	3720      	adds	r7, #32
 801c79e:	46bd      	mov	sp, r7
 801c7a0:	bdb0      	pop	{r4, r5, r7, pc}
 801c7a2:	bf00      	nop
 801c7a4:	080247ac 	.word	0x080247ac
 801c7a8:	08024858 	.word	0x08024858
 801c7ac:	0802480c 	.word	0x0802480c
 801c7b0:	08024874 	.word	0x08024874
 801c7b4:	20000040 	.word	0x20000040
 801c7b8:	20009000 	.word	0x20009000
 801c7bc:	08025398 	.word	0x08025398
 801c7c0:	0802539c 	.word	0x0802539c
 801c7c4:	10624dd3 	.word	0x10624dd3

0801c7c8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801c7c8:	b580      	push	{r7, lr}
 801c7ca:	b082      	sub	sp, #8
 801c7cc:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801c7ce:	4b27      	ldr	r3, [pc, #156]	; (801c86c <dhcp_coarse_tmr+0xa4>)
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	607b      	str	r3, [r7, #4]
 801c7d4:	e042      	b.n	801c85c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c7da:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801c7dc:	683b      	ldr	r3, [r7, #0]
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	d039      	beq.n	801c856 <dhcp_coarse_tmr+0x8e>
 801c7e2:	683b      	ldr	r3, [r7, #0]
 801c7e4:	795b      	ldrb	r3, [r3, #5]
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d035      	beq.n	801c856 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801c7ea:	683b      	ldr	r3, [r7, #0]
 801c7ec:	8a9b      	ldrh	r3, [r3, #20]
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d012      	beq.n	801c818 <dhcp_coarse_tmr+0x50>
 801c7f2:	683b      	ldr	r3, [r7, #0]
 801c7f4:	8a5b      	ldrh	r3, [r3, #18]
 801c7f6:	3301      	adds	r3, #1
 801c7f8:	b29a      	uxth	r2, r3
 801c7fa:	683b      	ldr	r3, [r7, #0]
 801c7fc:	825a      	strh	r2, [r3, #18]
 801c7fe:	683b      	ldr	r3, [r7, #0]
 801c800:	8a5a      	ldrh	r2, [r3, #18]
 801c802:	683b      	ldr	r3, [r7, #0]
 801c804:	8a9b      	ldrh	r3, [r3, #20]
 801c806:	429a      	cmp	r2, r3
 801c808:	d106      	bne.n	801c818 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801c80a:	6878      	ldr	r0, [r7, #4]
 801c80c:	f000 fe46 	bl	801d49c <dhcp_release_and_stop>
        dhcp_start(netif);
 801c810:	6878      	ldr	r0, [r7, #4]
 801c812:	f000 f96b 	bl	801caec <dhcp_start>
 801c816:	e01e      	b.n	801c856 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801c818:	683b      	ldr	r3, [r7, #0]
 801c81a:	8a1b      	ldrh	r3, [r3, #16]
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	d00b      	beq.n	801c838 <dhcp_coarse_tmr+0x70>
 801c820:	683b      	ldr	r3, [r7, #0]
 801c822:	8a1b      	ldrh	r3, [r3, #16]
 801c824:	1e5a      	subs	r2, r3, #1
 801c826:	b291      	uxth	r1, r2
 801c828:	683a      	ldr	r2, [r7, #0]
 801c82a:	8211      	strh	r1, [r2, #16]
 801c82c:	2b01      	cmp	r3, #1
 801c82e:	d103      	bne.n	801c838 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801c830:	6878      	ldr	r0, [r7, #4]
 801c832:	f000 f8c7 	bl	801c9c4 <dhcp_t2_timeout>
 801c836:	e00e      	b.n	801c856 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801c838:	683b      	ldr	r3, [r7, #0]
 801c83a:	89db      	ldrh	r3, [r3, #14]
 801c83c:	2b00      	cmp	r3, #0
 801c83e:	d00a      	beq.n	801c856 <dhcp_coarse_tmr+0x8e>
 801c840:	683b      	ldr	r3, [r7, #0]
 801c842:	89db      	ldrh	r3, [r3, #14]
 801c844:	1e5a      	subs	r2, r3, #1
 801c846:	b291      	uxth	r1, r2
 801c848:	683a      	ldr	r2, [r7, #0]
 801c84a:	81d1      	strh	r1, [r2, #14]
 801c84c:	2b01      	cmp	r3, #1
 801c84e:	d102      	bne.n	801c856 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801c850:	6878      	ldr	r0, [r7, #4]
 801c852:	f000 f888 	bl	801c966 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	681b      	ldr	r3, [r3, #0]
 801c85a:	607b      	str	r3, [r7, #4]
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d1b9      	bne.n	801c7d6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801c862:	bf00      	nop
 801c864:	3708      	adds	r7, #8
 801c866:	46bd      	mov	sp, r7
 801c868:	bd80      	pop	{r7, pc}
 801c86a:	bf00      	nop
 801c86c:	20010324 	.word	0x20010324

0801c870 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801c870:	b580      	push	{r7, lr}
 801c872:	b082      	sub	sp, #8
 801c874:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801c876:	4b16      	ldr	r3, [pc, #88]	; (801c8d0 <dhcp_fine_tmr+0x60>)
 801c878:	681b      	ldr	r3, [r3, #0]
 801c87a:	607b      	str	r3, [r7, #4]
 801c87c:	e020      	b.n	801c8c0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c882:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801c884:	683b      	ldr	r3, [r7, #0]
 801c886:	2b00      	cmp	r3, #0
 801c888:	d017      	beq.n	801c8ba <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801c88a:	683b      	ldr	r3, [r7, #0]
 801c88c:	891b      	ldrh	r3, [r3, #8]
 801c88e:	2b01      	cmp	r3, #1
 801c890:	d906      	bls.n	801c8a0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801c892:	683b      	ldr	r3, [r7, #0]
 801c894:	891b      	ldrh	r3, [r3, #8]
 801c896:	3b01      	subs	r3, #1
 801c898:	b29a      	uxth	r2, r3
 801c89a:	683b      	ldr	r3, [r7, #0]
 801c89c:	811a      	strh	r2, [r3, #8]
 801c89e:	e00c      	b.n	801c8ba <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801c8a0:	683b      	ldr	r3, [r7, #0]
 801c8a2:	891b      	ldrh	r3, [r3, #8]
 801c8a4:	2b01      	cmp	r3, #1
 801c8a6:	d108      	bne.n	801c8ba <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801c8a8:	683b      	ldr	r3, [r7, #0]
 801c8aa:	891b      	ldrh	r3, [r3, #8]
 801c8ac:	3b01      	subs	r3, #1
 801c8ae:	b29a      	uxth	r2, r3
 801c8b0:	683b      	ldr	r3, [r7, #0]
 801c8b2:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801c8b4:	6878      	ldr	r0, [r7, #4]
 801c8b6:	f000 f80d 	bl	801c8d4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	681b      	ldr	r3, [r3, #0]
 801c8be:	607b      	str	r3, [r7, #4]
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	2b00      	cmp	r3, #0
 801c8c4:	d1db      	bne.n	801c87e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801c8c6:	bf00      	nop
 801c8c8:	3708      	adds	r7, #8
 801c8ca:	46bd      	mov	sp, r7
 801c8cc:	bd80      	pop	{r7, pc}
 801c8ce:	bf00      	nop
 801c8d0:	20010324 	.word	0x20010324

0801c8d4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801c8d4:	b580      	push	{r7, lr}
 801c8d6:	b084      	sub	sp, #16
 801c8d8:	af00      	add	r7, sp, #0
 801c8da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c8e0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801c8e2:	68fb      	ldr	r3, [r7, #12]
 801c8e4:	795b      	ldrb	r3, [r3, #5]
 801c8e6:	2b0c      	cmp	r3, #12
 801c8e8:	d003      	beq.n	801c8f2 <dhcp_timeout+0x1e>
 801c8ea:	68fb      	ldr	r3, [r7, #12]
 801c8ec:	795b      	ldrb	r3, [r3, #5]
 801c8ee:	2b06      	cmp	r3, #6
 801c8f0:	d103      	bne.n	801c8fa <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801c8f2:	6878      	ldr	r0, [r7, #4]
 801c8f4:	f000 fa68 	bl	801cdc8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801c8f8:	e031      	b.n	801c95e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	795b      	ldrb	r3, [r3, #5]
 801c8fe:	2b01      	cmp	r3, #1
 801c900:	d10e      	bne.n	801c920 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801c902:	68fb      	ldr	r3, [r7, #12]
 801c904:	799b      	ldrb	r3, [r3, #6]
 801c906:	2b05      	cmp	r3, #5
 801c908:	d803      	bhi.n	801c912 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801c90a:	6878      	ldr	r0, [r7, #4]
 801c90c:	f7ff fe60 	bl	801c5d0 <dhcp_select>
}
 801c910:	e025      	b.n	801c95e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801c912:	6878      	ldr	r0, [r7, #4]
 801c914:	f000 fdc2 	bl	801d49c <dhcp_release_and_stop>
      dhcp_start(netif);
 801c918:	6878      	ldr	r0, [r7, #4]
 801c91a:	f000 f8e7 	bl	801caec <dhcp_start>
}
 801c91e:	e01e      	b.n	801c95e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	795b      	ldrb	r3, [r3, #5]
 801c924:	2b08      	cmp	r3, #8
 801c926:	d10b      	bne.n	801c940 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	799b      	ldrb	r3, [r3, #6]
 801c92c:	2b01      	cmp	r3, #1
 801c92e:	d803      	bhi.n	801c938 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801c930:	6878      	ldr	r0, [r7, #4]
 801c932:	f7ff fdf3 	bl	801c51c <dhcp_check>
}
 801c936:	e012      	b.n	801c95e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801c938:	6878      	ldr	r0, [r7, #4]
 801c93a:	f000 fae7 	bl	801cf0c <dhcp_bind>
}
 801c93e:	e00e      	b.n	801c95e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	795b      	ldrb	r3, [r3, #5]
 801c944:	2b03      	cmp	r3, #3
 801c946:	d10a      	bne.n	801c95e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	799b      	ldrb	r3, [r3, #6]
 801c94c:	2b01      	cmp	r3, #1
 801c94e:	d803      	bhi.n	801c958 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801c950:	6878      	ldr	r0, [r7, #4]
 801c952:	f000 fced 	bl	801d330 <dhcp_reboot>
}
 801c956:	e002      	b.n	801c95e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801c958:	6878      	ldr	r0, [r7, #4]
 801c95a:	f000 fa35 	bl	801cdc8 <dhcp_discover>
}
 801c95e:	bf00      	nop
 801c960:	3710      	adds	r7, #16
 801c962:	46bd      	mov	sp, r7
 801c964:	bd80      	pop	{r7, pc}

0801c966 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801c966:	b580      	push	{r7, lr}
 801c968:	b084      	sub	sp, #16
 801c96a:	af00      	add	r7, sp, #0
 801c96c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c972:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801c974:	68fb      	ldr	r3, [r7, #12]
 801c976:	795b      	ldrb	r3, [r3, #5]
 801c978:	2b01      	cmp	r3, #1
 801c97a:	d007      	beq.n	801c98c <dhcp_t1_timeout+0x26>
 801c97c:	68fb      	ldr	r3, [r7, #12]
 801c97e:	795b      	ldrb	r3, [r3, #5]
 801c980:	2b0a      	cmp	r3, #10
 801c982:	d003      	beq.n	801c98c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801c984:	68fb      	ldr	r3, [r7, #12]
 801c986:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801c988:	2b05      	cmp	r3, #5
 801c98a:	d117      	bne.n	801c9bc <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801c98c:	6878      	ldr	r0, [r7, #4]
 801c98e:	f000 fb97 	bl	801d0c0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801c992:	68fb      	ldr	r3, [r7, #12]
 801c994:	899b      	ldrh	r3, [r3, #12]
 801c996:	461a      	mov	r2, r3
 801c998:	68fb      	ldr	r3, [r7, #12]
 801c99a:	8a5b      	ldrh	r3, [r3, #18]
 801c99c:	1ad3      	subs	r3, r2, r3
 801c99e:	2b01      	cmp	r3, #1
 801c9a0:	dd0c      	ble.n	801c9bc <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801c9a2:	68fb      	ldr	r3, [r7, #12]
 801c9a4:	899b      	ldrh	r3, [r3, #12]
 801c9a6:	461a      	mov	r2, r3
 801c9a8:	68fb      	ldr	r3, [r7, #12]
 801c9aa:	8a5b      	ldrh	r3, [r3, #18]
 801c9ac:	1ad3      	subs	r3, r2, r3
 801c9ae:	2b00      	cmp	r3, #0
 801c9b0:	da00      	bge.n	801c9b4 <dhcp_t1_timeout+0x4e>
 801c9b2:	3301      	adds	r3, #1
 801c9b4:	105b      	asrs	r3, r3, #1
 801c9b6:	b29a      	uxth	r2, r3
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801c9bc:	bf00      	nop
 801c9be:	3710      	adds	r7, #16
 801c9c0:	46bd      	mov	sp, r7
 801c9c2:	bd80      	pop	{r7, pc}

0801c9c4 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801c9c4:	b580      	push	{r7, lr}
 801c9c6:	b084      	sub	sp, #16
 801c9c8:	af00      	add	r7, sp, #0
 801c9ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c9d0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	795b      	ldrb	r3, [r3, #5]
 801c9d6:	2b01      	cmp	r3, #1
 801c9d8:	d00b      	beq.n	801c9f2 <dhcp_t2_timeout+0x2e>
 801c9da:	68fb      	ldr	r3, [r7, #12]
 801c9dc:	795b      	ldrb	r3, [r3, #5]
 801c9de:	2b0a      	cmp	r3, #10
 801c9e0:	d007      	beq.n	801c9f2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801c9e2:	68fb      	ldr	r3, [r7, #12]
 801c9e4:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801c9e6:	2b05      	cmp	r3, #5
 801c9e8:	d003      	beq.n	801c9f2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801c9ea:	68fb      	ldr	r3, [r7, #12]
 801c9ec:	795b      	ldrb	r3, [r3, #5]
 801c9ee:	2b04      	cmp	r3, #4
 801c9f0:	d117      	bne.n	801ca22 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801c9f2:	6878      	ldr	r0, [r7, #4]
 801c9f4:	f000 fc00 	bl	801d1f8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	8a9b      	ldrh	r3, [r3, #20]
 801c9fc:	461a      	mov	r2, r3
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	8a5b      	ldrh	r3, [r3, #18]
 801ca02:	1ad3      	subs	r3, r2, r3
 801ca04:	2b01      	cmp	r3, #1
 801ca06:	dd0c      	ble.n	801ca22 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801ca08:	68fb      	ldr	r3, [r7, #12]
 801ca0a:	8a9b      	ldrh	r3, [r3, #20]
 801ca0c:	461a      	mov	r2, r3
 801ca0e:	68fb      	ldr	r3, [r7, #12]
 801ca10:	8a5b      	ldrh	r3, [r3, #18]
 801ca12:	1ad3      	subs	r3, r2, r3
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	da00      	bge.n	801ca1a <dhcp_t2_timeout+0x56>
 801ca18:	3301      	adds	r3, #1
 801ca1a:	105b      	asrs	r3, r3, #1
 801ca1c:	b29a      	uxth	r2, r3
 801ca1e:	68fb      	ldr	r3, [r7, #12]
 801ca20:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801ca22:	bf00      	nop
 801ca24:	3710      	adds	r7, #16
 801ca26:	46bd      	mov	sp, r7
 801ca28:	bd80      	pop	{r7, pc}
	...

0801ca2c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801ca2c:	b580      	push	{r7, lr}
 801ca2e:	b084      	sub	sp, #16
 801ca30:	af00      	add	r7, sp, #0
 801ca32:	6078      	str	r0, [r7, #4]
 801ca34:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca3a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801ca3c:	68fb      	ldr	r3, [r7, #12]
 801ca3e:	2200      	movs	r2, #0
 801ca40:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	2200      	movs	r2, #0
 801ca46:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801ca48:	4b26      	ldr	r3, [pc, #152]	; (801cae4 <dhcp_handle_ack+0xb8>)
 801ca4a:	78db      	ldrb	r3, [r3, #3]
 801ca4c:	2b00      	cmp	r3, #0
 801ca4e:	d003      	beq.n	801ca58 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801ca50:	4b25      	ldr	r3, [pc, #148]	; (801cae8 <dhcp_handle_ack+0xbc>)
 801ca52:	68da      	ldr	r2, [r3, #12]
 801ca54:	68fb      	ldr	r3, [r7, #12]
 801ca56:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801ca58:	4b22      	ldr	r3, [pc, #136]	; (801cae4 <dhcp_handle_ack+0xb8>)
 801ca5a:	791b      	ldrb	r3, [r3, #4]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d004      	beq.n	801ca6a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801ca60:	4b21      	ldr	r3, [pc, #132]	; (801cae8 <dhcp_handle_ack+0xbc>)
 801ca62:	691a      	ldr	r2, [r3, #16]
 801ca64:	68fb      	ldr	r3, [r7, #12]
 801ca66:	62da      	str	r2, [r3, #44]	; 0x2c
 801ca68:	e004      	b.n	801ca74 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801ca6a:	68fb      	ldr	r3, [r7, #12]
 801ca6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca6e:	085a      	lsrs	r2, r3, #1
 801ca70:	68fb      	ldr	r3, [r7, #12]
 801ca72:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801ca74:	4b1b      	ldr	r3, [pc, #108]	; (801cae4 <dhcp_handle_ack+0xb8>)
 801ca76:	795b      	ldrb	r3, [r3, #5]
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	d004      	beq.n	801ca86 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801ca7c:	4b1a      	ldr	r3, [pc, #104]	; (801cae8 <dhcp_handle_ack+0xbc>)
 801ca7e:	695a      	ldr	r2, [r3, #20]
 801ca80:	68fb      	ldr	r3, [r7, #12]
 801ca82:	631a      	str	r2, [r3, #48]	; 0x30
 801ca84:	e007      	b.n	801ca96 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801ca86:	68fb      	ldr	r3, [r7, #12]
 801ca88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ca8a:	4613      	mov	r3, r2
 801ca8c:	00db      	lsls	r3, r3, #3
 801ca8e:	1a9b      	subs	r3, r3, r2
 801ca90:	08da      	lsrs	r2, r3, #3
 801ca92:	68fb      	ldr	r3, [r7, #12]
 801ca94:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801ca96:	683b      	ldr	r3, [r7, #0]
 801ca98:	691a      	ldr	r2, [r3, #16]
 801ca9a:	68fb      	ldr	r3, [r7, #12]
 801ca9c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801ca9e:	4b11      	ldr	r3, [pc, #68]	; (801cae4 <dhcp_handle_ack+0xb8>)
 801caa0:	799b      	ldrb	r3, [r3, #6]
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d00b      	beq.n	801cabe <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801caa6:	4b10      	ldr	r3, [pc, #64]	; (801cae8 <dhcp_handle_ack+0xbc>)
 801caa8:	699b      	ldr	r3, [r3, #24]
 801caaa:	4618      	mov	r0, r3
 801caac:	f7f7 fead 	bl	801480a <lwip_htonl>
 801cab0:	4602      	mov	r2, r0
 801cab2:	68fb      	ldr	r3, [r7, #12]
 801cab4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801cab6:	68fb      	ldr	r3, [r7, #12]
 801cab8:	2201      	movs	r2, #1
 801caba:	71da      	strb	r2, [r3, #7]
 801cabc:	e002      	b.n	801cac4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	2200      	movs	r2, #0
 801cac2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801cac4:	4b07      	ldr	r3, [pc, #28]	; (801cae4 <dhcp_handle_ack+0xb8>)
 801cac6:	79db      	ldrb	r3, [r3, #7]
 801cac8:	2b00      	cmp	r3, #0
 801caca:	d007      	beq.n	801cadc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801cacc:	4b06      	ldr	r3, [pc, #24]	; (801cae8 <dhcp_handle_ack+0xbc>)
 801cace:	69db      	ldr	r3, [r3, #28]
 801cad0:	4618      	mov	r0, r3
 801cad2:	f7f7 fe9a 	bl	801480a <lwip_htonl>
 801cad6:	4602      	mov	r2, r0
 801cad8:	68fb      	ldr	r3, [r7, #12]
 801cada:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801cadc:	bf00      	nop
 801cade:	3710      	adds	r7, #16
 801cae0:	46bd      	mov	sp, r7
 801cae2:	bd80      	pop	{r7, pc}
 801cae4:	20010350 	.word	0x20010350
 801cae8:	20010358 	.word	0x20010358

0801caec <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801caec:	b580      	push	{r7, lr}
 801caee:	b084      	sub	sp, #16
 801caf0:	af00      	add	r7, sp, #0
 801caf2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d109      	bne.n	801cb0e <dhcp_start+0x22>
 801cafa:	4b37      	ldr	r3, [pc, #220]	; (801cbd8 <dhcp_start+0xec>)
 801cafc:	f240 22e7 	movw	r2, #743	; 0x2e7
 801cb00:	4936      	ldr	r1, [pc, #216]	; (801cbdc <dhcp_start+0xf0>)
 801cb02:	4837      	ldr	r0, [pc, #220]	; (801cbe0 <dhcp_start+0xf4>)
 801cb04:	f004 fd0c 	bl	8021520 <iprintf>
 801cb08:	f06f 030f 	mvn.w	r3, #15
 801cb0c:	e060      	b.n	801cbd0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801cb14:	f003 0301 	and.w	r3, r3, #1
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	d109      	bne.n	801cb30 <dhcp_start+0x44>
 801cb1c:	4b2e      	ldr	r3, [pc, #184]	; (801cbd8 <dhcp_start+0xec>)
 801cb1e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801cb22:	4930      	ldr	r1, [pc, #192]	; (801cbe4 <dhcp_start+0xf8>)
 801cb24:	482e      	ldr	r0, [pc, #184]	; (801cbe0 <dhcp_start+0xf4>)
 801cb26:	f004 fcfb 	bl	8021520 <iprintf>
 801cb2a:	f06f 030f 	mvn.w	r3, #15
 801cb2e:	e04f      	b.n	801cbd0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801cb30:	687b      	ldr	r3, [r7, #4]
 801cb32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb34:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801cb3a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801cb3e:	d202      	bcs.n	801cb46 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801cb40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cb44:	e044      	b.n	801cbd0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801cb46:	68fb      	ldr	r3, [r7, #12]
 801cb48:	2b00      	cmp	r3, #0
 801cb4a:	d10d      	bne.n	801cb68 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801cb4c:	2034      	movs	r0, #52	; 0x34
 801cb4e:	f7f8 f97b 	bl	8014e48 <mem_malloc>
 801cb52:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801cb54:	68fb      	ldr	r3, [r7, #12]
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d102      	bne.n	801cb60 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801cb5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cb5e:	e037      	b.n	801cbd0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	68fa      	ldr	r2, [r7, #12]
 801cb64:	629a      	str	r2, [r3, #40]	; 0x28
 801cb66:	e005      	b.n	801cb74 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801cb68:	68fb      	ldr	r3, [r7, #12]
 801cb6a:	791b      	ldrb	r3, [r3, #4]
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	d001      	beq.n	801cb74 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801cb70:	f7ff fc90 	bl	801c494 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801cb74:	2234      	movs	r2, #52	; 0x34
 801cb76:	2100      	movs	r1, #0
 801cb78:	68f8      	ldr	r0, [r7, #12]
 801cb7a:	f004 fc21 	bl	80213c0 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801cb7e:	f7ff fc37 	bl	801c3f0 <dhcp_inc_pcb_refcount>
 801cb82:	4603      	mov	r3, r0
 801cb84:	2b00      	cmp	r3, #0
 801cb86:	d002      	beq.n	801cb8e <dhcp_start+0xa2>
    return ERR_MEM;
 801cb88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cb8c:	e020      	b.n	801cbd0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801cb8e:	68fb      	ldr	r3, [r7, #12]
 801cb90:	2201      	movs	r2, #1
 801cb92:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801cb9a:	f003 0304 	and.w	r3, r3, #4
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d105      	bne.n	801cbae <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801cba2:	2102      	movs	r1, #2
 801cba4:	68f8      	ldr	r0, [r7, #12]
 801cba6:	f000 fd13 	bl	801d5d0 <dhcp_set_state>
    return ERR_OK;
 801cbaa:	2300      	movs	r3, #0
 801cbac:	e010      	b.n	801cbd0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801cbae:	6878      	ldr	r0, [r7, #4]
 801cbb0:	f000 f90a 	bl	801cdc8 <dhcp_discover>
 801cbb4:	4603      	mov	r3, r0
 801cbb6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801cbb8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	d005      	beq.n	801cbcc <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801cbc0:	6878      	ldr	r0, [r7, #4]
 801cbc2:	f000 fc6b 	bl	801d49c <dhcp_release_and_stop>
    return ERR_MEM;
 801cbc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cbca:	e001      	b.n	801cbd0 <dhcp_start+0xe4>
  }
  return result;
 801cbcc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801cbd0:	4618      	mov	r0, r3
 801cbd2:	3710      	adds	r7, #16
 801cbd4:	46bd      	mov	sp, r7
 801cbd6:	bd80      	pop	{r7, pc}
 801cbd8:	080247ac 	.word	0x080247ac
 801cbdc:	08024890 	.word	0x08024890
 801cbe0:	0802480c 	.word	0x0802480c
 801cbe4:	080248d4 	.word	0x080248d4

0801cbe8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801cbe8:	b580      	push	{r7, lr}
 801cbea:	b084      	sub	sp, #16
 801cbec:	af00      	add	r7, sp, #0
 801cbee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cbf4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801cbf6:	68fb      	ldr	r3, [r7, #12]
 801cbf8:	2b00      	cmp	r3, #0
 801cbfa:	d037      	beq.n	801cc6c <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 801cbfc:	68fb      	ldr	r3, [r7, #12]
 801cbfe:	795b      	ldrb	r3, [r3, #5]
 801cc00:	2b0a      	cmp	r3, #10
 801cc02:	d820      	bhi.n	801cc46 <dhcp_network_changed+0x5e>
 801cc04:	a201      	add	r2, pc, #4	; (adr r2, 801cc0c <dhcp_network_changed+0x24>)
 801cc06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cc0a:	bf00      	nop
 801cc0c:	0801cc71 	.word	0x0801cc71
 801cc10:	0801cc47 	.word	0x0801cc47
 801cc14:	0801cc47 	.word	0x0801cc47
 801cc18:	0801cc39 	.word	0x0801cc39
 801cc1c:	0801cc39 	.word	0x0801cc39
 801cc20:	0801cc39 	.word	0x0801cc39
 801cc24:	0801cc47 	.word	0x0801cc47
 801cc28:	0801cc47 	.word	0x0801cc47
 801cc2c:	0801cc47 	.word	0x0801cc47
 801cc30:	0801cc47 	.word	0x0801cc47
 801cc34:	0801cc39 	.word	0x0801cc39
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801cc38:	68fb      	ldr	r3, [r7, #12]
 801cc3a:	2200      	movs	r2, #0
 801cc3c:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801cc3e:	6878      	ldr	r0, [r7, #4]
 801cc40:	f000 fb76 	bl	801d330 <dhcp_reboot>
      break;
 801cc44:	e015      	b.n	801cc72 <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801cc46:	68fb      	ldr	r3, [r7, #12]
 801cc48:	795b      	ldrb	r3, [r3, #5]
 801cc4a:	2b0c      	cmp	r3, #12
 801cc4c:	d906      	bls.n	801cc5c <dhcp_network_changed+0x74>
 801cc4e:	4b0a      	ldr	r3, [pc, #40]	; (801cc78 <dhcp_network_changed+0x90>)
 801cc50:	f240 326d 	movw	r2, #877	; 0x36d
 801cc54:	4909      	ldr	r1, [pc, #36]	; (801cc7c <dhcp_network_changed+0x94>)
 801cc56:	480a      	ldr	r0, [pc, #40]	; (801cc80 <dhcp_network_changed+0x98>)
 801cc58:	f004 fc62 	bl	8021520 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801cc5c:	68fb      	ldr	r3, [r7, #12]
 801cc5e:	2200      	movs	r2, #0
 801cc60:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801cc62:	6878      	ldr	r0, [r7, #4]
 801cc64:	f000 f8b0 	bl	801cdc8 <dhcp_discover>
      break;
 801cc68:	bf00      	nop
 801cc6a:	e002      	b.n	801cc72 <dhcp_network_changed+0x8a>
    return;
 801cc6c:	bf00      	nop
 801cc6e:	e000      	b.n	801cc72 <dhcp_network_changed+0x8a>
      break;
 801cc70:	bf00      	nop
  }
}
 801cc72:	3710      	adds	r7, #16
 801cc74:	46bd      	mov	sp, r7
 801cc76:	bd80      	pop	{r7, pc}
 801cc78:	080247ac 	.word	0x080247ac
 801cc7c:	080248f8 	.word	0x080248f8
 801cc80:	0802480c 	.word	0x0802480c

0801cc84 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801cc84:	b580      	push	{r7, lr}
 801cc86:	b084      	sub	sp, #16
 801cc88:	af00      	add	r7, sp, #0
 801cc8a:	6078      	str	r0, [r7, #4]
 801cc8c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801cc8e:	687b      	ldr	r3, [r7, #4]
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d107      	bne.n	801cca4 <dhcp_arp_reply+0x20>
 801cc94:	4b0e      	ldr	r3, [pc, #56]	; (801ccd0 <dhcp_arp_reply+0x4c>)
 801cc96:	f240 328b 	movw	r2, #907	; 0x38b
 801cc9a:	490e      	ldr	r1, [pc, #56]	; (801ccd4 <dhcp_arp_reply+0x50>)
 801cc9c:	480e      	ldr	r0, [pc, #56]	; (801ccd8 <dhcp_arp_reply+0x54>)
 801cc9e:	f004 fc3f 	bl	8021520 <iprintf>
 801cca2:	e012      	b.n	801ccca <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cca8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801ccaa:	68fb      	ldr	r3, [r7, #12]
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d00c      	beq.n	801ccca <dhcp_arp_reply+0x46>
 801ccb0:	68fb      	ldr	r3, [r7, #12]
 801ccb2:	795b      	ldrb	r3, [r3, #5]
 801ccb4:	2b08      	cmp	r3, #8
 801ccb6:	d108      	bne.n	801ccca <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801ccb8:	683b      	ldr	r3, [r7, #0]
 801ccba:	681a      	ldr	r2, [r3, #0]
 801ccbc:	68fb      	ldr	r3, [r7, #12]
 801ccbe:	69db      	ldr	r3, [r3, #28]
 801ccc0:	429a      	cmp	r2, r3
 801ccc2:	d102      	bne.n	801ccca <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801ccc4:	6878      	ldr	r0, [r7, #4]
 801ccc6:	f000 f809 	bl	801ccdc <dhcp_decline>
    }
  }
}
 801ccca:	3710      	adds	r7, #16
 801cccc:	46bd      	mov	sp, r7
 801ccce:	bd80      	pop	{r7, pc}
 801ccd0:	080247ac 	.word	0x080247ac
 801ccd4:	08024890 	.word	0x08024890
 801ccd8:	0802480c 	.word	0x0802480c

0801ccdc <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801ccdc:	b5b0      	push	{r4, r5, r7, lr}
 801ccde:	b08a      	sub	sp, #40	; 0x28
 801cce0:	af02      	add	r7, sp, #8
 801cce2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cce8:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801ccea:	210c      	movs	r1, #12
 801ccec:	69b8      	ldr	r0, [r7, #24]
 801ccee:	f000 fc6f 	bl	801d5d0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801ccf2:	f107 030c 	add.w	r3, r7, #12
 801ccf6:	2204      	movs	r2, #4
 801ccf8:	69b9      	ldr	r1, [r7, #24]
 801ccfa:	6878      	ldr	r0, [r7, #4]
 801ccfc:	f001 f8f2 	bl	801dee4 <dhcp_create_msg>
 801cd00:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801cd02:	697b      	ldr	r3, [r7, #20]
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	d035      	beq.n	801cd74 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801cd08:	697b      	ldr	r3, [r7, #20]
 801cd0a:	685b      	ldr	r3, [r3, #4]
 801cd0c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801cd0e:	89b8      	ldrh	r0, [r7, #12]
 801cd10:	693b      	ldr	r3, [r7, #16]
 801cd12:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cd16:	2304      	movs	r3, #4
 801cd18:	2232      	movs	r2, #50	; 0x32
 801cd1a:	f000 fc73 	bl	801d604 <dhcp_option>
 801cd1e:	4603      	mov	r3, r0
 801cd20:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801cd22:	89bc      	ldrh	r4, [r7, #12]
 801cd24:	693b      	ldr	r3, [r7, #16]
 801cd26:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801cd2a:	69bb      	ldr	r3, [r7, #24]
 801cd2c:	69db      	ldr	r3, [r3, #28]
 801cd2e:	4618      	mov	r0, r3
 801cd30:	f7f7 fd6b 	bl	801480a <lwip_htonl>
 801cd34:	4603      	mov	r3, r0
 801cd36:	461a      	mov	r2, r3
 801cd38:	4629      	mov	r1, r5
 801cd3a:	4620      	mov	r0, r4
 801cd3c:	f000 fcee 	bl	801d71c <dhcp_option_long>
 801cd40:	4603      	mov	r3, r0
 801cd42:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801cd44:	89b8      	ldrh	r0, [r7, #12]
 801cd46:	693b      	ldr	r3, [r7, #16]
 801cd48:	33f0      	adds	r3, #240	; 0xf0
 801cd4a:	697a      	ldr	r2, [r7, #20]
 801cd4c:	4619      	mov	r1, r3
 801cd4e:	f001 f99f 	bl	801e090 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801cd52:	4b19      	ldr	r3, [pc, #100]	; (801cdb8 <dhcp_decline+0xdc>)
 801cd54:	6818      	ldr	r0, [r3, #0]
 801cd56:	4b19      	ldr	r3, [pc, #100]	; (801cdbc <dhcp_decline+0xe0>)
 801cd58:	9301      	str	r3, [sp, #4]
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	9300      	str	r3, [sp, #0]
 801cd5e:	2343      	movs	r3, #67	; 0x43
 801cd60:	4a17      	ldr	r2, [pc, #92]	; (801cdc0 <dhcp_decline+0xe4>)
 801cd62:	6979      	ldr	r1, [r7, #20]
 801cd64:	f7ff f8be 	bl	801bee4 <udp_sendto_if_src>
 801cd68:	4603      	mov	r3, r0
 801cd6a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801cd6c:	6978      	ldr	r0, [r7, #20]
 801cd6e:	f7f9 f905 	bl	8015f7c <pbuf_free>
 801cd72:	e001      	b.n	801cd78 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801cd74:	23ff      	movs	r3, #255	; 0xff
 801cd76:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801cd78:	69bb      	ldr	r3, [r7, #24]
 801cd7a:	799b      	ldrb	r3, [r3, #6]
 801cd7c:	2bff      	cmp	r3, #255	; 0xff
 801cd7e:	d005      	beq.n	801cd8c <dhcp_decline+0xb0>
    dhcp->tries++;
 801cd80:	69bb      	ldr	r3, [r7, #24]
 801cd82:	799b      	ldrb	r3, [r3, #6]
 801cd84:	3301      	adds	r3, #1
 801cd86:	b2da      	uxtb	r2, r3
 801cd88:	69bb      	ldr	r3, [r7, #24]
 801cd8a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801cd8c:	f242 7310 	movw	r3, #10000	; 0x2710
 801cd90:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801cd92:	89fb      	ldrh	r3, [r7, #14]
 801cd94:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801cd98:	4a0a      	ldr	r2, [pc, #40]	; (801cdc4 <dhcp_decline+0xe8>)
 801cd9a:	fb82 1203 	smull	r1, r2, r2, r3
 801cd9e:	1152      	asrs	r2, r2, #5
 801cda0:	17db      	asrs	r3, r3, #31
 801cda2:	1ad3      	subs	r3, r2, r3
 801cda4:	b29a      	uxth	r2, r3
 801cda6:	69bb      	ldr	r3, [r7, #24]
 801cda8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801cdaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801cdae:	4618      	mov	r0, r3
 801cdb0:	3720      	adds	r7, #32
 801cdb2:	46bd      	mov	sp, r7
 801cdb4:	bdb0      	pop	{r4, r5, r7, pc}
 801cdb6:	bf00      	nop
 801cdb8:	20009000 	.word	0x20009000
 801cdbc:	08025398 	.word	0x08025398
 801cdc0:	0802539c 	.word	0x0802539c
 801cdc4:	10624dd3 	.word	0x10624dd3

0801cdc8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801cdc8:	b580      	push	{r7, lr}
 801cdca:	b08a      	sub	sp, #40	; 0x28
 801cdcc:	af02      	add	r7, sp, #8
 801cdce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cdd4:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801cdd6:	2300      	movs	r3, #0
 801cdd8:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801cdda:	69bb      	ldr	r3, [r7, #24]
 801cddc:	2200      	movs	r2, #0
 801cdde:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801cde0:	2106      	movs	r1, #6
 801cde2:	69b8      	ldr	r0, [r7, #24]
 801cde4:	f000 fbf4 	bl	801d5d0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801cde8:	f107 0308 	add.w	r3, r7, #8
 801cdec:	2201      	movs	r2, #1
 801cdee:	69b9      	ldr	r1, [r7, #24]
 801cdf0:	6878      	ldr	r0, [r7, #4]
 801cdf2:	f001 f877 	bl	801dee4 <dhcp_create_msg>
 801cdf6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801cdf8:	693b      	ldr	r3, [r7, #16]
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	d04b      	beq.n	801ce96 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801cdfe:	693b      	ldr	r3, [r7, #16]
 801ce00:	685b      	ldr	r3, [r3, #4]
 801ce02:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ce04:	8938      	ldrh	r0, [r7, #8]
 801ce06:	68fb      	ldr	r3, [r7, #12]
 801ce08:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ce0c:	2302      	movs	r3, #2
 801ce0e:	2239      	movs	r2, #57	; 0x39
 801ce10:	f000 fbf8 	bl	801d604 <dhcp_option>
 801ce14:	4603      	mov	r3, r0
 801ce16:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ce18:	8938      	ldrh	r0, [r7, #8]
 801ce1a:	68fb      	ldr	r3, [r7, #12]
 801ce1c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ce20:	687b      	ldr	r3, [r7, #4]
 801ce22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801ce24:	461a      	mov	r2, r3
 801ce26:	f000 fc47 	bl	801d6b8 <dhcp_option_short>
 801ce2a:	4603      	mov	r3, r0
 801ce2c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ce2e:	8938      	ldrh	r0, [r7, #8]
 801ce30:	68fb      	ldr	r3, [r7, #12]
 801ce32:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ce36:	2303      	movs	r3, #3
 801ce38:	2237      	movs	r2, #55	; 0x37
 801ce3a:	f000 fbe3 	bl	801d604 <dhcp_option>
 801ce3e:	4603      	mov	r3, r0
 801ce40:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ce42:	2300      	movs	r3, #0
 801ce44:	77fb      	strb	r3, [r7, #31]
 801ce46:	e00e      	b.n	801ce66 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801ce48:	8938      	ldrh	r0, [r7, #8]
 801ce4a:	68fb      	ldr	r3, [r7, #12]
 801ce4c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ce50:	7ffb      	ldrb	r3, [r7, #31]
 801ce52:	4a29      	ldr	r2, [pc, #164]	; (801cef8 <dhcp_discover+0x130>)
 801ce54:	5cd3      	ldrb	r3, [r2, r3]
 801ce56:	461a      	mov	r2, r3
 801ce58:	f000 fc08 	bl	801d66c <dhcp_option_byte>
 801ce5c:	4603      	mov	r3, r0
 801ce5e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ce60:	7ffb      	ldrb	r3, [r7, #31]
 801ce62:	3301      	adds	r3, #1
 801ce64:	77fb      	strb	r3, [r7, #31]
 801ce66:	7ffb      	ldrb	r3, [r7, #31]
 801ce68:	2b02      	cmp	r3, #2
 801ce6a:	d9ed      	bls.n	801ce48 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ce6c:	8938      	ldrh	r0, [r7, #8]
 801ce6e:	68fb      	ldr	r3, [r7, #12]
 801ce70:	33f0      	adds	r3, #240	; 0xf0
 801ce72:	693a      	ldr	r2, [r7, #16]
 801ce74:	4619      	mov	r1, r3
 801ce76:	f001 f90b 	bl	801e090 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801ce7a:	4b20      	ldr	r3, [pc, #128]	; (801cefc <dhcp_discover+0x134>)
 801ce7c:	6818      	ldr	r0, [r3, #0]
 801ce7e:	4b20      	ldr	r3, [pc, #128]	; (801cf00 <dhcp_discover+0x138>)
 801ce80:	9301      	str	r3, [sp, #4]
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	9300      	str	r3, [sp, #0]
 801ce86:	2343      	movs	r3, #67	; 0x43
 801ce88:	4a1e      	ldr	r2, [pc, #120]	; (801cf04 <dhcp_discover+0x13c>)
 801ce8a:	6939      	ldr	r1, [r7, #16]
 801ce8c:	f7ff f82a 	bl	801bee4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801ce90:	6938      	ldr	r0, [r7, #16]
 801ce92:	f7f9 f873 	bl	8015f7c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801ce96:	69bb      	ldr	r3, [r7, #24]
 801ce98:	799b      	ldrb	r3, [r3, #6]
 801ce9a:	2bff      	cmp	r3, #255	; 0xff
 801ce9c:	d005      	beq.n	801ceaa <dhcp_discover+0xe2>
    dhcp->tries++;
 801ce9e:	69bb      	ldr	r3, [r7, #24]
 801cea0:	799b      	ldrb	r3, [r3, #6]
 801cea2:	3301      	adds	r3, #1
 801cea4:	b2da      	uxtb	r2, r3
 801cea6:	69bb      	ldr	r3, [r7, #24]
 801cea8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801ceaa:	69bb      	ldr	r3, [r7, #24]
 801ceac:	799b      	ldrb	r3, [r3, #6]
 801ceae:	2b05      	cmp	r3, #5
 801ceb0:	d80d      	bhi.n	801cece <dhcp_discover+0x106>
 801ceb2:	69bb      	ldr	r3, [r7, #24]
 801ceb4:	799b      	ldrb	r3, [r3, #6]
 801ceb6:	461a      	mov	r2, r3
 801ceb8:	2301      	movs	r3, #1
 801ceba:	4093      	lsls	r3, r2
 801cebc:	b29b      	uxth	r3, r3
 801cebe:	461a      	mov	r2, r3
 801cec0:	0152      	lsls	r2, r2, #5
 801cec2:	1ad2      	subs	r2, r2, r3
 801cec4:	0092      	lsls	r2, r2, #2
 801cec6:	4413      	add	r3, r2
 801cec8:	00db      	lsls	r3, r3, #3
 801ceca:	b29b      	uxth	r3, r3
 801cecc:	e001      	b.n	801ced2 <dhcp_discover+0x10a>
 801cece:	f64e 2360 	movw	r3, #60000	; 0xea60
 801ced2:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ced4:	897b      	ldrh	r3, [r7, #10]
 801ced6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ceda:	4a0b      	ldr	r2, [pc, #44]	; (801cf08 <dhcp_discover+0x140>)
 801cedc:	fb82 1203 	smull	r1, r2, r2, r3
 801cee0:	1152      	asrs	r2, r2, #5
 801cee2:	17db      	asrs	r3, r3, #31
 801cee4:	1ad3      	subs	r3, r2, r3
 801cee6:	b29a      	uxth	r2, r3
 801cee8:	69bb      	ldr	r3, [r7, #24]
 801ceea:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ceec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801cef0:	4618      	mov	r0, r3
 801cef2:	3720      	adds	r7, #32
 801cef4:	46bd      	mov	sp, r7
 801cef6:	bd80      	pop	{r7, pc}
 801cef8:	20000040 	.word	0x20000040
 801cefc:	20009000 	.word	0x20009000
 801cf00:	08025398 	.word	0x08025398
 801cf04:	0802539c 	.word	0x0802539c
 801cf08:	10624dd3 	.word	0x10624dd3

0801cf0c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801cf0c:	b580      	push	{r7, lr}
 801cf0e:	b088      	sub	sp, #32
 801cf10:	af00      	add	r7, sp, #0
 801cf12:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	d107      	bne.n	801cf2a <dhcp_bind+0x1e>
 801cf1a:	4b64      	ldr	r3, [pc, #400]	; (801d0ac <dhcp_bind+0x1a0>)
 801cf1c:	f240 4215 	movw	r2, #1045	; 0x415
 801cf20:	4963      	ldr	r1, [pc, #396]	; (801d0b0 <dhcp_bind+0x1a4>)
 801cf22:	4864      	ldr	r0, [pc, #400]	; (801d0b4 <dhcp_bind+0x1a8>)
 801cf24:	f004 fafc 	bl	8021520 <iprintf>
 801cf28:	e0bc      	b.n	801d0a4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf2e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801cf30:	69bb      	ldr	r3, [r7, #24]
 801cf32:	2b00      	cmp	r3, #0
 801cf34:	d107      	bne.n	801cf46 <dhcp_bind+0x3a>
 801cf36:	4b5d      	ldr	r3, [pc, #372]	; (801d0ac <dhcp_bind+0x1a0>)
 801cf38:	f240 4217 	movw	r2, #1047	; 0x417
 801cf3c:	495e      	ldr	r1, [pc, #376]	; (801d0b8 <dhcp_bind+0x1ac>)
 801cf3e:	485d      	ldr	r0, [pc, #372]	; (801d0b4 <dhcp_bind+0x1a8>)
 801cf40:	f004 faee 	bl	8021520 <iprintf>
 801cf44:	e0ae      	b.n	801d0a4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801cf46:	69bb      	ldr	r3, [r7, #24]
 801cf48:	2200      	movs	r2, #0
 801cf4a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801cf4c:	69bb      	ldr	r3, [r7, #24]
 801cf4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801cf54:	d019      	beq.n	801cf8a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801cf56:	69bb      	ldr	r3, [r7, #24]
 801cf58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf5a:	331e      	adds	r3, #30
 801cf5c:	4a57      	ldr	r2, [pc, #348]	; (801d0bc <dhcp_bind+0x1b0>)
 801cf5e:	fba2 2303 	umull	r2, r3, r2, r3
 801cf62:	095b      	lsrs	r3, r3, #5
 801cf64:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801cf66:	69fb      	ldr	r3, [r7, #28]
 801cf68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cf6c:	d302      	bcc.n	801cf74 <dhcp_bind+0x68>
      timeout = 0xffff;
 801cf6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cf72:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801cf74:	69fb      	ldr	r3, [r7, #28]
 801cf76:	b29a      	uxth	r2, r3
 801cf78:	69bb      	ldr	r3, [r7, #24]
 801cf7a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801cf7c:	69bb      	ldr	r3, [r7, #24]
 801cf7e:	8a9b      	ldrh	r3, [r3, #20]
 801cf80:	2b00      	cmp	r3, #0
 801cf82:	d102      	bne.n	801cf8a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801cf84:	69bb      	ldr	r3, [r7, #24]
 801cf86:	2201      	movs	r2, #1
 801cf88:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801cf8a:	69bb      	ldr	r3, [r7, #24]
 801cf8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801cf92:	d01d      	beq.n	801cfd0 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801cf94:	69bb      	ldr	r3, [r7, #24]
 801cf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf98:	331e      	adds	r3, #30
 801cf9a:	4a48      	ldr	r2, [pc, #288]	; (801d0bc <dhcp_bind+0x1b0>)
 801cf9c:	fba2 2303 	umull	r2, r3, r2, r3
 801cfa0:	095b      	lsrs	r3, r3, #5
 801cfa2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801cfa4:	69fb      	ldr	r3, [r7, #28]
 801cfa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cfaa:	d302      	bcc.n	801cfb2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801cfac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cfb0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801cfb2:	69fb      	ldr	r3, [r7, #28]
 801cfb4:	b29a      	uxth	r2, r3
 801cfb6:	69bb      	ldr	r3, [r7, #24]
 801cfb8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801cfba:	69bb      	ldr	r3, [r7, #24]
 801cfbc:	895b      	ldrh	r3, [r3, #10]
 801cfbe:	2b00      	cmp	r3, #0
 801cfc0:	d102      	bne.n	801cfc8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801cfc2:	69bb      	ldr	r3, [r7, #24]
 801cfc4:	2201      	movs	r2, #1
 801cfc6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801cfc8:	69bb      	ldr	r3, [r7, #24]
 801cfca:	895a      	ldrh	r2, [r3, #10]
 801cfcc:	69bb      	ldr	r3, [r7, #24]
 801cfce:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801cfd0:	69bb      	ldr	r3, [r7, #24]
 801cfd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801cfd8:	d01d      	beq.n	801d016 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801cfda:	69bb      	ldr	r3, [r7, #24]
 801cfdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfde:	331e      	adds	r3, #30
 801cfe0:	4a36      	ldr	r2, [pc, #216]	; (801d0bc <dhcp_bind+0x1b0>)
 801cfe2:	fba2 2303 	umull	r2, r3, r2, r3
 801cfe6:	095b      	lsrs	r3, r3, #5
 801cfe8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801cfea:	69fb      	ldr	r3, [r7, #28]
 801cfec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cff0:	d302      	bcc.n	801cff8 <dhcp_bind+0xec>
      timeout = 0xffff;
 801cff2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cff6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801cff8:	69fb      	ldr	r3, [r7, #28]
 801cffa:	b29a      	uxth	r2, r3
 801cffc:	69bb      	ldr	r3, [r7, #24]
 801cffe:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801d000:	69bb      	ldr	r3, [r7, #24]
 801d002:	899b      	ldrh	r3, [r3, #12]
 801d004:	2b00      	cmp	r3, #0
 801d006:	d102      	bne.n	801d00e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801d008:	69bb      	ldr	r3, [r7, #24]
 801d00a:	2201      	movs	r2, #1
 801d00c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801d00e:	69bb      	ldr	r3, [r7, #24]
 801d010:	899a      	ldrh	r2, [r3, #12]
 801d012:	69bb      	ldr	r3, [r7, #24]
 801d014:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801d016:	69bb      	ldr	r3, [r7, #24]
 801d018:	895a      	ldrh	r2, [r3, #10]
 801d01a:	69bb      	ldr	r3, [r7, #24]
 801d01c:	899b      	ldrh	r3, [r3, #12]
 801d01e:	429a      	cmp	r2, r3
 801d020:	d306      	bcc.n	801d030 <dhcp_bind+0x124>
 801d022:	69bb      	ldr	r3, [r7, #24]
 801d024:	899b      	ldrh	r3, [r3, #12]
 801d026:	2b00      	cmp	r3, #0
 801d028:	d002      	beq.n	801d030 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801d02a:	69bb      	ldr	r3, [r7, #24]
 801d02c:	2200      	movs	r2, #0
 801d02e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801d030:	69bb      	ldr	r3, [r7, #24]
 801d032:	79db      	ldrb	r3, [r3, #7]
 801d034:	2b00      	cmp	r3, #0
 801d036:	d003      	beq.n	801d040 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801d038:	69bb      	ldr	r3, [r7, #24]
 801d03a:	6a1b      	ldr	r3, [r3, #32]
 801d03c:	613b      	str	r3, [r7, #16]
 801d03e:	e014      	b.n	801d06a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801d040:	69bb      	ldr	r3, [r7, #24]
 801d042:	331c      	adds	r3, #28
 801d044:	781b      	ldrb	r3, [r3, #0]
 801d046:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801d048:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801d04c:	2b00      	cmp	r3, #0
 801d04e:	db02      	blt.n	801d056 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801d050:	23ff      	movs	r3, #255	; 0xff
 801d052:	613b      	str	r3, [r7, #16]
 801d054:	e009      	b.n	801d06a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801d056:	7dfb      	ldrb	r3, [r7, #23]
 801d058:	2bbf      	cmp	r3, #191	; 0xbf
 801d05a:	d903      	bls.n	801d064 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801d05c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801d060:	613b      	str	r3, [r7, #16]
 801d062:	e002      	b.n	801d06a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801d064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d068:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801d06a:	69bb      	ldr	r3, [r7, #24]
 801d06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d06e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	2b00      	cmp	r3, #0
 801d074:	d108      	bne.n	801d088 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801d076:	69bb      	ldr	r3, [r7, #24]
 801d078:	69da      	ldr	r2, [r3, #28]
 801d07a:	693b      	ldr	r3, [r7, #16]
 801d07c:	4013      	ands	r3, r2
 801d07e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801d080:	68fb      	ldr	r3, [r7, #12]
 801d082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d086:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801d088:	210a      	movs	r1, #10
 801d08a:	69b8      	ldr	r0, [r7, #24]
 801d08c:	f000 faa0 	bl	801d5d0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801d090:	69bb      	ldr	r3, [r7, #24]
 801d092:	f103 011c 	add.w	r1, r3, #28
 801d096:	f107 030c 	add.w	r3, r7, #12
 801d09a:	f107 0210 	add.w	r2, r7, #16
 801d09e:	6878      	ldr	r0, [r7, #4]
 801d0a0:	f7f8 fa52 	bl	8015548 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801d0a4:	3720      	adds	r7, #32
 801d0a6:	46bd      	mov	sp, r7
 801d0a8:	bd80      	pop	{r7, pc}
 801d0aa:	bf00      	nop
 801d0ac:	080247ac 	.word	0x080247ac
 801d0b0:	0802490c 	.word	0x0802490c
 801d0b4:	0802480c 	.word	0x0802480c
 801d0b8:	08024928 	.word	0x08024928
 801d0bc:	88888889 	.word	0x88888889

0801d0c0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801d0c0:	b580      	push	{r7, lr}
 801d0c2:	b08a      	sub	sp, #40	; 0x28
 801d0c4:	af02      	add	r7, sp, #8
 801d0c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d0c8:	687b      	ldr	r3, [r7, #4]
 801d0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d0cc:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801d0ce:	2105      	movs	r1, #5
 801d0d0:	69b8      	ldr	r0, [r7, #24]
 801d0d2:	f000 fa7d 	bl	801d5d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d0d6:	f107 030c 	add.w	r3, r7, #12
 801d0da:	2203      	movs	r2, #3
 801d0dc:	69b9      	ldr	r1, [r7, #24]
 801d0de:	6878      	ldr	r0, [r7, #4]
 801d0e0:	f000 ff00 	bl	801dee4 <dhcp_create_msg>
 801d0e4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801d0e6:	697b      	ldr	r3, [r7, #20]
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	d04e      	beq.n	801d18a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d0ec:	697b      	ldr	r3, [r7, #20]
 801d0ee:	685b      	ldr	r3, [r3, #4]
 801d0f0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d0f2:	89b8      	ldrh	r0, [r7, #12]
 801d0f4:	693b      	ldr	r3, [r7, #16]
 801d0f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d0fa:	2302      	movs	r3, #2
 801d0fc:	2239      	movs	r2, #57	; 0x39
 801d0fe:	f000 fa81 	bl	801d604 <dhcp_option>
 801d102:	4603      	mov	r3, r0
 801d104:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d106:	89b8      	ldrh	r0, [r7, #12]
 801d108:	693b      	ldr	r3, [r7, #16]
 801d10a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d10e:	687b      	ldr	r3, [r7, #4]
 801d110:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801d112:	461a      	mov	r2, r3
 801d114:	f000 fad0 	bl	801d6b8 <dhcp_option_short>
 801d118:	4603      	mov	r3, r0
 801d11a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d11c:	89b8      	ldrh	r0, [r7, #12]
 801d11e:	693b      	ldr	r3, [r7, #16]
 801d120:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d124:	2303      	movs	r3, #3
 801d126:	2237      	movs	r2, #55	; 0x37
 801d128:	f000 fa6c 	bl	801d604 <dhcp_option>
 801d12c:	4603      	mov	r3, r0
 801d12e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d130:	2300      	movs	r3, #0
 801d132:	77bb      	strb	r3, [r7, #30]
 801d134:	e00e      	b.n	801d154 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d136:	89b8      	ldrh	r0, [r7, #12]
 801d138:	693b      	ldr	r3, [r7, #16]
 801d13a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d13e:	7fbb      	ldrb	r3, [r7, #30]
 801d140:	4a2a      	ldr	r2, [pc, #168]	; (801d1ec <dhcp_renew+0x12c>)
 801d142:	5cd3      	ldrb	r3, [r2, r3]
 801d144:	461a      	mov	r2, r3
 801d146:	f000 fa91 	bl	801d66c <dhcp_option_byte>
 801d14a:	4603      	mov	r3, r0
 801d14c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d14e:	7fbb      	ldrb	r3, [r7, #30]
 801d150:	3301      	adds	r3, #1
 801d152:	77bb      	strb	r3, [r7, #30]
 801d154:	7fbb      	ldrb	r3, [r7, #30]
 801d156:	2b02      	cmp	r3, #2
 801d158:	d9ed      	bls.n	801d136 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d15a:	89b8      	ldrh	r0, [r7, #12]
 801d15c:	693b      	ldr	r3, [r7, #16]
 801d15e:	33f0      	adds	r3, #240	; 0xf0
 801d160:	697a      	ldr	r2, [r7, #20]
 801d162:	4619      	mov	r1, r3
 801d164:	f000 ff94 	bl	801e090 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d168:	4b21      	ldr	r3, [pc, #132]	; (801d1f0 <dhcp_renew+0x130>)
 801d16a:	6818      	ldr	r0, [r3, #0]
 801d16c:	69bb      	ldr	r3, [r7, #24]
 801d16e:	f103 0218 	add.w	r2, r3, #24
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	9300      	str	r3, [sp, #0]
 801d176:	2343      	movs	r3, #67	; 0x43
 801d178:	6979      	ldr	r1, [r7, #20]
 801d17a:	f7fe fe3f 	bl	801bdfc <udp_sendto_if>
 801d17e:	4603      	mov	r3, r0
 801d180:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d182:	6978      	ldr	r0, [r7, #20]
 801d184:	f7f8 fefa 	bl	8015f7c <pbuf_free>
 801d188:	e001      	b.n	801d18e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d18a:	23ff      	movs	r3, #255	; 0xff
 801d18c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d18e:	69bb      	ldr	r3, [r7, #24]
 801d190:	799b      	ldrb	r3, [r3, #6]
 801d192:	2bff      	cmp	r3, #255	; 0xff
 801d194:	d005      	beq.n	801d1a2 <dhcp_renew+0xe2>
    dhcp->tries++;
 801d196:	69bb      	ldr	r3, [r7, #24]
 801d198:	799b      	ldrb	r3, [r3, #6]
 801d19a:	3301      	adds	r3, #1
 801d19c:	b2da      	uxtb	r2, r3
 801d19e:	69bb      	ldr	r3, [r7, #24]
 801d1a0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801d1a2:	69bb      	ldr	r3, [r7, #24]
 801d1a4:	799b      	ldrb	r3, [r3, #6]
 801d1a6:	2b09      	cmp	r3, #9
 801d1a8:	d80a      	bhi.n	801d1c0 <dhcp_renew+0x100>
 801d1aa:	69bb      	ldr	r3, [r7, #24]
 801d1ac:	799b      	ldrb	r3, [r3, #6]
 801d1ae:	b29b      	uxth	r3, r3
 801d1b0:	461a      	mov	r2, r3
 801d1b2:	0152      	lsls	r2, r2, #5
 801d1b4:	1ad2      	subs	r2, r2, r3
 801d1b6:	0092      	lsls	r2, r2, #2
 801d1b8:	4413      	add	r3, r2
 801d1ba:	011b      	lsls	r3, r3, #4
 801d1bc:	b29b      	uxth	r3, r3
 801d1be:	e001      	b.n	801d1c4 <dhcp_renew+0x104>
 801d1c0:	f644 6320 	movw	r3, #20000	; 0x4e20
 801d1c4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d1c6:	89fb      	ldrh	r3, [r7, #14]
 801d1c8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d1cc:	4a09      	ldr	r2, [pc, #36]	; (801d1f4 <dhcp_renew+0x134>)
 801d1ce:	fb82 1203 	smull	r1, r2, r2, r3
 801d1d2:	1152      	asrs	r2, r2, #5
 801d1d4:	17db      	asrs	r3, r3, #31
 801d1d6:	1ad3      	subs	r3, r2, r3
 801d1d8:	b29a      	uxth	r2, r3
 801d1da:	69bb      	ldr	r3, [r7, #24]
 801d1dc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d1de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d1e2:	4618      	mov	r0, r3
 801d1e4:	3720      	adds	r7, #32
 801d1e6:	46bd      	mov	sp, r7
 801d1e8:	bd80      	pop	{r7, pc}
 801d1ea:	bf00      	nop
 801d1ec:	20000040 	.word	0x20000040
 801d1f0:	20009000 	.word	0x20009000
 801d1f4:	10624dd3 	.word	0x10624dd3

0801d1f8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801d1f8:	b580      	push	{r7, lr}
 801d1fa:	b08a      	sub	sp, #40	; 0x28
 801d1fc:	af02      	add	r7, sp, #8
 801d1fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d204:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801d206:	2104      	movs	r1, #4
 801d208:	69b8      	ldr	r0, [r7, #24]
 801d20a:	f000 f9e1 	bl	801d5d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d20e:	f107 030c 	add.w	r3, r7, #12
 801d212:	2203      	movs	r2, #3
 801d214:	69b9      	ldr	r1, [r7, #24]
 801d216:	6878      	ldr	r0, [r7, #4]
 801d218:	f000 fe64 	bl	801dee4 <dhcp_create_msg>
 801d21c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801d21e:	697b      	ldr	r3, [r7, #20]
 801d220:	2b00      	cmp	r3, #0
 801d222:	d04c      	beq.n	801d2be <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d224:	697b      	ldr	r3, [r7, #20]
 801d226:	685b      	ldr	r3, [r3, #4]
 801d228:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d22a:	89b8      	ldrh	r0, [r7, #12]
 801d22c:	693b      	ldr	r3, [r7, #16]
 801d22e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d232:	2302      	movs	r3, #2
 801d234:	2239      	movs	r2, #57	; 0x39
 801d236:	f000 f9e5 	bl	801d604 <dhcp_option>
 801d23a:	4603      	mov	r3, r0
 801d23c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d23e:	89b8      	ldrh	r0, [r7, #12]
 801d240:	693b      	ldr	r3, [r7, #16]
 801d242:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d246:	687b      	ldr	r3, [r7, #4]
 801d248:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801d24a:	461a      	mov	r2, r3
 801d24c:	f000 fa34 	bl	801d6b8 <dhcp_option_short>
 801d250:	4603      	mov	r3, r0
 801d252:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d254:	89b8      	ldrh	r0, [r7, #12]
 801d256:	693b      	ldr	r3, [r7, #16]
 801d258:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d25c:	2303      	movs	r3, #3
 801d25e:	2237      	movs	r2, #55	; 0x37
 801d260:	f000 f9d0 	bl	801d604 <dhcp_option>
 801d264:	4603      	mov	r3, r0
 801d266:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d268:	2300      	movs	r3, #0
 801d26a:	77bb      	strb	r3, [r7, #30]
 801d26c:	e00e      	b.n	801d28c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d26e:	89b8      	ldrh	r0, [r7, #12]
 801d270:	693b      	ldr	r3, [r7, #16]
 801d272:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d276:	7fbb      	ldrb	r3, [r7, #30]
 801d278:	4a29      	ldr	r2, [pc, #164]	; (801d320 <dhcp_rebind+0x128>)
 801d27a:	5cd3      	ldrb	r3, [r2, r3]
 801d27c:	461a      	mov	r2, r3
 801d27e:	f000 f9f5 	bl	801d66c <dhcp_option_byte>
 801d282:	4603      	mov	r3, r0
 801d284:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d286:	7fbb      	ldrb	r3, [r7, #30]
 801d288:	3301      	adds	r3, #1
 801d28a:	77bb      	strb	r3, [r7, #30]
 801d28c:	7fbb      	ldrb	r3, [r7, #30]
 801d28e:	2b02      	cmp	r3, #2
 801d290:	d9ed      	bls.n	801d26e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d292:	89b8      	ldrh	r0, [r7, #12]
 801d294:	693b      	ldr	r3, [r7, #16]
 801d296:	33f0      	adds	r3, #240	; 0xf0
 801d298:	697a      	ldr	r2, [r7, #20]
 801d29a:	4619      	mov	r1, r3
 801d29c:	f000 fef8 	bl	801e090 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d2a0:	4b20      	ldr	r3, [pc, #128]	; (801d324 <dhcp_rebind+0x12c>)
 801d2a2:	6818      	ldr	r0, [r3, #0]
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	9300      	str	r3, [sp, #0]
 801d2a8:	2343      	movs	r3, #67	; 0x43
 801d2aa:	4a1f      	ldr	r2, [pc, #124]	; (801d328 <dhcp_rebind+0x130>)
 801d2ac:	6979      	ldr	r1, [r7, #20]
 801d2ae:	f7fe fda5 	bl	801bdfc <udp_sendto_if>
 801d2b2:	4603      	mov	r3, r0
 801d2b4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d2b6:	6978      	ldr	r0, [r7, #20]
 801d2b8:	f7f8 fe60 	bl	8015f7c <pbuf_free>
 801d2bc:	e001      	b.n	801d2c2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d2be:	23ff      	movs	r3, #255	; 0xff
 801d2c0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d2c2:	69bb      	ldr	r3, [r7, #24]
 801d2c4:	799b      	ldrb	r3, [r3, #6]
 801d2c6:	2bff      	cmp	r3, #255	; 0xff
 801d2c8:	d005      	beq.n	801d2d6 <dhcp_rebind+0xde>
    dhcp->tries++;
 801d2ca:	69bb      	ldr	r3, [r7, #24]
 801d2cc:	799b      	ldrb	r3, [r3, #6]
 801d2ce:	3301      	adds	r3, #1
 801d2d0:	b2da      	uxtb	r2, r3
 801d2d2:	69bb      	ldr	r3, [r7, #24]
 801d2d4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801d2d6:	69bb      	ldr	r3, [r7, #24]
 801d2d8:	799b      	ldrb	r3, [r3, #6]
 801d2da:	2b09      	cmp	r3, #9
 801d2dc:	d80a      	bhi.n	801d2f4 <dhcp_rebind+0xfc>
 801d2de:	69bb      	ldr	r3, [r7, #24]
 801d2e0:	799b      	ldrb	r3, [r3, #6]
 801d2e2:	b29b      	uxth	r3, r3
 801d2e4:	461a      	mov	r2, r3
 801d2e6:	0152      	lsls	r2, r2, #5
 801d2e8:	1ad2      	subs	r2, r2, r3
 801d2ea:	0092      	lsls	r2, r2, #2
 801d2ec:	4413      	add	r3, r2
 801d2ee:	00db      	lsls	r3, r3, #3
 801d2f0:	b29b      	uxth	r3, r3
 801d2f2:	e001      	b.n	801d2f8 <dhcp_rebind+0x100>
 801d2f4:	f242 7310 	movw	r3, #10000	; 0x2710
 801d2f8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d2fa:	89fb      	ldrh	r3, [r7, #14]
 801d2fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d300:	4a0a      	ldr	r2, [pc, #40]	; (801d32c <dhcp_rebind+0x134>)
 801d302:	fb82 1203 	smull	r1, r2, r2, r3
 801d306:	1152      	asrs	r2, r2, #5
 801d308:	17db      	asrs	r3, r3, #31
 801d30a:	1ad3      	subs	r3, r2, r3
 801d30c:	b29a      	uxth	r2, r3
 801d30e:	69bb      	ldr	r3, [r7, #24]
 801d310:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d312:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d316:	4618      	mov	r0, r3
 801d318:	3720      	adds	r7, #32
 801d31a:	46bd      	mov	sp, r7
 801d31c:	bd80      	pop	{r7, pc}
 801d31e:	bf00      	nop
 801d320:	20000040 	.word	0x20000040
 801d324:	20009000 	.word	0x20009000
 801d328:	0802539c 	.word	0x0802539c
 801d32c:	10624dd3 	.word	0x10624dd3

0801d330 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801d330:	b5b0      	push	{r4, r5, r7, lr}
 801d332:	b08a      	sub	sp, #40	; 0x28
 801d334:	af02      	add	r7, sp, #8
 801d336:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d338:	687b      	ldr	r3, [r7, #4]
 801d33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d33c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801d33e:	2103      	movs	r1, #3
 801d340:	69b8      	ldr	r0, [r7, #24]
 801d342:	f000 f945 	bl	801d5d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d346:	f107 030c 	add.w	r3, r7, #12
 801d34a:	2203      	movs	r2, #3
 801d34c:	69b9      	ldr	r1, [r7, #24]
 801d34e:	6878      	ldr	r0, [r7, #4]
 801d350:	f000 fdc8 	bl	801dee4 <dhcp_create_msg>
 801d354:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801d356:	697b      	ldr	r3, [r7, #20]
 801d358:	2b00      	cmp	r3, #0
 801d35a:	d066      	beq.n	801d42a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d35c:	697b      	ldr	r3, [r7, #20]
 801d35e:	685b      	ldr	r3, [r3, #4]
 801d360:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d362:	89b8      	ldrh	r0, [r7, #12]
 801d364:	693b      	ldr	r3, [r7, #16]
 801d366:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d36a:	2302      	movs	r3, #2
 801d36c:	2239      	movs	r2, #57	; 0x39
 801d36e:	f000 f949 	bl	801d604 <dhcp_option>
 801d372:	4603      	mov	r3, r0
 801d374:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801d376:	89b8      	ldrh	r0, [r7, #12]
 801d378:	693b      	ldr	r3, [r7, #16]
 801d37a:	33f0      	adds	r3, #240	; 0xf0
 801d37c:	f44f 7210 	mov.w	r2, #576	; 0x240
 801d380:	4619      	mov	r1, r3
 801d382:	f000 f999 	bl	801d6b8 <dhcp_option_short>
 801d386:	4603      	mov	r3, r0
 801d388:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801d38a:	89b8      	ldrh	r0, [r7, #12]
 801d38c:	693b      	ldr	r3, [r7, #16]
 801d38e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d392:	2304      	movs	r3, #4
 801d394:	2232      	movs	r2, #50	; 0x32
 801d396:	f000 f935 	bl	801d604 <dhcp_option>
 801d39a:	4603      	mov	r3, r0
 801d39c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d39e:	89bc      	ldrh	r4, [r7, #12]
 801d3a0:	693b      	ldr	r3, [r7, #16]
 801d3a2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801d3a6:	69bb      	ldr	r3, [r7, #24]
 801d3a8:	69db      	ldr	r3, [r3, #28]
 801d3aa:	4618      	mov	r0, r3
 801d3ac:	f7f7 fa2d 	bl	801480a <lwip_htonl>
 801d3b0:	4603      	mov	r3, r0
 801d3b2:	461a      	mov	r2, r3
 801d3b4:	4629      	mov	r1, r5
 801d3b6:	4620      	mov	r0, r4
 801d3b8:	f000 f9b0 	bl	801d71c <dhcp_option_long>
 801d3bc:	4603      	mov	r3, r0
 801d3be:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d3c0:	89b8      	ldrh	r0, [r7, #12]
 801d3c2:	693b      	ldr	r3, [r7, #16]
 801d3c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d3c8:	2303      	movs	r3, #3
 801d3ca:	2237      	movs	r2, #55	; 0x37
 801d3cc:	f000 f91a 	bl	801d604 <dhcp_option>
 801d3d0:	4603      	mov	r3, r0
 801d3d2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d3d4:	2300      	movs	r3, #0
 801d3d6:	77bb      	strb	r3, [r7, #30]
 801d3d8:	e00e      	b.n	801d3f8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d3da:	89b8      	ldrh	r0, [r7, #12]
 801d3dc:	693b      	ldr	r3, [r7, #16]
 801d3de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d3e2:	7fbb      	ldrb	r3, [r7, #30]
 801d3e4:	4a29      	ldr	r2, [pc, #164]	; (801d48c <dhcp_reboot+0x15c>)
 801d3e6:	5cd3      	ldrb	r3, [r2, r3]
 801d3e8:	461a      	mov	r2, r3
 801d3ea:	f000 f93f 	bl	801d66c <dhcp_option_byte>
 801d3ee:	4603      	mov	r3, r0
 801d3f0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d3f2:	7fbb      	ldrb	r3, [r7, #30]
 801d3f4:	3301      	adds	r3, #1
 801d3f6:	77bb      	strb	r3, [r7, #30]
 801d3f8:	7fbb      	ldrb	r3, [r7, #30]
 801d3fa:	2b02      	cmp	r3, #2
 801d3fc:	d9ed      	bls.n	801d3da <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d3fe:	89b8      	ldrh	r0, [r7, #12]
 801d400:	693b      	ldr	r3, [r7, #16]
 801d402:	33f0      	adds	r3, #240	; 0xf0
 801d404:	697a      	ldr	r2, [r7, #20]
 801d406:	4619      	mov	r1, r3
 801d408:	f000 fe42 	bl	801e090 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d40c:	4b20      	ldr	r3, [pc, #128]	; (801d490 <dhcp_reboot+0x160>)
 801d40e:	6818      	ldr	r0, [r3, #0]
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	9300      	str	r3, [sp, #0]
 801d414:	2343      	movs	r3, #67	; 0x43
 801d416:	4a1f      	ldr	r2, [pc, #124]	; (801d494 <dhcp_reboot+0x164>)
 801d418:	6979      	ldr	r1, [r7, #20]
 801d41a:	f7fe fcef 	bl	801bdfc <udp_sendto_if>
 801d41e:	4603      	mov	r3, r0
 801d420:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d422:	6978      	ldr	r0, [r7, #20]
 801d424:	f7f8 fdaa 	bl	8015f7c <pbuf_free>
 801d428:	e001      	b.n	801d42e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d42a:	23ff      	movs	r3, #255	; 0xff
 801d42c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d42e:	69bb      	ldr	r3, [r7, #24]
 801d430:	799b      	ldrb	r3, [r3, #6]
 801d432:	2bff      	cmp	r3, #255	; 0xff
 801d434:	d005      	beq.n	801d442 <dhcp_reboot+0x112>
    dhcp->tries++;
 801d436:	69bb      	ldr	r3, [r7, #24]
 801d438:	799b      	ldrb	r3, [r3, #6]
 801d43a:	3301      	adds	r3, #1
 801d43c:	b2da      	uxtb	r2, r3
 801d43e:	69bb      	ldr	r3, [r7, #24]
 801d440:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801d442:	69bb      	ldr	r3, [r7, #24]
 801d444:	799b      	ldrb	r3, [r3, #6]
 801d446:	2b09      	cmp	r3, #9
 801d448:	d80a      	bhi.n	801d460 <dhcp_reboot+0x130>
 801d44a:	69bb      	ldr	r3, [r7, #24]
 801d44c:	799b      	ldrb	r3, [r3, #6]
 801d44e:	b29b      	uxth	r3, r3
 801d450:	461a      	mov	r2, r3
 801d452:	0152      	lsls	r2, r2, #5
 801d454:	1ad2      	subs	r2, r2, r3
 801d456:	0092      	lsls	r2, r2, #2
 801d458:	4413      	add	r3, r2
 801d45a:	00db      	lsls	r3, r3, #3
 801d45c:	b29b      	uxth	r3, r3
 801d45e:	e001      	b.n	801d464 <dhcp_reboot+0x134>
 801d460:	f242 7310 	movw	r3, #10000	; 0x2710
 801d464:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d466:	89fb      	ldrh	r3, [r7, #14]
 801d468:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d46c:	4a0a      	ldr	r2, [pc, #40]	; (801d498 <dhcp_reboot+0x168>)
 801d46e:	fb82 1203 	smull	r1, r2, r2, r3
 801d472:	1152      	asrs	r2, r2, #5
 801d474:	17db      	asrs	r3, r3, #31
 801d476:	1ad3      	subs	r3, r2, r3
 801d478:	b29a      	uxth	r2, r3
 801d47a:	69bb      	ldr	r3, [r7, #24]
 801d47c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d47e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d482:	4618      	mov	r0, r3
 801d484:	3720      	adds	r7, #32
 801d486:	46bd      	mov	sp, r7
 801d488:	bdb0      	pop	{r4, r5, r7, pc}
 801d48a:	bf00      	nop
 801d48c:	20000040 	.word	0x20000040
 801d490:	20009000 	.word	0x20009000
 801d494:	0802539c 	.word	0x0802539c
 801d498:	10624dd3 	.word	0x10624dd3

0801d49c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801d49c:	b5b0      	push	{r4, r5, r7, lr}
 801d49e:	b08a      	sub	sp, #40	; 0x28
 801d4a0:	af02      	add	r7, sp, #8
 801d4a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d4a8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801d4aa:	69fb      	ldr	r3, [r7, #28]
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	f000 8084 	beq.w	801d5ba <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801d4b2:	69fb      	ldr	r3, [r7, #28]
 801d4b4:	795b      	ldrb	r3, [r3, #5]
 801d4b6:	2b00      	cmp	r3, #0
 801d4b8:	f000 8081 	beq.w	801d5be <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801d4bc:	69fb      	ldr	r3, [r7, #28]
 801d4be:	699b      	ldr	r3, [r3, #24]
 801d4c0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801d4c2:	69fb      	ldr	r3, [r7, #28]
 801d4c4:	2200      	movs	r2, #0
 801d4c6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801d4c8:	69fb      	ldr	r3, [r7, #28]
 801d4ca:	2200      	movs	r2, #0
 801d4cc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801d4ce:	69fb      	ldr	r3, [r7, #28]
 801d4d0:	2200      	movs	r2, #0
 801d4d2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801d4d4:	69fb      	ldr	r3, [r7, #28]
 801d4d6:	2200      	movs	r2, #0
 801d4d8:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801d4da:	69fb      	ldr	r3, [r7, #28]
 801d4dc:	2200      	movs	r2, #0
 801d4de:	631a      	str	r2, [r3, #48]	; 0x30
 801d4e0:	69fb      	ldr	r3, [r7, #28]
 801d4e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d4e4:	69fb      	ldr	r3, [r7, #28]
 801d4e6:	62da      	str	r2, [r3, #44]	; 0x2c
 801d4e8:	69fb      	ldr	r3, [r7, #28]
 801d4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d4ec:	69fb      	ldr	r3, [r7, #28]
 801d4ee:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801d4f0:	69fb      	ldr	r3, [r7, #28]
 801d4f2:	2200      	movs	r2, #0
 801d4f4:	829a      	strh	r2, [r3, #20]
 801d4f6:	69fb      	ldr	r3, [r7, #28]
 801d4f8:	8a9a      	ldrh	r2, [r3, #20]
 801d4fa:	69fb      	ldr	r3, [r7, #28]
 801d4fc:	825a      	strh	r2, [r3, #18]
 801d4fe:	69fb      	ldr	r3, [r7, #28]
 801d500:	8a5a      	ldrh	r2, [r3, #18]
 801d502:	69fb      	ldr	r3, [r7, #28]
 801d504:	821a      	strh	r2, [r3, #16]
 801d506:	69fb      	ldr	r3, [r7, #28]
 801d508:	8a1a      	ldrh	r2, [r3, #16]
 801d50a:	69fb      	ldr	r3, [r7, #28]
 801d50c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801d50e:	6878      	ldr	r0, [r7, #4]
 801d510:	f000 fdec 	bl	801e0ec <dhcp_supplied_address>
 801d514:	4603      	mov	r3, r0
 801d516:	2b00      	cmp	r3, #0
 801d518:	d03b      	beq.n	801d592 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801d51a:	f107 030e 	add.w	r3, r7, #14
 801d51e:	2207      	movs	r2, #7
 801d520:	69f9      	ldr	r1, [r7, #28]
 801d522:	6878      	ldr	r0, [r7, #4]
 801d524:	f000 fcde 	bl	801dee4 <dhcp_create_msg>
 801d528:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801d52a:	69bb      	ldr	r3, [r7, #24]
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d030      	beq.n	801d592 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d530:	69bb      	ldr	r3, [r7, #24]
 801d532:	685b      	ldr	r3, [r3, #4]
 801d534:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801d536:	89f8      	ldrh	r0, [r7, #14]
 801d538:	697b      	ldr	r3, [r7, #20]
 801d53a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d53e:	2304      	movs	r3, #4
 801d540:	2236      	movs	r2, #54	; 0x36
 801d542:	f000 f85f 	bl	801d604 <dhcp_option>
 801d546:	4603      	mov	r3, r0
 801d548:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801d54a:	89fc      	ldrh	r4, [r7, #14]
 801d54c:	697b      	ldr	r3, [r7, #20]
 801d54e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801d552:	693b      	ldr	r3, [r7, #16]
 801d554:	4618      	mov	r0, r3
 801d556:	f7f7 f958 	bl	801480a <lwip_htonl>
 801d55a:	4603      	mov	r3, r0
 801d55c:	461a      	mov	r2, r3
 801d55e:	4629      	mov	r1, r5
 801d560:	4620      	mov	r0, r4
 801d562:	f000 f8db 	bl	801d71c <dhcp_option_long>
 801d566:	4603      	mov	r3, r0
 801d568:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d56a:	89f8      	ldrh	r0, [r7, #14]
 801d56c:	697b      	ldr	r3, [r7, #20]
 801d56e:	33f0      	adds	r3, #240	; 0xf0
 801d570:	69ba      	ldr	r2, [r7, #24]
 801d572:	4619      	mov	r1, r3
 801d574:	f000 fd8c 	bl	801e090 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d578:	4b13      	ldr	r3, [pc, #76]	; (801d5c8 <dhcp_release_and_stop+0x12c>)
 801d57a:	6818      	ldr	r0, [r3, #0]
 801d57c:	f107 0210 	add.w	r2, r7, #16
 801d580:	687b      	ldr	r3, [r7, #4]
 801d582:	9300      	str	r3, [sp, #0]
 801d584:	2343      	movs	r3, #67	; 0x43
 801d586:	69b9      	ldr	r1, [r7, #24]
 801d588:	f7fe fc38 	bl	801bdfc <udp_sendto_if>
      pbuf_free(p_out);
 801d58c:	69b8      	ldr	r0, [r7, #24]
 801d58e:	f7f8 fcf5 	bl	8015f7c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801d592:	4b0e      	ldr	r3, [pc, #56]	; (801d5cc <dhcp_release_and_stop+0x130>)
 801d594:	4a0d      	ldr	r2, [pc, #52]	; (801d5cc <dhcp_release_and_stop+0x130>)
 801d596:	490d      	ldr	r1, [pc, #52]	; (801d5cc <dhcp_release_and_stop+0x130>)
 801d598:	6878      	ldr	r0, [r7, #4]
 801d59a:	f7f7 ffd5 	bl	8015548 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801d59e:	2100      	movs	r1, #0
 801d5a0:	69f8      	ldr	r0, [r7, #28]
 801d5a2:	f000 f815 	bl	801d5d0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801d5a6:	69fb      	ldr	r3, [r7, #28]
 801d5a8:	791b      	ldrb	r3, [r3, #4]
 801d5aa:	2b00      	cmp	r3, #0
 801d5ac:	d008      	beq.n	801d5c0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801d5ae:	f7fe ff71 	bl	801c494 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801d5b2:	69fb      	ldr	r3, [r7, #28]
 801d5b4:	2200      	movs	r2, #0
 801d5b6:	711a      	strb	r2, [r3, #4]
 801d5b8:	e002      	b.n	801d5c0 <dhcp_release_and_stop+0x124>
    return;
 801d5ba:	bf00      	nop
 801d5bc:	e000      	b.n	801d5c0 <dhcp_release_and_stop+0x124>
    return;
 801d5be:	bf00      	nop
  }
}
 801d5c0:	3720      	adds	r7, #32
 801d5c2:	46bd      	mov	sp, r7
 801d5c4:	bdb0      	pop	{r4, r5, r7, pc}
 801d5c6:	bf00      	nop
 801d5c8:	20009000 	.word	0x20009000
 801d5cc:	08025398 	.word	0x08025398

0801d5d0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801d5d0:	b480      	push	{r7}
 801d5d2:	b083      	sub	sp, #12
 801d5d4:	af00      	add	r7, sp, #0
 801d5d6:	6078      	str	r0, [r7, #4]
 801d5d8:	460b      	mov	r3, r1
 801d5da:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	795b      	ldrb	r3, [r3, #5]
 801d5e0:	78fa      	ldrb	r2, [r7, #3]
 801d5e2:	429a      	cmp	r2, r3
 801d5e4:	d008      	beq.n	801d5f8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	78fa      	ldrb	r2, [r7, #3]
 801d5ea:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	2200      	movs	r2, #0
 801d5f0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801d5f2:	687b      	ldr	r3, [r7, #4]
 801d5f4:	2200      	movs	r2, #0
 801d5f6:	811a      	strh	r2, [r3, #8]
  }
}
 801d5f8:	bf00      	nop
 801d5fa:	370c      	adds	r7, #12
 801d5fc:	46bd      	mov	sp, r7
 801d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d602:	4770      	bx	lr

0801d604 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801d604:	b580      	push	{r7, lr}
 801d606:	b082      	sub	sp, #8
 801d608:	af00      	add	r7, sp, #0
 801d60a:	6039      	str	r1, [r7, #0]
 801d60c:	4611      	mov	r1, r2
 801d60e:	461a      	mov	r2, r3
 801d610:	4603      	mov	r3, r0
 801d612:	80fb      	strh	r3, [r7, #6]
 801d614:	460b      	mov	r3, r1
 801d616:	717b      	strb	r3, [r7, #5]
 801d618:	4613      	mov	r3, r2
 801d61a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801d61c:	88fa      	ldrh	r2, [r7, #6]
 801d61e:	793b      	ldrb	r3, [r7, #4]
 801d620:	4413      	add	r3, r2
 801d622:	3302      	adds	r3, #2
 801d624:	2b44      	cmp	r3, #68	; 0x44
 801d626:	d906      	bls.n	801d636 <dhcp_option+0x32>
 801d628:	4b0d      	ldr	r3, [pc, #52]	; (801d660 <dhcp_option+0x5c>)
 801d62a:	f240 529a 	movw	r2, #1434	; 0x59a
 801d62e:	490d      	ldr	r1, [pc, #52]	; (801d664 <dhcp_option+0x60>)
 801d630:	480d      	ldr	r0, [pc, #52]	; (801d668 <dhcp_option+0x64>)
 801d632:	f003 ff75 	bl	8021520 <iprintf>
  options[options_out_len++] = option_type;
 801d636:	88fb      	ldrh	r3, [r7, #6]
 801d638:	1c5a      	adds	r2, r3, #1
 801d63a:	80fa      	strh	r2, [r7, #6]
 801d63c:	461a      	mov	r2, r3
 801d63e:	683b      	ldr	r3, [r7, #0]
 801d640:	4413      	add	r3, r2
 801d642:	797a      	ldrb	r2, [r7, #5]
 801d644:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801d646:	88fb      	ldrh	r3, [r7, #6]
 801d648:	1c5a      	adds	r2, r3, #1
 801d64a:	80fa      	strh	r2, [r7, #6]
 801d64c:	461a      	mov	r2, r3
 801d64e:	683b      	ldr	r3, [r7, #0]
 801d650:	4413      	add	r3, r2
 801d652:	793a      	ldrb	r2, [r7, #4]
 801d654:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d656:	88fb      	ldrh	r3, [r7, #6]
}
 801d658:	4618      	mov	r0, r3
 801d65a:	3708      	adds	r7, #8
 801d65c:	46bd      	mov	sp, r7
 801d65e:	bd80      	pop	{r7, pc}
 801d660:	080247ac 	.word	0x080247ac
 801d664:	08024940 	.word	0x08024940
 801d668:	0802480c 	.word	0x0802480c

0801d66c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801d66c:	b580      	push	{r7, lr}
 801d66e:	b082      	sub	sp, #8
 801d670:	af00      	add	r7, sp, #0
 801d672:	4603      	mov	r3, r0
 801d674:	6039      	str	r1, [r7, #0]
 801d676:	80fb      	strh	r3, [r7, #6]
 801d678:	4613      	mov	r3, r2
 801d67a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801d67c:	88fb      	ldrh	r3, [r7, #6]
 801d67e:	2b43      	cmp	r3, #67	; 0x43
 801d680:	d906      	bls.n	801d690 <dhcp_option_byte+0x24>
 801d682:	4b0a      	ldr	r3, [pc, #40]	; (801d6ac <dhcp_option_byte+0x40>)
 801d684:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801d688:	4909      	ldr	r1, [pc, #36]	; (801d6b0 <dhcp_option_byte+0x44>)
 801d68a:	480a      	ldr	r0, [pc, #40]	; (801d6b4 <dhcp_option_byte+0x48>)
 801d68c:	f003 ff48 	bl	8021520 <iprintf>
  options[options_out_len++] = value;
 801d690:	88fb      	ldrh	r3, [r7, #6]
 801d692:	1c5a      	adds	r2, r3, #1
 801d694:	80fa      	strh	r2, [r7, #6]
 801d696:	461a      	mov	r2, r3
 801d698:	683b      	ldr	r3, [r7, #0]
 801d69a:	4413      	add	r3, r2
 801d69c:	797a      	ldrb	r2, [r7, #5]
 801d69e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d6a0:	88fb      	ldrh	r3, [r7, #6]
}
 801d6a2:	4618      	mov	r0, r3
 801d6a4:	3708      	adds	r7, #8
 801d6a6:	46bd      	mov	sp, r7
 801d6a8:	bd80      	pop	{r7, pc}
 801d6aa:	bf00      	nop
 801d6ac:	080247ac 	.word	0x080247ac
 801d6b0:	08024984 	.word	0x08024984
 801d6b4:	0802480c 	.word	0x0802480c

0801d6b8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801d6b8:	b580      	push	{r7, lr}
 801d6ba:	b082      	sub	sp, #8
 801d6bc:	af00      	add	r7, sp, #0
 801d6be:	4603      	mov	r3, r0
 801d6c0:	6039      	str	r1, [r7, #0]
 801d6c2:	80fb      	strh	r3, [r7, #6]
 801d6c4:	4613      	mov	r3, r2
 801d6c6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801d6c8:	88fb      	ldrh	r3, [r7, #6]
 801d6ca:	3302      	adds	r3, #2
 801d6cc:	2b44      	cmp	r3, #68	; 0x44
 801d6ce:	d906      	bls.n	801d6de <dhcp_option_short+0x26>
 801d6d0:	4b0f      	ldr	r3, [pc, #60]	; (801d710 <dhcp_option_short+0x58>)
 801d6d2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801d6d6:	490f      	ldr	r1, [pc, #60]	; (801d714 <dhcp_option_short+0x5c>)
 801d6d8:	480f      	ldr	r0, [pc, #60]	; (801d718 <dhcp_option_short+0x60>)
 801d6da:	f003 ff21 	bl	8021520 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801d6de:	88bb      	ldrh	r3, [r7, #4]
 801d6e0:	0a1b      	lsrs	r3, r3, #8
 801d6e2:	b29a      	uxth	r2, r3
 801d6e4:	88fb      	ldrh	r3, [r7, #6]
 801d6e6:	1c59      	adds	r1, r3, #1
 801d6e8:	80f9      	strh	r1, [r7, #6]
 801d6ea:	4619      	mov	r1, r3
 801d6ec:	683b      	ldr	r3, [r7, #0]
 801d6ee:	440b      	add	r3, r1
 801d6f0:	b2d2      	uxtb	r2, r2
 801d6f2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801d6f4:	88fb      	ldrh	r3, [r7, #6]
 801d6f6:	1c5a      	adds	r2, r3, #1
 801d6f8:	80fa      	strh	r2, [r7, #6]
 801d6fa:	461a      	mov	r2, r3
 801d6fc:	683b      	ldr	r3, [r7, #0]
 801d6fe:	4413      	add	r3, r2
 801d700:	88ba      	ldrh	r2, [r7, #4]
 801d702:	b2d2      	uxtb	r2, r2
 801d704:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d706:	88fb      	ldrh	r3, [r7, #6]
}
 801d708:	4618      	mov	r0, r3
 801d70a:	3708      	adds	r7, #8
 801d70c:	46bd      	mov	sp, r7
 801d70e:	bd80      	pop	{r7, pc}
 801d710:	080247ac 	.word	0x080247ac
 801d714:	080249bc 	.word	0x080249bc
 801d718:	0802480c 	.word	0x0802480c

0801d71c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801d71c:	b580      	push	{r7, lr}
 801d71e:	b084      	sub	sp, #16
 801d720:	af00      	add	r7, sp, #0
 801d722:	4603      	mov	r3, r0
 801d724:	60b9      	str	r1, [r7, #8]
 801d726:	607a      	str	r2, [r7, #4]
 801d728:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801d72a:	89fb      	ldrh	r3, [r7, #14]
 801d72c:	3304      	adds	r3, #4
 801d72e:	2b44      	cmp	r3, #68	; 0x44
 801d730:	d906      	bls.n	801d740 <dhcp_option_long+0x24>
 801d732:	4b19      	ldr	r3, [pc, #100]	; (801d798 <dhcp_option_long+0x7c>)
 801d734:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801d738:	4918      	ldr	r1, [pc, #96]	; (801d79c <dhcp_option_long+0x80>)
 801d73a:	4819      	ldr	r0, [pc, #100]	; (801d7a0 <dhcp_option_long+0x84>)
 801d73c:	f003 fef0 	bl	8021520 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	0e1a      	lsrs	r2, r3, #24
 801d744:	89fb      	ldrh	r3, [r7, #14]
 801d746:	1c59      	adds	r1, r3, #1
 801d748:	81f9      	strh	r1, [r7, #14]
 801d74a:	4619      	mov	r1, r3
 801d74c:	68bb      	ldr	r3, [r7, #8]
 801d74e:	440b      	add	r3, r1
 801d750:	b2d2      	uxtb	r2, r2
 801d752:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801d754:	687b      	ldr	r3, [r7, #4]
 801d756:	0c1a      	lsrs	r2, r3, #16
 801d758:	89fb      	ldrh	r3, [r7, #14]
 801d75a:	1c59      	adds	r1, r3, #1
 801d75c:	81f9      	strh	r1, [r7, #14]
 801d75e:	4619      	mov	r1, r3
 801d760:	68bb      	ldr	r3, [r7, #8]
 801d762:	440b      	add	r3, r1
 801d764:	b2d2      	uxtb	r2, r2
 801d766:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	0a1a      	lsrs	r2, r3, #8
 801d76c:	89fb      	ldrh	r3, [r7, #14]
 801d76e:	1c59      	adds	r1, r3, #1
 801d770:	81f9      	strh	r1, [r7, #14]
 801d772:	4619      	mov	r1, r3
 801d774:	68bb      	ldr	r3, [r7, #8]
 801d776:	440b      	add	r3, r1
 801d778:	b2d2      	uxtb	r2, r2
 801d77a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801d77c:	89fb      	ldrh	r3, [r7, #14]
 801d77e:	1c5a      	adds	r2, r3, #1
 801d780:	81fa      	strh	r2, [r7, #14]
 801d782:	461a      	mov	r2, r3
 801d784:	68bb      	ldr	r3, [r7, #8]
 801d786:	4413      	add	r3, r2
 801d788:	687a      	ldr	r2, [r7, #4]
 801d78a:	b2d2      	uxtb	r2, r2
 801d78c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d78e:	89fb      	ldrh	r3, [r7, #14]
}
 801d790:	4618      	mov	r0, r3
 801d792:	3710      	adds	r7, #16
 801d794:	46bd      	mov	sp, r7
 801d796:	bd80      	pop	{r7, pc}
 801d798:	080247ac 	.word	0x080247ac
 801d79c:	080249f8 	.word	0x080249f8
 801d7a0:	0802480c 	.word	0x0802480c

0801d7a4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801d7a4:	b580      	push	{r7, lr}
 801d7a6:	b090      	sub	sp, #64	; 0x40
 801d7a8:	af00      	add	r7, sp, #0
 801d7aa:	6078      	str	r0, [r7, #4]
 801d7ac:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801d7ae:	2300      	movs	r3, #0
 801d7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801d7b2:	2300      	movs	r3, #0
 801d7b4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801d7b6:	2208      	movs	r2, #8
 801d7b8:	2100      	movs	r1, #0
 801d7ba:	48be      	ldr	r0, [pc, #760]	; (801dab4 <dhcp_parse_reply+0x310>)
 801d7bc:	f003 fe00 	bl	80213c0 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801d7c0:	687b      	ldr	r3, [r7, #4]
 801d7c2:	895b      	ldrh	r3, [r3, #10]
 801d7c4:	2b2b      	cmp	r3, #43	; 0x2b
 801d7c6:	d802      	bhi.n	801d7ce <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801d7c8:	f06f 0301 	mvn.w	r3, #1
 801d7cc:	e2a8      	b.n	801dd20 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	685b      	ldr	r3, [r3, #4]
 801d7d2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801d7d4:	23f0      	movs	r3, #240	; 0xf0
 801d7d6:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801d7d8:	687b      	ldr	r3, [r7, #4]
 801d7da:	891b      	ldrh	r3, [r3, #8]
 801d7dc:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801d7e2:	e00c      	b.n	801d7fe <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801d7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7e6:	895b      	ldrh	r3, [r3, #10]
 801d7e8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d7ea:	1ad3      	subs	r3, r2, r3
 801d7ec:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801d7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7f0:	895b      	ldrh	r3, [r3, #10]
 801d7f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801d7f4:	1ad3      	subs	r3, r2, r3
 801d7f6:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801d7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7fa:	681b      	ldr	r3, [r3, #0]
 801d7fc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801d7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d800:	2b00      	cmp	r3, #0
 801d802:	d004      	beq.n	801d80e <dhcp_parse_reply+0x6a>
 801d804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d806:	895b      	ldrh	r3, [r3, #10]
 801d808:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d80a:	429a      	cmp	r2, r3
 801d80c:	d2ea      	bcs.n	801d7e4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801d80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d810:	2b00      	cmp	r3, #0
 801d812:	d102      	bne.n	801d81a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801d814:	f06f 0301 	mvn.w	r3, #1
 801d818:	e282      	b.n	801dd20 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 801d81a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801d81c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801d81e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801d820:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d824:	685b      	ldr	r3, [r3, #4]
 801d826:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801d828:	e23a      	b.n	801dca0 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 801d82a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d82c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d82e:	4413      	add	r3, r2
 801d830:	781b      	ldrb	r3, [r3, #0]
 801d832:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801d834:	2300      	movs	r3, #0
 801d836:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801d83a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d83e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801d840:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d842:	3302      	adds	r3, #2
 801d844:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801d846:	8bfa      	ldrh	r2, [r7, #30]
 801d848:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d84a:	429a      	cmp	r2, r3
 801d84c:	d202      	bcs.n	801d854 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801d84e:	f06f 0301 	mvn.w	r3, #1
 801d852:	e265      	b.n	801dd20 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801d854:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d856:	3301      	adds	r3, #1
 801d858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d85a:	8952      	ldrh	r2, [r2, #10]
 801d85c:	4293      	cmp	r3, r2
 801d85e:	da07      	bge.n	801d870 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801d860:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d862:	3301      	adds	r3, #1
 801d864:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d866:	4413      	add	r3, r2
 801d868:	781b      	ldrb	r3, [r3, #0]
 801d86a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d86e:	e00b      	b.n	801d888 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801d870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d872:	681b      	ldr	r3, [r3, #0]
 801d874:	2b00      	cmp	r3, #0
 801d876:	d004      	beq.n	801d882 <dhcp_parse_reply+0xde>
 801d878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d87a:	681b      	ldr	r3, [r3, #0]
 801d87c:	685b      	ldr	r3, [r3, #4]
 801d87e:	781b      	ldrb	r3, [r3, #0]
 801d880:	e000      	b.n	801d884 <dhcp_parse_reply+0xe0>
 801d882:	2300      	movs	r3, #0
 801d884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801d888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d88c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801d890:	7dfb      	ldrb	r3, [r7, #23]
 801d892:	2b3b      	cmp	r3, #59	; 0x3b
 801d894:	f200 812d 	bhi.w	801daf2 <dhcp_parse_reply+0x34e>
 801d898:	a201      	add	r2, pc, #4	; (adr r2, 801d8a0 <dhcp_parse_reply+0xfc>)
 801d89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d89e:	bf00      	nop
 801d8a0:	0801d991 	.word	0x0801d991
 801d8a4:	0801d9a1 	.word	0x0801d9a1
 801d8a8:	0801daf3 	.word	0x0801daf3
 801d8ac:	0801d9c3 	.word	0x0801d9c3
 801d8b0:	0801daf3 	.word	0x0801daf3
 801d8b4:	0801daf3 	.word	0x0801daf3
 801d8b8:	0801daf3 	.word	0x0801daf3
 801d8bc:	0801daf3 	.word	0x0801daf3
 801d8c0:	0801daf3 	.word	0x0801daf3
 801d8c4:	0801daf3 	.word	0x0801daf3
 801d8c8:	0801daf3 	.word	0x0801daf3
 801d8cc:	0801daf3 	.word	0x0801daf3
 801d8d0:	0801daf3 	.word	0x0801daf3
 801d8d4:	0801daf3 	.word	0x0801daf3
 801d8d8:	0801daf3 	.word	0x0801daf3
 801d8dc:	0801daf3 	.word	0x0801daf3
 801d8e0:	0801daf3 	.word	0x0801daf3
 801d8e4:	0801daf3 	.word	0x0801daf3
 801d8e8:	0801daf3 	.word	0x0801daf3
 801d8ec:	0801daf3 	.word	0x0801daf3
 801d8f0:	0801daf3 	.word	0x0801daf3
 801d8f4:	0801daf3 	.word	0x0801daf3
 801d8f8:	0801daf3 	.word	0x0801daf3
 801d8fc:	0801daf3 	.word	0x0801daf3
 801d900:	0801daf3 	.word	0x0801daf3
 801d904:	0801daf3 	.word	0x0801daf3
 801d908:	0801daf3 	.word	0x0801daf3
 801d90c:	0801daf3 	.word	0x0801daf3
 801d910:	0801daf3 	.word	0x0801daf3
 801d914:	0801daf3 	.word	0x0801daf3
 801d918:	0801daf3 	.word	0x0801daf3
 801d91c:	0801daf3 	.word	0x0801daf3
 801d920:	0801daf3 	.word	0x0801daf3
 801d924:	0801daf3 	.word	0x0801daf3
 801d928:	0801daf3 	.word	0x0801daf3
 801d92c:	0801daf3 	.word	0x0801daf3
 801d930:	0801daf3 	.word	0x0801daf3
 801d934:	0801daf3 	.word	0x0801daf3
 801d938:	0801daf3 	.word	0x0801daf3
 801d93c:	0801daf3 	.word	0x0801daf3
 801d940:	0801daf3 	.word	0x0801daf3
 801d944:	0801daf3 	.word	0x0801daf3
 801d948:	0801daf3 	.word	0x0801daf3
 801d94c:	0801daf3 	.word	0x0801daf3
 801d950:	0801daf3 	.word	0x0801daf3
 801d954:	0801daf3 	.word	0x0801daf3
 801d958:	0801daf3 	.word	0x0801daf3
 801d95c:	0801daf3 	.word	0x0801daf3
 801d960:	0801daf3 	.word	0x0801daf3
 801d964:	0801daf3 	.word	0x0801daf3
 801d968:	0801daf3 	.word	0x0801daf3
 801d96c:	0801d9ef 	.word	0x0801d9ef
 801d970:	0801da11 	.word	0x0801da11
 801d974:	0801da4d 	.word	0x0801da4d
 801d978:	0801da6f 	.word	0x0801da6f
 801d97c:	0801daf3 	.word	0x0801daf3
 801d980:	0801daf3 	.word	0x0801daf3
 801d984:	0801daf3 	.word	0x0801daf3
 801d988:	0801da91 	.word	0x0801da91
 801d98c:	0801dad1 	.word	0x0801dad1
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801d990:	2300      	movs	r3, #0
 801d992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d99a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801d99e:	e0ac      	b.n	801dafa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d9a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d9a4:	2b04      	cmp	r3, #4
 801d9a6:	d009      	beq.n	801d9bc <dhcp_parse_reply+0x218>
 801d9a8:	4b43      	ldr	r3, [pc, #268]	; (801dab8 <dhcp_parse_reply+0x314>)
 801d9aa:	f240 622e 	movw	r2, #1582	; 0x62e
 801d9ae:	4943      	ldr	r1, [pc, #268]	; (801dabc <dhcp_parse_reply+0x318>)
 801d9b0:	4843      	ldr	r0, [pc, #268]	; (801dac0 <dhcp_parse_reply+0x31c>)
 801d9b2:	f003 fdb5 	bl	8021520 <iprintf>
 801d9b6:	f06f 0305 	mvn.w	r3, #5
 801d9ba:	e1b1      	b.n	801dd20 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801d9bc:	2306      	movs	r3, #6
 801d9be:	623b      	str	r3, [r7, #32]
        break;
 801d9c0:	e09b      	b.n	801dafa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801d9c2:	2304      	movs	r3, #4
 801d9c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801d9c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801d9cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801d9d0:	429a      	cmp	r2, r3
 801d9d2:	d209      	bcs.n	801d9e8 <dhcp_parse_reply+0x244>
 801d9d4:	4b38      	ldr	r3, [pc, #224]	; (801dab8 <dhcp_parse_reply+0x314>)
 801d9d6:	f240 6233 	movw	r2, #1587	; 0x633
 801d9da:	493a      	ldr	r1, [pc, #232]	; (801dac4 <dhcp_parse_reply+0x320>)
 801d9dc:	4838      	ldr	r0, [pc, #224]	; (801dac0 <dhcp_parse_reply+0x31c>)
 801d9de:	f003 fd9f 	bl	8021520 <iprintf>
 801d9e2:	f06f 0305 	mvn.w	r3, #5
 801d9e6:	e19b      	b.n	801dd20 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801d9e8:	2307      	movs	r3, #7
 801d9ea:	623b      	str	r3, [r7, #32]
        break;
 801d9ec:	e085      	b.n	801dafa <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d9ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d9f2:	2b04      	cmp	r3, #4
 801d9f4:	d009      	beq.n	801da0a <dhcp_parse_reply+0x266>
 801d9f6:	4b30      	ldr	r3, [pc, #192]	; (801dab8 <dhcp_parse_reply+0x314>)
 801d9f8:	f240 6241 	movw	r2, #1601	; 0x641
 801d9fc:	492f      	ldr	r1, [pc, #188]	; (801dabc <dhcp_parse_reply+0x318>)
 801d9fe:	4830      	ldr	r0, [pc, #192]	; (801dac0 <dhcp_parse_reply+0x31c>)
 801da00:	f003 fd8e 	bl	8021520 <iprintf>
 801da04:	f06f 0305 	mvn.w	r3, #5
 801da08:	e18a      	b.n	801dd20 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801da0a:	2303      	movs	r3, #3
 801da0c:	623b      	str	r3, [r7, #32]
        break;
 801da0e:	e074      	b.n	801dafa <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801da10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801da14:	2b01      	cmp	r3, #1
 801da16:	d009      	beq.n	801da2c <dhcp_parse_reply+0x288>
 801da18:	4b27      	ldr	r3, [pc, #156]	; (801dab8 <dhcp_parse_reply+0x314>)
 801da1a:	f240 624f 	movw	r2, #1615	; 0x64f
 801da1e:	492a      	ldr	r1, [pc, #168]	; (801dac8 <dhcp_parse_reply+0x324>)
 801da20:	4827      	ldr	r0, [pc, #156]	; (801dac0 <dhcp_parse_reply+0x31c>)
 801da22:	f003 fd7d 	bl	8021520 <iprintf>
 801da26:	f06f 0305 	mvn.w	r3, #5
 801da2a:	e179      	b.n	801dd20 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801da2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801da2e:	2bf0      	cmp	r3, #240	; 0xf0
 801da30:	d009      	beq.n	801da46 <dhcp_parse_reply+0x2a2>
 801da32:	4b21      	ldr	r3, [pc, #132]	; (801dab8 <dhcp_parse_reply+0x314>)
 801da34:	f240 6251 	movw	r2, #1617	; 0x651
 801da38:	4924      	ldr	r1, [pc, #144]	; (801dacc <dhcp_parse_reply+0x328>)
 801da3a:	4821      	ldr	r0, [pc, #132]	; (801dac0 <dhcp_parse_reply+0x31c>)
 801da3c:	f003 fd70 	bl	8021520 <iprintf>
 801da40:	f06f 0305 	mvn.w	r3, #5
 801da44:	e16c      	b.n	801dd20 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801da46:	2300      	movs	r3, #0
 801da48:	623b      	str	r3, [r7, #32]
        break;
 801da4a:	e056      	b.n	801dafa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801da4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801da50:	2b01      	cmp	r3, #1
 801da52:	d009      	beq.n	801da68 <dhcp_parse_reply+0x2c4>
 801da54:	4b18      	ldr	r3, [pc, #96]	; (801dab8 <dhcp_parse_reply+0x314>)
 801da56:	f240 6255 	movw	r2, #1621	; 0x655
 801da5a:	491b      	ldr	r1, [pc, #108]	; (801dac8 <dhcp_parse_reply+0x324>)
 801da5c:	4818      	ldr	r0, [pc, #96]	; (801dac0 <dhcp_parse_reply+0x31c>)
 801da5e:	f003 fd5f 	bl	8021520 <iprintf>
 801da62:	f06f 0305 	mvn.w	r3, #5
 801da66:	e15b      	b.n	801dd20 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801da68:	2301      	movs	r3, #1
 801da6a:	623b      	str	r3, [r7, #32]
        break;
 801da6c:	e045      	b.n	801dafa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801da6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801da72:	2b04      	cmp	r3, #4
 801da74:	d009      	beq.n	801da8a <dhcp_parse_reply+0x2e6>
 801da76:	4b10      	ldr	r3, [pc, #64]	; (801dab8 <dhcp_parse_reply+0x314>)
 801da78:	f240 6259 	movw	r2, #1625	; 0x659
 801da7c:	490f      	ldr	r1, [pc, #60]	; (801dabc <dhcp_parse_reply+0x318>)
 801da7e:	4810      	ldr	r0, [pc, #64]	; (801dac0 <dhcp_parse_reply+0x31c>)
 801da80:	f003 fd4e 	bl	8021520 <iprintf>
 801da84:	f06f 0305 	mvn.w	r3, #5
 801da88:	e14a      	b.n	801dd20 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801da8a:	2302      	movs	r3, #2
 801da8c:	623b      	str	r3, [r7, #32]
        break;
 801da8e:	e034      	b.n	801dafa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801da90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801da94:	2b04      	cmp	r3, #4
 801da96:	d009      	beq.n	801daac <dhcp_parse_reply+0x308>
 801da98:	4b07      	ldr	r3, [pc, #28]	; (801dab8 <dhcp_parse_reply+0x314>)
 801da9a:	f240 625d 	movw	r2, #1629	; 0x65d
 801da9e:	4907      	ldr	r1, [pc, #28]	; (801dabc <dhcp_parse_reply+0x318>)
 801daa0:	4807      	ldr	r0, [pc, #28]	; (801dac0 <dhcp_parse_reply+0x31c>)
 801daa2:	f003 fd3d 	bl	8021520 <iprintf>
 801daa6:	f06f 0305 	mvn.w	r3, #5
 801daaa:	e139      	b.n	801dd20 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 801daac:	2304      	movs	r3, #4
 801daae:	623b      	str	r3, [r7, #32]
        break;
 801dab0:	e023      	b.n	801dafa <dhcp_parse_reply+0x356>
 801dab2:	bf00      	nop
 801dab4:	20010350 	.word	0x20010350
 801dab8:	080247ac 	.word	0x080247ac
 801dabc:	08024a34 	.word	0x08024a34
 801dac0:	0802480c 	.word	0x0802480c
 801dac4:	08024a40 	.word	0x08024a40
 801dac8:	08024a54 	.word	0x08024a54
 801dacc:	08024a60 	.word	0x08024a60
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801dad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dad4:	2b04      	cmp	r3, #4
 801dad6:	d009      	beq.n	801daec <dhcp_parse_reply+0x348>
 801dad8:	4b93      	ldr	r3, [pc, #588]	; (801dd28 <dhcp_parse_reply+0x584>)
 801dada:	f240 6261 	movw	r2, #1633	; 0x661
 801dade:	4993      	ldr	r1, [pc, #588]	; (801dd2c <dhcp_parse_reply+0x588>)
 801dae0:	4893      	ldr	r0, [pc, #588]	; (801dd30 <dhcp_parse_reply+0x58c>)
 801dae2:	f003 fd1d 	bl	8021520 <iprintf>
 801dae6:	f06f 0305 	mvn.w	r3, #5
 801daea:	e119      	b.n	801dd20 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 801daec:	2305      	movs	r3, #5
 801daee:	623b      	str	r3, [r7, #32]
        break;
 801daf0:	e003      	b.n	801dafa <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 801daf2:	2300      	movs	r3, #0
 801daf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801daf8:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801dafa:	7dfb      	ldrb	r3, [r7, #23]
 801dafc:	2b00      	cmp	r3, #0
 801dafe:	d103      	bne.n	801db08 <dhcp_parse_reply+0x364>
      offset++;
 801db00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801db02:	3301      	adds	r3, #1
 801db04:	877b      	strh	r3, [r7, #58]	; 0x3a
 801db06:	e0a1      	b.n	801dc4c <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801db08:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801db0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801db0e:	4413      	add	r3, r2
 801db10:	3302      	adds	r3, #2
 801db12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801db16:	db02      	blt.n	801db1e <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 801db18:	f06f 0301 	mvn.w	r3, #1
 801db1c:	e100      	b.n	801dd20 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801db1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801db22:	b29a      	uxth	r2, r3
 801db24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801db26:	4413      	add	r3, r2
 801db28:	b29b      	uxth	r3, r3
 801db2a:	3302      	adds	r3, #2
 801db2c:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801db2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801db32:	2b00      	cmp	r3, #0
 801db34:	f000 808a 	beq.w	801dc4c <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 801db38:	2300      	movs	r3, #0
 801db3a:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801db3c:	6a3b      	ldr	r3, [r7, #32]
 801db3e:	2b00      	cmp	r3, #0
 801db40:	db02      	blt.n	801db48 <dhcp_parse_reply+0x3a4>
 801db42:	6a3b      	ldr	r3, [r7, #32]
 801db44:	2b07      	cmp	r3, #7
 801db46:	dd06      	ble.n	801db56 <dhcp_parse_reply+0x3b2>
 801db48:	4b77      	ldr	r3, [pc, #476]	; (801dd28 <dhcp_parse_reply+0x584>)
 801db4a:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801db4e:	4979      	ldr	r1, [pc, #484]	; (801dd34 <dhcp_parse_reply+0x590>)
 801db50:	4877      	ldr	r0, [pc, #476]	; (801dd30 <dhcp_parse_reply+0x58c>)
 801db52:	f003 fce5 	bl	8021520 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801db56:	4a78      	ldr	r2, [pc, #480]	; (801dd38 <dhcp_parse_reply+0x594>)
 801db58:	6a3b      	ldr	r3, [r7, #32]
 801db5a:	4413      	add	r3, r2
 801db5c:	781b      	ldrb	r3, [r3, #0]
 801db5e:	2b00      	cmp	r3, #0
 801db60:	d174      	bne.n	801dc4c <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801db62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801db66:	2b04      	cmp	r3, #4
 801db68:	bf28      	it	cs
 801db6a:	2304      	movcs	r3, #4
 801db6c:	b2db      	uxtb	r3, r3
 801db6e:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801db70:	8bfb      	ldrh	r3, [r7, #30]
 801db72:	8aba      	ldrh	r2, [r7, #20]
 801db74:	f107 0108 	add.w	r1, r7, #8
 801db78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801db7a:	f7f8 fc05 	bl	8016388 <pbuf_copy_partial>
 801db7e:	4603      	mov	r3, r0
 801db80:	461a      	mov	r2, r3
 801db82:	8abb      	ldrh	r3, [r7, #20]
 801db84:	4293      	cmp	r3, r2
 801db86:	d002      	beq.n	801db8e <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 801db88:	f06f 0301 	mvn.w	r3, #1
 801db8c:	e0c8      	b.n	801dd20 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 801db8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801db92:	2b04      	cmp	r3, #4
 801db94:	d933      	bls.n	801dbfe <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801db96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801db9a:	f003 0303 	and.w	r3, r3, #3
 801db9e:	b2db      	uxtb	r3, r3
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	d009      	beq.n	801dbb8 <dhcp_parse_reply+0x414>
 801dba4:	4b60      	ldr	r3, [pc, #384]	; (801dd28 <dhcp_parse_reply+0x584>)
 801dba6:	f240 6281 	movw	r2, #1665	; 0x681
 801dbaa:	4964      	ldr	r1, [pc, #400]	; (801dd3c <dhcp_parse_reply+0x598>)
 801dbac:	4860      	ldr	r0, [pc, #384]	; (801dd30 <dhcp_parse_reply+0x58c>)
 801dbae:	f003 fcb7 	bl	8021520 <iprintf>
 801dbb2:	f06f 0305 	mvn.w	r3, #5
 801dbb6:	e0b3      	b.n	801dd20 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 801dbb8:	4a5f      	ldr	r2, [pc, #380]	; (801dd38 <dhcp_parse_reply+0x594>)
 801dbba:	6a3b      	ldr	r3, [r7, #32]
 801dbbc:	4413      	add	r3, r2
 801dbbe:	2201      	movs	r2, #1
 801dbc0:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801dbc2:	68bb      	ldr	r3, [r7, #8]
 801dbc4:	4618      	mov	r0, r3
 801dbc6:	f7f6 fe20 	bl	801480a <lwip_htonl>
 801dbca:	4601      	mov	r1, r0
 801dbcc:	4a5c      	ldr	r2, [pc, #368]	; (801dd40 <dhcp_parse_reply+0x59c>)
 801dbce:	6a3b      	ldr	r3, [r7, #32]
 801dbd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801dbd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801dbd8:	3b04      	subs	r3, #4
 801dbda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801dbde:	8bfb      	ldrh	r3, [r7, #30]
 801dbe0:	3304      	adds	r3, #4
 801dbe2:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801dbe4:	8a7a      	ldrh	r2, [r7, #18]
 801dbe6:	8bfb      	ldrh	r3, [r7, #30]
 801dbe8:	429a      	cmp	r2, r3
 801dbea:	d202      	bcs.n	801dbf2 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 801dbec:	f06f 0301 	mvn.w	r3, #1
 801dbf0:	e096      	b.n	801dd20 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 801dbf2:	8a7b      	ldrh	r3, [r7, #18]
 801dbf4:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801dbf6:	6a3b      	ldr	r3, [r7, #32]
 801dbf8:	3301      	adds	r3, #1
 801dbfa:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801dbfc:	e79e      	b.n	801db3c <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 801dbfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801dc02:	2b04      	cmp	r3, #4
 801dc04:	d106      	bne.n	801dc14 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 801dc06:	68bb      	ldr	r3, [r7, #8]
 801dc08:	4618      	mov	r0, r3
 801dc0a:	f7f6 fdfe 	bl	801480a <lwip_htonl>
 801dc0e:	4603      	mov	r3, r0
 801dc10:	60bb      	str	r3, [r7, #8]
 801dc12:	e011      	b.n	801dc38 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801dc14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801dc18:	2b01      	cmp	r3, #1
 801dc1a:	d009      	beq.n	801dc30 <dhcp_parse_reply+0x48c>
 801dc1c:	4b42      	ldr	r3, [pc, #264]	; (801dd28 <dhcp_parse_reply+0x584>)
 801dc1e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801dc22:	4948      	ldr	r1, [pc, #288]	; (801dd44 <dhcp_parse_reply+0x5a0>)
 801dc24:	4842      	ldr	r0, [pc, #264]	; (801dd30 <dhcp_parse_reply+0x58c>)
 801dc26:	f003 fc7b 	bl	8021520 <iprintf>
 801dc2a:	f06f 0305 	mvn.w	r3, #5
 801dc2e:	e077      	b.n	801dd20 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 801dc30:	f107 0308 	add.w	r3, r7, #8
 801dc34:	781b      	ldrb	r3, [r3, #0]
 801dc36:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801dc38:	4a3f      	ldr	r2, [pc, #252]	; (801dd38 <dhcp_parse_reply+0x594>)
 801dc3a:	6a3b      	ldr	r3, [r7, #32]
 801dc3c:	4413      	add	r3, r2
 801dc3e:	2201      	movs	r2, #1
 801dc40:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801dc42:	68ba      	ldr	r2, [r7, #8]
 801dc44:	493e      	ldr	r1, [pc, #248]	; (801dd40 <dhcp_parse_reply+0x59c>)
 801dc46:	6a3b      	ldr	r3, [r7, #32]
 801dc48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801dc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc4e:	895b      	ldrh	r3, [r3, #10]
 801dc50:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801dc52:	429a      	cmp	r2, r3
 801dc54:	d324      	bcc.n	801dca0 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 801dc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc58:	895b      	ldrh	r3, [r3, #10]
 801dc5a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801dc5c:	1ad3      	subs	r3, r2, r3
 801dc5e:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801dc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc62:	895b      	ldrh	r3, [r3, #10]
 801dc64:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801dc66:	1ad3      	subs	r3, r2, r3
 801dc68:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801dc6a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801dc6c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801dc6e:	429a      	cmp	r2, r3
 801dc70:	d213      	bcs.n	801dc9a <dhcp_parse_reply+0x4f6>
        q = q->next;
 801dc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc74:	681b      	ldr	r3, [r3, #0]
 801dc76:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801dc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d109      	bne.n	801dc92 <dhcp_parse_reply+0x4ee>
 801dc7e:	4b2a      	ldr	r3, [pc, #168]	; (801dd28 <dhcp_parse_reply+0x584>)
 801dc80:	f240 629d 	movw	r2, #1693	; 0x69d
 801dc84:	4930      	ldr	r1, [pc, #192]	; (801dd48 <dhcp_parse_reply+0x5a4>)
 801dc86:	482a      	ldr	r0, [pc, #168]	; (801dd30 <dhcp_parse_reply+0x58c>)
 801dc88:	f003 fc4a 	bl	8021520 <iprintf>
 801dc8c:	f06f 0305 	mvn.w	r3, #5
 801dc90:	e046      	b.n	801dd20 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801dc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc94:	685b      	ldr	r3, [r3, #4]
 801dc96:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dc98:	e002      	b.n	801dca0 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801dc9a:	f06f 0301 	mvn.w	r3, #1
 801dc9e:	e03f      	b.n	801dd20 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801dca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dca2:	2b00      	cmp	r3, #0
 801dca4:	d00a      	beq.n	801dcbc <dhcp_parse_reply+0x518>
 801dca6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801dca8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801dcaa:	429a      	cmp	r2, r3
 801dcac:	d206      	bcs.n	801dcbc <dhcp_parse_reply+0x518>
 801dcae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801dcb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dcb2:	4413      	add	r3, r2
 801dcb4:	781b      	ldrb	r3, [r3, #0]
 801dcb6:	2bff      	cmp	r3, #255	; 0xff
 801dcb8:	f47f adb7 	bne.w	801d82a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801dcbc:	4b1e      	ldr	r3, [pc, #120]	; (801dd38 <dhcp_parse_reply+0x594>)
 801dcbe:	781b      	ldrb	r3, [r3, #0]
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	d018      	beq.n	801dcf6 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801dcc4:	4b1e      	ldr	r3, [pc, #120]	; (801dd40 <dhcp_parse_reply+0x59c>)
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801dcca:	4b1b      	ldr	r3, [pc, #108]	; (801dd38 <dhcp_parse_reply+0x594>)
 801dccc:	2200      	movs	r2, #0
 801dcce:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801dcd0:	68fb      	ldr	r3, [r7, #12]
 801dcd2:	2b01      	cmp	r3, #1
 801dcd4:	d102      	bne.n	801dcdc <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801dcd6:	2301      	movs	r3, #1
 801dcd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dcda:	e00c      	b.n	801dcf6 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801dcdc:	68fb      	ldr	r3, [r7, #12]
 801dcde:	2b02      	cmp	r3, #2
 801dce0:	d102      	bne.n	801dce8 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801dce2:	2301      	movs	r3, #1
 801dce4:	62bb      	str	r3, [r7, #40]	; 0x28
 801dce6:	e006      	b.n	801dcf6 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801dce8:	68fb      	ldr	r3, [r7, #12]
 801dcea:	2b03      	cmp	r3, #3
 801dcec:	d103      	bne.n	801dcf6 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 801dcee:	2301      	movs	r3, #1
 801dcf0:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801dcf2:	2301      	movs	r3, #1
 801dcf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801dcf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dcf8:	2b00      	cmp	r3, #0
 801dcfa:	d006      	beq.n	801dd0a <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801dcfc:	2300      	movs	r3, #0
 801dcfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801dd00:	236c      	movs	r3, #108	; 0x6c
 801dd02:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801dd04:	23ec      	movs	r3, #236	; 0xec
 801dd06:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801dd08:	e569      	b.n	801d7de <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801dd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	d006      	beq.n	801dd1e <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 801dd10:	2300      	movs	r3, #0
 801dd12:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801dd14:	232c      	movs	r3, #44	; 0x2c
 801dd16:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801dd18:	236c      	movs	r3, #108	; 0x6c
 801dd1a:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801dd1c:	e55f      	b.n	801d7de <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801dd1e:	2300      	movs	r3, #0
}
 801dd20:	4618      	mov	r0, r3
 801dd22:	3740      	adds	r7, #64	; 0x40
 801dd24:	46bd      	mov	sp, r7
 801dd26:	bd80      	pop	{r7, pc}
 801dd28:	080247ac 	.word	0x080247ac
 801dd2c:	08024a34 	.word	0x08024a34
 801dd30:	0802480c 	.word	0x0802480c
 801dd34:	08024a78 	.word	0x08024a78
 801dd38:	20010350 	.word	0x20010350
 801dd3c:	08024a8c 	.word	0x08024a8c
 801dd40:	20010358 	.word	0x20010358
 801dd44:	08024aa4 	.word	0x08024aa4
 801dd48:	08024ab8 	.word	0x08024ab8

0801dd4c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801dd4c:	b580      	push	{r7, lr}
 801dd4e:	b08a      	sub	sp, #40	; 0x28
 801dd50:	af00      	add	r7, sp, #0
 801dd52:	60f8      	str	r0, [r7, #12]
 801dd54:	60b9      	str	r1, [r7, #8]
 801dd56:	607a      	str	r2, [r7, #4]
 801dd58:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801dd5a:	4b5f      	ldr	r3, [pc, #380]	; (801ded8 <dhcp_recv+0x18c>)
 801dd5c:	685b      	ldr	r3, [r3, #4]
 801dd5e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801dd60:	6a3b      	ldr	r3, [r7, #32]
 801dd62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd64:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801dd66:	687b      	ldr	r3, [r7, #4]
 801dd68:	685b      	ldr	r3, [r3, #4]
 801dd6a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801dd6c:	69fb      	ldr	r3, [r7, #28]
 801dd6e:	2b00      	cmp	r3, #0
 801dd70:	f000 809d 	beq.w	801deae <dhcp_recv+0x162>
 801dd74:	69fb      	ldr	r3, [r7, #28]
 801dd76:	791b      	ldrb	r3, [r3, #4]
 801dd78:	2b00      	cmp	r3, #0
 801dd7a:	f000 8098 	beq.w	801deae <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	895b      	ldrh	r3, [r3, #10]
 801dd82:	2b2b      	cmp	r3, #43	; 0x2b
 801dd84:	f240 8095 	bls.w	801deb2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801dd88:	69bb      	ldr	r3, [r7, #24]
 801dd8a:	781b      	ldrb	r3, [r3, #0]
 801dd8c:	2b02      	cmp	r3, #2
 801dd8e:	f040 8092 	bne.w	801deb6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801dd92:	2300      	movs	r3, #0
 801dd94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801dd98:	e012      	b.n	801ddc0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801dd9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dd9e:	6a3a      	ldr	r2, [r7, #32]
 801dda0:	4413      	add	r3, r2
 801dda2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801dda6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ddaa:	69b9      	ldr	r1, [r7, #24]
 801ddac:	440b      	add	r3, r1
 801ddae:	7f1b      	ldrb	r3, [r3, #28]
 801ddb0:	429a      	cmp	r2, r3
 801ddb2:	f040 8082 	bne.w	801deba <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ddb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ddba:	3301      	adds	r3, #1
 801ddbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ddc0:	6a3b      	ldr	r3, [r7, #32]
 801ddc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801ddc6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801ddca:	429a      	cmp	r2, r3
 801ddcc:	d203      	bcs.n	801ddd6 <dhcp_recv+0x8a>
 801ddce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ddd2:	2b05      	cmp	r3, #5
 801ddd4:	d9e1      	bls.n	801dd9a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801ddd6:	69bb      	ldr	r3, [r7, #24]
 801ddd8:	685b      	ldr	r3, [r3, #4]
 801ddda:	4618      	mov	r0, r3
 801dddc:	f7f6 fd15 	bl	801480a <lwip_htonl>
 801dde0:	4602      	mov	r2, r0
 801dde2:	69fb      	ldr	r3, [r7, #28]
 801dde4:	681b      	ldr	r3, [r3, #0]
 801dde6:	429a      	cmp	r2, r3
 801dde8:	d169      	bne.n	801debe <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801ddea:	69f9      	ldr	r1, [r7, #28]
 801ddec:	6878      	ldr	r0, [r7, #4]
 801ddee:	f7ff fcd9 	bl	801d7a4 <dhcp_parse_reply>
 801ddf2:	4603      	mov	r3, r0
 801ddf4:	2b00      	cmp	r3, #0
 801ddf6:	d164      	bne.n	801dec2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801ddf8:	4b38      	ldr	r3, [pc, #224]	; (801dedc <dhcp_recv+0x190>)
 801ddfa:	785b      	ldrb	r3, [r3, #1]
 801ddfc:	2b00      	cmp	r3, #0
 801ddfe:	d062      	beq.n	801dec6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	685b      	ldr	r3, [r3, #4]
 801de04:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801de06:	4b36      	ldr	r3, [pc, #216]	; (801dee0 <dhcp_recv+0x194>)
 801de08:	685b      	ldr	r3, [r3, #4]
 801de0a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801de0c:	7cfb      	ldrb	r3, [r7, #19]
 801de0e:	2b05      	cmp	r3, #5
 801de10:	d12a      	bne.n	801de68 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801de12:	69fb      	ldr	r3, [r7, #28]
 801de14:	795b      	ldrb	r3, [r3, #5]
 801de16:	2b01      	cmp	r3, #1
 801de18:	d112      	bne.n	801de40 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801de1a:	6979      	ldr	r1, [r7, #20]
 801de1c:	6a38      	ldr	r0, [r7, #32]
 801de1e:	f7fe fe05 	bl	801ca2c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801de22:	6a3b      	ldr	r3, [r7, #32]
 801de24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801de28:	f003 0308 	and.w	r3, r3, #8
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	d003      	beq.n	801de38 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801de30:	6a38      	ldr	r0, [r7, #32]
 801de32:	f7fe fb73 	bl	801c51c <dhcp_check>
 801de36:	e047      	b.n	801dec8 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801de38:	6a38      	ldr	r0, [r7, #32]
 801de3a:	f7ff f867 	bl	801cf0c <dhcp_bind>
 801de3e:	e043      	b.n	801dec8 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801de40:	69fb      	ldr	r3, [r7, #28]
 801de42:	795b      	ldrb	r3, [r3, #5]
 801de44:	2b03      	cmp	r3, #3
 801de46:	d007      	beq.n	801de58 <dhcp_recv+0x10c>
 801de48:	69fb      	ldr	r3, [r7, #28]
 801de4a:	795b      	ldrb	r3, [r3, #5]
 801de4c:	2b04      	cmp	r3, #4
 801de4e:	d003      	beq.n	801de58 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801de50:	69fb      	ldr	r3, [r7, #28]
 801de52:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801de54:	2b05      	cmp	r3, #5
 801de56:	d137      	bne.n	801dec8 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 801de58:	6979      	ldr	r1, [r7, #20]
 801de5a:	6a38      	ldr	r0, [r7, #32]
 801de5c:	f7fe fde6 	bl	801ca2c <dhcp_handle_ack>
      dhcp_bind(netif);
 801de60:	6a38      	ldr	r0, [r7, #32]
 801de62:	f7ff f853 	bl	801cf0c <dhcp_bind>
 801de66:	e02f      	b.n	801dec8 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801de68:	7cfb      	ldrb	r3, [r7, #19]
 801de6a:	2b06      	cmp	r3, #6
 801de6c:	d113      	bne.n	801de96 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801de6e:	69fb      	ldr	r3, [r7, #28]
 801de70:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801de72:	2b03      	cmp	r3, #3
 801de74:	d00b      	beq.n	801de8e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801de76:	69fb      	ldr	r3, [r7, #28]
 801de78:	795b      	ldrb	r3, [r3, #5]
 801de7a:	2b01      	cmp	r3, #1
 801de7c:	d007      	beq.n	801de8e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801de7e:	69fb      	ldr	r3, [r7, #28]
 801de80:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801de82:	2b04      	cmp	r3, #4
 801de84:	d003      	beq.n	801de8e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801de86:	69fb      	ldr	r3, [r7, #28]
 801de88:	795b      	ldrb	r3, [r3, #5]
 801de8a:	2b05      	cmp	r3, #5
 801de8c:	d103      	bne.n	801de96 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801de8e:	6a38      	ldr	r0, [r7, #32]
 801de90:	f7fe fb2a 	bl	801c4e8 <dhcp_handle_nak>
 801de94:	e018      	b.n	801dec8 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801de96:	7cfb      	ldrb	r3, [r7, #19]
 801de98:	2b02      	cmp	r3, #2
 801de9a:	d108      	bne.n	801deae <dhcp_recv+0x162>
 801de9c:	69fb      	ldr	r3, [r7, #28]
 801de9e:	795b      	ldrb	r3, [r3, #5]
 801dea0:	2b06      	cmp	r3, #6
 801dea2:	d104      	bne.n	801deae <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801dea4:	6979      	ldr	r1, [r7, #20]
 801dea6:	6a38      	ldr	r0, [r7, #32]
 801dea8:	f7fe fb6c 	bl	801c584 <dhcp_handle_offer>
 801deac:	e00c      	b.n	801dec8 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 801deae:	bf00      	nop
 801deb0:	e00a      	b.n	801dec8 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801deb2:	bf00      	nop
 801deb4:	e008      	b.n	801dec8 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801deb6:	bf00      	nop
 801deb8:	e006      	b.n	801dec8 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 801deba:	bf00      	nop
 801debc:	e004      	b.n	801dec8 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801debe:	bf00      	nop
 801dec0:	e002      	b.n	801dec8 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801dec2:	bf00      	nop
 801dec4:	e000      	b.n	801dec8 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801dec6:	bf00      	nop
  pbuf_free(p);
 801dec8:	6878      	ldr	r0, [r7, #4]
 801deca:	f7f8 f857 	bl	8015f7c <pbuf_free>
}
 801dece:	bf00      	nop
 801ded0:	3728      	adds	r7, #40	; 0x28
 801ded2:	46bd      	mov	sp, r7
 801ded4:	bd80      	pop	{r7, pc}
 801ded6:	bf00      	nop
 801ded8:	2000cc00 	.word	0x2000cc00
 801dedc:	20010350 	.word	0x20010350
 801dee0:	20010358 	.word	0x20010358

0801dee4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801dee4:	b580      	push	{r7, lr}
 801dee6:	b088      	sub	sp, #32
 801dee8:	af00      	add	r7, sp, #0
 801deea:	60f8      	str	r0, [r7, #12]
 801deec:	60b9      	str	r1, [r7, #8]
 801deee:	603b      	str	r3, [r7, #0]
 801def0:	4613      	mov	r3, r2
 801def2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	2b00      	cmp	r3, #0
 801def8:	d108      	bne.n	801df0c <dhcp_create_msg+0x28>
 801defa:	4b5f      	ldr	r3, [pc, #380]	; (801e078 <dhcp_create_msg+0x194>)
 801defc:	f240 7269 	movw	r2, #1897	; 0x769
 801df00:	495e      	ldr	r1, [pc, #376]	; (801e07c <dhcp_create_msg+0x198>)
 801df02:	485f      	ldr	r0, [pc, #380]	; (801e080 <dhcp_create_msg+0x19c>)
 801df04:	f003 fb0c 	bl	8021520 <iprintf>
 801df08:	2300      	movs	r3, #0
 801df0a:	e0b1      	b.n	801e070 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801df0c:	68bb      	ldr	r3, [r7, #8]
 801df0e:	2b00      	cmp	r3, #0
 801df10:	d108      	bne.n	801df24 <dhcp_create_msg+0x40>
 801df12:	4b59      	ldr	r3, [pc, #356]	; (801e078 <dhcp_create_msg+0x194>)
 801df14:	f240 726a 	movw	r2, #1898	; 0x76a
 801df18:	495a      	ldr	r1, [pc, #360]	; (801e084 <dhcp_create_msg+0x1a0>)
 801df1a:	4859      	ldr	r0, [pc, #356]	; (801e080 <dhcp_create_msg+0x19c>)
 801df1c:	f003 fb00 	bl	8021520 <iprintf>
 801df20:	2300      	movs	r3, #0
 801df22:	e0a5      	b.n	801e070 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801df24:	f44f 7220 	mov.w	r2, #640	; 0x280
 801df28:	f44f 719a 	mov.w	r1, #308	; 0x134
 801df2c:	2036      	movs	r0, #54	; 0x36
 801df2e:	f7f7 fd45 	bl	80159bc <pbuf_alloc>
 801df32:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801df34:	69bb      	ldr	r3, [r7, #24]
 801df36:	2b00      	cmp	r3, #0
 801df38:	d101      	bne.n	801df3e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801df3a:	2300      	movs	r3, #0
 801df3c:	e098      	b.n	801e070 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801df3e:	69bb      	ldr	r3, [r7, #24]
 801df40:	895b      	ldrh	r3, [r3, #10]
 801df42:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801df46:	d206      	bcs.n	801df56 <dhcp_create_msg+0x72>
 801df48:	4b4b      	ldr	r3, [pc, #300]	; (801e078 <dhcp_create_msg+0x194>)
 801df4a:	f240 7272 	movw	r2, #1906	; 0x772
 801df4e:	494e      	ldr	r1, [pc, #312]	; (801e088 <dhcp_create_msg+0x1a4>)
 801df50:	484b      	ldr	r0, [pc, #300]	; (801e080 <dhcp_create_msg+0x19c>)
 801df52:	f003 fae5 	bl	8021520 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801df56:	79fb      	ldrb	r3, [r7, #7]
 801df58:	2b03      	cmp	r3, #3
 801df5a:	d103      	bne.n	801df64 <dhcp_create_msg+0x80>
 801df5c:	68bb      	ldr	r3, [r7, #8]
 801df5e:	795b      	ldrb	r3, [r3, #5]
 801df60:	2b03      	cmp	r3, #3
 801df62:	d10d      	bne.n	801df80 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801df64:	68bb      	ldr	r3, [r7, #8]
 801df66:	799b      	ldrb	r3, [r3, #6]
 801df68:	2b00      	cmp	r3, #0
 801df6a:	d105      	bne.n	801df78 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801df6c:	f003 fb54 	bl	8021618 <rand>
 801df70:	4603      	mov	r3, r0
 801df72:	461a      	mov	r2, r3
 801df74:	4b45      	ldr	r3, [pc, #276]	; (801e08c <dhcp_create_msg+0x1a8>)
 801df76:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801df78:	4b44      	ldr	r3, [pc, #272]	; (801e08c <dhcp_create_msg+0x1a8>)
 801df7a:	681a      	ldr	r2, [r3, #0]
 801df7c:	68bb      	ldr	r3, [r7, #8]
 801df7e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801df80:	69bb      	ldr	r3, [r7, #24]
 801df82:	685b      	ldr	r3, [r3, #4]
 801df84:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801df86:	f44f 729a 	mov.w	r2, #308	; 0x134
 801df8a:	2100      	movs	r1, #0
 801df8c:	6978      	ldr	r0, [r7, #20]
 801df8e:	f003 fa17 	bl	80213c0 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801df92:	697b      	ldr	r3, [r7, #20]
 801df94:	2201      	movs	r2, #1
 801df96:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801df98:	697b      	ldr	r3, [r7, #20]
 801df9a:	2201      	movs	r2, #1
 801df9c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801df9e:	68fb      	ldr	r3, [r7, #12]
 801dfa0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801dfa4:	697b      	ldr	r3, [r7, #20]
 801dfa6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801dfa8:	68bb      	ldr	r3, [r7, #8]
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	4618      	mov	r0, r3
 801dfae:	f7f6 fc2c 	bl	801480a <lwip_htonl>
 801dfb2:	4602      	mov	r2, r0
 801dfb4:	697b      	ldr	r3, [r7, #20]
 801dfb6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801dfb8:	79fb      	ldrb	r3, [r7, #7]
 801dfba:	2b08      	cmp	r3, #8
 801dfbc:	d010      	beq.n	801dfe0 <dhcp_create_msg+0xfc>
 801dfbe:	79fb      	ldrb	r3, [r7, #7]
 801dfc0:	2b04      	cmp	r3, #4
 801dfc2:	d00d      	beq.n	801dfe0 <dhcp_create_msg+0xfc>
 801dfc4:	79fb      	ldrb	r3, [r7, #7]
 801dfc6:	2b07      	cmp	r3, #7
 801dfc8:	d00a      	beq.n	801dfe0 <dhcp_create_msg+0xfc>
 801dfca:	79fb      	ldrb	r3, [r7, #7]
 801dfcc:	2b03      	cmp	r3, #3
 801dfce:	d10c      	bne.n	801dfea <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801dfd0:	68bb      	ldr	r3, [r7, #8]
 801dfd2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801dfd4:	2b05      	cmp	r3, #5
 801dfd6:	d003      	beq.n	801dfe0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801dfd8:	68bb      	ldr	r3, [r7, #8]
 801dfda:	795b      	ldrb	r3, [r3, #5]
 801dfdc:	2b04      	cmp	r3, #4
 801dfde:	d104      	bne.n	801dfea <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801dfe0:	68fb      	ldr	r3, [r7, #12]
 801dfe2:	3304      	adds	r3, #4
 801dfe4:	681a      	ldr	r2, [r3, #0]
 801dfe6:	697b      	ldr	r3, [r7, #20]
 801dfe8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801dfea:	2300      	movs	r3, #0
 801dfec:	83fb      	strh	r3, [r7, #30]
 801dfee:	e00c      	b.n	801e00a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801dff0:	8bfa      	ldrh	r2, [r7, #30]
 801dff2:	8bfb      	ldrh	r3, [r7, #30]
 801dff4:	68f9      	ldr	r1, [r7, #12]
 801dff6:	440a      	add	r2, r1
 801dff8:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
 801dffc:	697a      	ldr	r2, [r7, #20]
 801dffe:	4413      	add	r3, r2
 801e000:	460a      	mov	r2, r1
 801e002:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801e004:	8bfb      	ldrh	r3, [r7, #30]
 801e006:	3301      	adds	r3, #1
 801e008:	83fb      	strh	r3, [r7, #30]
 801e00a:	8bfb      	ldrh	r3, [r7, #30]
 801e00c:	2b05      	cmp	r3, #5
 801e00e:	d9ef      	bls.n	801dff0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801e010:	697b      	ldr	r3, [r7, #20]
 801e012:	2200      	movs	r2, #0
 801e014:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801e018:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801e01c:	2200      	movs	r2, #0
 801e01e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801e022:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801e026:	2200      	movs	r2, #0
 801e028:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801e02c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801e030:	2200      	movs	r2, #0
 801e032:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801e036:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801e03a:	697b      	ldr	r3, [r7, #20]
 801e03c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e040:	2301      	movs	r3, #1
 801e042:	2235      	movs	r2, #53	; 0x35
 801e044:	2000      	movs	r0, #0
 801e046:	f7ff fadd 	bl	801d604 <dhcp_option>
 801e04a:	4603      	mov	r3, r0
 801e04c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801e04e:	697b      	ldr	r3, [r7, #20]
 801e050:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e054:	79fa      	ldrb	r2, [r7, #7]
 801e056:	8a7b      	ldrh	r3, [r7, #18]
 801e058:	4618      	mov	r0, r3
 801e05a:	f7ff fb07 	bl	801d66c <dhcp_option_byte>
 801e05e:	4603      	mov	r3, r0
 801e060:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801e062:	683b      	ldr	r3, [r7, #0]
 801e064:	2b00      	cmp	r3, #0
 801e066:	d002      	beq.n	801e06e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801e068:	683b      	ldr	r3, [r7, #0]
 801e06a:	8a7a      	ldrh	r2, [r7, #18]
 801e06c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801e06e:	69bb      	ldr	r3, [r7, #24]
}
 801e070:	4618      	mov	r0, r3
 801e072:	3720      	adds	r7, #32
 801e074:	46bd      	mov	sp, r7
 801e076:	bd80      	pop	{r7, pc}
 801e078:	080247ac 	.word	0x080247ac
 801e07c:	08024acc 	.word	0x08024acc
 801e080:	0802480c 	.word	0x0802480c
 801e084:	08024aec 	.word	0x08024aec
 801e088:	08024b0c 	.word	0x08024b0c
 801e08c:	20009008 	.word	0x20009008

0801e090 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801e090:	b580      	push	{r7, lr}
 801e092:	b084      	sub	sp, #16
 801e094:	af00      	add	r7, sp, #0
 801e096:	4603      	mov	r3, r0
 801e098:	60b9      	str	r1, [r7, #8]
 801e09a:	607a      	str	r2, [r7, #4]
 801e09c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801e09e:	89fb      	ldrh	r3, [r7, #14]
 801e0a0:	1c5a      	adds	r2, r3, #1
 801e0a2:	81fa      	strh	r2, [r7, #14]
 801e0a4:	461a      	mov	r2, r3
 801e0a6:	68bb      	ldr	r3, [r7, #8]
 801e0a8:	4413      	add	r3, r2
 801e0aa:	22ff      	movs	r2, #255	; 0xff
 801e0ac:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801e0ae:	e007      	b.n	801e0c0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801e0b0:	89fb      	ldrh	r3, [r7, #14]
 801e0b2:	1c5a      	adds	r2, r3, #1
 801e0b4:	81fa      	strh	r2, [r7, #14]
 801e0b6:	461a      	mov	r2, r3
 801e0b8:	68bb      	ldr	r3, [r7, #8]
 801e0ba:	4413      	add	r3, r2
 801e0bc:	2200      	movs	r2, #0
 801e0be:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801e0c0:	89fb      	ldrh	r3, [r7, #14]
 801e0c2:	2b43      	cmp	r3, #67	; 0x43
 801e0c4:	d904      	bls.n	801e0d0 <dhcp_option_trailer+0x40>
 801e0c6:	89fb      	ldrh	r3, [r7, #14]
 801e0c8:	f003 0303 	and.w	r3, r3, #3
 801e0cc:	2b00      	cmp	r3, #0
 801e0ce:	d002      	beq.n	801e0d6 <dhcp_option_trailer+0x46>
 801e0d0:	89fb      	ldrh	r3, [r7, #14]
 801e0d2:	2b43      	cmp	r3, #67	; 0x43
 801e0d4:	d9ec      	bls.n	801e0b0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801e0d6:	89fb      	ldrh	r3, [r7, #14]
 801e0d8:	33f0      	adds	r3, #240	; 0xf0
 801e0da:	b29b      	uxth	r3, r3
 801e0dc:	4619      	mov	r1, r3
 801e0de:	6878      	ldr	r0, [r7, #4]
 801e0e0:	f7f7 fdc6 	bl	8015c70 <pbuf_realloc>
}
 801e0e4:	bf00      	nop
 801e0e6:	3710      	adds	r7, #16
 801e0e8:	46bd      	mov	sp, r7
 801e0ea:	bd80      	pop	{r7, pc}

0801e0ec <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801e0ec:	b480      	push	{r7}
 801e0ee:	b085      	sub	sp, #20
 801e0f0:	af00      	add	r7, sp, #0
 801e0f2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801e0f4:	687b      	ldr	r3, [r7, #4]
 801e0f6:	2b00      	cmp	r3, #0
 801e0f8:	d017      	beq.n	801e12a <dhcp_supplied_address+0x3e>
 801e0fa:	687b      	ldr	r3, [r7, #4]
 801e0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0fe:	2b00      	cmp	r3, #0
 801e100:	d013      	beq.n	801e12a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e106:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801e108:	68fb      	ldr	r3, [r7, #12]
 801e10a:	795b      	ldrb	r3, [r3, #5]
 801e10c:	2b0a      	cmp	r3, #10
 801e10e:	d007      	beq.n	801e120 <dhcp_supplied_address+0x34>
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	795b      	ldrb	r3, [r3, #5]
 801e114:	2b05      	cmp	r3, #5
 801e116:	d003      	beq.n	801e120 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801e118:	68fb      	ldr	r3, [r7, #12]
 801e11a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801e11c:	2b04      	cmp	r3, #4
 801e11e:	d101      	bne.n	801e124 <dhcp_supplied_address+0x38>
 801e120:	2301      	movs	r3, #1
 801e122:	e000      	b.n	801e126 <dhcp_supplied_address+0x3a>
 801e124:	2300      	movs	r3, #0
 801e126:	b2db      	uxtb	r3, r3
 801e128:	e000      	b.n	801e12c <dhcp_supplied_address+0x40>
  }
  return 0;
 801e12a:	2300      	movs	r3, #0
}
 801e12c:	4618      	mov	r0, r3
 801e12e:	3714      	adds	r7, #20
 801e130:	46bd      	mov	sp, r7
 801e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e136:	4770      	bx	lr

0801e138 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801e138:	b580      	push	{r7, lr}
 801e13a:	b082      	sub	sp, #8
 801e13c:	af00      	add	r7, sp, #0
 801e13e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801e140:	4915      	ldr	r1, [pc, #84]	; (801e198 <etharp_free_entry+0x60>)
 801e142:	687a      	ldr	r2, [r7, #4]
 801e144:	4613      	mov	r3, r2
 801e146:	005b      	lsls	r3, r3, #1
 801e148:	4413      	add	r3, r2
 801e14a:	00db      	lsls	r3, r3, #3
 801e14c:	440b      	add	r3, r1
 801e14e:	681b      	ldr	r3, [r3, #0]
 801e150:	2b00      	cmp	r3, #0
 801e152:	d013      	beq.n	801e17c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801e154:	4910      	ldr	r1, [pc, #64]	; (801e198 <etharp_free_entry+0x60>)
 801e156:	687a      	ldr	r2, [r7, #4]
 801e158:	4613      	mov	r3, r2
 801e15a:	005b      	lsls	r3, r3, #1
 801e15c:	4413      	add	r3, r2
 801e15e:	00db      	lsls	r3, r3, #3
 801e160:	440b      	add	r3, r1
 801e162:	681b      	ldr	r3, [r3, #0]
 801e164:	4618      	mov	r0, r3
 801e166:	f7f7 ff09 	bl	8015f7c <pbuf_free>
    arp_table[i].q = NULL;
 801e16a:	490b      	ldr	r1, [pc, #44]	; (801e198 <etharp_free_entry+0x60>)
 801e16c:	687a      	ldr	r2, [r7, #4]
 801e16e:	4613      	mov	r3, r2
 801e170:	005b      	lsls	r3, r3, #1
 801e172:	4413      	add	r3, r2
 801e174:	00db      	lsls	r3, r3, #3
 801e176:	440b      	add	r3, r1
 801e178:	2200      	movs	r2, #0
 801e17a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801e17c:	4906      	ldr	r1, [pc, #24]	; (801e198 <etharp_free_entry+0x60>)
 801e17e:	687a      	ldr	r2, [r7, #4]
 801e180:	4613      	mov	r3, r2
 801e182:	005b      	lsls	r3, r3, #1
 801e184:	4413      	add	r3, r2
 801e186:	00db      	lsls	r3, r3, #3
 801e188:	440b      	add	r3, r1
 801e18a:	3314      	adds	r3, #20
 801e18c:	2200      	movs	r2, #0
 801e18e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801e190:	bf00      	nop
 801e192:	3708      	adds	r7, #8
 801e194:	46bd      	mov	sp, r7
 801e196:	bd80      	pop	{r7, pc}
 801e198:	2000900c 	.word	0x2000900c

0801e19c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801e19c:	b580      	push	{r7, lr}
 801e19e:	b082      	sub	sp, #8
 801e1a0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e1a2:	2300      	movs	r3, #0
 801e1a4:	607b      	str	r3, [r7, #4]
 801e1a6:	e096      	b.n	801e2d6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801e1a8:	494f      	ldr	r1, [pc, #316]	; (801e2e8 <etharp_tmr+0x14c>)
 801e1aa:	687a      	ldr	r2, [r7, #4]
 801e1ac:	4613      	mov	r3, r2
 801e1ae:	005b      	lsls	r3, r3, #1
 801e1b0:	4413      	add	r3, r2
 801e1b2:	00db      	lsls	r3, r3, #3
 801e1b4:	440b      	add	r3, r1
 801e1b6:	3314      	adds	r3, #20
 801e1b8:	781b      	ldrb	r3, [r3, #0]
 801e1ba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801e1bc:	78fb      	ldrb	r3, [r7, #3]
 801e1be:	2b00      	cmp	r3, #0
 801e1c0:	f000 8086 	beq.w	801e2d0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801e1c4:	4948      	ldr	r1, [pc, #288]	; (801e2e8 <etharp_tmr+0x14c>)
 801e1c6:	687a      	ldr	r2, [r7, #4]
 801e1c8:	4613      	mov	r3, r2
 801e1ca:	005b      	lsls	r3, r3, #1
 801e1cc:	4413      	add	r3, r2
 801e1ce:	00db      	lsls	r3, r3, #3
 801e1d0:	440b      	add	r3, r1
 801e1d2:	3312      	adds	r3, #18
 801e1d4:	881b      	ldrh	r3, [r3, #0]
 801e1d6:	3301      	adds	r3, #1
 801e1d8:	b298      	uxth	r0, r3
 801e1da:	4943      	ldr	r1, [pc, #268]	; (801e2e8 <etharp_tmr+0x14c>)
 801e1dc:	687a      	ldr	r2, [r7, #4]
 801e1de:	4613      	mov	r3, r2
 801e1e0:	005b      	lsls	r3, r3, #1
 801e1e2:	4413      	add	r3, r2
 801e1e4:	00db      	lsls	r3, r3, #3
 801e1e6:	440b      	add	r3, r1
 801e1e8:	3312      	adds	r3, #18
 801e1ea:	4602      	mov	r2, r0
 801e1ec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e1ee:	493e      	ldr	r1, [pc, #248]	; (801e2e8 <etharp_tmr+0x14c>)
 801e1f0:	687a      	ldr	r2, [r7, #4]
 801e1f2:	4613      	mov	r3, r2
 801e1f4:	005b      	lsls	r3, r3, #1
 801e1f6:	4413      	add	r3, r2
 801e1f8:	00db      	lsls	r3, r3, #3
 801e1fa:	440b      	add	r3, r1
 801e1fc:	3312      	adds	r3, #18
 801e1fe:	881b      	ldrh	r3, [r3, #0]
 801e200:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801e204:	d215      	bcs.n	801e232 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e206:	4938      	ldr	r1, [pc, #224]	; (801e2e8 <etharp_tmr+0x14c>)
 801e208:	687a      	ldr	r2, [r7, #4]
 801e20a:	4613      	mov	r3, r2
 801e20c:	005b      	lsls	r3, r3, #1
 801e20e:	4413      	add	r3, r2
 801e210:	00db      	lsls	r3, r3, #3
 801e212:	440b      	add	r3, r1
 801e214:	3314      	adds	r3, #20
 801e216:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e218:	2b01      	cmp	r3, #1
 801e21a:	d10e      	bne.n	801e23a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801e21c:	4932      	ldr	r1, [pc, #200]	; (801e2e8 <etharp_tmr+0x14c>)
 801e21e:	687a      	ldr	r2, [r7, #4]
 801e220:	4613      	mov	r3, r2
 801e222:	005b      	lsls	r3, r3, #1
 801e224:	4413      	add	r3, r2
 801e226:	00db      	lsls	r3, r3, #3
 801e228:	440b      	add	r3, r1
 801e22a:	3312      	adds	r3, #18
 801e22c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e22e:	2b04      	cmp	r3, #4
 801e230:	d903      	bls.n	801e23a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801e232:	6878      	ldr	r0, [r7, #4]
 801e234:	f7ff ff80 	bl	801e138 <etharp_free_entry>
 801e238:	e04a      	b.n	801e2d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801e23a:	492b      	ldr	r1, [pc, #172]	; (801e2e8 <etharp_tmr+0x14c>)
 801e23c:	687a      	ldr	r2, [r7, #4]
 801e23e:	4613      	mov	r3, r2
 801e240:	005b      	lsls	r3, r3, #1
 801e242:	4413      	add	r3, r2
 801e244:	00db      	lsls	r3, r3, #3
 801e246:	440b      	add	r3, r1
 801e248:	3314      	adds	r3, #20
 801e24a:	781b      	ldrb	r3, [r3, #0]
 801e24c:	2b03      	cmp	r3, #3
 801e24e:	d10a      	bne.n	801e266 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801e250:	4925      	ldr	r1, [pc, #148]	; (801e2e8 <etharp_tmr+0x14c>)
 801e252:	687a      	ldr	r2, [r7, #4]
 801e254:	4613      	mov	r3, r2
 801e256:	005b      	lsls	r3, r3, #1
 801e258:	4413      	add	r3, r2
 801e25a:	00db      	lsls	r3, r3, #3
 801e25c:	440b      	add	r3, r1
 801e25e:	3314      	adds	r3, #20
 801e260:	2204      	movs	r2, #4
 801e262:	701a      	strb	r2, [r3, #0]
 801e264:	e034      	b.n	801e2d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801e266:	4920      	ldr	r1, [pc, #128]	; (801e2e8 <etharp_tmr+0x14c>)
 801e268:	687a      	ldr	r2, [r7, #4]
 801e26a:	4613      	mov	r3, r2
 801e26c:	005b      	lsls	r3, r3, #1
 801e26e:	4413      	add	r3, r2
 801e270:	00db      	lsls	r3, r3, #3
 801e272:	440b      	add	r3, r1
 801e274:	3314      	adds	r3, #20
 801e276:	781b      	ldrb	r3, [r3, #0]
 801e278:	2b04      	cmp	r3, #4
 801e27a:	d10a      	bne.n	801e292 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801e27c:	491a      	ldr	r1, [pc, #104]	; (801e2e8 <etharp_tmr+0x14c>)
 801e27e:	687a      	ldr	r2, [r7, #4]
 801e280:	4613      	mov	r3, r2
 801e282:	005b      	lsls	r3, r3, #1
 801e284:	4413      	add	r3, r2
 801e286:	00db      	lsls	r3, r3, #3
 801e288:	440b      	add	r3, r1
 801e28a:	3314      	adds	r3, #20
 801e28c:	2202      	movs	r2, #2
 801e28e:	701a      	strb	r2, [r3, #0]
 801e290:	e01e      	b.n	801e2d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e292:	4915      	ldr	r1, [pc, #84]	; (801e2e8 <etharp_tmr+0x14c>)
 801e294:	687a      	ldr	r2, [r7, #4]
 801e296:	4613      	mov	r3, r2
 801e298:	005b      	lsls	r3, r3, #1
 801e29a:	4413      	add	r3, r2
 801e29c:	00db      	lsls	r3, r3, #3
 801e29e:	440b      	add	r3, r1
 801e2a0:	3314      	adds	r3, #20
 801e2a2:	781b      	ldrb	r3, [r3, #0]
 801e2a4:	2b01      	cmp	r3, #1
 801e2a6:	d113      	bne.n	801e2d0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801e2a8:	490f      	ldr	r1, [pc, #60]	; (801e2e8 <etharp_tmr+0x14c>)
 801e2aa:	687a      	ldr	r2, [r7, #4]
 801e2ac:	4613      	mov	r3, r2
 801e2ae:	005b      	lsls	r3, r3, #1
 801e2b0:	4413      	add	r3, r2
 801e2b2:	00db      	lsls	r3, r3, #3
 801e2b4:	440b      	add	r3, r1
 801e2b6:	3308      	adds	r3, #8
 801e2b8:	6818      	ldr	r0, [r3, #0]
 801e2ba:	687a      	ldr	r2, [r7, #4]
 801e2bc:	4613      	mov	r3, r2
 801e2be:	005b      	lsls	r3, r3, #1
 801e2c0:	4413      	add	r3, r2
 801e2c2:	00db      	lsls	r3, r3, #3
 801e2c4:	4a08      	ldr	r2, [pc, #32]	; (801e2e8 <etharp_tmr+0x14c>)
 801e2c6:	4413      	add	r3, r2
 801e2c8:	3304      	adds	r3, #4
 801e2ca:	4619      	mov	r1, r3
 801e2cc:	f000 fe72 	bl	801efb4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e2d0:	687b      	ldr	r3, [r7, #4]
 801e2d2:	3301      	adds	r3, #1
 801e2d4:	607b      	str	r3, [r7, #4]
 801e2d6:	687b      	ldr	r3, [r7, #4]
 801e2d8:	2b09      	cmp	r3, #9
 801e2da:	f77f af65 	ble.w	801e1a8 <etharp_tmr+0xc>
      }
    }
  }
}
 801e2de:	bf00      	nop
 801e2e0:	3708      	adds	r7, #8
 801e2e2:	46bd      	mov	sp, r7
 801e2e4:	bd80      	pop	{r7, pc}
 801e2e6:	bf00      	nop
 801e2e8:	2000900c 	.word	0x2000900c

0801e2ec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801e2ec:	b580      	push	{r7, lr}
 801e2ee:	b08a      	sub	sp, #40	; 0x28
 801e2f0:	af00      	add	r7, sp, #0
 801e2f2:	60f8      	str	r0, [r7, #12]
 801e2f4:	460b      	mov	r3, r1
 801e2f6:	607a      	str	r2, [r7, #4]
 801e2f8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801e2fa:	230a      	movs	r3, #10
 801e2fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 801e2fe:	230a      	movs	r3, #10
 801e300:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801e302:	230a      	movs	r3, #10
 801e304:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801e306:	2300      	movs	r3, #0
 801e308:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801e30a:	230a      	movs	r3, #10
 801e30c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801e30e:	2300      	movs	r3, #0
 801e310:	83bb      	strh	r3, [r7, #28]
 801e312:	2300      	movs	r3, #0
 801e314:	837b      	strh	r3, [r7, #26]
 801e316:	2300      	movs	r3, #0
 801e318:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e31a:	2300      	movs	r3, #0
 801e31c:	843b      	strh	r3, [r7, #32]
 801e31e:	e0ae      	b.n	801e47e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801e320:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e324:	49a6      	ldr	r1, [pc, #664]	; (801e5c0 <etharp_find_entry+0x2d4>)
 801e326:	4613      	mov	r3, r2
 801e328:	005b      	lsls	r3, r3, #1
 801e32a:	4413      	add	r3, r2
 801e32c:	00db      	lsls	r3, r3, #3
 801e32e:	440b      	add	r3, r1
 801e330:	3314      	adds	r3, #20
 801e332:	781b      	ldrb	r3, [r3, #0]
 801e334:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801e336:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e33a:	2b0a      	cmp	r3, #10
 801e33c:	d105      	bne.n	801e34a <etharp_find_entry+0x5e>
 801e33e:	7dfb      	ldrb	r3, [r7, #23]
 801e340:	2b00      	cmp	r3, #0
 801e342:	d102      	bne.n	801e34a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801e344:	8c3b      	ldrh	r3, [r7, #32]
 801e346:	847b      	strh	r3, [r7, #34]	; 0x22
 801e348:	e095      	b.n	801e476 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801e34a:	7dfb      	ldrb	r3, [r7, #23]
 801e34c:	2b00      	cmp	r3, #0
 801e34e:	f000 8092 	beq.w	801e476 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801e352:	7dfb      	ldrb	r3, [r7, #23]
 801e354:	2b01      	cmp	r3, #1
 801e356:	d009      	beq.n	801e36c <etharp_find_entry+0x80>
 801e358:	7dfb      	ldrb	r3, [r7, #23]
 801e35a:	2b01      	cmp	r3, #1
 801e35c:	d806      	bhi.n	801e36c <etharp_find_entry+0x80>
 801e35e:	4b99      	ldr	r3, [pc, #612]	; (801e5c4 <etharp_find_entry+0x2d8>)
 801e360:	f44f 7292 	mov.w	r2, #292	; 0x124
 801e364:	4998      	ldr	r1, [pc, #608]	; (801e5c8 <etharp_find_entry+0x2dc>)
 801e366:	4899      	ldr	r0, [pc, #612]	; (801e5cc <etharp_find_entry+0x2e0>)
 801e368:	f003 f8da 	bl	8021520 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801e36c:	68fb      	ldr	r3, [r7, #12]
 801e36e:	2b00      	cmp	r3, #0
 801e370:	d020      	beq.n	801e3b4 <etharp_find_entry+0xc8>
 801e372:	68fb      	ldr	r3, [r7, #12]
 801e374:	6819      	ldr	r1, [r3, #0]
 801e376:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e37a:	4891      	ldr	r0, [pc, #580]	; (801e5c0 <etharp_find_entry+0x2d4>)
 801e37c:	4613      	mov	r3, r2
 801e37e:	005b      	lsls	r3, r3, #1
 801e380:	4413      	add	r3, r2
 801e382:	00db      	lsls	r3, r3, #3
 801e384:	4403      	add	r3, r0
 801e386:	3304      	adds	r3, #4
 801e388:	681b      	ldr	r3, [r3, #0]
 801e38a:	4299      	cmp	r1, r3
 801e38c:	d112      	bne.n	801e3b4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801e38e:	687b      	ldr	r3, [r7, #4]
 801e390:	2b00      	cmp	r3, #0
 801e392:	d00c      	beq.n	801e3ae <etharp_find_entry+0xc2>
 801e394:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e398:	4989      	ldr	r1, [pc, #548]	; (801e5c0 <etharp_find_entry+0x2d4>)
 801e39a:	4613      	mov	r3, r2
 801e39c:	005b      	lsls	r3, r3, #1
 801e39e:	4413      	add	r3, r2
 801e3a0:	00db      	lsls	r3, r3, #3
 801e3a2:	440b      	add	r3, r1
 801e3a4:	3308      	adds	r3, #8
 801e3a6:	681b      	ldr	r3, [r3, #0]
 801e3a8:	687a      	ldr	r2, [r7, #4]
 801e3aa:	429a      	cmp	r2, r3
 801e3ac:	d102      	bne.n	801e3b4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801e3ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e3b2:	e100      	b.n	801e5b6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801e3b4:	7dfb      	ldrb	r3, [r7, #23]
 801e3b6:	2b01      	cmp	r3, #1
 801e3b8:	d140      	bne.n	801e43c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801e3ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e3be:	4980      	ldr	r1, [pc, #512]	; (801e5c0 <etharp_find_entry+0x2d4>)
 801e3c0:	4613      	mov	r3, r2
 801e3c2:	005b      	lsls	r3, r3, #1
 801e3c4:	4413      	add	r3, r2
 801e3c6:	00db      	lsls	r3, r3, #3
 801e3c8:	440b      	add	r3, r1
 801e3ca:	681b      	ldr	r3, [r3, #0]
 801e3cc:	2b00      	cmp	r3, #0
 801e3ce:	d01a      	beq.n	801e406 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801e3d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e3d4:	497a      	ldr	r1, [pc, #488]	; (801e5c0 <etharp_find_entry+0x2d4>)
 801e3d6:	4613      	mov	r3, r2
 801e3d8:	005b      	lsls	r3, r3, #1
 801e3da:	4413      	add	r3, r2
 801e3dc:	00db      	lsls	r3, r3, #3
 801e3de:	440b      	add	r3, r1
 801e3e0:	3312      	adds	r3, #18
 801e3e2:	881b      	ldrh	r3, [r3, #0]
 801e3e4:	8bba      	ldrh	r2, [r7, #28]
 801e3e6:	429a      	cmp	r2, r3
 801e3e8:	d845      	bhi.n	801e476 <etharp_find_entry+0x18a>
            old_queue = i;
 801e3ea:	8c3b      	ldrh	r3, [r7, #32]
 801e3ec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801e3ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e3f2:	4973      	ldr	r1, [pc, #460]	; (801e5c0 <etharp_find_entry+0x2d4>)
 801e3f4:	4613      	mov	r3, r2
 801e3f6:	005b      	lsls	r3, r3, #1
 801e3f8:	4413      	add	r3, r2
 801e3fa:	00db      	lsls	r3, r3, #3
 801e3fc:	440b      	add	r3, r1
 801e3fe:	3312      	adds	r3, #18
 801e400:	881b      	ldrh	r3, [r3, #0]
 801e402:	83bb      	strh	r3, [r7, #28]
 801e404:	e037      	b.n	801e476 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801e406:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e40a:	496d      	ldr	r1, [pc, #436]	; (801e5c0 <etharp_find_entry+0x2d4>)
 801e40c:	4613      	mov	r3, r2
 801e40e:	005b      	lsls	r3, r3, #1
 801e410:	4413      	add	r3, r2
 801e412:	00db      	lsls	r3, r3, #3
 801e414:	440b      	add	r3, r1
 801e416:	3312      	adds	r3, #18
 801e418:	881b      	ldrh	r3, [r3, #0]
 801e41a:	8b7a      	ldrh	r2, [r7, #26]
 801e41c:	429a      	cmp	r2, r3
 801e41e:	d82a      	bhi.n	801e476 <etharp_find_entry+0x18a>
            old_pending = i;
 801e420:	8c3b      	ldrh	r3, [r7, #32]
 801e422:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801e424:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e428:	4965      	ldr	r1, [pc, #404]	; (801e5c0 <etharp_find_entry+0x2d4>)
 801e42a:	4613      	mov	r3, r2
 801e42c:	005b      	lsls	r3, r3, #1
 801e42e:	4413      	add	r3, r2
 801e430:	00db      	lsls	r3, r3, #3
 801e432:	440b      	add	r3, r1
 801e434:	3312      	adds	r3, #18
 801e436:	881b      	ldrh	r3, [r3, #0]
 801e438:	837b      	strh	r3, [r7, #26]
 801e43a:	e01c      	b.n	801e476 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801e43c:	7dfb      	ldrb	r3, [r7, #23]
 801e43e:	2b01      	cmp	r3, #1
 801e440:	d919      	bls.n	801e476 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801e442:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e446:	495e      	ldr	r1, [pc, #376]	; (801e5c0 <etharp_find_entry+0x2d4>)
 801e448:	4613      	mov	r3, r2
 801e44a:	005b      	lsls	r3, r3, #1
 801e44c:	4413      	add	r3, r2
 801e44e:	00db      	lsls	r3, r3, #3
 801e450:	440b      	add	r3, r1
 801e452:	3312      	adds	r3, #18
 801e454:	881b      	ldrh	r3, [r3, #0]
 801e456:	8b3a      	ldrh	r2, [r7, #24]
 801e458:	429a      	cmp	r2, r3
 801e45a:	d80c      	bhi.n	801e476 <etharp_find_entry+0x18a>
            old_stable = i;
 801e45c:	8c3b      	ldrh	r3, [r7, #32]
 801e45e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801e460:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e464:	4956      	ldr	r1, [pc, #344]	; (801e5c0 <etharp_find_entry+0x2d4>)
 801e466:	4613      	mov	r3, r2
 801e468:	005b      	lsls	r3, r3, #1
 801e46a:	4413      	add	r3, r2
 801e46c:	00db      	lsls	r3, r3, #3
 801e46e:	440b      	add	r3, r1
 801e470:	3312      	adds	r3, #18
 801e472:	881b      	ldrh	r3, [r3, #0]
 801e474:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e476:	8c3b      	ldrh	r3, [r7, #32]
 801e478:	3301      	adds	r3, #1
 801e47a:	b29b      	uxth	r3, r3
 801e47c:	843b      	strh	r3, [r7, #32]
 801e47e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e482:	2b09      	cmp	r3, #9
 801e484:	f77f af4c 	ble.w	801e320 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801e488:	7afb      	ldrb	r3, [r7, #11]
 801e48a:	f003 0302 	and.w	r3, r3, #2
 801e48e:	2b00      	cmp	r3, #0
 801e490:	d108      	bne.n	801e4a4 <etharp_find_entry+0x1b8>
 801e492:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e496:	2b0a      	cmp	r3, #10
 801e498:	d107      	bne.n	801e4aa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801e49a:	7afb      	ldrb	r3, [r7, #11]
 801e49c:	f003 0301 	and.w	r3, r3, #1
 801e4a0:	2b00      	cmp	r3, #0
 801e4a2:	d102      	bne.n	801e4aa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801e4a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e4a8:	e085      	b.n	801e5b6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801e4aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e4ae:	2b09      	cmp	r3, #9
 801e4b0:	dc02      	bgt.n	801e4b8 <etharp_find_entry+0x1cc>
    i = empty;
 801e4b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e4b4:	843b      	strh	r3, [r7, #32]
 801e4b6:	e039      	b.n	801e52c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801e4b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801e4bc:	2b09      	cmp	r3, #9
 801e4be:	dc14      	bgt.n	801e4ea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801e4c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e4c2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801e4c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e4c8:	493d      	ldr	r1, [pc, #244]	; (801e5c0 <etharp_find_entry+0x2d4>)
 801e4ca:	4613      	mov	r3, r2
 801e4cc:	005b      	lsls	r3, r3, #1
 801e4ce:	4413      	add	r3, r2
 801e4d0:	00db      	lsls	r3, r3, #3
 801e4d2:	440b      	add	r3, r1
 801e4d4:	681b      	ldr	r3, [r3, #0]
 801e4d6:	2b00      	cmp	r3, #0
 801e4d8:	d018      	beq.n	801e50c <etharp_find_entry+0x220>
 801e4da:	4b3a      	ldr	r3, [pc, #232]	; (801e5c4 <etharp_find_entry+0x2d8>)
 801e4dc:	f240 126d 	movw	r2, #365	; 0x16d
 801e4e0:	493b      	ldr	r1, [pc, #236]	; (801e5d0 <etharp_find_entry+0x2e4>)
 801e4e2:	483a      	ldr	r0, [pc, #232]	; (801e5cc <etharp_find_entry+0x2e0>)
 801e4e4:	f003 f81c 	bl	8021520 <iprintf>
 801e4e8:	e010      	b.n	801e50c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801e4ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801e4ee:	2b09      	cmp	r3, #9
 801e4f0:	dc02      	bgt.n	801e4f8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801e4f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e4f4:	843b      	strh	r3, [r7, #32]
 801e4f6:	e009      	b.n	801e50c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801e4f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801e4fc:	2b09      	cmp	r3, #9
 801e4fe:	dc02      	bgt.n	801e506 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801e500:	8bfb      	ldrh	r3, [r7, #30]
 801e502:	843b      	strh	r3, [r7, #32]
 801e504:	e002      	b.n	801e50c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801e506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e50a:	e054      	b.n	801e5b6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e50c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e510:	2b09      	cmp	r3, #9
 801e512:	dd06      	ble.n	801e522 <etharp_find_entry+0x236>
 801e514:	4b2b      	ldr	r3, [pc, #172]	; (801e5c4 <etharp_find_entry+0x2d8>)
 801e516:	f240 127f 	movw	r2, #383	; 0x17f
 801e51a:	492e      	ldr	r1, [pc, #184]	; (801e5d4 <etharp_find_entry+0x2e8>)
 801e51c:	482b      	ldr	r0, [pc, #172]	; (801e5cc <etharp_find_entry+0x2e0>)
 801e51e:	f002 ffff 	bl	8021520 <iprintf>
    etharp_free_entry(i);
 801e522:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e526:	4618      	mov	r0, r3
 801e528:	f7ff fe06 	bl	801e138 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e52c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e530:	2b09      	cmp	r3, #9
 801e532:	dd06      	ble.n	801e542 <etharp_find_entry+0x256>
 801e534:	4b23      	ldr	r3, [pc, #140]	; (801e5c4 <etharp_find_entry+0x2d8>)
 801e536:	f240 1283 	movw	r2, #387	; 0x183
 801e53a:	4926      	ldr	r1, [pc, #152]	; (801e5d4 <etharp_find_entry+0x2e8>)
 801e53c:	4823      	ldr	r0, [pc, #140]	; (801e5cc <etharp_find_entry+0x2e0>)
 801e53e:	f002 ffef 	bl	8021520 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801e542:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e546:	491e      	ldr	r1, [pc, #120]	; (801e5c0 <etharp_find_entry+0x2d4>)
 801e548:	4613      	mov	r3, r2
 801e54a:	005b      	lsls	r3, r3, #1
 801e54c:	4413      	add	r3, r2
 801e54e:	00db      	lsls	r3, r3, #3
 801e550:	440b      	add	r3, r1
 801e552:	3314      	adds	r3, #20
 801e554:	781b      	ldrb	r3, [r3, #0]
 801e556:	2b00      	cmp	r3, #0
 801e558:	d006      	beq.n	801e568 <etharp_find_entry+0x27c>
 801e55a:	4b1a      	ldr	r3, [pc, #104]	; (801e5c4 <etharp_find_entry+0x2d8>)
 801e55c:	f240 1285 	movw	r2, #389	; 0x185
 801e560:	491d      	ldr	r1, [pc, #116]	; (801e5d8 <etharp_find_entry+0x2ec>)
 801e562:	481a      	ldr	r0, [pc, #104]	; (801e5cc <etharp_find_entry+0x2e0>)
 801e564:	f002 ffdc 	bl	8021520 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801e568:	68fb      	ldr	r3, [r7, #12]
 801e56a:	2b00      	cmp	r3, #0
 801e56c:	d00b      	beq.n	801e586 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801e56e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e572:	68fb      	ldr	r3, [r7, #12]
 801e574:	6819      	ldr	r1, [r3, #0]
 801e576:	4812      	ldr	r0, [pc, #72]	; (801e5c0 <etharp_find_entry+0x2d4>)
 801e578:	4613      	mov	r3, r2
 801e57a:	005b      	lsls	r3, r3, #1
 801e57c:	4413      	add	r3, r2
 801e57e:	00db      	lsls	r3, r3, #3
 801e580:	4403      	add	r3, r0
 801e582:	3304      	adds	r3, #4
 801e584:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801e586:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e58a:	490d      	ldr	r1, [pc, #52]	; (801e5c0 <etharp_find_entry+0x2d4>)
 801e58c:	4613      	mov	r3, r2
 801e58e:	005b      	lsls	r3, r3, #1
 801e590:	4413      	add	r3, r2
 801e592:	00db      	lsls	r3, r3, #3
 801e594:	440b      	add	r3, r1
 801e596:	3312      	adds	r3, #18
 801e598:	2200      	movs	r2, #0
 801e59a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801e59c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e5a0:	4907      	ldr	r1, [pc, #28]	; (801e5c0 <etharp_find_entry+0x2d4>)
 801e5a2:	4613      	mov	r3, r2
 801e5a4:	005b      	lsls	r3, r3, #1
 801e5a6:	4413      	add	r3, r2
 801e5a8:	00db      	lsls	r3, r3, #3
 801e5aa:	440b      	add	r3, r1
 801e5ac:	3308      	adds	r3, #8
 801e5ae:	687a      	ldr	r2, [r7, #4]
 801e5b0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801e5b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801e5b6:	4618      	mov	r0, r3
 801e5b8:	3728      	adds	r7, #40	; 0x28
 801e5ba:	46bd      	mov	sp, r7
 801e5bc:	bd80      	pop	{r7, pc}
 801e5be:	bf00      	nop
 801e5c0:	2000900c 	.word	0x2000900c
 801e5c4:	08024b4c 	.word	0x08024b4c
 801e5c8:	08024b84 	.word	0x08024b84
 801e5cc:	08024bc4 	.word	0x08024bc4
 801e5d0:	08024bec 	.word	0x08024bec
 801e5d4:	08024c04 	.word	0x08024c04
 801e5d8:	08024c18 	.word	0x08024c18

0801e5dc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801e5dc:	b580      	push	{r7, lr}
 801e5de:	b088      	sub	sp, #32
 801e5e0:	af02      	add	r7, sp, #8
 801e5e2:	60f8      	str	r0, [r7, #12]
 801e5e4:	60b9      	str	r1, [r7, #8]
 801e5e6:	607a      	str	r2, [r7, #4]
 801e5e8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801e5ea:	68fb      	ldr	r3, [r7, #12]
 801e5ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e5f0:	2b06      	cmp	r3, #6
 801e5f2:	d006      	beq.n	801e602 <etharp_update_arp_entry+0x26>
 801e5f4:	4b48      	ldr	r3, [pc, #288]	; (801e718 <etharp_update_arp_entry+0x13c>)
 801e5f6:	f240 12a9 	movw	r2, #425	; 0x1a9
 801e5fa:	4948      	ldr	r1, [pc, #288]	; (801e71c <etharp_update_arp_entry+0x140>)
 801e5fc:	4848      	ldr	r0, [pc, #288]	; (801e720 <etharp_update_arp_entry+0x144>)
 801e5fe:	f002 ff8f 	bl	8021520 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801e602:	68bb      	ldr	r3, [r7, #8]
 801e604:	2b00      	cmp	r3, #0
 801e606:	d012      	beq.n	801e62e <etharp_update_arp_entry+0x52>
 801e608:	68bb      	ldr	r3, [r7, #8]
 801e60a:	681b      	ldr	r3, [r3, #0]
 801e60c:	2b00      	cmp	r3, #0
 801e60e:	d00e      	beq.n	801e62e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e610:	68bb      	ldr	r3, [r7, #8]
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	68f9      	ldr	r1, [r7, #12]
 801e616:	4618      	mov	r0, r3
 801e618:	f001 f91e 	bl	801f858 <ip4_addr_isbroadcast_u32>
 801e61c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801e61e:	2b00      	cmp	r3, #0
 801e620:	d105      	bne.n	801e62e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801e622:	68bb      	ldr	r3, [r7, #8]
 801e624:	681b      	ldr	r3, [r3, #0]
 801e626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e62a:	2be0      	cmp	r3, #224	; 0xe0
 801e62c:	d102      	bne.n	801e634 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801e62e:	f06f 030f 	mvn.w	r3, #15
 801e632:	e06c      	b.n	801e70e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801e634:	78fb      	ldrb	r3, [r7, #3]
 801e636:	68fa      	ldr	r2, [r7, #12]
 801e638:	4619      	mov	r1, r3
 801e63a:	68b8      	ldr	r0, [r7, #8]
 801e63c:	f7ff fe56 	bl	801e2ec <etharp_find_entry>
 801e640:	4603      	mov	r3, r0
 801e642:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801e644:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e648:	2b00      	cmp	r3, #0
 801e64a:	da02      	bge.n	801e652 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801e64c:	8afb      	ldrh	r3, [r7, #22]
 801e64e:	b25b      	sxtb	r3, r3
 801e650:	e05d      	b.n	801e70e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801e652:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e656:	4933      	ldr	r1, [pc, #204]	; (801e724 <etharp_update_arp_entry+0x148>)
 801e658:	4613      	mov	r3, r2
 801e65a:	005b      	lsls	r3, r3, #1
 801e65c:	4413      	add	r3, r2
 801e65e:	00db      	lsls	r3, r3, #3
 801e660:	440b      	add	r3, r1
 801e662:	3314      	adds	r3, #20
 801e664:	2202      	movs	r2, #2
 801e666:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801e668:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e66c:	492d      	ldr	r1, [pc, #180]	; (801e724 <etharp_update_arp_entry+0x148>)
 801e66e:	4613      	mov	r3, r2
 801e670:	005b      	lsls	r3, r3, #1
 801e672:	4413      	add	r3, r2
 801e674:	00db      	lsls	r3, r3, #3
 801e676:	440b      	add	r3, r1
 801e678:	3308      	adds	r3, #8
 801e67a:	68fa      	ldr	r2, [r7, #12]
 801e67c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801e67e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e682:	4613      	mov	r3, r2
 801e684:	005b      	lsls	r3, r3, #1
 801e686:	4413      	add	r3, r2
 801e688:	00db      	lsls	r3, r3, #3
 801e68a:	3308      	adds	r3, #8
 801e68c:	4a25      	ldr	r2, [pc, #148]	; (801e724 <etharp_update_arp_entry+0x148>)
 801e68e:	4413      	add	r3, r2
 801e690:	3304      	adds	r3, #4
 801e692:	2206      	movs	r2, #6
 801e694:	6879      	ldr	r1, [r7, #4]
 801e696:	4618      	mov	r0, r3
 801e698:	f002 fe87 	bl	80213aa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801e69c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e6a0:	4920      	ldr	r1, [pc, #128]	; (801e724 <etharp_update_arp_entry+0x148>)
 801e6a2:	4613      	mov	r3, r2
 801e6a4:	005b      	lsls	r3, r3, #1
 801e6a6:	4413      	add	r3, r2
 801e6a8:	00db      	lsls	r3, r3, #3
 801e6aa:	440b      	add	r3, r1
 801e6ac:	3312      	adds	r3, #18
 801e6ae:	2200      	movs	r2, #0
 801e6b0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801e6b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e6b6:	491b      	ldr	r1, [pc, #108]	; (801e724 <etharp_update_arp_entry+0x148>)
 801e6b8:	4613      	mov	r3, r2
 801e6ba:	005b      	lsls	r3, r3, #1
 801e6bc:	4413      	add	r3, r2
 801e6be:	00db      	lsls	r3, r3, #3
 801e6c0:	440b      	add	r3, r1
 801e6c2:	681b      	ldr	r3, [r3, #0]
 801e6c4:	2b00      	cmp	r3, #0
 801e6c6:	d021      	beq.n	801e70c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801e6c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e6cc:	4915      	ldr	r1, [pc, #84]	; (801e724 <etharp_update_arp_entry+0x148>)
 801e6ce:	4613      	mov	r3, r2
 801e6d0:	005b      	lsls	r3, r3, #1
 801e6d2:	4413      	add	r3, r2
 801e6d4:	00db      	lsls	r3, r3, #3
 801e6d6:	440b      	add	r3, r1
 801e6d8:	681b      	ldr	r3, [r3, #0]
 801e6da:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801e6dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e6e0:	4910      	ldr	r1, [pc, #64]	; (801e724 <etharp_update_arp_entry+0x148>)
 801e6e2:	4613      	mov	r3, r2
 801e6e4:	005b      	lsls	r3, r3, #1
 801e6e6:	4413      	add	r3, r2
 801e6e8:	00db      	lsls	r3, r3, #3
 801e6ea:	440b      	add	r3, r1
 801e6ec:	2200      	movs	r2, #0
 801e6ee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801e6f0:	68fb      	ldr	r3, [r7, #12]
 801e6f2:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 801e6f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e6fa:	9300      	str	r3, [sp, #0]
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	6939      	ldr	r1, [r7, #16]
 801e700:	68f8      	ldr	r0, [r7, #12]
 801e702:	f001 ffad 	bl	8020660 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801e706:	6938      	ldr	r0, [r7, #16]
 801e708:	f7f7 fc38 	bl	8015f7c <pbuf_free>
  }
  return ERR_OK;
 801e70c:	2300      	movs	r3, #0
}
 801e70e:	4618      	mov	r0, r3
 801e710:	3718      	adds	r7, #24
 801e712:	46bd      	mov	sp, r7
 801e714:	bd80      	pop	{r7, pc}
 801e716:	bf00      	nop
 801e718:	08024b4c 	.word	0x08024b4c
 801e71c:	08024c44 	.word	0x08024c44
 801e720:	08024bc4 	.word	0x08024bc4
 801e724:	2000900c 	.word	0x2000900c

0801e728 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801e728:	b580      	push	{r7, lr}
 801e72a:	b084      	sub	sp, #16
 801e72c:	af00      	add	r7, sp, #0
 801e72e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e730:	2300      	movs	r3, #0
 801e732:	60fb      	str	r3, [r7, #12]
 801e734:	e01e      	b.n	801e774 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801e736:	4913      	ldr	r1, [pc, #76]	; (801e784 <etharp_cleanup_netif+0x5c>)
 801e738:	68fa      	ldr	r2, [r7, #12]
 801e73a:	4613      	mov	r3, r2
 801e73c:	005b      	lsls	r3, r3, #1
 801e73e:	4413      	add	r3, r2
 801e740:	00db      	lsls	r3, r3, #3
 801e742:	440b      	add	r3, r1
 801e744:	3314      	adds	r3, #20
 801e746:	781b      	ldrb	r3, [r3, #0]
 801e748:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801e74a:	7afb      	ldrb	r3, [r7, #11]
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	d00e      	beq.n	801e76e <etharp_cleanup_netif+0x46>
 801e750:	490c      	ldr	r1, [pc, #48]	; (801e784 <etharp_cleanup_netif+0x5c>)
 801e752:	68fa      	ldr	r2, [r7, #12]
 801e754:	4613      	mov	r3, r2
 801e756:	005b      	lsls	r3, r3, #1
 801e758:	4413      	add	r3, r2
 801e75a:	00db      	lsls	r3, r3, #3
 801e75c:	440b      	add	r3, r1
 801e75e:	3308      	adds	r3, #8
 801e760:	681b      	ldr	r3, [r3, #0]
 801e762:	687a      	ldr	r2, [r7, #4]
 801e764:	429a      	cmp	r2, r3
 801e766:	d102      	bne.n	801e76e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801e768:	68f8      	ldr	r0, [r7, #12]
 801e76a:	f7ff fce5 	bl	801e138 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e76e:	68fb      	ldr	r3, [r7, #12]
 801e770:	3301      	adds	r3, #1
 801e772:	60fb      	str	r3, [r7, #12]
 801e774:	68fb      	ldr	r3, [r7, #12]
 801e776:	2b09      	cmp	r3, #9
 801e778:	dddd      	ble.n	801e736 <etharp_cleanup_netif+0xe>
    }
  }
}
 801e77a:	bf00      	nop
 801e77c:	3710      	adds	r7, #16
 801e77e:	46bd      	mov	sp, r7
 801e780:	bd80      	pop	{r7, pc}
 801e782:	bf00      	nop
 801e784:	2000900c 	.word	0x2000900c

0801e788 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801e788:	b5b0      	push	{r4, r5, r7, lr}
 801e78a:	b08a      	sub	sp, #40	; 0x28
 801e78c:	af04      	add	r7, sp, #16
 801e78e:	6078      	str	r0, [r7, #4]
 801e790:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801e792:	683b      	ldr	r3, [r7, #0]
 801e794:	2b00      	cmp	r3, #0
 801e796:	d107      	bne.n	801e7a8 <etharp_input+0x20>
 801e798:	4b3f      	ldr	r3, [pc, #252]	; (801e898 <etharp_input+0x110>)
 801e79a:	f240 228a 	movw	r2, #650	; 0x28a
 801e79e:	493f      	ldr	r1, [pc, #252]	; (801e89c <etharp_input+0x114>)
 801e7a0:	483f      	ldr	r0, [pc, #252]	; (801e8a0 <etharp_input+0x118>)
 801e7a2:	f002 febd 	bl	8021520 <iprintf>
 801e7a6:	e074      	b.n	801e892 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801e7a8:	687b      	ldr	r3, [r7, #4]
 801e7aa:	685b      	ldr	r3, [r3, #4]
 801e7ac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801e7ae:	693b      	ldr	r3, [r7, #16]
 801e7b0:	881b      	ldrh	r3, [r3, #0]
 801e7b2:	b29b      	uxth	r3, r3
 801e7b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e7b8:	d10c      	bne.n	801e7d4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801e7ba:	693b      	ldr	r3, [r7, #16]
 801e7bc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801e7be:	2b06      	cmp	r3, #6
 801e7c0:	d108      	bne.n	801e7d4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801e7c2:	693b      	ldr	r3, [r7, #16]
 801e7c4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801e7c6:	2b04      	cmp	r3, #4
 801e7c8:	d104      	bne.n	801e7d4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801e7ca:	693b      	ldr	r3, [r7, #16]
 801e7cc:	885b      	ldrh	r3, [r3, #2]
 801e7ce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801e7d0:	2b08      	cmp	r3, #8
 801e7d2:	d003      	beq.n	801e7dc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801e7d4:	6878      	ldr	r0, [r7, #4]
 801e7d6:	f7f7 fbd1 	bl	8015f7c <pbuf_free>
    return;
 801e7da:	e05a      	b.n	801e892 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801e7dc:	693b      	ldr	r3, [r7, #16]
 801e7de:	330e      	adds	r3, #14
 801e7e0:	681b      	ldr	r3, [r3, #0]
 801e7e2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801e7e4:	693b      	ldr	r3, [r7, #16]
 801e7e6:	3318      	adds	r3, #24
 801e7e8:	681b      	ldr	r3, [r3, #0]
 801e7ea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e7ec:	683b      	ldr	r3, [r7, #0]
 801e7ee:	3304      	adds	r3, #4
 801e7f0:	681b      	ldr	r3, [r3, #0]
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d102      	bne.n	801e7fc <etharp_input+0x74>
    for_us = 0;
 801e7f6:	2300      	movs	r3, #0
 801e7f8:	75fb      	strb	r3, [r7, #23]
 801e7fa:	e009      	b.n	801e810 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801e7fc:	68ba      	ldr	r2, [r7, #8]
 801e7fe:	683b      	ldr	r3, [r7, #0]
 801e800:	3304      	adds	r3, #4
 801e802:	681b      	ldr	r3, [r3, #0]
 801e804:	429a      	cmp	r2, r3
 801e806:	bf0c      	ite	eq
 801e808:	2301      	moveq	r3, #1
 801e80a:	2300      	movne	r3, #0
 801e80c:	b2db      	uxtb	r3, r3
 801e80e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801e810:	693b      	ldr	r3, [r7, #16]
 801e812:	f103 0208 	add.w	r2, r3, #8
 801e816:	7dfb      	ldrb	r3, [r7, #23]
 801e818:	2b00      	cmp	r3, #0
 801e81a:	d001      	beq.n	801e820 <etharp_input+0x98>
 801e81c:	2301      	movs	r3, #1
 801e81e:	e000      	b.n	801e822 <etharp_input+0x9a>
 801e820:	2302      	movs	r3, #2
 801e822:	f107 010c 	add.w	r1, r7, #12
 801e826:	6838      	ldr	r0, [r7, #0]
 801e828:	f7ff fed8 	bl	801e5dc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801e82c:	693b      	ldr	r3, [r7, #16]
 801e82e:	88db      	ldrh	r3, [r3, #6]
 801e830:	b29b      	uxth	r3, r3
 801e832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e836:	d003      	beq.n	801e840 <etharp_input+0xb8>
 801e838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e83c:	d01e      	beq.n	801e87c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801e83e:	e025      	b.n	801e88c <etharp_input+0x104>
      if (for_us) {
 801e840:	7dfb      	ldrb	r3, [r7, #23]
 801e842:	2b00      	cmp	r3, #0
 801e844:	d021      	beq.n	801e88a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801e846:	683b      	ldr	r3, [r7, #0]
 801e848:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 801e84c:	693b      	ldr	r3, [r7, #16]
 801e84e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801e852:	683b      	ldr	r3, [r7, #0]
 801e854:	f103 052e 	add.w	r5, r3, #46	; 0x2e
 801e858:	683b      	ldr	r3, [r7, #0]
 801e85a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801e85c:	693a      	ldr	r2, [r7, #16]
 801e85e:	3208      	adds	r2, #8
        etharp_raw(netif,
 801e860:	2102      	movs	r1, #2
 801e862:	9103      	str	r1, [sp, #12]
 801e864:	f107 010c 	add.w	r1, r7, #12
 801e868:	9102      	str	r1, [sp, #8]
 801e86a:	9201      	str	r2, [sp, #4]
 801e86c:	9300      	str	r3, [sp, #0]
 801e86e:	462b      	mov	r3, r5
 801e870:	4622      	mov	r2, r4
 801e872:	4601      	mov	r1, r0
 801e874:	6838      	ldr	r0, [r7, #0]
 801e876:	f000 faef 	bl	801ee58 <etharp_raw>
      break;
 801e87a:	e006      	b.n	801e88a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801e87c:	f107 030c 	add.w	r3, r7, #12
 801e880:	4619      	mov	r1, r3
 801e882:	6838      	ldr	r0, [r7, #0]
 801e884:	f7fe f9fe 	bl	801cc84 <dhcp_arp_reply>
      break;
 801e888:	e000      	b.n	801e88c <etharp_input+0x104>
      break;
 801e88a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801e88c:	6878      	ldr	r0, [r7, #4]
 801e88e:	f7f7 fb75 	bl	8015f7c <pbuf_free>
}
 801e892:	3718      	adds	r7, #24
 801e894:	46bd      	mov	sp, r7
 801e896:	bdb0      	pop	{r4, r5, r7, pc}
 801e898:	08024b4c 	.word	0x08024b4c
 801e89c:	08024c9c 	.word	0x08024c9c
 801e8a0:	08024bc4 	.word	0x08024bc4

0801e8a4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801e8a4:	b580      	push	{r7, lr}
 801e8a6:	b086      	sub	sp, #24
 801e8a8:	af02      	add	r7, sp, #8
 801e8aa:	60f8      	str	r0, [r7, #12]
 801e8ac:	60b9      	str	r1, [r7, #8]
 801e8ae:	4613      	mov	r3, r2
 801e8b0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801e8b2:	79fa      	ldrb	r2, [r7, #7]
 801e8b4:	4944      	ldr	r1, [pc, #272]	; (801e9c8 <etharp_output_to_arp_index+0x124>)
 801e8b6:	4613      	mov	r3, r2
 801e8b8:	005b      	lsls	r3, r3, #1
 801e8ba:	4413      	add	r3, r2
 801e8bc:	00db      	lsls	r3, r3, #3
 801e8be:	440b      	add	r3, r1
 801e8c0:	3314      	adds	r3, #20
 801e8c2:	781b      	ldrb	r3, [r3, #0]
 801e8c4:	2b01      	cmp	r3, #1
 801e8c6:	d806      	bhi.n	801e8d6 <etharp_output_to_arp_index+0x32>
 801e8c8:	4b40      	ldr	r3, [pc, #256]	; (801e9cc <etharp_output_to_arp_index+0x128>)
 801e8ca:	f240 22ef 	movw	r2, #751	; 0x2ef
 801e8ce:	4940      	ldr	r1, [pc, #256]	; (801e9d0 <etharp_output_to_arp_index+0x12c>)
 801e8d0:	4840      	ldr	r0, [pc, #256]	; (801e9d4 <etharp_output_to_arp_index+0x130>)
 801e8d2:	f002 fe25 	bl	8021520 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801e8d6:	79fa      	ldrb	r2, [r7, #7]
 801e8d8:	493b      	ldr	r1, [pc, #236]	; (801e9c8 <etharp_output_to_arp_index+0x124>)
 801e8da:	4613      	mov	r3, r2
 801e8dc:	005b      	lsls	r3, r3, #1
 801e8de:	4413      	add	r3, r2
 801e8e0:	00db      	lsls	r3, r3, #3
 801e8e2:	440b      	add	r3, r1
 801e8e4:	3314      	adds	r3, #20
 801e8e6:	781b      	ldrb	r3, [r3, #0]
 801e8e8:	2b02      	cmp	r3, #2
 801e8ea:	d153      	bne.n	801e994 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801e8ec:	79fa      	ldrb	r2, [r7, #7]
 801e8ee:	4936      	ldr	r1, [pc, #216]	; (801e9c8 <etharp_output_to_arp_index+0x124>)
 801e8f0:	4613      	mov	r3, r2
 801e8f2:	005b      	lsls	r3, r3, #1
 801e8f4:	4413      	add	r3, r2
 801e8f6:	00db      	lsls	r3, r3, #3
 801e8f8:	440b      	add	r3, r1
 801e8fa:	3312      	adds	r3, #18
 801e8fc:	881b      	ldrh	r3, [r3, #0]
 801e8fe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801e902:	d919      	bls.n	801e938 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801e904:	79fa      	ldrb	r2, [r7, #7]
 801e906:	4613      	mov	r3, r2
 801e908:	005b      	lsls	r3, r3, #1
 801e90a:	4413      	add	r3, r2
 801e90c:	00db      	lsls	r3, r3, #3
 801e90e:	4a2e      	ldr	r2, [pc, #184]	; (801e9c8 <etharp_output_to_arp_index+0x124>)
 801e910:	4413      	add	r3, r2
 801e912:	3304      	adds	r3, #4
 801e914:	4619      	mov	r1, r3
 801e916:	68f8      	ldr	r0, [r7, #12]
 801e918:	f000 fb4c 	bl	801efb4 <etharp_request>
 801e91c:	4603      	mov	r3, r0
 801e91e:	2b00      	cmp	r3, #0
 801e920:	d138      	bne.n	801e994 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801e922:	79fa      	ldrb	r2, [r7, #7]
 801e924:	4928      	ldr	r1, [pc, #160]	; (801e9c8 <etharp_output_to_arp_index+0x124>)
 801e926:	4613      	mov	r3, r2
 801e928:	005b      	lsls	r3, r3, #1
 801e92a:	4413      	add	r3, r2
 801e92c:	00db      	lsls	r3, r3, #3
 801e92e:	440b      	add	r3, r1
 801e930:	3314      	adds	r3, #20
 801e932:	2203      	movs	r2, #3
 801e934:	701a      	strb	r2, [r3, #0]
 801e936:	e02d      	b.n	801e994 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801e938:	79fa      	ldrb	r2, [r7, #7]
 801e93a:	4923      	ldr	r1, [pc, #140]	; (801e9c8 <etharp_output_to_arp_index+0x124>)
 801e93c:	4613      	mov	r3, r2
 801e93e:	005b      	lsls	r3, r3, #1
 801e940:	4413      	add	r3, r2
 801e942:	00db      	lsls	r3, r3, #3
 801e944:	440b      	add	r3, r1
 801e946:	3312      	adds	r3, #18
 801e948:	881b      	ldrh	r3, [r3, #0]
 801e94a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801e94e:	d321      	bcc.n	801e994 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801e950:	79fa      	ldrb	r2, [r7, #7]
 801e952:	4613      	mov	r3, r2
 801e954:	005b      	lsls	r3, r3, #1
 801e956:	4413      	add	r3, r2
 801e958:	00db      	lsls	r3, r3, #3
 801e95a:	4a1b      	ldr	r2, [pc, #108]	; (801e9c8 <etharp_output_to_arp_index+0x124>)
 801e95c:	4413      	add	r3, r2
 801e95e:	1d19      	adds	r1, r3, #4
 801e960:	79fa      	ldrb	r2, [r7, #7]
 801e962:	4613      	mov	r3, r2
 801e964:	005b      	lsls	r3, r3, #1
 801e966:	4413      	add	r3, r2
 801e968:	00db      	lsls	r3, r3, #3
 801e96a:	3308      	adds	r3, #8
 801e96c:	4a16      	ldr	r2, [pc, #88]	; (801e9c8 <etharp_output_to_arp_index+0x124>)
 801e96e:	4413      	add	r3, r2
 801e970:	3304      	adds	r3, #4
 801e972:	461a      	mov	r2, r3
 801e974:	68f8      	ldr	r0, [r7, #12]
 801e976:	f000 fafb 	bl	801ef70 <etharp_request_dst>
 801e97a:	4603      	mov	r3, r0
 801e97c:	2b00      	cmp	r3, #0
 801e97e:	d109      	bne.n	801e994 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801e980:	79fa      	ldrb	r2, [r7, #7]
 801e982:	4911      	ldr	r1, [pc, #68]	; (801e9c8 <etharp_output_to_arp_index+0x124>)
 801e984:	4613      	mov	r3, r2
 801e986:	005b      	lsls	r3, r3, #1
 801e988:	4413      	add	r3, r2
 801e98a:	00db      	lsls	r3, r3, #3
 801e98c:	440b      	add	r3, r1
 801e98e:	3314      	adds	r3, #20
 801e990:	2203      	movs	r2, #3
 801e992:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801e994:	68fb      	ldr	r3, [r7, #12]
 801e996:	f103 012e 	add.w	r1, r3, #46	; 0x2e
 801e99a:	79fa      	ldrb	r2, [r7, #7]
 801e99c:	4613      	mov	r3, r2
 801e99e:	005b      	lsls	r3, r3, #1
 801e9a0:	4413      	add	r3, r2
 801e9a2:	00db      	lsls	r3, r3, #3
 801e9a4:	3308      	adds	r3, #8
 801e9a6:	4a08      	ldr	r2, [pc, #32]	; (801e9c8 <etharp_output_to_arp_index+0x124>)
 801e9a8:	4413      	add	r3, r2
 801e9aa:	1d1a      	adds	r2, r3, #4
 801e9ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e9b0:	9300      	str	r3, [sp, #0]
 801e9b2:	4613      	mov	r3, r2
 801e9b4:	460a      	mov	r2, r1
 801e9b6:	68b9      	ldr	r1, [r7, #8]
 801e9b8:	68f8      	ldr	r0, [r7, #12]
 801e9ba:	f001 fe51 	bl	8020660 <ethernet_output>
 801e9be:	4603      	mov	r3, r0
}
 801e9c0:	4618      	mov	r0, r3
 801e9c2:	3710      	adds	r7, #16
 801e9c4:	46bd      	mov	sp, r7
 801e9c6:	bd80      	pop	{r7, pc}
 801e9c8:	2000900c 	.word	0x2000900c
 801e9cc:	08024b4c 	.word	0x08024b4c
 801e9d0:	08024cbc 	.word	0x08024cbc
 801e9d4:	08024bc4 	.word	0x08024bc4

0801e9d8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801e9d8:	b580      	push	{r7, lr}
 801e9da:	b08a      	sub	sp, #40	; 0x28
 801e9dc:	af02      	add	r7, sp, #8
 801e9de:	60f8      	str	r0, [r7, #12]
 801e9e0:	60b9      	str	r1, [r7, #8]
 801e9e2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801e9e4:	687b      	ldr	r3, [r7, #4]
 801e9e6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801e9e8:	68fb      	ldr	r3, [r7, #12]
 801e9ea:	2b00      	cmp	r3, #0
 801e9ec:	d106      	bne.n	801e9fc <etharp_output+0x24>
 801e9ee:	4b73      	ldr	r3, [pc, #460]	; (801ebbc <etharp_output+0x1e4>)
 801e9f0:	f240 321e 	movw	r2, #798	; 0x31e
 801e9f4:	4972      	ldr	r1, [pc, #456]	; (801ebc0 <etharp_output+0x1e8>)
 801e9f6:	4873      	ldr	r0, [pc, #460]	; (801ebc4 <etharp_output+0x1ec>)
 801e9f8:	f002 fd92 	bl	8021520 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801e9fc:	68bb      	ldr	r3, [r7, #8]
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	d106      	bne.n	801ea10 <etharp_output+0x38>
 801ea02:	4b6e      	ldr	r3, [pc, #440]	; (801ebbc <etharp_output+0x1e4>)
 801ea04:	f240 321f 	movw	r2, #799	; 0x31f
 801ea08:	496f      	ldr	r1, [pc, #444]	; (801ebc8 <etharp_output+0x1f0>)
 801ea0a:	486e      	ldr	r0, [pc, #440]	; (801ebc4 <etharp_output+0x1ec>)
 801ea0c:	f002 fd88 	bl	8021520 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801ea10:	687b      	ldr	r3, [r7, #4]
 801ea12:	2b00      	cmp	r3, #0
 801ea14:	d106      	bne.n	801ea24 <etharp_output+0x4c>
 801ea16:	4b69      	ldr	r3, [pc, #420]	; (801ebbc <etharp_output+0x1e4>)
 801ea18:	f44f 7248 	mov.w	r2, #800	; 0x320
 801ea1c:	496b      	ldr	r1, [pc, #428]	; (801ebcc <etharp_output+0x1f4>)
 801ea1e:	4869      	ldr	r0, [pc, #420]	; (801ebc4 <etharp_output+0x1ec>)
 801ea20:	f002 fd7e 	bl	8021520 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801ea24:	687b      	ldr	r3, [r7, #4]
 801ea26:	681b      	ldr	r3, [r3, #0]
 801ea28:	68f9      	ldr	r1, [r7, #12]
 801ea2a:	4618      	mov	r0, r3
 801ea2c:	f000 ff14 	bl	801f858 <ip4_addr_isbroadcast_u32>
 801ea30:	4603      	mov	r3, r0
 801ea32:	2b00      	cmp	r3, #0
 801ea34:	d002      	beq.n	801ea3c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801ea36:	4b66      	ldr	r3, [pc, #408]	; (801ebd0 <etharp_output+0x1f8>)
 801ea38:	61fb      	str	r3, [r7, #28]
 801ea3a:	e0af      	b.n	801eb9c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801ea3c:	687b      	ldr	r3, [r7, #4]
 801ea3e:	681b      	ldr	r3, [r3, #0]
 801ea40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ea44:	2be0      	cmp	r3, #224	; 0xe0
 801ea46:	d118      	bne.n	801ea7a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801ea48:	2301      	movs	r3, #1
 801ea4a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801ea4c:	2300      	movs	r3, #0
 801ea4e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801ea50:	235e      	movs	r3, #94	; 0x5e
 801ea52:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801ea54:	687b      	ldr	r3, [r7, #4]
 801ea56:	3301      	adds	r3, #1
 801ea58:	781b      	ldrb	r3, [r3, #0]
 801ea5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ea5e:	b2db      	uxtb	r3, r3
 801ea60:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801ea62:	687b      	ldr	r3, [r7, #4]
 801ea64:	3302      	adds	r3, #2
 801ea66:	781b      	ldrb	r3, [r3, #0]
 801ea68:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	3303      	adds	r3, #3
 801ea6e:	781b      	ldrb	r3, [r3, #0]
 801ea70:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801ea72:	f107 0310 	add.w	r3, r7, #16
 801ea76:	61fb      	str	r3, [r7, #28]
 801ea78:	e090      	b.n	801eb9c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ea7a:	687b      	ldr	r3, [r7, #4]
 801ea7c:	681a      	ldr	r2, [r3, #0]
 801ea7e:	68fb      	ldr	r3, [r7, #12]
 801ea80:	3304      	adds	r3, #4
 801ea82:	681b      	ldr	r3, [r3, #0]
 801ea84:	405a      	eors	r2, r3
 801ea86:	68fb      	ldr	r3, [r7, #12]
 801ea88:	3308      	adds	r3, #8
 801ea8a:	681b      	ldr	r3, [r3, #0]
 801ea8c:	4013      	ands	r3, r2
 801ea8e:	2b00      	cmp	r3, #0
 801ea90:	d012      	beq.n	801eab8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801ea92:	687b      	ldr	r3, [r7, #4]
 801ea94:	681b      	ldr	r3, [r3, #0]
 801ea96:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ea98:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801ea9c:	4293      	cmp	r3, r2
 801ea9e:	d00b      	beq.n	801eab8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801eaa0:	68fb      	ldr	r3, [r7, #12]
 801eaa2:	330c      	adds	r3, #12
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	2b00      	cmp	r3, #0
 801eaa8:	d003      	beq.n	801eab2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801eaaa:	68fb      	ldr	r3, [r7, #12]
 801eaac:	330c      	adds	r3, #12
 801eaae:	61bb      	str	r3, [r7, #24]
 801eab0:	e002      	b.n	801eab8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801eab2:	f06f 0303 	mvn.w	r3, #3
 801eab6:	e07d      	b.n	801ebb4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801eab8:	4b46      	ldr	r3, [pc, #280]	; (801ebd4 <etharp_output+0x1fc>)
 801eaba:	781b      	ldrb	r3, [r3, #0]
 801eabc:	4619      	mov	r1, r3
 801eabe:	4a46      	ldr	r2, [pc, #280]	; (801ebd8 <etharp_output+0x200>)
 801eac0:	460b      	mov	r3, r1
 801eac2:	005b      	lsls	r3, r3, #1
 801eac4:	440b      	add	r3, r1
 801eac6:	00db      	lsls	r3, r3, #3
 801eac8:	4413      	add	r3, r2
 801eaca:	3314      	adds	r3, #20
 801eacc:	781b      	ldrb	r3, [r3, #0]
 801eace:	2b01      	cmp	r3, #1
 801ead0:	d925      	bls.n	801eb1e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ead2:	4b40      	ldr	r3, [pc, #256]	; (801ebd4 <etharp_output+0x1fc>)
 801ead4:	781b      	ldrb	r3, [r3, #0]
 801ead6:	4619      	mov	r1, r3
 801ead8:	4a3f      	ldr	r2, [pc, #252]	; (801ebd8 <etharp_output+0x200>)
 801eada:	460b      	mov	r3, r1
 801eadc:	005b      	lsls	r3, r3, #1
 801eade:	440b      	add	r3, r1
 801eae0:	00db      	lsls	r3, r3, #3
 801eae2:	4413      	add	r3, r2
 801eae4:	3308      	adds	r3, #8
 801eae6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801eae8:	68fa      	ldr	r2, [r7, #12]
 801eaea:	429a      	cmp	r2, r3
 801eaec:	d117      	bne.n	801eb1e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801eaee:	69bb      	ldr	r3, [r7, #24]
 801eaf0:	681a      	ldr	r2, [r3, #0]
 801eaf2:	4b38      	ldr	r3, [pc, #224]	; (801ebd4 <etharp_output+0x1fc>)
 801eaf4:	781b      	ldrb	r3, [r3, #0]
 801eaf6:	4618      	mov	r0, r3
 801eaf8:	4937      	ldr	r1, [pc, #220]	; (801ebd8 <etharp_output+0x200>)
 801eafa:	4603      	mov	r3, r0
 801eafc:	005b      	lsls	r3, r3, #1
 801eafe:	4403      	add	r3, r0
 801eb00:	00db      	lsls	r3, r3, #3
 801eb02:	440b      	add	r3, r1
 801eb04:	3304      	adds	r3, #4
 801eb06:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801eb08:	429a      	cmp	r2, r3
 801eb0a:	d108      	bne.n	801eb1e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801eb0c:	4b31      	ldr	r3, [pc, #196]	; (801ebd4 <etharp_output+0x1fc>)
 801eb0e:	781b      	ldrb	r3, [r3, #0]
 801eb10:	461a      	mov	r2, r3
 801eb12:	68b9      	ldr	r1, [r7, #8]
 801eb14:	68f8      	ldr	r0, [r7, #12]
 801eb16:	f7ff fec5 	bl	801e8a4 <etharp_output_to_arp_index>
 801eb1a:	4603      	mov	r3, r0
 801eb1c:	e04a      	b.n	801ebb4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801eb1e:	2300      	movs	r3, #0
 801eb20:	75fb      	strb	r3, [r7, #23]
 801eb22:	e031      	b.n	801eb88 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801eb24:	7dfa      	ldrb	r2, [r7, #23]
 801eb26:	492c      	ldr	r1, [pc, #176]	; (801ebd8 <etharp_output+0x200>)
 801eb28:	4613      	mov	r3, r2
 801eb2a:	005b      	lsls	r3, r3, #1
 801eb2c:	4413      	add	r3, r2
 801eb2e:	00db      	lsls	r3, r3, #3
 801eb30:	440b      	add	r3, r1
 801eb32:	3314      	adds	r3, #20
 801eb34:	781b      	ldrb	r3, [r3, #0]
 801eb36:	2b01      	cmp	r3, #1
 801eb38:	d923      	bls.n	801eb82 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801eb3a:	7dfa      	ldrb	r2, [r7, #23]
 801eb3c:	4926      	ldr	r1, [pc, #152]	; (801ebd8 <etharp_output+0x200>)
 801eb3e:	4613      	mov	r3, r2
 801eb40:	005b      	lsls	r3, r3, #1
 801eb42:	4413      	add	r3, r2
 801eb44:	00db      	lsls	r3, r3, #3
 801eb46:	440b      	add	r3, r1
 801eb48:	3308      	adds	r3, #8
 801eb4a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801eb4c:	68fa      	ldr	r2, [r7, #12]
 801eb4e:	429a      	cmp	r2, r3
 801eb50:	d117      	bne.n	801eb82 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801eb52:	69bb      	ldr	r3, [r7, #24]
 801eb54:	6819      	ldr	r1, [r3, #0]
 801eb56:	7dfa      	ldrb	r2, [r7, #23]
 801eb58:	481f      	ldr	r0, [pc, #124]	; (801ebd8 <etharp_output+0x200>)
 801eb5a:	4613      	mov	r3, r2
 801eb5c:	005b      	lsls	r3, r3, #1
 801eb5e:	4413      	add	r3, r2
 801eb60:	00db      	lsls	r3, r3, #3
 801eb62:	4403      	add	r3, r0
 801eb64:	3304      	adds	r3, #4
 801eb66:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801eb68:	4299      	cmp	r1, r3
 801eb6a:	d10a      	bne.n	801eb82 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801eb6c:	4a19      	ldr	r2, [pc, #100]	; (801ebd4 <etharp_output+0x1fc>)
 801eb6e:	7dfb      	ldrb	r3, [r7, #23]
 801eb70:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801eb72:	7dfb      	ldrb	r3, [r7, #23]
 801eb74:	461a      	mov	r2, r3
 801eb76:	68b9      	ldr	r1, [r7, #8]
 801eb78:	68f8      	ldr	r0, [r7, #12]
 801eb7a:	f7ff fe93 	bl	801e8a4 <etharp_output_to_arp_index>
 801eb7e:	4603      	mov	r3, r0
 801eb80:	e018      	b.n	801ebb4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801eb82:	7dfb      	ldrb	r3, [r7, #23]
 801eb84:	3301      	adds	r3, #1
 801eb86:	75fb      	strb	r3, [r7, #23]
 801eb88:	7dfb      	ldrb	r3, [r7, #23]
 801eb8a:	2b09      	cmp	r3, #9
 801eb8c:	d9ca      	bls.n	801eb24 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801eb8e:	68ba      	ldr	r2, [r7, #8]
 801eb90:	69b9      	ldr	r1, [r7, #24]
 801eb92:	68f8      	ldr	r0, [r7, #12]
 801eb94:	f000 f822 	bl	801ebdc <etharp_query>
 801eb98:	4603      	mov	r3, r0
 801eb9a:	e00b      	b.n	801ebb4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801eb9c:	68fb      	ldr	r3, [r7, #12]
 801eb9e:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 801eba2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801eba6:	9300      	str	r3, [sp, #0]
 801eba8:	69fb      	ldr	r3, [r7, #28]
 801ebaa:	68b9      	ldr	r1, [r7, #8]
 801ebac:	68f8      	ldr	r0, [r7, #12]
 801ebae:	f001 fd57 	bl	8020660 <ethernet_output>
 801ebb2:	4603      	mov	r3, r0
}
 801ebb4:	4618      	mov	r0, r3
 801ebb6:	3720      	adds	r7, #32
 801ebb8:	46bd      	mov	sp, r7
 801ebba:	bd80      	pop	{r7, pc}
 801ebbc:	08024b4c 	.word	0x08024b4c
 801ebc0:	08024c9c 	.word	0x08024c9c
 801ebc4:	08024bc4 	.word	0x08024bc4
 801ebc8:	08024cec 	.word	0x08024cec
 801ebcc:	08024c8c 	.word	0x08024c8c
 801ebd0:	080253a0 	.word	0x080253a0
 801ebd4:	200090fc 	.word	0x200090fc
 801ebd8:	2000900c 	.word	0x2000900c

0801ebdc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801ebdc:	b580      	push	{r7, lr}
 801ebde:	b08c      	sub	sp, #48	; 0x30
 801ebe0:	af02      	add	r7, sp, #8
 801ebe2:	60f8      	str	r0, [r7, #12]
 801ebe4:	60b9      	str	r1, [r7, #8]
 801ebe6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801ebe8:	68fb      	ldr	r3, [r7, #12]
 801ebea:	332e      	adds	r3, #46	; 0x2e
 801ebec:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801ebee:	23ff      	movs	r3, #255	; 0xff
 801ebf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801ebf4:	2300      	movs	r3, #0
 801ebf6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ebf8:	68bb      	ldr	r3, [r7, #8]
 801ebfa:	681b      	ldr	r3, [r3, #0]
 801ebfc:	68f9      	ldr	r1, [r7, #12]
 801ebfe:	4618      	mov	r0, r3
 801ec00:	f000 fe2a 	bl	801f858 <ip4_addr_isbroadcast_u32>
 801ec04:	4603      	mov	r3, r0
 801ec06:	2b00      	cmp	r3, #0
 801ec08:	d10c      	bne.n	801ec24 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ec0a:	68bb      	ldr	r3, [r7, #8]
 801ec0c:	681b      	ldr	r3, [r3, #0]
 801ec0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ec12:	2be0      	cmp	r3, #224	; 0xe0
 801ec14:	d006      	beq.n	801ec24 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ec16:	68bb      	ldr	r3, [r7, #8]
 801ec18:	2b00      	cmp	r3, #0
 801ec1a:	d003      	beq.n	801ec24 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801ec1c:	68bb      	ldr	r3, [r7, #8]
 801ec1e:	681b      	ldr	r3, [r3, #0]
 801ec20:	2b00      	cmp	r3, #0
 801ec22:	d102      	bne.n	801ec2a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ec24:	f06f 030f 	mvn.w	r3, #15
 801ec28:	e102      	b.n	801ee30 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801ec2a:	68fa      	ldr	r2, [r7, #12]
 801ec2c:	2101      	movs	r1, #1
 801ec2e:	68b8      	ldr	r0, [r7, #8]
 801ec30:	f7ff fb5c 	bl	801e2ec <etharp_find_entry>
 801ec34:	4603      	mov	r3, r0
 801ec36:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801ec38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ec3c:	2b00      	cmp	r3, #0
 801ec3e:	da02      	bge.n	801ec46 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801ec40:	8a7b      	ldrh	r3, [r7, #18]
 801ec42:	b25b      	sxtb	r3, r3
 801ec44:	e0f4      	b.n	801ee30 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801ec46:	8a7b      	ldrh	r3, [r7, #18]
 801ec48:	2b7e      	cmp	r3, #126	; 0x7e
 801ec4a:	d906      	bls.n	801ec5a <etharp_query+0x7e>
 801ec4c:	4b7a      	ldr	r3, [pc, #488]	; (801ee38 <etharp_query+0x25c>)
 801ec4e:	f240 32c1 	movw	r2, #961	; 0x3c1
 801ec52:	497a      	ldr	r1, [pc, #488]	; (801ee3c <etharp_query+0x260>)
 801ec54:	487a      	ldr	r0, [pc, #488]	; (801ee40 <etharp_query+0x264>)
 801ec56:	f002 fc63 	bl	8021520 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801ec5a:	8a7b      	ldrh	r3, [r7, #18]
 801ec5c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801ec5e:	7c7a      	ldrb	r2, [r7, #17]
 801ec60:	4978      	ldr	r1, [pc, #480]	; (801ee44 <etharp_query+0x268>)
 801ec62:	4613      	mov	r3, r2
 801ec64:	005b      	lsls	r3, r3, #1
 801ec66:	4413      	add	r3, r2
 801ec68:	00db      	lsls	r3, r3, #3
 801ec6a:	440b      	add	r3, r1
 801ec6c:	3314      	adds	r3, #20
 801ec6e:	781b      	ldrb	r3, [r3, #0]
 801ec70:	2b00      	cmp	r3, #0
 801ec72:	d115      	bne.n	801eca0 <etharp_query+0xc4>
    is_new_entry = 1;
 801ec74:	2301      	movs	r3, #1
 801ec76:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ec78:	7c7a      	ldrb	r2, [r7, #17]
 801ec7a:	4972      	ldr	r1, [pc, #456]	; (801ee44 <etharp_query+0x268>)
 801ec7c:	4613      	mov	r3, r2
 801ec7e:	005b      	lsls	r3, r3, #1
 801ec80:	4413      	add	r3, r2
 801ec82:	00db      	lsls	r3, r3, #3
 801ec84:	440b      	add	r3, r1
 801ec86:	3314      	adds	r3, #20
 801ec88:	2201      	movs	r2, #1
 801ec8a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ec8c:	7c7a      	ldrb	r2, [r7, #17]
 801ec8e:	496d      	ldr	r1, [pc, #436]	; (801ee44 <etharp_query+0x268>)
 801ec90:	4613      	mov	r3, r2
 801ec92:	005b      	lsls	r3, r3, #1
 801ec94:	4413      	add	r3, r2
 801ec96:	00db      	lsls	r3, r3, #3
 801ec98:	440b      	add	r3, r1
 801ec9a:	3308      	adds	r3, #8
 801ec9c:	68fa      	ldr	r2, [r7, #12]
 801ec9e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801eca0:	7c7a      	ldrb	r2, [r7, #17]
 801eca2:	4968      	ldr	r1, [pc, #416]	; (801ee44 <etharp_query+0x268>)
 801eca4:	4613      	mov	r3, r2
 801eca6:	005b      	lsls	r3, r3, #1
 801eca8:	4413      	add	r3, r2
 801ecaa:	00db      	lsls	r3, r3, #3
 801ecac:	440b      	add	r3, r1
 801ecae:	3314      	adds	r3, #20
 801ecb0:	781b      	ldrb	r3, [r3, #0]
 801ecb2:	2b01      	cmp	r3, #1
 801ecb4:	d011      	beq.n	801ecda <etharp_query+0xfe>
 801ecb6:	7c7a      	ldrb	r2, [r7, #17]
 801ecb8:	4962      	ldr	r1, [pc, #392]	; (801ee44 <etharp_query+0x268>)
 801ecba:	4613      	mov	r3, r2
 801ecbc:	005b      	lsls	r3, r3, #1
 801ecbe:	4413      	add	r3, r2
 801ecc0:	00db      	lsls	r3, r3, #3
 801ecc2:	440b      	add	r3, r1
 801ecc4:	3314      	adds	r3, #20
 801ecc6:	781b      	ldrb	r3, [r3, #0]
 801ecc8:	2b01      	cmp	r3, #1
 801ecca:	d806      	bhi.n	801ecda <etharp_query+0xfe>
 801eccc:	4b5a      	ldr	r3, [pc, #360]	; (801ee38 <etharp_query+0x25c>)
 801ecce:	f240 32cf 	movw	r2, #975	; 0x3cf
 801ecd2:	495d      	ldr	r1, [pc, #372]	; (801ee48 <etharp_query+0x26c>)
 801ecd4:	485a      	ldr	r0, [pc, #360]	; (801ee40 <etharp_query+0x264>)
 801ecd6:	f002 fc23 	bl	8021520 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801ecda:	6a3b      	ldr	r3, [r7, #32]
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d102      	bne.n	801ece6 <etharp_query+0x10a>
 801ece0:	687b      	ldr	r3, [r7, #4]
 801ece2:	2b00      	cmp	r3, #0
 801ece4:	d10c      	bne.n	801ed00 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801ece6:	68b9      	ldr	r1, [r7, #8]
 801ece8:	68f8      	ldr	r0, [r7, #12]
 801ecea:	f000 f963 	bl	801efb4 <etharp_request>
 801ecee:	4603      	mov	r3, r0
 801ecf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801ecf4:	687b      	ldr	r3, [r7, #4]
 801ecf6:	2b00      	cmp	r3, #0
 801ecf8:	d102      	bne.n	801ed00 <etharp_query+0x124>
      return result;
 801ecfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801ecfe:	e097      	b.n	801ee30 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801ed00:	687b      	ldr	r3, [r7, #4]
 801ed02:	2b00      	cmp	r3, #0
 801ed04:	d106      	bne.n	801ed14 <etharp_query+0x138>
 801ed06:	4b4c      	ldr	r3, [pc, #304]	; (801ee38 <etharp_query+0x25c>)
 801ed08:	f240 32e1 	movw	r2, #993	; 0x3e1
 801ed0c:	494f      	ldr	r1, [pc, #316]	; (801ee4c <etharp_query+0x270>)
 801ed0e:	484c      	ldr	r0, [pc, #304]	; (801ee40 <etharp_query+0x264>)
 801ed10:	f002 fc06 	bl	8021520 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801ed14:	7c7a      	ldrb	r2, [r7, #17]
 801ed16:	494b      	ldr	r1, [pc, #300]	; (801ee44 <etharp_query+0x268>)
 801ed18:	4613      	mov	r3, r2
 801ed1a:	005b      	lsls	r3, r3, #1
 801ed1c:	4413      	add	r3, r2
 801ed1e:	00db      	lsls	r3, r3, #3
 801ed20:	440b      	add	r3, r1
 801ed22:	3314      	adds	r3, #20
 801ed24:	781b      	ldrb	r3, [r3, #0]
 801ed26:	2b01      	cmp	r3, #1
 801ed28:	d918      	bls.n	801ed5c <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801ed2a:	4a49      	ldr	r2, [pc, #292]	; (801ee50 <etharp_query+0x274>)
 801ed2c:	7c7b      	ldrb	r3, [r7, #17]
 801ed2e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ed30:	7c7a      	ldrb	r2, [r7, #17]
 801ed32:	4613      	mov	r3, r2
 801ed34:	005b      	lsls	r3, r3, #1
 801ed36:	4413      	add	r3, r2
 801ed38:	00db      	lsls	r3, r3, #3
 801ed3a:	3308      	adds	r3, #8
 801ed3c:	4a41      	ldr	r2, [pc, #260]	; (801ee44 <etharp_query+0x268>)
 801ed3e:	4413      	add	r3, r2
 801ed40:	1d1a      	adds	r2, r3, #4
 801ed42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ed46:	9300      	str	r3, [sp, #0]
 801ed48:	4613      	mov	r3, r2
 801ed4a:	697a      	ldr	r2, [r7, #20]
 801ed4c:	6879      	ldr	r1, [r7, #4]
 801ed4e:	68f8      	ldr	r0, [r7, #12]
 801ed50:	f001 fc86 	bl	8020660 <ethernet_output>
 801ed54:	4603      	mov	r3, r0
 801ed56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ed5a:	e067      	b.n	801ee2c <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ed5c:	7c7a      	ldrb	r2, [r7, #17]
 801ed5e:	4939      	ldr	r1, [pc, #228]	; (801ee44 <etharp_query+0x268>)
 801ed60:	4613      	mov	r3, r2
 801ed62:	005b      	lsls	r3, r3, #1
 801ed64:	4413      	add	r3, r2
 801ed66:	00db      	lsls	r3, r3, #3
 801ed68:	440b      	add	r3, r1
 801ed6a:	3314      	adds	r3, #20
 801ed6c:	781b      	ldrb	r3, [r3, #0]
 801ed6e:	2b01      	cmp	r3, #1
 801ed70:	d15c      	bne.n	801ee2c <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801ed72:	2300      	movs	r3, #0
 801ed74:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801ed76:	687b      	ldr	r3, [r7, #4]
 801ed78:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ed7a:	e01c      	b.n	801edb6 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801ed7c:	69fb      	ldr	r3, [r7, #28]
 801ed7e:	895a      	ldrh	r2, [r3, #10]
 801ed80:	69fb      	ldr	r3, [r7, #28]
 801ed82:	891b      	ldrh	r3, [r3, #8]
 801ed84:	429a      	cmp	r2, r3
 801ed86:	d10a      	bne.n	801ed9e <etharp_query+0x1c2>
 801ed88:	69fb      	ldr	r3, [r7, #28]
 801ed8a:	681b      	ldr	r3, [r3, #0]
 801ed8c:	2b00      	cmp	r3, #0
 801ed8e:	d006      	beq.n	801ed9e <etharp_query+0x1c2>
 801ed90:	4b29      	ldr	r3, [pc, #164]	; (801ee38 <etharp_query+0x25c>)
 801ed92:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801ed96:	492f      	ldr	r1, [pc, #188]	; (801ee54 <etharp_query+0x278>)
 801ed98:	4829      	ldr	r0, [pc, #164]	; (801ee40 <etharp_query+0x264>)
 801ed9a:	f002 fbc1 	bl	8021520 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801ed9e:	69fb      	ldr	r3, [r7, #28]
 801eda0:	7b1b      	ldrb	r3, [r3, #12]
 801eda2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801eda6:	2b00      	cmp	r3, #0
 801eda8:	d002      	beq.n	801edb0 <etharp_query+0x1d4>
        copy_needed = 1;
 801edaa:	2301      	movs	r3, #1
 801edac:	61bb      	str	r3, [r7, #24]
        break;
 801edae:	e005      	b.n	801edbc <etharp_query+0x1e0>
      }
      p = p->next;
 801edb0:	69fb      	ldr	r3, [r7, #28]
 801edb2:	681b      	ldr	r3, [r3, #0]
 801edb4:	61fb      	str	r3, [r7, #28]
    while (p) {
 801edb6:	69fb      	ldr	r3, [r7, #28]
 801edb8:	2b00      	cmp	r3, #0
 801edba:	d1df      	bne.n	801ed7c <etharp_query+0x1a0>
    }
    if (copy_needed) {
 801edbc:	69bb      	ldr	r3, [r7, #24]
 801edbe:	2b00      	cmp	r3, #0
 801edc0:	d007      	beq.n	801edd2 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801edc2:	687a      	ldr	r2, [r7, #4]
 801edc4:	f44f 7120 	mov.w	r1, #640	; 0x280
 801edc8:	200e      	movs	r0, #14
 801edca:	f7f7 fb4f 	bl	801646c <pbuf_clone>
 801edce:	61f8      	str	r0, [r7, #28]
 801edd0:	e004      	b.n	801eddc <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801edd2:	687b      	ldr	r3, [r7, #4]
 801edd4:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801edd6:	69f8      	ldr	r0, [r7, #28]
 801edd8:	f7f7 f976 	bl	80160c8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801eddc:	69fb      	ldr	r3, [r7, #28]
 801edde:	2b00      	cmp	r3, #0
 801ede0:	d021      	beq.n	801ee26 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801ede2:	7c7a      	ldrb	r2, [r7, #17]
 801ede4:	4917      	ldr	r1, [pc, #92]	; (801ee44 <etharp_query+0x268>)
 801ede6:	4613      	mov	r3, r2
 801ede8:	005b      	lsls	r3, r3, #1
 801edea:	4413      	add	r3, r2
 801edec:	00db      	lsls	r3, r3, #3
 801edee:	440b      	add	r3, r1
 801edf0:	681b      	ldr	r3, [r3, #0]
 801edf2:	2b00      	cmp	r3, #0
 801edf4:	d00a      	beq.n	801ee0c <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801edf6:	7c7a      	ldrb	r2, [r7, #17]
 801edf8:	4912      	ldr	r1, [pc, #72]	; (801ee44 <etharp_query+0x268>)
 801edfa:	4613      	mov	r3, r2
 801edfc:	005b      	lsls	r3, r3, #1
 801edfe:	4413      	add	r3, r2
 801ee00:	00db      	lsls	r3, r3, #3
 801ee02:	440b      	add	r3, r1
 801ee04:	681b      	ldr	r3, [r3, #0]
 801ee06:	4618      	mov	r0, r3
 801ee08:	f7f7 f8b8 	bl	8015f7c <pbuf_free>
      }
      arp_table[i].q = p;
 801ee0c:	7c7a      	ldrb	r2, [r7, #17]
 801ee0e:	490d      	ldr	r1, [pc, #52]	; (801ee44 <etharp_query+0x268>)
 801ee10:	4613      	mov	r3, r2
 801ee12:	005b      	lsls	r3, r3, #1
 801ee14:	4413      	add	r3, r2
 801ee16:	00db      	lsls	r3, r3, #3
 801ee18:	440b      	add	r3, r1
 801ee1a:	69fa      	ldr	r2, [r7, #28]
 801ee1c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801ee1e:	2300      	movs	r3, #0
 801ee20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ee24:	e002      	b.n	801ee2c <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801ee26:	23ff      	movs	r3, #255	; 0xff
 801ee28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801ee2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801ee30:	4618      	mov	r0, r3
 801ee32:	3728      	adds	r7, #40	; 0x28
 801ee34:	46bd      	mov	sp, r7
 801ee36:	bd80      	pop	{r7, pc}
 801ee38:	08024b4c 	.word	0x08024b4c
 801ee3c:	08024cf8 	.word	0x08024cf8
 801ee40:	08024bc4 	.word	0x08024bc4
 801ee44:	2000900c 	.word	0x2000900c
 801ee48:	08024d08 	.word	0x08024d08
 801ee4c:	08024cec 	.word	0x08024cec
 801ee50:	200090fc 	.word	0x200090fc
 801ee54:	08024d30 	.word	0x08024d30

0801ee58 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ee58:	b580      	push	{r7, lr}
 801ee5a:	b08a      	sub	sp, #40	; 0x28
 801ee5c:	af02      	add	r7, sp, #8
 801ee5e:	60f8      	str	r0, [r7, #12]
 801ee60:	60b9      	str	r1, [r7, #8]
 801ee62:	607a      	str	r2, [r7, #4]
 801ee64:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801ee66:	2300      	movs	r3, #0
 801ee68:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ee6a:	68fb      	ldr	r3, [r7, #12]
 801ee6c:	2b00      	cmp	r3, #0
 801ee6e:	d106      	bne.n	801ee7e <etharp_raw+0x26>
 801ee70:	4b3a      	ldr	r3, [pc, #232]	; (801ef5c <etharp_raw+0x104>)
 801ee72:	f240 4257 	movw	r2, #1111	; 0x457
 801ee76:	493a      	ldr	r1, [pc, #232]	; (801ef60 <etharp_raw+0x108>)
 801ee78:	483a      	ldr	r0, [pc, #232]	; (801ef64 <etharp_raw+0x10c>)
 801ee7a:	f002 fb51 	bl	8021520 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ee7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ee82:	211c      	movs	r1, #28
 801ee84:	200e      	movs	r0, #14
 801ee86:	f7f6 fd99 	bl	80159bc <pbuf_alloc>
 801ee8a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801ee8c:	69bb      	ldr	r3, [r7, #24]
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	d102      	bne.n	801ee98 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801ee92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ee96:	e05d      	b.n	801ef54 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801ee98:	69bb      	ldr	r3, [r7, #24]
 801ee9a:	895b      	ldrh	r3, [r3, #10]
 801ee9c:	2b1b      	cmp	r3, #27
 801ee9e:	d806      	bhi.n	801eeae <etharp_raw+0x56>
 801eea0:	4b2e      	ldr	r3, [pc, #184]	; (801ef5c <etharp_raw+0x104>)
 801eea2:	f240 4263 	movw	r2, #1123	; 0x463
 801eea6:	4930      	ldr	r1, [pc, #192]	; (801ef68 <etharp_raw+0x110>)
 801eea8:	482e      	ldr	r0, [pc, #184]	; (801ef64 <etharp_raw+0x10c>)
 801eeaa:	f002 fb39 	bl	8021520 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801eeae:	69bb      	ldr	r3, [r7, #24]
 801eeb0:	685b      	ldr	r3, [r3, #4]
 801eeb2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801eeb4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801eeb6:	4618      	mov	r0, r3
 801eeb8:	f7f5 fc92 	bl	80147e0 <lwip_htons>
 801eebc:	4603      	mov	r3, r0
 801eebe:	461a      	mov	r2, r3
 801eec0:	697b      	ldr	r3, [r7, #20]
 801eec2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801eec4:	68fb      	ldr	r3, [r7, #12]
 801eec6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801eeca:	2b06      	cmp	r3, #6
 801eecc:	d006      	beq.n	801eedc <etharp_raw+0x84>
 801eece:	4b23      	ldr	r3, [pc, #140]	; (801ef5c <etharp_raw+0x104>)
 801eed0:	f240 426a 	movw	r2, #1130	; 0x46a
 801eed4:	4925      	ldr	r1, [pc, #148]	; (801ef6c <etharp_raw+0x114>)
 801eed6:	4823      	ldr	r0, [pc, #140]	; (801ef64 <etharp_raw+0x10c>)
 801eed8:	f002 fb22 	bl	8021520 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801eedc:	697b      	ldr	r3, [r7, #20]
 801eede:	3308      	adds	r3, #8
 801eee0:	2206      	movs	r2, #6
 801eee2:	6839      	ldr	r1, [r7, #0]
 801eee4:	4618      	mov	r0, r3
 801eee6:	f002 fa60 	bl	80213aa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801eeea:	697b      	ldr	r3, [r7, #20]
 801eeec:	3312      	adds	r3, #18
 801eeee:	2206      	movs	r2, #6
 801eef0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801eef2:	4618      	mov	r0, r3
 801eef4:	f002 fa59 	bl	80213aa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801eef8:	697b      	ldr	r3, [r7, #20]
 801eefa:	330e      	adds	r3, #14
 801eefc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801eefe:	6812      	ldr	r2, [r2, #0]
 801ef00:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801ef02:	697b      	ldr	r3, [r7, #20]
 801ef04:	3318      	adds	r3, #24
 801ef06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ef08:	6812      	ldr	r2, [r2, #0]
 801ef0a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801ef0c:	697b      	ldr	r3, [r7, #20]
 801ef0e:	2200      	movs	r2, #0
 801ef10:	701a      	strb	r2, [r3, #0]
 801ef12:	2200      	movs	r2, #0
 801ef14:	f042 0201 	orr.w	r2, r2, #1
 801ef18:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801ef1a:	697b      	ldr	r3, [r7, #20]
 801ef1c:	2200      	movs	r2, #0
 801ef1e:	f042 0208 	orr.w	r2, r2, #8
 801ef22:	709a      	strb	r2, [r3, #2]
 801ef24:	2200      	movs	r2, #0
 801ef26:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801ef28:	697b      	ldr	r3, [r7, #20]
 801ef2a:	2206      	movs	r2, #6
 801ef2c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801ef2e:	697b      	ldr	r3, [r7, #20]
 801ef30:	2204      	movs	r2, #4
 801ef32:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801ef34:	f640 0306 	movw	r3, #2054	; 0x806
 801ef38:	9300      	str	r3, [sp, #0]
 801ef3a:	687b      	ldr	r3, [r7, #4]
 801ef3c:	68ba      	ldr	r2, [r7, #8]
 801ef3e:	69b9      	ldr	r1, [r7, #24]
 801ef40:	68f8      	ldr	r0, [r7, #12]
 801ef42:	f001 fb8d 	bl	8020660 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801ef46:	69b8      	ldr	r0, [r7, #24]
 801ef48:	f7f7 f818 	bl	8015f7c <pbuf_free>
  p = NULL;
 801ef4c:	2300      	movs	r3, #0
 801ef4e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801ef50:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ef54:	4618      	mov	r0, r3
 801ef56:	3720      	adds	r7, #32
 801ef58:	46bd      	mov	sp, r7
 801ef5a:	bd80      	pop	{r7, pc}
 801ef5c:	08024b4c 	.word	0x08024b4c
 801ef60:	08024c9c 	.word	0x08024c9c
 801ef64:	08024bc4 	.word	0x08024bc4
 801ef68:	08024d4c 	.word	0x08024d4c
 801ef6c:	08024d80 	.word	0x08024d80

0801ef70 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801ef70:	b580      	push	{r7, lr}
 801ef72:	b088      	sub	sp, #32
 801ef74:	af04      	add	r7, sp, #16
 801ef76:	60f8      	str	r0, [r7, #12]
 801ef78:	60b9      	str	r1, [r7, #8]
 801ef7a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ef7c:	68fb      	ldr	r3, [r7, #12]
 801ef7e:	f103 012e 	add.w	r1, r3, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ef82:	68fb      	ldr	r3, [r7, #12]
 801ef84:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 801ef88:	68fb      	ldr	r3, [r7, #12]
 801ef8a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ef8c:	2201      	movs	r2, #1
 801ef8e:	9203      	str	r2, [sp, #12]
 801ef90:	68ba      	ldr	r2, [r7, #8]
 801ef92:	9202      	str	r2, [sp, #8]
 801ef94:	4a06      	ldr	r2, [pc, #24]	; (801efb0 <etharp_request_dst+0x40>)
 801ef96:	9201      	str	r2, [sp, #4]
 801ef98:	9300      	str	r3, [sp, #0]
 801ef9a:	4603      	mov	r3, r0
 801ef9c:	687a      	ldr	r2, [r7, #4]
 801ef9e:	68f8      	ldr	r0, [r7, #12]
 801efa0:	f7ff ff5a 	bl	801ee58 <etharp_raw>
 801efa4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801efa6:	4618      	mov	r0, r3
 801efa8:	3710      	adds	r7, #16
 801efaa:	46bd      	mov	sp, r7
 801efac:	bd80      	pop	{r7, pc}
 801efae:	bf00      	nop
 801efb0:	080253a8 	.word	0x080253a8

0801efb4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801efb4:	b580      	push	{r7, lr}
 801efb6:	b082      	sub	sp, #8
 801efb8:	af00      	add	r7, sp, #0
 801efba:	6078      	str	r0, [r7, #4]
 801efbc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801efbe:	4a05      	ldr	r2, [pc, #20]	; (801efd4 <etharp_request+0x20>)
 801efc0:	6839      	ldr	r1, [r7, #0]
 801efc2:	6878      	ldr	r0, [r7, #4]
 801efc4:	f7ff ffd4 	bl	801ef70 <etharp_request_dst>
 801efc8:	4603      	mov	r3, r0
}
 801efca:	4618      	mov	r0, r3
 801efcc:	3708      	adds	r7, #8
 801efce:	46bd      	mov	sp, r7
 801efd0:	bd80      	pop	{r7, pc}
 801efd2:	bf00      	nop
 801efd4:	080253a0 	.word	0x080253a0

0801efd8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801efd8:	b580      	push	{r7, lr}
 801efda:	b08e      	sub	sp, #56	; 0x38
 801efdc:	af04      	add	r7, sp, #16
 801efde:	6078      	str	r0, [r7, #4]
 801efe0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801efe2:	4b79      	ldr	r3, [pc, #484]	; (801f1c8 <icmp_input+0x1f0>)
 801efe4:	689b      	ldr	r3, [r3, #8]
 801efe6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801efe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efea:	781b      	ldrb	r3, [r3, #0]
 801efec:	f003 030f 	and.w	r3, r3, #15
 801eff0:	b2db      	uxtb	r3, r3
 801eff2:	009b      	lsls	r3, r3, #2
 801eff4:	b2db      	uxtb	r3, r3
 801eff6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801eff8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801effa:	2b13      	cmp	r3, #19
 801effc:	f240 80cd 	bls.w	801f19a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801f000:	687b      	ldr	r3, [r7, #4]
 801f002:	895b      	ldrh	r3, [r3, #10]
 801f004:	2b03      	cmp	r3, #3
 801f006:	f240 80ca 	bls.w	801f19e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801f00a:	687b      	ldr	r3, [r7, #4]
 801f00c:	685b      	ldr	r3, [r3, #4]
 801f00e:	781b      	ldrb	r3, [r3, #0]
 801f010:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801f014:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801f018:	2b00      	cmp	r3, #0
 801f01a:	f000 80b7 	beq.w	801f18c <icmp_input+0x1b4>
 801f01e:	2b08      	cmp	r3, #8
 801f020:	f040 80b7 	bne.w	801f192 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801f024:	4b69      	ldr	r3, [pc, #420]	; (801f1cc <icmp_input+0x1f4>)
 801f026:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f028:	4b67      	ldr	r3, [pc, #412]	; (801f1c8 <icmp_input+0x1f0>)
 801f02a:	695b      	ldr	r3, [r3, #20]
 801f02c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f030:	2be0      	cmp	r3, #224	; 0xe0
 801f032:	f000 80bb 	beq.w	801f1ac <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801f036:	4b64      	ldr	r3, [pc, #400]	; (801f1c8 <icmp_input+0x1f0>)
 801f038:	695a      	ldr	r2, [r3, #20]
 801f03a:	4b63      	ldr	r3, [pc, #396]	; (801f1c8 <icmp_input+0x1f0>)
 801f03c:	681b      	ldr	r3, [r3, #0]
 801f03e:	4619      	mov	r1, r3
 801f040:	4610      	mov	r0, r2
 801f042:	f000 fc09 	bl	801f858 <ip4_addr_isbroadcast_u32>
 801f046:	4603      	mov	r3, r0
 801f048:	2b00      	cmp	r3, #0
 801f04a:	f040 80b1 	bne.w	801f1b0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801f04e:	687b      	ldr	r3, [r7, #4]
 801f050:	891b      	ldrh	r3, [r3, #8]
 801f052:	2b07      	cmp	r3, #7
 801f054:	f240 80a5 	bls.w	801f1a2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801f058:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f05a:	330e      	adds	r3, #14
 801f05c:	4619      	mov	r1, r3
 801f05e:	6878      	ldr	r0, [r7, #4]
 801f060:	f7f6 fef6 	bl	8015e50 <pbuf_add_header>
 801f064:	4603      	mov	r3, r0
 801f066:	2b00      	cmp	r3, #0
 801f068:	d04b      	beq.n	801f102 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801f06a:	687b      	ldr	r3, [r7, #4]
 801f06c:	891a      	ldrh	r2, [r3, #8]
 801f06e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f070:	4413      	add	r3, r2
 801f072:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801f074:	687b      	ldr	r3, [r7, #4]
 801f076:	891b      	ldrh	r3, [r3, #8]
 801f078:	8b7a      	ldrh	r2, [r7, #26]
 801f07a:	429a      	cmp	r2, r3
 801f07c:	f0c0 809a 	bcc.w	801f1b4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801f080:	8b7b      	ldrh	r3, [r7, #26]
 801f082:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f086:	4619      	mov	r1, r3
 801f088:	200e      	movs	r0, #14
 801f08a:	f7f6 fc97 	bl	80159bc <pbuf_alloc>
 801f08e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801f090:	697b      	ldr	r3, [r7, #20]
 801f092:	2b00      	cmp	r3, #0
 801f094:	f000 8090 	beq.w	801f1b8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801f098:	697b      	ldr	r3, [r7, #20]
 801f09a:	895b      	ldrh	r3, [r3, #10]
 801f09c:	461a      	mov	r2, r3
 801f09e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f0a0:	3308      	adds	r3, #8
 801f0a2:	429a      	cmp	r2, r3
 801f0a4:	d203      	bcs.n	801f0ae <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801f0a6:	6978      	ldr	r0, [r7, #20]
 801f0a8:	f7f6 ff68 	bl	8015f7c <pbuf_free>
          goto icmperr;
 801f0ac:	e085      	b.n	801f1ba <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801f0ae:	697b      	ldr	r3, [r7, #20]
 801f0b0:	685b      	ldr	r3, [r3, #4]
 801f0b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801f0b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f0b6:	4618      	mov	r0, r3
 801f0b8:	f002 f977 	bl	80213aa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801f0bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f0be:	4619      	mov	r1, r3
 801f0c0:	6978      	ldr	r0, [r7, #20]
 801f0c2:	f7f6 fed5 	bl	8015e70 <pbuf_remove_header>
 801f0c6:	4603      	mov	r3, r0
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	d009      	beq.n	801f0e0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801f0cc:	4b40      	ldr	r3, [pc, #256]	; (801f1d0 <icmp_input+0x1f8>)
 801f0ce:	22b6      	movs	r2, #182	; 0xb6
 801f0d0:	4940      	ldr	r1, [pc, #256]	; (801f1d4 <icmp_input+0x1fc>)
 801f0d2:	4841      	ldr	r0, [pc, #260]	; (801f1d8 <icmp_input+0x200>)
 801f0d4:	f002 fa24 	bl	8021520 <iprintf>
          pbuf_free(r);
 801f0d8:	6978      	ldr	r0, [r7, #20]
 801f0da:	f7f6 ff4f 	bl	8015f7c <pbuf_free>
          goto icmperr;
 801f0de:	e06c      	b.n	801f1ba <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801f0e0:	6879      	ldr	r1, [r7, #4]
 801f0e2:	6978      	ldr	r0, [r7, #20]
 801f0e4:	f7f7 f87e 	bl	80161e4 <pbuf_copy>
 801f0e8:	4603      	mov	r3, r0
 801f0ea:	2b00      	cmp	r3, #0
 801f0ec:	d003      	beq.n	801f0f6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801f0ee:	6978      	ldr	r0, [r7, #20]
 801f0f0:	f7f6 ff44 	bl	8015f7c <pbuf_free>
          goto icmperr;
 801f0f4:	e061      	b.n	801f1ba <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801f0f6:	6878      	ldr	r0, [r7, #4]
 801f0f8:	f7f6 ff40 	bl	8015f7c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801f0fc:	697b      	ldr	r3, [r7, #20]
 801f0fe:	607b      	str	r3, [r7, #4]
 801f100:	e00f      	b.n	801f122 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801f102:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f104:	330e      	adds	r3, #14
 801f106:	4619      	mov	r1, r3
 801f108:	6878      	ldr	r0, [r7, #4]
 801f10a:	f7f6 feb1 	bl	8015e70 <pbuf_remove_header>
 801f10e:	4603      	mov	r3, r0
 801f110:	2b00      	cmp	r3, #0
 801f112:	d006      	beq.n	801f122 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801f114:	4b2e      	ldr	r3, [pc, #184]	; (801f1d0 <icmp_input+0x1f8>)
 801f116:	22c7      	movs	r2, #199	; 0xc7
 801f118:	4930      	ldr	r1, [pc, #192]	; (801f1dc <icmp_input+0x204>)
 801f11a:	482f      	ldr	r0, [pc, #188]	; (801f1d8 <icmp_input+0x200>)
 801f11c:	f002 fa00 	bl	8021520 <iprintf>
          goto icmperr;
 801f120:	e04b      	b.n	801f1ba <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801f122:	687b      	ldr	r3, [r7, #4]
 801f124:	685b      	ldr	r3, [r3, #4]
 801f126:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801f128:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f12a:	4619      	mov	r1, r3
 801f12c:	6878      	ldr	r0, [r7, #4]
 801f12e:	f7f6 fe8f 	bl	8015e50 <pbuf_add_header>
 801f132:	4603      	mov	r3, r0
 801f134:	2b00      	cmp	r3, #0
 801f136:	d12b      	bne.n	801f190 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801f138:	687b      	ldr	r3, [r7, #4]
 801f13a:	685b      	ldr	r3, [r3, #4]
 801f13c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801f13e:	69fb      	ldr	r3, [r7, #28]
 801f140:	681a      	ldr	r2, [r3, #0]
 801f142:	68fb      	ldr	r3, [r7, #12]
 801f144:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801f146:	4b20      	ldr	r3, [pc, #128]	; (801f1c8 <icmp_input+0x1f0>)
 801f148:	691a      	ldr	r2, [r3, #16]
 801f14a:	68fb      	ldr	r3, [r7, #12]
 801f14c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801f14e:	693b      	ldr	r3, [r7, #16]
 801f150:	2200      	movs	r2, #0
 801f152:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801f154:	693b      	ldr	r3, [r7, #16]
 801f156:	2200      	movs	r2, #0
 801f158:	709a      	strb	r2, [r3, #2]
 801f15a:	2200      	movs	r2, #0
 801f15c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801f15e:	68fb      	ldr	r3, [r7, #12]
 801f160:	22ff      	movs	r2, #255	; 0xff
 801f162:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801f164:	68fb      	ldr	r3, [r7, #12]
 801f166:	2200      	movs	r2, #0
 801f168:	729a      	strb	r2, [r3, #10]
 801f16a:	2200      	movs	r2, #0
 801f16c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801f16e:	683b      	ldr	r3, [r7, #0]
 801f170:	9302      	str	r3, [sp, #8]
 801f172:	2301      	movs	r3, #1
 801f174:	9301      	str	r3, [sp, #4]
 801f176:	2300      	movs	r3, #0
 801f178:	9300      	str	r3, [sp, #0]
 801f17a:	23ff      	movs	r3, #255	; 0xff
 801f17c:	2200      	movs	r2, #0
 801f17e:	69f9      	ldr	r1, [r7, #28]
 801f180:	6878      	ldr	r0, [r7, #4]
 801f182:	f000 fa91 	bl	801f6a8 <ip4_output_if>
 801f186:	4603      	mov	r3, r0
 801f188:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801f18a:	e001      	b.n	801f190 <icmp_input+0x1b8>
      break;
 801f18c:	bf00      	nop
 801f18e:	e000      	b.n	801f192 <icmp_input+0x1ba>
      break;
 801f190:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801f192:	6878      	ldr	r0, [r7, #4]
 801f194:	f7f6 fef2 	bl	8015f7c <pbuf_free>
  return;
 801f198:	e013      	b.n	801f1c2 <icmp_input+0x1ea>
    goto lenerr;
 801f19a:	bf00      	nop
 801f19c:	e002      	b.n	801f1a4 <icmp_input+0x1cc>
    goto lenerr;
 801f19e:	bf00      	nop
 801f1a0:	e000      	b.n	801f1a4 <icmp_input+0x1cc>
        goto lenerr;
 801f1a2:	bf00      	nop
lenerr:
  pbuf_free(p);
 801f1a4:	6878      	ldr	r0, [r7, #4]
 801f1a6:	f7f6 fee9 	bl	8015f7c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801f1aa:	e00a      	b.n	801f1c2 <icmp_input+0x1ea>
        goto icmperr;
 801f1ac:	bf00      	nop
 801f1ae:	e004      	b.n	801f1ba <icmp_input+0x1e2>
        goto icmperr;
 801f1b0:	bf00      	nop
 801f1b2:	e002      	b.n	801f1ba <icmp_input+0x1e2>
          goto icmperr;
 801f1b4:	bf00      	nop
 801f1b6:	e000      	b.n	801f1ba <icmp_input+0x1e2>
          goto icmperr;
 801f1b8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801f1ba:	6878      	ldr	r0, [r7, #4]
 801f1bc:	f7f6 fede 	bl	8015f7c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801f1c0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801f1c2:	3728      	adds	r7, #40	; 0x28
 801f1c4:	46bd      	mov	sp, r7
 801f1c6:	bd80      	pop	{r7, pc}
 801f1c8:	2000cc00 	.word	0x2000cc00
 801f1cc:	2000cc14 	.word	0x2000cc14
 801f1d0:	08024dc4 	.word	0x08024dc4
 801f1d4:	08024dfc 	.word	0x08024dfc
 801f1d8:	08024e34 	.word	0x08024e34
 801f1dc:	08024e5c 	.word	0x08024e5c

0801f1e0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801f1e0:	b580      	push	{r7, lr}
 801f1e2:	b082      	sub	sp, #8
 801f1e4:	af00      	add	r7, sp, #0
 801f1e6:	6078      	str	r0, [r7, #4]
 801f1e8:	460b      	mov	r3, r1
 801f1ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801f1ec:	78fb      	ldrb	r3, [r7, #3]
 801f1ee:	461a      	mov	r2, r3
 801f1f0:	2103      	movs	r1, #3
 801f1f2:	6878      	ldr	r0, [r7, #4]
 801f1f4:	f000 f814 	bl	801f220 <icmp_send_response>
}
 801f1f8:	bf00      	nop
 801f1fa:	3708      	adds	r7, #8
 801f1fc:	46bd      	mov	sp, r7
 801f1fe:	bd80      	pop	{r7, pc}

0801f200 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801f200:	b580      	push	{r7, lr}
 801f202:	b082      	sub	sp, #8
 801f204:	af00      	add	r7, sp, #0
 801f206:	6078      	str	r0, [r7, #4]
 801f208:	460b      	mov	r3, r1
 801f20a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801f20c:	78fb      	ldrb	r3, [r7, #3]
 801f20e:	461a      	mov	r2, r3
 801f210:	210b      	movs	r1, #11
 801f212:	6878      	ldr	r0, [r7, #4]
 801f214:	f000 f804 	bl	801f220 <icmp_send_response>
}
 801f218:	bf00      	nop
 801f21a:	3708      	adds	r7, #8
 801f21c:	46bd      	mov	sp, r7
 801f21e:	bd80      	pop	{r7, pc}

0801f220 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801f220:	b580      	push	{r7, lr}
 801f222:	b08c      	sub	sp, #48	; 0x30
 801f224:	af04      	add	r7, sp, #16
 801f226:	6078      	str	r0, [r7, #4]
 801f228:	460b      	mov	r3, r1
 801f22a:	70fb      	strb	r3, [r7, #3]
 801f22c:	4613      	mov	r3, r2
 801f22e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801f230:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f234:	2124      	movs	r1, #36	; 0x24
 801f236:	2022      	movs	r0, #34	; 0x22
 801f238:	f7f6 fbc0 	bl	80159bc <pbuf_alloc>
 801f23c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801f23e:	69fb      	ldr	r3, [r7, #28]
 801f240:	2b00      	cmp	r3, #0
 801f242:	d04c      	beq.n	801f2de <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801f244:	69fb      	ldr	r3, [r7, #28]
 801f246:	895b      	ldrh	r3, [r3, #10]
 801f248:	2b23      	cmp	r3, #35	; 0x23
 801f24a:	d806      	bhi.n	801f25a <icmp_send_response+0x3a>
 801f24c:	4b26      	ldr	r3, [pc, #152]	; (801f2e8 <icmp_send_response+0xc8>)
 801f24e:	f240 1269 	movw	r2, #361	; 0x169
 801f252:	4926      	ldr	r1, [pc, #152]	; (801f2ec <icmp_send_response+0xcc>)
 801f254:	4826      	ldr	r0, [pc, #152]	; (801f2f0 <icmp_send_response+0xd0>)
 801f256:	f002 f963 	bl	8021520 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801f25a:	687b      	ldr	r3, [r7, #4]
 801f25c:	685b      	ldr	r3, [r3, #4]
 801f25e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801f260:	69fb      	ldr	r3, [r7, #28]
 801f262:	685b      	ldr	r3, [r3, #4]
 801f264:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801f266:	697b      	ldr	r3, [r7, #20]
 801f268:	78fa      	ldrb	r2, [r7, #3]
 801f26a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801f26c:	697b      	ldr	r3, [r7, #20]
 801f26e:	78ba      	ldrb	r2, [r7, #2]
 801f270:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801f272:	697b      	ldr	r3, [r7, #20]
 801f274:	2200      	movs	r2, #0
 801f276:	711a      	strb	r2, [r3, #4]
 801f278:	2200      	movs	r2, #0
 801f27a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801f27c:	697b      	ldr	r3, [r7, #20]
 801f27e:	2200      	movs	r2, #0
 801f280:	719a      	strb	r2, [r3, #6]
 801f282:	2200      	movs	r2, #0
 801f284:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801f286:	69fb      	ldr	r3, [r7, #28]
 801f288:	685b      	ldr	r3, [r3, #4]
 801f28a:	f103 0008 	add.w	r0, r3, #8
 801f28e:	687b      	ldr	r3, [r7, #4]
 801f290:	685b      	ldr	r3, [r3, #4]
 801f292:	221c      	movs	r2, #28
 801f294:	4619      	mov	r1, r3
 801f296:	f002 f888 	bl	80213aa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801f29a:	69bb      	ldr	r3, [r7, #24]
 801f29c:	68db      	ldr	r3, [r3, #12]
 801f29e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801f2a0:	f107 030c 	add.w	r3, r7, #12
 801f2a4:	4618      	mov	r0, r3
 801f2a6:	f000 f825 	bl	801f2f4 <ip4_route>
 801f2aa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801f2ac:	693b      	ldr	r3, [r7, #16]
 801f2ae:	2b00      	cmp	r3, #0
 801f2b0:	d011      	beq.n	801f2d6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801f2b2:	697b      	ldr	r3, [r7, #20]
 801f2b4:	2200      	movs	r2, #0
 801f2b6:	709a      	strb	r2, [r3, #2]
 801f2b8:	2200      	movs	r2, #0
 801f2ba:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801f2bc:	f107 020c 	add.w	r2, r7, #12
 801f2c0:	693b      	ldr	r3, [r7, #16]
 801f2c2:	9302      	str	r3, [sp, #8]
 801f2c4:	2301      	movs	r3, #1
 801f2c6:	9301      	str	r3, [sp, #4]
 801f2c8:	2300      	movs	r3, #0
 801f2ca:	9300      	str	r3, [sp, #0]
 801f2cc:	23ff      	movs	r3, #255	; 0xff
 801f2ce:	2100      	movs	r1, #0
 801f2d0:	69f8      	ldr	r0, [r7, #28]
 801f2d2:	f000 f9e9 	bl	801f6a8 <ip4_output_if>
  }
  pbuf_free(q);
 801f2d6:	69f8      	ldr	r0, [r7, #28]
 801f2d8:	f7f6 fe50 	bl	8015f7c <pbuf_free>
 801f2dc:	e000      	b.n	801f2e0 <icmp_send_response+0xc0>
    return;
 801f2de:	bf00      	nop
}
 801f2e0:	3720      	adds	r7, #32
 801f2e2:	46bd      	mov	sp, r7
 801f2e4:	bd80      	pop	{r7, pc}
 801f2e6:	bf00      	nop
 801f2e8:	08024dc4 	.word	0x08024dc4
 801f2ec:	08024e90 	.word	0x08024e90
 801f2f0:	08024e34 	.word	0x08024e34

0801f2f4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801f2f4:	b480      	push	{r7}
 801f2f6:	b085      	sub	sp, #20
 801f2f8:	af00      	add	r7, sp, #0
 801f2fa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801f2fc:	4b33      	ldr	r3, [pc, #204]	; (801f3cc <ip4_route+0xd8>)
 801f2fe:	681b      	ldr	r3, [r3, #0]
 801f300:	60fb      	str	r3, [r7, #12]
 801f302:	e036      	b.n	801f372 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801f304:	68fb      	ldr	r3, [r7, #12]
 801f306:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f30a:	f003 0301 	and.w	r3, r3, #1
 801f30e:	b2db      	uxtb	r3, r3
 801f310:	2b00      	cmp	r3, #0
 801f312:	d02b      	beq.n	801f36c <ip4_route+0x78>
 801f314:	68fb      	ldr	r3, [r7, #12]
 801f316:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f31a:	089b      	lsrs	r3, r3, #2
 801f31c:	f003 0301 	and.w	r3, r3, #1
 801f320:	b2db      	uxtb	r3, r3
 801f322:	2b00      	cmp	r3, #0
 801f324:	d022      	beq.n	801f36c <ip4_route+0x78>
 801f326:	68fb      	ldr	r3, [r7, #12]
 801f328:	3304      	adds	r3, #4
 801f32a:	681b      	ldr	r3, [r3, #0]
 801f32c:	2b00      	cmp	r3, #0
 801f32e:	d01d      	beq.n	801f36c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801f330:	687b      	ldr	r3, [r7, #4]
 801f332:	681a      	ldr	r2, [r3, #0]
 801f334:	68fb      	ldr	r3, [r7, #12]
 801f336:	3304      	adds	r3, #4
 801f338:	681b      	ldr	r3, [r3, #0]
 801f33a:	405a      	eors	r2, r3
 801f33c:	68fb      	ldr	r3, [r7, #12]
 801f33e:	3308      	adds	r3, #8
 801f340:	681b      	ldr	r3, [r3, #0]
 801f342:	4013      	ands	r3, r2
 801f344:	2b00      	cmp	r3, #0
 801f346:	d101      	bne.n	801f34c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801f348:	68fb      	ldr	r3, [r7, #12]
 801f34a:	e038      	b.n	801f3be <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801f34c:	68fb      	ldr	r3, [r7, #12]
 801f34e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f352:	f003 0302 	and.w	r3, r3, #2
 801f356:	2b00      	cmp	r3, #0
 801f358:	d108      	bne.n	801f36c <ip4_route+0x78>
 801f35a:	687b      	ldr	r3, [r7, #4]
 801f35c:	681a      	ldr	r2, [r3, #0]
 801f35e:	68fb      	ldr	r3, [r7, #12]
 801f360:	330c      	adds	r3, #12
 801f362:	681b      	ldr	r3, [r3, #0]
 801f364:	429a      	cmp	r2, r3
 801f366:	d101      	bne.n	801f36c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801f368:	68fb      	ldr	r3, [r7, #12]
 801f36a:	e028      	b.n	801f3be <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801f36c:	68fb      	ldr	r3, [r7, #12]
 801f36e:	681b      	ldr	r3, [r3, #0]
 801f370:	60fb      	str	r3, [r7, #12]
 801f372:	68fb      	ldr	r3, [r7, #12]
 801f374:	2b00      	cmp	r3, #0
 801f376:	d1c5      	bne.n	801f304 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f378:	4b15      	ldr	r3, [pc, #84]	; (801f3d0 <ip4_route+0xdc>)
 801f37a:	681b      	ldr	r3, [r3, #0]
 801f37c:	2b00      	cmp	r3, #0
 801f37e:	d01a      	beq.n	801f3b6 <ip4_route+0xc2>
 801f380:	4b13      	ldr	r3, [pc, #76]	; (801f3d0 <ip4_route+0xdc>)
 801f382:	681b      	ldr	r3, [r3, #0]
 801f384:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f388:	f003 0301 	and.w	r3, r3, #1
 801f38c:	2b00      	cmp	r3, #0
 801f38e:	d012      	beq.n	801f3b6 <ip4_route+0xc2>
 801f390:	4b0f      	ldr	r3, [pc, #60]	; (801f3d0 <ip4_route+0xdc>)
 801f392:	681b      	ldr	r3, [r3, #0]
 801f394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f398:	f003 0304 	and.w	r3, r3, #4
 801f39c:	2b00      	cmp	r3, #0
 801f39e:	d00a      	beq.n	801f3b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801f3a0:	4b0b      	ldr	r3, [pc, #44]	; (801f3d0 <ip4_route+0xdc>)
 801f3a2:	681b      	ldr	r3, [r3, #0]
 801f3a4:	3304      	adds	r3, #4
 801f3a6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f3a8:	2b00      	cmp	r3, #0
 801f3aa:	d004      	beq.n	801f3b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801f3ac:	687b      	ldr	r3, [r7, #4]
 801f3ae:	681b      	ldr	r3, [r3, #0]
 801f3b0:	b2db      	uxtb	r3, r3
 801f3b2:	2b7f      	cmp	r3, #127	; 0x7f
 801f3b4:	d101      	bne.n	801f3ba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801f3b6:	2300      	movs	r3, #0
 801f3b8:	e001      	b.n	801f3be <ip4_route+0xca>
  }

  return netif_default;
 801f3ba:	4b05      	ldr	r3, [pc, #20]	; (801f3d0 <ip4_route+0xdc>)
 801f3bc:	681b      	ldr	r3, [r3, #0]
}
 801f3be:	4618      	mov	r0, r3
 801f3c0:	3714      	adds	r7, #20
 801f3c2:	46bd      	mov	sp, r7
 801f3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3c8:	4770      	bx	lr
 801f3ca:	bf00      	nop
 801f3cc:	20010324 	.word	0x20010324
 801f3d0:	20010328 	.word	0x20010328

0801f3d4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801f3d4:	b580      	push	{r7, lr}
 801f3d6:	b082      	sub	sp, #8
 801f3d8:	af00      	add	r7, sp, #0
 801f3da:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801f3dc:	687b      	ldr	r3, [r7, #4]
 801f3de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f3e2:	f003 0301 	and.w	r3, r3, #1
 801f3e6:	b2db      	uxtb	r3, r3
 801f3e8:	2b00      	cmp	r3, #0
 801f3ea:	d016      	beq.n	801f41a <ip4_input_accept+0x46>
 801f3ec:	687b      	ldr	r3, [r7, #4]
 801f3ee:	3304      	adds	r3, #4
 801f3f0:	681b      	ldr	r3, [r3, #0]
 801f3f2:	2b00      	cmp	r3, #0
 801f3f4:	d011      	beq.n	801f41a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f3f6:	4b0b      	ldr	r3, [pc, #44]	; (801f424 <ip4_input_accept+0x50>)
 801f3f8:	695a      	ldr	r2, [r3, #20]
 801f3fa:	687b      	ldr	r3, [r7, #4]
 801f3fc:	3304      	adds	r3, #4
 801f3fe:	681b      	ldr	r3, [r3, #0]
 801f400:	429a      	cmp	r2, r3
 801f402:	d008      	beq.n	801f416 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801f404:	4b07      	ldr	r3, [pc, #28]	; (801f424 <ip4_input_accept+0x50>)
 801f406:	695b      	ldr	r3, [r3, #20]
 801f408:	6879      	ldr	r1, [r7, #4]
 801f40a:	4618      	mov	r0, r3
 801f40c:	f000 fa24 	bl	801f858 <ip4_addr_isbroadcast_u32>
 801f410:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f412:	2b00      	cmp	r3, #0
 801f414:	d001      	beq.n	801f41a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801f416:	2301      	movs	r3, #1
 801f418:	e000      	b.n	801f41c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801f41a:	2300      	movs	r3, #0
}
 801f41c:	4618      	mov	r0, r3
 801f41e:	3708      	adds	r7, #8
 801f420:	46bd      	mov	sp, r7
 801f422:	bd80      	pop	{r7, pc}
 801f424:	2000cc00 	.word	0x2000cc00

0801f428 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801f428:	b580      	push	{r7, lr}
 801f42a:	b088      	sub	sp, #32
 801f42c:	af00      	add	r7, sp, #0
 801f42e:	6078      	str	r0, [r7, #4]
 801f430:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801f432:	2301      	movs	r3, #1
 801f434:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801f436:	687b      	ldr	r3, [r7, #4]
 801f438:	685b      	ldr	r3, [r3, #4]
 801f43a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801f43c:	69fb      	ldr	r3, [r7, #28]
 801f43e:	781b      	ldrb	r3, [r3, #0]
 801f440:	091b      	lsrs	r3, r3, #4
 801f442:	b2db      	uxtb	r3, r3
 801f444:	2b04      	cmp	r3, #4
 801f446:	d004      	beq.n	801f452 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801f448:	6878      	ldr	r0, [r7, #4]
 801f44a:	f7f6 fd97 	bl	8015f7c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801f44e:	2300      	movs	r3, #0
 801f450:	e121      	b.n	801f696 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801f452:	69fb      	ldr	r3, [r7, #28]
 801f454:	781b      	ldrb	r3, [r3, #0]
 801f456:	f003 030f 	and.w	r3, r3, #15
 801f45a:	b2db      	uxtb	r3, r3
 801f45c:	009b      	lsls	r3, r3, #2
 801f45e:	b2db      	uxtb	r3, r3
 801f460:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801f462:	69fb      	ldr	r3, [r7, #28]
 801f464:	885b      	ldrh	r3, [r3, #2]
 801f466:	b29b      	uxth	r3, r3
 801f468:	4618      	mov	r0, r3
 801f46a:	f7f5 f9b9 	bl	80147e0 <lwip_htons>
 801f46e:	4603      	mov	r3, r0
 801f470:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801f472:	687b      	ldr	r3, [r7, #4]
 801f474:	891b      	ldrh	r3, [r3, #8]
 801f476:	8a3a      	ldrh	r2, [r7, #16]
 801f478:	429a      	cmp	r2, r3
 801f47a:	d204      	bcs.n	801f486 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801f47c:	8a3b      	ldrh	r3, [r7, #16]
 801f47e:	4619      	mov	r1, r3
 801f480:	6878      	ldr	r0, [r7, #4]
 801f482:	f7f6 fbf5 	bl	8015c70 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801f486:	687b      	ldr	r3, [r7, #4]
 801f488:	895b      	ldrh	r3, [r3, #10]
 801f48a:	8a7a      	ldrh	r2, [r7, #18]
 801f48c:	429a      	cmp	r2, r3
 801f48e:	d807      	bhi.n	801f4a0 <ip4_input+0x78>
 801f490:	687b      	ldr	r3, [r7, #4]
 801f492:	891b      	ldrh	r3, [r3, #8]
 801f494:	8a3a      	ldrh	r2, [r7, #16]
 801f496:	429a      	cmp	r2, r3
 801f498:	d802      	bhi.n	801f4a0 <ip4_input+0x78>
 801f49a:	8a7b      	ldrh	r3, [r7, #18]
 801f49c:	2b13      	cmp	r3, #19
 801f49e:	d804      	bhi.n	801f4aa <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801f4a0:	6878      	ldr	r0, [r7, #4]
 801f4a2:	f7f6 fd6b 	bl	8015f7c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801f4a6:	2300      	movs	r3, #0
 801f4a8:	e0f5      	b.n	801f696 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801f4aa:	69fb      	ldr	r3, [r7, #28]
 801f4ac:	691b      	ldr	r3, [r3, #16]
 801f4ae:	4a7c      	ldr	r2, [pc, #496]	; (801f6a0 <ip4_input+0x278>)
 801f4b0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801f4b2:	69fb      	ldr	r3, [r7, #28]
 801f4b4:	68db      	ldr	r3, [r3, #12]
 801f4b6:	4a7a      	ldr	r2, [pc, #488]	; (801f6a0 <ip4_input+0x278>)
 801f4b8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f4ba:	4b79      	ldr	r3, [pc, #484]	; (801f6a0 <ip4_input+0x278>)
 801f4bc:	695b      	ldr	r3, [r3, #20]
 801f4be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f4c2:	2be0      	cmp	r3, #224	; 0xe0
 801f4c4:	d112      	bne.n	801f4ec <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801f4c6:	683b      	ldr	r3, [r7, #0]
 801f4c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f4cc:	f003 0301 	and.w	r3, r3, #1
 801f4d0:	b2db      	uxtb	r3, r3
 801f4d2:	2b00      	cmp	r3, #0
 801f4d4:	d007      	beq.n	801f4e6 <ip4_input+0xbe>
 801f4d6:	683b      	ldr	r3, [r7, #0]
 801f4d8:	3304      	adds	r3, #4
 801f4da:	681b      	ldr	r3, [r3, #0]
 801f4dc:	2b00      	cmp	r3, #0
 801f4de:	d002      	beq.n	801f4e6 <ip4_input+0xbe>
      netif = inp;
 801f4e0:	683b      	ldr	r3, [r7, #0]
 801f4e2:	61bb      	str	r3, [r7, #24]
 801f4e4:	e02a      	b.n	801f53c <ip4_input+0x114>
    } else {
      netif = NULL;
 801f4e6:	2300      	movs	r3, #0
 801f4e8:	61bb      	str	r3, [r7, #24]
 801f4ea:	e027      	b.n	801f53c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801f4ec:	6838      	ldr	r0, [r7, #0]
 801f4ee:	f7ff ff71 	bl	801f3d4 <ip4_input_accept>
 801f4f2:	4603      	mov	r3, r0
 801f4f4:	2b00      	cmp	r3, #0
 801f4f6:	d002      	beq.n	801f4fe <ip4_input+0xd6>
      netif = inp;
 801f4f8:	683b      	ldr	r3, [r7, #0]
 801f4fa:	61bb      	str	r3, [r7, #24]
 801f4fc:	e01e      	b.n	801f53c <ip4_input+0x114>
    } else {
      netif = NULL;
 801f4fe:	2300      	movs	r3, #0
 801f500:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801f502:	4b67      	ldr	r3, [pc, #412]	; (801f6a0 <ip4_input+0x278>)
 801f504:	695b      	ldr	r3, [r3, #20]
 801f506:	b2db      	uxtb	r3, r3
 801f508:	2b7f      	cmp	r3, #127	; 0x7f
 801f50a:	d017      	beq.n	801f53c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801f50c:	4b65      	ldr	r3, [pc, #404]	; (801f6a4 <ip4_input+0x27c>)
 801f50e:	681b      	ldr	r3, [r3, #0]
 801f510:	61bb      	str	r3, [r7, #24]
 801f512:	e00e      	b.n	801f532 <ip4_input+0x10a>
          if (netif == inp) {
 801f514:	69ba      	ldr	r2, [r7, #24]
 801f516:	683b      	ldr	r3, [r7, #0]
 801f518:	429a      	cmp	r2, r3
 801f51a:	d006      	beq.n	801f52a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801f51c:	69b8      	ldr	r0, [r7, #24]
 801f51e:	f7ff ff59 	bl	801f3d4 <ip4_input_accept>
 801f522:	4603      	mov	r3, r0
 801f524:	2b00      	cmp	r3, #0
 801f526:	d108      	bne.n	801f53a <ip4_input+0x112>
 801f528:	e000      	b.n	801f52c <ip4_input+0x104>
            continue;
 801f52a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801f52c:	69bb      	ldr	r3, [r7, #24]
 801f52e:	681b      	ldr	r3, [r3, #0]
 801f530:	61bb      	str	r3, [r7, #24]
 801f532:	69bb      	ldr	r3, [r7, #24]
 801f534:	2b00      	cmp	r3, #0
 801f536:	d1ed      	bne.n	801f514 <ip4_input+0xec>
 801f538:	e000      	b.n	801f53c <ip4_input+0x114>
            break;
 801f53a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801f53c:	69bb      	ldr	r3, [r7, #24]
 801f53e:	2b00      	cmp	r3, #0
 801f540:	d111      	bne.n	801f566 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801f542:	69fb      	ldr	r3, [r7, #28]
 801f544:	7a5b      	ldrb	r3, [r3, #9]
 801f546:	2b11      	cmp	r3, #17
 801f548:	d10d      	bne.n	801f566 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801f54a:	8a7b      	ldrh	r3, [r7, #18]
 801f54c:	69fa      	ldr	r2, [r7, #28]
 801f54e:	4413      	add	r3, r2
 801f550:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801f552:	68fb      	ldr	r3, [r7, #12]
 801f554:	885b      	ldrh	r3, [r3, #2]
 801f556:	b29b      	uxth	r3, r3
 801f558:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801f55c:	d103      	bne.n	801f566 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801f55e:	683b      	ldr	r3, [r7, #0]
 801f560:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801f562:	2300      	movs	r3, #0
 801f564:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801f566:	697b      	ldr	r3, [r7, #20]
 801f568:	2b00      	cmp	r3, #0
 801f56a:	d017      	beq.n	801f59c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801f56c:	4b4c      	ldr	r3, [pc, #304]	; (801f6a0 <ip4_input+0x278>)
 801f56e:	691b      	ldr	r3, [r3, #16]
 801f570:	2b00      	cmp	r3, #0
 801f572:	d013      	beq.n	801f59c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f574:	4b4a      	ldr	r3, [pc, #296]	; (801f6a0 <ip4_input+0x278>)
 801f576:	691b      	ldr	r3, [r3, #16]
 801f578:	6839      	ldr	r1, [r7, #0]
 801f57a:	4618      	mov	r0, r3
 801f57c:	f000 f96c 	bl	801f858 <ip4_addr_isbroadcast_u32>
 801f580:	4603      	mov	r3, r0
 801f582:	2b00      	cmp	r3, #0
 801f584:	d105      	bne.n	801f592 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801f586:	4b46      	ldr	r3, [pc, #280]	; (801f6a0 <ip4_input+0x278>)
 801f588:	691b      	ldr	r3, [r3, #16]
 801f58a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f58e:	2be0      	cmp	r3, #224	; 0xe0
 801f590:	d104      	bne.n	801f59c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801f592:	6878      	ldr	r0, [r7, #4]
 801f594:	f7f6 fcf2 	bl	8015f7c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801f598:	2300      	movs	r3, #0
 801f59a:	e07c      	b.n	801f696 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801f59c:	69bb      	ldr	r3, [r7, #24]
 801f59e:	2b00      	cmp	r3, #0
 801f5a0:	d104      	bne.n	801f5ac <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801f5a2:	6878      	ldr	r0, [r7, #4]
 801f5a4:	f7f6 fcea 	bl	8015f7c <pbuf_free>
    return ERR_OK;
 801f5a8:	2300      	movs	r3, #0
 801f5aa:	e074      	b.n	801f696 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801f5ac:	69fb      	ldr	r3, [r7, #28]
 801f5ae:	88db      	ldrh	r3, [r3, #6]
 801f5b0:	b29b      	uxth	r3, r3
 801f5b2:	461a      	mov	r2, r3
 801f5b4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801f5b8:	4013      	ands	r3, r2
 801f5ba:	2b00      	cmp	r3, #0
 801f5bc:	d00b      	beq.n	801f5d6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801f5be:	6878      	ldr	r0, [r7, #4]
 801f5c0:	f000 fc90 	bl	801fee4 <ip4_reass>
 801f5c4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	2b00      	cmp	r3, #0
 801f5ca:	d101      	bne.n	801f5d0 <ip4_input+0x1a8>
      return ERR_OK;
 801f5cc:	2300      	movs	r3, #0
 801f5ce:	e062      	b.n	801f696 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801f5d0:	687b      	ldr	r3, [r7, #4]
 801f5d2:	685b      	ldr	r3, [r3, #4]
 801f5d4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801f5d6:	4a32      	ldr	r2, [pc, #200]	; (801f6a0 <ip4_input+0x278>)
 801f5d8:	69bb      	ldr	r3, [r7, #24]
 801f5da:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801f5dc:	4a30      	ldr	r2, [pc, #192]	; (801f6a0 <ip4_input+0x278>)
 801f5de:	683b      	ldr	r3, [r7, #0]
 801f5e0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801f5e2:	4a2f      	ldr	r2, [pc, #188]	; (801f6a0 <ip4_input+0x278>)
 801f5e4:	69fb      	ldr	r3, [r7, #28]
 801f5e6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801f5e8:	69fb      	ldr	r3, [r7, #28]
 801f5ea:	781b      	ldrb	r3, [r3, #0]
 801f5ec:	f003 030f 	and.w	r3, r3, #15
 801f5f0:	b2db      	uxtb	r3, r3
 801f5f2:	009b      	lsls	r3, r3, #2
 801f5f4:	b2db      	uxtb	r3, r3
 801f5f6:	b29a      	uxth	r2, r3
 801f5f8:	4b29      	ldr	r3, [pc, #164]	; (801f6a0 <ip4_input+0x278>)
 801f5fa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801f5fc:	8a7b      	ldrh	r3, [r7, #18]
 801f5fe:	4619      	mov	r1, r3
 801f600:	6878      	ldr	r0, [r7, #4]
 801f602:	f7f6 fc35 	bl	8015e70 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801f606:	69fb      	ldr	r3, [r7, #28]
 801f608:	7a5b      	ldrb	r3, [r3, #9]
 801f60a:	2b06      	cmp	r3, #6
 801f60c:	d009      	beq.n	801f622 <ip4_input+0x1fa>
 801f60e:	2b11      	cmp	r3, #17
 801f610:	d002      	beq.n	801f618 <ip4_input+0x1f0>
 801f612:	2b01      	cmp	r3, #1
 801f614:	d00a      	beq.n	801f62c <ip4_input+0x204>
 801f616:	e00e      	b.n	801f636 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801f618:	6839      	ldr	r1, [r7, #0]
 801f61a:	6878      	ldr	r0, [r7, #4]
 801f61c:	f7fc fada 	bl	801bbd4 <udp_input>
        break;
 801f620:	e026      	b.n	801f670 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801f622:	6839      	ldr	r1, [r7, #0]
 801f624:	6878      	ldr	r0, [r7, #4]
 801f626:	f7f8 fae1 	bl	8017bec <tcp_input>
        break;
 801f62a:	e021      	b.n	801f670 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801f62c:	6839      	ldr	r1, [r7, #0]
 801f62e:	6878      	ldr	r0, [r7, #4]
 801f630:	f7ff fcd2 	bl	801efd8 <icmp_input>
        break;
 801f634:	e01c      	b.n	801f670 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f636:	4b1a      	ldr	r3, [pc, #104]	; (801f6a0 <ip4_input+0x278>)
 801f638:	695b      	ldr	r3, [r3, #20]
 801f63a:	69b9      	ldr	r1, [r7, #24]
 801f63c:	4618      	mov	r0, r3
 801f63e:	f000 f90b 	bl	801f858 <ip4_addr_isbroadcast_u32>
 801f642:	4603      	mov	r3, r0
 801f644:	2b00      	cmp	r3, #0
 801f646:	d10f      	bne.n	801f668 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f648:	4b15      	ldr	r3, [pc, #84]	; (801f6a0 <ip4_input+0x278>)
 801f64a:	695b      	ldr	r3, [r3, #20]
 801f64c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f650:	2be0      	cmp	r3, #224	; 0xe0
 801f652:	d009      	beq.n	801f668 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801f654:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801f658:	4619      	mov	r1, r3
 801f65a:	6878      	ldr	r0, [r7, #4]
 801f65c:	f7f6 fc7b 	bl	8015f56 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801f660:	2102      	movs	r1, #2
 801f662:	6878      	ldr	r0, [r7, #4]
 801f664:	f7ff fdbc 	bl	801f1e0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801f668:	6878      	ldr	r0, [r7, #4]
 801f66a:	f7f6 fc87 	bl	8015f7c <pbuf_free>
        break;
 801f66e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801f670:	4b0b      	ldr	r3, [pc, #44]	; (801f6a0 <ip4_input+0x278>)
 801f672:	2200      	movs	r2, #0
 801f674:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801f676:	4b0a      	ldr	r3, [pc, #40]	; (801f6a0 <ip4_input+0x278>)
 801f678:	2200      	movs	r2, #0
 801f67a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801f67c:	4b08      	ldr	r3, [pc, #32]	; (801f6a0 <ip4_input+0x278>)
 801f67e:	2200      	movs	r2, #0
 801f680:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801f682:	4b07      	ldr	r3, [pc, #28]	; (801f6a0 <ip4_input+0x278>)
 801f684:	2200      	movs	r2, #0
 801f686:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801f688:	4b05      	ldr	r3, [pc, #20]	; (801f6a0 <ip4_input+0x278>)
 801f68a:	2200      	movs	r2, #0
 801f68c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801f68e:	4b04      	ldr	r3, [pc, #16]	; (801f6a0 <ip4_input+0x278>)
 801f690:	2200      	movs	r2, #0
 801f692:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801f694:	2300      	movs	r3, #0
}
 801f696:	4618      	mov	r0, r3
 801f698:	3720      	adds	r7, #32
 801f69a:	46bd      	mov	sp, r7
 801f69c:	bd80      	pop	{r7, pc}
 801f69e:	bf00      	nop
 801f6a0:	2000cc00 	.word	0x2000cc00
 801f6a4:	20010324 	.word	0x20010324

0801f6a8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801f6a8:	b580      	push	{r7, lr}
 801f6aa:	b08a      	sub	sp, #40	; 0x28
 801f6ac:	af04      	add	r7, sp, #16
 801f6ae:	60f8      	str	r0, [r7, #12]
 801f6b0:	60b9      	str	r1, [r7, #8]
 801f6b2:	607a      	str	r2, [r7, #4]
 801f6b4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801f6b6:	68bb      	ldr	r3, [r7, #8]
 801f6b8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801f6ba:	687b      	ldr	r3, [r7, #4]
 801f6bc:	2b00      	cmp	r3, #0
 801f6be:	d009      	beq.n	801f6d4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801f6c0:	68bb      	ldr	r3, [r7, #8]
 801f6c2:	2b00      	cmp	r3, #0
 801f6c4:	d003      	beq.n	801f6ce <ip4_output_if+0x26>
 801f6c6:	68bb      	ldr	r3, [r7, #8]
 801f6c8:	681b      	ldr	r3, [r3, #0]
 801f6ca:	2b00      	cmp	r3, #0
 801f6cc:	d102      	bne.n	801f6d4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801f6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f6d0:	3304      	adds	r3, #4
 801f6d2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801f6d4:	78fa      	ldrb	r2, [r7, #3]
 801f6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f6d8:	9302      	str	r3, [sp, #8]
 801f6da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f6de:	9301      	str	r3, [sp, #4]
 801f6e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f6e4:	9300      	str	r3, [sp, #0]
 801f6e6:	4613      	mov	r3, r2
 801f6e8:	687a      	ldr	r2, [r7, #4]
 801f6ea:	6979      	ldr	r1, [r7, #20]
 801f6ec:	68f8      	ldr	r0, [r7, #12]
 801f6ee:	f000 f805 	bl	801f6fc <ip4_output_if_src>
 801f6f2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801f6f4:	4618      	mov	r0, r3
 801f6f6:	3718      	adds	r7, #24
 801f6f8:	46bd      	mov	sp, r7
 801f6fa:	bd80      	pop	{r7, pc}

0801f6fc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801f6fc:	b580      	push	{r7, lr}
 801f6fe:	b088      	sub	sp, #32
 801f700:	af00      	add	r7, sp, #0
 801f702:	60f8      	str	r0, [r7, #12]
 801f704:	60b9      	str	r1, [r7, #8]
 801f706:	607a      	str	r2, [r7, #4]
 801f708:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801f70a:	68fb      	ldr	r3, [r7, #12]
 801f70c:	7b9b      	ldrb	r3, [r3, #14]
 801f70e:	2b01      	cmp	r3, #1
 801f710:	d006      	beq.n	801f720 <ip4_output_if_src+0x24>
 801f712:	4b4b      	ldr	r3, [pc, #300]	; (801f840 <ip4_output_if_src+0x144>)
 801f714:	f44f 7255 	mov.w	r2, #852	; 0x354
 801f718:	494a      	ldr	r1, [pc, #296]	; (801f844 <ip4_output_if_src+0x148>)
 801f71a:	484b      	ldr	r0, [pc, #300]	; (801f848 <ip4_output_if_src+0x14c>)
 801f71c:	f001 ff00 	bl	8021520 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801f720:	687b      	ldr	r3, [r7, #4]
 801f722:	2b00      	cmp	r3, #0
 801f724:	d060      	beq.n	801f7e8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801f726:	2314      	movs	r3, #20
 801f728:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801f72a:	2114      	movs	r1, #20
 801f72c:	68f8      	ldr	r0, [r7, #12]
 801f72e:	f7f6 fb8f 	bl	8015e50 <pbuf_add_header>
 801f732:	4603      	mov	r3, r0
 801f734:	2b00      	cmp	r3, #0
 801f736:	d002      	beq.n	801f73e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801f738:	f06f 0301 	mvn.w	r3, #1
 801f73c:	e07c      	b.n	801f838 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801f73e:	68fb      	ldr	r3, [r7, #12]
 801f740:	685b      	ldr	r3, [r3, #4]
 801f742:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801f744:	68fb      	ldr	r3, [r7, #12]
 801f746:	895b      	ldrh	r3, [r3, #10]
 801f748:	2b13      	cmp	r3, #19
 801f74a:	d806      	bhi.n	801f75a <ip4_output_if_src+0x5e>
 801f74c:	4b3c      	ldr	r3, [pc, #240]	; (801f840 <ip4_output_if_src+0x144>)
 801f74e:	f240 3289 	movw	r2, #905	; 0x389
 801f752:	493e      	ldr	r1, [pc, #248]	; (801f84c <ip4_output_if_src+0x150>)
 801f754:	483c      	ldr	r0, [pc, #240]	; (801f848 <ip4_output_if_src+0x14c>)
 801f756:	f001 fee3 	bl	8021520 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801f75a:	69fb      	ldr	r3, [r7, #28]
 801f75c:	78fa      	ldrb	r2, [r7, #3]
 801f75e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801f760:	69fb      	ldr	r3, [r7, #28]
 801f762:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801f766:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801f768:	687b      	ldr	r3, [r7, #4]
 801f76a:	681a      	ldr	r2, [r3, #0]
 801f76c:	69fb      	ldr	r3, [r7, #28]
 801f76e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801f770:	8b7b      	ldrh	r3, [r7, #26]
 801f772:	089b      	lsrs	r3, r3, #2
 801f774:	b29b      	uxth	r3, r3
 801f776:	b2db      	uxtb	r3, r3
 801f778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f77c:	b2da      	uxtb	r2, r3
 801f77e:	69fb      	ldr	r3, [r7, #28]
 801f780:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801f782:	69fb      	ldr	r3, [r7, #28]
 801f784:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801f788:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801f78a:	68fb      	ldr	r3, [r7, #12]
 801f78c:	891b      	ldrh	r3, [r3, #8]
 801f78e:	4618      	mov	r0, r3
 801f790:	f7f5 f826 	bl	80147e0 <lwip_htons>
 801f794:	4603      	mov	r3, r0
 801f796:	461a      	mov	r2, r3
 801f798:	69fb      	ldr	r3, [r7, #28]
 801f79a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801f79c:	69fb      	ldr	r3, [r7, #28]
 801f79e:	2200      	movs	r2, #0
 801f7a0:	719a      	strb	r2, [r3, #6]
 801f7a2:	2200      	movs	r2, #0
 801f7a4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801f7a6:	4b2a      	ldr	r3, [pc, #168]	; (801f850 <ip4_output_if_src+0x154>)
 801f7a8:	881b      	ldrh	r3, [r3, #0]
 801f7aa:	4618      	mov	r0, r3
 801f7ac:	f7f5 f818 	bl	80147e0 <lwip_htons>
 801f7b0:	4603      	mov	r3, r0
 801f7b2:	461a      	mov	r2, r3
 801f7b4:	69fb      	ldr	r3, [r7, #28]
 801f7b6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801f7b8:	4b25      	ldr	r3, [pc, #148]	; (801f850 <ip4_output_if_src+0x154>)
 801f7ba:	881b      	ldrh	r3, [r3, #0]
 801f7bc:	3301      	adds	r3, #1
 801f7be:	b29a      	uxth	r2, r3
 801f7c0:	4b23      	ldr	r3, [pc, #140]	; (801f850 <ip4_output_if_src+0x154>)
 801f7c2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801f7c4:	68bb      	ldr	r3, [r7, #8]
 801f7c6:	2b00      	cmp	r3, #0
 801f7c8:	d104      	bne.n	801f7d4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801f7ca:	4b22      	ldr	r3, [pc, #136]	; (801f854 <ip4_output_if_src+0x158>)
 801f7cc:	681a      	ldr	r2, [r3, #0]
 801f7ce:	69fb      	ldr	r3, [r7, #28]
 801f7d0:	60da      	str	r2, [r3, #12]
 801f7d2:	e003      	b.n	801f7dc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801f7d4:	68bb      	ldr	r3, [r7, #8]
 801f7d6:	681a      	ldr	r2, [r3, #0]
 801f7d8:	69fb      	ldr	r3, [r7, #28]
 801f7da:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801f7dc:	69fb      	ldr	r3, [r7, #28]
 801f7de:	2200      	movs	r2, #0
 801f7e0:	729a      	strb	r2, [r3, #10]
 801f7e2:	2200      	movs	r2, #0
 801f7e4:	72da      	strb	r2, [r3, #11]
 801f7e6:	e00f      	b.n	801f808 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801f7e8:	68fb      	ldr	r3, [r7, #12]
 801f7ea:	895b      	ldrh	r3, [r3, #10]
 801f7ec:	2b13      	cmp	r3, #19
 801f7ee:	d802      	bhi.n	801f7f6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801f7f0:	f06f 0301 	mvn.w	r3, #1
 801f7f4:	e020      	b.n	801f838 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801f7f6:	68fb      	ldr	r3, [r7, #12]
 801f7f8:	685b      	ldr	r3, [r3, #4]
 801f7fa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801f7fc:	69fb      	ldr	r3, [r7, #28]
 801f7fe:	691b      	ldr	r3, [r3, #16]
 801f800:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801f802:	f107 0314 	add.w	r3, r7, #20
 801f806:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801f808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f80a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801f80c:	2b00      	cmp	r3, #0
 801f80e:	d00c      	beq.n	801f82a <ip4_output_if_src+0x12e>
 801f810:	68fb      	ldr	r3, [r7, #12]
 801f812:	891a      	ldrh	r2, [r3, #8]
 801f814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f816:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801f818:	429a      	cmp	r2, r3
 801f81a:	d906      	bls.n	801f82a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801f81c:	687a      	ldr	r2, [r7, #4]
 801f81e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801f820:	68f8      	ldr	r0, [r7, #12]
 801f822:	f000 fd4b 	bl	80202bc <ip4_frag>
 801f826:	4603      	mov	r3, r0
 801f828:	e006      	b.n	801f838 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801f82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f82c:	695b      	ldr	r3, [r3, #20]
 801f82e:	687a      	ldr	r2, [r7, #4]
 801f830:	68f9      	ldr	r1, [r7, #12]
 801f832:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f834:	4798      	blx	r3
 801f836:	4603      	mov	r3, r0
}
 801f838:	4618      	mov	r0, r3
 801f83a:	3720      	adds	r7, #32
 801f83c:	46bd      	mov	sp, r7
 801f83e:	bd80      	pop	{r7, pc}
 801f840:	08024ebc 	.word	0x08024ebc
 801f844:	08024ef0 	.word	0x08024ef0
 801f848:	08024efc 	.word	0x08024efc
 801f84c:	08024f24 	.word	0x08024f24
 801f850:	200090fe 	.word	0x200090fe
 801f854:	08025398 	.word	0x08025398

0801f858 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801f858:	b480      	push	{r7}
 801f85a:	b085      	sub	sp, #20
 801f85c:	af00      	add	r7, sp, #0
 801f85e:	6078      	str	r0, [r7, #4]
 801f860:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801f862:	687b      	ldr	r3, [r7, #4]
 801f864:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801f866:	687b      	ldr	r3, [r7, #4]
 801f868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f86c:	d002      	beq.n	801f874 <ip4_addr_isbroadcast_u32+0x1c>
 801f86e:	687b      	ldr	r3, [r7, #4]
 801f870:	2b00      	cmp	r3, #0
 801f872:	d101      	bne.n	801f878 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801f874:	2301      	movs	r3, #1
 801f876:	e02a      	b.n	801f8ce <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801f878:	683b      	ldr	r3, [r7, #0]
 801f87a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f87e:	f003 0302 	and.w	r3, r3, #2
 801f882:	2b00      	cmp	r3, #0
 801f884:	d101      	bne.n	801f88a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801f886:	2300      	movs	r3, #0
 801f888:	e021      	b.n	801f8ce <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801f88a:	683b      	ldr	r3, [r7, #0]
 801f88c:	3304      	adds	r3, #4
 801f88e:	681b      	ldr	r3, [r3, #0]
 801f890:	687a      	ldr	r2, [r7, #4]
 801f892:	429a      	cmp	r2, r3
 801f894:	d101      	bne.n	801f89a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801f896:	2300      	movs	r3, #0
 801f898:	e019      	b.n	801f8ce <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801f89a:	68fa      	ldr	r2, [r7, #12]
 801f89c:	683b      	ldr	r3, [r7, #0]
 801f89e:	3304      	adds	r3, #4
 801f8a0:	681b      	ldr	r3, [r3, #0]
 801f8a2:	405a      	eors	r2, r3
 801f8a4:	683b      	ldr	r3, [r7, #0]
 801f8a6:	3308      	adds	r3, #8
 801f8a8:	681b      	ldr	r3, [r3, #0]
 801f8aa:	4013      	ands	r3, r2
 801f8ac:	2b00      	cmp	r3, #0
 801f8ae:	d10d      	bne.n	801f8cc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801f8b0:	683b      	ldr	r3, [r7, #0]
 801f8b2:	3308      	adds	r3, #8
 801f8b4:	681b      	ldr	r3, [r3, #0]
 801f8b6:	43da      	mvns	r2, r3
 801f8b8:	687b      	ldr	r3, [r7, #4]
 801f8ba:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801f8bc:	683b      	ldr	r3, [r7, #0]
 801f8be:	3308      	adds	r3, #8
 801f8c0:	681b      	ldr	r3, [r3, #0]
 801f8c2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801f8c4:	429a      	cmp	r2, r3
 801f8c6:	d101      	bne.n	801f8cc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801f8c8:	2301      	movs	r3, #1
 801f8ca:	e000      	b.n	801f8ce <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801f8cc:	2300      	movs	r3, #0
  }
}
 801f8ce:	4618      	mov	r0, r3
 801f8d0:	3714      	adds	r7, #20
 801f8d2:	46bd      	mov	sp, r7
 801f8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8d8:	4770      	bx	lr
	...

0801f8dc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801f8dc:	b580      	push	{r7, lr}
 801f8de:	b084      	sub	sp, #16
 801f8e0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801f8e2:	2300      	movs	r3, #0
 801f8e4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801f8e6:	4b12      	ldr	r3, [pc, #72]	; (801f930 <ip_reass_tmr+0x54>)
 801f8e8:	681b      	ldr	r3, [r3, #0]
 801f8ea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801f8ec:	e018      	b.n	801f920 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801f8ee:	68fb      	ldr	r3, [r7, #12]
 801f8f0:	7fdb      	ldrb	r3, [r3, #31]
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	d00b      	beq.n	801f90e <ip_reass_tmr+0x32>
      r->timer--;
 801f8f6:	68fb      	ldr	r3, [r7, #12]
 801f8f8:	7fdb      	ldrb	r3, [r3, #31]
 801f8fa:	3b01      	subs	r3, #1
 801f8fc:	b2da      	uxtb	r2, r3
 801f8fe:	68fb      	ldr	r3, [r7, #12]
 801f900:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801f902:	68fb      	ldr	r3, [r7, #12]
 801f904:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801f906:	68fb      	ldr	r3, [r7, #12]
 801f908:	681b      	ldr	r3, [r3, #0]
 801f90a:	60fb      	str	r3, [r7, #12]
 801f90c:	e008      	b.n	801f920 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801f90e:	68fb      	ldr	r3, [r7, #12]
 801f910:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801f912:	68fb      	ldr	r3, [r7, #12]
 801f914:	681b      	ldr	r3, [r3, #0]
 801f916:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801f918:	68b9      	ldr	r1, [r7, #8]
 801f91a:	6878      	ldr	r0, [r7, #4]
 801f91c:	f000 f80a 	bl	801f934 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801f920:	68fb      	ldr	r3, [r7, #12]
 801f922:	2b00      	cmp	r3, #0
 801f924:	d1e3      	bne.n	801f8ee <ip_reass_tmr+0x12>
    }
  }
}
 801f926:	bf00      	nop
 801f928:	3710      	adds	r7, #16
 801f92a:	46bd      	mov	sp, r7
 801f92c:	bd80      	pop	{r7, pc}
 801f92e:	bf00      	nop
 801f930:	20009100 	.word	0x20009100

0801f934 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801f934:	b580      	push	{r7, lr}
 801f936:	b088      	sub	sp, #32
 801f938:	af00      	add	r7, sp, #0
 801f93a:	6078      	str	r0, [r7, #4]
 801f93c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801f93e:	2300      	movs	r3, #0
 801f940:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801f942:	683a      	ldr	r2, [r7, #0]
 801f944:	687b      	ldr	r3, [r7, #4]
 801f946:	429a      	cmp	r2, r3
 801f948:	d105      	bne.n	801f956 <ip_reass_free_complete_datagram+0x22>
 801f94a:	4b45      	ldr	r3, [pc, #276]	; (801fa60 <ip_reass_free_complete_datagram+0x12c>)
 801f94c:	22ab      	movs	r2, #171	; 0xab
 801f94e:	4945      	ldr	r1, [pc, #276]	; (801fa64 <ip_reass_free_complete_datagram+0x130>)
 801f950:	4845      	ldr	r0, [pc, #276]	; (801fa68 <ip_reass_free_complete_datagram+0x134>)
 801f952:	f001 fde5 	bl	8021520 <iprintf>
  if (prev != NULL) {
 801f956:	683b      	ldr	r3, [r7, #0]
 801f958:	2b00      	cmp	r3, #0
 801f95a:	d00a      	beq.n	801f972 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801f95c:	683b      	ldr	r3, [r7, #0]
 801f95e:	681b      	ldr	r3, [r3, #0]
 801f960:	687a      	ldr	r2, [r7, #4]
 801f962:	429a      	cmp	r2, r3
 801f964:	d005      	beq.n	801f972 <ip_reass_free_complete_datagram+0x3e>
 801f966:	4b3e      	ldr	r3, [pc, #248]	; (801fa60 <ip_reass_free_complete_datagram+0x12c>)
 801f968:	22ad      	movs	r2, #173	; 0xad
 801f96a:	4940      	ldr	r1, [pc, #256]	; (801fa6c <ip_reass_free_complete_datagram+0x138>)
 801f96c:	483e      	ldr	r0, [pc, #248]	; (801fa68 <ip_reass_free_complete_datagram+0x134>)
 801f96e:	f001 fdd7 	bl	8021520 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801f972:	687b      	ldr	r3, [r7, #4]
 801f974:	685b      	ldr	r3, [r3, #4]
 801f976:	685b      	ldr	r3, [r3, #4]
 801f978:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801f97a:	697b      	ldr	r3, [r7, #20]
 801f97c:	889b      	ldrh	r3, [r3, #4]
 801f97e:	b29b      	uxth	r3, r3
 801f980:	2b00      	cmp	r3, #0
 801f982:	d12a      	bne.n	801f9da <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801f984:	687b      	ldr	r3, [r7, #4]
 801f986:	685b      	ldr	r3, [r3, #4]
 801f988:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801f98a:	697b      	ldr	r3, [r7, #20]
 801f98c:	681a      	ldr	r2, [r3, #0]
 801f98e:	687b      	ldr	r3, [r7, #4]
 801f990:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801f992:	69bb      	ldr	r3, [r7, #24]
 801f994:	6858      	ldr	r0, [r3, #4]
 801f996:	687b      	ldr	r3, [r7, #4]
 801f998:	3308      	adds	r3, #8
 801f99a:	2214      	movs	r2, #20
 801f99c:	4619      	mov	r1, r3
 801f99e:	f001 fd04 	bl	80213aa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801f9a2:	2101      	movs	r1, #1
 801f9a4:	69b8      	ldr	r0, [r7, #24]
 801f9a6:	f7ff fc2b 	bl	801f200 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801f9aa:	69b8      	ldr	r0, [r7, #24]
 801f9ac:	f7f6 fb74 	bl	8016098 <pbuf_clen>
 801f9b0:	4603      	mov	r3, r0
 801f9b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801f9b4:	8bfa      	ldrh	r2, [r7, #30]
 801f9b6:	8a7b      	ldrh	r3, [r7, #18]
 801f9b8:	4413      	add	r3, r2
 801f9ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f9be:	db05      	blt.n	801f9cc <ip_reass_free_complete_datagram+0x98>
 801f9c0:	4b27      	ldr	r3, [pc, #156]	; (801fa60 <ip_reass_free_complete_datagram+0x12c>)
 801f9c2:	22bc      	movs	r2, #188	; 0xbc
 801f9c4:	492a      	ldr	r1, [pc, #168]	; (801fa70 <ip_reass_free_complete_datagram+0x13c>)
 801f9c6:	4828      	ldr	r0, [pc, #160]	; (801fa68 <ip_reass_free_complete_datagram+0x134>)
 801f9c8:	f001 fdaa 	bl	8021520 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801f9cc:	8bfa      	ldrh	r2, [r7, #30]
 801f9ce:	8a7b      	ldrh	r3, [r7, #18]
 801f9d0:	4413      	add	r3, r2
 801f9d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801f9d4:	69b8      	ldr	r0, [r7, #24]
 801f9d6:	f7f6 fad1 	bl	8015f7c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801f9da:	687b      	ldr	r3, [r7, #4]
 801f9dc:	685b      	ldr	r3, [r3, #4]
 801f9de:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801f9e0:	e01f      	b.n	801fa22 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801f9e2:	69bb      	ldr	r3, [r7, #24]
 801f9e4:	685b      	ldr	r3, [r3, #4]
 801f9e6:	617b      	str	r3, [r7, #20]
    pcur = p;
 801f9e8:	69bb      	ldr	r3, [r7, #24]
 801f9ea:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801f9ec:	697b      	ldr	r3, [r7, #20]
 801f9ee:	681b      	ldr	r3, [r3, #0]
 801f9f0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801f9f2:	68f8      	ldr	r0, [r7, #12]
 801f9f4:	f7f6 fb50 	bl	8016098 <pbuf_clen>
 801f9f8:	4603      	mov	r3, r0
 801f9fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801f9fc:	8bfa      	ldrh	r2, [r7, #30]
 801f9fe:	8a7b      	ldrh	r3, [r7, #18]
 801fa00:	4413      	add	r3, r2
 801fa02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fa06:	db05      	blt.n	801fa14 <ip_reass_free_complete_datagram+0xe0>
 801fa08:	4b15      	ldr	r3, [pc, #84]	; (801fa60 <ip_reass_free_complete_datagram+0x12c>)
 801fa0a:	22cc      	movs	r2, #204	; 0xcc
 801fa0c:	4918      	ldr	r1, [pc, #96]	; (801fa70 <ip_reass_free_complete_datagram+0x13c>)
 801fa0e:	4816      	ldr	r0, [pc, #88]	; (801fa68 <ip_reass_free_complete_datagram+0x134>)
 801fa10:	f001 fd86 	bl	8021520 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801fa14:	8bfa      	ldrh	r2, [r7, #30]
 801fa16:	8a7b      	ldrh	r3, [r7, #18]
 801fa18:	4413      	add	r3, r2
 801fa1a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801fa1c:	68f8      	ldr	r0, [r7, #12]
 801fa1e:	f7f6 faad 	bl	8015f7c <pbuf_free>
  while (p != NULL) {
 801fa22:	69bb      	ldr	r3, [r7, #24]
 801fa24:	2b00      	cmp	r3, #0
 801fa26:	d1dc      	bne.n	801f9e2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801fa28:	6839      	ldr	r1, [r7, #0]
 801fa2a:	6878      	ldr	r0, [r7, #4]
 801fa2c:	f000 f8c2 	bl	801fbb4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801fa30:	4b10      	ldr	r3, [pc, #64]	; (801fa74 <ip_reass_free_complete_datagram+0x140>)
 801fa32:	881b      	ldrh	r3, [r3, #0]
 801fa34:	8bfa      	ldrh	r2, [r7, #30]
 801fa36:	429a      	cmp	r2, r3
 801fa38:	d905      	bls.n	801fa46 <ip_reass_free_complete_datagram+0x112>
 801fa3a:	4b09      	ldr	r3, [pc, #36]	; (801fa60 <ip_reass_free_complete_datagram+0x12c>)
 801fa3c:	22d2      	movs	r2, #210	; 0xd2
 801fa3e:	490e      	ldr	r1, [pc, #56]	; (801fa78 <ip_reass_free_complete_datagram+0x144>)
 801fa40:	4809      	ldr	r0, [pc, #36]	; (801fa68 <ip_reass_free_complete_datagram+0x134>)
 801fa42:	f001 fd6d 	bl	8021520 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801fa46:	4b0b      	ldr	r3, [pc, #44]	; (801fa74 <ip_reass_free_complete_datagram+0x140>)
 801fa48:	881a      	ldrh	r2, [r3, #0]
 801fa4a:	8bfb      	ldrh	r3, [r7, #30]
 801fa4c:	1ad3      	subs	r3, r2, r3
 801fa4e:	b29a      	uxth	r2, r3
 801fa50:	4b08      	ldr	r3, [pc, #32]	; (801fa74 <ip_reass_free_complete_datagram+0x140>)
 801fa52:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801fa54:	8bfb      	ldrh	r3, [r7, #30]
}
 801fa56:	4618      	mov	r0, r3
 801fa58:	3720      	adds	r7, #32
 801fa5a:	46bd      	mov	sp, r7
 801fa5c:	bd80      	pop	{r7, pc}
 801fa5e:	bf00      	nop
 801fa60:	08024f54 	.word	0x08024f54
 801fa64:	08024f90 	.word	0x08024f90
 801fa68:	08024f9c 	.word	0x08024f9c
 801fa6c:	08024fc4 	.word	0x08024fc4
 801fa70:	08024fd8 	.word	0x08024fd8
 801fa74:	20009104 	.word	0x20009104
 801fa78:	08024ff8 	.word	0x08024ff8

0801fa7c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801fa7c:	b580      	push	{r7, lr}
 801fa7e:	b08a      	sub	sp, #40	; 0x28
 801fa80:	af00      	add	r7, sp, #0
 801fa82:	6078      	str	r0, [r7, #4]
 801fa84:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801fa86:	2300      	movs	r3, #0
 801fa88:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801fa8a:	2300      	movs	r3, #0
 801fa8c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801fa8e:	2300      	movs	r3, #0
 801fa90:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801fa92:	2300      	movs	r3, #0
 801fa94:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801fa96:	2300      	movs	r3, #0
 801fa98:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801fa9a:	4b28      	ldr	r3, [pc, #160]	; (801fb3c <ip_reass_remove_oldest_datagram+0xc0>)
 801fa9c:	681b      	ldr	r3, [r3, #0]
 801fa9e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801faa0:	e030      	b.n	801fb04 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801faa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801faa4:	695a      	ldr	r2, [r3, #20]
 801faa6:	687b      	ldr	r3, [r7, #4]
 801faa8:	68db      	ldr	r3, [r3, #12]
 801faaa:	429a      	cmp	r2, r3
 801faac:	d10c      	bne.n	801fac8 <ip_reass_remove_oldest_datagram+0x4c>
 801faae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fab0:	699a      	ldr	r2, [r3, #24]
 801fab2:	687b      	ldr	r3, [r7, #4]
 801fab4:	691b      	ldr	r3, [r3, #16]
 801fab6:	429a      	cmp	r2, r3
 801fab8:	d106      	bne.n	801fac8 <ip_reass_remove_oldest_datagram+0x4c>
 801faba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fabc:	899a      	ldrh	r2, [r3, #12]
 801fabe:	687b      	ldr	r3, [r7, #4]
 801fac0:	889b      	ldrh	r3, [r3, #4]
 801fac2:	b29b      	uxth	r3, r3
 801fac4:	429a      	cmp	r2, r3
 801fac6:	d014      	beq.n	801faf2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801fac8:	693b      	ldr	r3, [r7, #16]
 801faca:	3301      	adds	r3, #1
 801facc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801face:	6a3b      	ldr	r3, [r7, #32]
 801fad0:	2b00      	cmp	r3, #0
 801fad2:	d104      	bne.n	801fade <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801fad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fad6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801fad8:	69fb      	ldr	r3, [r7, #28]
 801fada:	61bb      	str	r3, [r7, #24]
 801fadc:	e009      	b.n	801faf2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801fade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fae0:	7fda      	ldrb	r2, [r3, #31]
 801fae2:	6a3b      	ldr	r3, [r7, #32]
 801fae4:	7fdb      	ldrb	r3, [r3, #31]
 801fae6:	429a      	cmp	r2, r3
 801fae8:	d803      	bhi.n	801faf2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801faea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801faec:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801faee:	69fb      	ldr	r3, [r7, #28]
 801faf0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801faf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801faf4:	681b      	ldr	r3, [r3, #0]
 801faf6:	2b00      	cmp	r3, #0
 801faf8:	d001      	beq.n	801fafe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801fafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fafc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801fafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb00:	681b      	ldr	r3, [r3, #0]
 801fb02:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801fb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb06:	2b00      	cmp	r3, #0
 801fb08:	d1cb      	bne.n	801faa2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801fb0a:	6a3b      	ldr	r3, [r7, #32]
 801fb0c:	2b00      	cmp	r3, #0
 801fb0e:	d008      	beq.n	801fb22 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801fb10:	69b9      	ldr	r1, [r7, #24]
 801fb12:	6a38      	ldr	r0, [r7, #32]
 801fb14:	f7ff ff0e 	bl	801f934 <ip_reass_free_complete_datagram>
 801fb18:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801fb1a:	697a      	ldr	r2, [r7, #20]
 801fb1c:	68fb      	ldr	r3, [r7, #12]
 801fb1e:	4413      	add	r3, r2
 801fb20:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801fb22:	697a      	ldr	r2, [r7, #20]
 801fb24:	683b      	ldr	r3, [r7, #0]
 801fb26:	429a      	cmp	r2, r3
 801fb28:	da02      	bge.n	801fb30 <ip_reass_remove_oldest_datagram+0xb4>
 801fb2a:	693b      	ldr	r3, [r7, #16]
 801fb2c:	2b01      	cmp	r3, #1
 801fb2e:	dcac      	bgt.n	801fa8a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801fb30:	697b      	ldr	r3, [r7, #20]
}
 801fb32:	4618      	mov	r0, r3
 801fb34:	3728      	adds	r7, #40	; 0x28
 801fb36:	46bd      	mov	sp, r7
 801fb38:	bd80      	pop	{r7, pc}
 801fb3a:	bf00      	nop
 801fb3c:	20009100 	.word	0x20009100

0801fb40 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801fb40:	b580      	push	{r7, lr}
 801fb42:	b084      	sub	sp, #16
 801fb44:	af00      	add	r7, sp, #0
 801fb46:	6078      	str	r0, [r7, #4]
 801fb48:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801fb4a:	2004      	movs	r0, #4
 801fb4c:	f7f5 fafe 	bl	801514c <memp_malloc>
 801fb50:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801fb52:	68fb      	ldr	r3, [r7, #12]
 801fb54:	2b00      	cmp	r3, #0
 801fb56:	d110      	bne.n	801fb7a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801fb58:	6839      	ldr	r1, [r7, #0]
 801fb5a:	6878      	ldr	r0, [r7, #4]
 801fb5c:	f7ff ff8e 	bl	801fa7c <ip_reass_remove_oldest_datagram>
 801fb60:	4602      	mov	r2, r0
 801fb62:	683b      	ldr	r3, [r7, #0]
 801fb64:	4293      	cmp	r3, r2
 801fb66:	dc03      	bgt.n	801fb70 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801fb68:	2004      	movs	r0, #4
 801fb6a:	f7f5 faef 	bl	801514c <memp_malloc>
 801fb6e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801fb70:	68fb      	ldr	r3, [r7, #12]
 801fb72:	2b00      	cmp	r3, #0
 801fb74:	d101      	bne.n	801fb7a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801fb76:	2300      	movs	r3, #0
 801fb78:	e016      	b.n	801fba8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801fb7a:	2220      	movs	r2, #32
 801fb7c:	2100      	movs	r1, #0
 801fb7e:	68f8      	ldr	r0, [r7, #12]
 801fb80:	f001 fc1e 	bl	80213c0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801fb84:	68fb      	ldr	r3, [r7, #12]
 801fb86:	220f      	movs	r2, #15
 801fb88:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801fb8a:	4b09      	ldr	r3, [pc, #36]	; (801fbb0 <ip_reass_enqueue_new_datagram+0x70>)
 801fb8c:	681a      	ldr	r2, [r3, #0]
 801fb8e:	68fb      	ldr	r3, [r7, #12]
 801fb90:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801fb92:	4a07      	ldr	r2, [pc, #28]	; (801fbb0 <ip_reass_enqueue_new_datagram+0x70>)
 801fb94:	68fb      	ldr	r3, [r7, #12]
 801fb96:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801fb98:	68fb      	ldr	r3, [r7, #12]
 801fb9a:	3308      	adds	r3, #8
 801fb9c:	2214      	movs	r2, #20
 801fb9e:	6879      	ldr	r1, [r7, #4]
 801fba0:	4618      	mov	r0, r3
 801fba2:	f001 fc02 	bl	80213aa <memcpy>
  return ipr;
 801fba6:	68fb      	ldr	r3, [r7, #12]
}
 801fba8:	4618      	mov	r0, r3
 801fbaa:	3710      	adds	r7, #16
 801fbac:	46bd      	mov	sp, r7
 801fbae:	bd80      	pop	{r7, pc}
 801fbb0:	20009100 	.word	0x20009100

0801fbb4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801fbb4:	b580      	push	{r7, lr}
 801fbb6:	b082      	sub	sp, #8
 801fbb8:	af00      	add	r7, sp, #0
 801fbba:	6078      	str	r0, [r7, #4]
 801fbbc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801fbbe:	4b10      	ldr	r3, [pc, #64]	; (801fc00 <ip_reass_dequeue_datagram+0x4c>)
 801fbc0:	681b      	ldr	r3, [r3, #0]
 801fbc2:	687a      	ldr	r2, [r7, #4]
 801fbc4:	429a      	cmp	r2, r3
 801fbc6:	d104      	bne.n	801fbd2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801fbc8:	687b      	ldr	r3, [r7, #4]
 801fbca:	681b      	ldr	r3, [r3, #0]
 801fbcc:	4a0c      	ldr	r2, [pc, #48]	; (801fc00 <ip_reass_dequeue_datagram+0x4c>)
 801fbce:	6013      	str	r3, [r2, #0]
 801fbd0:	e00d      	b.n	801fbee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801fbd2:	683b      	ldr	r3, [r7, #0]
 801fbd4:	2b00      	cmp	r3, #0
 801fbd6:	d106      	bne.n	801fbe6 <ip_reass_dequeue_datagram+0x32>
 801fbd8:	4b0a      	ldr	r3, [pc, #40]	; (801fc04 <ip_reass_dequeue_datagram+0x50>)
 801fbda:	f240 1245 	movw	r2, #325	; 0x145
 801fbde:	490a      	ldr	r1, [pc, #40]	; (801fc08 <ip_reass_dequeue_datagram+0x54>)
 801fbe0:	480a      	ldr	r0, [pc, #40]	; (801fc0c <ip_reass_dequeue_datagram+0x58>)
 801fbe2:	f001 fc9d 	bl	8021520 <iprintf>
    prev->next = ipr->next;
 801fbe6:	687b      	ldr	r3, [r7, #4]
 801fbe8:	681a      	ldr	r2, [r3, #0]
 801fbea:	683b      	ldr	r3, [r7, #0]
 801fbec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801fbee:	6879      	ldr	r1, [r7, #4]
 801fbf0:	2004      	movs	r0, #4
 801fbf2:	f7f5 fafd 	bl	80151f0 <memp_free>
}
 801fbf6:	bf00      	nop
 801fbf8:	3708      	adds	r7, #8
 801fbfa:	46bd      	mov	sp, r7
 801fbfc:	bd80      	pop	{r7, pc}
 801fbfe:	bf00      	nop
 801fc00:	20009100 	.word	0x20009100
 801fc04:	08024f54 	.word	0x08024f54
 801fc08:	0802501c 	.word	0x0802501c
 801fc0c:	08024f9c 	.word	0x08024f9c

0801fc10 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801fc10:	b580      	push	{r7, lr}
 801fc12:	b08c      	sub	sp, #48	; 0x30
 801fc14:	af00      	add	r7, sp, #0
 801fc16:	60f8      	str	r0, [r7, #12]
 801fc18:	60b9      	str	r1, [r7, #8]
 801fc1a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801fc1c:	2300      	movs	r3, #0
 801fc1e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801fc20:	2301      	movs	r3, #1
 801fc22:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801fc24:	68bb      	ldr	r3, [r7, #8]
 801fc26:	685b      	ldr	r3, [r3, #4]
 801fc28:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801fc2a:	69fb      	ldr	r3, [r7, #28]
 801fc2c:	885b      	ldrh	r3, [r3, #2]
 801fc2e:	b29b      	uxth	r3, r3
 801fc30:	4618      	mov	r0, r3
 801fc32:	f7f4 fdd5 	bl	80147e0 <lwip_htons>
 801fc36:	4603      	mov	r3, r0
 801fc38:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801fc3a:	69fb      	ldr	r3, [r7, #28]
 801fc3c:	781b      	ldrb	r3, [r3, #0]
 801fc3e:	f003 030f 	and.w	r3, r3, #15
 801fc42:	b2db      	uxtb	r3, r3
 801fc44:	009b      	lsls	r3, r3, #2
 801fc46:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801fc48:	7e7b      	ldrb	r3, [r7, #25]
 801fc4a:	b29b      	uxth	r3, r3
 801fc4c:	8b7a      	ldrh	r2, [r7, #26]
 801fc4e:	429a      	cmp	r2, r3
 801fc50:	d202      	bcs.n	801fc58 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fc52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fc56:	e135      	b.n	801fec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801fc58:	7e7b      	ldrb	r3, [r7, #25]
 801fc5a:	b29b      	uxth	r3, r3
 801fc5c:	8b7a      	ldrh	r2, [r7, #26]
 801fc5e:	1ad3      	subs	r3, r2, r3
 801fc60:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801fc62:	69fb      	ldr	r3, [r7, #28]
 801fc64:	88db      	ldrh	r3, [r3, #6]
 801fc66:	b29b      	uxth	r3, r3
 801fc68:	4618      	mov	r0, r3
 801fc6a:	f7f4 fdb9 	bl	80147e0 <lwip_htons>
 801fc6e:	4603      	mov	r3, r0
 801fc70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fc74:	b29b      	uxth	r3, r3
 801fc76:	00db      	lsls	r3, r3, #3
 801fc78:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801fc7a:	68bb      	ldr	r3, [r7, #8]
 801fc7c:	685b      	ldr	r3, [r3, #4]
 801fc7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801fc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fc82:	2200      	movs	r2, #0
 801fc84:	701a      	strb	r2, [r3, #0]
 801fc86:	2200      	movs	r2, #0
 801fc88:	705a      	strb	r2, [r3, #1]
 801fc8a:	2200      	movs	r2, #0
 801fc8c:	709a      	strb	r2, [r3, #2]
 801fc8e:	2200      	movs	r2, #0
 801fc90:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801fc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fc94:	8afa      	ldrh	r2, [r7, #22]
 801fc96:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801fc98:	8afa      	ldrh	r2, [r7, #22]
 801fc9a:	8b7b      	ldrh	r3, [r7, #26]
 801fc9c:	4413      	add	r3, r2
 801fc9e:	b29a      	uxth	r2, r3
 801fca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fca2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801fca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fca6:	88db      	ldrh	r3, [r3, #6]
 801fca8:	b29b      	uxth	r3, r3
 801fcaa:	8afa      	ldrh	r2, [r7, #22]
 801fcac:	429a      	cmp	r2, r3
 801fcae:	d902      	bls.n	801fcb6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fcb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fcb4:	e106      	b.n	801fec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801fcb6:	68fb      	ldr	r3, [r7, #12]
 801fcb8:	685b      	ldr	r3, [r3, #4]
 801fcba:	627b      	str	r3, [r7, #36]	; 0x24
 801fcbc:	e068      	b.n	801fd90 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801fcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fcc0:	685b      	ldr	r3, [r3, #4]
 801fcc2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801fcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fcc6:	889b      	ldrh	r3, [r3, #4]
 801fcc8:	b29a      	uxth	r2, r3
 801fcca:	693b      	ldr	r3, [r7, #16]
 801fccc:	889b      	ldrh	r3, [r3, #4]
 801fcce:	b29b      	uxth	r3, r3
 801fcd0:	429a      	cmp	r2, r3
 801fcd2:	d235      	bcs.n	801fd40 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801fcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fcd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fcd8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801fcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fcdc:	2b00      	cmp	r3, #0
 801fcde:	d020      	beq.n	801fd22 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801fce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fce2:	889b      	ldrh	r3, [r3, #4]
 801fce4:	b29a      	uxth	r2, r3
 801fce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fce8:	88db      	ldrh	r3, [r3, #6]
 801fcea:	b29b      	uxth	r3, r3
 801fcec:	429a      	cmp	r2, r3
 801fcee:	d307      	bcc.n	801fd00 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801fcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fcf2:	88db      	ldrh	r3, [r3, #6]
 801fcf4:	b29a      	uxth	r2, r3
 801fcf6:	693b      	ldr	r3, [r7, #16]
 801fcf8:	889b      	ldrh	r3, [r3, #4]
 801fcfa:	b29b      	uxth	r3, r3
 801fcfc:	429a      	cmp	r2, r3
 801fcfe:	d902      	bls.n	801fd06 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fd00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fd04:	e0de      	b.n	801fec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801fd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fd08:	68ba      	ldr	r2, [r7, #8]
 801fd0a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801fd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fd0e:	88db      	ldrh	r3, [r3, #6]
 801fd10:	b29a      	uxth	r2, r3
 801fd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd14:	889b      	ldrh	r3, [r3, #4]
 801fd16:	b29b      	uxth	r3, r3
 801fd18:	429a      	cmp	r2, r3
 801fd1a:	d03d      	beq.n	801fd98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801fd1c:	2300      	movs	r3, #0
 801fd1e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801fd20:	e03a      	b.n	801fd98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801fd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd24:	88db      	ldrh	r3, [r3, #6]
 801fd26:	b29a      	uxth	r2, r3
 801fd28:	693b      	ldr	r3, [r7, #16]
 801fd2a:	889b      	ldrh	r3, [r3, #4]
 801fd2c:	b29b      	uxth	r3, r3
 801fd2e:	429a      	cmp	r2, r3
 801fd30:	d902      	bls.n	801fd38 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fd32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fd36:	e0c5      	b.n	801fec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801fd38:	68fb      	ldr	r3, [r7, #12]
 801fd3a:	68ba      	ldr	r2, [r7, #8]
 801fd3c:	605a      	str	r2, [r3, #4]
      break;
 801fd3e:	e02b      	b.n	801fd98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801fd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd42:	889b      	ldrh	r3, [r3, #4]
 801fd44:	b29a      	uxth	r2, r3
 801fd46:	693b      	ldr	r3, [r7, #16]
 801fd48:	889b      	ldrh	r3, [r3, #4]
 801fd4a:	b29b      	uxth	r3, r3
 801fd4c:	429a      	cmp	r2, r3
 801fd4e:	d102      	bne.n	801fd56 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fd50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fd54:	e0b6      	b.n	801fec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801fd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd58:	889b      	ldrh	r3, [r3, #4]
 801fd5a:	b29a      	uxth	r2, r3
 801fd5c:	693b      	ldr	r3, [r7, #16]
 801fd5e:	88db      	ldrh	r3, [r3, #6]
 801fd60:	b29b      	uxth	r3, r3
 801fd62:	429a      	cmp	r2, r3
 801fd64:	d202      	bcs.n	801fd6c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fd66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fd6a:	e0ab      	b.n	801fec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801fd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fd6e:	2b00      	cmp	r3, #0
 801fd70:	d009      	beq.n	801fd86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801fd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fd74:	88db      	ldrh	r3, [r3, #6]
 801fd76:	b29a      	uxth	r2, r3
 801fd78:	693b      	ldr	r3, [r7, #16]
 801fd7a:	889b      	ldrh	r3, [r3, #4]
 801fd7c:	b29b      	uxth	r3, r3
 801fd7e:	429a      	cmp	r2, r3
 801fd80:	d001      	beq.n	801fd86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801fd82:	2300      	movs	r3, #0
 801fd84:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801fd86:	693b      	ldr	r3, [r7, #16]
 801fd88:	681b      	ldr	r3, [r3, #0]
 801fd8a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801fd8c:	693b      	ldr	r3, [r7, #16]
 801fd8e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801fd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd92:	2b00      	cmp	r3, #0
 801fd94:	d193      	bne.n	801fcbe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801fd96:	e000      	b.n	801fd9a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801fd98:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801fd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd9c:	2b00      	cmp	r3, #0
 801fd9e:	d12d      	bne.n	801fdfc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801fda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fda2:	2b00      	cmp	r3, #0
 801fda4:	d01c      	beq.n	801fde0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801fda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fda8:	88db      	ldrh	r3, [r3, #6]
 801fdaa:	b29a      	uxth	r2, r3
 801fdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdae:	889b      	ldrh	r3, [r3, #4]
 801fdb0:	b29b      	uxth	r3, r3
 801fdb2:	429a      	cmp	r2, r3
 801fdb4:	d906      	bls.n	801fdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801fdb6:	4b45      	ldr	r3, [pc, #276]	; (801fecc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801fdb8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801fdbc:	4944      	ldr	r1, [pc, #272]	; (801fed0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801fdbe:	4845      	ldr	r0, [pc, #276]	; (801fed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801fdc0:	f001 fbae 	bl	8021520 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801fdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fdc6:	68ba      	ldr	r2, [r7, #8]
 801fdc8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801fdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fdcc:	88db      	ldrh	r3, [r3, #6]
 801fdce:	b29a      	uxth	r2, r3
 801fdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdd2:	889b      	ldrh	r3, [r3, #4]
 801fdd4:	b29b      	uxth	r3, r3
 801fdd6:	429a      	cmp	r2, r3
 801fdd8:	d010      	beq.n	801fdfc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801fdda:	2300      	movs	r3, #0
 801fddc:	623b      	str	r3, [r7, #32]
 801fdde:	e00d      	b.n	801fdfc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801fde0:	68fb      	ldr	r3, [r7, #12]
 801fde2:	685b      	ldr	r3, [r3, #4]
 801fde4:	2b00      	cmp	r3, #0
 801fde6:	d006      	beq.n	801fdf6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801fde8:	4b38      	ldr	r3, [pc, #224]	; (801fecc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801fdea:	f240 12bf 	movw	r2, #447	; 0x1bf
 801fdee:	493a      	ldr	r1, [pc, #232]	; (801fed8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801fdf0:	4838      	ldr	r0, [pc, #224]	; (801fed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801fdf2:	f001 fb95 	bl	8021520 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801fdf6:	68fb      	ldr	r3, [r7, #12]
 801fdf8:	68ba      	ldr	r2, [r7, #8]
 801fdfa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801fdfc:	687b      	ldr	r3, [r7, #4]
 801fdfe:	2b00      	cmp	r3, #0
 801fe00:	d105      	bne.n	801fe0e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801fe02:	68fb      	ldr	r3, [r7, #12]
 801fe04:	7f9b      	ldrb	r3, [r3, #30]
 801fe06:	f003 0301 	and.w	r3, r3, #1
 801fe0a:	2b00      	cmp	r3, #0
 801fe0c:	d059      	beq.n	801fec2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801fe0e:	6a3b      	ldr	r3, [r7, #32]
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	d04f      	beq.n	801feb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801fe14:	68fb      	ldr	r3, [r7, #12]
 801fe16:	685b      	ldr	r3, [r3, #4]
 801fe18:	2b00      	cmp	r3, #0
 801fe1a:	d006      	beq.n	801fe2a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801fe1c:	68fb      	ldr	r3, [r7, #12]
 801fe1e:	685b      	ldr	r3, [r3, #4]
 801fe20:	685b      	ldr	r3, [r3, #4]
 801fe22:	889b      	ldrh	r3, [r3, #4]
 801fe24:	b29b      	uxth	r3, r3
 801fe26:	2b00      	cmp	r3, #0
 801fe28:	d002      	beq.n	801fe30 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801fe2a:	2300      	movs	r3, #0
 801fe2c:	623b      	str	r3, [r7, #32]
 801fe2e:	e041      	b.n	801feb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801fe30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe32:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801fe34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe36:	681b      	ldr	r3, [r3, #0]
 801fe38:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801fe3a:	e012      	b.n	801fe62 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801fe3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe3e:	685b      	ldr	r3, [r3, #4]
 801fe40:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801fe42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe44:	88db      	ldrh	r3, [r3, #6]
 801fe46:	b29a      	uxth	r2, r3
 801fe48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe4a:	889b      	ldrh	r3, [r3, #4]
 801fe4c:	b29b      	uxth	r3, r3
 801fe4e:	429a      	cmp	r2, r3
 801fe50:	d002      	beq.n	801fe58 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801fe52:	2300      	movs	r3, #0
 801fe54:	623b      	str	r3, [r7, #32]
            break;
 801fe56:	e007      	b.n	801fe68 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801fe58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe5a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801fe5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe5e:	681b      	ldr	r3, [r3, #0]
 801fe60:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801fe62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe64:	2b00      	cmp	r3, #0
 801fe66:	d1e9      	bne.n	801fe3c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801fe68:	6a3b      	ldr	r3, [r7, #32]
 801fe6a:	2b00      	cmp	r3, #0
 801fe6c:	d022      	beq.n	801feb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801fe6e:	68fb      	ldr	r3, [r7, #12]
 801fe70:	685b      	ldr	r3, [r3, #4]
 801fe72:	2b00      	cmp	r3, #0
 801fe74:	d106      	bne.n	801fe84 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801fe76:	4b15      	ldr	r3, [pc, #84]	; (801fecc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801fe78:	f240 12df 	movw	r2, #479	; 0x1df
 801fe7c:	4917      	ldr	r1, [pc, #92]	; (801fedc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801fe7e:	4815      	ldr	r0, [pc, #84]	; (801fed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801fe80:	f001 fb4e 	bl	8021520 <iprintf>
          LWIP_ASSERT("sanity check",
 801fe84:	68fb      	ldr	r3, [r7, #12]
 801fe86:	685b      	ldr	r3, [r3, #4]
 801fe88:	685b      	ldr	r3, [r3, #4]
 801fe8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fe8c:	429a      	cmp	r2, r3
 801fe8e:	d106      	bne.n	801fe9e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801fe90:	4b0e      	ldr	r3, [pc, #56]	; (801fecc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801fe92:	f240 12e1 	movw	r2, #481	; 0x1e1
 801fe96:	4911      	ldr	r1, [pc, #68]	; (801fedc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801fe98:	480e      	ldr	r0, [pc, #56]	; (801fed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801fe9a:	f001 fb41 	bl	8021520 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801fe9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fea0:	681b      	ldr	r3, [r3, #0]
 801fea2:	2b00      	cmp	r3, #0
 801fea4:	d006      	beq.n	801feb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801fea6:	4b09      	ldr	r3, [pc, #36]	; (801fecc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801fea8:	f240 12e3 	movw	r2, #483	; 0x1e3
 801feac:	490c      	ldr	r1, [pc, #48]	; (801fee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801feae:	4809      	ldr	r0, [pc, #36]	; (801fed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801feb0:	f001 fb36 	bl	8021520 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801feb4:	6a3b      	ldr	r3, [r7, #32]
 801feb6:	2b00      	cmp	r3, #0
 801feb8:	bf14      	ite	ne
 801feba:	2301      	movne	r3, #1
 801febc:	2300      	moveq	r3, #0
 801febe:	b2db      	uxtb	r3, r3
 801fec0:	e000      	b.n	801fec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801fec2:	2300      	movs	r3, #0
}
 801fec4:	4618      	mov	r0, r3
 801fec6:	3730      	adds	r7, #48	; 0x30
 801fec8:	46bd      	mov	sp, r7
 801feca:	bd80      	pop	{r7, pc}
 801fecc:	08024f54 	.word	0x08024f54
 801fed0:	08025038 	.word	0x08025038
 801fed4:	08024f9c 	.word	0x08024f9c
 801fed8:	08025058 	.word	0x08025058
 801fedc:	08025090 	.word	0x08025090
 801fee0:	080250a0 	.word	0x080250a0

0801fee4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801fee4:	b580      	push	{r7, lr}
 801fee6:	b08e      	sub	sp, #56	; 0x38
 801fee8:	af00      	add	r7, sp, #0
 801feea:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801feec:	687b      	ldr	r3, [r7, #4]
 801feee:	685b      	ldr	r3, [r3, #4]
 801fef0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801fef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fef4:	781b      	ldrb	r3, [r3, #0]
 801fef6:	f003 030f 	and.w	r3, r3, #15
 801fefa:	b2db      	uxtb	r3, r3
 801fefc:	009b      	lsls	r3, r3, #2
 801fefe:	b2db      	uxtb	r3, r3
 801ff00:	2b14      	cmp	r3, #20
 801ff02:	f040 8167 	bne.w	80201d4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801ff06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ff08:	88db      	ldrh	r3, [r3, #6]
 801ff0a:	b29b      	uxth	r3, r3
 801ff0c:	4618      	mov	r0, r3
 801ff0e:	f7f4 fc67 	bl	80147e0 <lwip_htons>
 801ff12:	4603      	mov	r3, r0
 801ff14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ff18:	b29b      	uxth	r3, r3
 801ff1a:	00db      	lsls	r3, r3, #3
 801ff1c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ff1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ff20:	885b      	ldrh	r3, [r3, #2]
 801ff22:	b29b      	uxth	r3, r3
 801ff24:	4618      	mov	r0, r3
 801ff26:	f7f4 fc5b 	bl	80147e0 <lwip_htons>
 801ff2a:	4603      	mov	r3, r0
 801ff2c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801ff2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ff30:	781b      	ldrb	r3, [r3, #0]
 801ff32:	f003 030f 	and.w	r3, r3, #15
 801ff36:	b2db      	uxtb	r3, r3
 801ff38:	009b      	lsls	r3, r3, #2
 801ff3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801ff3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ff42:	b29b      	uxth	r3, r3
 801ff44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ff46:	429a      	cmp	r2, r3
 801ff48:	f0c0 8146 	bcc.w	80201d8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801ff4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ff50:	b29b      	uxth	r3, r3
 801ff52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ff54:	1ad3      	subs	r3, r2, r3
 801ff56:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801ff58:	6878      	ldr	r0, [r7, #4]
 801ff5a:	f7f6 f89d 	bl	8016098 <pbuf_clen>
 801ff5e:	4603      	mov	r3, r0
 801ff60:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801ff62:	4ba3      	ldr	r3, [pc, #652]	; (80201f0 <ip4_reass+0x30c>)
 801ff64:	881b      	ldrh	r3, [r3, #0]
 801ff66:	461a      	mov	r2, r3
 801ff68:	8c3b      	ldrh	r3, [r7, #32]
 801ff6a:	4413      	add	r3, r2
 801ff6c:	2b0a      	cmp	r3, #10
 801ff6e:	dd10      	ble.n	801ff92 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ff70:	8c3b      	ldrh	r3, [r7, #32]
 801ff72:	4619      	mov	r1, r3
 801ff74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ff76:	f7ff fd81 	bl	801fa7c <ip_reass_remove_oldest_datagram>
 801ff7a:	4603      	mov	r3, r0
 801ff7c:	2b00      	cmp	r3, #0
 801ff7e:	f000 812d 	beq.w	80201dc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801ff82:	4b9b      	ldr	r3, [pc, #620]	; (80201f0 <ip4_reass+0x30c>)
 801ff84:	881b      	ldrh	r3, [r3, #0]
 801ff86:	461a      	mov	r2, r3
 801ff88:	8c3b      	ldrh	r3, [r7, #32]
 801ff8a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ff8c:	2b0a      	cmp	r3, #10
 801ff8e:	f300 8125 	bgt.w	80201dc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ff92:	4b98      	ldr	r3, [pc, #608]	; (80201f4 <ip4_reass+0x310>)
 801ff94:	681b      	ldr	r3, [r3, #0]
 801ff96:	633b      	str	r3, [r7, #48]	; 0x30
 801ff98:	e015      	b.n	801ffc6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801ff9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ff9c:	695a      	ldr	r2, [r3, #20]
 801ff9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ffa0:	68db      	ldr	r3, [r3, #12]
 801ffa2:	429a      	cmp	r2, r3
 801ffa4:	d10c      	bne.n	801ffc0 <ip4_reass+0xdc>
 801ffa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffa8:	699a      	ldr	r2, [r3, #24]
 801ffaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ffac:	691b      	ldr	r3, [r3, #16]
 801ffae:	429a      	cmp	r2, r3
 801ffb0:	d106      	bne.n	801ffc0 <ip4_reass+0xdc>
 801ffb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffb4:	899a      	ldrh	r2, [r3, #12]
 801ffb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ffb8:	889b      	ldrh	r3, [r3, #4]
 801ffba:	b29b      	uxth	r3, r3
 801ffbc:	429a      	cmp	r2, r3
 801ffbe:	d006      	beq.n	801ffce <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ffc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffc2:	681b      	ldr	r3, [r3, #0]
 801ffc4:	633b      	str	r3, [r7, #48]	; 0x30
 801ffc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	d1e6      	bne.n	801ff9a <ip4_reass+0xb6>
 801ffcc:	e000      	b.n	801ffd0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801ffce:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801ffd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffd2:	2b00      	cmp	r3, #0
 801ffd4:	d109      	bne.n	801ffea <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801ffd6:	8c3b      	ldrh	r3, [r7, #32]
 801ffd8:	4619      	mov	r1, r3
 801ffda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ffdc:	f7ff fdb0 	bl	801fb40 <ip_reass_enqueue_new_datagram>
 801ffe0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801ffe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffe4:	2b00      	cmp	r3, #0
 801ffe6:	d11c      	bne.n	8020022 <ip4_reass+0x13e>
      goto nullreturn;
 801ffe8:	e0f9      	b.n	80201de <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801ffea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ffec:	88db      	ldrh	r3, [r3, #6]
 801ffee:	b29b      	uxth	r3, r3
 801fff0:	4618      	mov	r0, r3
 801fff2:	f7f4 fbf5 	bl	80147e0 <lwip_htons>
 801fff6:	4603      	mov	r3, r0
 801fff8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fffc:	2b00      	cmp	r3, #0
 801fffe:	d110      	bne.n	8020022 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8020000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020002:	89db      	ldrh	r3, [r3, #14]
 8020004:	4618      	mov	r0, r3
 8020006:	f7f4 fbeb 	bl	80147e0 <lwip_htons>
 802000a:	4603      	mov	r3, r0
 802000c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8020010:	2b00      	cmp	r3, #0
 8020012:	d006      	beq.n	8020022 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8020014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020016:	3308      	adds	r3, #8
 8020018:	2214      	movs	r2, #20
 802001a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802001c:	4618      	mov	r0, r3
 802001e:	f001 f9c4 	bl	80213aa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8020022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020024:	88db      	ldrh	r3, [r3, #6]
 8020026:	b29b      	uxth	r3, r3
 8020028:	f003 0320 	and.w	r3, r3, #32
 802002c:	2b00      	cmp	r3, #0
 802002e:	bf0c      	ite	eq
 8020030:	2301      	moveq	r3, #1
 8020032:	2300      	movne	r3, #0
 8020034:	b2db      	uxtb	r3, r3
 8020036:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8020038:	69fb      	ldr	r3, [r7, #28]
 802003a:	2b00      	cmp	r3, #0
 802003c:	d00e      	beq.n	802005c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 802003e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8020040:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8020042:	4413      	add	r3, r2
 8020044:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8020046:	8b7a      	ldrh	r2, [r7, #26]
 8020048:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802004a:	429a      	cmp	r2, r3
 802004c:	f0c0 80a0 	bcc.w	8020190 <ip4_reass+0x2ac>
 8020050:	8b7b      	ldrh	r3, [r7, #26]
 8020052:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8020056:	4293      	cmp	r3, r2
 8020058:	f200 809a 	bhi.w	8020190 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 802005c:	69fa      	ldr	r2, [r7, #28]
 802005e:	6879      	ldr	r1, [r7, #4]
 8020060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020062:	f7ff fdd5 	bl	801fc10 <ip_reass_chain_frag_into_datagram_and_validate>
 8020066:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8020068:	697b      	ldr	r3, [r7, #20]
 802006a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802006e:	f000 8091 	beq.w	8020194 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8020072:	4b5f      	ldr	r3, [pc, #380]	; (80201f0 <ip4_reass+0x30c>)
 8020074:	881a      	ldrh	r2, [r3, #0]
 8020076:	8c3b      	ldrh	r3, [r7, #32]
 8020078:	4413      	add	r3, r2
 802007a:	b29a      	uxth	r2, r3
 802007c:	4b5c      	ldr	r3, [pc, #368]	; (80201f0 <ip4_reass+0x30c>)
 802007e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8020080:	69fb      	ldr	r3, [r7, #28]
 8020082:	2b00      	cmp	r3, #0
 8020084:	d00d      	beq.n	80200a2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8020086:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8020088:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802008a:	4413      	add	r3, r2
 802008c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 802008e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020090:	8a7a      	ldrh	r2, [r7, #18]
 8020092:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8020094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020096:	7f9b      	ldrb	r3, [r3, #30]
 8020098:	f043 0301 	orr.w	r3, r3, #1
 802009c:	b2da      	uxtb	r2, r3
 802009e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200a0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80200a2:	697b      	ldr	r3, [r7, #20]
 80200a4:	2b01      	cmp	r3, #1
 80200a6:	d171      	bne.n	802018c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80200a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200aa:	8b9b      	ldrh	r3, [r3, #28]
 80200ac:	3314      	adds	r3, #20
 80200ae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80200b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200b2:	685b      	ldr	r3, [r3, #4]
 80200b4:	685b      	ldr	r3, [r3, #4]
 80200b6:	681b      	ldr	r3, [r3, #0]
 80200b8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80200ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200bc:	685b      	ldr	r3, [r3, #4]
 80200be:	685b      	ldr	r3, [r3, #4]
 80200c0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80200c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200c4:	3308      	adds	r3, #8
 80200c6:	2214      	movs	r2, #20
 80200c8:	4619      	mov	r1, r3
 80200ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80200cc:	f001 f96d 	bl	80213aa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80200d0:	8a3b      	ldrh	r3, [r7, #16]
 80200d2:	4618      	mov	r0, r3
 80200d4:	f7f4 fb84 	bl	80147e0 <lwip_htons>
 80200d8:	4603      	mov	r3, r0
 80200da:	461a      	mov	r2, r3
 80200dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80200de:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80200e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80200e2:	2200      	movs	r2, #0
 80200e4:	719a      	strb	r2, [r3, #6]
 80200e6:	2200      	movs	r2, #0
 80200e8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80200ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80200ec:	2200      	movs	r2, #0
 80200ee:	729a      	strb	r2, [r3, #10]
 80200f0:	2200      	movs	r2, #0
 80200f2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80200f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200f6:	685b      	ldr	r3, [r3, #4]
 80200f8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80200fa:	e00d      	b.n	8020118 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80200fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80200fe:	685b      	ldr	r3, [r3, #4]
 8020100:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8020102:	2114      	movs	r1, #20
 8020104:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8020106:	f7f5 feb3 	bl	8015e70 <pbuf_remove_header>
      pbuf_cat(p, r);
 802010a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802010c:	6878      	ldr	r0, [r7, #4]
 802010e:	f7f6 f803 	bl	8016118 <pbuf_cat>
      r = iprh->next_pbuf;
 8020112:	68fb      	ldr	r3, [r7, #12]
 8020114:	681b      	ldr	r3, [r3, #0]
 8020116:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8020118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802011a:	2b00      	cmp	r3, #0
 802011c:	d1ee      	bne.n	80200fc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 802011e:	4b35      	ldr	r3, [pc, #212]	; (80201f4 <ip4_reass+0x310>)
 8020120:	681b      	ldr	r3, [r3, #0]
 8020122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020124:	429a      	cmp	r2, r3
 8020126:	d102      	bne.n	802012e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8020128:	2300      	movs	r3, #0
 802012a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802012c:	e010      	b.n	8020150 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802012e:	4b31      	ldr	r3, [pc, #196]	; (80201f4 <ip4_reass+0x310>)
 8020130:	681b      	ldr	r3, [r3, #0]
 8020132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020134:	e007      	b.n	8020146 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8020136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020138:	681b      	ldr	r3, [r3, #0]
 802013a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802013c:	429a      	cmp	r2, r3
 802013e:	d006      	beq.n	802014e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8020140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020142:	681b      	ldr	r3, [r3, #0]
 8020144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020148:	2b00      	cmp	r3, #0
 802014a:	d1f4      	bne.n	8020136 <ip4_reass+0x252>
 802014c:	e000      	b.n	8020150 <ip4_reass+0x26c>
          break;
 802014e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8020150:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020154:	f7ff fd2e 	bl	801fbb4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8020158:	6878      	ldr	r0, [r7, #4]
 802015a:	f7f5 ff9d 	bl	8016098 <pbuf_clen>
 802015e:	4603      	mov	r3, r0
 8020160:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8020162:	4b23      	ldr	r3, [pc, #140]	; (80201f0 <ip4_reass+0x30c>)
 8020164:	881b      	ldrh	r3, [r3, #0]
 8020166:	8c3a      	ldrh	r2, [r7, #32]
 8020168:	429a      	cmp	r2, r3
 802016a:	d906      	bls.n	802017a <ip4_reass+0x296>
 802016c:	4b22      	ldr	r3, [pc, #136]	; (80201f8 <ip4_reass+0x314>)
 802016e:	f240 229b 	movw	r2, #667	; 0x29b
 8020172:	4922      	ldr	r1, [pc, #136]	; (80201fc <ip4_reass+0x318>)
 8020174:	4822      	ldr	r0, [pc, #136]	; (8020200 <ip4_reass+0x31c>)
 8020176:	f001 f9d3 	bl	8021520 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 802017a:	4b1d      	ldr	r3, [pc, #116]	; (80201f0 <ip4_reass+0x30c>)
 802017c:	881a      	ldrh	r2, [r3, #0]
 802017e:	8c3b      	ldrh	r3, [r7, #32]
 8020180:	1ad3      	subs	r3, r2, r3
 8020182:	b29a      	uxth	r2, r3
 8020184:	4b1a      	ldr	r3, [pc, #104]	; (80201f0 <ip4_reass+0x30c>)
 8020186:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8020188:	687b      	ldr	r3, [r7, #4]
 802018a:	e02c      	b.n	80201e6 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 802018c:	2300      	movs	r3, #0
 802018e:	e02a      	b.n	80201e6 <ip4_reass+0x302>

nullreturn_ipr:
 8020190:	bf00      	nop
 8020192:	e000      	b.n	8020196 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8020194:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8020196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020198:	2b00      	cmp	r3, #0
 802019a:	d106      	bne.n	80201aa <ip4_reass+0x2c6>
 802019c:	4b16      	ldr	r3, [pc, #88]	; (80201f8 <ip4_reass+0x314>)
 802019e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80201a2:	4918      	ldr	r1, [pc, #96]	; (8020204 <ip4_reass+0x320>)
 80201a4:	4816      	ldr	r0, [pc, #88]	; (8020200 <ip4_reass+0x31c>)
 80201a6:	f001 f9bb 	bl	8021520 <iprintf>
  if (ipr->p == NULL) {
 80201aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201ac:	685b      	ldr	r3, [r3, #4]
 80201ae:	2b00      	cmp	r3, #0
 80201b0:	d114      	bne.n	80201dc <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80201b2:	4b10      	ldr	r3, [pc, #64]	; (80201f4 <ip4_reass+0x310>)
 80201b4:	681b      	ldr	r3, [r3, #0]
 80201b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80201b8:	429a      	cmp	r2, r3
 80201ba:	d006      	beq.n	80201ca <ip4_reass+0x2e6>
 80201bc:	4b0e      	ldr	r3, [pc, #56]	; (80201f8 <ip4_reass+0x314>)
 80201be:	f240 22ab 	movw	r2, #683	; 0x2ab
 80201c2:	4911      	ldr	r1, [pc, #68]	; (8020208 <ip4_reass+0x324>)
 80201c4:	480e      	ldr	r0, [pc, #56]	; (8020200 <ip4_reass+0x31c>)
 80201c6:	f001 f9ab 	bl	8021520 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80201ca:	2100      	movs	r1, #0
 80201cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80201ce:	f7ff fcf1 	bl	801fbb4 <ip_reass_dequeue_datagram>
 80201d2:	e004      	b.n	80201de <ip4_reass+0x2fa>
    goto nullreturn;
 80201d4:	bf00      	nop
 80201d6:	e002      	b.n	80201de <ip4_reass+0x2fa>
    goto nullreturn;
 80201d8:	bf00      	nop
 80201da:	e000      	b.n	80201de <ip4_reass+0x2fa>
  }

nullreturn:
 80201dc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80201de:	6878      	ldr	r0, [r7, #4]
 80201e0:	f7f5 fecc 	bl	8015f7c <pbuf_free>
  return NULL;
 80201e4:	2300      	movs	r3, #0
}
 80201e6:	4618      	mov	r0, r3
 80201e8:	3738      	adds	r7, #56	; 0x38
 80201ea:	46bd      	mov	sp, r7
 80201ec:	bd80      	pop	{r7, pc}
 80201ee:	bf00      	nop
 80201f0:	20009104 	.word	0x20009104
 80201f4:	20009100 	.word	0x20009100
 80201f8:	08024f54 	.word	0x08024f54
 80201fc:	080250c4 	.word	0x080250c4
 8020200:	08024f9c 	.word	0x08024f9c
 8020204:	080250e0 	.word	0x080250e0
 8020208:	080250ec 	.word	0x080250ec

0802020c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 802020c:	b580      	push	{r7, lr}
 802020e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8020210:	2005      	movs	r0, #5
 8020212:	f7f4 ff9b 	bl	801514c <memp_malloc>
 8020216:	4603      	mov	r3, r0
}
 8020218:	4618      	mov	r0, r3
 802021a:	bd80      	pop	{r7, pc}

0802021c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 802021c:	b580      	push	{r7, lr}
 802021e:	b082      	sub	sp, #8
 8020220:	af00      	add	r7, sp, #0
 8020222:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	2b00      	cmp	r3, #0
 8020228:	d106      	bne.n	8020238 <ip_frag_free_pbuf_custom_ref+0x1c>
 802022a:	4b07      	ldr	r3, [pc, #28]	; (8020248 <ip_frag_free_pbuf_custom_ref+0x2c>)
 802022c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8020230:	4906      	ldr	r1, [pc, #24]	; (802024c <ip_frag_free_pbuf_custom_ref+0x30>)
 8020232:	4807      	ldr	r0, [pc, #28]	; (8020250 <ip_frag_free_pbuf_custom_ref+0x34>)
 8020234:	f001 f974 	bl	8021520 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8020238:	6879      	ldr	r1, [r7, #4]
 802023a:	2005      	movs	r0, #5
 802023c:	f7f4 ffd8 	bl	80151f0 <memp_free>
}
 8020240:	bf00      	nop
 8020242:	3708      	adds	r7, #8
 8020244:	46bd      	mov	sp, r7
 8020246:	bd80      	pop	{r7, pc}
 8020248:	08024f54 	.word	0x08024f54
 802024c:	0802510c 	.word	0x0802510c
 8020250:	08024f9c 	.word	0x08024f9c

08020254 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8020254:	b580      	push	{r7, lr}
 8020256:	b084      	sub	sp, #16
 8020258:	af00      	add	r7, sp, #0
 802025a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 802025c:	687b      	ldr	r3, [r7, #4]
 802025e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8020260:	68fb      	ldr	r3, [r7, #12]
 8020262:	2b00      	cmp	r3, #0
 8020264:	d106      	bne.n	8020274 <ipfrag_free_pbuf_custom+0x20>
 8020266:	4b11      	ldr	r3, [pc, #68]	; (80202ac <ipfrag_free_pbuf_custom+0x58>)
 8020268:	f240 22ce 	movw	r2, #718	; 0x2ce
 802026c:	4910      	ldr	r1, [pc, #64]	; (80202b0 <ipfrag_free_pbuf_custom+0x5c>)
 802026e:	4811      	ldr	r0, [pc, #68]	; (80202b4 <ipfrag_free_pbuf_custom+0x60>)
 8020270:	f001 f956 	bl	8021520 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8020274:	68fa      	ldr	r2, [r7, #12]
 8020276:	687b      	ldr	r3, [r7, #4]
 8020278:	429a      	cmp	r2, r3
 802027a:	d006      	beq.n	802028a <ipfrag_free_pbuf_custom+0x36>
 802027c:	4b0b      	ldr	r3, [pc, #44]	; (80202ac <ipfrag_free_pbuf_custom+0x58>)
 802027e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8020282:	490d      	ldr	r1, [pc, #52]	; (80202b8 <ipfrag_free_pbuf_custom+0x64>)
 8020284:	480b      	ldr	r0, [pc, #44]	; (80202b4 <ipfrag_free_pbuf_custom+0x60>)
 8020286:	f001 f94b 	bl	8021520 <iprintf>
  if (pcr->original != NULL) {
 802028a:	68fb      	ldr	r3, [r7, #12]
 802028c:	695b      	ldr	r3, [r3, #20]
 802028e:	2b00      	cmp	r3, #0
 8020290:	d004      	beq.n	802029c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8020292:	68fb      	ldr	r3, [r7, #12]
 8020294:	695b      	ldr	r3, [r3, #20]
 8020296:	4618      	mov	r0, r3
 8020298:	f7f5 fe70 	bl	8015f7c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 802029c:	68f8      	ldr	r0, [r7, #12]
 802029e:	f7ff ffbd 	bl	802021c <ip_frag_free_pbuf_custom_ref>
}
 80202a2:	bf00      	nop
 80202a4:	3710      	adds	r7, #16
 80202a6:	46bd      	mov	sp, r7
 80202a8:	bd80      	pop	{r7, pc}
 80202aa:	bf00      	nop
 80202ac:	08024f54 	.word	0x08024f54
 80202b0:	08025118 	.word	0x08025118
 80202b4:	08024f9c 	.word	0x08024f9c
 80202b8:	08025124 	.word	0x08025124

080202bc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80202bc:	b580      	push	{r7, lr}
 80202be:	b094      	sub	sp, #80	; 0x50
 80202c0:	af02      	add	r7, sp, #8
 80202c2:	60f8      	str	r0, [r7, #12]
 80202c4:	60b9      	str	r1, [r7, #8]
 80202c6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80202c8:	2300      	movs	r3, #0
 80202ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80202ce:	68bb      	ldr	r3, [r7, #8]
 80202d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80202d2:	3b14      	subs	r3, #20
 80202d4:	2b00      	cmp	r3, #0
 80202d6:	da00      	bge.n	80202da <ip4_frag+0x1e>
 80202d8:	3307      	adds	r3, #7
 80202da:	10db      	asrs	r3, r3, #3
 80202dc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80202de:	2314      	movs	r3, #20
 80202e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80202e2:	68fb      	ldr	r3, [r7, #12]
 80202e4:	685b      	ldr	r3, [r3, #4]
 80202e6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80202e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80202ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80202ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80202ee:	781b      	ldrb	r3, [r3, #0]
 80202f0:	f003 030f 	and.w	r3, r3, #15
 80202f4:	b2db      	uxtb	r3, r3
 80202f6:	009b      	lsls	r3, r3, #2
 80202f8:	b2db      	uxtb	r3, r3
 80202fa:	2b14      	cmp	r3, #20
 80202fc:	d002      	beq.n	8020304 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80202fe:	f06f 0305 	mvn.w	r3, #5
 8020302:	e10f      	b.n	8020524 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8020304:	68fb      	ldr	r3, [r7, #12]
 8020306:	895b      	ldrh	r3, [r3, #10]
 8020308:	2b13      	cmp	r3, #19
 802030a:	d809      	bhi.n	8020320 <ip4_frag+0x64>
 802030c:	4b87      	ldr	r3, [pc, #540]	; (802052c <ip4_frag+0x270>)
 802030e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8020312:	4987      	ldr	r1, [pc, #540]	; (8020530 <ip4_frag+0x274>)
 8020314:	4887      	ldr	r0, [pc, #540]	; (8020534 <ip4_frag+0x278>)
 8020316:	f001 f903 	bl	8021520 <iprintf>
 802031a:	f06f 0305 	mvn.w	r3, #5
 802031e:	e101      	b.n	8020524 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8020320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020322:	88db      	ldrh	r3, [r3, #6]
 8020324:	b29b      	uxth	r3, r3
 8020326:	4618      	mov	r0, r3
 8020328:	f7f4 fa5a 	bl	80147e0 <lwip_htons>
 802032c:	4603      	mov	r3, r0
 802032e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8020330:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020332:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020336:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 802033a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802033c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8020340:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8020342:	68fb      	ldr	r3, [r7, #12]
 8020344:	891b      	ldrh	r3, [r3, #8]
 8020346:	3b14      	subs	r3, #20
 8020348:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 802034c:	e0e0      	b.n	8020510 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802034e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020350:	00db      	lsls	r3, r3, #3
 8020352:	b29b      	uxth	r3, r3
 8020354:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8020358:	4293      	cmp	r3, r2
 802035a:	bf28      	it	cs
 802035c:	4613      	movcs	r3, r2
 802035e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8020360:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020364:	2114      	movs	r1, #20
 8020366:	200e      	movs	r0, #14
 8020368:	f7f5 fb28 	bl	80159bc <pbuf_alloc>
 802036c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 802036e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020370:	2b00      	cmp	r3, #0
 8020372:	f000 80d4 	beq.w	802051e <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8020376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020378:	895b      	ldrh	r3, [r3, #10]
 802037a:	2b13      	cmp	r3, #19
 802037c:	d806      	bhi.n	802038c <ip4_frag+0xd0>
 802037e:	4b6b      	ldr	r3, [pc, #428]	; (802052c <ip4_frag+0x270>)
 8020380:	f240 3225 	movw	r2, #805	; 0x325
 8020384:	496c      	ldr	r1, [pc, #432]	; (8020538 <ip4_frag+0x27c>)
 8020386:	486b      	ldr	r0, [pc, #428]	; (8020534 <ip4_frag+0x278>)
 8020388:	f001 f8ca 	bl	8021520 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 802038c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802038e:	685b      	ldr	r3, [r3, #4]
 8020390:	2214      	movs	r2, #20
 8020392:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8020394:	4618      	mov	r0, r3
 8020396:	f001 f808 	bl	80213aa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 802039a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802039c:	685b      	ldr	r3, [r3, #4]
 802039e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80203a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80203a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80203a6:	e064      	b.n	8020472 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80203a8:	68fb      	ldr	r3, [r7, #12]
 80203aa:	895a      	ldrh	r2, [r3, #10]
 80203ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80203ae:	1ad3      	subs	r3, r2, r3
 80203b0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80203b2:	68fb      	ldr	r3, [r7, #12]
 80203b4:	895b      	ldrh	r3, [r3, #10]
 80203b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80203b8:	429a      	cmp	r2, r3
 80203ba:	d906      	bls.n	80203ca <ip4_frag+0x10e>
 80203bc:	4b5b      	ldr	r3, [pc, #364]	; (802052c <ip4_frag+0x270>)
 80203be:	f240 322d 	movw	r2, #813	; 0x32d
 80203c2:	495e      	ldr	r1, [pc, #376]	; (802053c <ip4_frag+0x280>)
 80203c4:	485b      	ldr	r0, [pc, #364]	; (8020534 <ip4_frag+0x278>)
 80203c6:	f001 f8ab 	bl	8021520 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80203ca:	8bfa      	ldrh	r2, [r7, #30]
 80203cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80203d0:	4293      	cmp	r3, r2
 80203d2:	bf28      	it	cs
 80203d4:	4613      	movcs	r3, r2
 80203d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80203da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80203de:	2b00      	cmp	r3, #0
 80203e0:	d105      	bne.n	80203ee <ip4_frag+0x132>
        poff = 0;
 80203e2:	2300      	movs	r3, #0
 80203e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80203e6:	68fb      	ldr	r3, [r7, #12]
 80203e8:	681b      	ldr	r3, [r3, #0]
 80203ea:	60fb      	str	r3, [r7, #12]
        continue;
 80203ec:	e041      	b.n	8020472 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80203ee:	f7ff ff0d 	bl	802020c <ip_frag_alloc_pbuf_custom_ref>
 80203f2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80203f4:	69bb      	ldr	r3, [r7, #24]
 80203f6:	2b00      	cmp	r3, #0
 80203f8:	d103      	bne.n	8020402 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80203fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80203fc:	f7f5 fdbe 	bl	8015f7c <pbuf_free>
        goto memerr;
 8020400:	e08e      	b.n	8020520 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8020402:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8020404:	68fb      	ldr	r3, [r7, #12]
 8020406:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8020408:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802040a:	4413      	add	r3, r2
 802040c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8020410:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8020414:	9201      	str	r2, [sp, #4]
 8020416:	9300      	str	r3, [sp, #0]
 8020418:	4603      	mov	r3, r0
 802041a:	2241      	movs	r2, #65	; 0x41
 802041c:	2000      	movs	r0, #0
 802041e:	f7f5 fbf3 	bl	8015c08 <pbuf_alloced_custom>
 8020422:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8020424:	697b      	ldr	r3, [r7, #20]
 8020426:	2b00      	cmp	r3, #0
 8020428:	d106      	bne.n	8020438 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 802042a:	69b8      	ldr	r0, [r7, #24]
 802042c:	f7ff fef6 	bl	802021c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8020430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020432:	f7f5 fda3 	bl	8015f7c <pbuf_free>
        goto memerr;
 8020436:	e073      	b.n	8020520 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8020438:	68f8      	ldr	r0, [r7, #12]
 802043a:	f7f5 fe45 	bl	80160c8 <pbuf_ref>
      pcr->original = p;
 802043e:	69bb      	ldr	r3, [r7, #24]
 8020440:	68fa      	ldr	r2, [r7, #12]
 8020442:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8020444:	69bb      	ldr	r3, [r7, #24]
 8020446:	4a3e      	ldr	r2, [pc, #248]	; (8020540 <ip4_frag+0x284>)
 8020448:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 802044a:	6979      	ldr	r1, [r7, #20]
 802044c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802044e:	f7f5 fe63 	bl	8016118 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8020452:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8020456:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802045a:	1ad3      	subs	r3, r2, r3
 802045c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8020460:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8020464:	2b00      	cmp	r3, #0
 8020466:	d004      	beq.n	8020472 <ip4_frag+0x1b6>
        poff = 0;
 8020468:	2300      	movs	r3, #0
 802046a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 802046c:	68fb      	ldr	r3, [r7, #12]
 802046e:	681b      	ldr	r3, [r3, #0]
 8020470:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8020472:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8020476:	2b00      	cmp	r3, #0
 8020478:	d196      	bne.n	80203a8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 802047a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 802047c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8020480:	4413      	add	r3, r2
 8020482:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8020484:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8020488:	68bb      	ldr	r3, [r7, #8]
 802048a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802048c:	3b14      	subs	r3, #20
 802048e:	429a      	cmp	r2, r3
 8020490:	bfd4      	ite	le
 8020492:	2301      	movle	r3, #1
 8020494:	2300      	movgt	r3, #0
 8020496:	b2db      	uxtb	r3, r3
 8020498:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 802049a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802049e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80204a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80204a4:	6a3b      	ldr	r3, [r7, #32]
 80204a6:	2b00      	cmp	r3, #0
 80204a8:	d002      	beq.n	80204b0 <ip4_frag+0x1f4>
 80204aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204ac:	2b00      	cmp	r3, #0
 80204ae:	d003      	beq.n	80204b8 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80204b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80204b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80204b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80204b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80204ba:	4618      	mov	r0, r3
 80204bc:	f7f4 f990 	bl	80147e0 <lwip_htons>
 80204c0:	4603      	mov	r3, r0
 80204c2:	461a      	mov	r2, r3
 80204c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204c6:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80204c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80204ca:	3314      	adds	r3, #20
 80204cc:	b29b      	uxth	r3, r3
 80204ce:	4618      	mov	r0, r3
 80204d0:	f7f4 f986 	bl	80147e0 <lwip_htons>
 80204d4:	4603      	mov	r3, r0
 80204d6:	461a      	mov	r2, r3
 80204d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204da:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80204dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204de:	2200      	movs	r2, #0
 80204e0:	729a      	strb	r2, [r3, #10]
 80204e2:	2200      	movs	r2, #0
 80204e4:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80204e6:	68bb      	ldr	r3, [r7, #8]
 80204e8:	695b      	ldr	r3, [r3, #20]
 80204ea:	687a      	ldr	r2, [r7, #4]
 80204ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80204ee:	68b8      	ldr	r0, [r7, #8]
 80204f0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80204f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80204f4:	f7f5 fd42 	bl	8015f7c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80204f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80204fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80204fe:	1ad3      	subs	r3, r2, r3
 8020500:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8020504:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8020508:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802050a:	4413      	add	r3, r2
 802050c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8020510:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8020514:	2b00      	cmp	r3, #0
 8020516:	f47f af1a 	bne.w	802034e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 802051a:	2300      	movs	r3, #0
 802051c:	e002      	b.n	8020524 <ip4_frag+0x268>
      goto memerr;
 802051e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8020520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8020524:	4618      	mov	r0, r3
 8020526:	3748      	adds	r7, #72	; 0x48
 8020528:	46bd      	mov	sp, r7
 802052a:	bd80      	pop	{r7, pc}
 802052c:	08024f54 	.word	0x08024f54
 8020530:	08025130 	.word	0x08025130
 8020534:	08024f9c 	.word	0x08024f9c
 8020538:	0802514c 	.word	0x0802514c
 802053c:	0802516c 	.word	0x0802516c
 8020540:	08020255 	.word	0x08020255

08020544 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8020544:	b580      	push	{r7, lr}
 8020546:	b086      	sub	sp, #24
 8020548:	af00      	add	r7, sp, #0
 802054a:	6078      	str	r0, [r7, #4]
 802054c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 802054e:	230e      	movs	r3, #14
 8020550:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8020552:	687b      	ldr	r3, [r7, #4]
 8020554:	895b      	ldrh	r3, [r3, #10]
 8020556:	2b0e      	cmp	r3, #14
 8020558:	d96e      	bls.n	8020638 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 802055a:	687b      	ldr	r3, [r7, #4]
 802055c:	7bdb      	ldrb	r3, [r3, #15]
 802055e:	2b00      	cmp	r3, #0
 8020560:	d106      	bne.n	8020570 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8020562:	683b      	ldr	r3, [r7, #0]
 8020564:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8020568:	3301      	adds	r3, #1
 802056a:	b2da      	uxtb	r2, r3
 802056c:	687b      	ldr	r3, [r7, #4]
 802056e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8020570:	687b      	ldr	r3, [r7, #4]
 8020572:	685b      	ldr	r3, [r3, #4]
 8020574:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8020576:	693b      	ldr	r3, [r7, #16]
 8020578:	7b1a      	ldrb	r2, [r3, #12]
 802057a:	7b5b      	ldrb	r3, [r3, #13]
 802057c:	021b      	lsls	r3, r3, #8
 802057e:	4313      	orrs	r3, r2
 8020580:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8020582:	693b      	ldr	r3, [r7, #16]
 8020584:	781b      	ldrb	r3, [r3, #0]
 8020586:	f003 0301 	and.w	r3, r3, #1
 802058a:	2b00      	cmp	r3, #0
 802058c:	d023      	beq.n	80205d6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802058e:	693b      	ldr	r3, [r7, #16]
 8020590:	781b      	ldrb	r3, [r3, #0]
 8020592:	2b01      	cmp	r3, #1
 8020594:	d10f      	bne.n	80205b6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8020596:	693b      	ldr	r3, [r7, #16]
 8020598:	785b      	ldrb	r3, [r3, #1]
 802059a:	2b00      	cmp	r3, #0
 802059c:	d11b      	bne.n	80205d6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 802059e:	693b      	ldr	r3, [r7, #16]
 80205a0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80205a2:	2b5e      	cmp	r3, #94	; 0x5e
 80205a4:	d117      	bne.n	80205d6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80205a6:	687b      	ldr	r3, [r7, #4]
 80205a8:	7b5b      	ldrb	r3, [r3, #13]
 80205aa:	f043 0310 	orr.w	r3, r3, #16
 80205ae:	b2da      	uxtb	r2, r3
 80205b0:	687b      	ldr	r3, [r7, #4]
 80205b2:	735a      	strb	r2, [r3, #13]
 80205b4:	e00f      	b.n	80205d6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80205b6:	693b      	ldr	r3, [r7, #16]
 80205b8:	2206      	movs	r2, #6
 80205ba:	4928      	ldr	r1, [pc, #160]	; (802065c <ethernet_input+0x118>)
 80205bc:	4618      	mov	r0, r3
 80205be:	f000 fee5 	bl	802138c <memcmp>
 80205c2:	4603      	mov	r3, r0
 80205c4:	2b00      	cmp	r3, #0
 80205c6:	d106      	bne.n	80205d6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80205c8:	687b      	ldr	r3, [r7, #4]
 80205ca:	7b5b      	ldrb	r3, [r3, #13]
 80205cc:	f043 0308 	orr.w	r3, r3, #8
 80205d0:	b2da      	uxtb	r2, r3
 80205d2:	687b      	ldr	r3, [r7, #4]
 80205d4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80205d6:	89fb      	ldrh	r3, [r7, #14]
 80205d8:	2b08      	cmp	r3, #8
 80205da:	d003      	beq.n	80205e4 <ethernet_input+0xa0>
 80205dc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80205e0:	d014      	beq.n	802060c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80205e2:	e032      	b.n	802064a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80205e4:	683b      	ldr	r3, [r7, #0]
 80205e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80205ea:	f003 0308 	and.w	r3, r3, #8
 80205ee:	2b00      	cmp	r3, #0
 80205f0:	d024      	beq.n	802063c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80205f2:	8afb      	ldrh	r3, [r7, #22]
 80205f4:	4619      	mov	r1, r3
 80205f6:	6878      	ldr	r0, [r7, #4]
 80205f8:	f7f5 fc3a 	bl	8015e70 <pbuf_remove_header>
 80205fc:	4603      	mov	r3, r0
 80205fe:	2b00      	cmp	r3, #0
 8020600:	d11e      	bne.n	8020640 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8020602:	6839      	ldr	r1, [r7, #0]
 8020604:	6878      	ldr	r0, [r7, #4]
 8020606:	f7fe ff0f 	bl	801f428 <ip4_input>
      break;
 802060a:	e013      	b.n	8020634 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 802060c:	683b      	ldr	r3, [r7, #0]
 802060e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8020612:	f003 0308 	and.w	r3, r3, #8
 8020616:	2b00      	cmp	r3, #0
 8020618:	d014      	beq.n	8020644 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802061a:	8afb      	ldrh	r3, [r7, #22]
 802061c:	4619      	mov	r1, r3
 802061e:	6878      	ldr	r0, [r7, #4]
 8020620:	f7f5 fc26 	bl	8015e70 <pbuf_remove_header>
 8020624:	4603      	mov	r3, r0
 8020626:	2b00      	cmp	r3, #0
 8020628:	d10e      	bne.n	8020648 <ethernet_input+0x104>
        etharp_input(p, netif);
 802062a:	6839      	ldr	r1, [r7, #0]
 802062c:	6878      	ldr	r0, [r7, #4]
 802062e:	f7fe f8ab 	bl	801e788 <etharp_input>
      break;
 8020632:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8020634:	2300      	movs	r3, #0
 8020636:	e00c      	b.n	8020652 <ethernet_input+0x10e>
    goto free_and_return;
 8020638:	bf00      	nop
 802063a:	e006      	b.n	802064a <ethernet_input+0x106>
        goto free_and_return;
 802063c:	bf00      	nop
 802063e:	e004      	b.n	802064a <ethernet_input+0x106>
        goto free_and_return;
 8020640:	bf00      	nop
 8020642:	e002      	b.n	802064a <ethernet_input+0x106>
        goto free_and_return;
 8020644:	bf00      	nop
 8020646:	e000      	b.n	802064a <ethernet_input+0x106>
        goto free_and_return;
 8020648:	bf00      	nop

free_and_return:
  pbuf_free(p);
 802064a:	6878      	ldr	r0, [r7, #4]
 802064c:	f7f5 fc96 	bl	8015f7c <pbuf_free>
  return ERR_OK;
 8020650:	2300      	movs	r3, #0
}
 8020652:	4618      	mov	r0, r3
 8020654:	3718      	adds	r7, #24
 8020656:	46bd      	mov	sp, r7
 8020658:	bd80      	pop	{r7, pc}
 802065a:	bf00      	nop
 802065c:	080253a0 	.word	0x080253a0

08020660 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8020660:	b580      	push	{r7, lr}
 8020662:	b086      	sub	sp, #24
 8020664:	af00      	add	r7, sp, #0
 8020666:	60f8      	str	r0, [r7, #12]
 8020668:	60b9      	str	r1, [r7, #8]
 802066a:	607a      	str	r2, [r7, #4]
 802066c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 802066e:	8c3b      	ldrh	r3, [r7, #32]
 8020670:	4618      	mov	r0, r3
 8020672:	f7f4 f8b5 	bl	80147e0 <lwip_htons>
 8020676:	4603      	mov	r3, r0
 8020678:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 802067a:	210e      	movs	r1, #14
 802067c:	68b8      	ldr	r0, [r7, #8]
 802067e:	f7f5 fbe7 	bl	8015e50 <pbuf_add_header>
 8020682:	4603      	mov	r3, r0
 8020684:	2b00      	cmp	r3, #0
 8020686:	d125      	bne.n	80206d4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8020688:	68bb      	ldr	r3, [r7, #8]
 802068a:	685b      	ldr	r3, [r3, #4]
 802068c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 802068e:	693b      	ldr	r3, [r7, #16]
 8020690:	8afa      	ldrh	r2, [r7, #22]
 8020692:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8020694:	693b      	ldr	r3, [r7, #16]
 8020696:	2206      	movs	r2, #6
 8020698:	6839      	ldr	r1, [r7, #0]
 802069a:	4618      	mov	r0, r3
 802069c:	f000 fe85 	bl	80213aa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80206a0:	693b      	ldr	r3, [r7, #16]
 80206a2:	3306      	adds	r3, #6
 80206a4:	2206      	movs	r2, #6
 80206a6:	6879      	ldr	r1, [r7, #4]
 80206a8:	4618      	mov	r0, r3
 80206aa:	f000 fe7e 	bl	80213aa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80206ae:	68fb      	ldr	r3, [r7, #12]
 80206b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80206b4:	2b06      	cmp	r3, #6
 80206b6:	d006      	beq.n	80206c6 <ethernet_output+0x66>
 80206b8:	4b0a      	ldr	r3, [pc, #40]	; (80206e4 <ethernet_output+0x84>)
 80206ba:	f240 1233 	movw	r2, #307	; 0x133
 80206be:	490a      	ldr	r1, [pc, #40]	; (80206e8 <ethernet_output+0x88>)
 80206c0:	480a      	ldr	r0, [pc, #40]	; (80206ec <ethernet_output+0x8c>)
 80206c2:	f000 ff2d 	bl	8021520 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80206c6:	68fb      	ldr	r3, [r7, #12]
 80206c8:	699b      	ldr	r3, [r3, #24]
 80206ca:	68b9      	ldr	r1, [r7, #8]
 80206cc:	68f8      	ldr	r0, [r7, #12]
 80206ce:	4798      	blx	r3
 80206d0:	4603      	mov	r3, r0
 80206d2:	e002      	b.n	80206da <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80206d4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80206d6:	f06f 0301 	mvn.w	r3, #1
}
 80206da:	4618      	mov	r0, r3
 80206dc:	3718      	adds	r7, #24
 80206de:	46bd      	mov	sp, r7
 80206e0:	bd80      	pop	{r7, pc}
 80206e2:	bf00      	nop
 80206e4:	0802517c 	.word	0x0802517c
 80206e8:	080251b4 	.word	0x080251b4
 80206ec:	080251e8 	.word	0x080251e8

080206f0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80206f0:	b580      	push	{r7, lr}
 80206f2:	b082      	sub	sp, #8
 80206f4:	af00      	add	r7, sp, #0
 80206f6:	6078      	str	r0, [r7, #4]
 80206f8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80206fa:	683b      	ldr	r3, [r7, #0]
 80206fc:	2200      	movs	r2, #0
 80206fe:	2104      	movs	r1, #4
 8020700:	4618      	mov	r0, r3
 8020702:	f7f0 faed 	bl	8010ce0 <osMessageQueueNew>
 8020706:	4602      	mov	r2, r0
 8020708:	687b      	ldr	r3, [r7, #4]
 802070a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 802070c:	687b      	ldr	r3, [r7, #4]
 802070e:	681b      	ldr	r3, [r3, #0]
 8020710:	2b00      	cmp	r3, #0
 8020712:	d102      	bne.n	802071a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8020714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020718:	e000      	b.n	802071c <sys_mbox_new+0x2c>

  return ERR_OK;
 802071a:	2300      	movs	r3, #0
}
 802071c:	4618      	mov	r0, r3
 802071e:	3708      	adds	r7, #8
 8020720:	46bd      	mov	sp, r7
 8020722:	bd80      	pop	{r7, pc}

08020724 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8020724:	b580      	push	{r7, lr}
 8020726:	b084      	sub	sp, #16
 8020728:	af00      	add	r7, sp, #0
 802072a:	6078      	str	r0, [r7, #4]
 802072c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 802072e:	687b      	ldr	r3, [r7, #4]
 8020730:	6818      	ldr	r0, [r3, #0]
 8020732:	4639      	mov	r1, r7
 8020734:	2300      	movs	r3, #0
 8020736:	2200      	movs	r2, #0
 8020738:	f7f0 fb58 	bl	8010dec <osMessageQueuePut>
 802073c:	4603      	mov	r3, r0
 802073e:	2b00      	cmp	r3, #0
 8020740:	d102      	bne.n	8020748 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8020742:	2300      	movs	r3, #0
 8020744:	73fb      	strb	r3, [r7, #15]
 8020746:	e001      	b.n	802074c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8020748:	23ff      	movs	r3, #255	; 0xff
 802074a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 802074c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8020750:	4618      	mov	r0, r3
 8020752:	3710      	adds	r7, #16
 8020754:	46bd      	mov	sp, r7
 8020756:	bd80      	pop	{r7, pc}

08020758 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8020758:	b580      	push	{r7, lr}
 802075a:	b086      	sub	sp, #24
 802075c:	af00      	add	r7, sp, #0
 802075e:	60f8      	str	r0, [r7, #12]
 8020760:	60b9      	str	r1, [r7, #8]
 8020762:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8020764:	f7ef fedc 	bl	8010520 <osKernelGetTickCount>
 8020768:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 802076a:	687b      	ldr	r3, [r7, #4]
 802076c:	2b00      	cmp	r3, #0
 802076e:	d013      	beq.n	8020798 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8020770:	68fb      	ldr	r3, [r7, #12]
 8020772:	6818      	ldr	r0, [r3, #0]
 8020774:	687b      	ldr	r3, [r7, #4]
 8020776:	2200      	movs	r2, #0
 8020778:	68b9      	ldr	r1, [r7, #8]
 802077a:	f7f0 fbab 	bl	8010ed4 <osMessageQueueGet>
 802077e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8020780:	693b      	ldr	r3, [r7, #16]
 8020782:	2b00      	cmp	r3, #0
 8020784:	d105      	bne.n	8020792 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8020786:	f7ef fecb 	bl	8010520 <osKernelGetTickCount>
 802078a:	4602      	mov	r2, r0
 802078c:	697b      	ldr	r3, [r7, #20]
 802078e:	1ad3      	subs	r3, r2, r3
 8020790:	e00f      	b.n	80207b2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8020792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020796:	e00c      	b.n	80207b2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8020798:	68fb      	ldr	r3, [r7, #12]
 802079a:	6818      	ldr	r0, [r3, #0]
 802079c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80207a0:	2200      	movs	r2, #0
 80207a2:	68b9      	ldr	r1, [r7, #8]
 80207a4:	f7f0 fb96 	bl	8010ed4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80207a8:	f7ef feba 	bl	8010520 <osKernelGetTickCount>
 80207ac:	4602      	mov	r2, r0
 80207ae:	697b      	ldr	r3, [r7, #20]
 80207b0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80207b2:	4618      	mov	r0, r3
 80207b4:	3718      	adds	r7, #24
 80207b6:	46bd      	mov	sp, r7
 80207b8:	bd80      	pop	{r7, pc}

080207ba <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80207ba:	b480      	push	{r7}
 80207bc:	b083      	sub	sp, #12
 80207be:	af00      	add	r7, sp, #0
 80207c0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80207c2:	687b      	ldr	r3, [r7, #4]
 80207c4:	681b      	ldr	r3, [r3, #0]
 80207c6:	2b00      	cmp	r3, #0
 80207c8:	d101      	bne.n	80207ce <sys_mbox_valid+0x14>
    return 0;
 80207ca:	2300      	movs	r3, #0
 80207cc:	e000      	b.n	80207d0 <sys_mbox_valid+0x16>
  else
    return 1;
 80207ce:	2301      	movs	r3, #1
}
 80207d0:	4618      	mov	r0, r3
 80207d2:	370c      	adds	r7, #12
 80207d4:	46bd      	mov	sp, r7
 80207d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207da:	4770      	bx	lr

080207dc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80207dc:	b580      	push	{r7, lr}
 80207de:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80207e0:	2000      	movs	r0, #0
 80207e2:	f7ef ffd9 	bl	8010798 <osMutexNew>
 80207e6:	4602      	mov	r2, r0
 80207e8:	4b01      	ldr	r3, [pc, #4]	; (80207f0 <sys_init+0x14>)
 80207ea:	601a      	str	r2, [r3, #0]
#endif
}
 80207ec:	bf00      	nop
 80207ee:	bd80      	pop	{r7, pc}
 80207f0:	2001037c 	.word	0x2001037c

080207f4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80207f4:	b580      	push	{r7, lr}
 80207f6:	b082      	sub	sp, #8
 80207f8:	af00      	add	r7, sp, #0
 80207fa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80207fc:	2000      	movs	r0, #0
 80207fe:	f7ef ffcb 	bl	8010798 <osMutexNew>
 8020802:	4602      	mov	r2, r0
 8020804:	687b      	ldr	r3, [r7, #4]
 8020806:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8020808:	687b      	ldr	r3, [r7, #4]
 802080a:	681b      	ldr	r3, [r3, #0]
 802080c:	2b00      	cmp	r3, #0
 802080e:	d102      	bne.n	8020816 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8020810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020814:	e000      	b.n	8020818 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8020816:	2300      	movs	r3, #0
}
 8020818:	4618      	mov	r0, r3
 802081a:	3708      	adds	r7, #8
 802081c:	46bd      	mov	sp, r7
 802081e:	bd80      	pop	{r7, pc}

08020820 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8020820:	b580      	push	{r7, lr}
 8020822:	b082      	sub	sp, #8
 8020824:	af00      	add	r7, sp, #0
 8020826:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8020828:	687b      	ldr	r3, [r7, #4]
 802082a:	681b      	ldr	r3, [r3, #0]
 802082c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020830:	4618      	mov	r0, r3
 8020832:	f7f0 f84b 	bl	80108cc <osMutexAcquire>
#endif
}
 8020836:	bf00      	nop
 8020838:	3708      	adds	r7, #8
 802083a:	46bd      	mov	sp, r7
 802083c:	bd80      	pop	{r7, pc}

0802083e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 802083e:	b580      	push	{r7, lr}
 8020840:	b082      	sub	sp, #8
 8020842:	af00      	add	r7, sp, #0
 8020844:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8020846:	687b      	ldr	r3, [r7, #4]
 8020848:	681b      	ldr	r3, [r3, #0]
 802084a:	4618      	mov	r0, r3
 802084c:	f7f0 f89c 	bl	8010988 <osMutexRelease>
}
 8020850:	bf00      	nop
 8020852:	3708      	adds	r7, #8
 8020854:	46bd      	mov	sp, r7
 8020856:	bd80      	pop	{r7, pc}

08020858 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8020858:	b580      	push	{r7, lr}
 802085a:	b08e      	sub	sp, #56	; 0x38
 802085c:	af00      	add	r7, sp, #0
 802085e:	60f8      	str	r0, [r7, #12]
 8020860:	60b9      	str	r1, [r7, #8]
 8020862:	607a      	str	r2, [r7, #4]
 8020864:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8020866:	f107 0314 	add.w	r3, r7, #20
 802086a:	2224      	movs	r2, #36	; 0x24
 802086c:	2100      	movs	r1, #0
 802086e:	4618      	mov	r0, r3
 8020870:	f000 fda6 	bl	80213c0 <memset>
 8020874:	68fb      	ldr	r3, [r7, #12]
 8020876:	617b      	str	r3, [r7, #20]
 8020878:	683b      	ldr	r3, [r7, #0]
 802087a:	62bb      	str	r3, [r7, #40]	; 0x28
 802087c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802087e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8020880:	f107 0314 	add.w	r3, r7, #20
 8020884:	461a      	mov	r2, r3
 8020886:	6879      	ldr	r1, [r7, #4]
 8020888:	68b8      	ldr	r0, [r7, #8]
 802088a:	f7ef fe71 	bl	8010570 <osThreadNew>
 802088e:	4603      	mov	r3, r0
#endif
}
 8020890:	4618      	mov	r0, r3
 8020892:	3738      	adds	r7, #56	; 0x38
 8020894:	46bd      	mov	sp, r7
 8020896:	bd80      	pop	{r7, pc}

08020898 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8020898:	b580      	push	{r7, lr}
 802089a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 802089c:	4b04      	ldr	r3, [pc, #16]	; (80208b0 <sys_arch_protect+0x18>)
 802089e:	681b      	ldr	r3, [r3, #0]
 80208a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80208a4:	4618      	mov	r0, r3
 80208a6:	f7f0 f811 	bl	80108cc <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80208aa:	2301      	movs	r3, #1
}
 80208ac:	4618      	mov	r0, r3
 80208ae:	bd80      	pop	{r7, pc}
 80208b0:	2001037c 	.word	0x2001037c

080208b4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80208b4:	b580      	push	{r7, lr}
 80208b6:	b082      	sub	sp, #8
 80208b8:	af00      	add	r7, sp, #0
 80208ba:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80208bc:	4b04      	ldr	r3, [pc, #16]	; (80208d0 <sys_arch_unprotect+0x1c>)
 80208be:	681b      	ldr	r3, [r3, #0]
 80208c0:	4618      	mov	r0, r3
 80208c2:	f7f0 f861 	bl	8010988 <osMutexRelease>
}
 80208c6:	bf00      	nop
 80208c8:	3708      	adds	r7, #8
 80208ca:	46bd      	mov	sp, r7
 80208cc:	bd80      	pop	{r7, pc}
 80208ce:	bf00      	nop
 80208d0:	2001037c 	.word	0x2001037c

080208d4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80208d4:	b580      	push	{r7, lr}
 80208d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80208d8:	2201      	movs	r2, #1
 80208da:	490e      	ldr	r1, [pc, #56]	; (8020914 <MX_USB_HOST_Init+0x40>)
 80208dc:	480e      	ldr	r0, [pc, #56]	; (8020918 <MX_USB_HOST_Init+0x44>)
 80208de:	f7ee f823 	bl	800e928 <USBH_Init>
 80208e2:	4603      	mov	r3, r0
 80208e4:	2b00      	cmp	r3, #0
 80208e6:	d001      	beq.n	80208ec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80208e8:	f7e1 f8ee 	bl	8001ac8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80208ec:	490b      	ldr	r1, [pc, #44]	; (802091c <MX_USB_HOST_Init+0x48>)
 80208ee:	480a      	ldr	r0, [pc, #40]	; (8020918 <MX_USB_HOST_Init+0x44>)
 80208f0:	f7ee f8ca 	bl	800ea88 <USBH_RegisterClass>
 80208f4:	4603      	mov	r3, r0
 80208f6:	2b00      	cmp	r3, #0
 80208f8:	d001      	beq.n	80208fe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80208fa:	f7e1 f8e5 	bl	8001ac8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80208fe:	4806      	ldr	r0, [pc, #24]	; (8020918 <MX_USB_HOST_Init+0x44>)
 8020900:	f7ee f94e 	bl	800eba0 <USBH_Start>
 8020904:	4603      	mov	r3, r0
 8020906:	2b00      	cmp	r3, #0
 8020908:	d001      	beq.n	802090e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 802090a:	f7e1 f8dd 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 802090e:	bf00      	nop
 8020910:	bd80      	pop	{r7, pc}
 8020912:	bf00      	nop
 8020914:	08020921 	.word	0x08020921
 8020918:	20010380 	.word	0x20010380
 802091c:	20000010 	.word	0x20000010

08020920 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8020920:	b480      	push	{r7}
 8020922:	b083      	sub	sp, #12
 8020924:	af00      	add	r7, sp, #0
 8020926:	6078      	str	r0, [r7, #4]
 8020928:	460b      	mov	r3, r1
 802092a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 802092c:	78fb      	ldrb	r3, [r7, #3]
 802092e:	3b01      	subs	r3, #1
 8020930:	2b04      	cmp	r3, #4
 8020932:	d819      	bhi.n	8020968 <USBH_UserProcess+0x48>
 8020934:	a201      	add	r2, pc, #4	; (adr r2, 802093c <USBH_UserProcess+0x1c>)
 8020936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802093a:	bf00      	nop
 802093c:	08020969 	.word	0x08020969
 8020940:	08020959 	.word	0x08020959
 8020944:	08020969 	.word	0x08020969
 8020948:	08020961 	.word	0x08020961
 802094c:	08020951 	.word	0x08020951
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8020950:	4b09      	ldr	r3, [pc, #36]	; (8020978 <USBH_UserProcess+0x58>)
 8020952:	2203      	movs	r2, #3
 8020954:	701a      	strb	r2, [r3, #0]
  break;
 8020956:	e008      	b.n	802096a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8020958:	4b07      	ldr	r3, [pc, #28]	; (8020978 <USBH_UserProcess+0x58>)
 802095a:	2202      	movs	r2, #2
 802095c:	701a      	strb	r2, [r3, #0]
  break;
 802095e:	e004      	b.n	802096a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8020960:	4b05      	ldr	r3, [pc, #20]	; (8020978 <USBH_UserProcess+0x58>)
 8020962:	2201      	movs	r2, #1
 8020964:	701a      	strb	r2, [r3, #0]
  break;
 8020966:	e000      	b.n	802096a <USBH_UserProcess+0x4a>

  default:
  break;
 8020968:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 802096a:	bf00      	nop
 802096c:	370c      	adds	r7, #12
 802096e:	46bd      	mov	sp, r7
 8020970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020974:	4770      	bx	lr
 8020976:	bf00      	nop
 8020978:	20009106 	.word	0x20009106

0802097c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 802097c:	b580      	push	{r7, lr}
 802097e:	b08a      	sub	sp, #40	; 0x28
 8020980:	af00      	add	r7, sp, #0
 8020982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020984:	f107 0314 	add.w	r3, r7, #20
 8020988:	2200      	movs	r2, #0
 802098a:	601a      	str	r2, [r3, #0]
 802098c:	605a      	str	r2, [r3, #4]
 802098e:	609a      	str	r2, [r3, #8]
 8020990:	60da      	str	r2, [r3, #12]
 8020992:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8020994:	687b      	ldr	r3, [r7, #4]
 8020996:	681b      	ldr	r3, [r3, #0]
 8020998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802099c:	d13c      	bne.n	8020a18 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802099e:	4b20      	ldr	r3, [pc, #128]	; (8020a20 <HAL_HCD_MspInit+0xa4>)
 80209a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209a2:	4a1f      	ldr	r2, [pc, #124]	; (8020a20 <HAL_HCD_MspInit+0xa4>)
 80209a4:	f043 0301 	orr.w	r3, r3, #1
 80209a8:	6313      	str	r3, [r2, #48]	; 0x30
 80209aa:	4b1d      	ldr	r3, [pc, #116]	; (8020a20 <HAL_HCD_MspInit+0xa4>)
 80209ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209ae:	f003 0301 	and.w	r3, r3, #1
 80209b2:	613b      	str	r3, [r7, #16]
 80209b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80209b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80209ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80209bc:	2302      	movs	r3, #2
 80209be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80209c0:	2300      	movs	r3, #0
 80209c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80209c4:	2303      	movs	r3, #3
 80209c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80209c8:	230a      	movs	r3, #10
 80209ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80209cc:	f107 0314 	add.w	r3, r7, #20
 80209d0:	4619      	mov	r1, r3
 80209d2:	4814      	ldr	r0, [pc, #80]	; (8020a24 <HAL_HCD_MspInit+0xa8>)
 80209d4:	f7e5 fc16 	bl	8006204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80209d8:	4b11      	ldr	r3, [pc, #68]	; (8020a20 <HAL_HCD_MspInit+0xa4>)
 80209da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80209dc:	4a10      	ldr	r2, [pc, #64]	; (8020a20 <HAL_HCD_MspInit+0xa4>)
 80209de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80209e2:	6353      	str	r3, [r2, #52]	; 0x34
 80209e4:	4b0e      	ldr	r3, [pc, #56]	; (8020a20 <HAL_HCD_MspInit+0xa4>)
 80209e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80209e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80209ec:	60fb      	str	r3, [r7, #12]
 80209ee:	68fb      	ldr	r3, [r7, #12]
 80209f0:	4b0b      	ldr	r3, [pc, #44]	; (8020a20 <HAL_HCD_MspInit+0xa4>)
 80209f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80209f4:	4a0a      	ldr	r2, [pc, #40]	; (8020a20 <HAL_HCD_MspInit+0xa4>)
 80209f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80209fa:	6453      	str	r3, [r2, #68]	; 0x44
 80209fc:	4b08      	ldr	r3, [pc, #32]	; (8020a20 <HAL_HCD_MspInit+0xa4>)
 80209fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020a04:	60bb      	str	r3, [r7, #8]
 8020a06:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8020a08:	2200      	movs	r2, #0
 8020a0a:	2105      	movs	r1, #5
 8020a0c:	2043      	movs	r0, #67	; 0x43
 8020a0e:	f7e3 fb8d 	bl	800412c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8020a12:	2043      	movs	r0, #67	; 0x43
 8020a14:	f7e3 fba6 	bl	8004164 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8020a18:	bf00      	nop
 8020a1a:	3728      	adds	r7, #40	; 0x28
 8020a1c:	46bd      	mov	sp, r7
 8020a1e:	bd80      	pop	{r7, pc}
 8020a20:	40023800 	.word	0x40023800
 8020a24:	40020000 	.word	0x40020000

08020a28 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8020a28:	b580      	push	{r7, lr}
 8020a2a:	b082      	sub	sp, #8
 8020a2c:	af00      	add	r7, sp, #0
 8020a2e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8020a30:	687b      	ldr	r3, [r7, #4]
 8020a32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020a36:	4618      	mov	r0, r3
 8020a38:	f7ee fd5f 	bl	800f4fa <USBH_LL_IncTimer>
}
 8020a3c:	bf00      	nop
 8020a3e:	3708      	adds	r7, #8
 8020a40:	46bd      	mov	sp, r7
 8020a42:	bd80      	pop	{r7, pc}

08020a44 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8020a44:	b580      	push	{r7, lr}
 8020a46:	b082      	sub	sp, #8
 8020a48:	af00      	add	r7, sp, #0
 8020a4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8020a4c:	687b      	ldr	r3, [r7, #4]
 8020a4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020a52:	4618      	mov	r0, r3
 8020a54:	f7ee fda3 	bl	800f59e <USBH_LL_Connect>
}
 8020a58:	bf00      	nop
 8020a5a:	3708      	adds	r7, #8
 8020a5c:	46bd      	mov	sp, r7
 8020a5e:	bd80      	pop	{r7, pc}

08020a60 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8020a60:	b580      	push	{r7, lr}
 8020a62:	b082      	sub	sp, #8
 8020a64:	af00      	add	r7, sp, #0
 8020a66:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8020a68:	687b      	ldr	r3, [r7, #4]
 8020a6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020a6e:	4618      	mov	r0, r3
 8020a70:	f7ee fdb8 	bl	800f5e4 <USBH_LL_Disconnect>
}
 8020a74:	bf00      	nop
 8020a76:	3708      	adds	r7, #8
 8020a78:	46bd      	mov	sp, r7
 8020a7a:	bd80      	pop	{r7, pc}

08020a7c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8020a7c:	b580      	push	{r7, lr}
 8020a7e:	b082      	sub	sp, #8
 8020a80:	af00      	add	r7, sp, #0
 8020a82:	6078      	str	r0, [r7, #4]
 8020a84:	460b      	mov	r3, r1
 8020a86:	70fb      	strb	r3, [r7, #3]
 8020a88:	4613      	mov	r3, r2
 8020a8a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8020a8c:	687b      	ldr	r3, [r7, #4]
 8020a8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020a92:	4618      	mov	r0, r3
 8020a94:	f7ee fdef 	bl	800f676 <USBH_LL_NotifyURBChange>
#endif
}
 8020a98:	bf00      	nop
 8020a9a:	3708      	adds	r7, #8
 8020a9c:	46bd      	mov	sp, r7
 8020a9e:	bd80      	pop	{r7, pc}

08020aa0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8020aa0:	b580      	push	{r7, lr}
 8020aa2:	b082      	sub	sp, #8
 8020aa4:	af00      	add	r7, sp, #0
 8020aa6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8020aa8:	687b      	ldr	r3, [r7, #4]
 8020aaa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020aae:	4618      	mov	r0, r3
 8020ab0:	f7ee fd4d 	bl	800f54e <USBH_LL_PortEnabled>
}
 8020ab4:	bf00      	nop
 8020ab6:	3708      	adds	r7, #8
 8020ab8:	46bd      	mov	sp, r7
 8020aba:	bd80      	pop	{r7, pc}

08020abc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8020abc:	b580      	push	{r7, lr}
 8020abe:	b082      	sub	sp, #8
 8020ac0:	af00      	add	r7, sp, #0
 8020ac2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8020ac4:	687b      	ldr	r3, [r7, #4]
 8020ac6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020aca:	4618      	mov	r0, r3
 8020acc:	f7ee fd59 	bl	800f582 <USBH_LL_PortDisabled>
}
 8020ad0:	bf00      	nop
 8020ad2:	3708      	adds	r7, #8
 8020ad4:	46bd      	mov	sp, r7
 8020ad6:	bd80      	pop	{r7, pc}

08020ad8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8020ad8:	b580      	push	{r7, lr}
 8020ada:	b082      	sub	sp, #8
 8020adc:	af00      	add	r7, sp, #0
 8020ade:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8020ae0:	687b      	ldr	r3, [r7, #4]
 8020ae2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8020ae6:	2b01      	cmp	r3, #1
 8020ae8:	d12a      	bne.n	8020b40 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8020aea:	4a18      	ldr	r2, [pc, #96]	; (8020b4c <USBH_LL_Init+0x74>)
 8020aec:	687b      	ldr	r3, [r7, #4]
 8020aee:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8020af2:	687b      	ldr	r3, [r7, #4]
 8020af4:	4a15      	ldr	r2, [pc, #84]	; (8020b4c <USBH_LL_Init+0x74>)
 8020af6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8020afa:	4b14      	ldr	r3, [pc, #80]	; (8020b4c <USBH_LL_Init+0x74>)
 8020afc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8020b00:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8020b02:	4b12      	ldr	r3, [pc, #72]	; (8020b4c <USBH_LL_Init+0x74>)
 8020b04:	2208      	movs	r2, #8
 8020b06:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8020b08:	4b10      	ldr	r3, [pc, #64]	; (8020b4c <USBH_LL_Init+0x74>)
 8020b0a:	2201      	movs	r2, #1
 8020b0c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8020b0e:	4b0f      	ldr	r3, [pc, #60]	; (8020b4c <USBH_LL_Init+0x74>)
 8020b10:	2200      	movs	r2, #0
 8020b12:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8020b14:	4b0d      	ldr	r3, [pc, #52]	; (8020b4c <USBH_LL_Init+0x74>)
 8020b16:	2202      	movs	r2, #2
 8020b18:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8020b1a:	4b0c      	ldr	r3, [pc, #48]	; (8020b4c <USBH_LL_Init+0x74>)
 8020b1c:	2200      	movs	r2, #0
 8020b1e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8020b20:	480a      	ldr	r0, [pc, #40]	; (8020b4c <USBH_LL_Init+0x74>)
 8020b22:	f7e5 fd32 	bl	800658a <HAL_HCD_Init>
 8020b26:	4603      	mov	r3, r0
 8020b28:	2b00      	cmp	r3, #0
 8020b2a:	d001      	beq.n	8020b30 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8020b2c:	f7e0 ffcc 	bl	8001ac8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8020b30:	4806      	ldr	r0, [pc, #24]	; (8020b4c <USBH_LL_Init+0x74>)
 8020b32:	f7e6 f90f 	bl	8006d54 <HAL_HCD_GetCurrentFrame>
 8020b36:	4603      	mov	r3, r0
 8020b38:	4619      	mov	r1, r3
 8020b3a:	6878      	ldr	r0, [r7, #4]
 8020b3c:	f7ee fcce 	bl	800f4dc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8020b40:	2300      	movs	r3, #0
}
 8020b42:	4618      	mov	r0, r3
 8020b44:	3708      	adds	r7, #8
 8020b46:	46bd      	mov	sp, r7
 8020b48:	bd80      	pop	{r7, pc}
 8020b4a:	bf00      	nop
 8020b4c:	20010764 	.word	0x20010764

08020b50 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8020b50:	b580      	push	{r7, lr}
 8020b52:	b084      	sub	sp, #16
 8020b54:	af00      	add	r7, sp, #0
 8020b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020b58:	2300      	movs	r3, #0
 8020b5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020b5c:	2300      	movs	r3, #0
 8020b5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8020b60:	687b      	ldr	r3, [r7, #4]
 8020b62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020b66:	4618      	mov	r0, r3
 8020b68:	f7e6 f87e 	bl	8006c68 <HAL_HCD_Start>
 8020b6c:	4603      	mov	r3, r0
 8020b6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8020b70:	7bfb      	ldrb	r3, [r7, #15]
 8020b72:	4618      	mov	r0, r3
 8020b74:	f000 f95a 	bl	8020e2c <USBH_Get_USB_Status>
 8020b78:	4603      	mov	r3, r0
 8020b7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8020b7e:	4618      	mov	r0, r3
 8020b80:	3710      	adds	r7, #16
 8020b82:	46bd      	mov	sp, r7
 8020b84:	bd80      	pop	{r7, pc}

08020b86 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8020b86:	b580      	push	{r7, lr}
 8020b88:	b084      	sub	sp, #16
 8020b8a:	af00      	add	r7, sp, #0
 8020b8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020b8e:	2300      	movs	r3, #0
 8020b90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020b92:	2300      	movs	r3, #0
 8020b94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8020b96:	687b      	ldr	r3, [r7, #4]
 8020b98:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020b9c:	4618      	mov	r0, r3
 8020b9e:	f7e6 f886 	bl	8006cae <HAL_HCD_Stop>
 8020ba2:	4603      	mov	r3, r0
 8020ba4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8020ba6:	7bfb      	ldrb	r3, [r7, #15]
 8020ba8:	4618      	mov	r0, r3
 8020baa:	f000 f93f 	bl	8020e2c <USBH_Get_USB_Status>
 8020bae:	4603      	mov	r3, r0
 8020bb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020bb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8020bb4:	4618      	mov	r0, r3
 8020bb6:	3710      	adds	r7, #16
 8020bb8:	46bd      	mov	sp, r7
 8020bba:	bd80      	pop	{r7, pc}

08020bbc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8020bbc:	b580      	push	{r7, lr}
 8020bbe:	b084      	sub	sp, #16
 8020bc0:	af00      	add	r7, sp, #0
 8020bc2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8020bc4:	2301      	movs	r3, #1
 8020bc6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8020bc8:	687b      	ldr	r3, [r7, #4]
 8020bca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020bce:	4618      	mov	r0, r3
 8020bd0:	f7e6 f8ce 	bl	8006d70 <HAL_HCD_GetCurrentSpeed>
 8020bd4:	4603      	mov	r3, r0
 8020bd6:	2b01      	cmp	r3, #1
 8020bd8:	d007      	beq.n	8020bea <USBH_LL_GetSpeed+0x2e>
 8020bda:	2b01      	cmp	r3, #1
 8020bdc:	d302      	bcc.n	8020be4 <USBH_LL_GetSpeed+0x28>
 8020bde:	2b02      	cmp	r3, #2
 8020be0:	d006      	beq.n	8020bf0 <USBH_LL_GetSpeed+0x34>
 8020be2:	e008      	b.n	8020bf6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8020be4:	2300      	movs	r3, #0
 8020be6:	73fb      	strb	r3, [r7, #15]
    break;
 8020be8:	e008      	b.n	8020bfc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8020bea:	2301      	movs	r3, #1
 8020bec:	73fb      	strb	r3, [r7, #15]
    break;
 8020bee:	e005      	b.n	8020bfc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8020bf0:	2302      	movs	r3, #2
 8020bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8020bf4:	e002      	b.n	8020bfc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8020bf6:	2301      	movs	r3, #1
 8020bf8:	73fb      	strb	r3, [r7, #15]
    break;
 8020bfa:	bf00      	nop
  }
  return  speed;
 8020bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8020bfe:	4618      	mov	r0, r3
 8020c00:	3710      	adds	r7, #16
 8020c02:	46bd      	mov	sp, r7
 8020c04:	bd80      	pop	{r7, pc}

08020c06 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8020c06:	b580      	push	{r7, lr}
 8020c08:	b084      	sub	sp, #16
 8020c0a:	af00      	add	r7, sp, #0
 8020c0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020c0e:	2300      	movs	r3, #0
 8020c10:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020c12:	2300      	movs	r3, #0
 8020c14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8020c16:	687b      	ldr	r3, [r7, #4]
 8020c18:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020c1c:	4618      	mov	r0, r3
 8020c1e:	f7e6 f863 	bl	8006ce8 <HAL_HCD_ResetPort>
 8020c22:	4603      	mov	r3, r0
 8020c24:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8020c26:	7bfb      	ldrb	r3, [r7, #15]
 8020c28:	4618      	mov	r0, r3
 8020c2a:	f000 f8ff 	bl	8020e2c <USBH_Get_USB_Status>
 8020c2e:	4603      	mov	r3, r0
 8020c30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020c32:	7bbb      	ldrb	r3, [r7, #14]
}
 8020c34:	4618      	mov	r0, r3
 8020c36:	3710      	adds	r7, #16
 8020c38:	46bd      	mov	sp, r7
 8020c3a:	bd80      	pop	{r7, pc}

08020c3c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8020c3c:	b580      	push	{r7, lr}
 8020c3e:	b082      	sub	sp, #8
 8020c40:	af00      	add	r7, sp, #0
 8020c42:	6078      	str	r0, [r7, #4]
 8020c44:	460b      	mov	r3, r1
 8020c46:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8020c48:	687b      	ldr	r3, [r7, #4]
 8020c4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020c4e:	78fa      	ldrb	r2, [r7, #3]
 8020c50:	4611      	mov	r1, r2
 8020c52:	4618      	mov	r0, r3
 8020c54:	f7e6 f86a 	bl	8006d2c <HAL_HCD_HC_GetXferCount>
 8020c58:	4603      	mov	r3, r0
}
 8020c5a:	4618      	mov	r0, r3
 8020c5c:	3708      	adds	r7, #8
 8020c5e:	46bd      	mov	sp, r7
 8020c60:	bd80      	pop	{r7, pc}

08020c62 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8020c62:	b590      	push	{r4, r7, lr}
 8020c64:	b089      	sub	sp, #36	; 0x24
 8020c66:	af04      	add	r7, sp, #16
 8020c68:	6078      	str	r0, [r7, #4]
 8020c6a:	4608      	mov	r0, r1
 8020c6c:	4611      	mov	r1, r2
 8020c6e:	461a      	mov	r2, r3
 8020c70:	4603      	mov	r3, r0
 8020c72:	70fb      	strb	r3, [r7, #3]
 8020c74:	460b      	mov	r3, r1
 8020c76:	70bb      	strb	r3, [r7, #2]
 8020c78:	4613      	mov	r3, r2
 8020c7a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020c7c:	2300      	movs	r3, #0
 8020c7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020c80:	2300      	movs	r3, #0
 8020c82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8020c84:	687b      	ldr	r3, [r7, #4]
 8020c86:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8020c8a:	787c      	ldrb	r4, [r7, #1]
 8020c8c:	78ba      	ldrb	r2, [r7, #2]
 8020c8e:	78f9      	ldrb	r1, [r7, #3]
 8020c90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8020c92:	9302      	str	r3, [sp, #8]
 8020c94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8020c98:	9301      	str	r3, [sp, #4]
 8020c9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8020c9e:	9300      	str	r3, [sp, #0]
 8020ca0:	4623      	mov	r3, r4
 8020ca2:	f7e5 fcd4 	bl	800664e <HAL_HCD_HC_Init>
 8020ca6:	4603      	mov	r3, r0
 8020ca8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8020caa:	7bfb      	ldrb	r3, [r7, #15]
 8020cac:	4618      	mov	r0, r3
 8020cae:	f000 f8bd 	bl	8020e2c <USBH_Get_USB_Status>
 8020cb2:	4603      	mov	r3, r0
 8020cb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020cb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8020cb8:	4618      	mov	r0, r3
 8020cba:	3714      	adds	r7, #20
 8020cbc:	46bd      	mov	sp, r7
 8020cbe:	bd90      	pop	{r4, r7, pc}

08020cc0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8020cc0:	b580      	push	{r7, lr}
 8020cc2:	b084      	sub	sp, #16
 8020cc4:	af00      	add	r7, sp, #0
 8020cc6:	6078      	str	r0, [r7, #4]
 8020cc8:	460b      	mov	r3, r1
 8020cca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020ccc:	2300      	movs	r3, #0
 8020cce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020cd0:	2300      	movs	r3, #0
 8020cd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8020cd4:	687b      	ldr	r3, [r7, #4]
 8020cd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020cda:	78fa      	ldrb	r2, [r7, #3]
 8020cdc:	4611      	mov	r1, r2
 8020cde:	4618      	mov	r0, r3
 8020ce0:	f7e5 fd44 	bl	800676c <HAL_HCD_HC_Halt>
 8020ce4:	4603      	mov	r3, r0
 8020ce6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8020ce8:	7bfb      	ldrb	r3, [r7, #15]
 8020cea:	4618      	mov	r0, r3
 8020cec:	f000 f89e 	bl	8020e2c <USBH_Get_USB_Status>
 8020cf0:	4603      	mov	r3, r0
 8020cf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020cf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8020cf6:	4618      	mov	r0, r3
 8020cf8:	3710      	adds	r7, #16
 8020cfa:	46bd      	mov	sp, r7
 8020cfc:	bd80      	pop	{r7, pc}

08020cfe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8020cfe:	b590      	push	{r4, r7, lr}
 8020d00:	b089      	sub	sp, #36	; 0x24
 8020d02:	af04      	add	r7, sp, #16
 8020d04:	6078      	str	r0, [r7, #4]
 8020d06:	4608      	mov	r0, r1
 8020d08:	4611      	mov	r1, r2
 8020d0a:	461a      	mov	r2, r3
 8020d0c:	4603      	mov	r3, r0
 8020d0e:	70fb      	strb	r3, [r7, #3]
 8020d10:	460b      	mov	r3, r1
 8020d12:	70bb      	strb	r3, [r7, #2]
 8020d14:	4613      	mov	r3, r2
 8020d16:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020d18:	2300      	movs	r3, #0
 8020d1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020d1c:	2300      	movs	r3, #0
 8020d1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8020d20:	687b      	ldr	r3, [r7, #4]
 8020d22:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8020d26:	787c      	ldrb	r4, [r7, #1]
 8020d28:	78ba      	ldrb	r2, [r7, #2]
 8020d2a:	78f9      	ldrb	r1, [r7, #3]
 8020d2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8020d30:	9303      	str	r3, [sp, #12]
 8020d32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8020d34:	9302      	str	r3, [sp, #8]
 8020d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d38:	9301      	str	r3, [sp, #4]
 8020d3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8020d3e:	9300      	str	r3, [sp, #0]
 8020d40:	4623      	mov	r3, r4
 8020d42:	f7e5 fd37 	bl	80067b4 <HAL_HCD_HC_SubmitRequest>
 8020d46:	4603      	mov	r3, r0
 8020d48:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8020d4a:	7bfb      	ldrb	r3, [r7, #15]
 8020d4c:	4618      	mov	r0, r3
 8020d4e:	f000 f86d 	bl	8020e2c <USBH_Get_USB_Status>
 8020d52:	4603      	mov	r3, r0
 8020d54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020d56:	7bbb      	ldrb	r3, [r7, #14]
}
 8020d58:	4618      	mov	r0, r3
 8020d5a:	3714      	adds	r7, #20
 8020d5c:	46bd      	mov	sp, r7
 8020d5e:	bd90      	pop	{r4, r7, pc}

08020d60 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8020d60:	b580      	push	{r7, lr}
 8020d62:	b082      	sub	sp, #8
 8020d64:	af00      	add	r7, sp, #0
 8020d66:	6078      	str	r0, [r7, #4]
 8020d68:	460b      	mov	r3, r1
 8020d6a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8020d6c:	687b      	ldr	r3, [r7, #4]
 8020d6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020d72:	78fa      	ldrb	r2, [r7, #3]
 8020d74:	4611      	mov	r1, r2
 8020d76:	4618      	mov	r0, r3
 8020d78:	f7e5 ffc4 	bl	8006d04 <HAL_HCD_HC_GetURBState>
 8020d7c:	4603      	mov	r3, r0
}
 8020d7e:	4618      	mov	r0, r3
 8020d80:	3708      	adds	r7, #8
 8020d82:	46bd      	mov	sp, r7
 8020d84:	bd80      	pop	{r7, pc}

08020d86 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8020d86:	b580      	push	{r7, lr}
 8020d88:	b082      	sub	sp, #8
 8020d8a:	af00      	add	r7, sp, #0
 8020d8c:	6078      	str	r0, [r7, #4]
 8020d8e:	460b      	mov	r3, r1
 8020d90:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8020d92:	687b      	ldr	r3, [r7, #4]
 8020d94:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8020d98:	2b01      	cmp	r3, #1
 8020d9a:	d103      	bne.n	8020da4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8020d9c:	78fb      	ldrb	r3, [r7, #3]
 8020d9e:	4618      	mov	r0, r3
 8020da0:	f000 f870 	bl	8020e84 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8020da4:	20c8      	movs	r0, #200	; 0xc8
 8020da6:	f7e2 fe5f 	bl	8003a68 <HAL_Delay>
  return USBH_OK;
 8020daa:	2300      	movs	r3, #0
}
 8020dac:	4618      	mov	r0, r3
 8020dae:	3708      	adds	r7, #8
 8020db0:	46bd      	mov	sp, r7
 8020db2:	bd80      	pop	{r7, pc}

08020db4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8020db4:	b480      	push	{r7}
 8020db6:	b085      	sub	sp, #20
 8020db8:	af00      	add	r7, sp, #0
 8020dba:	6078      	str	r0, [r7, #4]
 8020dbc:	460b      	mov	r3, r1
 8020dbe:	70fb      	strb	r3, [r7, #3]
 8020dc0:	4613      	mov	r3, r2
 8020dc2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8020dc4:	687b      	ldr	r3, [r7, #4]
 8020dc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020dca:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8020dcc:	78fb      	ldrb	r3, [r7, #3]
 8020dce:	68fa      	ldr	r2, [r7, #12]
 8020dd0:	212c      	movs	r1, #44	; 0x2c
 8020dd2:	fb01 f303 	mul.w	r3, r1, r3
 8020dd6:	4413      	add	r3, r2
 8020dd8:	333b      	adds	r3, #59	; 0x3b
 8020dda:	781b      	ldrb	r3, [r3, #0]
 8020ddc:	2b00      	cmp	r3, #0
 8020dde:	d009      	beq.n	8020df4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8020de0:	78fb      	ldrb	r3, [r7, #3]
 8020de2:	68fa      	ldr	r2, [r7, #12]
 8020de4:	212c      	movs	r1, #44	; 0x2c
 8020de6:	fb01 f303 	mul.w	r3, r1, r3
 8020dea:	4413      	add	r3, r2
 8020dec:	3354      	adds	r3, #84	; 0x54
 8020dee:	78ba      	ldrb	r2, [r7, #2]
 8020df0:	701a      	strb	r2, [r3, #0]
 8020df2:	e008      	b.n	8020e06 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8020df4:	78fb      	ldrb	r3, [r7, #3]
 8020df6:	68fa      	ldr	r2, [r7, #12]
 8020df8:	212c      	movs	r1, #44	; 0x2c
 8020dfa:	fb01 f303 	mul.w	r3, r1, r3
 8020dfe:	4413      	add	r3, r2
 8020e00:	3355      	adds	r3, #85	; 0x55
 8020e02:	78ba      	ldrb	r2, [r7, #2]
 8020e04:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8020e06:	2300      	movs	r3, #0
}
 8020e08:	4618      	mov	r0, r3
 8020e0a:	3714      	adds	r7, #20
 8020e0c:	46bd      	mov	sp, r7
 8020e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e12:	4770      	bx	lr

08020e14 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8020e14:	b580      	push	{r7, lr}
 8020e16:	b082      	sub	sp, #8
 8020e18:	af00      	add	r7, sp, #0
 8020e1a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8020e1c:	6878      	ldr	r0, [r7, #4]
 8020e1e:	f7e2 fe23 	bl	8003a68 <HAL_Delay>
}
 8020e22:	bf00      	nop
 8020e24:	3708      	adds	r7, #8
 8020e26:	46bd      	mov	sp, r7
 8020e28:	bd80      	pop	{r7, pc}
	...

08020e2c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8020e2c:	b480      	push	{r7}
 8020e2e:	b085      	sub	sp, #20
 8020e30:	af00      	add	r7, sp, #0
 8020e32:	4603      	mov	r3, r0
 8020e34:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020e36:	2300      	movs	r3, #0
 8020e38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8020e3a:	79fb      	ldrb	r3, [r7, #7]
 8020e3c:	2b03      	cmp	r3, #3
 8020e3e:	d817      	bhi.n	8020e70 <USBH_Get_USB_Status+0x44>
 8020e40:	a201      	add	r2, pc, #4	; (adr r2, 8020e48 <USBH_Get_USB_Status+0x1c>)
 8020e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020e46:	bf00      	nop
 8020e48:	08020e59 	.word	0x08020e59
 8020e4c:	08020e5f 	.word	0x08020e5f
 8020e50:	08020e65 	.word	0x08020e65
 8020e54:	08020e6b 	.word	0x08020e6b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8020e58:	2300      	movs	r3, #0
 8020e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8020e5c:	e00b      	b.n	8020e76 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8020e5e:	2302      	movs	r3, #2
 8020e60:	73fb      	strb	r3, [r7, #15]
    break;
 8020e62:	e008      	b.n	8020e76 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8020e64:	2301      	movs	r3, #1
 8020e66:	73fb      	strb	r3, [r7, #15]
    break;
 8020e68:	e005      	b.n	8020e76 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8020e6a:	2302      	movs	r3, #2
 8020e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8020e6e:	e002      	b.n	8020e76 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8020e70:	2302      	movs	r3, #2
 8020e72:	73fb      	strb	r3, [r7, #15]
    break;
 8020e74:	bf00      	nop
  }
  return usb_status;
 8020e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8020e78:	4618      	mov	r0, r3
 8020e7a:	3714      	adds	r7, #20
 8020e7c:	46bd      	mov	sp, r7
 8020e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e82:	4770      	bx	lr

08020e84 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8020e84:	b580      	push	{r7, lr}
 8020e86:	b084      	sub	sp, #16
 8020e88:	af00      	add	r7, sp, #0
 8020e8a:	4603      	mov	r3, r0
 8020e8c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8020e8e:	79fb      	ldrb	r3, [r7, #7]
 8020e90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8020e92:	79fb      	ldrb	r3, [r7, #7]
 8020e94:	2b00      	cmp	r3, #0
 8020e96:	d102      	bne.n	8020e9e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8020e98:	2301      	movs	r3, #1
 8020e9a:	73fb      	strb	r3, [r7, #15]
 8020e9c:	e001      	b.n	8020ea2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8020e9e:	2300      	movs	r3, #0
 8020ea0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8020ea2:	7bfb      	ldrb	r3, [r7, #15]
 8020ea4:	461a      	mov	r2, r3
 8020ea6:	2120      	movs	r1, #32
 8020ea8:	4803      	ldr	r0, [pc, #12]	; (8020eb8 <MX_DriverVbusFS+0x34>)
 8020eaa:	f7e5 fb55 	bl	8006558 <HAL_GPIO_WritePin>
}
 8020eae:	bf00      	nop
 8020eb0:	3710      	adds	r7, #16
 8020eb2:	46bd      	mov	sp, r7
 8020eb4:	bd80      	pop	{r7, pc}
 8020eb6:	bf00      	nop
 8020eb8:	40020c00 	.word	0x40020c00

08020ebc <LCD_LOG_Init>:
  * @param  None
  * @retval None
  */

void LCD_LOG_Init ( void)
{
 8020ebc:	b580      	push	{r7, lr}
 8020ebe:	af00      	add	r7, sp, #0
  /* Deinit LCD cache */
  LCD_LOG_DeInit();
 8020ec0:	f000 f806 	bl	8020ed0 <LCD_LOG_DeInit>
  
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 8020ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020ec8:	f7e1 ffe6 	bl	8002e98 <BSP_LCD_Clear>
}
 8020ecc:	bf00      	nop
 8020ece:	bd80      	pop	{r7, pc}

08020ed0 <LCD_LOG_DeInit>:
  * @brief DeInitializes the LCD Log module. 
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
 8020ed0:	b480      	push	{r7}
 8020ed2:	af00      	add	r7, sp, #0
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8020ed4:	4b12      	ldr	r3, [pc, #72]	; (8020f20 <LCD_LOG_DeInit+0x50>)
 8020ed6:	4a13      	ldr	r2, [pc, #76]	; (8020f24 <LCD_LOG_DeInit+0x54>)
 8020ed8:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 8020eda:	4b13      	ldr	r3, [pc, #76]	; (8020f28 <LCD_LOG_DeInit+0x58>)
 8020edc:	2200      	movs	r2, #0
 8020ede:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_top = 0;
 8020ee0:	4b12      	ldr	r3, [pc, #72]	; (8020f2c <LCD_LOG_DeInit+0x5c>)
 8020ee2:	2200      	movs	r2, #0
 8020ee4:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 8020ee6:	4b12      	ldr	r3, [pc, #72]	; (8020f30 <LCD_LOG_DeInit+0x60>)
 8020ee8:	2200      	movs	r2, #0
 8020eea:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_top_bak = 0;
 8020eec:	4b11      	ldr	r3, [pc, #68]	; (8020f34 <LCD_LOG_DeInit+0x64>)
 8020eee:	2200      	movs	r2, #0
 8020ef0:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 8020ef2:	4b11      	ldr	r3, [pc, #68]	; (8020f38 <LCD_LOG_DeInit+0x68>)
 8020ef4:	2200      	movs	r2, #0
 8020ef6:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 8020ef8:	4b10      	ldr	r3, [pc, #64]	; (8020f3c <LCD_LOG_DeInit+0x6c>)
 8020efa:	2201      	movs	r2, #1
 8020efc:	701a      	strb	r2, [r3, #0]
  LCD_ScrollActive = DISABLE;
 8020efe:	4b10      	ldr	r3, [pc, #64]	; (8020f40 <LCD_LOG_DeInit+0x70>)
 8020f00:	2200      	movs	r2, #0
 8020f02:	701a      	strb	r2, [r3, #0]
  LCD_Lock = DISABLE;
 8020f04:	4b0f      	ldr	r3, [pc, #60]	; (8020f44 <LCD_LOG_DeInit+0x74>)
 8020f06:	2200      	movs	r2, #0
 8020f08:	701a      	strb	r2, [r3, #0]
  LCD_Scrolled = DISABLE;
 8020f0a:	4b0f      	ldr	r3, [pc, #60]	; (8020f48 <LCD_LOG_DeInit+0x78>)
 8020f0c:	2200      	movs	r2, #0
 8020f0e:	701a      	strb	r2, [r3, #0]
  LCD_ScrollBackStep = 0;
 8020f10:	4b0e      	ldr	r3, [pc, #56]	; (8020f4c <LCD_LOG_DeInit+0x7c>)
 8020f12:	2200      	movs	r2, #0
 8020f14:	801a      	strh	r2, [r3, #0]
}
 8020f16:	bf00      	nop
 8020f18:	46bd      	mov	sp, r7
 8020f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f1e:	4770      	bx	lr
 8020f20:	200146cc 	.word	0x200146cc
 8020f24:	ff000080 	.word	0xff000080
 8020f28:	20010a6e 	.word	0x20010a6e
 8020f2c:	20010a74 	.word	0x20010a74
 8020f30:	20010a6c 	.word	0x20010a6c
 8020f34:	20010a6a 	.word	0x20010a6a
 8020f38:	20010a68 	.word	0x20010a68
 8020f3c:	20010a70 	.word	0x20010a70
 8020f40:	20010a76 	.word	0x20010a76
 8020f44:	20010a71 	.word	0x20010a71
 8020f48:	20010a72 	.word	0x20010a72
 8020f4c:	200146d0 	.word	0x200146d0

08020f50 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 8020f50:	b580      	push	{r7, lr}
 8020f52:	b082      	sub	sp, #8
 8020f54:	af00      	add	r7, sp, #0
 8020f56:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 8020f58:	4817      	ldr	r0, [pc, #92]	; (8020fb8 <LCD_LOG_SetHeader+0x68>)
 8020f5a:	f7e1 ff6d 	bl	8002e38 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8020f5e:	4817      	ldr	r0, [pc, #92]	; (8020fbc <LCD_LOG_SetHeader+0x6c>)
 8020f60:	f7e1 ff38 	bl	8002dd4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 8020f64:	f7e1 feae 	bl	8002cc4 <BSP_LCD_GetXSize>
 8020f68:	4603      	mov	r3, r0
 8020f6a:	b29a      	uxth	r2, r3
 8020f6c:	4b12      	ldr	r3, [pc, #72]	; (8020fb8 <LCD_LOG_SetHeader+0x68>)
 8020f6e:	88db      	ldrh	r3, [r3, #6]
 8020f70:	4619      	mov	r1, r3
 8020f72:	0049      	lsls	r1, r1, #1
 8020f74:	440b      	add	r3, r1
 8020f76:	b29b      	uxth	r3, r3
 8020f78:	2100      	movs	r1, #0
 8020f7a:	2000      	movs	r0, #0
 8020f7c:	f7e2 f91c 	bl	80031b8 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 8020f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020f84:	f7e1 ff26 	bl	8002dd4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8020f88:	480c      	ldr	r0, [pc, #48]	; (8020fbc <LCD_LOG_SetHeader+0x6c>)
 8020f8a:	f7e1 ff3b 	bl	8002e04 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 8020f8e:	4b0a      	ldr	r3, [pc, #40]	; (8020fb8 <LCD_LOG_SetHeader+0x68>)
 8020f90:	88d9      	ldrh	r1, [r3, #6]
 8020f92:	2301      	movs	r3, #1
 8020f94:	687a      	ldr	r2, [r7, #4]
 8020f96:	2000      	movs	r0, #0
 8020f98:	f7e1 ffea 	bl	8002f70 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8020f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020fa0:	f7e1 ff30 	bl	8002e04 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8020fa4:	4806      	ldr	r0, [pc, #24]	; (8020fc0 <LCD_LOG_SetHeader+0x70>)
 8020fa6:	f7e1 ff15 	bl	8002dd4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8020faa:	4806      	ldr	r0, [pc, #24]	; (8020fc4 <LCD_LOG_SetHeader+0x74>)
 8020fac:	f7e1 ff44 	bl	8002e38 <BSP_LCD_SetFont>
}
 8020fb0:	bf00      	nop
 8020fb2:	3708      	adds	r7, #8
 8020fb4:	46bd      	mov	sp, r7
 8020fb6:	bd80      	pop	{r7, pc}
 8020fb8:	2000004c 	.word	0x2000004c
 8020fbc:	ff0000ff 	.word	0xff0000ff
 8020fc0:	ff000080 	.word	0xff000080
 8020fc4:	20000044 	.word	0x20000044

08020fc8 <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 8020fc8:	b590      	push	{r4, r7, lr}
 8020fca:	b083      	sub	sp, #12
 8020fcc:	af00      	add	r7, sp, #0
 8020fce:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8020fd0:	481e      	ldr	r0, [pc, #120]	; (802104c <LCD_LOG_SetFooter+0x84>)
 8020fd2:	f7e1 ff31 	bl	8002e38 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8020fd6:	481e      	ldr	r0, [pc, #120]	; (8021050 <LCD_LOG_SetFooter+0x88>)
 8020fd8:	f7e1 fefc 	bl	8002dd4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 8020fdc:	f7e1 fe86 	bl	8002cec <BSP_LCD_GetYSize>
 8020fe0:	4603      	mov	r3, r0
 8020fe2:	b29a      	uxth	r2, r3
 8020fe4:	4b19      	ldr	r3, [pc, #100]	; (802104c <LCD_LOG_SetFooter+0x84>)
 8020fe6:	88db      	ldrh	r3, [r3, #6]
 8020fe8:	1ad3      	subs	r3, r2, r3
 8020fea:	b29b      	uxth	r3, r3
 8020fec:	3b04      	subs	r3, #4
 8020fee:	b29c      	uxth	r4, r3
 8020ff0:	f7e1 fe68 	bl	8002cc4 <BSP_LCD_GetXSize>
 8020ff4:	4603      	mov	r3, r0
 8020ff6:	b29a      	uxth	r2, r3
 8020ff8:	4b14      	ldr	r3, [pc, #80]	; (802104c <LCD_LOG_SetFooter+0x84>)
 8020ffa:	88db      	ldrh	r3, [r3, #6]
 8020ffc:	3304      	adds	r3, #4
 8020ffe:	b29b      	uxth	r3, r3
 8021000:	4621      	mov	r1, r4
 8021002:	2000      	movs	r0, #0
 8021004:	f7e2 f8d8 	bl	80031b8 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 8021008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802100c:	f7e1 fee2 	bl	8002dd4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8021010:	480f      	ldr	r0, [pc, #60]	; (8021050 <LCD_LOG_SetFooter+0x88>)
 8021012:	f7e1 fef7 	bl	8002e04 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 8021016:	f7e1 fe69 	bl	8002cec <BSP_LCD_GetYSize>
 802101a:	4603      	mov	r3, r0
 802101c:	b29a      	uxth	r2, r3
 802101e:	4b0b      	ldr	r3, [pc, #44]	; (802104c <LCD_LOG_SetFooter+0x84>)
 8021020:	88db      	ldrh	r3, [r3, #6]
 8021022:	1ad3      	subs	r3, r2, r3
 8021024:	b299      	uxth	r1, r3
 8021026:	2301      	movs	r3, #1
 8021028:	687a      	ldr	r2, [r7, #4]
 802102a:	2000      	movs	r0, #0
 802102c:	f7e1 ffa0 	bl	8002f70 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8021030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021034:	f7e1 fee6 	bl	8002e04 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8021038:	4806      	ldr	r0, [pc, #24]	; (8021054 <LCD_LOG_SetFooter+0x8c>)
 802103a:	f7e1 fecb 	bl	8002dd4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 802103e:	4803      	ldr	r0, [pc, #12]	; (802104c <LCD_LOG_SetFooter+0x84>)
 8021040:	f7e1 fefa 	bl	8002e38 <BSP_LCD_SetFont>
}
 8021044:	bf00      	nop
 8021046:	370c      	adds	r7, #12
 8021048:	46bd      	mov	sp, r7
 802104a:	bd90      	pop	{r4, r7, pc}
 802104c:	20000044 	.word	0x20000044
 8021050:	ff0000ff 	.word	0xff0000ff
 8021054:	ff000080 	.word	0xff000080

08021058 <__io_putchar>:
  * @param  c: character to be displayed
  * @param  f: output file pointer
  * @retval None
 */
LCD_LOG_PUTCHAR
{
 8021058:	b590      	push	{r4, r7, lr}
 802105a:	b085      	sub	sp, #20
 802105c:	af00      	add	r7, sp, #0
 802105e:	6078      	str	r0, [r7, #4]
  
  sFONT *cFont = BSP_LCD_GetFont();
 8021060:	f7e1 ff04 	bl	8002e6c <BSP_LCD_GetFont>
 8021064:	60b8      	str	r0, [r7, #8]
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 8021066:	4b60      	ldr	r3, [pc, #384]	; (80211e8 <__io_putchar+0x190>)
 8021068:	781b      	ldrb	r3, [r3, #0]
 802106a:	2b00      	cmp	r3, #0
 802106c:	f040 80b6 	bne.w	80211dc <__io_putchar+0x184>
  {
    if(LCD_ScrollActive == ENABLE)
 8021070:	4b5e      	ldr	r3, [pc, #376]	; (80211ec <__io_putchar+0x194>)
 8021072:	781b      	ldrb	r3, [r3, #0]
 8021074:	2b01      	cmp	r3, #1
 8021076:	d110      	bne.n	802109a <__io_putchar+0x42>
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8021078:	4b5d      	ldr	r3, [pc, #372]	; (80211f0 <__io_putchar+0x198>)
 802107a:	881a      	ldrh	r2, [r3, #0]
 802107c:	4b5d      	ldr	r3, [pc, #372]	; (80211f4 <__io_putchar+0x19c>)
 802107e:	801a      	strh	r2, [r3, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8021080:	4b5d      	ldr	r3, [pc, #372]	; (80211f8 <__io_putchar+0x1a0>)
 8021082:	881a      	ldrh	r2, [r3, #0]
 8021084:	4b5d      	ldr	r3, [pc, #372]	; (80211fc <__io_putchar+0x1a4>)
 8021086:	801a      	strh	r2, [r3, #0]
      LCD_ScrollActive = DISABLE;
 8021088:	4b58      	ldr	r3, [pc, #352]	; (80211ec <__io_putchar+0x194>)
 802108a:	2200      	movs	r2, #0
 802108c:	701a      	strb	r2, [r3, #0]
      LCD_Scrolled = DISABLE;
 802108e:	4b5c      	ldr	r3, [pc, #368]	; (8021200 <__io_putchar+0x1a8>)
 8021090:	2200      	movs	r2, #0
 8021092:	701a      	strb	r2, [r3, #0]
      LCD_ScrollBackStep = 0;
 8021094:	4b5b      	ldr	r3, [pc, #364]	; (8021204 <__io_putchar+0x1ac>)
 8021096:	2200      	movs	r2, #0
 8021098:	801a      	strh	r2, [r3, #0]
      
    }
    
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 802109a:	4b5b      	ldr	r3, [pc, #364]	; (8021208 <__io_putchar+0x1b0>)
 802109c:	881b      	ldrh	r3, [r3, #0]
 802109e:	461c      	mov	r4, r3
 80210a0:	f7e1 fe10 	bl	8002cc4 <BSP_LCD_GetXSize>
 80210a4:	4602      	mov	r2, r0
 80210a6:	68bb      	ldr	r3, [r7, #8]
 80210a8:	889b      	ldrh	r3, [r3, #4]
 80210aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80210ae:	429c      	cmp	r4, r3
 80210b0:	d218      	bcs.n	80210e4 <__io_putchar+0x8c>
 80210b2:	687b      	ldr	r3, [r7, #4]
 80210b4:	2b0a      	cmp	r3, #10
 80210b6:	d015      	beq.n	80210e4 <__io_putchar+0x8c>
    {
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80210b8:	4b4e      	ldr	r3, [pc, #312]	; (80211f4 <__io_putchar+0x19c>)
 80210ba:	881b      	ldrh	r3, [r3, #0]
 80210bc:	4619      	mov	r1, r3
 80210be:	4b52      	ldr	r3, [pc, #328]	; (8021208 <__io_putchar+0x1b0>)
 80210c0:	881b      	ldrh	r3, [r3, #0]
 80210c2:	1c5a      	adds	r2, r3, #1
 80210c4:	b290      	uxth	r0, r2
 80210c6:	4a50      	ldr	r2, [pc, #320]	; (8021208 <__io_putchar+0x1b0>)
 80210c8:	8010      	strh	r0, [r2, #0]
 80210ca:	461c      	mov	r4, r3
 80210cc:	687b      	ldr	r3, [r7, #4]
 80210ce:	b2d8      	uxtb	r0, r3
 80210d0:	4a4e      	ldr	r2, [pc, #312]	; (802120c <__io_putchar+0x1b4>)
 80210d2:	460b      	mov	r3, r1
 80210d4:	015b      	lsls	r3, r3, #5
 80210d6:	440b      	add	r3, r1
 80210d8:	009b      	lsls	r3, r3, #2
 80210da:	4413      	add	r3, r2
 80210dc:	4423      	add	r3, r4
 80210de:	4602      	mov	r2, r0
 80210e0:	701a      	strb	r2, [r3, #0]
 80210e2:	e07b      	b.n	80211dc <__io_putchar+0x184>
    }   
    else 
    {
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 80210e4:	4b45      	ldr	r3, [pc, #276]	; (80211fc <__io_putchar+0x1a4>)
 80210e6:	881a      	ldrh	r2, [r3, #0]
 80210e8:	4b42      	ldr	r3, [pc, #264]	; (80211f4 <__io_putchar+0x19c>)
 80210ea:	881b      	ldrh	r3, [r3, #0]
 80210ec:	429a      	cmp	r2, r3
 80210ee:	d314      	bcc.n	802111a <__io_putchar+0xc2>
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 80210f0:	4b47      	ldr	r3, [pc, #284]	; (8021210 <__io_putchar+0x1b8>)
 80210f2:	781b      	ldrb	r3, [r3, #0]
 80210f4:	2b00      	cmp	r3, #0
 80210f6:	d10d      	bne.n	8021114 <__io_putchar+0xbc>
        {
          LCD_CacheBuffer_yptr_top++;
 80210f8:	4b40      	ldr	r3, [pc, #256]	; (80211fc <__io_putchar+0x1a4>)
 80210fa:	881b      	ldrh	r3, [r3, #0]
 80210fc:	3301      	adds	r3, #1
 80210fe:	b29a      	uxth	r2, r3
 8021100:	4b3e      	ldr	r3, [pc, #248]	; (80211fc <__io_putchar+0x1a4>)
 8021102:	801a      	strh	r2, [r3, #0]
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8021104:	4b3d      	ldr	r3, [pc, #244]	; (80211fc <__io_putchar+0x1a4>)
 8021106:	881b      	ldrh	r3, [r3, #0]
 8021108:	2b75      	cmp	r3, #117	; 0x75
 802110a:	d106      	bne.n	802111a <__io_putchar+0xc2>
          {
            LCD_CacheBuffer_yptr_top = 0;  
 802110c:	4b3b      	ldr	r3, [pc, #236]	; (80211fc <__io_putchar+0x1a4>)
 802110e:	2200      	movs	r2, #0
 8021110:	801a      	strh	r2, [r3, #0]
 8021112:	e002      	b.n	802111a <__io_putchar+0xc2>
          }
        }
        else
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8021114:	4b3e      	ldr	r3, [pc, #248]	; (8021210 <__io_putchar+0x1b8>)
 8021116:	2200      	movs	r2, #0
 8021118:	701a      	strb	r2, [r3, #0]
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 802111a:	4b3b      	ldr	r3, [pc, #236]	; (8021208 <__io_putchar+0x1b0>)
 802111c:	881b      	ldrh	r3, [r3, #0]
 802111e:	60fb      	str	r3, [r7, #12]
 8021120:	e015      	b.n	802114e <__io_putchar+0xf6>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8021122:	4b34      	ldr	r3, [pc, #208]	; (80211f4 <__io_putchar+0x19c>)
 8021124:	881b      	ldrh	r3, [r3, #0]
 8021126:	4619      	mov	r1, r3
 8021128:	4b37      	ldr	r3, [pc, #220]	; (8021208 <__io_putchar+0x1b0>)
 802112a:	881b      	ldrh	r3, [r3, #0]
 802112c:	1c5a      	adds	r2, r3, #1
 802112e:	b290      	uxth	r0, r2
 8021130:	4a35      	ldr	r2, [pc, #212]	; (8021208 <__io_putchar+0x1b0>)
 8021132:	8010      	strh	r0, [r2, #0]
 8021134:	4618      	mov	r0, r3
 8021136:	4a35      	ldr	r2, [pc, #212]	; (802120c <__io_putchar+0x1b4>)
 8021138:	460b      	mov	r3, r1
 802113a:	015b      	lsls	r3, r3, #5
 802113c:	440b      	add	r3, r1
 802113e:	009b      	lsls	r3, r3, #2
 8021140:	4413      	add	r3, r2
 8021142:	4403      	add	r3, r0
 8021144:	2220      	movs	r2, #32
 8021146:	701a      	strb	r2, [r3, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8021148:	68fb      	ldr	r3, [r7, #12]
 802114a:	3301      	adds	r3, #1
 802114c:	60fb      	str	r3, [r7, #12]
 802114e:	f7e1 fdb9 	bl	8002cc4 <BSP_LCD_GetXSize>
 8021152:	4602      	mov	r2, r0
 8021154:	68bb      	ldr	r3, [r7, #8]
 8021156:	889b      	ldrh	r3, [r3, #4]
 8021158:	fbb2 f3f3 	udiv	r3, r2, r3
 802115c:	68fa      	ldr	r2, [r7, #12]
 802115e:	429a      	cmp	r2, r3
 8021160:	d3df      	bcc.n	8021122 <__io_putchar+0xca>
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8021162:	4b24      	ldr	r3, [pc, #144]	; (80211f4 <__io_putchar+0x19c>)
 8021164:	881b      	ldrh	r3, [r3, #0]
 8021166:	4618      	mov	r0, r3
 8021168:	4b2a      	ldr	r3, [pc, #168]	; (8021214 <__io_putchar+0x1bc>)
 802116a:	681a      	ldr	r2, [r3, #0]
 802116c:	4927      	ldr	r1, [pc, #156]	; (802120c <__io_putchar+0x1b4>)
 802116e:	4603      	mov	r3, r0
 8021170:	015b      	lsls	r3, r3, #5
 8021172:	4403      	add	r3, r0
 8021174:	009b      	lsls	r3, r3, #2
 8021176:	440b      	add	r3, r1
 8021178:	3380      	adds	r3, #128	; 0x80
 802117a:	601a      	str	r2, [r3, #0]
      
      LCD_CacheBuffer_xptr = 0;
 802117c:	4b22      	ldr	r3, [pc, #136]	; (8021208 <__io_putchar+0x1b0>)
 802117e:	2200      	movs	r2, #0
 8021180:	801a      	strh	r2, [r3, #0]
      
      LCD_LOG_UpdateDisplay (); 
 8021182:	f000 f849 	bl	8021218 <LCD_LOG_UpdateDisplay>
      
      LCD_CacheBuffer_yptr_bottom ++; 
 8021186:	4b1b      	ldr	r3, [pc, #108]	; (80211f4 <__io_putchar+0x19c>)
 8021188:	881b      	ldrh	r3, [r3, #0]
 802118a:	3301      	adds	r3, #1
 802118c:	b29a      	uxth	r2, r3
 802118e:	4b19      	ldr	r3, [pc, #100]	; (80211f4 <__io_putchar+0x19c>)
 8021190:	801a      	strh	r2, [r3, #0]
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8021192:	4b18      	ldr	r3, [pc, #96]	; (80211f4 <__io_putchar+0x19c>)
 8021194:	881b      	ldrh	r3, [r3, #0]
 8021196:	2b75      	cmp	r3, #117	; 0x75
 8021198:	d108      	bne.n	80211ac <__io_putchar+0x154>
      {
        LCD_CacheBuffer_yptr_bottom = 0;
 802119a:	4b16      	ldr	r3, [pc, #88]	; (80211f4 <__io_putchar+0x19c>)
 802119c:	2200      	movs	r2, #0
 802119e:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 80211a0:	4b16      	ldr	r3, [pc, #88]	; (80211fc <__io_putchar+0x1a4>)
 80211a2:	2201      	movs	r2, #1
 80211a4:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 80211a6:	4b1a      	ldr	r3, [pc, #104]	; (8021210 <__io_putchar+0x1b8>)
 80211a8:	2201      	movs	r2, #1
 80211aa:	701a      	strb	r2, [r3, #0]
      }
      
      if( ch != '\n')
 80211ac:	687b      	ldr	r3, [r7, #4]
 80211ae:	2b0a      	cmp	r3, #10
 80211b0:	d014      	beq.n	80211dc <__io_putchar+0x184>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80211b2:	4b10      	ldr	r3, [pc, #64]	; (80211f4 <__io_putchar+0x19c>)
 80211b4:	881b      	ldrh	r3, [r3, #0]
 80211b6:	4619      	mov	r1, r3
 80211b8:	4b13      	ldr	r3, [pc, #76]	; (8021208 <__io_putchar+0x1b0>)
 80211ba:	881b      	ldrh	r3, [r3, #0]
 80211bc:	1c5a      	adds	r2, r3, #1
 80211be:	b290      	uxth	r0, r2
 80211c0:	4a11      	ldr	r2, [pc, #68]	; (8021208 <__io_putchar+0x1b0>)
 80211c2:	8010      	strh	r0, [r2, #0]
 80211c4:	461c      	mov	r4, r3
 80211c6:	687b      	ldr	r3, [r7, #4]
 80211c8:	b2d8      	uxtb	r0, r3
 80211ca:	4a10      	ldr	r2, [pc, #64]	; (802120c <__io_putchar+0x1b4>)
 80211cc:	460b      	mov	r3, r1
 80211ce:	015b      	lsls	r3, r3, #5
 80211d0:	440b      	add	r3, r1
 80211d2:	009b      	lsls	r3, r3, #2
 80211d4:	4413      	add	r3, r2
 80211d6:	4423      	add	r3, r4
 80211d8:	4602      	mov	r2, r0
 80211da:	701a      	strb	r2, [r3, #0]
      }
      
    }
  }
  return ch;
 80211dc:	687b      	ldr	r3, [r7, #4]
}
 80211de:	4618      	mov	r0, r3
 80211e0:	3714      	adds	r7, #20
 80211e2:	46bd      	mov	sp, r7
 80211e4:	bd90      	pop	{r4, r7, pc}
 80211e6:	bf00      	nop
 80211e8:	20010a71 	.word	0x20010a71
 80211ec:	20010a76 	.word	0x20010a76
 80211f0:	20010a68 	.word	0x20010a68
 80211f4:	20010a6c 	.word	0x20010a6c
 80211f8:	20010a6a 	.word	0x20010a6a
 80211fc:	20010a74 	.word	0x20010a74
 8021200:	20010a72 	.word	0x20010a72
 8021204:	200146d0 	.word	0x200146d0
 8021208:	20010a6e 	.word	0x20010a6e
 802120c:	20010a78 	.word	0x20010a78
 8021210:	20010a70 	.word	0x20010a70
 8021214:	200146cc 	.word	0x200146cc

08021218 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8021218:	b580      	push	{r7, lr}
 802121a:	b082      	sub	sp, #8
 802121c:	af00      	add	r7, sp, #0
  uint8_t cnt = 0 ;
 802121e:	2300      	movs	r3, #0
 8021220:	71fb      	strb	r3, [r7, #7]
  uint16_t length = 0 ;
 8021222:	2300      	movs	r3, #0
 8021224:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = 0, index = 0;
 8021226:	2300      	movs	r3, #0
 8021228:	807b      	strh	r3, [r7, #2]
 802122a:	2300      	movs	r3, #0
 802122c:	803b      	strh	r3, [r7, #0]
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 802122e:	4b39      	ldr	r3, [pc, #228]	; (8021314 <LCD_LOG_UpdateDisplay+0xfc>)
 8021230:	881b      	ldrh	r3, [r3, #0]
 8021232:	2b0f      	cmp	r3, #15
 8021234:	d826      	bhi.n	8021284 <LCD_LOG_UpdateDisplay+0x6c>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 8021236:	4b37      	ldr	r3, [pc, #220]	; (8021314 <LCD_LOG_UpdateDisplay+0xfc>)
 8021238:	881a      	ldrh	r2, [r3, #0]
 802123a:	4b37      	ldr	r3, [pc, #220]	; (8021318 <LCD_LOG_UpdateDisplay+0x100>)
 802123c:	881b      	ldrh	r3, [r3, #0]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 802123e:	429a      	cmp	r2, r3
 8021240:	d320      	bcc.n	8021284 <LCD_LOG_UpdateDisplay+0x6c>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 8021242:	79fb      	ldrb	r3, [r7, #7]
 8021244:	4a33      	ldr	r2, [pc, #204]	; (8021314 <LCD_LOG_UpdateDisplay+0xfc>)
 8021246:	8812      	ldrh	r2, [r2, #0]
 8021248:	441a      	add	r2, r3
 802124a:	4934      	ldr	r1, [pc, #208]	; (802131c <LCD_LOG_UpdateDisplay+0x104>)
 802124c:	4613      	mov	r3, r2
 802124e:	015b      	lsls	r3, r3, #5
 8021250:	4413      	add	r3, r2
 8021252:	009b      	lsls	r3, r3, #2
 8021254:	440b      	add	r3, r1
 8021256:	3380      	adds	r3, #128	; 0x80
 8021258:	681b      	ldr	r3, [r3, #0]
 802125a:	4618      	mov	r0, r3
 802125c:	f7e1 fdba 	bl	8002dd4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8021260:	4b2c      	ldr	r3, [pc, #176]	; (8021314 <LCD_LOG_UpdateDisplay+0xfc>)
 8021262:	881b      	ldrh	r3, [r3, #0]
 8021264:	3304      	adds	r3, #4
 8021266:	b298      	uxth	r0, r3
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
 8021268:	79fb      	ldrb	r3, [r7, #7]
 802126a:	4a2a      	ldr	r2, [pc, #168]	; (8021314 <LCD_LOG_UpdateDisplay+0xfc>)
 802126c:	8812      	ldrh	r2, [r2, #0]
 802126e:	441a      	add	r2, r3
 8021270:	4613      	mov	r3, r2
 8021272:	015b      	lsls	r3, r3, #5
 8021274:	4413      	add	r3, r2
 8021276:	009b      	lsls	r3, r3, #2
 8021278:	4a28      	ldr	r2, [pc, #160]	; (802131c <LCD_LOG_UpdateDisplay+0x104>)
 802127a:	4413      	add	r3, r2
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 802127c:	4619      	mov	r1, r3
 802127e:	f7e1 ff3b 	bl	80030f8 <BSP_LCD_DisplayStringAtLine>
 8021282:	e043      	b.n	802130c <LCD_LOG_UpdateDisplay+0xf4>
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 8021284:	4b23      	ldr	r3, [pc, #140]	; (8021314 <LCD_LOG_UpdateDisplay+0xfc>)
 8021286:	881a      	ldrh	r2, [r3, #0]
 8021288:	4b23      	ldr	r3, [pc, #140]	; (8021318 <LCD_LOG_UpdateDisplay+0x100>)
 802128a:	881b      	ldrh	r3, [r3, #0]
 802128c:	429a      	cmp	r2, r3
 802128e:	d204      	bcs.n	802129a <LCD_LOG_UpdateDisplay+0x82>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 8021290:	4b20      	ldr	r3, [pc, #128]	; (8021314 <LCD_LOG_UpdateDisplay+0xfc>)
 8021292:	881b      	ldrh	r3, [r3, #0]
 8021294:	3375      	adds	r3, #117	; 0x75
 8021296:	80bb      	strh	r3, [r7, #4]
 8021298:	e002      	b.n	80212a0 <LCD_LOG_UpdateDisplay+0x88>
    }
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
 802129a:	4b1e      	ldr	r3, [pc, #120]	; (8021314 <LCD_LOG_UpdateDisplay+0xfc>)
 802129c:	881b      	ldrh	r3, [r3, #0]
 802129e:	80bb      	strh	r3, [r7, #4]
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 80212a0:	88bb      	ldrh	r3, [r7, #4]
 80212a2:	3b10      	subs	r3, #16
 80212a4:	807b      	strh	r3, [r7, #2]
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 80212a6:	2300      	movs	r3, #0
 80212a8:	71fb      	strb	r3, [r7, #7]
 80212aa:	e02c      	b.n	8021306 <LCD_LOG_UpdateDisplay+0xee>
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 80212ac:	79fa      	ldrb	r2, [r7, #7]
 80212ae:	887b      	ldrh	r3, [r7, #2]
 80212b0:	4413      	add	r3, r2
 80212b2:	4a1b      	ldr	r2, [pc, #108]	; (8021320 <LCD_LOG_UpdateDisplay+0x108>)
 80212b4:	fb82 1203 	smull	r1, r2, r2, r3
 80212b8:	441a      	add	r2, r3
 80212ba:	1191      	asrs	r1, r2, #6
 80212bc:	17da      	asrs	r2, r3, #31
 80212be:	1a8a      	subs	r2, r1, r2
 80212c0:	2175      	movs	r1, #117	; 0x75
 80212c2:	fb01 f202 	mul.w	r2, r1, r2
 80212c6:	1a9a      	subs	r2, r3, r2
 80212c8:	4613      	mov	r3, r2
 80212ca:	803b      	strh	r3, [r7, #0]
      
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 80212cc:	883a      	ldrh	r2, [r7, #0]
 80212ce:	4913      	ldr	r1, [pc, #76]	; (802131c <LCD_LOG_UpdateDisplay+0x104>)
 80212d0:	4613      	mov	r3, r2
 80212d2:	015b      	lsls	r3, r3, #5
 80212d4:	4413      	add	r3, r2
 80212d6:	009b      	lsls	r3, r3, #2
 80212d8:	440b      	add	r3, r1
 80212da:	3380      	adds	r3, #128	; 0x80
 80212dc:	681b      	ldr	r3, [r3, #0]
 80212de:	4618      	mov	r0, r3
 80212e0:	f7e1 fd78 	bl	8002dd4 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 80212e4:	79fb      	ldrb	r3, [r7, #7]
 80212e6:	b29b      	uxth	r3, r3
 80212e8:	3304      	adds	r3, #4
 80212ea:	b298      	uxth	r0, r3
                             (uint8_t *)(LCD_CacheBuffer[index].line));
 80212ec:	883a      	ldrh	r2, [r7, #0]
 80212ee:	4613      	mov	r3, r2
 80212f0:	015b      	lsls	r3, r3, #5
 80212f2:	4413      	add	r3, r2
 80212f4:	009b      	lsls	r3, r3, #2
 80212f6:	4a09      	ldr	r2, [pc, #36]	; (802131c <LCD_LOG_UpdateDisplay+0x104>)
 80212f8:	4413      	add	r3, r2
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 80212fa:	4619      	mov	r1, r3
 80212fc:	f7e1 fefc 	bl	80030f8 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8021300:	79fb      	ldrb	r3, [r7, #7]
 8021302:	3301      	adds	r3, #1
 8021304:	71fb      	strb	r3, [r7, #7]
 8021306:	79fb      	ldrb	r3, [r7, #7]
 8021308:	2b10      	cmp	r3, #16
 802130a:	d9cf      	bls.n	80212ac <LCD_LOG_UpdateDisplay+0x94>
      
    }
  }
  
}
 802130c:	bf00      	nop
 802130e:	3708      	adds	r7, #8
 8021310:	46bd      	mov	sp, r7
 8021312:	bd80      	pop	{r7, pc}
 8021314:	20010a6c 	.word	0x20010a6c
 8021318:	20010a74 	.word	0x20010a74
 802131c:	20010a78 	.word	0x20010a78
 8021320:	8c08c08d 	.word	0x8c08c08d

08021324 <__libc_init_array>:
 8021324:	b570      	push	{r4, r5, r6, lr}
 8021326:	4e0d      	ldr	r6, [pc, #52]	; (802135c <__libc_init_array+0x38>)
 8021328:	4c0d      	ldr	r4, [pc, #52]	; (8021360 <__libc_init_array+0x3c>)
 802132a:	1ba4      	subs	r4, r4, r6
 802132c:	10a4      	asrs	r4, r4, #2
 802132e:	2500      	movs	r5, #0
 8021330:	42a5      	cmp	r5, r4
 8021332:	d109      	bne.n	8021348 <__libc_init_array+0x24>
 8021334:	4e0b      	ldr	r6, [pc, #44]	; (8021364 <__libc_init_array+0x40>)
 8021336:	4c0c      	ldr	r4, [pc, #48]	; (8021368 <__libc_init_array+0x44>)
 8021338:	f000 ffc6 	bl	80222c8 <_init>
 802133c:	1ba4      	subs	r4, r4, r6
 802133e:	10a4      	asrs	r4, r4, #2
 8021340:	2500      	movs	r5, #0
 8021342:	42a5      	cmp	r5, r4
 8021344:	d105      	bne.n	8021352 <__libc_init_array+0x2e>
 8021346:	bd70      	pop	{r4, r5, r6, pc}
 8021348:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802134c:	4798      	blx	r3
 802134e:	3501      	adds	r5, #1
 8021350:	e7ee      	b.n	8021330 <__libc_init_array+0xc>
 8021352:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021356:	4798      	blx	r3
 8021358:	3501      	adds	r5, #1
 802135a:	e7f2      	b.n	8021342 <__libc_init_array+0x1e>
 802135c:	08027f5c 	.word	0x08027f5c
 8021360:	08027f5c 	.word	0x08027f5c
 8021364:	08027f5c 	.word	0x08027f5c
 8021368:	08027f60 	.word	0x08027f60

0802136c <malloc>:
 802136c:	4b02      	ldr	r3, [pc, #8]	; (8021378 <malloc+0xc>)
 802136e:	4601      	mov	r1, r0
 8021370:	6818      	ldr	r0, [r3, #0]
 8021372:	f000 b87b 	b.w	802146c <_malloc_r>
 8021376:	bf00      	nop
 8021378:	2000005c 	.word	0x2000005c

0802137c <free>:
 802137c:	4b02      	ldr	r3, [pc, #8]	; (8021388 <free+0xc>)
 802137e:	4601      	mov	r1, r0
 8021380:	6818      	ldr	r0, [r3, #0]
 8021382:	f000 b825 	b.w	80213d0 <_free_r>
 8021386:	bf00      	nop
 8021388:	2000005c 	.word	0x2000005c

0802138c <memcmp>:
 802138c:	b530      	push	{r4, r5, lr}
 802138e:	2400      	movs	r4, #0
 8021390:	42a2      	cmp	r2, r4
 8021392:	d101      	bne.n	8021398 <memcmp+0xc>
 8021394:	2000      	movs	r0, #0
 8021396:	e007      	b.n	80213a8 <memcmp+0x1c>
 8021398:	5d03      	ldrb	r3, [r0, r4]
 802139a:	3401      	adds	r4, #1
 802139c:	190d      	adds	r5, r1, r4
 802139e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80213a2:	42ab      	cmp	r3, r5
 80213a4:	d0f4      	beq.n	8021390 <memcmp+0x4>
 80213a6:	1b58      	subs	r0, r3, r5
 80213a8:	bd30      	pop	{r4, r5, pc}

080213aa <memcpy>:
 80213aa:	b510      	push	{r4, lr}
 80213ac:	1e43      	subs	r3, r0, #1
 80213ae:	440a      	add	r2, r1
 80213b0:	4291      	cmp	r1, r2
 80213b2:	d100      	bne.n	80213b6 <memcpy+0xc>
 80213b4:	bd10      	pop	{r4, pc}
 80213b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80213ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80213be:	e7f7      	b.n	80213b0 <memcpy+0x6>

080213c0 <memset>:
 80213c0:	4402      	add	r2, r0
 80213c2:	4603      	mov	r3, r0
 80213c4:	4293      	cmp	r3, r2
 80213c6:	d100      	bne.n	80213ca <memset+0xa>
 80213c8:	4770      	bx	lr
 80213ca:	f803 1b01 	strb.w	r1, [r3], #1
 80213ce:	e7f9      	b.n	80213c4 <memset+0x4>

080213d0 <_free_r>:
 80213d0:	b538      	push	{r3, r4, r5, lr}
 80213d2:	4605      	mov	r5, r0
 80213d4:	2900      	cmp	r1, #0
 80213d6:	d045      	beq.n	8021464 <_free_r+0x94>
 80213d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80213dc:	1f0c      	subs	r4, r1, #4
 80213de:	2b00      	cmp	r3, #0
 80213e0:	bfb8      	it	lt
 80213e2:	18e4      	addlt	r4, r4, r3
 80213e4:	f000 fbfa 	bl	8021bdc <__malloc_lock>
 80213e8:	4a1f      	ldr	r2, [pc, #124]	; (8021468 <_free_r+0x98>)
 80213ea:	6813      	ldr	r3, [r2, #0]
 80213ec:	4610      	mov	r0, r2
 80213ee:	b933      	cbnz	r3, 80213fe <_free_r+0x2e>
 80213f0:	6063      	str	r3, [r4, #4]
 80213f2:	6014      	str	r4, [r2, #0]
 80213f4:	4628      	mov	r0, r5
 80213f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80213fa:	f000 bbf0 	b.w	8021bde <__malloc_unlock>
 80213fe:	42a3      	cmp	r3, r4
 8021400:	d90c      	bls.n	802141c <_free_r+0x4c>
 8021402:	6821      	ldr	r1, [r4, #0]
 8021404:	1862      	adds	r2, r4, r1
 8021406:	4293      	cmp	r3, r2
 8021408:	bf04      	itt	eq
 802140a:	681a      	ldreq	r2, [r3, #0]
 802140c:	685b      	ldreq	r3, [r3, #4]
 802140e:	6063      	str	r3, [r4, #4]
 8021410:	bf04      	itt	eq
 8021412:	1852      	addeq	r2, r2, r1
 8021414:	6022      	streq	r2, [r4, #0]
 8021416:	6004      	str	r4, [r0, #0]
 8021418:	e7ec      	b.n	80213f4 <_free_r+0x24>
 802141a:	4613      	mov	r3, r2
 802141c:	685a      	ldr	r2, [r3, #4]
 802141e:	b10a      	cbz	r2, 8021424 <_free_r+0x54>
 8021420:	42a2      	cmp	r2, r4
 8021422:	d9fa      	bls.n	802141a <_free_r+0x4a>
 8021424:	6819      	ldr	r1, [r3, #0]
 8021426:	1858      	adds	r0, r3, r1
 8021428:	42a0      	cmp	r0, r4
 802142a:	d10b      	bne.n	8021444 <_free_r+0x74>
 802142c:	6820      	ldr	r0, [r4, #0]
 802142e:	4401      	add	r1, r0
 8021430:	1858      	adds	r0, r3, r1
 8021432:	4282      	cmp	r2, r0
 8021434:	6019      	str	r1, [r3, #0]
 8021436:	d1dd      	bne.n	80213f4 <_free_r+0x24>
 8021438:	6810      	ldr	r0, [r2, #0]
 802143a:	6852      	ldr	r2, [r2, #4]
 802143c:	605a      	str	r2, [r3, #4]
 802143e:	4401      	add	r1, r0
 8021440:	6019      	str	r1, [r3, #0]
 8021442:	e7d7      	b.n	80213f4 <_free_r+0x24>
 8021444:	d902      	bls.n	802144c <_free_r+0x7c>
 8021446:	230c      	movs	r3, #12
 8021448:	602b      	str	r3, [r5, #0]
 802144a:	e7d3      	b.n	80213f4 <_free_r+0x24>
 802144c:	6820      	ldr	r0, [r4, #0]
 802144e:	1821      	adds	r1, r4, r0
 8021450:	428a      	cmp	r2, r1
 8021452:	bf04      	itt	eq
 8021454:	6811      	ldreq	r1, [r2, #0]
 8021456:	6852      	ldreq	r2, [r2, #4]
 8021458:	6062      	str	r2, [r4, #4]
 802145a:	bf04      	itt	eq
 802145c:	1809      	addeq	r1, r1, r0
 802145e:	6021      	streq	r1, [r4, #0]
 8021460:	605c      	str	r4, [r3, #4]
 8021462:	e7c7      	b.n	80213f4 <_free_r+0x24>
 8021464:	bd38      	pop	{r3, r4, r5, pc}
 8021466:	bf00      	nop
 8021468:	20009108 	.word	0x20009108

0802146c <_malloc_r>:
 802146c:	b570      	push	{r4, r5, r6, lr}
 802146e:	1ccd      	adds	r5, r1, #3
 8021470:	f025 0503 	bic.w	r5, r5, #3
 8021474:	3508      	adds	r5, #8
 8021476:	2d0c      	cmp	r5, #12
 8021478:	bf38      	it	cc
 802147a:	250c      	movcc	r5, #12
 802147c:	2d00      	cmp	r5, #0
 802147e:	4606      	mov	r6, r0
 8021480:	db01      	blt.n	8021486 <_malloc_r+0x1a>
 8021482:	42a9      	cmp	r1, r5
 8021484:	d903      	bls.n	802148e <_malloc_r+0x22>
 8021486:	230c      	movs	r3, #12
 8021488:	6033      	str	r3, [r6, #0]
 802148a:	2000      	movs	r0, #0
 802148c:	bd70      	pop	{r4, r5, r6, pc}
 802148e:	f000 fba5 	bl	8021bdc <__malloc_lock>
 8021492:	4a21      	ldr	r2, [pc, #132]	; (8021518 <_malloc_r+0xac>)
 8021494:	6814      	ldr	r4, [r2, #0]
 8021496:	4621      	mov	r1, r4
 8021498:	b991      	cbnz	r1, 80214c0 <_malloc_r+0x54>
 802149a:	4c20      	ldr	r4, [pc, #128]	; (802151c <_malloc_r+0xb0>)
 802149c:	6823      	ldr	r3, [r4, #0]
 802149e:	b91b      	cbnz	r3, 80214a8 <_malloc_r+0x3c>
 80214a0:	4630      	mov	r0, r6
 80214a2:	f000 f8ed 	bl	8021680 <_sbrk_r>
 80214a6:	6020      	str	r0, [r4, #0]
 80214a8:	4629      	mov	r1, r5
 80214aa:	4630      	mov	r0, r6
 80214ac:	f000 f8e8 	bl	8021680 <_sbrk_r>
 80214b0:	1c43      	adds	r3, r0, #1
 80214b2:	d124      	bne.n	80214fe <_malloc_r+0x92>
 80214b4:	230c      	movs	r3, #12
 80214b6:	6033      	str	r3, [r6, #0]
 80214b8:	4630      	mov	r0, r6
 80214ba:	f000 fb90 	bl	8021bde <__malloc_unlock>
 80214be:	e7e4      	b.n	802148a <_malloc_r+0x1e>
 80214c0:	680b      	ldr	r3, [r1, #0]
 80214c2:	1b5b      	subs	r3, r3, r5
 80214c4:	d418      	bmi.n	80214f8 <_malloc_r+0x8c>
 80214c6:	2b0b      	cmp	r3, #11
 80214c8:	d90f      	bls.n	80214ea <_malloc_r+0x7e>
 80214ca:	600b      	str	r3, [r1, #0]
 80214cc:	50cd      	str	r5, [r1, r3]
 80214ce:	18cc      	adds	r4, r1, r3
 80214d0:	4630      	mov	r0, r6
 80214d2:	f000 fb84 	bl	8021bde <__malloc_unlock>
 80214d6:	f104 000b 	add.w	r0, r4, #11
 80214da:	1d23      	adds	r3, r4, #4
 80214dc:	f020 0007 	bic.w	r0, r0, #7
 80214e0:	1ac3      	subs	r3, r0, r3
 80214e2:	d0d3      	beq.n	802148c <_malloc_r+0x20>
 80214e4:	425a      	negs	r2, r3
 80214e6:	50e2      	str	r2, [r4, r3]
 80214e8:	e7d0      	b.n	802148c <_malloc_r+0x20>
 80214ea:	428c      	cmp	r4, r1
 80214ec:	684b      	ldr	r3, [r1, #4]
 80214ee:	bf16      	itet	ne
 80214f0:	6063      	strne	r3, [r4, #4]
 80214f2:	6013      	streq	r3, [r2, #0]
 80214f4:	460c      	movne	r4, r1
 80214f6:	e7eb      	b.n	80214d0 <_malloc_r+0x64>
 80214f8:	460c      	mov	r4, r1
 80214fa:	6849      	ldr	r1, [r1, #4]
 80214fc:	e7cc      	b.n	8021498 <_malloc_r+0x2c>
 80214fe:	1cc4      	adds	r4, r0, #3
 8021500:	f024 0403 	bic.w	r4, r4, #3
 8021504:	42a0      	cmp	r0, r4
 8021506:	d005      	beq.n	8021514 <_malloc_r+0xa8>
 8021508:	1a21      	subs	r1, r4, r0
 802150a:	4630      	mov	r0, r6
 802150c:	f000 f8b8 	bl	8021680 <_sbrk_r>
 8021510:	3001      	adds	r0, #1
 8021512:	d0cf      	beq.n	80214b4 <_malloc_r+0x48>
 8021514:	6025      	str	r5, [r4, #0]
 8021516:	e7db      	b.n	80214d0 <_malloc_r+0x64>
 8021518:	20009108 	.word	0x20009108
 802151c:	2000910c 	.word	0x2000910c

08021520 <iprintf>:
 8021520:	b40f      	push	{r0, r1, r2, r3}
 8021522:	4b0a      	ldr	r3, [pc, #40]	; (802154c <iprintf+0x2c>)
 8021524:	b513      	push	{r0, r1, r4, lr}
 8021526:	681c      	ldr	r4, [r3, #0]
 8021528:	b124      	cbz	r4, 8021534 <iprintf+0x14>
 802152a:	69a3      	ldr	r3, [r4, #24]
 802152c:	b913      	cbnz	r3, 8021534 <iprintf+0x14>
 802152e:	4620      	mov	r0, r4
 8021530:	f000 fa66 	bl	8021a00 <__sinit>
 8021534:	ab05      	add	r3, sp, #20
 8021536:	9a04      	ldr	r2, [sp, #16]
 8021538:	68a1      	ldr	r1, [r4, #8]
 802153a:	9301      	str	r3, [sp, #4]
 802153c:	4620      	mov	r0, r4
 802153e:	f000 fb79 	bl	8021c34 <_vfiprintf_r>
 8021542:	b002      	add	sp, #8
 8021544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021548:	b004      	add	sp, #16
 802154a:	4770      	bx	lr
 802154c:	2000005c 	.word	0x2000005c

08021550 <_puts_r>:
 8021550:	b570      	push	{r4, r5, r6, lr}
 8021552:	460e      	mov	r6, r1
 8021554:	4605      	mov	r5, r0
 8021556:	b118      	cbz	r0, 8021560 <_puts_r+0x10>
 8021558:	6983      	ldr	r3, [r0, #24]
 802155a:	b90b      	cbnz	r3, 8021560 <_puts_r+0x10>
 802155c:	f000 fa50 	bl	8021a00 <__sinit>
 8021560:	69ab      	ldr	r3, [r5, #24]
 8021562:	68ac      	ldr	r4, [r5, #8]
 8021564:	b913      	cbnz	r3, 802156c <_puts_r+0x1c>
 8021566:	4628      	mov	r0, r5
 8021568:	f000 fa4a 	bl	8021a00 <__sinit>
 802156c:	4b23      	ldr	r3, [pc, #140]	; (80215fc <_puts_r+0xac>)
 802156e:	429c      	cmp	r4, r3
 8021570:	d117      	bne.n	80215a2 <_puts_r+0x52>
 8021572:	686c      	ldr	r4, [r5, #4]
 8021574:	89a3      	ldrh	r3, [r4, #12]
 8021576:	071b      	lsls	r3, r3, #28
 8021578:	d51d      	bpl.n	80215b6 <_puts_r+0x66>
 802157a:	6923      	ldr	r3, [r4, #16]
 802157c:	b1db      	cbz	r3, 80215b6 <_puts_r+0x66>
 802157e:	3e01      	subs	r6, #1
 8021580:	68a3      	ldr	r3, [r4, #8]
 8021582:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021586:	3b01      	subs	r3, #1
 8021588:	60a3      	str	r3, [r4, #8]
 802158a:	b9e9      	cbnz	r1, 80215c8 <_puts_r+0x78>
 802158c:	2b00      	cmp	r3, #0
 802158e:	da2e      	bge.n	80215ee <_puts_r+0x9e>
 8021590:	4622      	mov	r2, r4
 8021592:	210a      	movs	r1, #10
 8021594:	4628      	mov	r0, r5
 8021596:	f000 f883 	bl	80216a0 <__swbuf_r>
 802159a:	3001      	adds	r0, #1
 802159c:	d011      	beq.n	80215c2 <_puts_r+0x72>
 802159e:	200a      	movs	r0, #10
 80215a0:	e011      	b.n	80215c6 <_puts_r+0x76>
 80215a2:	4b17      	ldr	r3, [pc, #92]	; (8021600 <_puts_r+0xb0>)
 80215a4:	429c      	cmp	r4, r3
 80215a6:	d101      	bne.n	80215ac <_puts_r+0x5c>
 80215a8:	68ac      	ldr	r4, [r5, #8]
 80215aa:	e7e3      	b.n	8021574 <_puts_r+0x24>
 80215ac:	4b15      	ldr	r3, [pc, #84]	; (8021604 <_puts_r+0xb4>)
 80215ae:	429c      	cmp	r4, r3
 80215b0:	bf08      	it	eq
 80215b2:	68ec      	ldreq	r4, [r5, #12]
 80215b4:	e7de      	b.n	8021574 <_puts_r+0x24>
 80215b6:	4621      	mov	r1, r4
 80215b8:	4628      	mov	r0, r5
 80215ba:	f000 f8c3 	bl	8021744 <__swsetup_r>
 80215be:	2800      	cmp	r0, #0
 80215c0:	d0dd      	beq.n	802157e <_puts_r+0x2e>
 80215c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80215c6:	bd70      	pop	{r4, r5, r6, pc}
 80215c8:	2b00      	cmp	r3, #0
 80215ca:	da04      	bge.n	80215d6 <_puts_r+0x86>
 80215cc:	69a2      	ldr	r2, [r4, #24]
 80215ce:	429a      	cmp	r2, r3
 80215d0:	dc06      	bgt.n	80215e0 <_puts_r+0x90>
 80215d2:	290a      	cmp	r1, #10
 80215d4:	d004      	beq.n	80215e0 <_puts_r+0x90>
 80215d6:	6823      	ldr	r3, [r4, #0]
 80215d8:	1c5a      	adds	r2, r3, #1
 80215da:	6022      	str	r2, [r4, #0]
 80215dc:	7019      	strb	r1, [r3, #0]
 80215de:	e7cf      	b.n	8021580 <_puts_r+0x30>
 80215e0:	4622      	mov	r2, r4
 80215e2:	4628      	mov	r0, r5
 80215e4:	f000 f85c 	bl	80216a0 <__swbuf_r>
 80215e8:	3001      	adds	r0, #1
 80215ea:	d1c9      	bne.n	8021580 <_puts_r+0x30>
 80215ec:	e7e9      	b.n	80215c2 <_puts_r+0x72>
 80215ee:	6823      	ldr	r3, [r4, #0]
 80215f0:	200a      	movs	r0, #10
 80215f2:	1c5a      	adds	r2, r3, #1
 80215f4:	6022      	str	r2, [r4, #0]
 80215f6:	7018      	strb	r0, [r3, #0]
 80215f8:	e7e5      	b.n	80215c6 <_puts_r+0x76>
 80215fa:	bf00      	nop
 80215fc:	08027ee0 	.word	0x08027ee0
 8021600:	08027f00 	.word	0x08027f00
 8021604:	08027ec0 	.word	0x08027ec0

08021608 <puts>:
 8021608:	4b02      	ldr	r3, [pc, #8]	; (8021614 <puts+0xc>)
 802160a:	4601      	mov	r1, r0
 802160c:	6818      	ldr	r0, [r3, #0]
 802160e:	f7ff bf9f 	b.w	8021550 <_puts_r>
 8021612:	bf00      	nop
 8021614:	2000005c 	.word	0x2000005c

08021618 <rand>:
 8021618:	b538      	push	{r3, r4, r5, lr}
 802161a:	4b13      	ldr	r3, [pc, #76]	; (8021668 <rand+0x50>)
 802161c:	681c      	ldr	r4, [r3, #0]
 802161e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021620:	b97b      	cbnz	r3, 8021642 <rand+0x2a>
 8021622:	2018      	movs	r0, #24
 8021624:	f7ff fea2 	bl	802136c <malloc>
 8021628:	4a10      	ldr	r2, [pc, #64]	; (802166c <rand+0x54>)
 802162a:	4b11      	ldr	r3, [pc, #68]	; (8021670 <rand+0x58>)
 802162c:	63a0      	str	r0, [r4, #56]	; 0x38
 802162e:	e9c0 2300 	strd	r2, r3, [r0]
 8021632:	4b10      	ldr	r3, [pc, #64]	; (8021674 <rand+0x5c>)
 8021634:	6083      	str	r3, [r0, #8]
 8021636:	230b      	movs	r3, #11
 8021638:	8183      	strh	r3, [r0, #12]
 802163a:	2201      	movs	r2, #1
 802163c:	2300      	movs	r3, #0
 802163e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8021642:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021644:	480c      	ldr	r0, [pc, #48]	; (8021678 <rand+0x60>)
 8021646:	690a      	ldr	r2, [r1, #16]
 8021648:	694b      	ldr	r3, [r1, #20]
 802164a:	4c0c      	ldr	r4, [pc, #48]	; (802167c <rand+0x64>)
 802164c:	4350      	muls	r0, r2
 802164e:	fb04 0003 	mla	r0, r4, r3, r0
 8021652:	fba2 2304 	umull	r2, r3, r2, r4
 8021656:	4403      	add	r3, r0
 8021658:	1c54      	adds	r4, r2, #1
 802165a:	f143 0500 	adc.w	r5, r3, #0
 802165e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8021662:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8021666:	bd38      	pop	{r3, r4, r5, pc}
 8021668:	2000005c 	.word	0x2000005c
 802166c:	abcd330e 	.word	0xabcd330e
 8021670:	e66d1234 	.word	0xe66d1234
 8021674:	0005deec 	.word	0x0005deec
 8021678:	5851f42d 	.word	0x5851f42d
 802167c:	4c957f2d 	.word	0x4c957f2d

08021680 <_sbrk_r>:
 8021680:	b538      	push	{r3, r4, r5, lr}
 8021682:	4c06      	ldr	r4, [pc, #24]	; (802169c <_sbrk_r+0x1c>)
 8021684:	2300      	movs	r3, #0
 8021686:	4605      	mov	r5, r0
 8021688:	4608      	mov	r0, r1
 802168a:	6023      	str	r3, [r4, #0]
 802168c:	f7e1 fa36 	bl	8002afc <_sbrk>
 8021690:	1c43      	adds	r3, r0, #1
 8021692:	d102      	bne.n	802169a <_sbrk_r+0x1a>
 8021694:	6823      	ldr	r3, [r4, #0]
 8021696:	b103      	cbz	r3, 802169a <_sbrk_r+0x1a>
 8021698:	602b      	str	r3, [r5, #0]
 802169a:	bd38      	pop	{r3, r4, r5, pc}
 802169c:	20010378 	.word	0x20010378

080216a0 <__swbuf_r>:
 80216a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80216a2:	460e      	mov	r6, r1
 80216a4:	4614      	mov	r4, r2
 80216a6:	4605      	mov	r5, r0
 80216a8:	b118      	cbz	r0, 80216b2 <__swbuf_r+0x12>
 80216aa:	6983      	ldr	r3, [r0, #24]
 80216ac:	b90b      	cbnz	r3, 80216b2 <__swbuf_r+0x12>
 80216ae:	f000 f9a7 	bl	8021a00 <__sinit>
 80216b2:	4b21      	ldr	r3, [pc, #132]	; (8021738 <__swbuf_r+0x98>)
 80216b4:	429c      	cmp	r4, r3
 80216b6:	d12a      	bne.n	802170e <__swbuf_r+0x6e>
 80216b8:	686c      	ldr	r4, [r5, #4]
 80216ba:	69a3      	ldr	r3, [r4, #24]
 80216bc:	60a3      	str	r3, [r4, #8]
 80216be:	89a3      	ldrh	r3, [r4, #12]
 80216c0:	071a      	lsls	r2, r3, #28
 80216c2:	d52e      	bpl.n	8021722 <__swbuf_r+0x82>
 80216c4:	6923      	ldr	r3, [r4, #16]
 80216c6:	b363      	cbz	r3, 8021722 <__swbuf_r+0x82>
 80216c8:	6923      	ldr	r3, [r4, #16]
 80216ca:	6820      	ldr	r0, [r4, #0]
 80216cc:	1ac0      	subs	r0, r0, r3
 80216ce:	6963      	ldr	r3, [r4, #20]
 80216d0:	b2f6      	uxtb	r6, r6
 80216d2:	4283      	cmp	r3, r0
 80216d4:	4637      	mov	r7, r6
 80216d6:	dc04      	bgt.n	80216e2 <__swbuf_r+0x42>
 80216d8:	4621      	mov	r1, r4
 80216da:	4628      	mov	r0, r5
 80216dc:	f000 f926 	bl	802192c <_fflush_r>
 80216e0:	bb28      	cbnz	r0, 802172e <__swbuf_r+0x8e>
 80216e2:	68a3      	ldr	r3, [r4, #8]
 80216e4:	3b01      	subs	r3, #1
 80216e6:	60a3      	str	r3, [r4, #8]
 80216e8:	6823      	ldr	r3, [r4, #0]
 80216ea:	1c5a      	adds	r2, r3, #1
 80216ec:	6022      	str	r2, [r4, #0]
 80216ee:	701e      	strb	r6, [r3, #0]
 80216f0:	6963      	ldr	r3, [r4, #20]
 80216f2:	3001      	adds	r0, #1
 80216f4:	4283      	cmp	r3, r0
 80216f6:	d004      	beq.n	8021702 <__swbuf_r+0x62>
 80216f8:	89a3      	ldrh	r3, [r4, #12]
 80216fa:	07db      	lsls	r3, r3, #31
 80216fc:	d519      	bpl.n	8021732 <__swbuf_r+0x92>
 80216fe:	2e0a      	cmp	r6, #10
 8021700:	d117      	bne.n	8021732 <__swbuf_r+0x92>
 8021702:	4621      	mov	r1, r4
 8021704:	4628      	mov	r0, r5
 8021706:	f000 f911 	bl	802192c <_fflush_r>
 802170a:	b190      	cbz	r0, 8021732 <__swbuf_r+0x92>
 802170c:	e00f      	b.n	802172e <__swbuf_r+0x8e>
 802170e:	4b0b      	ldr	r3, [pc, #44]	; (802173c <__swbuf_r+0x9c>)
 8021710:	429c      	cmp	r4, r3
 8021712:	d101      	bne.n	8021718 <__swbuf_r+0x78>
 8021714:	68ac      	ldr	r4, [r5, #8]
 8021716:	e7d0      	b.n	80216ba <__swbuf_r+0x1a>
 8021718:	4b09      	ldr	r3, [pc, #36]	; (8021740 <__swbuf_r+0xa0>)
 802171a:	429c      	cmp	r4, r3
 802171c:	bf08      	it	eq
 802171e:	68ec      	ldreq	r4, [r5, #12]
 8021720:	e7cb      	b.n	80216ba <__swbuf_r+0x1a>
 8021722:	4621      	mov	r1, r4
 8021724:	4628      	mov	r0, r5
 8021726:	f000 f80d 	bl	8021744 <__swsetup_r>
 802172a:	2800      	cmp	r0, #0
 802172c:	d0cc      	beq.n	80216c8 <__swbuf_r+0x28>
 802172e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8021732:	4638      	mov	r0, r7
 8021734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021736:	bf00      	nop
 8021738:	08027ee0 	.word	0x08027ee0
 802173c:	08027f00 	.word	0x08027f00
 8021740:	08027ec0 	.word	0x08027ec0

08021744 <__swsetup_r>:
 8021744:	4b32      	ldr	r3, [pc, #200]	; (8021810 <__swsetup_r+0xcc>)
 8021746:	b570      	push	{r4, r5, r6, lr}
 8021748:	681d      	ldr	r5, [r3, #0]
 802174a:	4606      	mov	r6, r0
 802174c:	460c      	mov	r4, r1
 802174e:	b125      	cbz	r5, 802175a <__swsetup_r+0x16>
 8021750:	69ab      	ldr	r3, [r5, #24]
 8021752:	b913      	cbnz	r3, 802175a <__swsetup_r+0x16>
 8021754:	4628      	mov	r0, r5
 8021756:	f000 f953 	bl	8021a00 <__sinit>
 802175a:	4b2e      	ldr	r3, [pc, #184]	; (8021814 <__swsetup_r+0xd0>)
 802175c:	429c      	cmp	r4, r3
 802175e:	d10f      	bne.n	8021780 <__swsetup_r+0x3c>
 8021760:	686c      	ldr	r4, [r5, #4]
 8021762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021766:	b29a      	uxth	r2, r3
 8021768:	0715      	lsls	r5, r2, #28
 802176a:	d42c      	bmi.n	80217c6 <__swsetup_r+0x82>
 802176c:	06d0      	lsls	r0, r2, #27
 802176e:	d411      	bmi.n	8021794 <__swsetup_r+0x50>
 8021770:	2209      	movs	r2, #9
 8021772:	6032      	str	r2, [r6, #0]
 8021774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021778:	81a3      	strh	r3, [r4, #12]
 802177a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802177e:	e03e      	b.n	80217fe <__swsetup_r+0xba>
 8021780:	4b25      	ldr	r3, [pc, #148]	; (8021818 <__swsetup_r+0xd4>)
 8021782:	429c      	cmp	r4, r3
 8021784:	d101      	bne.n	802178a <__swsetup_r+0x46>
 8021786:	68ac      	ldr	r4, [r5, #8]
 8021788:	e7eb      	b.n	8021762 <__swsetup_r+0x1e>
 802178a:	4b24      	ldr	r3, [pc, #144]	; (802181c <__swsetup_r+0xd8>)
 802178c:	429c      	cmp	r4, r3
 802178e:	bf08      	it	eq
 8021790:	68ec      	ldreq	r4, [r5, #12]
 8021792:	e7e6      	b.n	8021762 <__swsetup_r+0x1e>
 8021794:	0751      	lsls	r1, r2, #29
 8021796:	d512      	bpl.n	80217be <__swsetup_r+0x7a>
 8021798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802179a:	b141      	cbz	r1, 80217ae <__swsetup_r+0x6a>
 802179c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80217a0:	4299      	cmp	r1, r3
 80217a2:	d002      	beq.n	80217aa <__swsetup_r+0x66>
 80217a4:	4630      	mov	r0, r6
 80217a6:	f7ff fe13 	bl	80213d0 <_free_r>
 80217aa:	2300      	movs	r3, #0
 80217ac:	6363      	str	r3, [r4, #52]	; 0x34
 80217ae:	89a3      	ldrh	r3, [r4, #12]
 80217b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80217b4:	81a3      	strh	r3, [r4, #12]
 80217b6:	2300      	movs	r3, #0
 80217b8:	6063      	str	r3, [r4, #4]
 80217ba:	6923      	ldr	r3, [r4, #16]
 80217bc:	6023      	str	r3, [r4, #0]
 80217be:	89a3      	ldrh	r3, [r4, #12]
 80217c0:	f043 0308 	orr.w	r3, r3, #8
 80217c4:	81a3      	strh	r3, [r4, #12]
 80217c6:	6923      	ldr	r3, [r4, #16]
 80217c8:	b94b      	cbnz	r3, 80217de <__swsetup_r+0x9a>
 80217ca:	89a3      	ldrh	r3, [r4, #12]
 80217cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80217d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80217d4:	d003      	beq.n	80217de <__swsetup_r+0x9a>
 80217d6:	4621      	mov	r1, r4
 80217d8:	4630      	mov	r0, r6
 80217da:	f000 f9bf 	bl	8021b5c <__smakebuf_r>
 80217de:	89a2      	ldrh	r2, [r4, #12]
 80217e0:	f012 0301 	ands.w	r3, r2, #1
 80217e4:	d00c      	beq.n	8021800 <__swsetup_r+0xbc>
 80217e6:	2300      	movs	r3, #0
 80217e8:	60a3      	str	r3, [r4, #8]
 80217ea:	6963      	ldr	r3, [r4, #20]
 80217ec:	425b      	negs	r3, r3
 80217ee:	61a3      	str	r3, [r4, #24]
 80217f0:	6923      	ldr	r3, [r4, #16]
 80217f2:	b953      	cbnz	r3, 802180a <__swsetup_r+0xc6>
 80217f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80217f8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80217fc:	d1ba      	bne.n	8021774 <__swsetup_r+0x30>
 80217fe:	bd70      	pop	{r4, r5, r6, pc}
 8021800:	0792      	lsls	r2, r2, #30
 8021802:	bf58      	it	pl
 8021804:	6963      	ldrpl	r3, [r4, #20]
 8021806:	60a3      	str	r3, [r4, #8]
 8021808:	e7f2      	b.n	80217f0 <__swsetup_r+0xac>
 802180a:	2000      	movs	r0, #0
 802180c:	e7f7      	b.n	80217fe <__swsetup_r+0xba>
 802180e:	bf00      	nop
 8021810:	2000005c 	.word	0x2000005c
 8021814:	08027ee0 	.word	0x08027ee0
 8021818:	08027f00 	.word	0x08027f00
 802181c:	08027ec0 	.word	0x08027ec0

08021820 <__sflush_r>:
 8021820:	898a      	ldrh	r2, [r1, #12]
 8021822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021826:	4605      	mov	r5, r0
 8021828:	0710      	lsls	r0, r2, #28
 802182a:	460c      	mov	r4, r1
 802182c:	d458      	bmi.n	80218e0 <__sflush_r+0xc0>
 802182e:	684b      	ldr	r3, [r1, #4]
 8021830:	2b00      	cmp	r3, #0
 8021832:	dc05      	bgt.n	8021840 <__sflush_r+0x20>
 8021834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021836:	2b00      	cmp	r3, #0
 8021838:	dc02      	bgt.n	8021840 <__sflush_r+0x20>
 802183a:	2000      	movs	r0, #0
 802183c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021842:	2e00      	cmp	r6, #0
 8021844:	d0f9      	beq.n	802183a <__sflush_r+0x1a>
 8021846:	2300      	movs	r3, #0
 8021848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802184c:	682f      	ldr	r7, [r5, #0]
 802184e:	6a21      	ldr	r1, [r4, #32]
 8021850:	602b      	str	r3, [r5, #0]
 8021852:	d032      	beq.n	80218ba <__sflush_r+0x9a>
 8021854:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021856:	89a3      	ldrh	r3, [r4, #12]
 8021858:	075a      	lsls	r2, r3, #29
 802185a:	d505      	bpl.n	8021868 <__sflush_r+0x48>
 802185c:	6863      	ldr	r3, [r4, #4]
 802185e:	1ac0      	subs	r0, r0, r3
 8021860:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021862:	b10b      	cbz	r3, 8021868 <__sflush_r+0x48>
 8021864:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021866:	1ac0      	subs	r0, r0, r3
 8021868:	2300      	movs	r3, #0
 802186a:	4602      	mov	r2, r0
 802186c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802186e:	6a21      	ldr	r1, [r4, #32]
 8021870:	4628      	mov	r0, r5
 8021872:	47b0      	blx	r6
 8021874:	1c43      	adds	r3, r0, #1
 8021876:	89a3      	ldrh	r3, [r4, #12]
 8021878:	d106      	bne.n	8021888 <__sflush_r+0x68>
 802187a:	6829      	ldr	r1, [r5, #0]
 802187c:	291d      	cmp	r1, #29
 802187e:	d848      	bhi.n	8021912 <__sflush_r+0xf2>
 8021880:	4a29      	ldr	r2, [pc, #164]	; (8021928 <__sflush_r+0x108>)
 8021882:	40ca      	lsrs	r2, r1
 8021884:	07d6      	lsls	r6, r2, #31
 8021886:	d544      	bpl.n	8021912 <__sflush_r+0xf2>
 8021888:	2200      	movs	r2, #0
 802188a:	6062      	str	r2, [r4, #4]
 802188c:	04d9      	lsls	r1, r3, #19
 802188e:	6922      	ldr	r2, [r4, #16]
 8021890:	6022      	str	r2, [r4, #0]
 8021892:	d504      	bpl.n	802189e <__sflush_r+0x7e>
 8021894:	1c42      	adds	r2, r0, #1
 8021896:	d101      	bne.n	802189c <__sflush_r+0x7c>
 8021898:	682b      	ldr	r3, [r5, #0]
 802189a:	b903      	cbnz	r3, 802189e <__sflush_r+0x7e>
 802189c:	6560      	str	r0, [r4, #84]	; 0x54
 802189e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80218a0:	602f      	str	r7, [r5, #0]
 80218a2:	2900      	cmp	r1, #0
 80218a4:	d0c9      	beq.n	802183a <__sflush_r+0x1a>
 80218a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80218aa:	4299      	cmp	r1, r3
 80218ac:	d002      	beq.n	80218b4 <__sflush_r+0x94>
 80218ae:	4628      	mov	r0, r5
 80218b0:	f7ff fd8e 	bl	80213d0 <_free_r>
 80218b4:	2000      	movs	r0, #0
 80218b6:	6360      	str	r0, [r4, #52]	; 0x34
 80218b8:	e7c0      	b.n	802183c <__sflush_r+0x1c>
 80218ba:	2301      	movs	r3, #1
 80218bc:	4628      	mov	r0, r5
 80218be:	47b0      	blx	r6
 80218c0:	1c41      	adds	r1, r0, #1
 80218c2:	d1c8      	bne.n	8021856 <__sflush_r+0x36>
 80218c4:	682b      	ldr	r3, [r5, #0]
 80218c6:	2b00      	cmp	r3, #0
 80218c8:	d0c5      	beq.n	8021856 <__sflush_r+0x36>
 80218ca:	2b1d      	cmp	r3, #29
 80218cc:	d001      	beq.n	80218d2 <__sflush_r+0xb2>
 80218ce:	2b16      	cmp	r3, #22
 80218d0:	d101      	bne.n	80218d6 <__sflush_r+0xb6>
 80218d2:	602f      	str	r7, [r5, #0]
 80218d4:	e7b1      	b.n	802183a <__sflush_r+0x1a>
 80218d6:	89a3      	ldrh	r3, [r4, #12]
 80218d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80218dc:	81a3      	strh	r3, [r4, #12]
 80218de:	e7ad      	b.n	802183c <__sflush_r+0x1c>
 80218e0:	690f      	ldr	r7, [r1, #16]
 80218e2:	2f00      	cmp	r7, #0
 80218e4:	d0a9      	beq.n	802183a <__sflush_r+0x1a>
 80218e6:	0793      	lsls	r3, r2, #30
 80218e8:	680e      	ldr	r6, [r1, #0]
 80218ea:	bf08      	it	eq
 80218ec:	694b      	ldreq	r3, [r1, #20]
 80218ee:	600f      	str	r7, [r1, #0]
 80218f0:	bf18      	it	ne
 80218f2:	2300      	movne	r3, #0
 80218f4:	eba6 0807 	sub.w	r8, r6, r7
 80218f8:	608b      	str	r3, [r1, #8]
 80218fa:	f1b8 0f00 	cmp.w	r8, #0
 80218fe:	dd9c      	ble.n	802183a <__sflush_r+0x1a>
 8021900:	4643      	mov	r3, r8
 8021902:	463a      	mov	r2, r7
 8021904:	6a21      	ldr	r1, [r4, #32]
 8021906:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021908:	4628      	mov	r0, r5
 802190a:	47b0      	blx	r6
 802190c:	2800      	cmp	r0, #0
 802190e:	dc06      	bgt.n	802191e <__sflush_r+0xfe>
 8021910:	89a3      	ldrh	r3, [r4, #12]
 8021912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021916:	81a3      	strh	r3, [r4, #12]
 8021918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802191c:	e78e      	b.n	802183c <__sflush_r+0x1c>
 802191e:	4407      	add	r7, r0
 8021920:	eba8 0800 	sub.w	r8, r8, r0
 8021924:	e7e9      	b.n	80218fa <__sflush_r+0xda>
 8021926:	bf00      	nop
 8021928:	20400001 	.word	0x20400001

0802192c <_fflush_r>:
 802192c:	b538      	push	{r3, r4, r5, lr}
 802192e:	690b      	ldr	r3, [r1, #16]
 8021930:	4605      	mov	r5, r0
 8021932:	460c      	mov	r4, r1
 8021934:	b1db      	cbz	r3, 802196e <_fflush_r+0x42>
 8021936:	b118      	cbz	r0, 8021940 <_fflush_r+0x14>
 8021938:	6983      	ldr	r3, [r0, #24]
 802193a:	b90b      	cbnz	r3, 8021940 <_fflush_r+0x14>
 802193c:	f000 f860 	bl	8021a00 <__sinit>
 8021940:	4b0c      	ldr	r3, [pc, #48]	; (8021974 <_fflush_r+0x48>)
 8021942:	429c      	cmp	r4, r3
 8021944:	d109      	bne.n	802195a <_fflush_r+0x2e>
 8021946:	686c      	ldr	r4, [r5, #4]
 8021948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802194c:	b17b      	cbz	r3, 802196e <_fflush_r+0x42>
 802194e:	4621      	mov	r1, r4
 8021950:	4628      	mov	r0, r5
 8021952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021956:	f7ff bf63 	b.w	8021820 <__sflush_r>
 802195a:	4b07      	ldr	r3, [pc, #28]	; (8021978 <_fflush_r+0x4c>)
 802195c:	429c      	cmp	r4, r3
 802195e:	d101      	bne.n	8021964 <_fflush_r+0x38>
 8021960:	68ac      	ldr	r4, [r5, #8]
 8021962:	e7f1      	b.n	8021948 <_fflush_r+0x1c>
 8021964:	4b05      	ldr	r3, [pc, #20]	; (802197c <_fflush_r+0x50>)
 8021966:	429c      	cmp	r4, r3
 8021968:	bf08      	it	eq
 802196a:	68ec      	ldreq	r4, [r5, #12]
 802196c:	e7ec      	b.n	8021948 <_fflush_r+0x1c>
 802196e:	2000      	movs	r0, #0
 8021970:	bd38      	pop	{r3, r4, r5, pc}
 8021972:	bf00      	nop
 8021974:	08027ee0 	.word	0x08027ee0
 8021978:	08027f00 	.word	0x08027f00
 802197c:	08027ec0 	.word	0x08027ec0

08021980 <std>:
 8021980:	2300      	movs	r3, #0
 8021982:	b510      	push	{r4, lr}
 8021984:	4604      	mov	r4, r0
 8021986:	e9c0 3300 	strd	r3, r3, [r0]
 802198a:	6083      	str	r3, [r0, #8]
 802198c:	8181      	strh	r1, [r0, #12]
 802198e:	6643      	str	r3, [r0, #100]	; 0x64
 8021990:	81c2      	strh	r2, [r0, #14]
 8021992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021996:	6183      	str	r3, [r0, #24]
 8021998:	4619      	mov	r1, r3
 802199a:	2208      	movs	r2, #8
 802199c:	305c      	adds	r0, #92	; 0x5c
 802199e:	f7ff fd0f 	bl	80213c0 <memset>
 80219a2:	4b05      	ldr	r3, [pc, #20]	; (80219b8 <std+0x38>)
 80219a4:	6263      	str	r3, [r4, #36]	; 0x24
 80219a6:	4b05      	ldr	r3, [pc, #20]	; (80219bc <std+0x3c>)
 80219a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80219aa:	4b05      	ldr	r3, [pc, #20]	; (80219c0 <std+0x40>)
 80219ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80219ae:	4b05      	ldr	r3, [pc, #20]	; (80219c4 <std+0x44>)
 80219b0:	6224      	str	r4, [r4, #32]
 80219b2:	6323      	str	r3, [r4, #48]	; 0x30
 80219b4:	bd10      	pop	{r4, pc}
 80219b6:	bf00      	nop
 80219b8:	08022171 	.word	0x08022171
 80219bc:	08022193 	.word	0x08022193
 80219c0:	080221cb 	.word	0x080221cb
 80219c4:	080221ef 	.word	0x080221ef

080219c8 <_cleanup_r>:
 80219c8:	4901      	ldr	r1, [pc, #4]	; (80219d0 <_cleanup_r+0x8>)
 80219ca:	f000 b885 	b.w	8021ad8 <_fwalk_reent>
 80219ce:	bf00      	nop
 80219d0:	0802192d 	.word	0x0802192d

080219d4 <__sfmoreglue>:
 80219d4:	b570      	push	{r4, r5, r6, lr}
 80219d6:	1e4a      	subs	r2, r1, #1
 80219d8:	2568      	movs	r5, #104	; 0x68
 80219da:	4355      	muls	r5, r2
 80219dc:	460e      	mov	r6, r1
 80219de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80219e2:	f7ff fd43 	bl	802146c <_malloc_r>
 80219e6:	4604      	mov	r4, r0
 80219e8:	b140      	cbz	r0, 80219fc <__sfmoreglue+0x28>
 80219ea:	2100      	movs	r1, #0
 80219ec:	e9c0 1600 	strd	r1, r6, [r0]
 80219f0:	300c      	adds	r0, #12
 80219f2:	60a0      	str	r0, [r4, #8]
 80219f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80219f8:	f7ff fce2 	bl	80213c0 <memset>
 80219fc:	4620      	mov	r0, r4
 80219fe:	bd70      	pop	{r4, r5, r6, pc}

08021a00 <__sinit>:
 8021a00:	6983      	ldr	r3, [r0, #24]
 8021a02:	b510      	push	{r4, lr}
 8021a04:	4604      	mov	r4, r0
 8021a06:	bb33      	cbnz	r3, 8021a56 <__sinit+0x56>
 8021a08:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8021a0c:	6503      	str	r3, [r0, #80]	; 0x50
 8021a0e:	4b12      	ldr	r3, [pc, #72]	; (8021a58 <__sinit+0x58>)
 8021a10:	4a12      	ldr	r2, [pc, #72]	; (8021a5c <__sinit+0x5c>)
 8021a12:	681b      	ldr	r3, [r3, #0]
 8021a14:	6282      	str	r2, [r0, #40]	; 0x28
 8021a16:	4298      	cmp	r0, r3
 8021a18:	bf04      	itt	eq
 8021a1a:	2301      	moveq	r3, #1
 8021a1c:	6183      	streq	r3, [r0, #24]
 8021a1e:	f000 f81f 	bl	8021a60 <__sfp>
 8021a22:	6060      	str	r0, [r4, #4]
 8021a24:	4620      	mov	r0, r4
 8021a26:	f000 f81b 	bl	8021a60 <__sfp>
 8021a2a:	60a0      	str	r0, [r4, #8]
 8021a2c:	4620      	mov	r0, r4
 8021a2e:	f000 f817 	bl	8021a60 <__sfp>
 8021a32:	2200      	movs	r2, #0
 8021a34:	60e0      	str	r0, [r4, #12]
 8021a36:	2104      	movs	r1, #4
 8021a38:	6860      	ldr	r0, [r4, #4]
 8021a3a:	f7ff ffa1 	bl	8021980 <std>
 8021a3e:	2201      	movs	r2, #1
 8021a40:	2109      	movs	r1, #9
 8021a42:	68a0      	ldr	r0, [r4, #8]
 8021a44:	f7ff ff9c 	bl	8021980 <std>
 8021a48:	2202      	movs	r2, #2
 8021a4a:	2112      	movs	r1, #18
 8021a4c:	68e0      	ldr	r0, [r4, #12]
 8021a4e:	f7ff ff97 	bl	8021980 <std>
 8021a52:	2301      	movs	r3, #1
 8021a54:	61a3      	str	r3, [r4, #24]
 8021a56:	bd10      	pop	{r4, pc}
 8021a58:	08027ebc 	.word	0x08027ebc
 8021a5c:	080219c9 	.word	0x080219c9

08021a60 <__sfp>:
 8021a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a62:	4b1b      	ldr	r3, [pc, #108]	; (8021ad0 <__sfp+0x70>)
 8021a64:	681e      	ldr	r6, [r3, #0]
 8021a66:	69b3      	ldr	r3, [r6, #24]
 8021a68:	4607      	mov	r7, r0
 8021a6a:	b913      	cbnz	r3, 8021a72 <__sfp+0x12>
 8021a6c:	4630      	mov	r0, r6
 8021a6e:	f7ff ffc7 	bl	8021a00 <__sinit>
 8021a72:	3648      	adds	r6, #72	; 0x48
 8021a74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021a78:	3b01      	subs	r3, #1
 8021a7a:	d503      	bpl.n	8021a84 <__sfp+0x24>
 8021a7c:	6833      	ldr	r3, [r6, #0]
 8021a7e:	b133      	cbz	r3, 8021a8e <__sfp+0x2e>
 8021a80:	6836      	ldr	r6, [r6, #0]
 8021a82:	e7f7      	b.n	8021a74 <__sfp+0x14>
 8021a84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021a88:	b16d      	cbz	r5, 8021aa6 <__sfp+0x46>
 8021a8a:	3468      	adds	r4, #104	; 0x68
 8021a8c:	e7f4      	b.n	8021a78 <__sfp+0x18>
 8021a8e:	2104      	movs	r1, #4
 8021a90:	4638      	mov	r0, r7
 8021a92:	f7ff ff9f 	bl	80219d4 <__sfmoreglue>
 8021a96:	6030      	str	r0, [r6, #0]
 8021a98:	2800      	cmp	r0, #0
 8021a9a:	d1f1      	bne.n	8021a80 <__sfp+0x20>
 8021a9c:	230c      	movs	r3, #12
 8021a9e:	603b      	str	r3, [r7, #0]
 8021aa0:	4604      	mov	r4, r0
 8021aa2:	4620      	mov	r0, r4
 8021aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021aa6:	4b0b      	ldr	r3, [pc, #44]	; (8021ad4 <__sfp+0x74>)
 8021aa8:	6665      	str	r5, [r4, #100]	; 0x64
 8021aaa:	e9c4 5500 	strd	r5, r5, [r4]
 8021aae:	60a5      	str	r5, [r4, #8]
 8021ab0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8021ab4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8021ab8:	2208      	movs	r2, #8
 8021aba:	4629      	mov	r1, r5
 8021abc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021ac0:	f7ff fc7e 	bl	80213c0 <memset>
 8021ac4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021ac8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021acc:	e7e9      	b.n	8021aa2 <__sfp+0x42>
 8021ace:	bf00      	nop
 8021ad0:	08027ebc 	.word	0x08027ebc
 8021ad4:	ffff0001 	.word	0xffff0001

08021ad8 <_fwalk_reent>:
 8021ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021adc:	4680      	mov	r8, r0
 8021ade:	4689      	mov	r9, r1
 8021ae0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021ae4:	2600      	movs	r6, #0
 8021ae6:	b914      	cbnz	r4, 8021aee <_fwalk_reent+0x16>
 8021ae8:	4630      	mov	r0, r6
 8021aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021aee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8021af2:	3f01      	subs	r7, #1
 8021af4:	d501      	bpl.n	8021afa <_fwalk_reent+0x22>
 8021af6:	6824      	ldr	r4, [r4, #0]
 8021af8:	e7f5      	b.n	8021ae6 <_fwalk_reent+0xe>
 8021afa:	89ab      	ldrh	r3, [r5, #12]
 8021afc:	2b01      	cmp	r3, #1
 8021afe:	d907      	bls.n	8021b10 <_fwalk_reent+0x38>
 8021b00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021b04:	3301      	adds	r3, #1
 8021b06:	d003      	beq.n	8021b10 <_fwalk_reent+0x38>
 8021b08:	4629      	mov	r1, r5
 8021b0a:	4640      	mov	r0, r8
 8021b0c:	47c8      	blx	r9
 8021b0e:	4306      	orrs	r6, r0
 8021b10:	3568      	adds	r5, #104	; 0x68
 8021b12:	e7ee      	b.n	8021af2 <_fwalk_reent+0x1a>

08021b14 <__swhatbuf_r>:
 8021b14:	b570      	push	{r4, r5, r6, lr}
 8021b16:	460e      	mov	r6, r1
 8021b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021b1c:	2900      	cmp	r1, #0
 8021b1e:	b096      	sub	sp, #88	; 0x58
 8021b20:	4614      	mov	r4, r2
 8021b22:	461d      	mov	r5, r3
 8021b24:	da07      	bge.n	8021b36 <__swhatbuf_r+0x22>
 8021b26:	2300      	movs	r3, #0
 8021b28:	602b      	str	r3, [r5, #0]
 8021b2a:	89b3      	ldrh	r3, [r6, #12]
 8021b2c:	061a      	lsls	r2, r3, #24
 8021b2e:	d410      	bmi.n	8021b52 <__swhatbuf_r+0x3e>
 8021b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021b34:	e00e      	b.n	8021b54 <__swhatbuf_r+0x40>
 8021b36:	466a      	mov	r2, sp
 8021b38:	f000 fb80 	bl	802223c <_fstat_r>
 8021b3c:	2800      	cmp	r0, #0
 8021b3e:	dbf2      	blt.n	8021b26 <__swhatbuf_r+0x12>
 8021b40:	9a01      	ldr	r2, [sp, #4]
 8021b42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021b46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021b4a:	425a      	negs	r2, r3
 8021b4c:	415a      	adcs	r2, r3
 8021b4e:	602a      	str	r2, [r5, #0]
 8021b50:	e7ee      	b.n	8021b30 <__swhatbuf_r+0x1c>
 8021b52:	2340      	movs	r3, #64	; 0x40
 8021b54:	2000      	movs	r0, #0
 8021b56:	6023      	str	r3, [r4, #0]
 8021b58:	b016      	add	sp, #88	; 0x58
 8021b5a:	bd70      	pop	{r4, r5, r6, pc}

08021b5c <__smakebuf_r>:
 8021b5c:	898b      	ldrh	r3, [r1, #12]
 8021b5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021b60:	079d      	lsls	r5, r3, #30
 8021b62:	4606      	mov	r6, r0
 8021b64:	460c      	mov	r4, r1
 8021b66:	d507      	bpl.n	8021b78 <__smakebuf_r+0x1c>
 8021b68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021b6c:	6023      	str	r3, [r4, #0]
 8021b6e:	6123      	str	r3, [r4, #16]
 8021b70:	2301      	movs	r3, #1
 8021b72:	6163      	str	r3, [r4, #20]
 8021b74:	b002      	add	sp, #8
 8021b76:	bd70      	pop	{r4, r5, r6, pc}
 8021b78:	ab01      	add	r3, sp, #4
 8021b7a:	466a      	mov	r2, sp
 8021b7c:	f7ff ffca 	bl	8021b14 <__swhatbuf_r>
 8021b80:	9900      	ldr	r1, [sp, #0]
 8021b82:	4605      	mov	r5, r0
 8021b84:	4630      	mov	r0, r6
 8021b86:	f7ff fc71 	bl	802146c <_malloc_r>
 8021b8a:	b948      	cbnz	r0, 8021ba0 <__smakebuf_r+0x44>
 8021b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021b90:	059a      	lsls	r2, r3, #22
 8021b92:	d4ef      	bmi.n	8021b74 <__smakebuf_r+0x18>
 8021b94:	f023 0303 	bic.w	r3, r3, #3
 8021b98:	f043 0302 	orr.w	r3, r3, #2
 8021b9c:	81a3      	strh	r3, [r4, #12]
 8021b9e:	e7e3      	b.n	8021b68 <__smakebuf_r+0xc>
 8021ba0:	4b0d      	ldr	r3, [pc, #52]	; (8021bd8 <__smakebuf_r+0x7c>)
 8021ba2:	62b3      	str	r3, [r6, #40]	; 0x28
 8021ba4:	89a3      	ldrh	r3, [r4, #12]
 8021ba6:	6020      	str	r0, [r4, #0]
 8021ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021bac:	81a3      	strh	r3, [r4, #12]
 8021bae:	9b00      	ldr	r3, [sp, #0]
 8021bb0:	6163      	str	r3, [r4, #20]
 8021bb2:	9b01      	ldr	r3, [sp, #4]
 8021bb4:	6120      	str	r0, [r4, #16]
 8021bb6:	b15b      	cbz	r3, 8021bd0 <__smakebuf_r+0x74>
 8021bb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021bbc:	4630      	mov	r0, r6
 8021bbe:	f000 fb4f 	bl	8022260 <_isatty_r>
 8021bc2:	b128      	cbz	r0, 8021bd0 <__smakebuf_r+0x74>
 8021bc4:	89a3      	ldrh	r3, [r4, #12]
 8021bc6:	f023 0303 	bic.w	r3, r3, #3
 8021bca:	f043 0301 	orr.w	r3, r3, #1
 8021bce:	81a3      	strh	r3, [r4, #12]
 8021bd0:	89a3      	ldrh	r3, [r4, #12]
 8021bd2:	431d      	orrs	r5, r3
 8021bd4:	81a5      	strh	r5, [r4, #12]
 8021bd6:	e7cd      	b.n	8021b74 <__smakebuf_r+0x18>
 8021bd8:	080219c9 	.word	0x080219c9

08021bdc <__malloc_lock>:
 8021bdc:	4770      	bx	lr

08021bde <__malloc_unlock>:
 8021bde:	4770      	bx	lr

08021be0 <__sfputc_r>:
 8021be0:	6893      	ldr	r3, [r2, #8]
 8021be2:	3b01      	subs	r3, #1
 8021be4:	2b00      	cmp	r3, #0
 8021be6:	b410      	push	{r4}
 8021be8:	6093      	str	r3, [r2, #8]
 8021bea:	da08      	bge.n	8021bfe <__sfputc_r+0x1e>
 8021bec:	6994      	ldr	r4, [r2, #24]
 8021bee:	42a3      	cmp	r3, r4
 8021bf0:	db01      	blt.n	8021bf6 <__sfputc_r+0x16>
 8021bf2:	290a      	cmp	r1, #10
 8021bf4:	d103      	bne.n	8021bfe <__sfputc_r+0x1e>
 8021bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021bfa:	f7ff bd51 	b.w	80216a0 <__swbuf_r>
 8021bfe:	6813      	ldr	r3, [r2, #0]
 8021c00:	1c58      	adds	r0, r3, #1
 8021c02:	6010      	str	r0, [r2, #0]
 8021c04:	7019      	strb	r1, [r3, #0]
 8021c06:	4608      	mov	r0, r1
 8021c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021c0c:	4770      	bx	lr

08021c0e <__sfputs_r>:
 8021c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c10:	4606      	mov	r6, r0
 8021c12:	460f      	mov	r7, r1
 8021c14:	4614      	mov	r4, r2
 8021c16:	18d5      	adds	r5, r2, r3
 8021c18:	42ac      	cmp	r4, r5
 8021c1a:	d101      	bne.n	8021c20 <__sfputs_r+0x12>
 8021c1c:	2000      	movs	r0, #0
 8021c1e:	e007      	b.n	8021c30 <__sfputs_r+0x22>
 8021c20:	463a      	mov	r2, r7
 8021c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021c26:	4630      	mov	r0, r6
 8021c28:	f7ff ffda 	bl	8021be0 <__sfputc_r>
 8021c2c:	1c43      	adds	r3, r0, #1
 8021c2e:	d1f3      	bne.n	8021c18 <__sfputs_r+0xa>
 8021c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021c34 <_vfiprintf_r>:
 8021c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c38:	460c      	mov	r4, r1
 8021c3a:	b09d      	sub	sp, #116	; 0x74
 8021c3c:	4617      	mov	r7, r2
 8021c3e:	461d      	mov	r5, r3
 8021c40:	4606      	mov	r6, r0
 8021c42:	b118      	cbz	r0, 8021c4c <_vfiprintf_r+0x18>
 8021c44:	6983      	ldr	r3, [r0, #24]
 8021c46:	b90b      	cbnz	r3, 8021c4c <_vfiprintf_r+0x18>
 8021c48:	f7ff feda 	bl	8021a00 <__sinit>
 8021c4c:	4b7c      	ldr	r3, [pc, #496]	; (8021e40 <_vfiprintf_r+0x20c>)
 8021c4e:	429c      	cmp	r4, r3
 8021c50:	d158      	bne.n	8021d04 <_vfiprintf_r+0xd0>
 8021c52:	6874      	ldr	r4, [r6, #4]
 8021c54:	89a3      	ldrh	r3, [r4, #12]
 8021c56:	0718      	lsls	r0, r3, #28
 8021c58:	d55e      	bpl.n	8021d18 <_vfiprintf_r+0xe4>
 8021c5a:	6923      	ldr	r3, [r4, #16]
 8021c5c:	2b00      	cmp	r3, #0
 8021c5e:	d05b      	beq.n	8021d18 <_vfiprintf_r+0xe4>
 8021c60:	2300      	movs	r3, #0
 8021c62:	9309      	str	r3, [sp, #36]	; 0x24
 8021c64:	2320      	movs	r3, #32
 8021c66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021c6a:	2330      	movs	r3, #48	; 0x30
 8021c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021c70:	9503      	str	r5, [sp, #12]
 8021c72:	f04f 0b01 	mov.w	fp, #1
 8021c76:	46b8      	mov	r8, r7
 8021c78:	4645      	mov	r5, r8
 8021c7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8021c7e:	b10b      	cbz	r3, 8021c84 <_vfiprintf_r+0x50>
 8021c80:	2b25      	cmp	r3, #37	; 0x25
 8021c82:	d154      	bne.n	8021d2e <_vfiprintf_r+0xfa>
 8021c84:	ebb8 0a07 	subs.w	sl, r8, r7
 8021c88:	d00b      	beq.n	8021ca2 <_vfiprintf_r+0x6e>
 8021c8a:	4653      	mov	r3, sl
 8021c8c:	463a      	mov	r2, r7
 8021c8e:	4621      	mov	r1, r4
 8021c90:	4630      	mov	r0, r6
 8021c92:	f7ff ffbc 	bl	8021c0e <__sfputs_r>
 8021c96:	3001      	adds	r0, #1
 8021c98:	f000 80c2 	beq.w	8021e20 <_vfiprintf_r+0x1ec>
 8021c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c9e:	4453      	add	r3, sl
 8021ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8021ca2:	f898 3000 	ldrb.w	r3, [r8]
 8021ca6:	2b00      	cmp	r3, #0
 8021ca8:	f000 80ba 	beq.w	8021e20 <_vfiprintf_r+0x1ec>
 8021cac:	2300      	movs	r3, #0
 8021cae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021cb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021cb6:	9304      	str	r3, [sp, #16]
 8021cb8:	9307      	str	r3, [sp, #28]
 8021cba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021cbe:	931a      	str	r3, [sp, #104]	; 0x68
 8021cc0:	46a8      	mov	r8, r5
 8021cc2:	2205      	movs	r2, #5
 8021cc4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8021cc8:	485e      	ldr	r0, [pc, #376]	; (8021e44 <_vfiprintf_r+0x210>)
 8021cca:	f7de faa1 	bl	8000210 <memchr>
 8021cce:	9b04      	ldr	r3, [sp, #16]
 8021cd0:	bb78      	cbnz	r0, 8021d32 <_vfiprintf_r+0xfe>
 8021cd2:	06d9      	lsls	r1, r3, #27
 8021cd4:	bf44      	itt	mi
 8021cd6:	2220      	movmi	r2, #32
 8021cd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8021cdc:	071a      	lsls	r2, r3, #28
 8021cde:	bf44      	itt	mi
 8021ce0:	222b      	movmi	r2, #43	; 0x2b
 8021ce2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8021ce6:	782a      	ldrb	r2, [r5, #0]
 8021ce8:	2a2a      	cmp	r2, #42	; 0x2a
 8021cea:	d02a      	beq.n	8021d42 <_vfiprintf_r+0x10e>
 8021cec:	9a07      	ldr	r2, [sp, #28]
 8021cee:	46a8      	mov	r8, r5
 8021cf0:	2000      	movs	r0, #0
 8021cf2:	250a      	movs	r5, #10
 8021cf4:	4641      	mov	r1, r8
 8021cf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021cfa:	3b30      	subs	r3, #48	; 0x30
 8021cfc:	2b09      	cmp	r3, #9
 8021cfe:	d969      	bls.n	8021dd4 <_vfiprintf_r+0x1a0>
 8021d00:	b360      	cbz	r0, 8021d5c <_vfiprintf_r+0x128>
 8021d02:	e024      	b.n	8021d4e <_vfiprintf_r+0x11a>
 8021d04:	4b50      	ldr	r3, [pc, #320]	; (8021e48 <_vfiprintf_r+0x214>)
 8021d06:	429c      	cmp	r4, r3
 8021d08:	d101      	bne.n	8021d0e <_vfiprintf_r+0xda>
 8021d0a:	68b4      	ldr	r4, [r6, #8]
 8021d0c:	e7a2      	b.n	8021c54 <_vfiprintf_r+0x20>
 8021d0e:	4b4f      	ldr	r3, [pc, #316]	; (8021e4c <_vfiprintf_r+0x218>)
 8021d10:	429c      	cmp	r4, r3
 8021d12:	bf08      	it	eq
 8021d14:	68f4      	ldreq	r4, [r6, #12]
 8021d16:	e79d      	b.n	8021c54 <_vfiprintf_r+0x20>
 8021d18:	4621      	mov	r1, r4
 8021d1a:	4630      	mov	r0, r6
 8021d1c:	f7ff fd12 	bl	8021744 <__swsetup_r>
 8021d20:	2800      	cmp	r0, #0
 8021d22:	d09d      	beq.n	8021c60 <_vfiprintf_r+0x2c>
 8021d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021d28:	b01d      	add	sp, #116	; 0x74
 8021d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d2e:	46a8      	mov	r8, r5
 8021d30:	e7a2      	b.n	8021c78 <_vfiprintf_r+0x44>
 8021d32:	4a44      	ldr	r2, [pc, #272]	; (8021e44 <_vfiprintf_r+0x210>)
 8021d34:	1a80      	subs	r0, r0, r2
 8021d36:	fa0b f000 	lsl.w	r0, fp, r0
 8021d3a:	4318      	orrs	r0, r3
 8021d3c:	9004      	str	r0, [sp, #16]
 8021d3e:	4645      	mov	r5, r8
 8021d40:	e7be      	b.n	8021cc0 <_vfiprintf_r+0x8c>
 8021d42:	9a03      	ldr	r2, [sp, #12]
 8021d44:	1d11      	adds	r1, r2, #4
 8021d46:	6812      	ldr	r2, [r2, #0]
 8021d48:	9103      	str	r1, [sp, #12]
 8021d4a:	2a00      	cmp	r2, #0
 8021d4c:	db01      	blt.n	8021d52 <_vfiprintf_r+0x11e>
 8021d4e:	9207      	str	r2, [sp, #28]
 8021d50:	e004      	b.n	8021d5c <_vfiprintf_r+0x128>
 8021d52:	4252      	negs	r2, r2
 8021d54:	f043 0302 	orr.w	r3, r3, #2
 8021d58:	9207      	str	r2, [sp, #28]
 8021d5a:	9304      	str	r3, [sp, #16]
 8021d5c:	f898 3000 	ldrb.w	r3, [r8]
 8021d60:	2b2e      	cmp	r3, #46	; 0x2e
 8021d62:	d10e      	bne.n	8021d82 <_vfiprintf_r+0x14e>
 8021d64:	f898 3001 	ldrb.w	r3, [r8, #1]
 8021d68:	2b2a      	cmp	r3, #42	; 0x2a
 8021d6a:	d138      	bne.n	8021dde <_vfiprintf_r+0x1aa>
 8021d6c:	9b03      	ldr	r3, [sp, #12]
 8021d6e:	1d1a      	adds	r2, r3, #4
 8021d70:	681b      	ldr	r3, [r3, #0]
 8021d72:	9203      	str	r2, [sp, #12]
 8021d74:	2b00      	cmp	r3, #0
 8021d76:	bfb8      	it	lt
 8021d78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8021d7c:	f108 0802 	add.w	r8, r8, #2
 8021d80:	9305      	str	r3, [sp, #20]
 8021d82:	4d33      	ldr	r5, [pc, #204]	; (8021e50 <_vfiprintf_r+0x21c>)
 8021d84:	f898 1000 	ldrb.w	r1, [r8]
 8021d88:	2203      	movs	r2, #3
 8021d8a:	4628      	mov	r0, r5
 8021d8c:	f7de fa40 	bl	8000210 <memchr>
 8021d90:	b140      	cbz	r0, 8021da4 <_vfiprintf_r+0x170>
 8021d92:	2340      	movs	r3, #64	; 0x40
 8021d94:	1b40      	subs	r0, r0, r5
 8021d96:	fa03 f000 	lsl.w	r0, r3, r0
 8021d9a:	9b04      	ldr	r3, [sp, #16]
 8021d9c:	4303      	orrs	r3, r0
 8021d9e:	f108 0801 	add.w	r8, r8, #1
 8021da2:	9304      	str	r3, [sp, #16]
 8021da4:	f898 1000 	ldrb.w	r1, [r8]
 8021da8:	482a      	ldr	r0, [pc, #168]	; (8021e54 <_vfiprintf_r+0x220>)
 8021daa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021dae:	2206      	movs	r2, #6
 8021db0:	f108 0701 	add.w	r7, r8, #1
 8021db4:	f7de fa2c 	bl	8000210 <memchr>
 8021db8:	2800      	cmp	r0, #0
 8021dba:	d037      	beq.n	8021e2c <_vfiprintf_r+0x1f8>
 8021dbc:	4b26      	ldr	r3, [pc, #152]	; (8021e58 <_vfiprintf_r+0x224>)
 8021dbe:	bb1b      	cbnz	r3, 8021e08 <_vfiprintf_r+0x1d4>
 8021dc0:	9b03      	ldr	r3, [sp, #12]
 8021dc2:	3307      	adds	r3, #7
 8021dc4:	f023 0307 	bic.w	r3, r3, #7
 8021dc8:	3308      	adds	r3, #8
 8021dca:	9303      	str	r3, [sp, #12]
 8021dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021dce:	444b      	add	r3, r9
 8021dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8021dd2:	e750      	b.n	8021c76 <_vfiprintf_r+0x42>
 8021dd4:	fb05 3202 	mla	r2, r5, r2, r3
 8021dd8:	2001      	movs	r0, #1
 8021dda:	4688      	mov	r8, r1
 8021ddc:	e78a      	b.n	8021cf4 <_vfiprintf_r+0xc0>
 8021dde:	2300      	movs	r3, #0
 8021de0:	f108 0801 	add.w	r8, r8, #1
 8021de4:	9305      	str	r3, [sp, #20]
 8021de6:	4619      	mov	r1, r3
 8021de8:	250a      	movs	r5, #10
 8021dea:	4640      	mov	r0, r8
 8021dec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021df0:	3a30      	subs	r2, #48	; 0x30
 8021df2:	2a09      	cmp	r2, #9
 8021df4:	d903      	bls.n	8021dfe <_vfiprintf_r+0x1ca>
 8021df6:	2b00      	cmp	r3, #0
 8021df8:	d0c3      	beq.n	8021d82 <_vfiprintf_r+0x14e>
 8021dfa:	9105      	str	r1, [sp, #20]
 8021dfc:	e7c1      	b.n	8021d82 <_vfiprintf_r+0x14e>
 8021dfe:	fb05 2101 	mla	r1, r5, r1, r2
 8021e02:	2301      	movs	r3, #1
 8021e04:	4680      	mov	r8, r0
 8021e06:	e7f0      	b.n	8021dea <_vfiprintf_r+0x1b6>
 8021e08:	ab03      	add	r3, sp, #12
 8021e0a:	9300      	str	r3, [sp, #0]
 8021e0c:	4622      	mov	r2, r4
 8021e0e:	4b13      	ldr	r3, [pc, #76]	; (8021e5c <_vfiprintf_r+0x228>)
 8021e10:	a904      	add	r1, sp, #16
 8021e12:	4630      	mov	r0, r6
 8021e14:	f3af 8000 	nop.w
 8021e18:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8021e1c:	4681      	mov	r9, r0
 8021e1e:	d1d5      	bne.n	8021dcc <_vfiprintf_r+0x198>
 8021e20:	89a3      	ldrh	r3, [r4, #12]
 8021e22:	065b      	lsls	r3, r3, #25
 8021e24:	f53f af7e 	bmi.w	8021d24 <_vfiprintf_r+0xf0>
 8021e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021e2a:	e77d      	b.n	8021d28 <_vfiprintf_r+0xf4>
 8021e2c:	ab03      	add	r3, sp, #12
 8021e2e:	9300      	str	r3, [sp, #0]
 8021e30:	4622      	mov	r2, r4
 8021e32:	4b0a      	ldr	r3, [pc, #40]	; (8021e5c <_vfiprintf_r+0x228>)
 8021e34:	a904      	add	r1, sp, #16
 8021e36:	4630      	mov	r0, r6
 8021e38:	f000 f888 	bl	8021f4c <_printf_i>
 8021e3c:	e7ec      	b.n	8021e18 <_vfiprintf_r+0x1e4>
 8021e3e:	bf00      	nop
 8021e40:	08027ee0 	.word	0x08027ee0
 8021e44:	08027f20 	.word	0x08027f20
 8021e48:	08027f00 	.word	0x08027f00
 8021e4c:	08027ec0 	.word	0x08027ec0
 8021e50:	08027f26 	.word	0x08027f26
 8021e54:	08027f2a 	.word	0x08027f2a
 8021e58:	00000000 	.word	0x00000000
 8021e5c:	08021c0f 	.word	0x08021c0f

08021e60 <_printf_common>:
 8021e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e64:	4691      	mov	r9, r2
 8021e66:	461f      	mov	r7, r3
 8021e68:	688a      	ldr	r2, [r1, #8]
 8021e6a:	690b      	ldr	r3, [r1, #16]
 8021e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021e70:	4293      	cmp	r3, r2
 8021e72:	bfb8      	it	lt
 8021e74:	4613      	movlt	r3, r2
 8021e76:	f8c9 3000 	str.w	r3, [r9]
 8021e7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021e7e:	4606      	mov	r6, r0
 8021e80:	460c      	mov	r4, r1
 8021e82:	b112      	cbz	r2, 8021e8a <_printf_common+0x2a>
 8021e84:	3301      	adds	r3, #1
 8021e86:	f8c9 3000 	str.w	r3, [r9]
 8021e8a:	6823      	ldr	r3, [r4, #0]
 8021e8c:	0699      	lsls	r1, r3, #26
 8021e8e:	bf42      	ittt	mi
 8021e90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8021e94:	3302      	addmi	r3, #2
 8021e96:	f8c9 3000 	strmi.w	r3, [r9]
 8021e9a:	6825      	ldr	r5, [r4, #0]
 8021e9c:	f015 0506 	ands.w	r5, r5, #6
 8021ea0:	d107      	bne.n	8021eb2 <_printf_common+0x52>
 8021ea2:	f104 0a19 	add.w	sl, r4, #25
 8021ea6:	68e3      	ldr	r3, [r4, #12]
 8021ea8:	f8d9 2000 	ldr.w	r2, [r9]
 8021eac:	1a9b      	subs	r3, r3, r2
 8021eae:	42ab      	cmp	r3, r5
 8021eb0:	dc28      	bgt.n	8021f04 <_printf_common+0xa4>
 8021eb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8021eb6:	6822      	ldr	r2, [r4, #0]
 8021eb8:	3300      	adds	r3, #0
 8021eba:	bf18      	it	ne
 8021ebc:	2301      	movne	r3, #1
 8021ebe:	0692      	lsls	r2, r2, #26
 8021ec0:	d42d      	bmi.n	8021f1e <_printf_common+0xbe>
 8021ec2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021ec6:	4639      	mov	r1, r7
 8021ec8:	4630      	mov	r0, r6
 8021eca:	47c0      	blx	r8
 8021ecc:	3001      	adds	r0, #1
 8021ece:	d020      	beq.n	8021f12 <_printf_common+0xb2>
 8021ed0:	6823      	ldr	r3, [r4, #0]
 8021ed2:	68e5      	ldr	r5, [r4, #12]
 8021ed4:	f8d9 2000 	ldr.w	r2, [r9]
 8021ed8:	f003 0306 	and.w	r3, r3, #6
 8021edc:	2b04      	cmp	r3, #4
 8021ede:	bf08      	it	eq
 8021ee0:	1aad      	subeq	r5, r5, r2
 8021ee2:	68a3      	ldr	r3, [r4, #8]
 8021ee4:	6922      	ldr	r2, [r4, #16]
 8021ee6:	bf0c      	ite	eq
 8021ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021eec:	2500      	movne	r5, #0
 8021eee:	4293      	cmp	r3, r2
 8021ef0:	bfc4      	itt	gt
 8021ef2:	1a9b      	subgt	r3, r3, r2
 8021ef4:	18ed      	addgt	r5, r5, r3
 8021ef6:	f04f 0900 	mov.w	r9, #0
 8021efa:	341a      	adds	r4, #26
 8021efc:	454d      	cmp	r5, r9
 8021efe:	d11a      	bne.n	8021f36 <_printf_common+0xd6>
 8021f00:	2000      	movs	r0, #0
 8021f02:	e008      	b.n	8021f16 <_printf_common+0xb6>
 8021f04:	2301      	movs	r3, #1
 8021f06:	4652      	mov	r2, sl
 8021f08:	4639      	mov	r1, r7
 8021f0a:	4630      	mov	r0, r6
 8021f0c:	47c0      	blx	r8
 8021f0e:	3001      	adds	r0, #1
 8021f10:	d103      	bne.n	8021f1a <_printf_common+0xba>
 8021f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021f1a:	3501      	adds	r5, #1
 8021f1c:	e7c3      	b.n	8021ea6 <_printf_common+0x46>
 8021f1e:	18e1      	adds	r1, r4, r3
 8021f20:	1c5a      	adds	r2, r3, #1
 8021f22:	2030      	movs	r0, #48	; 0x30
 8021f24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8021f28:	4422      	add	r2, r4
 8021f2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8021f2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021f32:	3302      	adds	r3, #2
 8021f34:	e7c5      	b.n	8021ec2 <_printf_common+0x62>
 8021f36:	2301      	movs	r3, #1
 8021f38:	4622      	mov	r2, r4
 8021f3a:	4639      	mov	r1, r7
 8021f3c:	4630      	mov	r0, r6
 8021f3e:	47c0      	blx	r8
 8021f40:	3001      	adds	r0, #1
 8021f42:	d0e6      	beq.n	8021f12 <_printf_common+0xb2>
 8021f44:	f109 0901 	add.w	r9, r9, #1
 8021f48:	e7d8      	b.n	8021efc <_printf_common+0x9c>
	...

08021f4c <_printf_i>:
 8021f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021f50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8021f54:	460c      	mov	r4, r1
 8021f56:	7e09      	ldrb	r1, [r1, #24]
 8021f58:	b085      	sub	sp, #20
 8021f5a:	296e      	cmp	r1, #110	; 0x6e
 8021f5c:	4617      	mov	r7, r2
 8021f5e:	4606      	mov	r6, r0
 8021f60:	4698      	mov	r8, r3
 8021f62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021f64:	f000 80b3 	beq.w	80220ce <_printf_i+0x182>
 8021f68:	d822      	bhi.n	8021fb0 <_printf_i+0x64>
 8021f6a:	2963      	cmp	r1, #99	; 0x63
 8021f6c:	d036      	beq.n	8021fdc <_printf_i+0x90>
 8021f6e:	d80a      	bhi.n	8021f86 <_printf_i+0x3a>
 8021f70:	2900      	cmp	r1, #0
 8021f72:	f000 80b9 	beq.w	80220e8 <_printf_i+0x19c>
 8021f76:	2958      	cmp	r1, #88	; 0x58
 8021f78:	f000 8083 	beq.w	8022082 <_printf_i+0x136>
 8021f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021f80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8021f84:	e032      	b.n	8021fec <_printf_i+0xa0>
 8021f86:	2964      	cmp	r1, #100	; 0x64
 8021f88:	d001      	beq.n	8021f8e <_printf_i+0x42>
 8021f8a:	2969      	cmp	r1, #105	; 0x69
 8021f8c:	d1f6      	bne.n	8021f7c <_printf_i+0x30>
 8021f8e:	6820      	ldr	r0, [r4, #0]
 8021f90:	6813      	ldr	r3, [r2, #0]
 8021f92:	0605      	lsls	r5, r0, #24
 8021f94:	f103 0104 	add.w	r1, r3, #4
 8021f98:	d52a      	bpl.n	8021ff0 <_printf_i+0xa4>
 8021f9a:	681b      	ldr	r3, [r3, #0]
 8021f9c:	6011      	str	r1, [r2, #0]
 8021f9e:	2b00      	cmp	r3, #0
 8021fa0:	da03      	bge.n	8021faa <_printf_i+0x5e>
 8021fa2:	222d      	movs	r2, #45	; 0x2d
 8021fa4:	425b      	negs	r3, r3
 8021fa6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8021faa:	486f      	ldr	r0, [pc, #444]	; (8022168 <_printf_i+0x21c>)
 8021fac:	220a      	movs	r2, #10
 8021fae:	e039      	b.n	8022024 <_printf_i+0xd8>
 8021fb0:	2973      	cmp	r1, #115	; 0x73
 8021fb2:	f000 809d 	beq.w	80220f0 <_printf_i+0x1a4>
 8021fb6:	d808      	bhi.n	8021fca <_printf_i+0x7e>
 8021fb8:	296f      	cmp	r1, #111	; 0x6f
 8021fba:	d020      	beq.n	8021ffe <_printf_i+0xb2>
 8021fbc:	2970      	cmp	r1, #112	; 0x70
 8021fbe:	d1dd      	bne.n	8021f7c <_printf_i+0x30>
 8021fc0:	6823      	ldr	r3, [r4, #0]
 8021fc2:	f043 0320 	orr.w	r3, r3, #32
 8021fc6:	6023      	str	r3, [r4, #0]
 8021fc8:	e003      	b.n	8021fd2 <_printf_i+0x86>
 8021fca:	2975      	cmp	r1, #117	; 0x75
 8021fcc:	d017      	beq.n	8021ffe <_printf_i+0xb2>
 8021fce:	2978      	cmp	r1, #120	; 0x78
 8021fd0:	d1d4      	bne.n	8021f7c <_printf_i+0x30>
 8021fd2:	2378      	movs	r3, #120	; 0x78
 8021fd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8021fd8:	4864      	ldr	r0, [pc, #400]	; (802216c <_printf_i+0x220>)
 8021fda:	e055      	b.n	8022088 <_printf_i+0x13c>
 8021fdc:	6813      	ldr	r3, [r2, #0]
 8021fde:	1d19      	adds	r1, r3, #4
 8021fe0:	681b      	ldr	r3, [r3, #0]
 8021fe2:	6011      	str	r1, [r2, #0]
 8021fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021fec:	2301      	movs	r3, #1
 8021fee:	e08c      	b.n	802210a <_printf_i+0x1be>
 8021ff0:	681b      	ldr	r3, [r3, #0]
 8021ff2:	6011      	str	r1, [r2, #0]
 8021ff4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8021ff8:	bf18      	it	ne
 8021ffa:	b21b      	sxthne	r3, r3
 8021ffc:	e7cf      	b.n	8021f9e <_printf_i+0x52>
 8021ffe:	6813      	ldr	r3, [r2, #0]
 8022000:	6825      	ldr	r5, [r4, #0]
 8022002:	1d18      	adds	r0, r3, #4
 8022004:	6010      	str	r0, [r2, #0]
 8022006:	0628      	lsls	r0, r5, #24
 8022008:	d501      	bpl.n	802200e <_printf_i+0xc2>
 802200a:	681b      	ldr	r3, [r3, #0]
 802200c:	e002      	b.n	8022014 <_printf_i+0xc8>
 802200e:	0668      	lsls	r0, r5, #25
 8022010:	d5fb      	bpl.n	802200a <_printf_i+0xbe>
 8022012:	881b      	ldrh	r3, [r3, #0]
 8022014:	4854      	ldr	r0, [pc, #336]	; (8022168 <_printf_i+0x21c>)
 8022016:	296f      	cmp	r1, #111	; 0x6f
 8022018:	bf14      	ite	ne
 802201a:	220a      	movne	r2, #10
 802201c:	2208      	moveq	r2, #8
 802201e:	2100      	movs	r1, #0
 8022020:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022024:	6865      	ldr	r5, [r4, #4]
 8022026:	60a5      	str	r5, [r4, #8]
 8022028:	2d00      	cmp	r5, #0
 802202a:	f2c0 8095 	blt.w	8022158 <_printf_i+0x20c>
 802202e:	6821      	ldr	r1, [r4, #0]
 8022030:	f021 0104 	bic.w	r1, r1, #4
 8022034:	6021      	str	r1, [r4, #0]
 8022036:	2b00      	cmp	r3, #0
 8022038:	d13d      	bne.n	80220b6 <_printf_i+0x16a>
 802203a:	2d00      	cmp	r5, #0
 802203c:	f040 808e 	bne.w	802215c <_printf_i+0x210>
 8022040:	4665      	mov	r5, ip
 8022042:	2a08      	cmp	r2, #8
 8022044:	d10b      	bne.n	802205e <_printf_i+0x112>
 8022046:	6823      	ldr	r3, [r4, #0]
 8022048:	07db      	lsls	r3, r3, #31
 802204a:	d508      	bpl.n	802205e <_printf_i+0x112>
 802204c:	6923      	ldr	r3, [r4, #16]
 802204e:	6862      	ldr	r2, [r4, #4]
 8022050:	429a      	cmp	r2, r3
 8022052:	bfde      	ittt	le
 8022054:	2330      	movle	r3, #48	; 0x30
 8022056:	f805 3c01 	strble.w	r3, [r5, #-1]
 802205a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 802205e:	ebac 0305 	sub.w	r3, ip, r5
 8022062:	6123      	str	r3, [r4, #16]
 8022064:	f8cd 8000 	str.w	r8, [sp]
 8022068:	463b      	mov	r3, r7
 802206a:	aa03      	add	r2, sp, #12
 802206c:	4621      	mov	r1, r4
 802206e:	4630      	mov	r0, r6
 8022070:	f7ff fef6 	bl	8021e60 <_printf_common>
 8022074:	3001      	adds	r0, #1
 8022076:	d14d      	bne.n	8022114 <_printf_i+0x1c8>
 8022078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802207c:	b005      	add	sp, #20
 802207e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022082:	4839      	ldr	r0, [pc, #228]	; (8022168 <_printf_i+0x21c>)
 8022084:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8022088:	6813      	ldr	r3, [r2, #0]
 802208a:	6821      	ldr	r1, [r4, #0]
 802208c:	1d1d      	adds	r5, r3, #4
 802208e:	681b      	ldr	r3, [r3, #0]
 8022090:	6015      	str	r5, [r2, #0]
 8022092:	060a      	lsls	r2, r1, #24
 8022094:	d50b      	bpl.n	80220ae <_printf_i+0x162>
 8022096:	07ca      	lsls	r2, r1, #31
 8022098:	bf44      	itt	mi
 802209a:	f041 0120 	orrmi.w	r1, r1, #32
 802209e:	6021      	strmi	r1, [r4, #0]
 80220a0:	b91b      	cbnz	r3, 80220aa <_printf_i+0x15e>
 80220a2:	6822      	ldr	r2, [r4, #0]
 80220a4:	f022 0220 	bic.w	r2, r2, #32
 80220a8:	6022      	str	r2, [r4, #0]
 80220aa:	2210      	movs	r2, #16
 80220ac:	e7b7      	b.n	802201e <_printf_i+0xd2>
 80220ae:	064d      	lsls	r5, r1, #25
 80220b0:	bf48      	it	mi
 80220b2:	b29b      	uxthmi	r3, r3
 80220b4:	e7ef      	b.n	8022096 <_printf_i+0x14a>
 80220b6:	4665      	mov	r5, ip
 80220b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80220bc:	fb02 3311 	mls	r3, r2, r1, r3
 80220c0:	5cc3      	ldrb	r3, [r0, r3]
 80220c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80220c6:	460b      	mov	r3, r1
 80220c8:	2900      	cmp	r1, #0
 80220ca:	d1f5      	bne.n	80220b8 <_printf_i+0x16c>
 80220cc:	e7b9      	b.n	8022042 <_printf_i+0xf6>
 80220ce:	6813      	ldr	r3, [r2, #0]
 80220d0:	6825      	ldr	r5, [r4, #0]
 80220d2:	6961      	ldr	r1, [r4, #20]
 80220d4:	1d18      	adds	r0, r3, #4
 80220d6:	6010      	str	r0, [r2, #0]
 80220d8:	0628      	lsls	r0, r5, #24
 80220da:	681b      	ldr	r3, [r3, #0]
 80220dc:	d501      	bpl.n	80220e2 <_printf_i+0x196>
 80220de:	6019      	str	r1, [r3, #0]
 80220e0:	e002      	b.n	80220e8 <_printf_i+0x19c>
 80220e2:	066a      	lsls	r2, r5, #25
 80220e4:	d5fb      	bpl.n	80220de <_printf_i+0x192>
 80220e6:	8019      	strh	r1, [r3, #0]
 80220e8:	2300      	movs	r3, #0
 80220ea:	6123      	str	r3, [r4, #16]
 80220ec:	4665      	mov	r5, ip
 80220ee:	e7b9      	b.n	8022064 <_printf_i+0x118>
 80220f0:	6813      	ldr	r3, [r2, #0]
 80220f2:	1d19      	adds	r1, r3, #4
 80220f4:	6011      	str	r1, [r2, #0]
 80220f6:	681d      	ldr	r5, [r3, #0]
 80220f8:	6862      	ldr	r2, [r4, #4]
 80220fa:	2100      	movs	r1, #0
 80220fc:	4628      	mov	r0, r5
 80220fe:	f7de f887 	bl	8000210 <memchr>
 8022102:	b108      	cbz	r0, 8022108 <_printf_i+0x1bc>
 8022104:	1b40      	subs	r0, r0, r5
 8022106:	6060      	str	r0, [r4, #4]
 8022108:	6863      	ldr	r3, [r4, #4]
 802210a:	6123      	str	r3, [r4, #16]
 802210c:	2300      	movs	r3, #0
 802210e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022112:	e7a7      	b.n	8022064 <_printf_i+0x118>
 8022114:	6923      	ldr	r3, [r4, #16]
 8022116:	462a      	mov	r2, r5
 8022118:	4639      	mov	r1, r7
 802211a:	4630      	mov	r0, r6
 802211c:	47c0      	blx	r8
 802211e:	3001      	adds	r0, #1
 8022120:	d0aa      	beq.n	8022078 <_printf_i+0x12c>
 8022122:	6823      	ldr	r3, [r4, #0]
 8022124:	079b      	lsls	r3, r3, #30
 8022126:	d413      	bmi.n	8022150 <_printf_i+0x204>
 8022128:	68e0      	ldr	r0, [r4, #12]
 802212a:	9b03      	ldr	r3, [sp, #12]
 802212c:	4298      	cmp	r0, r3
 802212e:	bfb8      	it	lt
 8022130:	4618      	movlt	r0, r3
 8022132:	e7a3      	b.n	802207c <_printf_i+0x130>
 8022134:	2301      	movs	r3, #1
 8022136:	464a      	mov	r2, r9
 8022138:	4639      	mov	r1, r7
 802213a:	4630      	mov	r0, r6
 802213c:	47c0      	blx	r8
 802213e:	3001      	adds	r0, #1
 8022140:	d09a      	beq.n	8022078 <_printf_i+0x12c>
 8022142:	3501      	adds	r5, #1
 8022144:	68e3      	ldr	r3, [r4, #12]
 8022146:	9a03      	ldr	r2, [sp, #12]
 8022148:	1a9b      	subs	r3, r3, r2
 802214a:	42ab      	cmp	r3, r5
 802214c:	dcf2      	bgt.n	8022134 <_printf_i+0x1e8>
 802214e:	e7eb      	b.n	8022128 <_printf_i+0x1dc>
 8022150:	2500      	movs	r5, #0
 8022152:	f104 0919 	add.w	r9, r4, #25
 8022156:	e7f5      	b.n	8022144 <_printf_i+0x1f8>
 8022158:	2b00      	cmp	r3, #0
 802215a:	d1ac      	bne.n	80220b6 <_printf_i+0x16a>
 802215c:	7803      	ldrb	r3, [r0, #0]
 802215e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022162:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022166:	e76c      	b.n	8022042 <_printf_i+0xf6>
 8022168:	08027f31 	.word	0x08027f31
 802216c:	08027f42 	.word	0x08027f42

08022170 <__sread>:
 8022170:	b510      	push	{r4, lr}
 8022172:	460c      	mov	r4, r1
 8022174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022178:	f000 f894 	bl	80222a4 <_read_r>
 802217c:	2800      	cmp	r0, #0
 802217e:	bfab      	itete	ge
 8022180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022182:	89a3      	ldrhlt	r3, [r4, #12]
 8022184:	181b      	addge	r3, r3, r0
 8022186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802218a:	bfac      	ite	ge
 802218c:	6563      	strge	r3, [r4, #84]	; 0x54
 802218e:	81a3      	strhlt	r3, [r4, #12]
 8022190:	bd10      	pop	{r4, pc}

08022192 <__swrite>:
 8022192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022196:	461f      	mov	r7, r3
 8022198:	898b      	ldrh	r3, [r1, #12]
 802219a:	05db      	lsls	r3, r3, #23
 802219c:	4605      	mov	r5, r0
 802219e:	460c      	mov	r4, r1
 80221a0:	4616      	mov	r6, r2
 80221a2:	d505      	bpl.n	80221b0 <__swrite+0x1e>
 80221a4:	2302      	movs	r3, #2
 80221a6:	2200      	movs	r2, #0
 80221a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80221ac:	f000 f868 	bl	8022280 <_lseek_r>
 80221b0:	89a3      	ldrh	r3, [r4, #12]
 80221b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80221b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80221ba:	81a3      	strh	r3, [r4, #12]
 80221bc:	4632      	mov	r2, r6
 80221be:	463b      	mov	r3, r7
 80221c0:	4628      	mov	r0, r5
 80221c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80221c6:	f000 b817 	b.w	80221f8 <_write_r>

080221ca <__sseek>:
 80221ca:	b510      	push	{r4, lr}
 80221cc:	460c      	mov	r4, r1
 80221ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80221d2:	f000 f855 	bl	8022280 <_lseek_r>
 80221d6:	1c43      	adds	r3, r0, #1
 80221d8:	89a3      	ldrh	r3, [r4, #12]
 80221da:	bf15      	itete	ne
 80221dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80221de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80221e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80221e6:	81a3      	strheq	r3, [r4, #12]
 80221e8:	bf18      	it	ne
 80221ea:	81a3      	strhne	r3, [r4, #12]
 80221ec:	bd10      	pop	{r4, pc}

080221ee <__sclose>:
 80221ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80221f2:	f000 b813 	b.w	802221c <_close_r>
	...

080221f8 <_write_r>:
 80221f8:	b538      	push	{r3, r4, r5, lr}
 80221fa:	4c07      	ldr	r4, [pc, #28]	; (8022218 <_write_r+0x20>)
 80221fc:	4605      	mov	r5, r0
 80221fe:	4608      	mov	r0, r1
 8022200:	4611      	mov	r1, r2
 8022202:	2200      	movs	r2, #0
 8022204:	6022      	str	r2, [r4, #0]
 8022206:	461a      	mov	r2, r3
 8022208:	f7e0 fc27 	bl	8002a5a <_write>
 802220c:	1c43      	adds	r3, r0, #1
 802220e:	d102      	bne.n	8022216 <_write_r+0x1e>
 8022210:	6823      	ldr	r3, [r4, #0]
 8022212:	b103      	cbz	r3, 8022216 <_write_r+0x1e>
 8022214:	602b      	str	r3, [r5, #0]
 8022216:	bd38      	pop	{r3, r4, r5, pc}
 8022218:	20010378 	.word	0x20010378

0802221c <_close_r>:
 802221c:	b538      	push	{r3, r4, r5, lr}
 802221e:	4c06      	ldr	r4, [pc, #24]	; (8022238 <_close_r+0x1c>)
 8022220:	2300      	movs	r3, #0
 8022222:	4605      	mov	r5, r0
 8022224:	4608      	mov	r0, r1
 8022226:	6023      	str	r3, [r4, #0]
 8022228:	f7e0 fc33 	bl	8002a92 <_close>
 802222c:	1c43      	adds	r3, r0, #1
 802222e:	d102      	bne.n	8022236 <_close_r+0x1a>
 8022230:	6823      	ldr	r3, [r4, #0]
 8022232:	b103      	cbz	r3, 8022236 <_close_r+0x1a>
 8022234:	602b      	str	r3, [r5, #0]
 8022236:	bd38      	pop	{r3, r4, r5, pc}
 8022238:	20010378 	.word	0x20010378

0802223c <_fstat_r>:
 802223c:	b538      	push	{r3, r4, r5, lr}
 802223e:	4c07      	ldr	r4, [pc, #28]	; (802225c <_fstat_r+0x20>)
 8022240:	2300      	movs	r3, #0
 8022242:	4605      	mov	r5, r0
 8022244:	4608      	mov	r0, r1
 8022246:	4611      	mov	r1, r2
 8022248:	6023      	str	r3, [r4, #0]
 802224a:	f7e0 fc2e 	bl	8002aaa <_fstat>
 802224e:	1c43      	adds	r3, r0, #1
 8022250:	d102      	bne.n	8022258 <_fstat_r+0x1c>
 8022252:	6823      	ldr	r3, [r4, #0]
 8022254:	b103      	cbz	r3, 8022258 <_fstat_r+0x1c>
 8022256:	602b      	str	r3, [r5, #0]
 8022258:	bd38      	pop	{r3, r4, r5, pc}
 802225a:	bf00      	nop
 802225c:	20010378 	.word	0x20010378

08022260 <_isatty_r>:
 8022260:	b538      	push	{r3, r4, r5, lr}
 8022262:	4c06      	ldr	r4, [pc, #24]	; (802227c <_isatty_r+0x1c>)
 8022264:	2300      	movs	r3, #0
 8022266:	4605      	mov	r5, r0
 8022268:	4608      	mov	r0, r1
 802226a:	6023      	str	r3, [r4, #0]
 802226c:	f7e0 fc2d 	bl	8002aca <_isatty>
 8022270:	1c43      	adds	r3, r0, #1
 8022272:	d102      	bne.n	802227a <_isatty_r+0x1a>
 8022274:	6823      	ldr	r3, [r4, #0]
 8022276:	b103      	cbz	r3, 802227a <_isatty_r+0x1a>
 8022278:	602b      	str	r3, [r5, #0]
 802227a:	bd38      	pop	{r3, r4, r5, pc}
 802227c:	20010378 	.word	0x20010378

08022280 <_lseek_r>:
 8022280:	b538      	push	{r3, r4, r5, lr}
 8022282:	4c07      	ldr	r4, [pc, #28]	; (80222a0 <_lseek_r+0x20>)
 8022284:	4605      	mov	r5, r0
 8022286:	4608      	mov	r0, r1
 8022288:	4611      	mov	r1, r2
 802228a:	2200      	movs	r2, #0
 802228c:	6022      	str	r2, [r4, #0]
 802228e:	461a      	mov	r2, r3
 8022290:	f7e0 fc26 	bl	8002ae0 <_lseek>
 8022294:	1c43      	adds	r3, r0, #1
 8022296:	d102      	bne.n	802229e <_lseek_r+0x1e>
 8022298:	6823      	ldr	r3, [r4, #0]
 802229a:	b103      	cbz	r3, 802229e <_lseek_r+0x1e>
 802229c:	602b      	str	r3, [r5, #0]
 802229e:	bd38      	pop	{r3, r4, r5, pc}
 80222a0:	20010378 	.word	0x20010378

080222a4 <_read_r>:
 80222a4:	b538      	push	{r3, r4, r5, lr}
 80222a6:	4c07      	ldr	r4, [pc, #28]	; (80222c4 <_read_r+0x20>)
 80222a8:	4605      	mov	r5, r0
 80222aa:	4608      	mov	r0, r1
 80222ac:	4611      	mov	r1, r2
 80222ae:	2200      	movs	r2, #0
 80222b0:	6022      	str	r2, [r4, #0]
 80222b2:	461a      	mov	r2, r3
 80222b4:	f7e0 fbb4 	bl	8002a20 <_read>
 80222b8:	1c43      	adds	r3, r0, #1
 80222ba:	d102      	bne.n	80222c2 <_read_r+0x1e>
 80222bc:	6823      	ldr	r3, [r4, #0]
 80222be:	b103      	cbz	r3, 80222c2 <_read_r+0x1e>
 80222c0:	602b      	str	r3, [r5, #0]
 80222c2:	bd38      	pop	{r3, r4, r5, pc}
 80222c4:	20010378 	.word	0x20010378

080222c8 <_init>:
 80222c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222ca:	bf00      	nop
 80222cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80222ce:	bc08      	pop	{r3}
 80222d0:	469e      	mov	lr, r3
 80222d2:	4770      	bx	lr

080222d4 <_fini>:
 80222d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222d6:	bf00      	nop
 80222d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80222da:	bc08      	pop	{r3}
 80222dc:	469e      	mov	lr, r3
 80222de:	4770      	bx	lr
