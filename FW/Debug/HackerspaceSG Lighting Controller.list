
HackerspaceSG Lighting Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000221f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005d40  080223c4  080223c4  000323c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028104  08028104  000400c0  2**0
                  CONTENTS
  4 .ARM          00000008  08028104  08028104  00038104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802810c  0802810c  000400c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802810c  0802810c  0003810c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028110  08028110  00038110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08028114  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014638  200000c0  080281d4  000400c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200146f8  080281d4  000446f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006e259  00000000  00000000  000400f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000bf26  00000000  00000000  000ae349  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00004078  00000000  00000000  000ba270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003cc0  00000000  00000000  000be2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000451af  00000000  00000000  000c1fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00050ad8  00000000  00000000  00107157  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00144cf7  00000000  00000000  00157c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0029c926  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011464  00000000  00000000  0029c9a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080223ac 	.word	0x080223ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	080223ac 	.word	0x080223ac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <hw_init>:
***********************************************************************************************************************/

#include "hw_init.h"

void hw_init()
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	af00      	add	r7, sp, #0
	// Initialize System Clock
	SystemClock_Config();
 80005e6:	f000 f82f 	bl	8000648 <SystemClock_Config>

	// Initialize Hardware Peripherals
	GPIO_Init();
 80005ea:	f000 ffab 	bl	8001544 <GPIO_Init>
	ADC3_Init();
 80005ee:	f000 f8eb 	bl	80007c8 <ADC3_Init>
	CRC_Init();
 80005f2:	f000 f93b 	bl	800086c <CRC_Init>
	DCMI_Init();
 80005f6:	f000 f95b 	bl	80008b0 <DCMI_Init>
	DMA2D_Init();
 80005fa:	f000 f98d 	bl	8000918 <DMA2D_Init>
	FMC_Init();
 80005fe:	f000 ff51 	bl	80014a4 <FMC_Init>
	I2C1_Init();
 8000602:	f000 f9bb 	bl	800097c <I2C1_Init>
	I2C3_Init();
 8000606:	f000 f9f9 	bl	80009fc <I2C3_Init>
	//LTDC_Init();
	QUADSPI_Init();
 800060a:	f000 fa37 	bl	8000a7c <QUADSPI_Init>
	RTC_Init();
 800060e:	f000 fa61 	bl	8000ad4 <RTC_Init>
	SAI2_Init();
 8000612:	f000 fb05 	bl	8000c20 <SAI2_Init>
	SDMMC1_SD_Init();
 8000616:	f000 fbab 	bl	8000d70 <SDMMC1_SD_Init>
	SPDIFRX_Init();
 800061a:	f000 fbc9 	bl	8000db0 <SPDIFRX_Init>
	SPI2_Init();
 800061e:	f000 fbf7 	bl	8000e10 <SPI2_Init>
	TIM1_Init();
 8000622:	f000 fc33 	bl	8000e8c <TIM1_Init>
	TIM2_Init();
 8000626:	f000 fcdd 	bl	8000fe4 <TIM2_Init>
	TIM3_Init();
 800062a:	f000 fd51 	bl	80010d0 <TIM3_Init>
	TIM5_Init();
 800062e:	f000 fdc7 	bl	80011c0 <TIM5_Init>
	TIM8_Init();
 8000632:	f000 fe3d 	bl	80012b0 <TIM8_Init>
	TIM12_Init();
 8000636:	f000 fe8f 	bl	8001358 <TIM12_Init>
	USART1_UART_Init();
 800063a:	f000 fed3 	bl	80013e4 <USART1_UART_Init>
	USART6_UART_Init();
 800063e:	f000 ff01 	bl	8001444 <USART6_UART_Init>
	//IWDG_Init();
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b0b4      	sub	sp, #208	; 0xd0
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f020 ff1c 	bl	8021494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2284      	movs	r2, #132	; 0x84
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f020 ff0d 	bl	8021494 <memset>

  // Configure LSE Drive Capability
  HAL_PWR_EnableBkUpAccess();
 800067a:	f008 f92d 	bl	80088d8 <HAL_PWR_EnableBkUpAccess>

  // Configure the main internal regulator output voltage
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b4f      	ldr	r3, [pc, #316]	; (80007bc <SystemClock_Config+0x174>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	4a4e      	ldr	r2, [pc, #312]	; (80007bc <SystemClock_Config+0x174>)
 8000684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000688:	6413      	str	r3, [r2, #64]	; 0x40
 800068a:	4b4c      	ldr	r3, [pc, #304]	; (80007bc <SystemClock_Config+0x174>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000696:	4b4a      	ldr	r3, [pc, #296]	; (80007c0 <SystemClock_Config+0x178>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a49      	ldr	r2, [pc, #292]	; (80007c0 <SystemClock_Config+0x178>)
 800069c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	4b47      	ldr	r3, [pc, #284]	; (80007c0 <SystemClock_Config+0x178>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  // Initializes the RCC Oscillators according to the specified parameters
  // in the RCC_OscInitTypeDef structure.
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006ae:	2309      	movs	r3, #9
 80006b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006d0:	2319      	movs	r3, #25
 80006d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80006d6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80006da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006e4:	2309      	movs	r3, #9
 80006e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f008 fa14 	bl	8008b1c <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006fa:	f001 f963 	bl	80019c4 <Error_Handler>
  }
  // Activate the Over-Drive mode
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006fe:	f008 f8fb 	bl	80088f8 <HAL_PWREx_EnableOverDrive>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000708:	f001 f95c 	bl	80019c4 <Error_Handler>
  }
  // Initializes the CPU, AHB and APB buses clocks
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2302      	movs	r3, #2
 8000714:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000722:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800072e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000732:	2106      	movs	r1, #6
 8000734:	4618      	mov	r0, r3
 8000736:	f008 fc95 	bl	8009064 <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000740:	f001 f940 	bl	80019c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <SystemClock_Config+0x17c>)
 8000746:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000748:	2364      	movs	r3, #100	; 0x64
 800074a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000758:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800075c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800075e:	2305      	movs	r3, #5
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000762:	2302      	movs	r3, #2
 8000764:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000766:	2303      	movs	r3, #3
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800076a:	2301      	movs	r3, #1
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800076e:	2301      	movs	r3, #1
 8000770:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000772:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000776:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800077c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800077e:	2300      	movs	r3, #0
 8000780:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000782:	2300      	movs	r3, #0
 8000784:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000786:	2300      	movs	r3, #0
 8000788:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800078a:	2300      	movs	r3, #0
 800078c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800078e:	2300      	movs	r3, #0
 8000790:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000792:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800079a:	2300      	movs	r3, #0
 800079c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	4618      	mov	r0, r3
 80007a6:	f008 fe61 	bl	800946c <HAL_RCCEx_PeriphCLKConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 80007b0:	f001 f908 	bl	80019c4 <Error_Handler>
  }
}
 80007b4:	bf00      	nop
 80007b6:	37d0      	adds	r7, #208	; 0xd0
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000
 80007c4:	01b14868 	.word	0x01b14868

080007c8 <ADC3_Init>:

// ADC3 Peripheral Initialization
void ADC3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]

  // Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  hadc3.Instance = ADC3;
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <ADC3_Init+0x98>)
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <ADC3_Init+0x9c>)
 80007de:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <ADC3_Init+0x98>)
 80007e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007e6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <ADC3_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <ADC3_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <ADC3_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <ADC3_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <ADC3_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <ADC3_Init+0x98>)
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <ADC3_Init+0xa0>)
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <ADC3_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <ADC3_Init+0x98>)
 8000816:	2201      	movs	r2, #1
 8000818:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <ADC3_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <ADC3_Init+0x98>)
 8000824:	2201      	movs	r2, #1
 8000826:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000828:	480d      	ldr	r0, [pc, #52]	; (8000860 <ADC3_Init+0x98>)
 800082a:	f003 f8cd 	bl	80039c8 <HAL_ADC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <ADC3_Init+0x70>
  {
    Error_Handler();
 8000834:	f001 f8c6 	bl	80019c4 <Error_Handler>
  }
  // Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  sConfig.Channel = ADC_CHANNEL_4;
 8000838:	2304      	movs	r3, #4
 800083a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800083c:	2301      	movs	r3, #1
 800083e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <ADC3_Init+0x98>)
 800084a:	f003 f901 	bl	8003a50 <HAL_ADC_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <ADC3_Init+0x90>
  {
    Error_Handler();
 8000854:	f001 f8b6 	bl	80019c4 <Error_Handler>
  }

}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200095b4 	.word	0x200095b4
 8000864:	40012200 	.word	0x40012200
 8000868:	0f000001 	.word	0x0f000001

0800086c <CRC_Init>:

// CRC Peripheral Initialization
 void CRC_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  hcrc.Instance = CRC;
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <CRC_Init+0x3c>)
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <CRC_Init+0x40>)
 8000874:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <CRC_Init+0x3c>)
 8000878:	2200      	movs	r2, #0
 800087a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <CRC_Init+0x3c>)
 800087e:	2200      	movs	r2, #0
 8000880:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <CRC_Init+0x3c>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <CRC_Init+0x3c>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <CRC_Init+0x3c>)
 8000890:	2201      	movs	r2, #1
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <CRC_Init+0x3c>)
 8000896:	f003 fc01 	bl	800409c <HAL_CRC_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <CRC_Init+0x38>
  {
    Error_Handler();
 80008a0:	f001 f890 	bl	80019c4 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200093cc 	.word	0x200093cc
 80008ac:	40023000 	.word	0x40023000

080008b0 <DCMI_Init>:

// DCMI Peripheral Initialization
 void DCMI_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  hdcmi.Instance = DCMI;
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <DCMI_Init+0x60>)
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <DCMI_Init+0x64>)
 80008b8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <DCMI_Init+0x60>)
 80008bc:	2200      	movs	r2, #0
 80008be:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <DCMI_Init+0x60>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <DCMI_Init+0x60>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <DCMI_Init+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <DCMI_Init+0x60>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <DCMI_Init+0x60>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <DCMI_Init+0x60>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <DCMI_Init+0x60>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <DCMI_Init+0x60>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <DCMI_Init+0x60>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <DCMI_Init+0x60>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <DCMI_Init+0x60>)
 80008fe:	f003 fcb7 	bl	8004270 <HAL_DCMI_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <DCMI_Init+0x5c>
  {
    Error_Handler();
 8000908:	f001 f85c 	bl	80019c4 <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200095fc 	.word	0x200095fc
 8000914:	50050000 	.word	0x50050000

08000918 <DMA2D_Init>:

}

// DMA2D Peripheral Initialization
void DMA2D_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  hdma2d.Instance = DMA2D;
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <DMA2D_Init+0x5c>)
 800091e:	4a16      	ldr	r2, [pc, #88]	; (8000978 <DMA2D_Init+0x60>)
 8000920:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <DMA2D_Init+0x5c>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <DMA2D_Init+0x5c>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <DMA2D_Init+0x5c>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <DMA2D_Init+0x5c>)
 8000936:	2200      	movs	r2, #0
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <DMA2D_Init+0x5c>)
 800093c:	2200      	movs	r2, #0
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <DMA2D_Init+0x5c>)
 8000942:	2200      	movs	r2, #0
 8000944:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <DMA2D_Init+0x5c>)
 8000948:	2200      	movs	r2, #0
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800094c:	4809      	ldr	r0, [pc, #36]	; (8000974 <DMA2D_Init+0x5c>)
 800094e:	f003 fec5 	bl	80046dc <HAL_DMA2D_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <DMA2D_Init+0x44>
  {
    Error_Handler();
 8000958:	f001 f834 	bl	80019c4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800095c:	2101      	movs	r1, #1
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <DMA2D_Init+0x5c>)
 8000960:	f004 f92a 	bl	8004bb8 <HAL_DMA2D_ConfigLayer>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <DMA2D_Init+0x56>
  {
    Error_Handler();
 800096a:	f001 f82b 	bl	80019c4 <Error_Handler>
  }

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200097c0 	.word	0x200097c0
 8000978:	4002b000 	.word	0x4002b000

0800097c <I2C1_Init>:

// I2C1 Peripheral Initialization
void I2C1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <I2C1_Init+0x74>)
 8000982:	4a1c      	ldr	r2, [pc, #112]	; (80009f4 <I2C1_Init+0x78>)
 8000984:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <I2C1_Init+0x74>)
 8000988:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <I2C1_Init+0x7c>)
 800098a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <I2C1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <I2C1_Init+0x74>)
 8000994:	2201      	movs	r2, #1
 8000996:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <I2C1_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <I2C1_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <I2C1_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <I2C1_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <I2C1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b6:	480e      	ldr	r0, [pc, #56]	; (80009f0 <I2C1_Init+0x74>)
 80009b8:	f007 fade 	bl	8007f78 <HAL_I2C_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <I2C1_Init+0x4a>
  {
    Error_Handler();
 80009c2:	f000 ffff 	bl	80019c4 <Error_Handler>
  }
  // Configure Analog filter
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009c6:	2100      	movs	r1, #0
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <I2C1_Init+0x74>)
 80009ca:	f007 fb65 	bl	8008098 <HAL_I2CEx_ConfigAnalogFilter>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <I2C1_Init+0x5c>
  {
    Error_Handler();
 80009d4:	f000 fff6 	bl	80019c4 <Error_Handler>
  }
  // Configure Digital filter
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <I2C1_Init+0x74>)
 80009dc:	f007 fba7 	bl	800812e <HAL_I2CEx_ConfigDigitalFilter>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <I2C1_Init+0x6e>
  {
    Error_Handler();
 80009e6:	f000 ffed 	bl	80019c4 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20009370 	.word	0x20009370
 80009f4:	40005400 	.word	0x40005400
 80009f8:	00c0eaff 	.word	0x00c0eaff

080009fc <I2C3_Init>:

// I2C3 Peripheral Initialization
void I2C3_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <I2C3_Init+0x74>)
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <I2C3_Init+0x78>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <I2C3_Init+0x74>)
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <I2C3_Init+0x7c>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <I2C3_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <I2C3_Init+0x74>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <I2C3_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <I2C3_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <I2C3_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <I2C3_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <I2C3_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a36:	480e      	ldr	r0, [pc, #56]	; (8000a70 <I2C3_Init+0x74>)
 8000a38:	f007 fa9e 	bl	8007f78 <HAL_I2C_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a42:	f000 ffbf 	bl	80019c4 <Error_Handler>
  }
  // Configure Analogue filter
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4809      	ldr	r0, [pc, #36]	; (8000a70 <I2C3_Init+0x74>)
 8000a4a:	f007 fb25 	bl	8008098 <HAL_I2CEx_ConfigAnalogFilter>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a54:	f000 ffb6 	bl	80019c4 <Error_Handler>
  }
  // Configure Digital filter
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <I2C3_Init+0x74>)
 8000a5c:	f007 fb67 	bl	800812e <HAL_I2CEx_ConfigDigitalFilter>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a66:	f000 ffad 	bl	80019c4 <Error_Handler>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200091a4 	.word	0x200091a4
 8000a74:	40005c00 	.word	0x40005c00
 8000a78:	00c0eaff 	.word	0x00c0eaff

08000a7c <QUADSPI_Init>:
  }
}

// QuadSPI Peripheral Initialization
void QUADSPI_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  hqspi.Instance = QUADSPI;
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <QUADSPI_Init+0x50>)
 8000a82:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <QUADSPI_Init+0x54>)
 8000a84:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <QUADSPI_Init+0x50>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <QUADSPI_Init+0x50>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <QUADSPI_Init+0x50>)
 8000a94:	2210      	movs	r2, #16
 8000a96:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <QUADSPI_Init+0x50>)
 8000a9a:	2218      	movs	r2, #24
 8000a9c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <QUADSPI_Init+0x50>)
 8000aa0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000aa4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <QUADSPI_Init+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <QUADSPI_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <QUADSPI_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <QUADSPI_Init+0x50>)
 8000aba:	f007 ff6d 	bl	8008998 <HAL_QSPI_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000ac4:	f000 ff7e 	bl	80019c4 <Error_Handler>
  }

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200098cc 	.word	0x200098cc
 8000ad0:	a0001000 	.word	0xa0001000

08000ad4 <RTC_Init>:

// RTC Peripheral Initialization
void RTC_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b092      	sub	sp, #72	; 0x48
 8000ad8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000ada:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
 8000aea:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000af0:	463b      	mov	r3, r7
 8000af2:	222c      	movs	r2, #44	; 0x2c
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f020 fccc 	bl	8021494 <memset>

  hrtc.Instance = RTC;
 8000afc:	4b46      	ldr	r3, [pc, #280]	; (8000c18 <RTC_Init+0x144>)
 8000afe:	4a47      	ldr	r2, [pc, #284]	; (8000c1c <RTC_Init+0x148>)
 8000b00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b02:	4b45      	ldr	r3, [pc, #276]	; (8000c18 <RTC_Init+0x144>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b08:	4b43      	ldr	r3, [pc, #268]	; (8000c18 <RTC_Init+0x144>)
 8000b0a:	227f      	movs	r2, #127	; 0x7f
 8000b0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b0e:	4b42      	ldr	r3, [pc, #264]	; (8000c18 <RTC_Init+0x144>)
 8000b10:	22ff      	movs	r2, #255	; 0xff
 8000b12:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b14:	4b40      	ldr	r3, [pc, #256]	; (8000c18 <RTC_Init+0x144>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b1a:	4b3f      	ldr	r3, [pc, #252]	; (8000c18 <RTC_Init+0x144>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b20:	4b3d      	ldr	r3, [pc, #244]	; (8000c18 <RTC_Init+0x144>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b26:	483c      	ldr	r0, [pc, #240]	; (8000c18 <RTC_Init+0x144>)
 8000b28:	f009 f9c4 	bl	8009eb4 <HAL_RTC_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <RTC_Init+0x62>
  {
    Error_Handler();
 8000b32:	f000 ff47 	bl	80019c4 <Error_Handler>
  }

  // Initialize RTC and set the Time and Date
  sTime.Hours = 0x0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b54:	2201      	movs	r2, #1
 8000b56:	4619      	mov	r1, r3
 8000b58:	482f      	ldr	r0, [pc, #188]	; (8000c18 <RTC_Init+0x144>)
 8000b5a:	f009 fa3d 	bl	8009fd8 <HAL_RTC_SetTime>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <RTC_Init+0x94>
  {
    Error_Handler();
 8000b64:	f000 ff2e 	bl	80019c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b84:	2201      	movs	r2, #1
 8000b86:	4619      	mov	r1, r3
 8000b88:	4823      	ldr	r0, [pc, #140]	; (8000c18 <RTC_Init+0x144>)
 8000b8a:	f009 fae3 	bl	800a154 <HAL_RTC_SetDate>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <RTC_Init+0xc4>
  {
    Error_Handler();
 8000b94:	f000 ff16 	bl	80019c4 <Error_Handler>
  }

  // Enable Alarm A
  sAlarm.AlarmTime.Hours = 0x0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4812      	ldr	r0, [pc, #72]	; (8000c18 <RTC_Init+0x144>)
 8000bd0:	f009 fb68 	bl	800a2a4 <HAL_RTC_SetAlarm>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <RTC_Init+0x10a>
  {
    Error_Handler();
 8000bda:	f000 fef3 	bl	80019c4 <Error_Handler>
  }

  // Enable Alarm B
  sAlarm.Alarm = RTC_ALARM_B;
 8000bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000be4:	463b      	mov	r3, r7
 8000be6:	2201      	movs	r2, #1
 8000be8:	4619      	mov	r1, r3
 8000bea:	480b      	ldr	r0, [pc, #44]	; (8000c18 <RTC_Init+0x144>)
 8000bec:	f009 fb5a 	bl	800a2a4 <HAL_RTC_SetAlarm>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <RTC_Init+0x126>
  {
    Error_Handler();
 8000bf6:	f000 fee5 	bl	80019c4 <Error_Handler>
  }

  // Enable Time Stamp
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4806      	ldr	r0, [pc, #24]	; (8000c18 <RTC_Init+0x144>)
 8000c00:	f009 fcda 	bl	800a5b8 <HAL_RTCEx_SetTimeStamp>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <RTC_Init+0x13a>
  {
    Error_Handler();
 8000c0a:	f000 fedb 	bl	80019c4 <Error_Handler>
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3748      	adds	r7, #72	; 0x48
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200096d0 	.word	0x200096d0
 8000c1c:	40002800 	.word	0x40002800

08000c20 <SAI2_Init>:

// SAI2 Peripheral Initialization
void SAI2_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000c24:	4b4d      	ldr	r3, [pc, #308]	; (8000d5c <SAI2_Init+0x13c>)
 8000c26:	4a4e      	ldr	r2, [pc, #312]	; (8000d60 <SAI2_Init+0x140>)
 8000c28:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c2a:	4b4c      	ldr	r3, [pc, #304]	; (8000d5c <SAI2_Init+0x13c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c30:	4b4a      	ldr	r3, [pc, #296]	; (8000d5c <SAI2_Init+0x13c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000c36:	4b49      	ldr	r3, [pc, #292]	; (8000d5c <SAI2_Init+0x13c>)
 8000c38:	2240      	movs	r2, #64	; 0x40
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c3c:	4b47      	ldr	r3, [pc, #284]	; (8000d5c <SAI2_Init+0x13c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c42:	4b46      	ldr	r3, [pc, #280]	; (8000d5c <SAI2_Init+0x13c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c48:	4b44      	ldr	r3, [pc, #272]	; (8000d5c <SAI2_Init+0x13c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c4e:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <SAI2_Init+0x13c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c54:	4b41      	ldr	r3, [pc, #260]	; (8000d5c <SAI2_Init+0x13c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c5a:	4b40      	ldr	r3, [pc, #256]	; (8000d5c <SAI2_Init+0x13c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000c60:	4b3e      	ldr	r3, [pc, #248]	; (8000d5c <SAI2_Init+0x13c>)
 8000c62:	4a40      	ldr	r2, [pc, #256]	; (8000d64 <SAI2_Init+0x144>)
 8000c64:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c66:	4b3d      	ldr	r3, [pc, #244]	; (8000d5c <SAI2_Init+0x13c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c6c:	4b3b      	ldr	r3, [pc, #236]	; (8000d5c <SAI2_Init+0x13c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c72:	4b3a      	ldr	r3, [pc, #232]	; (8000d5c <SAI2_Init+0x13c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c78:	4b38      	ldr	r3, [pc, #224]	; (8000d5c <SAI2_Init+0x13c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000c7e:	4b37      	ldr	r3, [pc, #220]	; (8000d5c <SAI2_Init+0x13c>)
 8000c80:	2208      	movs	r2, #8
 8000c82:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000c84:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <SAI2_Init+0x13c>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c8a:	4b34      	ldr	r3, [pc, #208]	; (8000d5c <SAI2_Init+0x13c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000c90:	4b32      	ldr	r3, [pc, #200]	; (8000d5c <SAI2_Init+0x13c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000c96:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <SAI2_Init+0x13c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000c9c:	4b2f      	ldr	r3, [pc, #188]	; (8000d5c <SAI2_Init+0x13c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ca2:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <SAI2_Init+0x13c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000ca8:	4b2c      	ldr	r3, [pc, #176]	; (8000d5c <SAI2_Init+0x13c>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000cae:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <SAI2_Init+0x13c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000cb4:	4829      	ldr	r0, [pc, #164]	; (8000d5c <SAI2_Init+0x13c>)
 8000cb6:	f009 fcd5 	bl	800a664 <HAL_SAI_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SAI2_Init+0xa4>
  {
    Error_Handler();
 8000cc0:	f000 fe80 	bl	80019c4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <SAI2_Init+0x148>)
 8000cc6:	4a29      	ldr	r2, [pc, #164]	; (8000d6c <SAI2_Init+0x14c>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000cca:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <SAI2_Init+0x148>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000cd0:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <SAI2_Init+0x148>)
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000cd6:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <SAI2_Init+0x148>)
 8000cd8:	2240      	movs	r2, #64	; 0x40
 8000cda:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000cdc:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <SAI2_Init+0x148>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <SAI2_Init+0x148>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <SAI2_Init+0x148>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000cee:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <SAI2_Init+0x148>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <SAI2_Init+0x148>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <SAI2_Init+0x148>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <SAI2_Init+0x148>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <SAI2_Init+0x148>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <SAI2_Init+0x148>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <SAI2_Init+0x148>)
 8000d14:	2208      	movs	r2, #8
 8000d16:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <SAI2_Init+0x148>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <SAI2_Init+0x148>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <SAI2_Init+0x148>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <SAI2_Init+0x148>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <SAI2_Init+0x148>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <SAI2_Init+0x148>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <SAI2_Init+0x148>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <SAI2_Init+0x148>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000d48:	4807      	ldr	r0, [pc, #28]	; (8000d68 <SAI2_Init+0x148>)
 8000d4a:	f009 fc8b 	bl	800a664 <HAL_SAI_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SAI2_Init+0x138>
  {
    Error_Handler();
 8000d54:	f000 fe36 	bl	80019c4 <Error_Handler>
  }
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200092ec 	.word	0x200092ec
 8000d60:	40015c04 	.word	0x40015c04
 8000d64:	0002ee00 	.word	0x0002ee00
 8000d68:	20009120 	.word	0x20009120
 8000d6c:	40015c24 	.word	0x40015c24

08000d70 <SDMMC1_SD_Init>:

// SDMMC Peripheral Initialization
void SDMMC1_SD_Init(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  hsd1.Instance = SDMMC1;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <SDMMC1_SD_Init+0x38>)
 8000d76:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <SDMMC1_SD_Init+0x3c>)
 8000d78:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <SDMMC1_SD_Init+0x38>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <SDMMC1_SD_Init+0x38>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <SDMMC1_SD_Init+0x38>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SDMMC1_SD_Init+0x38>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SDMMC1_SD_Init+0x38>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <SDMMC1_SD_Init+0x38>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	200093f0 	.word	0x200093f0
 8000dac:	40012c00 	.word	0x40012c00

08000db0 <SPDIFRX_Init>:

// SPDIF Peripheral Initialization
void SPDIFRX_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  hspdif.Instance = SPDIFRX;
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <SPDIFRX_Init+0x5c>)
 8000db6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000dba:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <SPDIFRX_Init+0x5c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <SPDIFRX_Init+0x5c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <SPDIFRX_Init+0x5c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <SPDIFRX_Init+0x5c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <SPDIFRX_Init+0x5c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <SPDIFRX_Init+0x5c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <SPDIFRX_Init+0x5c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <SPDIFRX_Init+0x5c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <SPDIFRX_Init+0x5c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <SPDIFRX_Init+0x5c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <SPDIFRX_Init+0x5c>)
 8000dfa:	f009 fe65 	bl	800aac8 <HAL_SPDIFRX_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000e04:	f000 fdde 	bl	80019c4 <Error_Handler>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200092a0 	.word	0x200092a0

08000e10 <SPI2_Init>:

// SPI2 Peripheral Initialization
void SPI2_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  hspi2.Instance = SPI2;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <SPI2_Init+0x74>)
 8000e16:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <SPI2_Init+0x78>)
 8000e18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <SPI2_Init+0x74>)
 8000e1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <SPI2_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <SPI2_Init+0x74>)
 8000e2a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e2e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <SPI2_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <SPI2_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <SPI2_Init+0x74>)
 8000e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e42:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <SPI2_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <SPI2_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <SPI2_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <SPI2_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <SPI2_Init+0x74>)
 8000e5e:	2207      	movs	r2, #7
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <SPI2_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <SPI2_Init+0x74>)
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <SPI2_Init+0x74>)
 8000e70:	f009 fe86 	bl	800ab80 <HAL_SPI_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e7a:	f000 fda3 	bl	80019c4 <Error_Handler>
  }
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200091f0 	.word	0x200091f0
 8000e88:	40003800 	.word	0x40003800

08000e8c <TIM1_Init>:

// Timer 1 Peripheral Initialization
void TIM1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b09a      	sub	sp, #104	; 0x68
 8000e90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	615a      	str	r2, [r3, #20]
 8000ebe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	222c      	movs	r2, #44	; 0x2c
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f020 fae4 	bl	8021494 <memset>

  htim1.Instance = TIM1;
 8000ecc:	4b43      	ldr	r3, [pc, #268]	; (8000fdc <TIM1_Init+0x150>)
 8000ece:	4a44      	ldr	r2, [pc, #272]	; (8000fe0 <TIM1_Init+0x154>)
 8000ed0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ed2:	4b42      	ldr	r3, [pc, #264]	; (8000fdc <TIM1_Init+0x150>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed8:	4b40      	ldr	r3, [pc, #256]	; (8000fdc <TIM1_Init+0x150>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ede:	4b3f      	ldr	r3, [pc, #252]	; (8000fdc <TIM1_Init+0x150>)
 8000ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee6:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <TIM1_Init+0x150>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eec:	4b3b      	ldr	r3, [pc, #236]	; (8000fdc <TIM1_Init+0x150>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <TIM1_Init+0x150>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ef8:	4838      	ldr	r0, [pc, #224]	; (8000fdc <TIM1_Init+0x150>)
 8000efa:	f009 feec 	bl	800acd6 <HAL_TIM_Base_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f04:	f000 fd5e 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f12:	4619      	mov	r1, r3
 8000f14:	4831      	ldr	r0, [pc, #196]	; (8000fdc <TIM1_Init+0x150>)
 8000f16:	f00a fa33 	bl	800b380 <HAL_TIM_ConfigClockSource>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <TIM1_Init+0x98>
  {
    Error_Handler();
 8000f20:	f000 fd50 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f24:	482d      	ldr	r0, [pc, #180]	; (8000fdc <TIM1_Init+0x150>)
 8000f26:	f009 ffa5 	bl	800ae74 <HAL_TIM_PWM_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f30:	f000 fd48 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f34:	2300      	movs	r3, #0
 8000f36:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f44:	4619      	mov	r1, r3
 8000f46:	4825      	ldr	r0, [pc, #148]	; (8000fdc <TIM1_Init+0x150>)
 8000f48:	f00a fe94 	bl	800bc74 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <TIM1_Init+0xca>
  {
    Error_Handler();
 8000f52:	f000 fd37 	bl	80019c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f56:	2360      	movs	r3, #96	; 0x60
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f62:	2300      	movs	r3, #0
 8000f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f76:	2200      	movs	r2, #0
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4818      	ldr	r0, [pc, #96]	; (8000fdc <TIM1_Init+0x150>)
 8000f7c:	f00a f8f0 	bl	800b160 <HAL_TIM_PWM_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f86:	f000 fd1d 	bl	80019c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4807      	ldr	r0, [pc, #28]	; (8000fdc <TIM1_Init+0x150>)
 8000fc0:	f00a fee6 	bl	800bd90 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <TIM1_Init+0x142>
  {
    Error_Handler();
 8000fca:	f000 fcfb 	bl	80019c4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000fce:	4803      	ldr	r0, [pc, #12]	; (8000fdc <TIM1_Init+0x150>)
 8000fd0:	f001 f99e 	bl	8002310 <HAL_TIM_MspPostInit>

}
 8000fd4:	bf00      	nop
 8000fd6:	3768      	adds	r7, #104	; 0x68
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200096f0 	.word	0x200096f0
 8000fe0:	40010000 	.word	0x40010000

08000fe4 <TIM2_Init>:

// Timer 2 Peripheral Initialization
void TIM2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08e      	sub	sp, #56	; 0x38
 8000fe8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001004:	463b      	mov	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]
 8001012:	615a      	str	r2, [r3, #20]
 8001014:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001016:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <TIM2_Init+0xe8>)
 8001018:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800101c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800101e:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <TIM2_Init+0xe8>)
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001024:	4b29      	ldr	r3, [pc, #164]	; (80010cc <TIM2_Init+0xe8>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800102a:	4b28      	ldr	r3, [pc, #160]	; (80010cc <TIM2_Init+0xe8>)
 800102c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001030:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <TIM2_Init+0xe8>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <TIM2_Init+0xe8>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800103e:	4823      	ldr	r0, [pc, #140]	; (80010cc <TIM2_Init+0xe8>)
 8001040:	f009 fe49 	bl	800acd6 <HAL_TIM_Base_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <TIM2_Init+0x6a>
  {
    Error_Handler();
 800104a:	f000 fcbb 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001054:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001058:	4619      	mov	r1, r3
 800105a:	481c      	ldr	r0, [pc, #112]	; (80010cc <TIM2_Init+0xe8>)
 800105c:	f00a f990 	bl	800b380 <HAL_TIM_ConfigClockSource>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <TIM2_Init+0x86>
  {
    Error_Handler();
 8001066:	f000 fcad 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800106a:	4818      	ldr	r0, [pc, #96]	; (80010cc <TIM2_Init+0xe8>)
 800106c:	f009 ff02 	bl	800ae74 <HAL_TIM_PWM_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <TIM2_Init+0x96>
  {
    Error_Handler();
 8001076:	f000 fca5 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4810      	ldr	r0, [pc, #64]	; (80010cc <TIM2_Init+0xe8>)
 800108a:	f00a fdf3 	bl	800bc74 <HAL_TIMEx_MasterConfigSynchronization>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <TIM2_Init+0xb4>
  {
    Error_Handler();
 8001094:	f000 fc96 	bl	80019c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001098:	2360      	movs	r3, #96	; 0x60
 800109a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	2200      	movs	r2, #0
 80010ac:	4619      	mov	r1, r3
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <TIM2_Init+0xe8>)
 80010b0:	f00a f856 	bl	800b160 <HAL_TIM_PWM_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <TIM2_Init+0xda>
  {
    Error_Handler();
 80010ba:	f000 fc83 	bl	80019c4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80010be:	4803      	ldr	r0, [pc, #12]	; (80010cc <TIM2_Init+0xe8>)
 80010c0:	f001 f926 	bl	8002310 <HAL_TIM_MspPostInit>
}
 80010c4:	bf00      	nop
 80010c6:	3738      	adds	r7, #56	; 0x38
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20009800 	.word	0x20009800

080010d0 <TIM3_Init>:

// Timer 3 Peripheral Initialization
void TIM3_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08e      	sub	sp, #56	; 0x38
 80010d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f0:	463b      	mov	r3, r7
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
 80010fe:	615a      	str	r2, [r3, #20]
 8001100:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001102:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <TIM3_Init+0xe8>)
 8001104:	4a2d      	ldr	r2, [pc, #180]	; (80011bc <TIM3_Init+0xec>)
 8001106:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001108:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <TIM3_Init+0xe8>)
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110e:	4b2a      	ldr	r3, [pc, #168]	; (80011b8 <TIM3_Init+0xe8>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <TIM3_Init+0xe8>)
 8001116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111c:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <TIM3_Init+0xe8>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001122:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <TIM3_Init+0xe8>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001128:	4823      	ldr	r0, [pc, #140]	; (80011b8 <TIM3_Init+0xe8>)
 800112a:	f009 fdd4 	bl	800acd6 <HAL_TIM_Base_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <TIM3_Init+0x68>
  {
    Error_Handler();
 8001134:	f000 fc46 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800113e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001142:	4619      	mov	r1, r3
 8001144:	481c      	ldr	r0, [pc, #112]	; (80011b8 <TIM3_Init+0xe8>)
 8001146:	f00a f91b 	bl	800b380 <HAL_TIM_ConfigClockSource>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <TIM3_Init+0x84>
  {
    Error_Handler();
 8001150:	f000 fc38 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001154:	4818      	ldr	r0, [pc, #96]	; (80011b8 <TIM3_Init+0xe8>)
 8001156:	f009 fe8d 	bl	800ae74 <HAL_TIM_PWM_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <TIM3_Init+0x94>
  {
    Error_Handler();
 8001160:	f000 fc30 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	4811      	ldr	r0, [pc, #68]	; (80011b8 <TIM3_Init+0xe8>)
 8001174:	f00a fd7e 	bl	800bc74 <HAL_TIMEx_MasterConfigSynchronization>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <TIM3_Init+0xb2>
  {
    Error_Handler();
 800117e:	f000 fc21 	bl	80019c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001182:	2360      	movs	r3, #96	; 0x60
 8001184:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	4619      	mov	r1, r3
 8001198:	4807      	ldr	r0, [pc, #28]	; (80011b8 <TIM3_Init+0xe8>)
 800119a:	f009 ffe1 	bl	800b160 <HAL_TIM_PWM_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <TIM3_Init+0xd8>
  {
    Error_Handler();
 80011a4:	f000 fc0e 	bl	80019c4 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 80011a8:	4803      	ldr	r0, [pc, #12]	; (80011b8 <TIM3_Init+0xe8>)
 80011aa:	f001 f8b1 	bl	8002310 <HAL_TIM_MspPostInit>

}
 80011ae:	bf00      	nop
 80011b0:	3738      	adds	r7, #56	; 0x38
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200094c0 	.word	0x200094c0
 80011bc:	40000400 	.word	0x40000400

080011c0 <TIM5_Init>:

// Timer 5 Peripheral Initialization
void TIM5_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	; 0x38
 80011c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
 80011ee:	615a      	str	r2, [r3, #20]
 80011f0:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 80011f2:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <TIM5_Init+0xe8>)
 80011f4:	4a2d      	ldr	r2, [pc, #180]	; (80012ac <TIM5_Init+0xec>)
 80011f6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80011f8:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <TIM5_Init+0xe8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <TIM5_Init+0xe8>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001204:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <TIM5_Init+0xe8>)
 8001206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800120a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120c:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <TIM5_Init+0xe8>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001212:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <TIM5_Init+0xe8>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001218:	4823      	ldr	r0, [pc, #140]	; (80012a8 <TIM5_Init+0xe8>)
 800121a:	f009 fd5c 	bl	800acd6 <HAL_TIM_Base_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <TIM5_Init+0x68>
  {
    Error_Handler();
 8001224:	f000 fbce 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800122e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001232:	4619      	mov	r1, r3
 8001234:	481c      	ldr	r0, [pc, #112]	; (80012a8 <TIM5_Init+0xe8>)
 8001236:	f00a f8a3 	bl	800b380 <HAL_TIM_ConfigClockSource>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <TIM5_Init+0x84>
  {
    Error_Handler();
 8001240:	f000 fbc0 	bl	80019c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001244:	4818      	ldr	r0, [pc, #96]	; (80012a8 <TIM5_Init+0xe8>)
 8001246:	f009 fe15 	bl	800ae74 <HAL_TIM_PWM_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <TIM5_Init+0x94>
  {
    Error_Handler();
 8001250:	f000 fbb8 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	4811      	ldr	r0, [pc, #68]	; (80012a8 <TIM5_Init+0xe8>)
 8001264:	f00a fd06 	bl	800bc74 <HAL_TIMEx_MasterConfigSynchronization>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <TIM5_Init+0xb2>
  {
    Error_Handler();
 800126e:	f000 fba9 	bl	80019c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001272:	2360      	movs	r3, #96	; 0x60
 8001274:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	220c      	movs	r2, #12
 8001286:	4619      	mov	r1, r3
 8001288:	4807      	ldr	r0, [pc, #28]	; (80012a8 <TIM5_Init+0xe8>)
 800128a:	f009 ff69 	bl	800b160 <HAL_TIM_PWM_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <TIM5_Init+0xd8>
  {
    Error_Handler();
 8001294:	f000 fb96 	bl	80019c4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <TIM5_Init+0xe8>)
 800129a:	f001 f839 	bl	8002310 <HAL_TIM_MspPostInit>
}
 800129e:	bf00      	nop
 80012a0:	3738      	adds	r7, #56	; 0x38
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20009474 	.word	0x20009474
 80012ac:	40000c00 	.word	0x40000c00

080012b0 <TIM8_Init>:

// Timer 8 Peripheral Initialization
void TIM8_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]

  htim8.Instance = TIM8;
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <TIM8_Init+0xa0>)
 80012d0:	4a20      	ldr	r2, [pc, #128]	; (8001354 <TIM8_Init+0xa4>)
 80012d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <TIM8_Init+0xa0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <TIM8_Init+0xa0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <TIM8_Init+0xa0>)
 80012e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <TIM8_Init+0xa0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <TIM8_Init+0xa0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <TIM8_Init+0xa0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80012fa:	4815      	ldr	r0, [pc, #84]	; (8001350 <TIM8_Init+0xa0>)
 80012fc:	f009 fceb 	bl	800acd6 <HAL_TIM_Base_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <TIM8_Init+0x5a>
  {
    Error_Handler();
 8001306:	f000 fb5d 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	4619      	mov	r1, r3
 8001316:	480e      	ldr	r0, [pc, #56]	; (8001350 <TIM8_Init+0xa0>)
 8001318:	f00a f832 	bl	800b380 <HAL_TIM_ConfigClockSource>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <TIM8_Init+0x76>
  {
    Error_Handler();
 8001322:	f000 fb4f 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	4619      	mov	r1, r3
 8001336:	4806      	ldr	r0, [pc, #24]	; (8001350 <TIM8_Init+0xa0>)
 8001338:	f00a fc9c 	bl	800bc74 <HAL_TIMEx_MasterConfigSynchronization>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <TIM8_Init+0x96>
  {
    Error_Handler();
 8001342:	f000 fb3f 	bl	80019c4 <Error_Handler>
  }
}
 8001346:	bf00      	nop
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20009254 	.word	0x20009254
 8001354:	40010400 	.word	0x40010400

08001358 <TIM12_Init>:

// Timer 12 Peripheral Initialization
void TIM12_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	615a      	str	r2, [r3, #20]
 800136e:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8001370:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <TIM12_Init+0x84>)
 8001372:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <TIM12_Init+0x88>)
 8001374:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <TIM12_Init+0x84>)
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <TIM12_Init+0x84>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <TIM12_Init+0x84>)
 8001384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001388:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <TIM12_Init+0x84>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <TIM12_Init+0x84>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001396:	4811      	ldr	r0, [pc, #68]	; (80013dc <TIM12_Init+0x84>)
 8001398:	f009 fd6c 	bl	800ae74 <HAL_TIM_PWM_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <TIM12_Init+0x4e>
  {
    Error_Handler();
 80013a2:	f000 fb0f 	bl	80019c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a6:	2360      	movs	r3, #96	; 0x60
 80013a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	4807      	ldr	r0, [pc, #28]	; (80013dc <TIM12_Init+0x84>)
 80013be:	f009 fecf 	bl	800b160 <HAL_TIM_PWM_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <TIM12_Init+0x74>
  {
    Error_Handler();
 80013c8:	f000 fafc 	bl	80019c4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 80013cc:	4803      	ldr	r0, [pc, #12]	; (80013dc <TIM12_Init+0x84>)
 80013ce:	f000 ff9f 	bl	8002310 <HAL_TIM_MspPostInit>

}
 80013d2:	bf00      	nop
 80013d4:	3720      	adds	r7, #32
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000984c 	.word	0x2000984c
 80013e0:	40001800 	.word	0x40001800

080013e4 <USART1_UART_Init>:

// USART1 Peripheral Initialization
void USART1_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <USART1_UART_Init+0x58>)
 80013ea:	4a15      	ldr	r2, [pc, #84]	; (8001440 <USART1_UART_Init+0x5c>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <USART1_UART_Init+0x58>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <USART1_UART_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <USART1_UART_Init+0x58>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <USART1_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <USART1_UART_Init+0x58>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <USART1_UART_Init+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <USART1_UART_Init+0x58>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <USART1_UART_Init+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <USART1_UART_Init+0x58>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <USART1_UART_Init+0x58>)
 8001428:	f00a fd4e 	bl	800bec8 <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001432:	f000 fac7 	bl	80019c4 <Error_Handler>
  }
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000964c 	.word	0x2000964c
 8001440:	40011000 	.word	0x40011000

08001444 <USART6_UART_Init>:

// USART6 Peripheral Initialization
void USART6_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  huart6.Instance = USART6;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <USART6_UART_Init+0x58>)
 800144a:	4a15      	ldr	r2, [pc, #84]	; (80014a0 <USART6_UART_Init+0x5c>)
 800144c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <USART6_UART_Init+0x58>)
 8001450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001454:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <USART6_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <USART6_UART_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <USART6_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <USART6_UART_Init+0x58>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <USART6_UART_Init+0x58>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <USART6_UART_Init+0x58>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <USART6_UART_Init+0x58>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <USART6_UART_Init+0x58>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <USART6_UART_Init+0x58>)
 8001488:	f00a fd1e 	bl	800bec8 <HAL_UART_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001492:	f000 fa97 	bl	80019c4 <Error_Handler>
  }
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000973c 	.word	0x2000973c
 80014a0:	40011400 	.word	0x40011400

080014a4 <FMC_Init>:

// Initialize Flexible Memory Controller (FMC)
void FMC_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	615a      	str	r2, [r3, #20]
 80014ba:	619a      	str	r2, [r3, #24]

  // SDRAM1 memory initialization sequence
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <FMC_Init+0x98>)
 80014be:	4a20      	ldr	r2, [pc, #128]	; (8001540 <FMC_Init+0x9c>)
 80014c0:	601a      	str	r2, [r3, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80014c2:	4b1e      	ldr	r3, [pc, #120]	; (800153c <FMC_Init+0x98>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80014c8:	4b1c      	ldr	r3, [pc, #112]	; (800153c <FMC_Init+0x98>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <FMC_Init+0x98>)
 80014d0:	2204      	movs	r2, #4
 80014d2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <FMC_Init+0x98>)
 80014d6:	2210      	movs	r2, #16
 80014d8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <FMC_Init+0x98>)
 80014dc:	2240      	movs	r2, #64	; 0x40
 80014de:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <FMC_Init+0x98>)
 80014e2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80014e6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <FMC_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <FMC_Init+0x98>)
 80014f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014f4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <FMC_Init+0x98>)
 80014f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <FMC_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	629a      	str	r2, [r3, #40]	; 0x28

  // SDRAM Timings
  SdramTiming.LoadToActiveDelay = 2;
 8001504:	2302      	movs	r3, #2
 8001506:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001508:	2307      	movs	r3, #7
 800150a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800150c:	2304      	movs	r3, #4
 800150e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001510:	2307      	movs	r3, #7
 8001512:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001514:	2303      	movs	r3, #3
 8001516:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001518:	2302      	movs	r3, #2
 800151a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800151c:	2302      	movs	r3, #2
 800151e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <FMC_Init+0x98>)
 8001526:	f009 fa4f 	bl	800a9c8 <HAL_SDRAM_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <FMC_Init+0x90>
  {
    Error_Handler( );
 8001530:	f000 fa48 	bl	80019c4 <Error_Handler>
  }
}
 8001534:	bf00      	nop
 8001536:	3720      	adds	r7, #32
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20009898 	.word	0x20009898
 8001540:	a0000140 	.word	0xa0000140

08001544 <GPIO_Init>:

// GPIO Initialization
void GPIO_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b090      	sub	sp, #64	; 0x40
 8001548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]

  // Enable GPIO Clocks
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800155a:	4baf      	ldr	r3, [pc, #700]	; (8001818 <GPIO_Init+0x2d4>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4aae      	ldr	r2, [pc, #696]	; (8001818 <GPIO_Init+0x2d4>)
 8001560:	f043 0310 	orr.w	r3, r3, #16
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4bac      	ldr	r3, [pc, #688]	; (8001818 <GPIO_Init+0x2d4>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001570:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001572:	4ba9      	ldr	r3, [pc, #676]	; (8001818 <GPIO_Init+0x2d4>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4aa8      	ldr	r2, [pc, #672]	; (8001818 <GPIO_Init+0x2d4>)
 8001578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4ba6      	ldr	r3, [pc, #664]	; (8001818 <GPIO_Init+0x2d4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	4ba3      	ldr	r3, [pc, #652]	; (8001818 <GPIO_Init+0x2d4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4aa2      	ldr	r2, [pc, #648]	; (8001818 <GPIO_Init+0x2d4>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4ba0      	ldr	r3, [pc, #640]	; (8001818 <GPIO_Init+0x2d4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	623b      	str	r3, [r7, #32]
 80015a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a2:	4b9d      	ldr	r3, [pc, #628]	; (8001818 <GPIO_Init+0x2d4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a9c      	ldr	r2, [pc, #624]	; (8001818 <GPIO_Init+0x2d4>)
 80015a8:	f043 0308 	orr.w	r3, r3, #8
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b9a      	ldr	r3, [pc, #616]	; (8001818 <GPIO_Init+0x2d4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ba:	4b97      	ldr	r3, [pc, #604]	; (8001818 <GPIO_Init+0x2d4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a96      	ldr	r2, [pc, #600]	; (8001818 <GPIO_Init+0x2d4>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b94      	ldr	r3, [pc, #592]	; (8001818 <GPIO_Init+0x2d4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	61bb      	str	r3, [r7, #24]
 80015d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	4b91      	ldr	r3, [pc, #580]	; (8001818 <GPIO_Init+0x2d4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a90      	ldr	r2, [pc, #576]	; (8001818 <GPIO_Init+0x2d4>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b8e      	ldr	r3, [pc, #568]	; (8001818 <GPIO_Init+0x2d4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015ea:	4b8b      	ldr	r3, [pc, #556]	; (8001818 <GPIO_Init+0x2d4>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a8a      	ldr	r2, [pc, #552]	; (8001818 <GPIO_Init+0x2d4>)
 80015f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b88      	ldr	r3, [pc, #544]	; (8001818 <GPIO_Init+0x2d4>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001602:	4b85      	ldr	r3, [pc, #532]	; (8001818 <GPIO_Init+0x2d4>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a84      	ldr	r2, [pc, #528]	; (8001818 <GPIO_Init+0x2d4>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b82      	ldr	r3, [pc, #520]	; (8001818 <GPIO_Init+0x2d4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800161a:	4b7f      	ldr	r3, [pc, #508]	; (8001818 <GPIO_Init+0x2d4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a7e      	ldr	r2, [pc, #504]	; (8001818 <GPIO_Init+0x2d4>)
 8001620:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b7c      	ldr	r3, [pc, #496]	; (8001818 <GPIO_Init+0x2d4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001632:	4b79      	ldr	r3, [pc, #484]	; (8001818 <GPIO_Init+0x2d4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a78      	ldr	r2, [pc, #480]	; (8001818 <GPIO_Init+0x2d4>)
 8001638:	f043 0320 	orr.w	r3, r3, #32
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b76      	ldr	r3, [pc, #472]	; (8001818 <GPIO_Init+0x2d4>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0320 	and.w	r3, r3, #32
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800164a:	4b73      	ldr	r3, [pc, #460]	; (8001818 <GPIO_Init+0x2d4>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a72      	ldr	r2, [pc, #456]	; (8001818 <GPIO_Init+0x2d4>)
 8001650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b70      	ldr	r3, [pc, #448]	; (8001818 <GPIO_Init+0x2d4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]

  // Configure GPIO pin settings
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001662:	2201      	movs	r2, #1
 8001664:	2120      	movs	r1, #32
 8001666:	486d      	ldr	r0, [pc, #436]	; (800181c <GPIO_Init+0x2d8>)
 8001668:	f004 ff04 	bl	8006474 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	210c      	movs	r1, #12
 8001670:	486b      	ldr	r0, [pc, #428]	; (8001820 <GPIO_Init+0x2dc>)
 8001672:	f004 feff 	bl	8006474 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001676:	2201      	movs	r2, #1
 8001678:	2108      	movs	r1, #8
 800167a:	486a      	ldr	r0, [pc, #424]	; (8001824 <GPIO_Init+0x2e0>)
 800167c:	f004 fefa 	bl	8006474 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001680:	2201      	movs	r2, #1
 8001682:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001686:	4866      	ldr	r0, [pc, #408]	; (8001820 <GPIO_Init+0x2dc>)
 8001688:	f004 fef4 	bl	8006474 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001692:	4865      	ldr	r0, [pc, #404]	; (8001828 <GPIO_Init+0x2e4>)
 8001694:	f004 feee 	bl	8006474 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	21c8      	movs	r1, #200	; 0xc8
 800169c:	4863      	ldr	r0, [pc, #396]	; (800182c <GPIO_Init+0x2e8>)
 800169e:	f004 fee9 	bl	8006474 <HAL_GPIO_WritePin>

  // Configure USB OTG and ULPI Pins
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80016a2:	2308      	movs	r3, #8
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a6:	2300      	movs	r3, #0
 80016a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b2:	4619      	mov	r1, r3
 80016b4:	485e      	ldr	r0, [pc, #376]	; (8001830 <GPIO_Init+0x2ec>)
 80016b6:	f004 fd33 	bl	8006120 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80016ba:	f643 4323 	movw	r3, #15395	; 0x3c23
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016cc:	230a      	movs	r3, #10
 80016ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d4:	4619      	mov	r1, r3
 80016d6:	4857      	ldr	r0, [pc, #348]	; (8001834 <GPIO_Init+0x2f0>)
 80016d8:	f004 fd22 	bl	8006120 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80016dc:	2310      	movs	r3, #16
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016ec:	230a      	movs	r3, #10
 80016ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80016f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f4:	4619      	mov	r1, r3
 80016f6:	484c      	ldr	r0, [pc, #304]	; (8001828 <GPIO_Init+0x2e4>)
 80016f8:	f004 fd12 	bl	8006120 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016fc:	2310      	movs	r3, #16
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800170c:	4619      	mov	r1, r3
 800170e:	4843      	ldr	r0, [pc, #268]	; (800181c <GPIO_Init+0x2d8>)
 8001710:	f004 fd06 	bl	8006120 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001726:	4619      	mov	r1, r3
 8001728:	4843      	ldr	r0, [pc, #268]	; (8001838 <GPIO_Init+0x2f4>)
 800172a:	f004 fcf9 	bl	8006120 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800172e:	2320      	movs	r3, #32
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800173e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001742:	4619      	mov	r1, r3
 8001744:	4835      	ldr	r0, [pc, #212]	; (800181c <GPIO_Init+0x2d8>)
 8001746:	f004 fceb 	bl	8006120 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800174a:	2328      	movs	r3, #40	; 0x28
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800175a:	230a      	movs	r3, #10
 800175c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001762:	4619      	mov	r1, r3
 8001764:	4835      	ldr	r0, [pc, #212]	; (800183c <GPIO_Init+0x2f8>)
 8001766:	f004 fcdb 	bl	8006120 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800176a:	2305      	movs	r3, #5
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800177a:	230a      	movs	r3, #10
 800177c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001782:	4619      	mov	r1, r3
 8001784:	482e      	ldr	r0, [pc, #184]	; (8001840 <GPIO_Init+0x2fc>)
 8001786:	f004 fccb 	bl	8006120 <HAL_GPIO_Init>

  // Configure Audio Int Pin
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800178a:	2340      	movs	r3, #64	; 0x40
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <GPIO_Init+0x300>)
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800179a:	4619      	mov	r1, r3
 800179c:	481f      	ldr	r0, [pc, #124]	; (800181c <GPIO_Init+0x2d8>)
 800179e:	f004 fcbf 	bl	8006120 <HAL_GPIO_Init>

  // Configure Arduino and LCD Disp Pin
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80017a2:	f241 030c 	movw	r3, #4108	; 0x100c
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b8:	4619      	mov	r1, r3
 80017ba:	4819      	ldr	r0, [pc, #100]	; (8001820 <GPIO_Init+0x2dc>)
 80017bc:	f004 fcb0 	bl	8006120 <HAL_GPIO_Init>

  // Configure uSD Card Detect Pin
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80017c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c6:	2300      	movs	r3, #0
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d2:	4619      	mov	r1, r3
 80017d4:	481a      	ldr	r0, [pc, #104]	; (8001840 <GPIO_Init+0x2fc>)
 80017d6:	f004 fca3 	bl	8006120 <HAL_GPIO_Init>

  // Configure LCD Backlight Control Pin
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80017da:	2308      	movs	r3, #8
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017de:	2301      	movs	r3, #1
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ee:	4619      	mov	r1, r3
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <GPIO_Init+0x2e0>)
 80017f2:	f004 fc95 	bl	8006120 <HAL_GPIO_Init>

  // Configure TP3 and TP1 Test Points
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80017f6:	f248 0304 	movw	r3, #32772	; 0x8004
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fc:	2300      	movs	r3, #0
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001808:	4619      	mov	r1, r3
 800180a:	4807      	ldr	r0, [pc, #28]	; (8001828 <GPIO_Init+0x2e4>)
 800180c:	f004 fc88 	bl	8006120 <HAL_GPIO_Init>

  // Configure DCMI Power Enable pin
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001814:	e018      	b.n	8001848 <GPIO_Init+0x304>
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800
 800181c:	40020c00 	.word	0x40020c00
 8001820:	40022000 	.word	0x40022000
 8001824:	40022800 	.word	0x40022800
 8001828:	40021c00 	.word	0x40021c00
 800182c:	40021800 	.word	0x40021800
 8001830:	40021000 	.word	0x40021000
 8001834:	40020400 	.word	0x40020400
 8001838:	40022400 	.word	0x40022400
 800183c:	40020000 	.word	0x40020000
 8001840:	40020800 	.word	0x40020800
 8001844:	10120000 	.word	0x10120000
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185a:	4619      	mov	r1, r3
 800185c:	4816      	ldr	r0, [pc, #88]	; (80018b8 <GPIO_Init+0x374>)
 800185e:	f004 fc5f 	bl	8006120 <HAL_GPIO_Init>

  // Configure LCD Int Pin
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <GPIO_Init+0x378>)
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001874:	4619      	mov	r1, r3
 8001876:	4812      	ldr	r0, [pc, #72]	; (80018c0 <GPIO_Init+0x37c>)
 8001878:	f004 fc52 	bl	8006120 <HAL_GPIO_Init>

  // Configure Arduino Pins
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800187c:	23c8      	movs	r3, #200	; 0xc8
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800188c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001890:	4619      	mov	r1, r3
 8001892:	480c      	ldr	r0, [pc, #48]	; (80018c4 <GPIO_Init+0x380>)
 8001894:	f004 fc44 	bl	8006120 <HAL_GPIO_Init>

  // Configure Ethernet RMII pin
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001898:	2304      	movs	r3, #4
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189c:	2300      	movs	r3, #0
 800189e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a8:	4619      	mov	r1, r3
 80018aa:	4806      	ldr	r0, [pc, #24]	; (80018c4 <GPIO_Init+0x380>)
 80018ac:	f004 fc38 	bl	8006120 <HAL_GPIO_Init>

}
 80018b0:	bf00      	nop
 80018b2:	3740      	adds	r7, #64	; 0x40
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021c00 	.word	0x40021c00
 80018bc:	10120000 	.word	0x10120000
 80018c0:	40022000 	.word	0x40022000
 80018c4:	40021800 	.word	0x40021800

080018c8 <main>:
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };

int main(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  // Reset of all peripherals, Initializes the Flash interface and the Systick.
  HAL_Init();
 80018cc:	f002 f82c 	bl	8003928 <HAL_Init>

  // Initialize System Clock and hardware peripherals
  hw_init();
 80018d0:	f7fe fe87 	bl	80005e2 <hw_init>

  // Initialize RTOS Kernel
  osKernelInitialize();
 80018d4:	f00e fd92 	bl	80103fc <osKernelInitialize>

  // Definition of Threads
  defaultTaskHandle = osThreadNew(StartThread, NULL, &defaultTask_attributes);
 80018d8:	4a09      	ldr	r2, [pc, #36]	; (8001900 <main+0x38>)
 80018da:	2100      	movs	r1, #0
 80018dc:	4809      	ldr	r0, [pc, #36]	; (8001904 <main+0x3c>)
 80018de:	f00e fe1f 	bl	8010520 <osThreadNew>
 80018e2:	4602      	mov	r2, r0
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <main+0x40>)
 80018e6:	601a      	str	r2, [r3, #0]
  watchdogTaskHandle = osThreadNew(WatchdogThread, NULL, &watchdogTask_attributes);
 80018e8:	4a08      	ldr	r2, [pc, #32]	; (800190c <main+0x44>)
 80018ea:	2100      	movs	r1, #0
 80018ec:	4808      	ldr	r0, [pc, #32]	; (8001910 <main+0x48>)
 80018ee:	f00e fe17 	bl	8010520 <osThreadNew>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <main+0x4c>)
 80018f6:	601a      	str	r2, [r3, #0]

  // Start RTOS Kernel
  osKernelStart();
 80018f8:	f00e fdb4 	bl	8010464 <osKernelStart>

  // We should never get here as control is now taken by the scheduler
  for( ;; );
 80018fc:	e7fe      	b.n	80018fc <main+0x34>
 80018fe:	bf00      	nop
 8001900:	080253c0 	.word	0x080253c0
 8001904:	08001919 	.word	0x08001919
 8001908:	20009918 	.word	0x20009918
 800190c:	080253e4 	.word	0x080253e4
 8001910:	08001985 	.word	0x08001985
 8001914:	2000991c 	.word	0x2000991c

08001918 <StartThread>:

}

// Default Start Thread
void StartThread(void *argument)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
   // Initialize LCD
   BSP_LCD_Init();
 8001920:	f001 f8de 	bl	8002ae0 <BSP_LCD_Init>
   BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 8001924:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001928:	2001      	movs	r0, #1
 800192a:	f001 f971 	bl	8002c10 <BSP_LCD_LayerDefaultInit>

   // Set LCD Foreground Layer
   BSP_LCD_SelectLayer(1);
 800192e:	2001      	movs	r0, #1
 8001930:	f001 f9ce 	bl	8002cd0 <BSP_LCD_SelectLayer>

   // Set LCD Default Font
   BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001934:	480d      	ldr	r0, [pc, #52]	; (800196c <StartThread+0x54>)
 8001936:	f001 fa0d 	bl	8002d54 <BSP_LCD_SetFont>

   // Initialize LCD Log module
   LCD_LOG_Init();
 800193a:	f01f fb29 	bl	8020f90 <LCD_LOG_Init>

   LCD_LOG_SetHeader((uint8_t *)"HackerspaceSG Lighting Controller");
 800193e:	480c      	ldr	r0, [pc, #48]	; (8001970 <StartThread+0x58>)
 8001940:	f01f fb70 	bl	8021024 <LCD_LOG_SetHeader>
   LCD_LOG_SetFooter((uint8_t *)"STM32746G-DISCO board");
 8001944:	480b      	ldr	r0, [pc, #44]	; (8001974 <StartThread+0x5c>)
 8001946:	f01f fba9 	bl	802109c <LCD_LOG_SetFooter>

   LCD_UsrLog ((char *)"  State: Ethernet Initialization ...\n");
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <StartThread+0x60>)
 800194c:	4a0b      	ldr	r2, [pc, #44]	; (800197c <StartThread+0x64>)
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	480b      	ldr	r0, [pc, #44]	; (8001980 <StartThread+0x68>)
 8001952:	f01f fec3 	bl	80216dc <puts>

   // Initialize USB host and lwIP stack
   MX_USB_HOST_Init();
 8001956:	f01f f827 	bl	80209a8 <MX_USB_HOST_Init>
   MX_LWIP_Init();
 800195a:	f00b ff37 	bl	800d7cc <MX_LWIP_Init>


   osThreadTerminate(NULL);
 800195e:	2000      	movs	r0, #0
 8001960:	f00e fe84 	bl	801066c <osThreadTerminate>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000054 	.word	0x20000054
 8001970:	080223e0 	.word	0x080223e0
 8001974:	08022404 	.word	0x08022404
 8001978:	200146f0 	.word	0x200146f0
 800197c:	ff000080 	.word	0xff000080
 8001980:	0802241c 	.word	0x0802241c

08001984 <WatchdogThread>:

// Thread to feed the watchdog
void WatchdogThread(void *argument)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
   while (1)
   {
	   HAL_IWDG_Refresh(&hiwdg);
 800198c:	4803      	ldr	r0, [pc, #12]	; (800199c <WatchdogThread+0x18>)
 800198e:	f006 fc1a 	bl	80081c6 <HAL_IWDG_Refresh>
	   osDelay(300);
 8001992:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001996:	f00e fea9 	bl	80106ec <osDelay>
	   HAL_IWDG_Refresh(&hiwdg);
 800199a:	e7f7      	b.n	800198c <WatchdogThread+0x8>
 800199c:	200093bc 	.word	0x200093bc

080019a0 <HAL_TIM_PeriodElapsedCallback>:
   }
}

// Timer Callback for Timer 6
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 if (htim->Instance == TIM6) {
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d101      	bne.n	80019b6 <HAL_TIM_PeriodElapsedCallback+0x16>
   HAL_IncTick();
 80019b2:	f001 ffc7 	bl	8003944 <HAL_IncTick>
 }
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40001000 	.word	0x40001000

080019c4 <Error_Handler>:

// Error Handler in case of failure
void Error_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <Error_Handler+0x4>
	...

080019cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_MspInit+0x4c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a10      	ldr	r2, [pc, #64]	; (8001a18 <HAL_MspInit+0x4c>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <HAL_MspInit+0x4c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_MspInit+0x4c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <HAL_MspInit+0x4c>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_MspInit+0x4c>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	210f      	movs	r1, #15
 8001a06:	f06f 0001 	mvn.w	r0, #1
 8001a0a:	f002 fb1d 	bl	8004048 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800

08001a1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a21      	ldr	r2, [pc, #132]	; (8001ac0 <HAL_ADC_MspInit+0xa4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d13c      	bne.n	8001ab8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <HAL_ADC_MspInit+0xa8>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	4a20      	ldr	r2, [pc, #128]	; (8001ac4 <HAL_ADC_MspInit+0xa8>)
 8001a44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a48:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <HAL_ADC_MspInit+0xa8>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_ADC_MspInit+0xa8>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a1a      	ldr	r2, [pc, #104]	; (8001ac4 <HAL_ADC_MspInit+0xa8>)
 8001a5c:	f043 0320 	orr.w	r3, r3, #32
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_ADC_MspInit+0xa8>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0320 	and.w	r3, r3, #32
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_ADC_MspInit+0xa8>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <HAL_ADC_MspInit+0xa8>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_ADC_MspInit+0xa8>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001a86:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001a8a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480b      	ldr	r0, [pc, #44]	; (8001ac8 <HAL_ADC_MspInit+0xac>)
 8001a9c:	f004 fb40 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4806      	ldr	r0, [pc, #24]	; (8001acc <HAL_ADC_MspInit+0xb0>)
 8001ab4:	f004 fb34 	bl	8006120 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ab8:	bf00      	nop
 8001aba:	3728      	adds	r7, #40	; 0x28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40012200 	.word	0x40012200
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40021400 	.word	0x40021400
 8001acc:	40020000 	.word	0x40020000

08001ad0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <HAL_CRC_MspInit+0x38>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d10b      	bne.n	8001afa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_CRC_MspInit+0x3c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a09      	ldr	r2, [pc, #36]	; (8001b0c <HAL_CRC_MspInit+0x3c>)
 8001ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <HAL_CRC_MspInit+0x3c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023000 	.word	0x40023000
 8001b0c:	40023800 	.word	0x40023800

08001b10 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08e      	sub	sp, #56	; 0x38
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a50      	ldr	r2, [pc, #320]	; (8001c70 <HAL_DCMI_MspInit+0x160>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	f040 809a 	bne.w	8001c68 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001b34:	4b4f      	ldr	r3, [pc, #316]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b38:	4a4e      	ldr	r2, [pc, #312]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6353      	str	r3, [r2, #52]	; 0x34
 8001b40:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	623b      	str	r3, [r7, #32]
 8001b4a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b4c:	4b49      	ldr	r3, [pc, #292]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	4a48      	ldr	r2, [pc, #288]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001b52:	f043 0310 	orr.w	r3, r3, #16
 8001b56:	6313      	str	r3, [r2, #48]	; 0x30
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b64:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	4a42      	ldr	r2, [pc, #264]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001b6a:	f043 0308 	orr.w	r3, r3, #8
 8001b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b70:	4b40      	ldr	r3, [pc, #256]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b7c:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	4a3c      	ldr	r2, [pc, #240]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b86:	6313      	str	r3, [r2, #48]	; 0x30
 8001b88:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b94:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	4a36      	ldr	r2, [pc, #216]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba0:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bac:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	4a30      	ldr	r2, [pc, #192]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb8:	4b2e      	ldr	r3, [pc, #184]	; (8001c74 <HAL_DCMI_MspInit+0x164>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001bc4:	2360      	movs	r3, #96	; 0x60
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bd4:	230d      	movs	r3, #13
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4826      	ldr	r0, [pc, #152]	; (8001c78 <HAL_DCMI_MspInit+0x168>)
 8001be0:	f004 fa9e 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001be4:	2308      	movs	r3, #8
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bf4:	230d      	movs	r3, #13
 8001bf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	481f      	ldr	r0, [pc, #124]	; (8001c7c <HAL_DCMI_MspInit+0x16c>)
 8001c00:	f004 fa8e 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c16:	230d      	movs	r3, #13
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4817      	ldr	r0, [pc, #92]	; (8001c80 <HAL_DCMI_MspInit+0x170>)
 8001c22:	f004 fa7d 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001c26:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c38:	230d      	movs	r3, #13
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c40:	4619      	mov	r1, r3
 8001c42:	4810      	ldr	r0, [pc, #64]	; (8001c84 <HAL_DCMI_MspInit+0x174>)
 8001c44:	f004 fa6c 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001c48:	2350      	movs	r3, #80	; 0x50
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c58:	230d      	movs	r3, #13
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c60:	4619      	mov	r1, r3
 8001c62:	4809      	ldr	r0, [pc, #36]	; (8001c88 <HAL_DCMI_MspInit+0x178>)
 8001c64:	f004 fa5c 	bl	8006120 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001c68:	bf00      	nop
 8001c6a:	3738      	adds	r7, #56	; 0x38
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	50050000 	.word	0x50050000
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40020c00 	.word	0x40020c00
 8001c80:	40021800 	.word	0x40021800
 8001c84:	40021c00 	.word	0x40021c00
 8001c88:	40020000 	.word	0x40020000

08001c8c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <HAL_DMA2D_MspInit+0x44>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d113      	bne.n	8001cc6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_DMA2D_MspInit+0x48>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a0c      	ldr	r2, [pc, #48]	; (8001cd4 <HAL_DMA2D_MspInit+0x48>)
 8001ca4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_DMA2D_MspInit+0x48>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2105      	movs	r1, #5
 8001cba:	205a      	movs	r0, #90	; 0x5a
 8001cbc:	f002 f9c4 	bl	8004048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001cc0:	205a      	movs	r0, #90	; 0x5a
 8001cc2:	f002 f9dd 	bl	8004080 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	4002b000 	.word	0x4002b000
 8001cd4:	40023800 	.word	0x40023800

08001cd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08c      	sub	sp, #48	; 0x30
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a2f      	ldr	r2, [pc, #188]	; (8001db4 <HAL_I2C_MspInit+0xdc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d129      	bne.n	8001d4e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfa:	4b2f      	ldr	r3, [pc, #188]	; (8001db8 <HAL_I2C_MspInit+0xe0>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a2e      	ldr	r2, [pc, #184]	; (8001db8 <HAL_I2C_MspInit+0xe0>)
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b2c      	ldr	r3, [pc, #176]	; (8001db8 <HAL_I2C_MspInit+0xe0>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001d12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d18:	2312      	movs	r3, #18
 8001d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d24:	2304      	movs	r3, #4
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d28:	f107 031c 	add.w	r3, r7, #28
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4823      	ldr	r0, [pc, #140]	; (8001dbc <HAL_I2C_MspInit+0xe4>)
 8001d30:	f004 f9f6 	bl	8006120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d34:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_I2C_MspInit+0xe0>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <HAL_I2C_MspInit+0xe0>)
 8001d3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_I2C_MspInit+0xe0>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d4c:	e02d      	b.n	8001daa <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <HAL_I2C_MspInit+0xe8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d128      	bne.n	8001daa <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <HAL_I2C_MspInit+0xe0>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	4a16      	ldr	r2, [pc, #88]	; (8001db8 <HAL_I2C_MspInit+0xe0>)
 8001d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d62:	6313      	str	r3, [r2, #48]	; 0x30
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_I2C_MspInit+0xe0>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001d70:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d76:	2312      	movs	r3, #18
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d82:	2304      	movs	r3, #4
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <HAL_I2C_MspInit+0xec>)
 8001d8e:	f004 f9c7 	bl	8006120 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_I2C_MspInit+0xe0>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <HAL_I2C_MspInit+0xe0>)
 8001d98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_I2C_MspInit+0xe0>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
}
 8001daa:	bf00      	nop
 8001dac:	3730      	adds	r7, #48	; 0x30
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40005400 	.word	0x40005400
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	40005c00 	.word	0x40005c00
 8001dc4:	40021c00 	.word	0x40021c00

08001dc8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08e      	sub	sp, #56	; 0x38
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a55      	ldr	r2, [pc, #340]	; (8001f3c <HAL_LTDC_MspInit+0x174>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	f040 80a3 	bne.w	8001f32 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001dec:	4b54      	ldr	r3, [pc, #336]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	4a53      	ldr	r2, [pc, #332]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001df2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001df6:	6453      	str	r3, [r2, #68]	; 0x44
 8001df8:	4b51      	ldr	r3, [pc, #324]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e00:	623b      	str	r3, [r7, #32]
 8001e02:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e04:	4b4e      	ldr	r3, [pc, #312]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	4a4d      	ldr	r2, [pc, #308]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001e0a:	f043 0310 	orr.w	r3, r3, #16
 8001e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e10:	4b4b      	ldr	r3, [pc, #300]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e1c:	4b48      	ldr	r3, [pc, #288]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	4a47      	ldr	r2, [pc, #284]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e26:	6313      	str	r3, [r2, #48]	; 0x30
 8001e28:	4b45      	ldr	r3, [pc, #276]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001e34:	4b42      	ldr	r3, [pc, #264]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	4a41      	ldr	r2, [pc, #260]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e40:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e4c:	4b3c      	ldr	r3, [pc, #240]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	4a3b      	ldr	r2, [pc, #236]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e56:	6313      	str	r3, [r2, #48]	; 0x30
 8001e58:	4b39      	ldr	r3, [pc, #228]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	4a35      	ldr	r2, [pc, #212]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e70:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <HAL_LTDC_MspInit+0x178>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001e7c:	2310      	movs	r3, #16
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e8c:	230e      	movs	r3, #14
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e94:	4619      	mov	r1, r3
 8001e96:	482b      	ldr	r0, [pc, #172]	; (8001f44 <HAL_LTDC_MspInit+0x17c>)
 8001e98:	f004 f942 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001e9c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eae:	230e      	movs	r3, #14
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4823      	ldr	r0, [pc, #140]	; (8001f48 <HAL_LTDC_MspInit+0x180>)
 8001eba:	f004 f931 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001ebe:	23f7      	movs	r3, #247	; 0xf7
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ece:	230e      	movs	r3, #14
 8001ed0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	481c      	ldr	r0, [pc, #112]	; (8001f4c <HAL_LTDC_MspInit+0x184>)
 8001eda:	f004 f921 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ef0:	2309      	movs	r3, #9
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4815      	ldr	r0, [pc, #84]	; (8001f50 <HAL_LTDC_MspInit+0x188>)
 8001efc:	f004 f910 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001f00:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f12:	230e      	movs	r3, #14
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	480d      	ldr	r0, [pc, #52]	; (8001f54 <HAL_LTDC_MspInit+0x18c>)
 8001f1e:	f004 f8ff 	bl	8006120 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2105      	movs	r1, #5
 8001f26:	2058      	movs	r0, #88	; 0x58
 8001f28:	f002 f88e 	bl	8004048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001f2c:	2058      	movs	r0, #88	; 0x58
 8001f2e:	f002 f8a7 	bl	8004080 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001f32:	bf00      	nop
 8001f34:	3738      	adds	r7, #56	; 0x38
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40016800 	.word	0x40016800
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40022400 	.word	0x40022400
 8001f4c:	40022800 	.word	0x40022800
 8001f50:	40021800 	.word	0x40021800
 8001f54:	40022000 	.word	0x40022000

08001f58 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08c      	sub	sp, #48	; 0x30
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a3b      	ldr	r2, [pc, #236]	; (8002064 <HAL_QSPI_MspInit+0x10c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d170      	bne.n	800205c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001f7a:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <HAL_QSPI_MspInit+0x110>)
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7e:	4a3a      	ldr	r2, [pc, #232]	; (8002068 <HAL_QSPI_MspInit+0x110>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6393      	str	r3, [r2, #56]	; 0x38
 8001f86:	4b38      	ldr	r3, [pc, #224]	; (8002068 <HAL_QSPI_MspInit+0x110>)
 8001f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	61bb      	str	r3, [r7, #24]
 8001f90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f92:	4b35      	ldr	r3, [pc, #212]	; (8002068 <HAL_QSPI_MspInit+0x110>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a34      	ldr	r2, [pc, #208]	; (8002068 <HAL_QSPI_MspInit+0x110>)
 8001f98:	f043 0310 	orr.w	r3, r3, #16
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b32      	ldr	r3, [pc, #200]	; (8002068 <HAL_QSPI_MspInit+0x110>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <HAL_QSPI_MspInit+0x110>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a2e      	ldr	r2, [pc, #184]	; (8002068 <HAL_QSPI_MspInit+0x110>)
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <HAL_QSPI_MspInit+0x110>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc2:	4b29      	ldr	r3, [pc, #164]	; (8002068 <HAL_QSPI_MspInit+0x110>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a28      	ldr	r2, [pc, #160]	; (8002068 <HAL_QSPI_MspInit+0x110>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_QSPI_MspInit+0x110>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001fea:	2309      	movs	r3, #9
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	481d      	ldr	r0, [pc, #116]	; (800206c <HAL_QSPI_MspInit+0x114>)
 8001ff6:	f004 f893 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001ffa:	2340      	movs	r3, #64	; 0x40
 8001ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800200a:	230a      	movs	r3, #10
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800200e:	f107 031c 	add.w	r3, r7, #28
 8002012:	4619      	mov	r1, r3
 8002014:	4816      	ldr	r0, [pc, #88]	; (8002070 <HAL_QSPI_MspInit+0x118>)
 8002016:	f004 f883 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800201a:	2304      	movs	r3, #4
 800201c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002026:	2303      	movs	r3, #3
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800202a:	2309      	movs	r3, #9
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	4619      	mov	r1, r3
 8002034:	480e      	ldr	r0, [pc, #56]	; (8002070 <HAL_QSPI_MspInit+0x118>)
 8002036:	f004 f873 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800203a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800204c:	2309      	movs	r3, #9
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	4807      	ldr	r0, [pc, #28]	; (8002074 <HAL_QSPI_MspInit+0x11c>)
 8002058:	f004 f862 	bl	8006120 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800205c:	bf00      	nop
 800205e:	3730      	adds	r7, #48	; 0x30
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	a0001000 	.word	0xa0001000
 8002068:	40023800 	.word	0x40023800
 800206c:	40021000 	.word	0x40021000
 8002070:	40020400 	.word	0x40020400
 8002074:	40020c00 	.word	0x40020c00

08002078 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <HAL_RTC_MspInit+0x2c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d105      	bne.n	8002096 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <HAL_RTC_MspInit+0x30>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	4a06      	ldr	r2, [pc, #24]	; (80020a8 <HAL_RTC_MspInit+0x30>)
 8002090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002094:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40002800 	.word	0x40002800
 80020a8:	40023800 	.word	0x40023800

080020ac <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80020cc:	d127      	bne.n	800211e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <HAL_SPDIFRX_MspInit+0x7c>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	4a15      	ldr	r2, [pc, #84]	; (8002128 <HAL_SPDIFRX_MspInit+0x7c>)
 80020d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d8:	6413      	str	r3, [r2, #64]	; 0x40
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_SPDIFRX_MspInit+0x7c>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <HAL_SPDIFRX_MspInit+0x7c>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a0f      	ldr	r2, [pc, #60]	; (8002128 <HAL_SPDIFRX_MspInit+0x7c>)
 80020ec:	f043 0308 	orr.w	r3, r3, #8
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_SPDIFRX_MspInit+0x7c>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800210e:	2308      	movs	r3, #8
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	4804      	ldr	r0, [pc, #16]	; (800212c <HAL_SPDIFRX_MspInit+0x80>)
 800211a:	f004 f801 	bl	8006120 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800211e:	bf00      	nop
 8002120:	3728      	adds	r7, #40	; 0x28
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800
 800212c:	40020c00 	.word	0x40020c00

08002130 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a25      	ldr	r2, [pc, #148]	; (80021e4 <HAL_SPI_MspInit+0xb4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d144      	bne.n	80021dc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002152:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <HAL_SPI_MspInit+0xb8>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <HAL_SPI_MspInit+0xb8>)
 8002158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800215c:	6413      	str	r3, [r2, #64]	; 0x40
 800215e:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <HAL_SPI_MspInit+0xb8>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800216a:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <HAL_SPI_MspInit+0xb8>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a1e      	ldr	r2, [pc, #120]	; (80021e8 <HAL_SPI_MspInit+0xb8>)
 8002170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <HAL_SPI_MspInit+0xb8>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_SPI_MspInit+0xb8>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a18      	ldr	r2, [pc, #96]	; (80021e8 <HAL_SPI_MspInit+0xb8>)
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <HAL_SPI_MspInit+0xb8>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800219a:	2302      	movs	r3, #2
 800219c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a6:	2300      	movs	r3, #0
 80021a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021aa:	2305      	movs	r3, #5
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	4619      	mov	r1, r3
 80021b4:	480d      	ldr	r0, [pc, #52]	; (80021ec <HAL_SPI_MspInit+0xbc>)
 80021b6:	f003 ffb3 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80021ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80021be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021cc:	2305      	movs	r3, #5
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	4806      	ldr	r0, [pc, #24]	; (80021f0 <HAL_SPI_MspInit+0xc0>)
 80021d8:	f003 ffa2 	bl	8006120 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021dc:	bf00      	nop
 80021de:	3728      	adds	r7, #40	; 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40003800 	.word	0x40003800
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40022000 	.word	0x40022000
 80021f0:	40020400 	.word	0x40020400

080021f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a2e      	ldr	r2, [pc, #184]	; (80022bc <HAL_TIM_Base_MspInit+0xc8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d10c      	bne.n	8002220 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002206:	4b2e      	ldr	r3, [pc, #184]	; (80022c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	4a2d      	ldr	r2, [pc, #180]	; (80022c0 <HAL_TIM_Base_MspInit+0xcc>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6453      	str	r3, [r2, #68]	; 0x44
 8002212:	4b2b      	ldr	r3, [pc, #172]	; (80022c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800221e:	e046      	b.n	80022ae <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002228:	d10c      	bne.n	8002244 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800222a:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_TIM_Base_MspInit+0xcc>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	61bb      	str	r3, [r7, #24]
 8002240:	69bb      	ldr	r3, [r7, #24]
}
 8002242:	e034      	b.n	80022ae <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a1e      	ldr	r2, [pc, #120]	; (80022c4 <HAL_TIM_Base_MspInit+0xd0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10c      	bne.n	8002268 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_TIM_Base_MspInit+0xcc>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697b      	ldr	r3, [r7, #20]
}
 8002266:	e022      	b.n	80022ae <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <HAL_TIM_Base_MspInit+0xd4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d10c      	bne.n	800228c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002272:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002278:	f043 0308 	orr.w	r3, r3, #8
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]
}
 800228a:	e010      	b.n	80022ae <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <HAL_TIM_Base_MspInit+0xd8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d10b      	bne.n	80022ae <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <HAL_TIM_Base_MspInit+0xcc>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	6453      	str	r3, [r2, #68]	; 0x44
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_TIM_Base_MspInit+0xcc>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
}
 80022ae:	bf00      	nop
 80022b0:	3724      	adds	r7, #36	; 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40010000 	.word	0x40010000
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40000c00 	.word	0x40000c00
 80022cc:	40010400 	.word	0x40010400

080022d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <HAL_TIM_PWM_MspInit+0x38>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d10b      	bne.n	80022fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_TIM_PWM_MspInit+0x3c>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <HAL_TIM_PWM_MspInit+0x3c>)
 80022e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <HAL_TIM_PWM_MspInit+0x3c>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40001800 	.word	0x40001800
 800230c:	40023800 	.word	0x40023800

08002310 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08c      	sub	sp, #48	; 0x30
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 031c 	add.w	r3, r7, #28
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a56      	ldr	r2, [pc, #344]	; (8002488 <HAL_TIM_MspPostInit+0x178>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d11d      	bne.n	800236e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	4b56      	ldr	r3, [pc, #344]	; (800248c <HAL_TIM_MspPostInit+0x17c>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a55      	ldr	r2, [pc, #340]	; (800248c <HAL_TIM_MspPostInit+0x17c>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b53      	ldr	r3, [pc, #332]	; (800248c <HAL_TIM_MspPostInit+0x17c>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800234a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800234e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800235c:	2301      	movs	r3, #1
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	4619      	mov	r1, r3
 8002366:	484a      	ldr	r0, [pc, #296]	; (8002490 <HAL_TIM_MspPostInit+0x180>)
 8002368:	f003 feda 	bl	8006120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800236c:	e087      	b.n	800247e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002376:	d11d      	bne.n	80023b4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002378:	4b44      	ldr	r3, [pc, #272]	; (800248c <HAL_TIM_MspPostInit+0x17c>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	4a43      	ldr	r2, [pc, #268]	; (800248c <HAL_TIM_MspPostInit+0x17c>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6313      	str	r3, [r2, #48]	; 0x30
 8002384:	4b41      	ldr	r3, [pc, #260]	; (800248c <HAL_TIM_MspPostInit+0x17c>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023a2:	2301      	movs	r3, #1
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	4619      	mov	r1, r3
 80023ac:	4838      	ldr	r0, [pc, #224]	; (8002490 <HAL_TIM_MspPostInit+0x180>)
 80023ae:	f003 feb7 	bl	8006120 <HAL_GPIO_Init>
}
 80023b2:	e064      	b.n	800247e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a36      	ldr	r2, [pc, #216]	; (8002494 <HAL_TIM_MspPostInit+0x184>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d11c      	bne.n	80023f8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023be:	4b33      	ldr	r3, [pc, #204]	; (800248c <HAL_TIM_MspPostInit+0x17c>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a32      	ldr	r2, [pc, #200]	; (800248c <HAL_TIM_MspPostInit+0x17c>)
 80023c4:	f043 0302 	orr.w	r3, r3, #2
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b30      	ldr	r3, [pc, #192]	; (800248c <HAL_TIM_MspPostInit+0x17c>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80023d6:	2310      	movs	r3, #16
 80023d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023e6:	2302      	movs	r3, #2
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80023ea:	f107 031c 	add.w	r3, r7, #28
 80023ee:	4619      	mov	r1, r3
 80023f0:	4829      	ldr	r0, [pc, #164]	; (8002498 <HAL_TIM_MspPostInit+0x188>)
 80023f2:	f003 fe95 	bl	8006120 <HAL_GPIO_Init>
}
 80023f6:	e042      	b.n	800247e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a27      	ldr	r2, [pc, #156]	; (800249c <HAL_TIM_MspPostInit+0x18c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d11c      	bne.n	800243c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002402:	4b22      	ldr	r3, [pc, #136]	; (800248c <HAL_TIM_MspPostInit+0x17c>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a21      	ldr	r2, [pc, #132]	; (800248c <HAL_TIM_MspPostInit+0x17c>)
 8002408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b1f      	ldr	r3, [pc, #124]	; (800248c <HAL_TIM_MspPostInit+0x17c>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800241a:	2301      	movs	r3, #1
 800241c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800242a:	2302      	movs	r3, #2
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	4619      	mov	r1, r3
 8002434:	481a      	ldr	r0, [pc, #104]	; (80024a0 <HAL_TIM_MspPostInit+0x190>)
 8002436:	f003 fe73 	bl	8006120 <HAL_GPIO_Init>
}
 800243a:	e020      	b.n	800247e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a18      	ldr	r2, [pc, #96]	; (80024a4 <HAL_TIM_MspPostInit+0x194>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d11b      	bne.n	800247e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_TIM_MspPostInit+0x17c>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a10      	ldr	r2, [pc, #64]	; (800248c <HAL_TIM_MspPostInit+0x17c>)
 800244c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_TIM_MspPostInit+0x17c>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800245e:	2340      	movs	r3, #64	; 0x40
 8002460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800246e:	2309      	movs	r3, #9
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002472:	f107 031c 	add.w	r3, r7, #28
 8002476:	4619      	mov	r1, r3
 8002478:	480b      	ldr	r0, [pc, #44]	; (80024a8 <HAL_TIM_MspPostInit+0x198>)
 800247a:	f003 fe51 	bl	8006120 <HAL_GPIO_Init>
}
 800247e:	bf00      	nop
 8002480:	3730      	adds	r7, #48	; 0x30
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40010000 	.word	0x40010000
 800248c:	40023800 	.word	0x40023800
 8002490:	40020000 	.word	0x40020000
 8002494:	40000400 	.word	0x40000400
 8002498:	40020400 	.word	0x40020400
 800249c:	40000c00 	.word	0x40000c00
 80024a0:	40022000 	.word	0x40022000
 80024a4:	40001800 	.word	0x40001800
 80024a8:	40021c00 	.word	0x40021c00

080024ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08c      	sub	sp, #48	; 0x30
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 031c 	add.w	r3, r7, #28
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a3c      	ldr	r2, [pc, #240]	; (80025bc <HAL_UART_MspInit+0x110>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d145      	bne.n	800255a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ce:	4b3c      	ldr	r3, [pc, #240]	; (80025c0 <HAL_UART_MspInit+0x114>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	4a3b      	ldr	r2, [pc, #236]	; (80025c0 <HAL_UART_MspInit+0x114>)
 80024d4:	f043 0310 	orr.w	r3, r3, #16
 80024d8:	6453      	str	r3, [r2, #68]	; 0x44
 80024da:	4b39      	ldr	r3, [pc, #228]	; (80025c0 <HAL_UART_MspInit+0x114>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	61bb      	str	r3, [r7, #24]
 80024e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e6:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <HAL_UART_MspInit+0x114>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a35      	ldr	r2, [pc, #212]	; (80025c0 <HAL_UART_MspInit+0x114>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b33      	ldr	r3, [pc, #204]	; (80025c0 <HAL_UART_MspInit+0x114>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <HAL_UART_MspInit+0x114>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a2f      	ldr	r2, [pc, #188]	; (80025c0 <HAL_UART_MspInit+0x114>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <HAL_UART_MspInit+0x114>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002522:	2300      	movs	r3, #0
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002526:	2307      	movs	r3, #7
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800252a:	f107 031c 	add.w	r3, r7, #28
 800252e:	4619      	mov	r1, r3
 8002530:	4824      	ldr	r0, [pc, #144]	; (80025c4 <HAL_UART_MspInit+0x118>)
 8002532:	f003 fdf5 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800253a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002548:	2307      	movs	r3, #7
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800254c:	f107 031c 	add.w	r3, r7, #28
 8002550:	4619      	mov	r1, r3
 8002552:	481d      	ldr	r0, [pc, #116]	; (80025c8 <HAL_UART_MspInit+0x11c>)
 8002554:	f003 fde4 	bl	8006120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002558:	e02c      	b.n	80025b4 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a1b      	ldr	r2, [pc, #108]	; (80025cc <HAL_UART_MspInit+0x120>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d127      	bne.n	80025b4 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002564:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <HAL_UART_MspInit+0x114>)
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	4a15      	ldr	r2, [pc, #84]	; (80025c0 <HAL_UART_MspInit+0x114>)
 800256a:	f043 0320 	orr.w	r3, r3, #32
 800256e:	6453      	str	r3, [r2, #68]	; 0x44
 8002570:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <HAL_UART_MspInit+0x114>)
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	f003 0320 	and.w	r3, r3, #32
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HAL_UART_MspInit+0x114>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	4a0f      	ldr	r2, [pc, #60]	; (80025c0 <HAL_UART_MspInit+0x114>)
 8002582:	f043 0304 	orr.w	r3, r3, #4
 8002586:	6313      	str	r3, [r2, #48]	; 0x30
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_UART_MspInit+0x114>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002594:	23c0      	movs	r3, #192	; 0xc0
 8002596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	2302      	movs	r3, #2
 800259a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a0:	2303      	movs	r3, #3
 80025a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80025a4:	2308      	movs	r3, #8
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a8:	f107 031c 	add.w	r3, r7, #28
 80025ac:	4619      	mov	r1, r3
 80025ae:	4808      	ldr	r0, [pc, #32]	; (80025d0 <HAL_UART_MspInit+0x124>)
 80025b0:	f003 fdb6 	bl	8006120 <HAL_GPIO_Init>
}
 80025b4:	bf00      	nop
 80025b6:	3730      	adds	r7, #48	; 0x30
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40011000 	.word	0x40011000
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40020000 	.word	0x40020000
 80025cc:	40011400 	.word	0x40011400
 80025d0:	40020800 	.word	0x40020800

080025d4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80025e8:	4b3a      	ldr	r3, [pc, #232]	; (80026d4 <HAL_FMC_MspInit+0x100>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d16d      	bne.n	80026cc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80025f0:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <HAL_FMC_MspInit+0x100>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025f6:	4b38      	ldr	r3, [pc, #224]	; (80026d8 <HAL_FMC_MspInit+0x104>)
 80025f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fa:	4a37      	ldr	r2, [pc, #220]	; (80026d8 <HAL_FMC_MspInit+0x104>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6393      	str	r3, [r2, #56]	; 0x38
 8002602:	4b35      	ldr	r3, [pc, #212]	; (80026d8 <HAL_FMC_MspInit+0x104>)
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800260e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002612:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261c:	2303      	movs	r3, #3
 800261e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002620:	230c      	movs	r3, #12
 8002622:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	4619      	mov	r1, r3
 8002628:	482c      	ldr	r0, [pc, #176]	; (80026dc <HAL_FMC_MspInit+0x108>)
 800262a:	f003 fd79 	bl	8006120 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800262e:	f248 1333 	movw	r3, #33075	; 0x8133
 8002632:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263c:	2303      	movs	r3, #3
 800263e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002640:	230c      	movs	r3, #12
 8002642:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	4619      	mov	r1, r3
 8002648:	4825      	ldr	r0, [pc, #148]	; (80026e0 <HAL_FMC_MspInit+0x10c>)
 800264a:	f003 fd69 	bl	8006120 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800264e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002652:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265c:	2303      	movs	r3, #3
 800265e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002660:	230c      	movs	r3, #12
 8002662:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	4619      	mov	r1, r3
 8002668:	481e      	ldr	r0, [pc, #120]	; (80026e4 <HAL_FMC_MspInit+0x110>)
 800266a:	f003 fd59 	bl	8006120 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800266e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002672:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002680:	230c      	movs	r3, #12
 8002682:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	4619      	mov	r1, r3
 8002688:	4817      	ldr	r0, [pc, #92]	; (80026e8 <HAL_FMC_MspInit+0x114>)
 800268a:	f003 fd49 	bl	8006120 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800268e:	2328      	movs	r3, #40	; 0x28
 8002690:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269a:	2303      	movs	r3, #3
 800269c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800269e:	230c      	movs	r3, #12
 80026a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	4619      	mov	r1, r3
 80026a6:	4811      	ldr	r0, [pc, #68]	; (80026ec <HAL_FMC_MspInit+0x118>)
 80026a8:	f003 fd3a 	bl	8006120 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80026ac:	2308      	movs	r3, #8
 80026ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b8:	2303      	movs	r3, #3
 80026ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026bc:	230c      	movs	r3, #12
 80026be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	4619      	mov	r1, r3
 80026c4:	480a      	ldr	r0, [pc, #40]	; (80026f0 <HAL_FMC_MspInit+0x11c>)
 80026c6:	f003 fd2b 	bl	8006120 <HAL_GPIO_Init>
 80026ca:	e000      	b.n	80026ce <HAL_FMC_MspInit+0xfa>
    return;
 80026cc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	200000dc 	.word	0x200000dc
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40021800 	.word	0x40021800
 80026e4:	40020c00 	.word	0x40020c00
 80026e8:	40021400 	.word	0x40021400
 80026ec:	40021c00 	.word	0x40021c00
 80026f0:	40020800 	.word	0x40020800

080026f4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80026fc:	f7ff ff6a 	bl	80025d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a2b      	ldr	r2, [pc, #172]	; (80027c4 <HAL_SAI_MspInit+0xbc>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d124      	bne.n	8002764 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800271a:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <HAL_SAI_MspInit+0xc0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10b      	bne.n	800273a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002722:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <HAL_SAI_MspInit+0xc4>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	4a29      	ldr	r2, [pc, #164]	; (80027cc <HAL_SAI_MspInit+0xc4>)
 8002728:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800272c:	6453      	str	r3, [r2, #68]	; 0x44
 800272e:	4b27      	ldr	r3, [pc, #156]	; (80027cc <HAL_SAI_MspInit+0xc4>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800273a:	4b23      	ldr	r3, [pc, #140]	; (80027c8 <HAL_SAI_MspInit+0xc0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3301      	adds	r3, #1
 8002740:	4a21      	ldr	r2, [pc, #132]	; (80027c8 <HAL_SAI_MspInit+0xc0>)
 8002742:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002744:	23f0      	movs	r3, #240	; 0xf0
 8002746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002754:	230a      	movs	r3, #10
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4619      	mov	r1, r3
 800275e:	481c      	ldr	r0, [pc, #112]	; (80027d0 <HAL_SAI_MspInit+0xc8>)
 8002760:	f003 fcde 	bl	8006120 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1a      	ldr	r2, [pc, #104]	; (80027d4 <HAL_SAI_MspInit+0xcc>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d125      	bne.n	80027ba <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_SAI_MspInit+0xc0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10b      	bne.n	800278e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_SAI_MspInit+0xc4>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	4a14      	ldr	r2, [pc, #80]	; (80027cc <HAL_SAI_MspInit+0xc4>)
 800277c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002780:	6453      	str	r3, [r2, #68]	; 0x44
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_SAI_MspInit+0xc4>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <HAL_SAI_MspInit+0xc0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	3301      	adds	r3, #1
 8002794:	4a0c      	ldr	r2, [pc, #48]	; (80027c8 <HAL_SAI_MspInit+0xc0>)
 8002796:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800279c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80027aa:	230a      	movs	r3, #10
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	4808      	ldr	r0, [pc, #32]	; (80027d8 <HAL_SAI_MspInit+0xd0>)
 80027b6:	f003 fcb3 	bl	8006120 <HAL_GPIO_Init>

    }
}
 80027ba:	bf00      	nop
 80027bc:	3728      	adds	r7, #40	; 0x28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40015c04 	.word	0x40015c04
 80027c8:	200000e0 	.word	0x200000e0
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40022000 	.word	0x40022000
 80027d4:	40015c24 	.word	0x40015c24
 80027d8:	40021800 	.word	0x40021800

080027dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08c      	sub	sp, #48	; 0x30
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	2036      	movs	r0, #54	; 0x36
 80027f2:	f001 fc29 	bl	8004048 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80027f6:	2036      	movs	r0, #54	; 0x36
 80027f8:	f001 fc42 	bl	8004080 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80027fc:	4b1f      	ldr	r3, [pc, #124]	; (800287c <HAL_InitTick+0xa0>)
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	4a1e      	ldr	r2, [pc, #120]	; (800287c <HAL_InitTick+0xa0>)
 8002802:	f043 0310 	orr.w	r3, r3, #16
 8002806:	6413      	str	r3, [r2, #64]	; 0x40
 8002808:	4b1c      	ldr	r3, [pc, #112]	; (800287c <HAL_InitTick+0xa0>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002814:	f107 0210 	add.w	r2, r7, #16
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f006 fdf2 	bl	8009408 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002824:	f006 fdc8 	bl	80093b8 <HAL_RCC_GetPCLK1Freq>
 8002828:	4603      	mov	r3, r0
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002830:	4a13      	ldr	r2, [pc, #76]	; (8002880 <HAL_InitTick+0xa4>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	0c9b      	lsrs	r3, r3, #18
 8002838:	3b01      	subs	r3, #1
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_InitTick+0xa8>)
 800283e:	4a12      	ldr	r2, [pc, #72]	; (8002888 <HAL_InitTick+0xac>)
 8002840:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <HAL_InitTick+0xa8>)
 8002844:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002848:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800284a:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <HAL_InitTick+0xa8>)
 800284c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_InitTick+0xa8>)
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_InitTick+0xa8>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800285c:	4809      	ldr	r0, [pc, #36]	; (8002884 <HAL_InitTick+0xa8>)
 800285e:	f008 fa3a 	bl	800acd6 <HAL_TIM_Base_Init>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d104      	bne.n	8002872 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002868:	4806      	ldr	r0, [pc, #24]	; (8002884 <HAL_InitTick+0xa8>)
 800286a:	f008 fa8b 	bl	800ad84 <HAL_TIM_Base_Start_IT>
 800286e:	4603      	mov	r3, r0
 8002870:	e000      	b.n	8002874 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
}
 8002874:	4618      	mov	r0, r3
 8002876:	3730      	adds	r7, #48	; 0x30
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40023800 	.word	0x40023800
 8002880:	431bde83 	.word	0x431bde83
 8002884:	20009920 	.word	0x20009920
 8002888:	40001000 	.word	0x40001000

0800288c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002890:	e7fe      	b.n	8002890 <NMI_Handler+0x4>

08002892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002896:	e7fe      	b.n	8002896 <HardFault_Handler+0x4>

08002898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800289c:	e7fe      	b.n	800289c <MemManage_Handler+0x4>

0800289e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a2:	e7fe      	b.n	80028a2 <BusFault_Handler+0x4>

080028a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028a8:	e7fe      	b.n	80028a8 <UsageFault_Handler+0x4>

080028aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028bc:	4802      	ldr	r0, [pc, #8]	; (80028c8 <TIM6_DAC_IRQHandler+0x10>)
 80028be:	f008 fb30 	bl	800af22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20009920 	.word	0x20009920

080028cc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80028d0:	4802      	ldr	r0, [pc, #8]	; (80028dc <ETH_IRQHandler+0x10>)
 80028d2:	f002 fe83 	bl	80055dc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	2000b3a4 	.word	0x2000b3a4

080028e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80028e4:	4802      	ldr	r0, [pc, #8]	; (80028f0 <OTG_FS_IRQHandler+0x10>)
 80028e6:	f004 f849 	bl	800697c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20010788 	.word	0x20010788

080028f4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <LTDC_IRQHandler+0x10>)
 80028fa:	f005 fd45 	bl	8008388 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	2000950c 	.word	0x2000950c

08002908 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800290c:	4802      	ldr	r0, [pc, #8]	; (8002918 <DMA2D_IRQHandler+0x10>)
 800290e:	f002 f843 	bl	8004998 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200097c0 	.word	0x200097c0

0800291c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	e00a      	b.n	8002944 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800292e:	f3af 8000 	nop.w
 8002932:	4601      	mov	r1, r0
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	60ba      	str	r2, [r7, #8]
 800293a:	b2ca      	uxtb	r2, r1
 800293c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	3301      	adds	r3, #1
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	429a      	cmp	r2, r3
 800294a:	dbf0      	blt.n	800292e <_read+0x12>
	}

return len;
 800294c:	687b      	ldr	r3, [r7, #4]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	e009      	b.n	800297c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	60ba      	str	r2, [r7, #8]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f01e fbdb 	bl	802112c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	3301      	adds	r3, #1
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	429a      	cmp	r2, r3
 8002982:	dbf1      	blt.n	8002968 <_write+0x12>
	}
	return len;
 8002984:	687b      	ldr	r3, [r7, #4]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <_close>:

int _close(int file)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
	return -1;
 8002996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029b6:	605a      	str	r2, [r3, #4]
	return 0;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <_isatty>:

int _isatty(int file)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
	return 1;
 80029ce:	2301      	movs	r3, #1
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
	return 0;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a00:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <_sbrk+0x5c>)
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <_sbrk+0x60>)
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <_sbrk+0x64>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <_sbrk+0x64>)
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <_sbrk+0x68>)
 8002a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <_sbrk+0x64>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4413      	add	r3, r2
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d205      	bcs.n	8002a34 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <_sbrk+0x6c>)
 8002a2a:	220c      	movs	r2, #12
 8002a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a32:	e009      	b.n	8002a48 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <_sbrk+0x64>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <_sbrk+0x64>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	4a06      	ldr	r2, [pc, #24]	; (8002a5c <_sbrk+0x64>)
 8002a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a46:	68fb      	ldr	r3, [r7, #12]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	20050000 	.word	0x20050000
 8002a58:	00000400 	.word	0x00000400
 8002a5c:	200000e4 	.word	0x200000e4
 8002a60:	200146f8 	.word	0x200146f8
 8002a64:	2001039c 	.word	0x2001039c

08002a68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <SystemInit+0x20>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	4a05      	ldr	r2, [pc, #20]	; (8002a88 <SystemInit+0x20>)
 8002a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ac4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a90:	480d      	ldr	r0, [pc, #52]	; (8002ac8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a92:	490e      	ldr	r1, [pc, #56]	; (8002acc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a94:	4a0e      	ldr	r2, [pc, #56]	; (8002ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a98:	e002      	b.n	8002aa0 <LoopCopyDataInit>

08002a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a9e:	3304      	adds	r3, #4

08002aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aa4:	d3f9      	bcc.n	8002a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aa6:	4a0b      	ldr	r2, [pc, #44]	; (8002ad4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002aa8:	4c0b      	ldr	r4, [pc, #44]	; (8002ad8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aac:	e001      	b.n	8002ab2 <LoopFillZerobss>

08002aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ab0:	3204      	adds	r2, #4

08002ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ab4:	d3fb      	bcc.n	8002aae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ab6:	f7ff ffd7 	bl	8002a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aba:	f01e fc9d 	bl	80213f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002abe:	f7fe ff03 	bl	80018c8 <main>
  bx  lr    
 8002ac2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ac4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002acc:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8002ad0:	08028114 	.word	0x08028114
  ldr r2, =_sbss
 8002ad4:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002ad8:	200146f8 	.word	0x200146f8

08002adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002adc:	e7fe      	b.n	8002adc <ADC_IRQHandler>
	...

08002ae0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002ae4:	4b31      	ldr	r3, [pc, #196]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002ae6:	2228      	movs	r2, #40	; 0x28
 8002ae8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002aea:	4b30      	ldr	r3, [pc, #192]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002aec:	2209      	movs	r2, #9
 8002aee:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002af0:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002af2:	2235      	movs	r2, #53	; 0x35
 8002af4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002af6:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002af8:	220b      	movs	r2, #11
 8002afa:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002afc:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002afe:	f240 121b 	movw	r2, #283	; 0x11b
 8002b02:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002b04:	4b29      	ldr	r3, [pc, #164]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002b06:	f240 2215 	movw	r2, #533	; 0x215
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002b0c:	4b27      	ldr	r3, [pc, #156]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002b0e:	f240 121d 	movw	r2, #285	; 0x11d
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002b14:	4b25      	ldr	r3, [pc, #148]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002b16:	f240 2235 	movw	r2, #565	; 0x235
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4823      	ldr	r0, [pc, #140]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002b20:	f000 fc2c 	bl	800337c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002b24:	4b21      	ldr	r3, [pc, #132]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002b26:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b2a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002b2e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002b32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002b34:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002b4c:	4b17      	ldr	r3, [pc, #92]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002b52:	4b16      	ldr	r3, [pc, #88]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002b66:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <BSP_LCD_Init+0xd0>)
 8002b68:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002b6a:	4810      	ldr	r0, [pc, #64]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002b6c:	f005 fd0c 	bl	8008588 <HAL_LTDC_GetState>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002b76:	2100      	movs	r1, #0
 8002b78:	480c      	ldr	r0, [pc, #48]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002b7a:	f000 fb25 	bl	80031c8 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002b7e:	480b      	ldr	r0, [pc, #44]	; (8002bac <BSP_LCD_Init+0xcc>)
 8002b80:	f005 fb32 	bl	80081e8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002b84:	2201      	movs	r2, #1
 8002b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b8a:	480a      	ldr	r0, [pc, #40]	; (8002bb4 <BSP_LCD_Init+0xd4>)
 8002b8c:	f003 fc72 	bl	8006474 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002b90:	2201      	movs	r2, #1
 8002b92:	2108      	movs	r1, #8
 8002b94:	4808      	ldr	r0, [pc, #32]	; (8002bb8 <BSP_LCD_Init+0xd8>)
 8002b96:	f003 fc6d 	bl	8006474 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002b9a:	f000 fd0f 	bl	80035bc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002b9e:	4807      	ldr	r0, [pc, #28]	; (8002bbc <BSP_LCD_Init+0xdc>)
 8002ba0:	f000 f8d8 	bl	8002d54 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	2000996c 	.word	0x2000996c
 8002bb0:	40016800 	.word	0x40016800
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40022800 	.word	0x40022800
 8002bbc:	20000054 	.word	0x20000054

08002bc0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <BSP_LCD_GetXSize+0x20>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a06      	ldr	r2, [pc, #24]	; (8002be4 <BSP_LCD_GetXSize+0x24>)
 8002bca:	2134      	movs	r1, #52	; 0x34
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3360      	adds	r3, #96	; 0x60
 8002bd4:	681b      	ldr	r3, [r3, #0]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	20000128 	.word	0x20000128
 8002be4:	2000996c 	.word	0x2000996c

08002be8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <BSP_LCD_GetYSize+0x20>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a06      	ldr	r2, [pc, #24]	; (8002c0c <BSP_LCD_GetYSize+0x24>)
 8002bf2:	2134      	movs	r1, #52	; 0x34
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3364      	adds	r3, #100	; 0x64
 8002bfc:	681b      	ldr	r3, [r3, #0]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	20000128 	.word	0x20000128
 8002c0c:	2000996c 	.word	0x2000996c

08002c10 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b090      	sub	sp, #64	; 0x40
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	6039      	str	r1, [r7, #0]
 8002c1a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002c20:	f7ff ffce 	bl	8002bc0 <BSP_LCD_GetXSize>
 8002c24:	4603      	mov	r3, r0
 8002c26:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002c2c:	f7ff ffdc 	bl	8002be8 <BSP_LCD_GetYSize>
 8002c30:	4603      	mov	r3, r0
 8002c32:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002c3c:	23ff      	movs	r3, #255	; 0xff
 8002c3e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002c56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002c5c:	2307      	movs	r3, #7
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002c60:	f7ff ffae 	bl	8002bc0 <BSP_LCD_GetXSize>
 8002c64:	4603      	mov	r3, r0
 8002c66:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002c68:	f7ff ffbe 	bl	8002be8 <BSP_LCD_GetYSize>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002c70:	88fa      	ldrh	r2, [r7, #6]
 8002c72:	f107 030c 	add.w	r3, r7, #12
 8002c76:	4619      	mov	r1, r3
 8002c78:	4812      	ldr	r0, [pc, #72]	; (8002cc4 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002c7a:	f005 fc47 	bl	800850c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002c7e:	88fa      	ldrh	r2, [r7, #6]
 8002c80:	4911      	ldr	r1, [pc, #68]	; (8002cc8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c92:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002c94:	88fa      	ldrh	r2, [r7, #6]
 8002c96:	490c      	ldr	r1, [pc, #48]	; (8002cc8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	3308      	adds	r3, #8
 8002ca4:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <BSP_LCD_LayerDefaultInit+0xbc>)
 8002ca6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002ca8:	88fa      	ldrh	r2, [r7, #6]
 8002caa:	4907      	ldr	r1, [pc, #28]	; (8002cc8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002cac:	4613      	mov	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002cba:	601a      	str	r2, [r3, #0]
}
 8002cbc:	bf00      	nop
 8002cbe:	3740      	adds	r7, #64	; 0x40
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	2000996c 	.word	0x2000996c
 8002cc8:	2000012c 	.word	0x2000012c
 8002ccc:	20000054 	.word	0x20000054

08002cd0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002cd8:	4a04      	ldr	r2, [pc, #16]	; (8002cec <BSP_LCD_SelectLayer+0x1c>)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6013      	str	r3, [r2, #0]
} 
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20000128 	.word	0x20000128

08002cf0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002cf8:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <BSP_LCD_SetTextColor+0x28>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4907      	ldr	r1, [pc, #28]	; (8002d1c <BSP_LCD_SetTextColor+0x2c>)
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	601a      	str	r2, [r3, #0]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	20000128 	.word	0x20000128
 8002d1c:	2000012c 	.word	0x2000012c

08002d20 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002d28:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <BSP_LCD_SetBackColor+0x2c>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4908      	ldr	r1, [pc, #32]	; (8002d50 <BSP_LCD_SetBackColor+0x30>)
 8002d2e:	4613      	mov	r3, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	3304      	adds	r3, #4
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	601a      	str	r2, [r3, #0]
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000128 	.word	0x20000128
 8002d50:	2000012c 	.word	0x2000012c

08002d54 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <BSP_LCD_SetFont+0x2c>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4908      	ldr	r1, [pc, #32]	; (8002d84 <BSP_LCD_SetFont+0x30>)
 8002d62:	4613      	mov	r3, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3308      	adds	r3, #8
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	601a      	str	r2, [r3, #0]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000128 	.word	0x20000128
 8002d84:	2000012c 	.word	0x2000012c

08002d88 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002d8c:	4b07      	ldr	r3, [pc, #28]	; (8002dac <BSP_LCD_GetFont+0x24>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4907      	ldr	r1, [pc, #28]	; (8002db0 <BSP_LCD_GetFont+0x28>)
 8002d92:	4613      	mov	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4413      	add	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	3308      	adds	r3, #8
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000128 	.word	0x20000128
 8002db0:	2000012c 	.word	0x2000012c

08002db4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <BSP_LCD_Clear+0x48>)
 8002dbe:	681c      	ldr	r4, [r3, #0]
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <BSP_LCD_Clear+0x48>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a0e      	ldr	r2, [pc, #56]	; (8002e00 <BSP_LCD_Clear+0x4c>)
 8002dc6:	2134      	movs	r1, #52	; 0x34
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	335c      	adds	r3, #92	; 0x5c
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	461d      	mov	r5, r3
 8002dd4:	f7ff fef4 	bl	8002bc0 <BSP_LCD_GetXSize>
 8002dd8:	4606      	mov	r6, r0
 8002dda:	f7ff ff05 	bl	8002be8 <BSP_LCD_GetYSize>
 8002dde:	4602      	mov	r2, r0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	9301      	str	r3, [sp, #4]
 8002de4:	2300      	movs	r3, #0
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	4632      	mov	r2, r6
 8002dec:	4629      	mov	r1, r5
 8002dee:	4620      	mov	r0, r4
 8002df0:	f000 fb98 	bl	8003524 <LL_FillBuffer>
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dfc:	20000128 	.word	0x20000128
 8002e00:	2000996c 	.word	0x2000996c

08002e04 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	80fb      	strh	r3, [r7, #6]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	80bb      	strh	r3, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002e16:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <BSP_LCD_DisplayChar+0x80>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	491b      	ldr	r1, [pc, #108]	; (8002e88 <BSP_LCD_DisplayChar+0x84>)
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	3308      	adds	r3, #8
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6819      	ldr	r1, [r3, #0]
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002e32:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <BSP_LCD_DisplayChar+0x80>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4c14      	ldr	r4, [pc, #80]	; (8002e88 <BSP_LCD_DisplayChar+0x84>)
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4423      	add	r3, r4
 8002e42:	3308      	adds	r3, #8
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002e48:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <BSP_LCD_DisplayChar+0x80>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4c0d      	ldr	r4, [pc, #52]	; (8002e88 <BSP_LCD_DisplayChar+0x84>)
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4423      	add	r3, r4
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	889b      	ldrh	r3, [r3, #4]
 8002e62:	3307      	adds	r3, #7
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	da00      	bge.n	8002e6a <BSP_LCD_DisplayChar+0x66>
 8002e68:	3307      	adds	r3, #7
 8002e6a:	10db      	asrs	r3, r3, #3
 8002e6c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002e70:	18ca      	adds	r2, r1, r3
 8002e72:	88b9      	ldrh	r1, [r7, #4]
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fa9c 	bl	80033b4 <DrawChar>
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd90      	pop	{r4, r7, pc}
 8002e84:	20000128 	.word	0x20000128
 8002e88:	2000012c 	.word	0x2000012c

08002e8c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002e8c:	b5b0      	push	{r4, r5, r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60ba      	str	r2, [r7, #8]
 8002e94:	461a      	mov	r2, r3
 8002e96:	4603      	mov	r3, r0
 8002e98:	81fb      	strh	r3, [r7, #14]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	81bb      	strh	r3, [r7, #12]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	83fb      	strh	r3, [r7, #30]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002eb6:	e002      	b.n	8002ebe <BSP_LCD_DisplayStringAt+0x32>
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	617a      	str	r2, [r7, #20]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f6      	bne.n	8002eb8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002eca:	f7ff fe79 	bl	8002bc0 <BSP_LCD_GetXSize>
 8002ece:	4b4f      	ldr	r3, [pc, #316]	; (800300c <BSP_LCD_DisplayStringAt+0x180>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	494f      	ldr	r1, [pc, #316]	; (8003010 <BSP_LCD_DisplayStringAt+0x184>)
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	3308      	adds	r3, #8
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	889b      	ldrh	r3, [r3, #4]
 8002ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee8:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d01c      	beq.n	8002f2a <BSP_LCD_DisplayStringAt+0x9e>
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d017      	beq.n	8002f24 <BSP_LCD_DisplayStringAt+0x98>
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d12e      	bne.n	8002f56 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	1ad1      	subs	r1, r2, r3
 8002efe:	4b43      	ldr	r3, [pc, #268]	; (800300c <BSP_LCD_DisplayStringAt+0x180>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4843      	ldr	r0, [pc, #268]	; (8003010 <BSP_LCD_DisplayStringAt+0x184>)
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4403      	add	r3, r0
 8002f0e:	3308      	adds	r3, #8
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	889b      	ldrh	r3, [r3, #4]
 8002f14:	fb03 f301 	mul.w	r3, r3, r1
 8002f18:	085b      	lsrs	r3, r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	89fb      	ldrh	r3, [r7, #14]
 8002f1e:	4413      	add	r3, r2
 8002f20:	83fb      	strh	r3, [r7, #30]
      break;
 8002f22:	e01b      	b.n	8002f5c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002f24:	89fb      	ldrh	r3, [r7, #14]
 8002f26:	83fb      	strh	r3, [r7, #30]
      break;
 8002f28:	e018      	b.n	8002f5c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	b299      	uxth	r1, r3
 8002f32:	4b36      	ldr	r3, [pc, #216]	; (800300c <BSP_LCD_DisplayStringAt+0x180>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4836      	ldr	r0, [pc, #216]	; (8003010 <BSP_LCD_DisplayStringAt+0x184>)
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4403      	add	r3, r0
 8002f42:	3308      	adds	r3, #8
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	889b      	ldrh	r3, [r3, #4]
 8002f48:	fb11 f303 	smulbb	r3, r1, r3
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	89fb      	ldrh	r3, [r7, #14]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	83fb      	strh	r3, [r7, #30]
      break;
 8002f54:	e002      	b.n	8002f5c <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8002f56:	89fb      	ldrh	r3, [r7, #14]
 8002f58:	83fb      	strh	r3, [r7, #30]
      break;
 8002f5a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002f5c:	8bfb      	ldrh	r3, [r7, #30]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <BSP_LCD_DisplayStringAt+0xde>
 8002f62:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	da1d      	bge.n	8002fa6 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002f6e:	e01a      	b.n	8002fa6 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	781a      	ldrb	r2, [r3, #0]
 8002f74:	89b9      	ldrh	r1, [r7, #12]
 8002f76:	8bfb      	ldrh	r3, [r7, #30]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff43 	bl	8002e04 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002f7e:	4b23      	ldr	r3, [pc, #140]	; (800300c <BSP_LCD_DisplayStringAt+0x180>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	4923      	ldr	r1, [pc, #140]	; (8003010 <BSP_LCD_DisplayStringAt+0x184>)
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3308      	adds	r3, #8
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	889a      	ldrh	r2, [r3, #4]
 8002f94:	8bfb      	ldrh	r3, [r7, #30]
 8002f96:	4413      	add	r3, r2
 8002f98:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	60bb      	str	r3, [r7, #8]
    i++;
 8002fa0:	8bbb      	ldrh	r3, [r7, #28]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf14      	ite	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	2300      	moveq	r3, #0
 8002fb2:	b2dc      	uxtb	r4, r3
 8002fb4:	f7ff fe04 	bl	8002bc0 <BSP_LCD_GetXSize>
 8002fb8:	4605      	mov	r5, r0
 8002fba:	8bb9      	ldrh	r1, [r7, #28]
 8002fbc:	4b13      	ldr	r3, [pc, #76]	; (800300c <BSP_LCD_DisplayStringAt+0x180>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4813      	ldr	r0, [pc, #76]	; (8003010 <BSP_LCD_DisplayStringAt+0x184>)
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4403      	add	r3, r0
 8002fcc:	3308      	adds	r3, #8
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	889b      	ldrh	r3, [r3, #4]
 8002fd2:	fb03 f301 	mul.w	r3, r3, r1
 8002fd6:	1aeb      	subs	r3, r5, r3
 8002fd8:	b299      	uxth	r1, r3
 8002fda:	4b0c      	ldr	r3, [pc, #48]	; (800300c <BSP_LCD_DisplayStringAt+0x180>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	480c      	ldr	r0, [pc, #48]	; (8003010 <BSP_LCD_DisplayStringAt+0x184>)
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4403      	add	r3, r0
 8002fea:	3308      	adds	r3, #8
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	889b      	ldrh	r3, [r3, #4]
 8002ff0:	4299      	cmp	r1, r3
 8002ff2:	bf2c      	ite	cs
 8002ff4:	2301      	movcs	r3, #1
 8002ff6:	2300      	movcc	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	4023      	ands	r3, r4
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1b6      	bne.n	8002f70 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8003002:	bf00      	nop
 8003004:	3720      	adds	r7, #32
 8003006:	46bd      	mov	sp, r7
 8003008:	bdb0      	pop	{r4, r5, r7, pc}
 800300a:	bf00      	nop
 800300c:	20000128 	.word	0x20000128
 8003010:	2000012c 	.word	0x2000012c

08003014 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003020:	f7ff feb2 	bl	8002d88 <BSP_LCD_GetFont>
 8003024:	4603      	mov	r3, r0
 8003026:	88db      	ldrh	r3, [r3, #6]
 8003028:	88fa      	ldrh	r2, [r7, #6]
 800302a:	fb12 f303 	smulbb	r3, r2, r3
 800302e:	b299      	uxth	r1, r3
 8003030:	2303      	movs	r3, #3
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	2000      	movs	r0, #0
 8003036:	f7ff ff29 	bl	8002e8c <BSP_LCD_DisplayStringAt>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003044:	b5b0      	push	{r4, r5, r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	603a      	str	r2, [r7, #0]
 800304e:	80fb      	strh	r3, [r7, #6]
 8003050:	460b      	mov	r3, r1
 8003052:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003054:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <BSP_LCD_DrawPixel+0x88>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <BSP_LCD_DrawPixel+0x8c>)
 800305a:	2134      	movs	r1, #52	; 0x34
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3348      	adds	r3, #72	; 0x48
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d116      	bne.n	8003098 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800306a:	4b18      	ldr	r3, [pc, #96]	; (80030cc <BSP_LCD_DrawPixel+0x88>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a18      	ldr	r2, [pc, #96]	; (80030d0 <BSP_LCD_DrawPixel+0x8c>)
 8003070:	2134      	movs	r1, #52	; 0x34
 8003072:	fb01 f303 	mul.w	r3, r1, r3
 8003076:	4413      	add	r3, r2
 8003078:	335c      	adds	r3, #92	; 0x5c
 800307a:	681c      	ldr	r4, [r3, #0]
 800307c:	88bd      	ldrh	r5, [r7, #4]
 800307e:	f7ff fd9f 	bl	8002bc0 <BSP_LCD_GetXSize>
 8003082:	4603      	mov	r3, r0
 8003084:	fb03 f205 	mul.w	r2, r3, r5
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	4413      	add	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4423      	add	r3, r4
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	b292      	uxth	r2, r2
 8003094:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003096:	e015      	b.n	80030c4 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <BSP_LCD_DrawPixel+0x88>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a0c      	ldr	r2, [pc, #48]	; (80030d0 <BSP_LCD_DrawPixel+0x8c>)
 800309e:	2134      	movs	r1, #52	; 0x34
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	335c      	adds	r3, #92	; 0x5c
 80030a8:	681c      	ldr	r4, [r3, #0]
 80030aa:	88bd      	ldrh	r5, [r7, #4]
 80030ac:	f7ff fd88 	bl	8002bc0 <BSP_LCD_GetXSize>
 80030b0:	4603      	mov	r3, r0
 80030b2:	fb03 f205 	mul.w	r2, r3, r5
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4423      	add	r3, r4
 80030be:	461a      	mov	r2, r3
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	6013      	str	r3, [r2, #0]
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bdb0      	pop	{r4, r5, r7, pc}
 80030cc:	20000128 	.word	0x20000128
 80030d0:	2000996c 	.word	0x2000996c

080030d4 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80030d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af02      	add	r7, sp, #8
 80030dc:	4604      	mov	r4, r0
 80030de:	4608      	mov	r0, r1
 80030e0:	4611      	mov	r1, r2
 80030e2:	461a      	mov	r2, r3
 80030e4:	4623      	mov	r3, r4
 80030e6:	80fb      	strh	r3, [r7, #6]
 80030e8:	4603      	mov	r3, r0
 80030ea:	80bb      	strh	r3, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	807b      	strh	r3, [r7, #2]
 80030f0:	4613      	mov	r3, r2
 80030f2:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80030f8:	4b30      	ldr	r3, [pc, #192]	; (80031bc <BSP_LCD_FillRect+0xe8>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4930      	ldr	r1, [pc, #192]	; (80031c0 <BSP_LCD_FillRect+0xec>)
 80030fe:	4613      	mov	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fdf0 	bl	8002cf0 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003110:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <BSP_LCD_FillRect+0xe8>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a2b      	ldr	r2, [pc, #172]	; (80031c4 <BSP_LCD_FillRect+0xf0>)
 8003116:	2134      	movs	r1, #52	; 0x34
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	3348      	adds	r3, #72	; 0x48
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d114      	bne.n	8003150 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003126:	4b25      	ldr	r3, [pc, #148]	; (80031bc <BSP_LCD_FillRect+0xe8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a26      	ldr	r2, [pc, #152]	; (80031c4 <BSP_LCD_FillRect+0xf0>)
 800312c:	2134      	movs	r1, #52	; 0x34
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	335c      	adds	r3, #92	; 0x5c
 8003136:	681c      	ldr	r4, [r3, #0]
 8003138:	f7ff fd42 	bl	8002bc0 <BSP_LCD_GetXSize>
 800313c:	4602      	mov	r2, r0
 800313e:	88bb      	ldrh	r3, [r7, #4]
 8003140:	fb03 f202 	mul.w	r2, r3, r2
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	4413      	add	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4423      	add	r3, r4
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	e013      	b.n	8003178 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003150:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <BSP_LCD_FillRect+0xe8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <BSP_LCD_FillRect+0xf0>)
 8003156:	2134      	movs	r1, #52	; 0x34
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	335c      	adds	r3, #92	; 0x5c
 8003160:	681c      	ldr	r4, [r3, #0]
 8003162:	f7ff fd2d 	bl	8002bc0 <BSP_LCD_GetXSize>
 8003166:	4602      	mov	r2, r0
 8003168:	88bb      	ldrh	r3, [r7, #4]
 800316a:	fb03 f202 	mul.w	r2, r3, r2
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4423      	add	r3, r4
 8003176:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003178:	4b10      	ldr	r3, [pc, #64]	; (80031bc <BSP_LCD_FillRect+0xe8>)
 800317a:	681c      	ldr	r4, [r3, #0]
 800317c:	68fd      	ldr	r5, [r7, #12]
 800317e:	887e      	ldrh	r6, [r7, #2]
 8003180:	f8b7 8000 	ldrh.w	r8, [r7]
 8003184:	f7ff fd1c 	bl	8002bc0 <BSP_LCD_GetXSize>
 8003188:	4602      	mov	r2, r0
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	1ad1      	subs	r1, r2, r3
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <BSP_LCD_FillRect+0xe8>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	480b      	ldr	r0, [pc, #44]	; (80031c0 <BSP_LCD_FillRect+0xec>)
 8003194:	4613      	mov	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4403      	add	r3, r0
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	9100      	str	r1, [sp, #0]
 80031a4:	4643      	mov	r3, r8
 80031a6:	4632      	mov	r2, r6
 80031a8:	4629      	mov	r1, r5
 80031aa:	4620      	mov	r0, r4
 80031ac:	f000 f9ba 	bl	8003524 <LL_FillBuffer>
}
 80031b0:	bf00      	nop
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031ba:	bf00      	nop
 80031bc:	20000128 	.word	0x20000128
 80031c0:	2000012c 	.word	0x2000012c
 80031c4:	2000996c 	.word	0x2000996c

080031c8 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b090      	sub	sp, #64	; 0x40
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80031d2:	4b64      	ldr	r3, [pc, #400]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	4a63      	ldr	r2, [pc, #396]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 80031d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031dc:	6453      	str	r3, [r2, #68]	; 0x44
 80031de:	4b61      	ldr	r3, [pc, #388]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80031ea:	4b5e      	ldr	r3, [pc, #376]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a5d      	ldr	r2, [pc, #372]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 80031f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b5b      	ldr	r3, [pc, #364]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003202:	4b58      	ldr	r3, [pc, #352]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	4a57      	ldr	r2, [pc, #348]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 8003208:	f043 0310 	orr.w	r3, r3, #16
 800320c:	6313      	str	r3, [r2, #48]	; 0x30
 800320e:	4b55      	ldr	r3, [pc, #340]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	623b      	str	r3, [r7, #32]
 8003218:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800321a:	4b52      	ldr	r3, [pc, #328]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	4a51      	ldr	r2, [pc, #324]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 8003220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003224:	6313      	str	r3, [r2, #48]	; 0x30
 8003226:	4b4f      	ldr	r3, [pc, #316]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003232:	4b4c      	ldr	r3, [pc, #304]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	4a4b      	ldr	r2, [pc, #300]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 8003238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323c:	6313      	str	r3, [r2, #48]	; 0x30
 800323e:	4b49      	ldr	r3, [pc, #292]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	61bb      	str	r3, [r7, #24]
 8003248:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800324a:	4b46      	ldr	r3, [pc, #280]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	4a45      	ldr	r2, [pc, #276]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 8003250:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003254:	6313      	str	r3, [r2, #48]	; 0x30
 8003256:	4b43      	ldr	r3, [pc, #268]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003262:	4b40      	ldr	r3, [pc, #256]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	4a3f      	ldr	r2, [pc, #252]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 8003268:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800326c:	6313      	str	r3, [r2, #48]	; 0x30
 800326e:	4b3d      	ldr	r3, [pc, #244]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800327a:	4b3a      	ldr	r3, [pc, #232]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	4a39      	ldr	r2, [pc, #228]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 8003280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003284:	6313      	str	r3, [r2, #48]	; 0x30
 8003286:	4b37      	ldr	r3, [pc, #220]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003292:	4b34      	ldr	r3, [pc, #208]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	4a33      	ldr	r2, [pc, #204]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 8003298:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800329c:	6313      	str	r3, [r2, #48]	; 0x30
 800329e:	4b31      	ldr	r3, [pc, #196]	; (8003364 <BSP_LCD_MspInit+0x19c>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80032aa:	2310      	movs	r3, #16
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80032ae:	2302      	movs	r3, #2
 80032b0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80032b6:	2302      	movs	r3, #2
 80032b8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80032ba:	230e      	movs	r3, #14
 80032bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80032be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032c2:	4619      	mov	r1, r3
 80032c4:	4828      	ldr	r0, [pc, #160]	; (8003368 <BSP_LCD_MspInit+0x1a0>)
 80032c6:	f002 ff2b 	bl	8006120 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80032ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80032d4:	2309      	movs	r3, #9
 80032d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80032d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032dc:	4619      	mov	r1, r3
 80032de:	4823      	ldr	r0, [pc, #140]	; (800336c <BSP_LCD_MspInit+0x1a4>)
 80032e0:	f002 ff1e 	bl	8006120 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80032e4:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80032ea:	2302      	movs	r3, #2
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80032ee:	230e      	movs	r3, #14
 80032f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80032f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032f6:	4619      	mov	r1, r3
 80032f8:	481d      	ldr	r0, [pc, #116]	; (8003370 <BSP_LCD_MspInit+0x1a8>)
 80032fa:	f002 ff11 	bl	8006120 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80032fe:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003302:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003304:	2302      	movs	r3, #2
 8003306:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003308:	230e      	movs	r3, #14
 800330a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800330c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003310:	4619      	mov	r1, r3
 8003312:	4818      	ldr	r0, [pc, #96]	; (8003374 <BSP_LCD_MspInit+0x1ac>)
 8003314:	f002 ff04 	bl	8006120 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003318:	23f7      	movs	r3, #247	; 0xf7
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800331c:	2302      	movs	r3, #2
 800331e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003320:	230e      	movs	r3, #14
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003328:	4619      	mov	r1, r3
 800332a:	4813      	ldr	r0, [pc, #76]	; (8003378 <BSP_LCD_MspInit+0x1b0>)
 800332c:	f002 fef8 	bl	8006120 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003334:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003336:	2301      	movs	r3, #1
 8003338:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800333a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800333e:	4619      	mov	r1, r3
 8003340:	480b      	ldr	r0, [pc, #44]	; (8003370 <BSP_LCD_MspInit+0x1a8>)
 8003342:	f002 feed 	bl	8006120 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003346:	2308      	movs	r3, #8
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800334a:	2301      	movs	r3, #1
 800334c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800334e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003352:	4619      	mov	r1, r3
 8003354:	4808      	ldr	r0, [pc, #32]	; (8003378 <BSP_LCD_MspInit+0x1b0>)
 8003356:	f002 fee3 	bl	8006120 <HAL_GPIO_Init>
}
 800335a:	bf00      	nop
 800335c:	3740      	adds	r7, #64	; 0x40
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
 8003368:	40021000 	.word	0x40021000
 800336c:	40021800 	.word	0x40021800
 8003370:	40022000 	.word	0x40022000
 8003374:	40022400 	.word	0x40022400
 8003378:	40022800 	.word	0x40022800

0800337c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003386:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <BSP_LCD_ClockConfig+0x34>)
 8003388:	2208      	movs	r2, #8
 800338a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <BSP_LCD_ClockConfig+0x34>)
 800338e:	22c0      	movs	r2, #192	; 0xc0
 8003390:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003392:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <BSP_LCD_ClockConfig+0x34>)
 8003394:	2205      	movs	r2, #5
 8003396:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <BSP_LCD_ClockConfig+0x34>)
 800339a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800339e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80033a0:	4803      	ldr	r0, [pc, #12]	; (80033b0 <BSP_LCD_ClockConfig+0x34>)
 80033a2:	f006 f863 	bl	800946c <HAL_RCCEx_PeriphCLKConfig>
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000144 	.word	0x20000144

080033b4 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	603a      	str	r2, [r7, #0]
 80033be:	80fb      	strh	r3, [r7, #6]
 80033c0:	460b      	mov	r3, r1
 80033c2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61fb      	str	r3, [r7, #28]
 80033c8:	2300      	movs	r3, #0
 80033ca:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80033cc:	4b53      	ldr	r3, [pc, #332]	; (800351c <DrawChar+0x168>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4953      	ldr	r1, [pc, #332]	; (8003520 <DrawChar+0x16c>)
 80033d2:	4613      	mov	r3, r2
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	3308      	adds	r3, #8
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	88db      	ldrh	r3, [r3, #6]
 80033e2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80033e4:	4b4d      	ldr	r3, [pc, #308]	; (800351c <DrawChar+0x168>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	494d      	ldr	r1, [pc, #308]	; (8003520 <DrawChar+0x16c>)
 80033ea:	4613      	mov	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	3308      	adds	r3, #8
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	889b      	ldrh	r3, [r3, #4]
 80033fa:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80033fc:	8a3b      	ldrh	r3, [r7, #16]
 80033fe:	3307      	adds	r3, #7
 8003400:	2b00      	cmp	r3, #0
 8003402:	da00      	bge.n	8003406 <DrawChar+0x52>
 8003404:	3307      	adds	r3, #7
 8003406:	10db      	asrs	r3, r3, #3
 8003408:	b2db      	uxtb	r3, r3
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	b2da      	uxtb	r2, r3
 800340e:	8a3b      	ldrh	r3, [r7, #16]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	e076      	b.n	800350a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800341c:	8a3b      	ldrh	r3, [r7, #16]
 800341e:	3307      	adds	r3, #7
 8003420:	2b00      	cmp	r3, #0
 8003422:	da00      	bge.n	8003426 <DrawChar+0x72>
 8003424:	3307      	adds	r3, #7
 8003426:	10db      	asrs	r3, r3, #3
 8003428:	461a      	mov	r2, r3
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fb03 f302 	mul.w	r3, r3, r2
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	4413      	add	r3, r2
 8003434:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003436:	8a3b      	ldrh	r3, [r7, #16]
 8003438:	3307      	adds	r3, #7
 800343a:	2b00      	cmp	r3, #0
 800343c:	da00      	bge.n	8003440 <DrawChar+0x8c>
 800343e:	3307      	adds	r3, #7
 8003440:	10db      	asrs	r3, r3, #3
 8003442:	2b01      	cmp	r3, #1
 8003444:	d002      	beq.n	800344c <DrawChar+0x98>
 8003446:	2b02      	cmp	r3, #2
 8003448:	d004      	beq.n	8003454 <DrawChar+0xa0>
 800344a:	e00c      	b.n	8003466 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	617b      	str	r3, [r7, #20]
      break;
 8003452:	e016      	b.n	8003482 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	3201      	adds	r2, #1
 800345e:	7812      	ldrb	r2, [r2, #0]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
      break;
 8003464:	e00d      	b.n	8003482 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	041a      	lsls	r2, r3, #16
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	3301      	adds	r3, #1
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	4313      	orrs	r3, r2
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	3202      	adds	r2, #2
 800347a:	7812      	ldrb	r2, [r2, #0]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
      break;
 8003480:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003482:	2300      	movs	r3, #0
 8003484:	61bb      	str	r3, [r7, #24]
 8003486:	e036      	b.n	80034f6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003488:	8a3a      	ldrh	r2, [r7, #16]
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	1ad2      	subs	r2, r2, r3
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	4413      	add	r3, r2
 8003492:	3b01      	subs	r3, #1
 8003494:	2201      	movs	r2, #1
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	461a      	mov	r2, r3
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d012      	beq.n	80034ca <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	4413      	add	r3, r2
 80034ac:	b298      	uxth	r0, r3
 80034ae:	4b1b      	ldr	r3, [pc, #108]	; (800351c <DrawChar+0x168>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	491b      	ldr	r1, [pc, #108]	; (8003520 <DrawChar+0x16c>)
 80034b4:	4613      	mov	r3, r2
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	88bb      	ldrh	r3, [r7, #4]
 80034c2:	4619      	mov	r1, r3
 80034c4:	f7ff fdbe 	bl	8003044 <BSP_LCD_DrawPixel>
 80034c8:	e012      	b.n	80034f0 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	4413      	add	r3, r2
 80034d2:	b298      	uxth	r0, r3
 80034d4:	4b11      	ldr	r3, [pc, #68]	; (800351c <DrawChar+0x168>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	4911      	ldr	r1, [pc, #68]	; (8003520 <DrawChar+0x16c>)
 80034da:	4613      	mov	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3304      	adds	r3, #4
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	88bb      	ldrh	r3, [r7, #4]
 80034ea:	4619      	mov	r1, r3
 80034ec:	f7ff fdaa 	bl	8003044 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	3301      	adds	r3, #1
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	8a3b      	ldrh	r3, [r7, #16]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d3c4      	bcc.n	8003488 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80034fe:	88bb      	ldrh	r3, [r7, #4]
 8003500:	3301      	adds	r3, #1
 8003502:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	3301      	adds	r3, #1
 8003508:	61fb      	str	r3, [r7, #28]
 800350a:	8a7b      	ldrh	r3, [r7, #18]
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	429a      	cmp	r2, r3
 8003510:	d384      	bcc.n	800341c <DrawChar+0x68>
  }
}
 8003512:	bf00      	nop
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000128 	.word	0x20000128
 8003520:	2000012c 	.word	0x2000012c

08003524 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003532:	4b1e      	ldr	r3, [pc, #120]	; (80035ac <LL_FillBuffer+0x88>)
 8003534:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003538:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800353a:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <LL_FillBuffer+0x8c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <LL_FillBuffer+0x90>)
 8003540:	2134      	movs	r1, #52	; 0x34
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	4413      	add	r3, r2
 8003548:	3348      	adds	r3, #72	; 0x48
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b02      	cmp	r3, #2
 800354e:	d103      	bne.n	8003558 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003550:	4b16      	ldr	r3, [pc, #88]	; (80035ac <LL_FillBuffer+0x88>)
 8003552:	2202      	movs	r2, #2
 8003554:	609a      	str	r2, [r3, #8]
 8003556:	e002      	b.n	800355e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003558:	4b14      	ldr	r3, [pc, #80]	; (80035ac <LL_FillBuffer+0x88>)
 800355a:	2200      	movs	r2, #0
 800355c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800355e:	4a13      	ldr	r2, [pc, #76]	; (80035ac <LL_FillBuffer+0x88>)
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <LL_FillBuffer+0x88>)
 8003566:	4a14      	ldr	r2, [pc, #80]	; (80035b8 <LL_FillBuffer+0x94>)
 8003568:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800356a:	4810      	ldr	r0, [pc, #64]	; (80035ac <LL_FillBuffer+0x88>)
 800356c:	f001 f8b6 	bl	80046dc <HAL_DMA2D_Init>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d115      	bne.n	80035a2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003576:	68f9      	ldr	r1, [r7, #12]
 8003578:	480c      	ldr	r0, [pc, #48]	; (80035ac <LL_FillBuffer+0x88>)
 800357a:	f001 fb1d 	bl	8004bb8 <HAL_DMA2D_ConfigLayer>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10e      	bne.n	80035a2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69f9      	ldr	r1, [r7, #28]
 800358e:	4807      	ldr	r0, [pc, #28]	; (80035ac <LL_FillBuffer+0x88>)
 8003590:	f001 f8ee 	bl	8004770 <HAL_DMA2D_Start>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d103      	bne.n	80035a2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800359a:	210a      	movs	r1, #10
 800359c:	4803      	ldr	r0, [pc, #12]	; (80035ac <LL_FillBuffer+0x88>)
 800359e:	f001 f912 	bl	80047c6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	200000e8 	.word	0x200000e8
 80035b0:	20000128 	.word	0x20000128
 80035b4:	2000996c 	.word	0x2000996c
 80035b8:	4002b000 	.word	0x4002b000

080035bc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80035c0:	4b29      	ldr	r3, [pc, #164]	; (8003668 <BSP_SDRAM_Init+0xac>)
 80035c2:	4a2a      	ldr	r2, [pc, #168]	; (800366c <BSP_SDRAM_Init+0xb0>)
 80035c4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80035c6:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <BSP_SDRAM_Init+0xb4>)
 80035c8:	2202      	movs	r2, #2
 80035ca:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80035cc:	4b28      	ldr	r3, [pc, #160]	; (8003670 <BSP_SDRAM_Init+0xb4>)
 80035ce:	2207      	movs	r2, #7
 80035d0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80035d2:	4b27      	ldr	r3, [pc, #156]	; (8003670 <BSP_SDRAM_Init+0xb4>)
 80035d4:	2204      	movs	r2, #4
 80035d6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80035d8:	4b25      	ldr	r3, [pc, #148]	; (8003670 <BSP_SDRAM_Init+0xb4>)
 80035da:	2207      	movs	r2, #7
 80035dc:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <BSP_SDRAM_Init+0xb4>)
 80035e0:	2202      	movs	r2, #2
 80035e2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80035e4:	4b22      	ldr	r3, [pc, #136]	; (8003670 <BSP_SDRAM_Init+0xb4>)
 80035e6:	2202      	movs	r2, #2
 80035e8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80035ea:	4b21      	ldr	r3, [pc, #132]	; (8003670 <BSP_SDRAM_Init+0xb4>)
 80035ec:	2202      	movs	r2, #2
 80035ee:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80035f0:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <BSP_SDRAM_Init+0xac>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80035f6:	4b1c      	ldr	r3, [pc, #112]	; (8003668 <BSP_SDRAM_Init+0xac>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80035fc:	4b1a      	ldr	r3, [pc, #104]	; (8003668 <BSP_SDRAM_Init+0xac>)
 80035fe:	2204      	movs	r2, #4
 8003600:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003602:	4b19      	ldr	r3, [pc, #100]	; (8003668 <BSP_SDRAM_Init+0xac>)
 8003604:	2210      	movs	r2, #16
 8003606:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003608:	4b17      	ldr	r3, [pc, #92]	; (8003668 <BSP_SDRAM_Init+0xac>)
 800360a:	2240      	movs	r2, #64	; 0x40
 800360c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800360e:	4b16      	ldr	r3, [pc, #88]	; (8003668 <BSP_SDRAM_Init+0xac>)
 8003610:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003614:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003616:	4b14      	ldr	r3, [pc, #80]	; (8003668 <BSP_SDRAM_Init+0xac>)
 8003618:	2200      	movs	r2, #0
 800361a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800361c:	4b12      	ldr	r3, [pc, #72]	; (8003668 <BSP_SDRAM_Init+0xac>)
 800361e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003622:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003624:	4b10      	ldr	r3, [pc, #64]	; (8003668 <BSP_SDRAM_Init+0xac>)
 8003626:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800362a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800362c:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <BSP_SDRAM_Init+0xac>)
 800362e:	2200      	movs	r2, #0
 8003630:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003632:	2100      	movs	r1, #0
 8003634:	480c      	ldr	r0, [pc, #48]	; (8003668 <BSP_SDRAM_Init+0xac>)
 8003636:	f000 f87f 	bl	8003738 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800363a:	490d      	ldr	r1, [pc, #52]	; (8003670 <BSP_SDRAM_Init+0xb4>)
 800363c:	480a      	ldr	r0, [pc, #40]	; (8003668 <BSP_SDRAM_Init+0xac>)
 800363e:	f007 f9c3 	bl	800a9c8 <HAL_SDRAM_Init>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003648:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <BSP_SDRAM_Init+0xb8>)
 800364a:	2201      	movs	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	e002      	b.n	8003656 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003650:	4b08      	ldr	r3, [pc, #32]	; (8003674 <BSP_SDRAM_Init+0xb8>)
 8003652:	2200      	movs	r2, #0
 8003654:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003656:	f240 6003 	movw	r0, #1539	; 0x603
 800365a:	f000 f80d 	bl	8003678 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <BSP_SDRAM_Init+0xb8>)
 8003660:	781b      	ldrb	r3, [r3, #0]
}
 8003662:	4618      	mov	r0, r3
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20009a14 	.word	0x20009a14
 800366c:	a0000140 	.word	0xa0000140
 8003670:	200001c8 	.word	0x200001c8
 8003674:	20000004 	.word	0x20000004

08003678 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003684:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003686:	2201      	movs	r2, #1
 8003688:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800368a:	4b29      	ldr	r3, [pc, #164]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800368c:	2210      	movs	r2, #16
 800368e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003690:	4b27      	ldr	r3, [pc, #156]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003692:	2201      	movs	r2, #1
 8003694:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003696:	4b26      	ldr	r3, [pc, #152]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003698:	2200      	movs	r2, #0
 800369a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800369c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036a0:	4923      	ldr	r1, [pc, #140]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036a2:	4824      	ldr	r0, [pc, #144]	; (8003734 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036a4:	f007 f9c4 	bl	800aa30 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80036a8:	2001      	movs	r0, #1
 80036aa:	f000 f96b 	bl	8003984 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80036ae:	4b20      	ldr	r3, [pc, #128]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036b0:	2202      	movs	r2, #2
 80036b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80036b4:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036b6:	2210      	movs	r2, #16
 80036b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80036ba:	4b1d      	ldr	r3, [pc, #116]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036bc:	2201      	movs	r2, #1
 80036be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80036c0:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80036c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036ca:	4919      	ldr	r1, [pc, #100]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036cc:	4819      	ldr	r0, [pc, #100]	; (8003734 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036ce:	f007 f9af 	bl	800aa30 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80036d2:	4b17      	ldr	r3, [pc, #92]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036d4:	2203      	movs	r2, #3
 80036d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80036d8:	4b15      	ldr	r3, [pc, #84]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036da:	2210      	movs	r2, #16
 80036dc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036e0:	2208      	movs	r2, #8
 80036e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80036ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036ee:	4910      	ldr	r1, [pc, #64]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036f0:	4810      	ldr	r0, [pc, #64]	; (8003734 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036f2:	f007 f99d 	bl	800aa30 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80036f6:	f44f 7308 	mov.w	r3, #544	; 0x220
 80036fa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036fe:	2204      	movs	r2, #4
 8003700:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003702:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003704:	2210      	movs	r2, #16
 8003706:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003708:	4b09      	ldr	r3, [pc, #36]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800370a:	2201      	movs	r2, #1
 800370c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4a07      	ldr	r2, [pc, #28]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003712:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003718:	4905      	ldr	r1, [pc, #20]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800371a:	4806      	ldr	r0, [pc, #24]	; (8003734 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800371c:	f007 f988 	bl	800aa30 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4804      	ldr	r0, [pc, #16]	; (8003734 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003724:	f007 f9af 	bl	800aa86 <HAL_SDRAM_ProgramRefreshRate>
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	200001e4 	.word	0x200001e4
 8003734:	20009a14 	.word	0x20009a14

08003738 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003738:	b580      	push	{r7, lr}
 800373a:	b090      	sub	sp, #64	; 0x40
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003742:	4b70      	ldr	r3, [pc, #448]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	4a6f      	ldr	r2, [pc, #444]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6393      	str	r3, [r2, #56]	; 0x38
 800374e:	4b6d      	ldr	r3, [pc, #436]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800375a:	4b6a      	ldr	r3, [pc, #424]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	4a69      	ldr	r2, [pc, #420]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 8003760:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003764:	6313      	str	r3, [r2, #48]	; 0x30
 8003766:	4b67      	ldr	r3, [pc, #412]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003772:	4b64      	ldr	r3, [pc, #400]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	4a63      	ldr	r2, [pc, #396]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 8003778:	f043 0304 	orr.w	r3, r3, #4
 800377c:	6313      	str	r3, [r2, #48]	; 0x30
 800377e:	4b61      	ldr	r3, [pc, #388]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	623b      	str	r3, [r7, #32]
 8003788:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800378a:	4b5e      	ldr	r3, [pc, #376]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	4a5d      	ldr	r2, [pc, #372]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 8003790:	f043 0308 	orr.w	r3, r3, #8
 8003794:	6313      	str	r3, [r2, #48]	; 0x30
 8003796:	4b5b      	ldr	r3, [pc, #364]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037a2:	4b58      	ldr	r3, [pc, #352]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	4a57      	ldr	r2, [pc, #348]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 80037a8:	f043 0310 	orr.w	r3, r3, #16
 80037ac:	6313      	str	r3, [r2, #48]	; 0x30
 80037ae:	4b55      	ldr	r3, [pc, #340]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	61bb      	str	r3, [r7, #24]
 80037b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037ba:	4b52      	ldr	r3, [pc, #328]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4a51      	ldr	r2, [pc, #324]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 80037c0:	f043 0320 	orr.w	r3, r3, #32
 80037c4:	6313      	str	r3, [r2, #48]	; 0x30
 80037c6:	4b4f      	ldr	r3, [pc, #316]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80037d2:	4b4c      	ldr	r3, [pc, #304]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	4a4b      	ldr	r2, [pc, #300]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 80037d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037dc:	6313      	str	r3, [r2, #48]	; 0x30
 80037de:	4b49      	ldr	r3, [pc, #292]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80037ea:	4b46      	ldr	r3, [pc, #280]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	4a45      	ldr	r2, [pc, #276]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 80037f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f4:	6313      	str	r3, [r2, #48]	; 0x30
 80037f6:	4b43      	ldr	r3, [pc, #268]	; (8003904 <BSP_SDRAM_MspInit+0x1cc>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003802:	2302      	movs	r3, #2
 8003804:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003806:	2301      	movs	r3, #1
 8003808:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800380a:	2302      	movs	r3, #2
 800380c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800380e:	230c      	movs	r3, #12
 8003810:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003812:	2308      	movs	r3, #8
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800381a:	4619      	mov	r1, r3
 800381c:	483a      	ldr	r0, [pc, #232]	; (8003908 <BSP_SDRAM_MspInit+0x1d0>)
 800381e:	f002 fc7f 	bl	8006120 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003822:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800382c:	4619      	mov	r1, r3
 800382e:	4837      	ldr	r0, [pc, #220]	; (800390c <BSP_SDRAM_MspInit+0x1d4>)
 8003830:	f002 fc76 	bl	8006120 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003834:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800383a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800383e:	4619      	mov	r1, r3
 8003840:	4833      	ldr	r0, [pc, #204]	; (8003910 <BSP_SDRAM_MspInit+0x1d8>)
 8003842:	f002 fc6d 	bl	8006120 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003846:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800384c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003850:	4619      	mov	r1, r3
 8003852:	4830      	ldr	r0, [pc, #192]	; (8003914 <BSP_SDRAM_MspInit+0x1dc>)
 8003854:	f002 fc64 	bl	8006120 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003858:	f248 1333 	movw	r3, #33075	; 0x8133
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800385e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003862:	4619      	mov	r1, r3
 8003864:	482c      	ldr	r0, [pc, #176]	; (8003918 <BSP_SDRAM_MspInit+0x1e0>)
 8003866:	f002 fc5b 	bl	8006120 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800386a:	2328      	movs	r3, #40	; 0x28
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800386e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003872:	4619      	mov	r1, r3
 8003874:	4829      	ldr	r0, [pc, #164]	; (800391c <BSP_SDRAM_MspInit+0x1e4>)
 8003876:	f002 fc53 	bl	8006120 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800387a:	4b29      	ldr	r3, [pc, #164]	; (8003920 <BSP_SDRAM_MspInit+0x1e8>)
 800387c:	2200      	movs	r2, #0
 800387e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003880:	4b27      	ldr	r3, [pc, #156]	; (8003920 <BSP_SDRAM_MspInit+0x1e8>)
 8003882:	2280      	movs	r2, #128	; 0x80
 8003884:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003886:	4b26      	ldr	r3, [pc, #152]	; (8003920 <BSP_SDRAM_MspInit+0x1e8>)
 8003888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800388c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <BSP_SDRAM_MspInit+0x1e8>)
 8003890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003894:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003896:	4b22      	ldr	r3, [pc, #136]	; (8003920 <BSP_SDRAM_MspInit+0x1e8>)
 8003898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800389c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <BSP_SDRAM_MspInit+0x1e8>)
 80038a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038a4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80038a6:	4b1e      	ldr	r3, [pc, #120]	; (8003920 <BSP_SDRAM_MspInit+0x1e8>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80038ac:	4b1c      	ldr	r3, [pc, #112]	; (8003920 <BSP_SDRAM_MspInit+0x1e8>)
 80038ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038b2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <BSP_SDRAM_MspInit+0x1e8>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80038ba:	4b19      	ldr	r3, [pc, #100]	; (8003920 <BSP_SDRAM_MspInit+0x1e8>)
 80038bc:	2203      	movs	r2, #3
 80038be:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80038c0:	4b17      	ldr	r3, [pc, #92]	; (8003920 <BSP_SDRAM_MspInit+0x1e8>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80038c6:	4b16      	ldr	r3, [pc, #88]	; (8003920 <BSP_SDRAM_MspInit+0x1e8>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80038cc:	4b14      	ldr	r3, [pc, #80]	; (8003920 <BSP_SDRAM_MspInit+0x1e8>)
 80038ce:	4a15      	ldr	r2, [pc, #84]	; (8003924 <BSP_SDRAM_MspInit+0x1ec>)
 80038d0:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a12      	ldr	r2, [pc, #72]	; (8003920 <BSP_SDRAM_MspInit+0x1e8>)
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
 80038d8:	4a11      	ldr	r2, [pc, #68]	; (8003920 <BSP_SDRAM_MspInit+0x1e8>)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80038de:	4810      	ldr	r0, [pc, #64]	; (8003920 <BSP_SDRAM_MspInit+0x1e8>)
 80038e0:	f000 fdee 	bl	80044c0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80038e4:	480e      	ldr	r0, [pc, #56]	; (8003920 <BSP_SDRAM_MspInit+0x1e8>)
 80038e6:	f000 fd3d 	bl	8004364 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80038ea:	2200      	movs	r2, #0
 80038ec:	210f      	movs	r1, #15
 80038ee:	2038      	movs	r0, #56	; 0x38
 80038f0:	f000 fbaa 	bl	8004048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80038f4:	2038      	movs	r0, #56	; 0x38
 80038f6:	f000 fbc3 	bl	8004080 <HAL_NVIC_EnableIRQ>
}
 80038fa:	bf00      	nop
 80038fc:	3740      	adds	r7, #64	; 0x40
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40023800 	.word	0x40023800
 8003908:	40020800 	.word	0x40020800
 800390c:	40020c00 	.word	0x40020c00
 8003910:	40021000 	.word	0x40021000
 8003914:	40021400 	.word	0x40021400
 8003918:	40021800 	.word	0x40021800
 800391c:	40021c00 	.word	0x40021c00
 8003920:	200001f4 	.word	0x200001f4
 8003924:	40026410 	.word	0x40026410

08003928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800392c:	2003      	movs	r0, #3
 800392e:	f000 fb80 	bl	8004032 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003932:	2000      	movs	r0, #0
 8003934:	f7fe ff52 	bl	80027dc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003938:	f7fe f848 	bl	80019cc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_IncTick+0x20>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_IncTick+0x24>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4413      	add	r3, r2
 8003954:	4a04      	ldr	r2, [pc, #16]	; (8003968 <HAL_IncTick+0x24>)
 8003956:	6013      	str	r3, [r2, #0]
}
 8003958:	bf00      	nop
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	2000000c 	.word	0x2000000c
 8003968:	20009a48 	.word	0x20009a48

0800396c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return uwTick;
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <HAL_GetTick+0x14>)
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20009a48 	.word	0x20009a48

08003984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800398c:	f7ff ffee 	bl	800396c <HAL_GetTick>
 8003990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800399c:	d005      	beq.n	80039aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800399e:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <HAL_Delay+0x40>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039aa:	bf00      	nop
 80039ac:	f7ff ffde 	bl	800396c <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d8f7      	bhi.n	80039ac <HAL_Delay+0x28>
  {
  }
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	2000000c 	.word	0x2000000c

080039c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e031      	b.n	8003a42 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fe f818 	bl	8001a1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d116      	bne.n	8003a34 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a0a:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <HAL_ADC_Init+0x84>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	f043 0202 	orr.w	r2, r3, #2
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f964 	bl	8003ce4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f023 0303 	bic.w	r3, r3, #3
 8003a2a:	f043 0201 	orr.w	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40
 8003a32:	e001      	b.n	8003a38 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	ffffeefd 	.word	0xffffeefd

08003a50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x1c>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e12a      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x272>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b09      	cmp	r3, #9
 8003a7a:	d93a      	bls.n	8003af2 <HAL_ADC_ConfigChannel+0xa2>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a84:	d035      	beq.n	8003af2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68d9      	ldr	r1, [r3, #12]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	461a      	mov	r2, r3
 8003a94:	4613      	mov	r3, r2
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	4413      	add	r3, r2
 8003a9a:	3b1e      	subs	r3, #30
 8003a9c:	2207      	movs	r2, #7
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	400a      	ands	r2, r1
 8003aaa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a87      	ldr	r2, [pc, #540]	; (8003cd0 <HAL_ADC_ConfigChannel+0x280>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d10a      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68d9      	ldr	r1, [r3, #12]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	061a      	lsls	r2, r3, #24
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aca:	e035      	b.n	8003b38 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68d9      	ldr	r1, [r3, #12]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	4618      	mov	r0, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	4403      	add	r3, r0
 8003ae4:	3b1e      	subs	r3, #30
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003af0:	e022      	b.n	8003b38 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6919      	ldr	r1, [r3, #16]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	4613      	mov	r3, r2
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	4413      	add	r3, r2
 8003b06:	2207      	movs	r2, #7
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43da      	mvns	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	400a      	ands	r2, r1
 8003b14:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6919      	ldr	r1, [r3, #16]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	4618      	mov	r0, r3
 8003b28:	4603      	mov	r3, r0
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4403      	add	r3, r0
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b06      	cmp	r3, #6
 8003b3e:	d824      	bhi.n	8003b8a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	3b05      	subs	r3, #5
 8003b52:	221f      	movs	r2, #31
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43da      	mvns	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	400a      	ands	r2, r1
 8003b60:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	4618      	mov	r0, r3
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	3b05      	subs	r3, #5
 8003b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	635a      	str	r2, [r3, #52]	; 0x34
 8003b88:	e04c      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b0c      	cmp	r3, #12
 8003b90:	d824      	bhi.n	8003bdc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3b23      	subs	r3, #35	; 0x23
 8003ba4:	221f      	movs	r2, #31
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43da      	mvns	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	400a      	ands	r2, r1
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	3b23      	subs	r3, #35	; 0x23
 8003bce:	fa00 f203 	lsl.w	r2, r0, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30
 8003bda:	e023      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	3b41      	subs	r3, #65	; 0x41
 8003bee:	221f      	movs	r2, #31
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43da      	mvns	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	400a      	ands	r2, r1
 8003bfc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	3b41      	subs	r3, #65	; 0x41
 8003c18:	fa00 f203 	lsl.w	r2, r0, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a2a      	ldr	r2, [pc, #168]	; (8003cd4 <HAL_ADC_ConfigChannel+0x284>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10a      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x1f4>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c36:	d105      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003c38:	4b27      	ldr	r3, [pc, #156]	; (8003cd8 <HAL_ADC_ConfigChannel+0x288>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <HAL_ADC_ConfigChannel+0x288>)
 8003c3e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003c42:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a22      	ldr	r2, [pc, #136]	; (8003cd4 <HAL_ADC_ConfigChannel+0x284>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d109      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x212>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b12      	cmp	r3, #18
 8003c54:	d105      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003c56:	4b20      	ldr	r3, [pc, #128]	; (8003cd8 <HAL_ADC_ConfigChannel+0x288>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4a1f      	ldr	r2, [pc, #124]	; (8003cd8 <HAL_ADC_ConfigChannel+0x288>)
 8003c5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c60:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <HAL_ADC_ConfigChannel+0x284>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d125      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x268>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a17      	ldr	r2, [pc, #92]	; (8003cd0 <HAL_ADC_ConfigChannel+0x280>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d003      	beq.n	8003c7e <HAL_ADC_ConfigChannel+0x22e>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b11      	cmp	r3, #17
 8003c7c:	d11c      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003c7e:	4b16      	ldr	r3, [pc, #88]	; (8003cd8 <HAL_ADC_ConfigChannel+0x288>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4a15      	ldr	r2, [pc, #84]	; (8003cd8 <HAL_ADC_ConfigChannel+0x288>)
 8003c84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c88:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a10      	ldr	r2, [pc, #64]	; (8003cd0 <HAL_ADC_ConfigChannel+0x280>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d111      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003c94:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <HAL_ADC_ConfigChannel+0x28c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a11      	ldr	r2, [pc, #68]	; (8003ce0 <HAL_ADC_ConfigChannel+0x290>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	0c9a      	lsrs	r2, r3, #18
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003caa:	e002      	b.n	8003cb2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1f9      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	10000012 	.word	0x10000012
 8003cd4:	40012000 	.word	0x40012000
 8003cd8:	40012300 	.word	0x40012300
 8003cdc:	20000000 	.word	0x20000000
 8003ce0:	431bde83 	.word	0x431bde83

08003ce4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003cec:	4b78      	ldr	r3, [pc, #480]	; (8003ed0 <ADC_Init+0x1ec>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4a77      	ldr	r2, [pc, #476]	; (8003ed0 <ADC_Init+0x1ec>)
 8003cf2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003cf6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003cf8:	4b75      	ldr	r3, [pc, #468]	; (8003ed0 <ADC_Init+0x1ec>)
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4973      	ldr	r1, [pc, #460]	; (8003ed0 <ADC_Init+0x1ec>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	021a      	lsls	r2, r3, #8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6859      	ldr	r1, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6899      	ldr	r1, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	4a58      	ldr	r2, [pc, #352]	; (8003ed4 <ADC_Init+0x1f0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d022      	beq.n	8003dbe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6899      	ldr	r1, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003da8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6899      	ldr	r1, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	609a      	str	r2, [r3, #8]
 8003dbc:	e00f      	b.n	8003dde <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ddc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0202 	bic.w	r2, r2, #2
 8003dec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6899      	ldr	r1, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	005a      	lsls	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01b      	beq.n	8003e44 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6859      	ldr	r1, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	3b01      	subs	r3, #1
 8003e38:	035a      	lsls	r2, r3, #13
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	e007      	b.n	8003e54 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	051a      	lsls	r2, r3, #20
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6899      	ldr	r1, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e96:	025a      	lsls	r2, r3, #9
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6899      	ldr	r1, [r3, #8]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	029a      	lsls	r2, r3, #10
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	609a      	str	r2, [r3, #8]
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	40012300 	.word	0x40012300
 8003ed4:	0f000001 	.word	0x0f000001

08003ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <__NVIC_SetPriorityGrouping+0x40>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f00:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <__NVIC_SetPriorityGrouping+0x44>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f06:	4a04      	ldr	r2, [pc, #16]	; (8003f18 <__NVIC_SetPriorityGrouping+0x40>)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	60d3      	str	r3, [r2, #12]
}
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	e000ed00 	.word	0xe000ed00
 8003f1c:	05fa0000 	.word	0x05fa0000

08003f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f24:	4b04      	ldr	r3, [pc, #16]	; (8003f38 <__NVIC_GetPriorityGrouping+0x18>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	0a1b      	lsrs	r3, r3, #8
 8003f2a:	f003 0307 	and.w	r3, r3, #7
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	4603      	mov	r3, r0
 8003f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	db0b      	blt.n	8003f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	f003 021f 	and.w	r2, r3, #31
 8003f54:	4907      	ldr	r1, [pc, #28]	; (8003f74 <__NVIC_EnableIRQ+0x38>)
 8003f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	e000e100 	.word	0xe000e100

08003f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	6039      	str	r1, [r7, #0]
 8003f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	db0a      	blt.n	8003fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	490c      	ldr	r1, [pc, #48]	; (8003fc4 <__NVIC_SetPriority+0x4c>)
 8003f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f96:	0112      	lsls	r2, r2, #4
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fa0:	e00a      	b.n	8003fb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	4908      	ldr	r1, [pc, #32]	; (8003fc8 <__NVIC_SetPriority+0x50>)
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	3b04      	subs	r3, #4
 8003fb0:	0112      	lsls	r2, r2, #4
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	761a      	strb	r2, [r3, #24]
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	e000e100 	.word	0xe000e100
 8003fc8:	e000ed00 	.word	0xe000ed00

08003fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b089      	sub	sp, #36	; 0x24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f1c3 0307 	rsb	r3, r3, #7
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	bf28      	it	cs
 8003fea:	2304      	movcs	r3, #4
 8003fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	2b06      	cmp	r3, #6
 8003ff4:	d902      	bls.n	8003ffc <NVIC_EncodePriority+0x30>
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	3b03      	subs	r3, #3
 8003ffa:	e000      	b.n	8003ffe <NVIC_EncodePriority+0x32>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43da      	mvns	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	401a      	ands	r2, r3
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004014:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	fa01 f303 	lsl.w	r3, r1, r3
 800401e:	43d9      	mvns	r1, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004024:	4313      	orrs	r3, r2
         );
}
 8004026:	4618      	mov	r0, r3
 8004028:	3724      	adds	r7, #36	; 0x24
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff ff4c 	bl	8003ed8 <__NVIC_SetPriorityGrouping>
}
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800405a:	f7ff ff61 	bl	8003f20 <__NVIC_GetPriorityGrouping>
 800405e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	6978      	ldr	r0, [r7, #20]
 8004066:	f7ff ffb1 	bl	8003fcc <NVIC_EncodePriority>
 800406a:	4602      	mov	r2, r0
 800406c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004070:	4611      	mov	r1, r2
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff ff80 	bl	8003f78 <__NVIC_SetPriority>
}
 8004078:	bf00      	nop
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800408a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ff54 	bl	8003f3c <__NVIC_EnableIRQ>
}
 8004094:	bf00      	nop
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e054      	b.n	8004158 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	7f5b      	ldrb	r3, [r3, #29]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d105      	bne.n	80040c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fd fd06 	bl	8001ad0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	791b      	ldrb	r3, [r3, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10c      	bne.n	80040ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a22      	ldr	r2, [pc, #136]	; (8004160 <HAL_CRC_Init+0xc4>)
 80040d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0218 	bic.w	r2, r2, #24
 80040e8:	609a      	str	r2, [r3, #8]
 80040ea:	e00c      	b.n	8004106 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6899      	ldr	r1, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	461a      	mov	r2, r3
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f834 	bl	8004164 <HAL_CRCEx_Polynomial_Set>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e028      	b.n	8004158 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	795b      	ldrb	r3, [r3, #5]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d105      	bne.n	800411a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004116:	611a      	str	r2, [r3, #16]
 8004118:	e004      	b.n	8004124 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6912      	ldr	r2, [r2, #16]
 8004122:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695a      	ldr	r2, [r3, #20]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699a      	ldr	r2, [r3, #24]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	04c11db7 	.word	0x04c11db7

08004164 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004174:	231f      	movs	r3, #31
 8004176:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004178:	bf00      	nop
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1e5a      	subs	r2, r3, #1
 800417e:	613a      	str	r2, [r7, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d009      	beq.n	8004198 <HAL_CRCEx_Polynomial_Set+0x34>
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b18      	cmp	r3, #24
 800419c:	d846      	bhi.n	800422c <HAL_CRCEx_Polynomial_Set+0xc8>
 800419e:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80041a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a4:	08004233 	.word	0x08004233
 80041a8:	0800422d 	.word	0x0800422d
 80041ac:	0800422d 	.word	0x0800422d
 80041b0:	0800422d 	.word	0x0800422d
 80041b4:	0800422d 	.word	0x0800422d
 80041b8:	0800422d 	.word	0x0800422d
 80041bc:	0800422d 	.word	0x0800422d
 80041c0:	0800422d 	.word	0x0800422d
 80041c4:	08004221 	.word	0x08004221
 80041c8:	0800422d 	.word	0x0800422d
 80041cc:	0800422d 	.word	0x0800422d
 80041d0:	0800422d 	.word	0x0800422d
 80041d4:	0800422d 	.word	0x0800422d
 80041d8:	0800422d 	.word	0x0800422d
 80041dc:	0800422d 	.word	0x0800422d
 80041e0:	0800422d 	.word	0x0800422d
 80041e4:	08004215 	.word	0x08004215
 80041e8:	0800422d 	.word	0x0800422d
 80041ec:	0800422d 	.word	0x0800422d
 80041f0:	0800422d 	.word	0x0800422d
 80041f4:	0800422d 	.word	0x0800422d
 80041f8:	0800422d 	.word	0x0800422d
 80041fc:	0800422d 	.word	0x0800422d
 8004200:	0800422d 	.word	0x0800422d
 8004204:	08004209 	.word	0x08004209
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	2b06      	cmp	r3, #6
 800420c:	d913      	bls.n	8004236 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004212:	e010      	b.n	8004236 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	2b07      	cmp	r3, #7
 8004218:	d90f      	bls.n	800423a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800421e:	e00c      	b.n	800423a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	2b0f      	cmp	r3, #15
 8004224:	d90b      	bls.n	800423e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800422a:	e008      	b.n	800423e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	75fb      	strb	r3, [r7, #23]
      break;
 8004230:	e006      	b.n	8004240 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004232:	bf00      	nop
 8004234:	e004      	b.n	8004240 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004236:	bf00      	nop
 8004238:	e002      	b.n	8004240 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800423a:	bf00      	nop
 800423c:	e000      	b.n	8004240 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800423e:	bf00      	nop
  }
  if (status == HAL_OK)
 8004240:	7dfb      	ldrb	r3, [r7, #23]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10d      	bne.n	8004262 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f023 0118 	bic.w	r1, r3, #24
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	430a      	orrs	r2, r1
 8004260:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004262:	7dfb      	ldrb	r3, [r7, #23]
}
 8004264:	4618      	mov	r0, r3
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e069      	b.n	8004356 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fd fc3e 	bl	8001b10 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6819      	ldr	r1, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b2a      	ldr	r3, [pc, #168]	; (8004360 <HAL_DCMI_Init+0xf0>)
 80042b6:	400b      	ands	r3, r1
 80042b8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6819      	ldr	r1, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80042ce:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80042da:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80042e6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80042f2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80042fe:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b10      	cmp	r3, #16
 800430e:	d112      	bne.n	8004336 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	7f1b      	ldrb	r3, [r3, #28]
 8004314:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	7f5b      	ldrb	r3, [r3, #29]
 800431a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800431c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	7f9b      	ldrb	r3, [r3, #30]
 8004322:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004324:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	7fdb      	ldrb	r3, [r3, #31]
 800432c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004332:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004334:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 021e 	orr.w	r2, r2, #30
 8004344:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	ffe0f007 	.word	0xffe0f007

08004364 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004370:	f7ff fafc 	bl	800396c <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e099      	b.n	80044b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0201 	bic.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043a0:	e00f      	b.n	80043c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043a2:	f7ff fae3 	bl	800396c <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b05      	cmp	r3, #5
 80043ae:	d908      	bls.n	80043c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2203      	movs	r2, #3
 80043ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e078      	b.n	80044b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e8      	bne.n	80043a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4b38      	ldr	r3, [pc, #224]	; (80044bc <HAL_DMA_Init+0x158>)
 80043dc:	4013      	ands	r3, r2
 80043de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004406:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	2b04      	cmp	r3, #4
 800441a:	d107      	bne.n	800442c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	4313      	orrs	r3, r2
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f023 0307 	bic.w	r3, r3, #7
 8004442:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	2b04      	cmp	r3, #4
 8004454:	d117      	bne.n	8004486 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00e      	beq.n	8004486 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f8bd 	bl	80045e8 <DMA_CheckFifoParam>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2240      	movs	r2, #64	; 0x40
 8004478:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004482:	2301      	movs	r3, #1
 8004484:	e016      	b.n	80044b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f874 	bl	800457c <DMA_CalcBaseAndBitshift>
 8004494:	4603      	mov	r3, r0
 8004496:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449c:	223f      	movs	r2, #63	; 0x3f
 800449e:	409a      	lsls	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	f010803f 	.word	0xf010803f

080044c0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e050      	b.n	8004574 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d101      	bne.n	80044e2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80044de:	2302      	movs	r3, #2
 80044e0:	e048      	b.n	8004574 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2200      	movs	r2, #0
 8004500:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2200      	movs	r2, #0
 8004508:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2200      	movs	r2, #0
 8004510:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2200      	movs	r2, #0
 8004518:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2221      	movs	r2, #33	; 0x21
 8004520:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f82a 	bl	800457c <DMA_CalcBaseAndBitshift>
 8004528:	4603      	mov	r3, r0
 800452a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004530:	223f      	movs	r2, #63	; 0x3f
 8004532:	409a      	lsls	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	3b10      	subs	r3, #16
 800458c:	4a13      	ldr	r2, [pc, #76]	; (80045dc <DMA_CalcBaseAndBitshift+0x60>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	091b      	lsrs	r3, r3, #4
 8004594:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004596:	4a12      	ldr	r2, [pc, #72]	; (80045e0 <DMA_CalcBaseAndBitshift+0x64>)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d908      	bls.n	80045bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <DMA_CalcBaseAndBitshift+0x68>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	1d1a      	adds	r2, r3, #4
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	659a      	str	r2, [r3, #88]	; 0x58
 80045ba:	e006      	b.n	80045ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <DMA_CalcBaseAndBitshift+0x68>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	aaaaaaab 	.word	0xaaaaaaab
 80045e0:	08025420 	.word	0x08025420
 80045e4:	fffffc00 	.word	0xfffffc00

080045e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d11f      	bne.n	8004642 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d855      	bhi.n	80046b4 <DMA_CheckFifoParam+0xcc>
 8004608:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <DMA_CheckFifoParam+0x28>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004621 	.word	0x08004621
 8004614:	08004633 	.word	0x08004633
 8004618:	08004621 	.word	0x08004621
 800461c:	080046b5 	.word	0x080046b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d045      	beq.n	80046b8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004630:	e042      	b.n	80046b8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800463a:	d13f      	bne.n	80046bc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004640:	e03c      	b.n	80046bc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464a:	d121      	bne.n	8004690 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b03      	cmp	r3, #3
 8004650:	d836      	bhi.n	80046c0 <DMA_CheckFifoParam+0xd8>
 8004652:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <DMA_CheckFifoParam+0x70>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	08004669 	.word	0x08004669
 800465c:	0800466f 	.word	0x0800466f
 8004660:	08004669 	.word	0x08004669
 8004664:	08004681 	.word	0x08004681
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
      break;
 800466c:	e02f      	b.n	80046ce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d024      	beq.n	80046c4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800467e:	e021      	b.n	80046c4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004688:	d11e      	bne.n	80046c8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800468e:	e01b      	b.n	80046c8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d902      	bls.n	800469c <DMA_CheckFifoParam+0xb4>
 8004696:	2b03      	cmp	r3, #3
 8004698:	d003      	beq.n	80046a2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800469a:	e018      	b.n	80046ce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
      break;
 80046a0:	e015      	b.n	80046ce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00e      	beq.n	80046cc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
      break;
 80046b2:	e00b      	b.n	80046cc <DMA_CheckFifoParam+0xe4>
      break;
 80046b4:	bf00      	nop
 80046b6:	e00a      	b.n	80046ce <DMA_CheckFifoParam+0xe6>
      break;
 80046b8:	bf00      	nop
 80046ba:	e008      	b.n	80046ce <DMA_CheckFifoParam+0xe6>
      break;
 80046bc:	bf00      	nop
 80046be:	e006      	b.n	80046ce <DMA_CheckFifoParam+0xe6>
      break;
 80046c0:	bf00      	nop
 80046c2:	e004      	b.n	80046ce <DMA_CheckFifoParam+0xe6>
      break;
 80046c4:	bf00      	nop
 80046c6:	e002      	b.n	80046ce <DMA_CheckFifoParam+0xe6>
      break;   
 80046c8:	bf00      	nop
 80046ca:	e000      	b.n	80046ce <DMA_CheckFifoParam+0xe6>
      break;
 80046cc:	bf00      	nop
    }
  } 
  
  return status; 
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e039      	b.n	8004762 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fd fac2 	bl	8001c8c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472c:	f023 0107 	bic.w	r1, r3, #7
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004742:	4b0a      	ldr	r3, [pc, #40]	; (800476c <HAL_DMA2D_Init+0x90>)
 8004744:	4013      	ands	r3, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	68d1      	ldr	r1, [r2, #12]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	430b      	orrs	r3, r1
 8004750:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	ffffc000 	.word	0xffffc000

08004770 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_DMA2D_Start+0x1c>
 8004788:	2302      	movs	r3, #2
 800478a:	e018      	b.n	80047be <HAL_DMA2D_Start+0x4e>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fa98 	bl	8004cdc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d056      	beq.n	8004890 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80047e2:	f7ff f8c3 	bl	800396c <HAL_GetTick>
 80047e6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80047e8:	e04b      	b.n	8004882 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d023      	beq.n	8004844 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f003 0320 	and.w	r3, r3, #32
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480a:	f043 0202 	orr.w	r2, r3, #2
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004820:	f043 0201 	orr.w	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2221      	movs	r2, #33	; 0x21
 800482e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2204      	movs	r2, #4
 8004834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0a5      	b.n	8004990 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800484a:	d01a      	beq.n	8004882 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800484c:	f7ff f88e 	bl	800396c <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d302      	bcc.n	8004862 <HAL_DMA2D_PollForTransfer+0x9c>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10f      	bne.n	8004882 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004866:	f043 0220 	orr.w	r2, r3, #32
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2203      	movs	r2, #3
 8004872:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e086      	b.n	8004990 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0ac      	beq.n	80047ea <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d061      	beq.n	8004976 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80048b2:	f7ff f85b 	bl	800396c <HAL_GetTick>
 80048b6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80048b8:	e056      	b.n	8004968 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d02e      	beq.n	800492a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048da:	f043 0204 	orr.w	r2, r3, #4
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f0:	f043 0202 	orr.w	r2, r3, #2
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004906:	f043 0201 	orr.w	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2229      	movs	r2, #41	; 0x29
 8004914:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2204      	movs	r2, #4
 800491a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e032      	b.n	8004990 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004930:	d01a      	beq.n	8004968 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004932:	f7ff f81b 	bl	800396c <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d302      	bcc.n	8004948 <HAL_DMA2D_PollForTransfer+0x182>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10f      	bne.n	8004968 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494c:	f043 0220 	orr.w	r2, r3, #32
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2203      	movs	r2, #3
 8004958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e013      	b.n	8004990 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 0310 	and.w	r3, r3, #16
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0a1      	beq.n	80048ba <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2212      	movs	r2, #18
 800497c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d026      	beq.n	8004a08 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d021      	beq.n	8004a08 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049d2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d8:	f043 0201 	orr.w	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2201      	movs	r2, #1
 80049e6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2204      	movs	r2, #4
 80049ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d026      	beq.n	8004a60 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d021      	beq.n	8004a60 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a2a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2220      	movs	r2, #32
 8004a32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a38:	f043 0202 	orr.w	r2, r3, #2
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2204      	movs	r2, #4
 8004a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d026      	beq.n	8004ab8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d021      	beq.n	8004ab8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a82:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2208      	movs	r2, #8
 8004a8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a90:	f043 0204 	orr.w	r2, r3, #4
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d013      	beq.n	8004aea <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00e      	beq.n	8004aea <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ada:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2204      	movs	r2, #4
 8004ae2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f853 	bl	8004b90 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d024      	beq.n	8004b3e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01f      	beq.n	8004b3e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b0c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2202      	movs	r2, #2
 8004b14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01f      	beq.n	8004b88 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01a      	beq.n	8004b88 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b60:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2210      	movs	r2, #16
 8004b68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f80e 	bl	8004ba4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <HAL_DMA2D_ConfigLayer+0x20>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	e079      	b.n	8004ccc <HAL_DMA2D_ConfigLayer+0x114>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	3318      	adds	r3, #24
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	041b      	lsls	r3, r3, #16
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004c02:	4b35      	ldr	r3, [pc, #212]	; (8004cd8 <HAL_DMA2D_ConfigLayer+0x120>)
 8004c04:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b0a      	cmp	r3, #10
 8004c0c:	d003      	beq.n	8004c16 <HAL_DMA2D_ConfigLayer+0x5e>
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b09      	cmp	r3, #9
 8004c14:	d107      	bne.n	8004c26 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	e005      	b.n	8004c32 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	061b      	lsls	r3, r3, #24
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d120      	bne.n	8004c7a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	43db      	mvns	r3, r3
 8004c42:	ea02 0103 	and.w	r1, r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b0a      	cmp	r3, #10
 8004c60:	d003      	beq.n	8004c6a <HAL_DMA2D_ConfigLayer+0xb2>
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b09      	cmp	r3, #9
 8004c68:	d127      	bne.n	8004cba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c76:	629a      	str	r2, [r3, #40]	; 0x28
 8004c78:	e01f      	b.n	8004cba <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	43db      	mvns	r3, r3
 8004c84:	ea02 0103 	and.w	r1, r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	6812      	ldr	r2, [r2, #0]
 8004c9a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b0a      	cmp	r3, #10
 8004ca2:	d003      	beq.n	8004cac <HAL_DMA2D_ConfigLayer+0xf4>
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b09      	cmp	r3, #9
 8004caa:	d106      	bne.n	8004cba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004cb8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	371c      	adds	r7, #28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	ff03000f 	.word	0xff03000f

08004cdc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b08b      	sub	sp, #44	; 0x2c
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	041a      	lsls	r2, r3, #16
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d14:	d174      	bne.n	8004e00 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004d1c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d24:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d2c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d108      	bne.n	8004d4e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	431a      	orrs	r2, r3
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4c:	e053      	b.n	8004df6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d106      	bne.n	8004d64 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
 8004d62:	e048      	b.n	8004df6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d111      	bne.n	8004d90 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	0cdb      	lsrs	r3, r3, #19
 8004d70:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	0a9b      	lsrs	r3, r3, #10
 8004d76:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	08db      	lsrs	r3, r3, #3
 8004d7c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	02db      	lsls	r3, r3, #11
 8004d86:	4313      	orrs	r3, r2
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8e:	e032      	b.n	8004df6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d117      	bne.n	8004dc8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	0fdb      	lsrs	r3, r3, #31
 8004d9c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	0cdb      	lsrs	r3, r3, #19
 8004da2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	0adb      	lsrs	r3, r3, #11
 8004da8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	08db      	lsrs	r3, r3, #3
 8004dae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	029b      	lsls	r3, r3, #10
 8004db8:	431a      	orrs	r2, r3
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	03db      	lsls	r3, r3, #15
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc6:	e016      	b.n	8004df6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	0f1b      	lsrs	r3, r3, #28
 8004dcc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	0d1b      	lsrs	r3, r3, #20
 8004dd2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	0b1b      	lsrs	r3, r3, #12
 8004dd8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	091b      	lsrs	r3, r3, #4
 8004dde:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	011a      	lsls	r2, r3, #4
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	431a      	orrs	r2, r3
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	031b      	lsls	r3, r3, #12
 8004dee:	4313      	orrs	r3, r2
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004dfe:	e003      	b.n	8004e08 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	60da      	str	r2, [r3, #12]
}
 8004e08:	bf00      	nop
 8004e0a:	372c      	adds	r7, #44	; 0x2c
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8004e24:	4ba9      	ldr	r3, [pc, #676]	; (80050cc <HAL_ETH_Init+0x2b8>)
 8004e26:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e183      	b.n	8005142 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f008 fd7a 	bl	800d948 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e54:	4b9e      	ldr	r3, [pc, #632]	; (80050d0 <HAL_ETH_Init+0x2bc>)
 8004e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e58:	4a9d      	ldr	r2, [pc, #628]	; (80050d0 <HAL_ETH_Init+0x2bc>)
 8004e5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e5e:	6453      	str	r3, [r2, #68]	; 0x44
 8004e60:	4b9b      	ldr	r3, [pc, #620]	; (80050d0 <HAL_ETH_Init+0x2bc>)
 8004e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e68:	60bb      	str	r3, [r7, #8]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004e6c:	4b99      	ldr	r3, [pc, #612]	; (80050d4 <HAL_ETH_Init+0x2c0>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4a98      	ldr	r2, [pc, #608]	; (80050d4 <HAL_ETH_Init+0x2c0>)
 8004e72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e76:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004e78:	4b96      	ldr	r3, [pc, #600]	; (80050d4 <HAL_ETH_Init+0x2c0>)
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	4994      	ldr	r1, [pc, #592]	; (80050d4 <HAL_ETH_Init+0x2c0>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0201 	orr.w	r2, r2, #1
 8004e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e9c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004e9e:	f7fe fd65 	bl	800396c <HAL_GetTick>
 8004ea2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004ea4:	e011      	b.n	8004eca <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004ea6:	f7fe fd61 	bl	800396c <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004eb4:	d909      	bls.n	8004eca <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2203      	movs	r2, #3
 8004eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e13b      	b.n	8005142 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1e4      	bne.n	8004ea6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	f023 031c 	bic.w	r3, r3, #28
 8004eea:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004eec:	f004 fa58 	bl	80093a0 <HAL_RCC_GetHCLKFreq>
 8004ef0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	4a78      	ldr	r2, [pc, #480]	; (80050d8 <HAL_ETH_Init+0x2c4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d908      	bls.n	8004f0c <HAL_ETH_Init+0xf8>
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	4a77      	ldr	r2, [pc, #476]	; (80050dc <HAL_ETH_Init+0x2c8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d804      	bhi.n	8004f0c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f043 0308 	orr.w	r3, r3, #8
 8004f08:	61fb      	str	r3, [r7, #28]
 8004f0a:	e027      	b.n	8004f5c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	4a73      	ldr	r2, [pc, #460]	; (80050dc <HAL_ETH_Init+0x2c8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d908      	bls.n	8004f26 <HAL_ETH_Init+0x112>
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	4a72      	ldr	r2, [pc, #456]	; (80050e0 <HAL_ETH_Init+0x2cc>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d804      	bhi.n	8004f26 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	f043 030c 	orr.w	r3, r3, #12
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	e01a      	b.n	8004f5c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	4a6d      	ldr	r2, [pc, #436]	; (80050e0 <HAL_ETH_Init+0x2cc>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d903      	bls.n	8004f36 <HAL_ETH_Init+0x122>
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	4a6c      	ldr	r2, [pc, #432]	; (80050e4 <HAL_ETH_Init+0x2d0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d911      	bls.n	8004f5a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	4a6a      	ldr	r2, [pc, #424]	; (80050e4 <HAL_ETH_Init+0x2d0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d908      	bls.n	8004f50 <HAL_ETH_Init+0x13c>
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	4a69      	ldr	r2, [pc, #420]	; (80050e8 <HAL_ETH_Init+0x2d4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d804      	bhi.n	8004f50 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	f043 0304 	orr.w	r3, r3, #4
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	e005      	b.n	8004f5c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f043 0310 	orr.w	r3, r3, #16
 8004f56:	61fb      	str	r3, [r7, #28]
 8004f58:	e000      	b.n	8004f5c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004f5a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004f64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f68:	2100      	movs	r1, #0
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fc19 	bl	80057a2 <HAL_ETH_WritePHYRegister>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00b      	beq.n	8004f8e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004f7a:	6939      	ldr	r1, [r7, #16]
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 fdcf 	bl	8005b20 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e0d9      	b.n	8005142 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004f8e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004f92:	f7fe fcf7 	bl	8003984 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 80a6 	beq.w	80050ec <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fa0:	f7fe fce4 	bl	800396c <HAL_GetTick>
 8004fa4:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004fa6:	f107 030c 	add.w	r3, r7, #12
 8004faa:	461a      	mov	r2, r3
 8004fac:	2101      	movs	r1, #1
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fb8f 	bl	80056d2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004fb4:	f7fe fcda 	bl	800396c <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d90f      	bls.n	8004fe6 <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004fca:	6939      	ldr	r1, [r7, #16]
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fda7 	bl	8005b20 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e0ad      	b.n	8005142 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0da      	beq.n	8004fa6 <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fbd3 	bl	80057a2 <HAL_ETH_WritePHYRegister>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8005006:	6939      	ldr	r1, [r7, #16]
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fd89 	bl	8005b20 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8005016:	2301      	movs	r3, #1
 8005018:	e093      	b.n	8005142 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800501a:	f7fe fca7 	bl	800396c <HAL_GetTick>
 800501e:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8005020:	f107 030c 	add.w	r3, r7, #12
 8005024:	461a      	mov	r2, r3
 8005026:	2101      	movs	r1, #1
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fb52 	bl	80056d2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800502e:	f7fe fc9d 	bl	800396c <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	f241 3288 	movw	r2, #5000	; 0x1388
 800503c:	4293      	cmp	r3, r2
 800503e:	d90f      	bls.n	8005060 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8005044:	6939      	ldr	r1, [r7, #16]
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fd6a 	bl	8005b20 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e070      	b.n	8005142 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0da      	beq.n	8005020 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800506a:	f107 030c 	add.w	r3, r7, #12
 800506e:	461a      	mov	r2, r3
 8005070:	211f      	movs	r1, #31
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fb2d 	bl	80056d2 <HAL_ETH_ReadPHYRegister>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00b      	beq.n	8005096 <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8005082:	6939      	ldr	r1, [r7, #16]
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fd4b 	bl	8005b20 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8005092:	2301      	movs	r3, #1
 8005094:	e055      	b.n	8005142 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	2b00      	cmp	r3, #0
 800509e:	d004      	beq.n	80050aa <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050a6:	60da      	str	r2, [r3, #12]
 80050a8:	e002      	b.n	80050b0 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	609a      	str	r2, [r3, #8]
 80050c0:	e036      	b.n	8005130 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050c8:	609a      	str	r2, [r3, #8]
 80050ca:	e031      	b.n	8005130 <HAL_ETH_Init+0x31c>
 80050cc:	03938700 	.word	0x03938700
 80050d0:	40023800 	.word	0x40023800
 80050d4:	40013800 	.word	0x40013800
 80050d8:	01312cff 	.word	0x01312cff
 80050dc:	02160ebf 	.word	0x02160ebf
 80050e0:	039386ff 	.word	0x039386ff
 80050e4:	05f5e0ff 	.word	0x05f5e0ff
 80050e8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	08db      	lsrs	r3, r3, #3
 80050f2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	085b      	lsrs	r3, r3, #1
 80050fa:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80050fc:	4313      	orrs	r3, r2
 80050fe:	b29b      	uxth	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	2100      	movs	r1, #0
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fb4c 	bl	80057a2 <HAL_ETH_WritePHYRegister>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00b      	beq.n	8005128 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8005114:	6939      	ldr	r1, [r7, #16]
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fd02 	bl	8005b20 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e00c      	b.n	8005142 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8005128:	f640 70ff 	movw	r0, #4095	; 0xfff
 800512c:	f7fe fc2a 	bl	8003984 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8005130:	6939      	ldr	r1, [r7, #16]
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fcf4 	bl	8005b20 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3720      	adds	r7, #32
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop

0800514c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_ETH_DMATxDescListInit+0x20>
 8005168:	2302      	movs	r3, #2
 800516a:	e052      	b.n	8005212 <HAL_ETH_DMATxDescListInit+0xc6>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	e030      	b.n	80051ea <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	015b      	lsls	r3, r3, #5
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	4413      	add	r3, r2
 8005190:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005198:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80051a0:	fb02 f303 	mul.w	r3, r2, r3
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	4413      	add	r3, r2
 80051a8:	461a      	mov	r2, r3
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d105      	bne.n	80051c2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	3b01      	subs	r3, #1
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d208      	bcs.n	80051de <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	3301      	adds	r3, #1
 80051d0:	015b      	lsls	r3, r3, #5
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	4413      	add	r3, r2
 80051d6:	461a      	mov	r2, r3
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	60da      	str	r2, [r3, #12]
 80051dc:	e002      	b.n	80051e4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	3301      	adds	r3, #1
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d3ca      	bcc.n	8005188 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6819      	ldr	r1, [r3, #0]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	f241 0310 	movw	r3, #4112	; 0x1010
 80051fc:	440b      	add	r3, r1
 80051fe:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800521e:	b480      	push	{r7}
 8005220:	b087      	sub	sp, #28
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	607a      	str	r2, [r7, #4]
 800522a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <HAL_ETH_DMARxDescListInit+0x20>
 800523a:	2302      	movs	r3, #2
 800523c:	e056      	b.n	80052ec <HAL_ETH_DMARxDescListInit+0xce>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2202      	movs	r2, #2
 800524a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e034      	b.n	80052c4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	015b      	lsls	r3, r3, #5
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	4413      	add	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800526a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8005272:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800527a:	fb02 f303 	mul.w	r3, r2, r3
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	4413      	add	r3, r2
 8005282:	461a      	mov	r2, r3
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d105      	bne.n	800529c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	3b01      	subs	r3, #1
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d208      	bcs.n	80052b8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	3301      	adds	r3, #1
 80052aa:	015b      	lsls	r3, r3, #5
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	4413      	add	r3, r2
 80052b0:	461a      	mov	r2, r3
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	60da      	str	r2, [r3, #12]
 80052b6:	e002      	b.n	80052be <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	3301      	adds	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d3c6      	bcc.n	800525a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6819      	ldr	r1, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	f241 030c 	movw	r3, #4108	; 0x100c
 80052d6:	440b      	add	r3, r1
 80052d8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	371c      	adds	r7, #28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	617b      	str	r3, [r7, #20]
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	2300      	movs	r3, #0
 800530c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_ETH_TransmitFrame+0x24>
 8005318:	2302      	movs	r3, #2
 800531a:	e0cd      	b.n	80054b8 <HAL_ETH_TransmitFrame+0x1c0>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8005342:	2301      	movs	r3, #1
 8005344:	e0b8      	b.n	80054b8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	da09      	bge.n	8005364 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2212      	movs	r2, #18
 8005354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0a9      	b.n	80054b8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800536a:	4293      	cmp	r3, r2
 800536c:	d915      	bls.n	800539a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	4a54      	ldr	r2, [pc, #336]	; (80054c4 <HAL_ETH_TransmitFrame+0x1cc>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	0a9b      	lsrs	r3, r3, #10
 8005378:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	4b51      	ldr	r3, [pc, #324]	; (80054c4 <HAL_ETH_TransmitFrame+0x1cc>)
 800537e:	fba3 1302 	umull	r1, r3, r3, r2
 8005382:	0a9b      	lsrs	r3, r3, #10
 8005384:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8005388:	fb01 f303 	mul.w	r3, r1, r3
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d005      	beq.n	800539e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	3301      	adds	r3, #1
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	e001      	b.n	800539e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800539a:	2301      	movs	r3, #1
 800539c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d11c      	bne.n	80053de <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ae:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80053b2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80053be:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80053ce:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	461a      	mov	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	62da      	str	r2, [r3, #44]	; 0x2c
 80053dc:	e04b      	b.n	8005476 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80053de:	2300      	movs	r3, #0
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	e044      	b.n	800546e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80053f2:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d107      	bne.n	800540a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005408:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005412:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	3b01      	subs	r3, #1
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	429a      	cmp	r2, r3
 800541c:	d116      	bne.n	800544c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800542c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	4a25      	ldr	r2, [pc, #148]	; (80054c8 <HAL_ETH_TransmitFrame+0x1d0>)
 8005432:	fb02 f203 	mul.w	r2, r2, r3
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	4413      	add	r3, r2
 800543a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800543e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800544a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800545a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	461a      	mov	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	3301      	adds	r3, #1
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	429a      	cmp	r2, r3
 8005474:	d3b6      	bcc.n	80053e4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	f241 0314 	movw	r3, #4116	; 0x1014
 800547e:	4413      	add	r3, r2
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00d      	beq.n	80054a6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	f241 0314 	movw	r3, #4116	; 0x1014
 8005492:	4413      	add	r3, r2
 8005494:	2204      	movs	r2, #4
 8005496:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	f241 0304 	movw	r3, #4100	; 0x1004
 80054a0:	4413      	add	r3, r2
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	ac02b00b 	.word	0xac02b00b
 80054c8:	fffffa0c 	.word	0xfffffa0c

080054cc <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e074      	b.n	80055d0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2202      	movs	r2, #2
 80054f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80054f6:	e05a      	b.n	80055ae <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	3301      	adds	r3, #1
 80054fc:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800550c:	d10d      	bne.n	800552a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	461a      	mov	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	629a      	str	r2, [r3, #40]	; 0x28
 8005528:	e041      	b.n	80055ae <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10b      	bne.n	8005550 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	461a      	mov	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	629a      	str	r2, [r3, #40]	; 0x28
 800554e:	e02e      	b.n	80055ae <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005566:	2b01      	cmp	r3, #1
 8005568:	d103      	bne.n	8005572 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	0c1b      	lsrs	r3, r3, #16
 800557a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800557e:	1f1a      	subs	r2, r3, #4
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	461a      	mov	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	e010      	b.n	80055d0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	db02      	blt.n	80055be <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d99c      	bls.n	80054f8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	f241 0314 	movw	r3, #4116	; 0x1014
 80055ec:	4413      	add	r3, r2
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f4:	2b40      	cmp	r3, #64	; 0x40
 80055f6:	d112      	bne.n	800561e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f008 fa47 	bl	800da8c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	f241 0314 	movw	r3, #4116	; 0x1014
 8005606:	4413      	add	r3, r2
 8005608:	2240      	movs	r2, #64	; 0x40
 800560a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800561c:	e01b      	b.n	8005656 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	f241 0314 	movw	r3, #4116	; 0x1014
 8005626:	4413      	add	r3, r2
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b01      	cmp	r3, #1
 8005630:	d111      	bne.n	8005656 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f839 	bl	80056aa <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005640:	4413      	add	r3, r2
 8005642:	2201      	movs	r2, #1
 8005644:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	f241 0314 	movw	r3, #4116	; 0x1014
 800565e:	4413      	add	r3, r2
 8005660:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005664:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	f241 0314 	movw	r3, #4116	; 0x1014
 800566e:	4413      	add	r3, r2
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800567a:	d112      	bne.n	80056a2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f81e 	bl	80056be <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	f241 0314 	movw	r3, #4116	; 0x1014
 800568a:	4413      	add	r3, r2
 800568c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005690:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80056a2:	bf00      	nop
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b086      	sub	sp, #24
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	460b      	mov	r3, r1
 80056dc:	607a      	str	r2, [r7, #4]
 80056de:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b82      	cmp	r3, #130	; 0x82
 80056f2:	d101      	bne.n	80056f8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80056f4:	2302      	movs	r3, #2
 80056f6:	e050      	b.n	800579a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2282      	movs	r2, #130	; 0x82
 80056fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f003 031c 	and.w	r3, r3, #28
 800570e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8a1b      	ldrh	r3, [r3, #16]
 8005714:	02db      	lsls	r3, r3, #11
 8005716:	b29b      	uxth	r3, r3
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800571e:	897b      	ldrh	r3, [r7, #10]
 8005720:	019b      	lsls	r3, r3, #6
 8005722:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f023 0302 	bic.w	r3, r3, #2
 8005732:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005744:	f7fe f912 	bl	800396c <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800574a:	e015      	b.n	8005778 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800574c:	f7fe f90e 	bl	800396c <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575a:	d309      	bcc.n	8005770 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e014      	b.n	800579a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e4      	bne.n	800574c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	b29b      	uxth	r3, r3
 800578a:	461a      	mov	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b086      	sub	sp, #24
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	460b      	mov	r3, r1
 80057ac:	607a      	str	r2, [r7, #4]
 80057ae:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80057b0:	2300      	movs	r3, #0
 80057b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80057b4:	2300      	movs	r3, #0
 80057b6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b42      	cmp	r3, #66	; 0x42
 80057c2:	d101      	bne.n	80057c8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80057c4:	2302      	movs	r3, #2
 80057c6:	e04e      	b.n	8005866 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2242      	movs	r2, #66	; 0x42
 80057cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f003 031c 	and.w	r3, r3, #28
 80057de:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8a1b      	ldrh	r3, [r3, #16]
 80057e4:	02db      	lsls	r3, r3, #11
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80057ee:	897b      	ldrh	r3, [r7, #10]
 80057f0:	019b      	lsls	r3, r3, #6
 80057f2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f043 0302 	orr.w	r3, r3, #2
 8005802:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f043 0301 	orr.w	r3, r3, #1
 800580a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	b29a      	uxth	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800581e:	f7fe f8a5 	bl	800396c <HAL_GetTick>
 8005822:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005824:	e015      	b.n	8005852 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8005826:	f7fe f8a1 	bl	800396c <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005834:	d309      	bcc.n	800584a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e00d      	b.n	8005866 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e4      	bne.n	8005826 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800586e:	b580      	push	{r7, lr}
 8005870:	b082      	sub	sp, #8
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_ETH_Start+0x16>
 8005880:	2302      	movs	r3, #2
 8005882:	e01f      	b.n	80058c4 <HAL_ETH_Start+0x56>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fb45 	bl	8005f24 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fb7c 	bl	8005f98 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fc13 	bl	80060cc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fbb0 	bl	800600c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fbdd 	bl	800606c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_ETH_Stop+0x16>
 80058de:	2302      	movs	r3, #2
 80058e0:	e01f      	b.n	8005922 <HAL_ETH_Stop+0x56>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2202      	movs	r2, #2
 80058ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fba2 	bl	800603c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fbcf 	bl	800609c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fb67 	bl	8005fd2 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fbe1 	bl	80060cc <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fb27 	bl	8005f5e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_ETH_ConfigMAC+0x1c>
 8005944:	2302      	movs	r3, #2
 8005946:	e0e4      	b.n	8005b12 <HAL_ETH_ConfigMAC+0x1e6>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 80b1 	beq.w	8005ac2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4b6c      	ldr	r3, [pc, #432]	; (8005b1c <HAL_ETH_ConfigMAC+0x1f0>)
 800596c:	4013      	ands	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8005978:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800597e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8005984:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800598a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8005990:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8005996:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800599c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80059a2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80059a8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80059ae:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80059b4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80059ba:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80059d2:	2001      	movs	r0, #1
 80059d4:	f7fd ffd6 	bl	8003984 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80059e8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80059ee:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80059f4:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80059fa:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8005a00:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8005a06:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8005a12:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005a14:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a1e:	2001      	movs	r0, #1
 8005a20:	f7fd ffb0 	bl	8003984 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005a34:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a3e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005a4e:	4013      	ands	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a56:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8005a5c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8005a62:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8005a68:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8005a6e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8005a74:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a8c:	2001      	movs	r0, #1
 8005a8e:	f7fd ff79 	bl	8003984 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8005ab2:	2001      	movs	r0, #1
 8005ab4:	f7fd ff66 	bl	8003984 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	61da      	str	r2, [r3, #28]
 8005ac0:	e01e      	b.n	8005b00 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005ad0:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005af2:	2001      	movs	r0, #1
 8005af4:	f7fd ff46 	bl	8003984 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	ff20810f 	.word	0xff20810f

08005b20 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b0b0      	sub	sp, #192	; 0xc0
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b3c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b44:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8005b46:	2300      	movs	r3, #0
 8005b48:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8005b52:	2300      	movs	r3, #0
 8005b54:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d103      	bne.n	8005b6e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8005b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b6a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b6c:	e001      	b.n	8005b72 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8005b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b76:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005b84:	2300      	movs	r3, #0
 8005b86:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005b8c:	2340      	movs	r3, #64	; 0x40
 8005b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005b90:	2300      	movs	r3, #0
 8005b92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8005bde:	2300      	movs	r3, #0
 8005be0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8005be4:	2300      	movs	r3, #0
 8005be6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8005bf4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005bf8:	4bab      	ldr	r3, [pc, #684]	; (8005ea8 <ETH_MACDMAConfig+0x388>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8005c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8005c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8005c04:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8005c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8005c08:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8005c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8005c0c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8005c12:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8005c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8005c16:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8005c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8005c1a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8005c20:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8005c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8005c24:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8005c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8005c28:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8005c2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8005c2c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8005c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8005c30:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8005c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8005c34:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8005c36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c48:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005c54:	2001      	movs	r0, #1
 8005c56:	f7fd fe95 	bl	8003984 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c62:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005c64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8005c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005c68:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005c6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005c6c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8005c6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8005c72:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005c78:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005c7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8005c7e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005c84:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005c88:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005c90:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005c92:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005c9e:	2001      	movs	r0, #1
 8005ca0:	f7fd fe70 	bl	8003984 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005cac:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005cb6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005cc0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8005ccc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005cd0:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005cda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cde:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005ce0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005ce4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8005ce6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8005cea:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005cec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005cf0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8005cf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8005cf6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8005cf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005cfc:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005cfe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005d10:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	f7fd fe31 	bl	8003984 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005d2a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005d2c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005d30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d46:	2001      	movs	r0, #1
 8005d48:	f7fd fe1c 	bl	8003984 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005d54:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8005d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d5e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005d64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d68:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005d72:	2300      	movs	r3, #0
 8005d74:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005d76:	2300      	movs	r3, #0
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005d7a:	2304      	movs	r3, #4
 8005d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005d7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005d84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d88:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005d8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d8e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d94:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005d96:	2380      	movs	r3, #128	; 0x80
 8005d98:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	f241 0318 	movw	r3, #4120	; 0x1018
 8005daa:	4413      	add	r3, r2
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8005db2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005db6:	4b3d      	ldr	r3, [pc, #244]	; (8005eac <ETH_MACDMAConfig+0x38c>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005dbe:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005dc0:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005dc2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005dc4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005dc6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005dc8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005dca:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005dcc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005dce:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005dd0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005dd2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005dd6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005dda:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005dde:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005de0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	f241 0318 	movw	r3, #4120	; 0x1018
 8005df2:	4413      	add	r3, r2
 8005df4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005df8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	f241 0318 	movw	r3, #4120	; 0x1018
 8005e02:	4413      	add	r3, r2
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005e0a:	2001      	movs	r0, #1
 8005e0c:	f7fd fdba 	bl	8003984 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	f241 0318 	movw	r3, #4120	; 0x1018
 8005e18:	4413      	add	r3, r2
 8005e1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005e1e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005e24:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005e28:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005e2c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005e30:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8005e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e34:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8005e36:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8005e3a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e48:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005e58:	2001      	movs	r0, #1
 8005e5a:	f7fd fd93 	bl	8003984 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005e6a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d10d      	bne.n	8005e90 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	f241 031c 	movw	r3, #4124	; 0x101c
 8005e7c:	4413      	add	r3, r2
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6811      	ldr	r1, [r2, #0]
 8005e84:	4a0a      	ldr	r2, [pc, #40]	; (8005eb0 <ETH_MACDMAConfig+0x390>)
 8005e86:	431a      	orrs	r2, r3
 8005e88:	f241 031c 	movw	r3, #4124	; 0x101c
 8005e8c:	440b      	add	r3, r1
 8005e8e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	461a      	mov	r2, r3
 8005e96:	2100      	movs	r1, #0
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f80b 	bl	8005eb4 <ETH_MACAddressConfig>
}
 8005e9e:	bf00      	nop
 8005ea0:	37c0      	adds	r7, #192	; 0xc0
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	ff20810f 	.word	0xff20810f
 8005eac:	f8de3f23 	.word	0xf8de3f23
 8005eb0:	00010040 	.word	0x00010040

08005eb4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3305      	adds	r3, #5
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	021b      	lsls	r3, r3, #8
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	3204      	adds	r2, #4
 8005ecc:	7812      	ldrb	r2, [r2, #0]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	4b11      	ldr	r3, [pc, #68]	; (8005f1c <ETH_MACAddressConfig+0x68>)
 8005ed6:	4413      	add	r3, r2
 8005ed8:	461a      	mov	r2, r3
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3303      	adds	r3, #3
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	061a      	lsls	r2, r3, #24
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3302      	adds	r3, #2
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	041b      	lsls	r3, r3, #16
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	7812      	ldrb	r2, [r2, #0]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <ETH_MACAddressConfig+0x6c>)
 8005f06:	4413      	add	r3, r2
 8005f08:	461a      	mov	r2, r3
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	6013      	str	r3, [r2, #0]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40028040 	.word	0x40028040
 8005f20:	40028044 	.word	0x40028044

08005f24 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0208 	orr.w	r2, r2, #8
 8005f3e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f48:	2001      	movs	r0, #1
 8005f4a:	f7fd fd1b 	bl	8003984 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	601a      	str	r2, [r3, #0]
}
 8005f56:	bf00      	nop
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0208 	bic.w	r2, r2, #8
 8005f78:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f82:	2001      	movs	r0, #1
 8005f84:	f7fd fcfe 	bl	8003984 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	601a      	str	r2, [r3, #0]
}
 8005f90:	bf00      	nop
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0204 	orr.w	r2, r2, #4
 8005fb2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005fbc:	2001      	movs	r0, #1
 8005fbe:	f7fd fce1 	bl	8003984 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	601a      	str	r2, [r3, #0]
}
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0204 	bic.w	r2, r2, #4
 8005fec:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005ff6:	2001      	movs	r0, #1
 8005ff8:	f7fd fcc4 	bl	8003984 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	601a      	str	r2, [r3, #0]
}
 8006004:	bf00      	nop
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	f241 0318 	movw	r3, #4120	; 0x1018
 800601c:	4413      	add	r3, r2
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6811      	ldr	r1, [r2, #0]
 8006024:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006028:	f241 0318 	movw	r3, #4120	; 0x1018
 800602c:	440b      	add	r3, r1
 800602e:	601a      	str	r2, [r3, #0]
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	f241 0318 	movw	r3, #4120	; 0x1018
 800604c:	4413      	add	r3, r2
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6811      	ldr	r1, [r2, #0]
 8006054:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006058:	f241 0318 	movw	r3, #4120	; 0x1018
 800605c:	440b      	add	r3, r1
 800605e:	601a      	str	r2, [r3, #0]
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	f241 0318 	movw	r3, #4120	; 0x1018
 800607c:	4413      	add	r3, r2
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6811      	ldr	r1, [r2, #0]
 8006084:	f043 0202 	orr.w	r2, r3, #2
 8006088:	f241 0318 	movw	r3, #4120	; 0x1018
 800608c:	440b      	add	r3, r1
 800608e:	601a      	str	r2, [r3, #0]
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	f241 0318 	movw	r3, #4120	; 0x1018
 80060ac:	4413      	add	r3, r2
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	6811      	ldr	r1, [r2, #0]
 80060b4:	f023 0202 	bic.w	r2, r3, #2
 80060b8:	f241 0318 	movw	r3, #4120	; 0x1018
 80060bc:	440b      	add	r3, r1
 80060be:	601a      	str	r2, [r3, #0]
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	f241 0318 	movw	r3, #4120	; 0x1018
 80060e0:	4413      	add	r3, r2
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6811      	ldr	r1, [r2, #0]
 80060e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80060ec:	f241 0318 	movw	r3, #4120	; 0x1018
 80060f0:	440b      	add	r3, r1
 80060f2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	f241 0318 	movw	r3, #4120	; 0x1018
 80060fc:	4413      	add	r3, r2
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006102:	2001      	movs	r0, #1
 8006104:	f7fd fc3e 	bl	8003984 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6819      	ldr	r1, [r3, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	f241 0318 	movw	r3, #4120	; 0x1018
 8006112:	440b      	add	r3, r1
 8006114:	601a      	str	r2, [r3, #0]
}
 8006116:	bf00      	nop
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
	...

08006120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006120:	b480      	push	{r7}
 8006122:	b089      	sub	sp, #36	; 0x24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800612a:	2300      	movs	r3, #0
 800612c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006132:	2300      	movs	r3, #0
 8006134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006136:	2300      	movs	r3, #0
 8006138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800613a:	2300      	movs	r3, #0
 800613c:	61fb      	str	r3, [r7, #28]
 800613e:	e175      	b.n	800642c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006140:	2201      	movs	r2, #1
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4013      	ands	r3, r2
 8006152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	429a      	cmp	r2, r3
 800615a:	f040 8164 	bne.w	8006426 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d00b      	beq.n	800617e <HAL_GPIO_Init+0x5e>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d007      	beq.n	800617e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006172:	2b11      	cmp	r3, #17
 8006174:	d003      	beq.n	800617e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b12      	cmp	r3, #18
 800617c:	d130      	bne.n	80061e0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	2203      	movs	r2, #3
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	43db      	mvns	r3, r3
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	4013      	ands	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061b4:	2201      	movs	r2, #1
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	43db      	mvns	r3, r3
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	4013      	ands	r3, r2
 80061c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	091b      	lsrs	r3, r3, #4
 80061ca:	f003 0201 	and.w	r2, r3, #1
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	2203      	movs	r2, #3
 80061ec:	fa02 f303 	lsl.w	r3, r2, r3
 80061f0:	43db      	mvns	r3, r3
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	4013      	ands	r3, r2
 80061f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	4313      	orrs	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	2b02      	cmp	r3, #2
 8006216:	d003      	beq.n	8006220 <HAL_GPIO_Init+0x100>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b12      	cmp	r3, #18
 800621e:	d123      	bne.n	8006268 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	08da      	lsrs	r2, r3, #3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3208      	adds	r2, #8
 8006228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	220f      	movs	r2, #15
 8006238:	fa02 f303 	lsl.w	r3, r2, r3
 800623c:	43db      	mvns	r3, r3
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	4013      	ands	r3, r2
 8006242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	691a      	ldr	r2, [r3, #16]
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	fa02 f303 	lsl.w	r3, r2, r3
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	4313      	orrs	r3, r2
 8006258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	08da      	lsrs	r2, r3, #3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	3208      	adds	r2, #8
 8006262:	69b9      	ldr	r1, [r7, #24]
 8006264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	2203      	movs	r2, #3
 8006274:	fa02 f303 	lsl.w	r3, r2, r3
 8006278:	43db      	mvns	r3, r3
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	4013      	ands	r3, r2
 800627e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f003 0203 	and.w	r2, r3, #3
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	fa02 f303 	lsl.w	r3, r2, r3
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	4313      	orrs	r3, r2
 8006294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 80be 	beq.w	8006426 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062aa:	4b65      	ldr	r3, [pc, #404]	; (8006440 <HAL_GPIO_Init+0x320>)
 80062ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ae:	4a64      	ldr	r2, [pc, #400]	; (8006440 <HAL_GPIO_Init+0x320>)
 80062b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062b4:	6453      	str	r3, [r2, #68]	; 0x44
 80062b6:	4b62      	ldr	r3, [pc, #392]	; (8006440 <HAL_GPIO_Init+0x320>)
 80062b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80062c2:	4a60      	ldr	r2, [pc, #384]	; (8006444 <HAL_GPIO_Init+0x324>)
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	089b      	lsrs	r3, r3, #2
 80062c8:	3302      	adds	r3, #2
 80062ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	220f      	movs	r2, #15
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	43db      	mvns	r3, r3
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	4013      	ands	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a57      	ldr	r2, [pc, #348]	; (8006448 <HAL_GPIO_Init+0x328>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d037      	beq.n	800635e <HAL_GPIO_Init+0x23e>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a56      	ldr	r2, [pc, #344]	; (800644c <HAL_GPIO_Init+0x32c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d031      	beq.n	800635a <HAL_GPIO_Init+0x23a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a55      	ldr	r2, [pc, #340]	; (8006450 <HAL_GPIO_Init+0x330>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d02b      	beq.n	8006356 <HAL_GPIO_Init+0x236>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a54      	ldr	r2, [pc, #336]	; (8006454 <HAL_GPIO_Init+0x334>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d025      	beq.n	8006352 <HAL_GPIO_Init+0x232>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a53      	ldr	r2, [pc, #332]	; (8006458 <HAL_GPIO_Init+0x338>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d01f      	beq.n	800634e <HAL_GPIO_Init+0x22e>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a52      	ldr	r2, [pc, #328]	; (800645c <HAL_GPIO_Init+0x33c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d019      	beq.n	800634a <HAL_GPIO_Init+0x22a>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a51      	ldr	r2, [pc, #324]	; (8006460 <HAL_GPIO_Init+0x340>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <HAL_GPIO_Init+0x226>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a50      	ldr	r2, [pc, #320]	; (8006464 <HAL_GPIO_Init+0x344>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d00d      	beq.n	8006342 <HAL_GPIO_Init+0x222>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a4f      	ldr	r2, [pc, #316]	; (8006468 <HAL_GPIO_Init+0x348>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d007      	beq.n	800633e <HAL_GPIO_Init+0x21e>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a4e      	ldr	r2, [pc, #312]	; (800646c <HAL_GPIO_Init+0x34c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d101      	bne.n	800633a <HAL_GPIO_Init+0x21a>
 8006336:	2309      	movs	r3, #9
 8006338:	e012      	b.n	8006360 <HAL_GPIO_Init+0x240>
 800633a:	230a      	movs	r3, #10
 800633c:	e010      	b.n	8006360 <HAL_GPIO_Init+0x240>
 800633e:	2308      	movs	r3, #8
 8006340:	e00e      	b.n	8006360 <HAL_GPIO_Init+0x240>
 8006342:	2307      	movs	r3, #7
 8006344:	e00c      	b.n	8006360 <HAL_GPIO_Init+0x240>
 8006346:	2306      	movs	r3, #6
 8006348:	e00a      	b.n	8006360 <HAL_GPIO_Init+0x240>
 800634a:	2305      	movs	r3, #5
 800634c:	e008      	b.n	8006360 <HAL_GPIO_Init+0x240>
 800634e:	2304      	movs	r3, #4
 8006350:	e006      	b.n	8006360 <HAL_GPIO_Init+0x240>
 8006352:	2303      	movs	r3, #3
 8006354:	e004      	b.n	8006360 <HAL_GPIO_Init+0x240>
 8006356:	2302      	movs	r3, #2
 8006358:	e002      	b.n	8006360 <HAL_GPIO_Init+0x240>
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <HAL_GPIO_Init+0x240>
 800635e:	2300      	movs	r3, #0
 8006360:	69fa      	ldr	r2, [r7, #28]
 8006362:	f002 0203 	and.w	r2, r2, #3
 8006366:	0092      	lsls	r2, r2, #2
 8006368:	4093      	lsls	r3, r2
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	4313      	orrs	r3, r2
 800636e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006370:	4934      	ldr	r1, [pc, #208]	; (8006444 <HAL_GPIO_Init+0x324>)
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	089b      	lsrs	r3, r3, #2
 8006376:	3302      	adds	r3, #2
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800637e:	4b3c      	ldr	r3, [pc, #240]	; (8006470 <HAL_GPIO_Init+0x350>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	43db      	mvns	r3, r3
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	4013      	ands	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063a2:	4a33      	ldr	r2, [pc, #204]	; (8006470 <HAL_GPIO_Init+0x350>)
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80063a8:	4b31      	ldr	r3, [pc, #196]	; (8006470 <HAL_GPIO_Init+0x350>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	43db      	mvns	r3, r3
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	4013      	ands	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063cc:	4a28      	ldr	r2, [pc, #160]	; (8006470 <HAL_GPIO_Init+0x350>)
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80063d2:	4b27      	ldr	r3, [pc, #156]	; (8006470 <HAL_GPIO_Init+0x350>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	43db      	mvns	r3, r3
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	4013      	ands	r3, r2
 80063e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80063f6:	4a1e      	ldr	r2, [pc, #120]	; (8006470 <HAL_GPIO_Init+0x350>)
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063fc:	4b1c      	ldr	r3, [pc, #112]	; (8006470 <HAL_GPIO_Init+0x350>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	43db      	mvns	r3, r3
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	4013      	ands	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006420:	4a13      	ldr	r2, [pc, #76]	; (8006470 <HAL_GPIO_Init+0x350>)
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	3301      	adds	r3, #1
 800642a:	61fb      	str	r3, [r7, #28]
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	2b0f      	cmp	r3, #15
 8006430:	f67f ae86 	bls.w	8006140 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006434:	bf00      	nop
 8006436:	3724      	adds	r7, #36	; 0x24
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	40023800 	.word	0x40023800
 8006444:	40013800 	.word	0x40013800
 8006448:	40020000 	.word	0x40020000
 800644c:	40020400 	.word	0x40020400
 8006450:	40020800 	.word	0x40020800
 8006454:	40020c00 	.word	0x40020c00
 8006458:	40021000 	.word	0x40021000
 800645c:	40021400 	.word	0x40021400
 8006460:	40021800 	.word	0x40021800
 8006464:	40021c00 	.word	0x40021c00
 8006468:	40022000 	.word	0x40022000
 800646c:	40022400 	.word	0x40022400
 8006470:	40013c00 	.word	0x40013c00

08006474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	807b      	strh	r3, [r7, #2]
 8006480:	4613      	mov	r3, r2
 8006482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006484:	787b      	ldrb	r3, [r7, #1]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800648a:	887a      	ldrh	r2, [r7, #2]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006490:	e003      	b.n	800649a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006492:	887b      	ldrh	r3, [r7, #2]
 8006494:	041a      	lsls	r2, r3, #16
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	619a      	str	r2, [r3, #24]
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80064a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064a8:	b08f      	sub	sp, #60	; 0x3c
 80064aa:	af0a      	add	r7, sp, #40	; 0x28
 80064ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e054      	b.n	8006562 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d106      	bne.n	80064d8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f01a fabc 	bl	8020a50 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2203      	movs	r2, #3
 80064dc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d102      	bne.n	80064f2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f006 fa79 	bl	800c9ee <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	603b      	str	r3, [r7, #0]
 8006502:	687e      	ldr	r6, [r7, #4]
 8006504:	466d      	mov	r5, sp
 8006506:	f106 0410 	add.w	r4, r6, #16
 800650a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800650c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800650e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006512:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006516:	e885 0003 	stmia.w	r5, {r0, r1}
 800651a:	1d33      	adds	r3, r6, #4
 800651c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800651e:	6838      	ldr	r0, [r7, #0]
 8006520:	f006 f9fc 	bl	800c91c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2101      	movs	r1, #1
 800652a:	4618      	mov	r0, r3
 800652c:	f006 fa70 	bl	800ca10 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	603b      	str	r3, [r7, #0]
 8006536:	687e      	ldr	r6, [r7, #4]
 8006538:	466d      	mov	r5, sp
 800653a:	f106 0410 	add.w	r4, r6, #16
 800653e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006546:	e894 0003 	ldmia.w	r4, {r0, r1}
 800654a:	e885 0003 	stmia.w	r5, {r0, r1}
 800654e:	1d33      	adds	r3, r6, #4
 8006550:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006552:	6838      	ldr	r0, [r7, #0]
 8006554:	f006 fb82 	bl	800cc5c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800656a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800656a:	b590      	push	{r4, r7, lr}
 800656c:	b089      	sub	sp, #36	; 0x24
 800656e:	af04      	add	r7, sp, #16
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	4608      	mov	r0, r1
 8006574:	4611      	mov	r1, r2
 8006576:	461a      	mov	r2, r3
 8006578:	4603      	mov	r3, r0
 800657a:	70fb      	strb	r3, [r7, #3]
 800657c:	460b      	mov	r3, r1
 800657e:	70bb      	strb	r3, [r7, #2]
 8006580:	4613      	mov	r3, r2
 8006582:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_HCD_HC_Init+0x28>
 800658e:	2302      	movs	r3, #2
 8006590:	e076      	b.n	8006680 <HAL_HCD_HC_Init+0x116>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800659a:	78fb      	ldrb	r3, [r7, #3]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	212c      	movs	r1, #44	; 0x2c
 80065a0:	fb01 f303 	mul.w	r3, r1, r3
 80065a4:	4413      	add	r3, r2
 80065a6:	333d      	adds	r3, #61	; 0x3d
 80065a8:	2200      	movs	r2, #0
 80065aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	212c      	movs	r1, #44	; 0x2c
 80065b2:	fb01 f303 	mul.w	r3, r1, r3
 80065b6:	4413      	add	r3, r2
 80065b8:	3338      	adds	r3, #56	; 0x38
 80065ba:	787a      	ldrb	r2, [r7, #1]
 80065bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80065be:	78fb      	ldrb	r3, [r7, #3]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	212c      	movs	r1, #44	; 0x2c
 80065c4:	fb01 f303 	mul.w	r3, r1, r3
 80065c8:	4413      	add	r3, r2
 80065ca:	3340      	adds	r3, #64	; 0x40
 80065cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80065ce:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	212c      	movs	r1, #44	; 0x2c
 80065d6:	fb01 f303 	mul.w	r3, r1, r3
 80065da:	4413      	add	r3, r2
 80065dc:	3339      	adds	r3, #57	; 0x39
 80065de:	78fa      	ldrb	r2, [r7, #3]
 80065e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80065e2:	78fb      	ldrb	r3, [r7, #3]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	212c      	movs	r1, #44	; 0x2c
 80065e8:	fb01 f303 	mul.w	r3, r1, r3
 80065ec:	4413      	add	r3, r2
 80065ee:	333f      	adds	r3, #63	; 0x3f
 80065f0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80065f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	78ba      	ldrb	r2, [r7, #2]
 80065fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065fe:	b2d0      	uxtb	r0, r2
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	212c      	movs	r1, #44	; 0x2c
 8006604:	fb01 f303 	mul.w	r3, r1, r3
 8006608:	4413      	add	r3, r2
 800660a:	333a      	adds	r3, #58	; 0x3a
 800660c:	4602      	mov	r2, r0
 800660e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8006610:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006614:	2b00      	cmp	r3, #0
 8006616:	da09      	bge.n	800662c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006618:	78fb      	ldrb	r3, [r7, #3]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	212c      	movs	r1, #44	; 0x2c
 800661e:	fb01 f303 	mul.w	r3, r1, r3
 8006622:	4413      	add	r3, r2
 8006624:	333b      	adds	r3, #59	; 0x3b
 8006626:	2201      	movs	r2, #1
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	e008      	b.n	800663e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	212c      	movs	r1, #44	; 0x2c
 8006632:	fb01 f303 	mul.w	r3, r1, r3
 8006636:	4413      	add	r3, r2
 8006638:	333b      	adds	r3, #59	; 0x3b
 800663a:	2200      	movs	r2, #0
 800663c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	212c      	movs	r1, #44	; 0x2c
 8006644:	fb01 f303 	mul.w	r3, r1, r3
 8006648:	4413      	add	r3, r2
 800664a:	333c      	adds	r3, #60	; 0x3c
 800664c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006650:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	787c      	ldrb	r4, [r7, #1]
 8006658:	78ba      	ldrb	r2, [r7, #2]
 800665a:	78f9      	ldrb	r1, [r7, #3]
 800665c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800665e:	9302      	str	r3, [sp, #8]
 8006660:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006664:	9301      	str	r3, [sp, #4]
 8006666:	f897 3020 	ldrb.w	r3, [r7, #32]
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	4623      	mov	r3, r4
 800666e:	f006 fc6b 	bl	800cf48 <USB_HC_Init>
 8006672:	4603      	mov	r3, r0
 8006674:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800667e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	bd90      	pop	{r4, r7, pc}

08006688 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d101      	bne.n	80066a6 <HAL_HCD_HC_Halt+0x1e>
 80066a2:	2302      	movs	r3, #2
 80066a4:	e00f      	b.n	80066c6 <HAL_HCD_HC_Halt+0x3e>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	78fa      	ldrb	r2, [r7, #3]
 80066b4:	4611      	mov	r1, r2
 80066b6:	4618      	mov	r0, r3
 80066b8:	f006 fea9 	bl	800d40e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	4608      	mov	r0, r1
 80066da:	4611      	mov	r1, r2
 80066dc:	461a      	mov	r2, r3
 80066de:	4603      	mov	r3, r0
 80066e0:	70fb      	strb	r3, [r7, #3]
 80066e2:	460b      	mov	r3, r1
 80066e4:	70bb      	strb	r3, [r7, #2]
 80066e6:	4613      	mov	r3, r2
 80066e8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80066ea:	78fb      	ldrb	r3, [r7, #3]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	212c      	movs	r1, #44	; 0x2c
 80066f0:	fb01 f303 	mul.w	r3, r1, r3
 80066f4:	4413      	add	r3, r2
 80066f6:	333b      	adds	r3, #59	; 0x3b
 80066f8:	78ba      	ldrb	r2, [r7, #2]
 80066fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	212c      	movs	r1, #44	; 0x2c
 8006702:	fb01 f303 	mul.w	r3, r1, r3
 8006706:	4413      	add	r3, r2
 8006708:	333f      	adds	r3, #63	; 0x3f
 800670a:	787a      	ldrb	r2, [r7, #1]
 800670c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800670e:	7c3b      	ldrb	r3, [r7, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d112      	bne.n	800673a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006714:	78fb      	ldrb	r3, [r7, #3]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	212c      	movs	r1, #44	; 0x2c
 800671a:	fb01 f303 	mul.w	r3, r1, r3
 800671e:	4413      	add	r3, r2
 8006720:	3342      	adds	r3, #66	; 0x42
 8006722:	2203      	movs	r2, #3
 8006724:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006726:	78fb      	ldrb	r3, [r7, #3]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	212c      	movs	r1, #44	; 0x2c
 800672c:	fb01 f303 	mul.w	r3, r1, r3
 8006730:	4413      	add	r3, r2
 8006732:	333d      	adds	r3, #61	; 0x3d
 8006734:	7f3a      	ldrb	r2, [r7, #28]
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	e008      	b.n	800674c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	212c      	movs	r1, #44	; 0x2c
 8006740:	fb01 f303 	mul.w	r3, r1, r3
 8006744:	4413      	add	r3, r2
 8006746:	3342      	adds	r3, #66	; 0x42
 8006748:	2202      	movs	r2, #2
 800674a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800674c:	787b      	ldrb	r3, [r7, #1]
 800674e:	2b03      	cmp	r3, #3
 8006750:	f200 80c6 	bhi.w	80068e0 <HAL_HCD_HC_SubmitRequest+0x210>
 8006754:	a201      	add	r2, pc, #4	; (adr r2, 800675c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	0800676d 	.word	0x0800676d
 8006760:	080068cd 	.word	0x080068cd
 8006764:	080067d1 	.word	0x080067d1
 8006768:	0800684f 	.word	0x0800684f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800676c:	7c3b      	ldrb	r3, [r7, #16]
 800676e:	2b01      	cmp	r3, #1
 8006770:	f040 80b8 	bne.w	80068e4 <HAL_HCD_HC_SubmitRequest+0x214>
 8006774:	78bb      	ldrb	r3, [r7, #2]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f040 80b4 	bne.w	80068e4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800677c:	8b3b      	ldrh	r3, [r7, #24]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d108      	bne.n	8006794 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006782:	78fb      	ldrb	r3, [r7, #3]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	212c      	movs	r1, #44	; 0x2c
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	4413      	add	r3, r2
 800678e:	3355      	adds	r3, #85	; 0x55
 8006790:	2201      	movs	r2, #1
 8006792:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	212c      	movs	r1, #44	; 0x2c
 800679a:	fb01 f303 	mul.w	r3, r1, r3
 800679e:	4413      	add	r3, r2
 80067a0:	3355      	adds	r3, #85	; 0x55
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d109      	bne.n	80067bc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	212c      	movs	r1, #44	; 0x2c
 80067ae:	fb01 f303 	mul.w	r3, r1, r3
 80067b2:	4413      	add	r3, r2
 80067b4:	3342      	adds	r3, #66	; 0x42
 80067b6:	2200      	movs	r2, #0
 80067b8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80067ba:	e093      	b.n	80068e4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	212c      	movs	r1, #44	; 0x2c
 80067c2:	fb01 f303 	mul.w	r3, r1, r3
 80067c6:	4413      	add	r3, r2
 80067c8:	3342      	adds	r3, #66	; 0x42
 80067ca:	2202      	movs	r2, #2
 80067cc:	701a      	strb	r2, [r3, #0]
      break;
 80067ce:	e089      	b.n	80068e4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80067d0:	78bb      	ldrb	r3, [r7, #2]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d11d      	bne.n	8006812 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80067d6:	78fb      	ldrb	r3, [r7, #3]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	212c      	movs	r1, #44	; 0x2c
 80067dc:	fb01 f303 	mul.w	r3, r1, r3
 80067e0:	4413      	add	r3, r2
 80067e2:	3355      	adds	r3, #85	; 0x55
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d109      	bne.n	80067fe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	212c      	movs	r1, #44	; 0x2c
 80067f0:	fb01 f303 	mul.w	r3, r1, r3
 80067f4:	4413      	add	r3, r2
 80067f6:	3342      	adds	r3, #66	; 0x42
 80067f8:	2200      	movs	r2, #0
 80067fa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80067fc:	e073      	b.n	80068e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80067fe:	78fb      	ldrb	r3, [r7, #3]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	212c      	movs	r1, #44	; 0x2c
 8006804:	fb01 f303 	mul.w	r3, r1, r3
 8006808:	4413      	add	r3, r2
 800680a:	3342      	adds	r3, #66	; 0x42
 800680c:	2202      	movs	r2, #2
 800680e:	701a      	strb	r2, [r3, #0]
      break;
 8006810:	e069      	b.n	80068e6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	212c      	movs	r1, #44	; 0x2c
 8006818:	fb01 f303 	mul.w	r3, r1, r3
 800681c:	4413      	add	r3, r2
 800681e:	3354      	adds	r3, #84	; 0x54
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d109      	bne.n	800683a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006826:	78fb      	ldrb	r3, [r7, #3]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	212c      	movs	r1, #44	; 0x2c
 800682c:	fb01 f303 	mul.w	r3, r1, r3
 8006830:	4413      	add	r3, r2
 8006832:	3342      	adds	r3, #66	; 0x42
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]
      break;
 8006838:	e055      	b.n	80068e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800683a:	78fb      	ldrb	r3, [r7, #3]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	212c      	movs	r1, #44	; 0x2c
 8006840:	fb01 f303 	mul.w	r3, r1, r3
 8006844:	4413      	add	r3, r2
 8006846:	3342      	adds	r3, #66	; 0x42
 8006848:	2202      	movs	r2, #2
 800684a:	701a      	strb	r2, [r3, #0]
      break;
 800684c:	e04b      	b.n	80068e6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800684e:	78bb      	ldrb	r3, [r7, #2]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d11d      	bne.n	8006890 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006854:	78fb      	ldrb	r3, [r7, #3]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	212c      	movs	r1, #44	; 0x2c
 800685a:	fb01 f303 	mul.w	r3, r1, r3
 800685e:	4413      	add	r3, r2
 8006860:	3355      	adds	r3, #85	; 0x55
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d109      	bne.n	800687c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006868:	78fb      	ldrb	r3, [r7, #3]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	212c      	movs	r1, #44	; 0x2c
 800686e:	fb01 f303 	mul.w	r3, r1, r3
 8006872:	4413      	add	r3, r2
 8006874:	3342      	adds	r3, #66	; 0x42
 8006876:	2200      	movs	r2, #0
 8006878:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800687a:	e034      	b.n	80068e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	212c      	movs	r1, #44	; 0x2c
 8006882:	fb01 f303 	mul.w	r3, r1, r3
 8006886:	4413      	add	r3, r2
 8006888:	3342      	adds	r3, #66	; 0x42
 800688a:	2202      	movs	r2, #2
 800688c:	701a      	strb	r2, [r3, #0]
      break;
 800688e:	e02a      	b.n	80068e6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	212c      	movs	r1, #44	; 0x2c
 8006896:	fb01 f303 	mul.w	r3, r1, r3
 800689a:	4413      	add	r3, r2
 800689c:	3354      	adds	r3, #84	; 0x54
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d109      	bne.n	80068b8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	212c      	movs	r1, #44	; 0x2c
 80068aa:	fb01 f303 	mul.w	r3, r1, r3
 80068ae:	4413      	add	r3, r2
 80068b0:	3342      	adds	r3, #66	; 0x42
 80068b2:	2200      	movs	r2, #0
 80068b4:	701a      	strb	r2, [r3, #0]
      break;
 80068b6:	e016      	b.n	80068e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	212c      	movs	r1, #44	; 0x2c
 80068be:	fb01 f303 	mul.w	r3, r1, r3
 80068c2:	4413      	add	r3, r2
 80068c4:	3342      	adds	r3, #66	; 0x42
 80068c6:	2202      	movs	r2, #2
 80068c8:	701a      	strb	r2, [r3, #0]
      break;
 80068ca:	e00c      	b.n	80068e6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	212c      	movs	r1, #44	; 0x2c
 80068d2:	fb01 f303 	mul.w	r3, r1, r3
 80068d6:	4413      	add	r3, r2
 80068d8:	3342      	adds	r3, #66	; 0x42
 80068da:	2200      	movs	r2, #0
 80068dc:	701a      	strb	r2, [r3, #0]
      break;
 80068de:	e002      	b.n	80068e6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80068e0:	bf00      	nop
 80068e2:	e000      	b.n	80068e6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80068e4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80068e6:	78fb      	ldrb	r3, [r7, #3]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	212c      	movs	r1, #44	; 0x2c
 80068ec:	fb01 f303 	mul.w	r3, r1, r3
 80068f0:	4413      	add	r3, r2
 80068f2:	3344      	adds	r3, #68	; 0x44
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	8b3a      	ldrh	r2, [r7, #24]
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	202c      	movs	r0, #44	; 0x2c
 8006900:	fb00 f303 	mul.w	r3, r0, r3
 8006904:	440b      	add	r3, r1
 8006906:	334c      	adds	r3, #76	; 0x4c
 8006908:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	212c      	movs	r1, #44	; 0x2c
 8006910:	fb01 f303 	mul.w	r3, r1, r3
 8006914:	4413      	add	r3, r2
 8006916:	3360      	adds	r3, #96	; 0x60
 8006918:	2200      	movs	r2, #0
 800691a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800691c:	78fb      	ldrb	r3, [r7, #3]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	212c      	movs	r1, #44	; 0x2c
 8006922:	fb01 f303 	mul.w	r3, r1, r3
 8006926:	4413      	add	r3, r2
 8006928:	3350      	adds	r3, #80	; 0x50
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	212c      	movs	r1, #44	; 0x2c
 8006934:	fb01 f303 	mul.w	r3, r1, r3
 8006938:	4413      	add	r3, r2
 800693a:	3339      	adds	r3, #57	; 0x39
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	212c      	movs	r1, #44	; 0x2c
 8006946:	fb01 f303 	mul.w	r3, r1, r3
 800694a:	4413      	add	r3, r2
 800694c:	3361      	adds	r3, #97	; 0x61
 800694e:	2200      	movs	r2, #0
 8006950:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	78fb      	ldrb	r3, [r7, #3]
 8006958:	222c      	movs	r2, #44	; 0x2c
 800695a:	fb02 f303 	mul.w	r3, r2, r3
 800695e:	3338      	adds	r3, #56	; 0x38
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	18d1      	adds	r1, r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	b2db      	uxtb	r3, r3
 800696a:	461a      	mov	r2, r3
 800696c:	f006 fbfa 	bl	800d164 <USB_HC_StartXfer>
 8006970:	4603      	mov	r3, r0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop

0800697c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4618      	mov	r0, r3
 8006994:	f006 f91f 	bl	800cbd6 <USB_GetMode>
 8006998:	4603      	mov	r3, r0
 800699a:	2b01      	cmp	r3, #1
 800699c:	f040 80ef 	bne.w	8006b7e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f006 f903 	bl	800cbb0 <USB_ReadInterrupts>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 80e5 	beq.w	8006b7c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f006 f8fa 	bl	800cbb0 <USB_ReadInterrupts>
 80069bc:	4603      	mov	r3, r0
 80069be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069c6:	d104      	bne.n	80069d2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80069d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f006 f8ea 	bl	800cbb0 <USB_ReadInterrupts>
 80069dc:	4603      	mov	r3, r0
 80069de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069e6:	d104      	bne.n	80069f2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80069f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f006 f8da 	bl	800cbb0 <USB_ReadInterrupts>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a06:	d104      	bne.n	8006a12 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006a10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f006 f8ca 	bl	800cbb0 <USB_ReadInterrupts>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d103      	bne.n	8006a2e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f006 f8bc 	bl	800cbb0 <USB_ReadInterrupts>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a42:	d115      	bne.n	8006a70 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006a4c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d108      	bne.n	8006a70 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f01a f868 	bl	8020b34 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2101      	movs	r1, #1
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f006 f9a6 	bl	800cdbc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f006 f89b 	bl	800cbb0 <USB_ReadInterrupts>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a84:	d102      	bne.n	8006a8c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f001 fa03 	bl	8007e92 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f006 f88d 	bl	800cbb0 <USB_ReadInterrupts>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d106      	bne.n	8006aae <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f01a f82b 	bl	8020afc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2208      	movs	r2, #8
 8006aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f006 f87c 	bl	800cbb0 <USB_ReadInterrupts>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f003 0310 	and.w	r3, r3, #16
 8006abe:	2b10      	cmp	r3, #16
 8006ac0:	d101      	bne.n	8006ac6 <HAL_HCD_IRQHandler+0x14a>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <HAL_HCD_IRQHandler+0x14c>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d012      	beq.n	8006af2 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699a      	ldr	r2, [r3, #24]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0210 	bic.w	r2, r2, #16
 8006ada:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 f907 	bl	8007cf0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	699a      	ldr	r2, [r3, #24]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f042 0210 	orr.w	r2, r2, #16
 8006af0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f006 f85a 	bl	800cbb0 <USB_ReadInterrupts>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b06:	d13a      	bne.n	8006b7e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f006 fc6d 	bl	800d3ec <USB_HC_ReadInterrupt>
 8006b12:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	e025      	b.n	8006b66 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f003 030f 	and.w	r3, r3, #15
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	fa22 f303 	lsr.w	r3, r2, r3
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d018      	beq.n	8006b60 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b44:	d106      	bne.n	8006b54 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f8ab 	bl	8006ca8 <HCD_HC_IN_IRQHandler>
 8006b52:	e005      	b.n	8006b60 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fcc9 	bl	80074f2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	3301      	adds	r3, #1
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d3d4      	bcc.n	8006b1a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b78:	615a      	str	r2, [r3, #20]
 8006b7a:	e000      	b.n	8006b7e <HAL_HCD_IRQHandler+0x202>
      return;
 8006b7c:	bf00      	nop
    }
  }
}
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d101      	bne.n	8006b9a <HAL_HCD_Start+0x16>
 8006b96:	2302      	movs	r3, #2
 8006b98:	e013      	b.n	8006bc2 <HAL_HCD_Start+0x3e>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f005 ff10 	bl	800c9cc <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f006 f966 	bl	800ce84 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b082      	sub	sp, #8
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d101      	bne.n	8006be0 <HAL_HCD_Stop+0x16>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e00d      	b.n	8006bfc <HAL_HCD_Stop+0x32>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f006 fd67 	bl	800d6c0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f006 f90d 	bl	800ce30 <USB_ResetPort>
 8006c16:	4603      	mov	r3, r0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	212c      	movs	r1, #44	; 0x2c
 8006c32:	fb01 f303 	mul.w	r3, r1, r3
 8006c36:	4413      	add	r3, r2
 8006c38:	3360      	adds	r3, #96	; 0x60
 8006c3a:	781b      	ldrb	r3, [r3, #0]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006c54:	78fb      	ldrb	r3, [r7, #3]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	212c      	movs	r1, #44	; 0x2c
 8006c5a:	fb01 f303 	mul.w	r3, r1, r3
 8006c5e:	4413      	add	r3, r2
 8006c60:	3350      	adds	r3, #80	; 0x50
 8006c62:	681b      	ldr	r3, [r3, #0]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f006 f951 	bl	800cf24 <USB_GetCurrentFrame>
 8006c82:	4603      	mov	r3, r0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f006 f92c 	bl	800cef6 <USB_GetHostSpeed>
 8006c9e:	4603      	mov	r3, r0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006cbe:	78fb      	ldrb	r3, [r7, #3]
 8006cc0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b04      	cmp	r3, #4
 8006cd6:	d119      	bne.n	8006d0c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	2304      	movs	r3, #4
 8006ce8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	0151      	lsls	r1, r2, #5
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	440a      	add	r2, r1
 8006d00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d04:	f043 0302 	orr.w	r3, r3, #2
 8006d08:	60d3      	str	r3, [r2, #12]
 8006d0a:	e101      	b.n	8006f10 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d22:	d12b      	bne.n	8006d7c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d30:	461a      	mov	r2, r3
 8006d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d36:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	212c      	movs	r1, #44	; 0x2c
 8006d3e:	fb01 f303 	mul.w	r3, r1, r3
 8006d42:	4413      	add	r3, r2
 8006d44:	3361      	adds	r3, #97	; 0x61
 8006d46:	2207      	movs	r2, #7
 8006d48:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	0151      	lsls	r1, r2, #5
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	440a      	add	r2, r1
 8006d60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d64:	f043 0302 	orr.w	r3, r3, #2
 8006d68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	b2d2      	uxtb	r2, r2
 8006d72:	4611      	mov	r1, r2
 8006d74:	4618      	mov	r0, r3
 8006d76:	f006 fb4a 	bl	800d40e <USB_HC_Halt>
 8006d7a:	e0c9      	b.n	8006f10 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	d109      	bne.n	8006da6 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d9e:	461a      	mov	r2, r3
 8006da0:	2320      	movs	r3, #32
 8006da2:	6093      	str	r3, [r2, #8]
 8006da4:	e0b4      	b.n	8006f10 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d133      	bne.n	8006e24 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	0151      	lsls	r1, r2, #5
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	440a      	add	r2, r1
 8006dd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dd6:	f043 0302 	orr.w	r3, r3, #2
 8006dda:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	212c      	movs	r1, #44	; 0x2c
 8006de2:	fb01 f303 	mul.w	r3, r1, r3
 8006de6:	4413      	add	r3, r2
 8006de8:	3361      	adds	r3, #97	; 0x61
 8006dea:	2205      	movs	r2, #5
 8006dec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	2310      	movs	r3, #16
 8006dfe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	2308      	movs	r3, #8
 8006e10:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	b2d2      	uxtb	r2, r2
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f006 faf6 	bl	800d40e <USB_HC_Halt>
 8006e22:	e075      	b.n	8006f10 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e3a:	d134      	bne.n	8006ea6 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	0151      	lsls	r1, r2, #5
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	440a      	add	r2, r1
 8006e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e56:	f043 0302 	orr.w	r3, r3, #2
 8006e5a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	212c      	movs	r1, #44	; 0x2c
 8006e62:	fb01 f303 	mul.w	r3, r1, r3
 8006e66:	4413      	add	r3, r2
 8006e68:	3361      	adds	r3, #97	; 0x61
 8006e6a:	2208      	movs	r2, #8
 8006e6c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	2310      	movs	r3, #16
 8006e7e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e92:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f006 fab5 	bl	800d40e <USB_HC_Halt>
 8006ea4:	e034      	b.n	8006f10 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb8:	2b80      	cmp	r3, #128	; 0x80
 8006eba:	d129      	bne.n	8006f10 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	0151      	lsls	r1, r2, #5
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	440a      	add	r2, r1
 8006ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ed6:	f043 0302 	orr.w	r3, r3, #2
 8006eda:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	212c      	movs	r1, #44	; 0x2c
 8006ee2:	fb01 f303 	mul.w	r3, r1, r3
 8006ee6:	4413      	add	r3, r2
 8006ee8:	3361      	adds	r3, #97	; 0x61
 8006eea:	2206      	movs	r2, #6
 8006eec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f006 fa88 	bl	800d40e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	2380      	movs	r3, #128	; 0x80
 8006f0e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f26:	d122      	bne.n	8006f6e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	0151      	lsls	r1, r2, #5
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	440a      	add	r2, r1
 8006f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f42:	f043 0302 	orr.w	r3, r3, #2
 8006f46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	b2d2      	uxtb	r2, r2
 8006f50:	4611      	mov	r1, r2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f006 fa5b 	bl	800d40e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f64:	461a      	mov	r2, r3
 8006f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f6a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006f6c:	e2bd      	b.n	80074ea <HCD_HC_IN_IRQHandler+0x842>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	f040 811d 	bne.w	80071c0 <HCD_HC_IN_IRQHandler+0x518>
    if (hhcd->Init.dma_enable != 0U)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d019      	beq.n	8006fc2 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	212c      	movs	r1, #44	; 0x2c
 8006f94:	fb01 f303 	mul.w	r3, r1, r3
 8006f98:	4413      	add	r3, r2
 8006f9a:	3348      	adds	r3, #72	; 0x48
 8006f9c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	0159      	lsls	r1, r3, #5
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	440b      	add	r3, r1
 8006fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006fb0:	1ad2      	subs	r2, r2, r3
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	202c      	movs	r0, #44	; 0x2c
 8006fb8:	fb00 f303 	mul.w	r3, r0, r3
 8006fbc:	440b      	add	r3, r1
 8006fbe:	3350      	adds	r3, #80	; 0x50
 8006fc0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	212c      	movs	r1, #44	; 0x2c
 8006fc8:	fb01 f303 	mul.w	r3, r1, r3
 8006fcc:	4413      	add	r3, r2
 8006fce:	3361      	adds	r3, #97	; 0x61
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	212c      	movs	r1, #44	; 0x2c
 8006fda:	fb01 f303 	mul.w	r3, r1, r3
 8006fde:	4413      	add	r3, r2
 8006fe0:	335c      	adds	r3, #92	; 0x5c
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	212c      	movs	r1, #44	; 0x2c
 8006ffe:	fb01 f303 	mul.w	r3, r1, r3
 8007002:	4413      	add	r3, r2
 8007004:	333f      	adds	r3, #63	; 0x3f
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d009      	beq.n	8007020 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	212c      	movs	r1, #44	; 0x2c
 8007012:	fb01 f303 	mul.w	r3, r1, r3
 8007016:	4413      	add	r3, r2
 8007018:	333f      	adds	r3, #63	; 0x3f
 800701a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800701c:	2b02      	cmp	r3, #2
 800701e:	d121      	bne.n	8007064 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	4413      	add	r3, r2
 8007028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	0151      	lsls	r1, r2, #5
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	440a      	add	r2, r1
 8007036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800703a:	f043 0302 	orr.w	r3, r3, #2
 800703e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	4611      	mov	r1, r2
 800704a:	4618      	mov	r0, r3
 800704c:	f006 f9df 	bl	800d40e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	4413      	add	r3, r2
 8007058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800705c:	461a      	mov	r2, r3
 800705e:	2310      	movs	r3, #16
 8007060:	6093      	str	r3, [r2, #8]
 8007062:	e068      	b.n	8007136 <HCD_HC_IN_IRQHandler+0x48e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	212c      	movs	r1, #44	; 0x2c
 800706a:	fb01 f303 	mul.w	r3, r1, r3
 800706e:	4413      	add	r3, r2
 8007070:	333f      	adds	r3, #63	; 0x3f
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	2b03      	cmp	r3, #3
 8007076:	d128      	bne.n	80070ca <HCD_HC_IN_IRQHandler+0x422>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	4413      	add	r3, r2
 8007080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	0151      	lsls	r1, r2, #5
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	440a      	add	r2, r1
 800708e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007092:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007096:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	212c      	movs	r1, #44	; 0x2c
 800709e:	fb01 f303 	mul.w	r3, r1, r3
 80070a2:	4413      	add	r3, r2
 80070a4:	3360      	adds	r3, #96	; 0x60
 80070a6:	2201      	movs	r2, #1
 80070a8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	b2d8      	uxtb	r0, r3
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	212c      	movs	r1, #44	; 0x2c
 80070b4:	fb01 f303 	mul.w	r3, r1, r3
 80070b8:	4413      	add	r3, r2
 80070ba:	3360      	adds	r3, #96	; 0x60
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	4601      	mov	r1, r0
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f019 fd44 	bl	8020b50 <HAL_HCD_HC_NotifyURBChange_Callback>
 80070c8:	e035      	b.n	8007136 <HCD_HC_IN_IRQHandler+0x48e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	212c      	movs	r1, #44	; 0x2c
 80070d0:	fb01 f303 	mul.w	r3, r1, r3
 80070d4:	4413      	add	r3, r2
 80070d6:	333f      	adds	r3, #63	; 0x3f
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d12b      	bne.n	8007136 <HCD_HC_IN_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	212c      	movs	r1, #44	; 0x2c
 80070e4:	fb01 f303 	mul.w	r3, r1, r3
 80070e8:	4413      	add	r3, r2
 80070ea:	3360      	adds	r3, #96	; 0x60
 80070ec:	2201      	movs	r2, #1
 80070ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	212c      	movs	r1, #44	; 0x2c
 80070f6:	fb01 f303 	mul.w	r3, r1, r3
 80070fa:	4413      	add	r3, r2
 80070fc:	3354      	adds	r3, #84	; 0x54
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	f083 0301 	eor.w	r3, r3, #1
 8007104:	b2d8      	uxtb	r0, r3
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	212c      	movs	r1, #44	; 0x2c
 800710c:	fb01 f303 	mul.w	r3, r1, r3
 8007110:	4413      	add	r3, r2
 8007112:	3354      	adds	r3, #84	; 0x54
 8007114:	4602      	mov	r2, r0
 8007116:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	b2d8      	uxtb	r0, r3
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	212c      	movs	r1, #44	; 0x2c
 8007122:	fb01 f303 	mul.w	r3, r1, r3
 8007126:	4413      	add	r3, r2
 8007128:	3360      	adds	r3, #96	; 0x60
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	461a      	mov	r2, r3
 800712e:	4601      	mov	r1, r0
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f019 fd0d 	bl	8020b50 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d12b      	bne.n	8007196 <HCD_HC_IN_IRQHandler+0x4ee>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	212c      	movs	r1, #44	; 0x2c
 8007144:	fb01 f303 	mul.w	r3, r1, r3
 8007148:	4413      	add	r3, r2
 800714a:	3348      	adds	r3, #72	; 0x48
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	202c      	movs	r0, #44	; 0x2c
 8007154:	fb00 f202 	mul.w	r2, r0, r2
 8007158:	440a      	add	r2, r1
 800715a:	3240      	adds	r2, #64	; 0x40
 800715c:	8812      	ldrh	r2, [r2, #0]
 800715e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 81bf 	beq.w	80074ea <HCD_HC_IN_IRQHandler+0x842>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	212c      	movs	r1, #44	; 0x2c
 8007172:	fb01 f303 	mul.w	r3, r1, r3
 8007176:	4413      	add	r3, r2
 8007178:	3354      	adds	r3, #84	; 0x54
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	f083 0301 	eor.w	r3, r3, #1
 8007180:	b2d8      	uxtb	r0, r3
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	212c      	movs	r1, #44	; 0x2c
 8007188:	fb01 f303 	mul.w	r3, r1, r3
 800718c:	4413      	add	r3, r2
 800718e:	3354      	adds	r3, #84	; 0x54
 8007190:	4602      	mov	r2, r0
 8007192:	701a      	strb	r2, [r3, #0]
}
 8007194:	e1a9      	b.n	80074ea <HCD_HC_IN_IRQHandler+0x842>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	212c      	movs	r1, #44	; 0x2c
 800719c:	fb01 f303 	mul.w	r3, r1, r3
 80071a0:	4413      	add	r3, r2
 80071a2:	3354      	adds	r3, #84	; 0x54
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	f083 0301 	eor.w	r3, r3, #1
 80071aa:	b2d8      	uxtb	r0, r3
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	212c      	movs	r1, #44	; 0x2c
 80071b2:	fb01 f303 	mul.w	r3, r1, r3
 80071b6:	4413      	add	r3, r2
 80071b8:	3354      	adds	r3, #84	; 0x54
 80071ba:	4602      	mov	r2, r0
 80071bc:	701a      	strb	r2, [r3, #0]
}
 80071be:	e194      	b.n	80074ea <HCD_HC_IN_IRQHandler+0x842>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	f040 8107 	bne.w	80073e6 <HCD_HC_IN_IRQHandler+0x73e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071f2:	f023 0302 	bic.w	r3, r3, #2
 80071f6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	212c      	movs	r1, #44	; 0x2c
 80071fe:	fb01 f303 	mul.w	r3, r1, r3
 8007202:	4413      	add	r3, r2
 8007204:	3361      	adds	r3, #97	; 0x61
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d109      	bne.n	8007220 <HCD_HC_IN_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	212c      	movs	r1, #44	; 0x2c
 8007212:	fb01 f303 	mul.w	r3, r1, r3
 8007216:	4413      	add	r3, r2
 8007218:	3360      	adds	r3, #96	; 0x60
 800721a:	2201      	movs	r2, #1
 800721c:	701a      	strb	r2, [r3, #0]
 800721e:	e0c9      	b.n	80073b4 <HCD_HC_IN_IRQHandler+0x70c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	212c      	movs	r1, #44	; 0x2c
 8007226:	fb01 f303 	mul.w	r3, r1, r3
 800722a:	4413      	add	r3, r2
 800722c:	3361      	adds	r3, #97	; 0x61
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	2b05      	cmp	r3, #5
 8007232:	d109      	bne.n	8007248 <HCD_HC_IN_IRQHandler+0x5a0>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	212c      	movs	r1, #44	; 0x2c
 800723a:	fb01 f303 	mul.w	r3, r1, r3
 800723e:	4413      	add	r3, r2
 8007240:	3360      	adds	r3, #96	; 0x60
 8007242:	2205      	movs	r2, #5
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	e0b5      	b.n	80073b4 <HCD_HC_IN_IRQHandler+0x70c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	212c      	movs	r1, #44	; 0x2c
 800724e:	fb01 f303 	mul.w	r3, r1, r3
 8007252:	4413      	add	r3, r2
 8007254:	3361      	adds	r3, #97	; 0x61
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b06      	cmp	r3, #6
 800725a:	d009      	beq.n	8007270 <HCD_HC_IN_IRQHandler+0x5c8>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	212c      	movs	r1, #44	; 0x2c
 8007262:	fb01 f303 	mul.w	r3, r1, r3
 8007266:	4413      	add	r3, r2
 8007268:	3361      	adds	r3, #97	; 0x61
 800726a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800726c:	2b08      	cmp	r3, #8
 800726e:	d150      	bne.n	8007312 <HCD_HC_IN_IRQHandler+0x66a>
      hhcd->hc[ch_num].ErrCnt++;
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	212c      	movs	r1, #44	; 0x2c
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	4413      	add	r3, r2
 800727c:	335c      	adds	r3, #92	; 0x5c
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	6879      	ldr	r1, [r7, #4]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	202c      	movs	r0, #44	; 0x2c
 8007288:	fb00 f303 	mul.w	r3, r0, r3
 800728c:	440b      	add	r3, r1
 800728e:	335c      	adds	r3, #92	; 0x5c
 8007290:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	212c      	movs	r1, #44	; 0x2c
 8007298:	fb01 f303 	mul.w	r3, r1, r3
 800729c:	4413      	add	r3, r2
 800729e:	335c      	adds	r3, #92	; 0x5c
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d912      	bls.n	80072cc <HCD_HC_IN_IRQHandler+0x624>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	212c      	movs	r1, #44	; 0x2c
 80072ac:	fb01 f303 	mul.w	r3, r1, r3
 80072b0:	4413      	add	r3, r2
 80072b2:	335c      	adds	r3, #92	; 0x5c
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	212c      	movs	r1, #44	; 0x2c
 80072be:	fb01 f303 	mul.w	r3, r1, r3
 80072c2:	4413      	add	r3, r2
 80072c4:	3360      	adds	r3, #96	; 0x60
 80072c6:	2204      	movs	r2, #4
 80072c8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80072ca:	e073      	b.n	80073b4 <HCD_HC_IN_IRQHandler+0x70c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	212c      	movs	r1, #44	; 0x2c
 80072d2:	fb01 f303 	mul.w	r3, r1, r3
 80072d6:	4413      	add	r3, r2
 80072d8:	3360      	adds	r3, #96	; 0x60
 80072da:	2202      	movs	r2, #2
 80072dc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072f4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072fc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	4413      	add	r3, r2
 8007306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730a:	461a      	mov	r2, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007310:	e050      	b.n	80073b4 <HCD_HC_IN_IRQHandler+0x70c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	212c      	movs	r1, #44	; 0x2c
 8007318:	fb01 f303 	mul.w	r3, r1, r3
 800731c:	4413      	add	r3, r2
 800731e:	3361      	adds	r3, #97	; 0x61
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b03      	cmp	r3, #3
 8007324:	d122      	bne.n	800736c <HCD_HC_IN_IRQHandler+0x6c4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	212c      	movs	r1, #44	; 0x2c
 800732c:	fb01 f303 	mul.w	r3, r1, r3
 8007330:	4413      	add	r3, r2
 8007332:	3360      	adds	r3, #96	; 0x60
 8007334:	2202      	movs	r2, #2
 8007336:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	4413      	add	r3, r2
 8007340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800734e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007356:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	4413      	add	r3, r2
 8007360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007364:	461a      	mov	r2, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	e023      	b.n	80073b4 <HCD_HC_IN_IRQHandler+0x70c>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	212c      	movs	r1, #44	; 0x2c
 8007372:	fb01 f303 	mul.w	r3, r1, r3
 8007376:	4413      	add	r3, r2
 8007378:	3361      	adds	r3, #97	; 0x61
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b07      	cmp	r3, #7
 800737e:	d119      	bne.n	80073b4 <HCD_HC_IN_IRQHandler+0x70c>
      hhcd->hc[ch_num].ErrCnt++;
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	212c      	movs	r1, #44	; 0x2c
 8007386:	fb01 f303 	mul.w	r3, r1, r3
 800738a:	4413      	add	r3, r2
 800738c:	335c      	adds	r3, #92	; 0x5c
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	202c      	movs	r0, #44	; 0x2c
 8007398:	fb00 f303 	mul.w	r3, r0, r3
 800739c:	440b      	add	r3, r1
 800739e:	335c      	adds	r3, #92	; 0x5c
 80073a0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	212c      	movs	r1, #44	; 0x2c
 80073a8:	fb01 f303 	mul.w	r3, r1, r3
 80073ac:	4413      	add	r3, r2
 80073ae:	3360      	adds	r3, #96	; 0x60
 80073b0:	2204      	movs	r2, #4
 80073b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c0:	461a      	mov	r2, r3
 80073c2:	2302      	movs	r3, #2
 80073c4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	b2d8      	uxtb	r0, r3
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	212c      	movs	r1, #44	; 0x2c
 80073d0:	fb01 f303 	mul.w	r3, r1, r3
 80073d4:	4413      	add	r3, r2
 80073d6:	3360      	adds	r3, #96	; 0x60
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	4601      	mov	r1, r0
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f019 fbb6 	bl	8020b50 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80073e4:	e081      	b.n	80074ea <HCD_HC_IN_IRQHandler+0x842>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f003 0310 	and.w	r3, r3, #16
 80073f8:	2b10      	cmp	r3, #16
 80073fa:	d176      	bne.n	80074ea <HCD_HC_IN_IRQHandler+0x842>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	212c      	movs	r1, #44	; 0x2c
 8007402:	fb01 f303 	mul.w	r3, r1, r3
 8007406:	4413      	add	r3, r2
 8007408:	333f      	adds	r3, #63	; 0x3f
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b03      	cmp	r3, #3
 800740e:	d121      	bne.n	8007454 <HCD_HC_IN_IRQHandler+0x7ac>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	212c      	movs	r1, #44	; 0x2c
 8007416:	fb01 f303 	mul.w	r3, r1, r3
 800741a:	4413      	add	r3, r2
 800741c:	335c      	adds	r3, #92	; 0x5c
 800741e:	2200      	movs	r2, #0
 8007420:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	4413      	add	r3, r2
 800742a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	0151      	lsls	r1, r2, #5
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	440a      	add	r2, r1
 8007438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800743c:	f043 0302 	orr.w	r3, r3, #2
 8007440:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	b2d2      	uxtb	r2, r2
 800744a:	4611      	mov	r1, r2
 800744c:	4618      	mov	r0, r3
 800744e:	f005 ffde 	bl	800d40e <USB_HC_Halt>
 8007452:	e041      	b.n	80074d8 <HCD_HC_IN_IRQHandler+0x830>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	212c      	movs	r1, #44	; 0x2c
 800745a:	fb01 f303 	mul.w	r3, r1, r3
 800745e:	4413      	add	r3, r2
 8007460:	333f      	adds	r3, #63	; 0x3f
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d009      	beq.n	800747c <HCD_HC_IN_IRQHandler+0x7d4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	212c      	movs	r1, #44	; 0x2c
 800746e:	fb01 f303 	mul.w	r3, r1, r3
 8007472:	4413      	add	r3, r2
 8007474:	333f      	adds	r3, #63	; 0x3f
 8007476:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007478:	2b02      	cmp	r3, #2
 800747a:	d12d      	bne.n	80074d8 <HCD_HC_IN_IRQHandler+0x830>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	212c      	movs	r1, #44	; 0x2c
 8007482:	fb01 f303 	mul.w	r3, r1, r3
 8007486:	4413      	add	r3, r2
 8007488:	335c      	adds	r3, #92	; 0x5c
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d120      	bne.n	80074d8 <HCD_HC_IN_IRQHandler+0x830>
        hhcd->hc[ch_num].state = HC_NAK;
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	212c      	movs	r1, #44	; 0x2c
 800749c:	fb01 f303 	mul.w	r3, r1, r3
 80074a0:	4413      	add	r3, r2
 80074a2:	3361      	adds	r3, #97	; 0x61
 80074a4:	2203      	movs	r2, #3
 80074a6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	0151      	lsls	r1, r2, #5
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	440a      	add	r2, r1
 80074be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074c2:	f043 0302 	orr.w	r3, r3, #2
 80074c6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	b2d2      	uxtb	r2, r2
 80074d0:	4611      	mov	r1, r2
 80074d2:	4618      	mov	r0, r3
 80074d4:	f005 ff9b 	bl	800d40e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074e4:	461a      	mov	r2, r3
 80074e6:	2310      	movs	r3, #16
 80074e8:	6093      	str	r3, [r2, #8]
}
 80074ea:	bf00      	nop
 80074ec:	3718      	adds	r7, #24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b088      	sub	sp, #32
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	460b      	mov	r3, r1
 80074fc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8007508:	78fb      	ldrb	r3, [r7, #3]
 800750a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	4413      	add	r3, r2
 8007514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f003 0304 	and.w	r3, r3, #4
 800751e:	2b04      	cmp	r3, #4
 8007520:	d119      	bne.n	8007556 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	4413      	add	r3, r2
 800752a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800752e:	461a      	mov	r2, r3
 8007530:	2304      	movs	r3, #4
 8007532:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	4413      	add	r3, r2
 800753c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	0151      	lsls	r1, r2, #5
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	440a      	add	r2, r1
 800754a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800754e:	f043 0302 	orr.w	r3, r3, #2
 8007552:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8007554:	e3c8      	b.n	8007ce8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	4413      	add	r3, r2
 800755e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f003 0320 	and.w	r3, r3, #32
 8007568:	2b20      	cmp	r3, #32
 800756a:	d13e      	bne.n	80075ea <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	4413      	add	r3, r2
 8007574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007578:	461a      	mov	r2, r3
 800757a:	2320      	movs	r3, #32
 800757c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	212c      	movs	r1, #44	; 0x2c
 8007584:	fb01 f303 	mul.w	r3, r1, r3
 8007588:	4413      	add	r3, r2
 800758a:	333d      	adds	r3, #61	; 0x3d
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	2b01      	cmp	r3, #1
 8007590:	f040 83aa 	bne.w	8007ce8 <HCD_HC_OUT_IRQHandler+0x7f6>
      hhcd->hc[ch_num].do_ping = 0U;
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	212c      	movs	r1, #44	; 0x2c
 800759a:	fb01 f303 	mul.w	r3, r1, r3
 800759e:	4413      	add	r3, r2
 80075a0:	333d      	adds	r3, #61	; 0x3d
 80075a2:	2200      	movs	r2, #0
 80075a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	212c      	movs	r1, #44	; 0x2c
 80075ac:	fb01 f303 	mul.w	r3, r1, r3
 80075b0:	4413      	add	r3, r2
 80075b2:	3360      	adds	r3, #96	; 0x60
 80075b4:	2202      	movs	r2, #2
 80075b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	0151      	lsls	r1, r2, #5
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	440a      	add	r2, r1
 80075ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075d2:	f043 0302 	orr.w	r3, r3, #2
 80075d6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	b2d2      	uxtb	r2, r2
 80075e0:	4611      	mov	r1, r2
 80075e2:	4618      	mov	r0, r3
 80075e4:	f005 ff13 	bl	800d40e <USB_HC_Halt>
}
 80075e8:	e37e      	b.n	8007ce8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007600:	d122      	bne.n	8007648 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	4413      	add	r3, r2
 800760a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	0151      	lsls	r1, r2, #5
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	440a      	add	r2, r1
 8007618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800761c:	f043 0302 	orr.w	r3, r3, #2
 8007620:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	b2d2      	uxtb	r2, r2
 800762a:	4611      	mov	r1, r2
 800762c:	4618      	mov	r0, r3
 800762e:	f005 feee 	bl	800d40e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	4413      	add	r3, r2
 800763a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800763e:	461a      	mov	r2, r3
 8007640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007644:	6093      	str	r3, [r2, #8]
}
 8007646:	e34f      	b.n	8007ce8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	4413      	add	r3, r2
 8007650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b01      	cmp	r3, #1
 800765c:	d150      	bne.n	8007700 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	212c      	movs	r1, #44	; 0x2c
 8007664:	fb01 f303 	mul.w	r3, r1, r3
 8007668:	4413      	add	r3, r2
 800766a:	335c      	adds	r3, #92	; 0x5c
 800766c:	2200      	movs	r2, #0
 800766e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	4413      	add	r3, r2
 8007678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d111      	bne.n	80076aa <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	212c      	movs	r1, #44	; 0x2c
 800768c:	fb01 f303 	mul.w	r3, r1, r3
 8007690:	4413      	add	r3, r2
 8007692:	333d      	adds	r3, #61	; 0x3d
 8007694:	2201      	movs	r2, #1
 8007696:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a4:	461a      	mov	r2, r3
 80076a6:	2340      	movs	r3, #64	; 0x40
 80076a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	0151      	lsls	r1, r2, #5
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	440a      	add	r2, r1
 80076c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076c4:	f043 0302 	orr.w	r3, r3, #2
 80076c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	b2d2      	uxtb	r2, r2
 80076d2:	4611      	mov	r1, r2
 80076d4:	4618      	mov	r0, r3
 80076d6:	f005 fe9a 	bl	800d40e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e6:	461a      	mov	r2, r3
 80076e8:	2301      	movs	r3, #1
 80076ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	212c      	movs	r1, #44	; 0x2c
 80076f2:	fb01 f303 	mul.w	r3, r1, r3
 80076f6:	4413      	add	r3, r2
 80076f8:	3361      	adds	r3, #97	; 0x61
 80076fa:	2201      	movs	r2, #1
 80076fc:	701a      	strb	r2, [r3, #0]
}
 80076fe:	e2f3      	b.n	8007ce8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	4413      	add	r3, r2
 8007708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007712:	2b40      	cmp	r3, #64	; 0x40
 8007714:	d13c      	bne.n	8007790 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	212c      	movs	r1, #44	; 0x2c
 800771c:	fb01 f303 	mul.w	r3, r1, r3
 8007720:	4413      	add	r3, r2
 8007722:	3361      	adds	r3, #97	; 0x61
 8007724:	2204      	movs	r2, #4
 8007726:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	212c      	movs	r1, #44	; 0x2c
 800772e:	fb01 f303 	mul.w	r3, r1, r3
 8007732:	4413      	add	r3, r2
 8007734:	333d      	adds	r3, #61	; 0x3d
 8007736:	2201      	movs	r2, #1
 8007738:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	212c      	movs	r1, #44	; 0x2c
 8007740:	fb01 f303 	mul.w	r3, r1, r3
 8007744:	4413      	add	r3, r2
 8007746:	335c      	adds	r3, #92	; 0x5c
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	4413      	add	r3, r2
 8007754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	0151      	lsls	r1, r2, #5
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	440a      	add	r2, r1
 8007762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007766:	f043 0302 	orr.w	r3, r3, #2
 800776a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	b2d2      	uxtb	r2, r2
 8007774:	4611      	mov	r1, r2
 8007776:	4618      	mov	r0, r3
 8007778:	f005 fe49 	bl	800d40e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	4413      	add	r3, r2
 8007784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007788:	461a      	mov	r2, r3
 800778a:	2340      	movs	r3, #64	; 0x40
 800778c:	6093      	str	r3, [r2, #8]
}
 800778e:	e2ab      	b.n	8007ce8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	4413      	add	r3, r2
 8007798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f003 0308 	and.w	r3, r3, #8
 80077a2:	2b08      	cmp	r3, #8
 80077a4:	d12a      	bne.n	80077fc <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077b2:	461a      	mov	r2, r3
 80077b4:	2308      	movs	r3, #8
 80077b6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	015a      	lsls	r2, r3, #5
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	4413      	add	r3, r2
 80077c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	0151      	lsls	r1, r2, #5
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	440a      	add	r2, r1
 80077ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077d2:	f043 0302 	orr.w	r3, r3, #2
 80077d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	b2d2      	uxtb	r2, r2
 80077e0:	4611      	mov	r1, r2
 80077e2:	4618      	mov	r0, r3
 80077e4:	f005 fe13 	bl	800d40e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	212c      	movs	r1, #44	; 0x2c
 80077ee:	fb01 f303 	mul.w	r3, r1, r3
 80077f2:	4413      	add	r3, r2
 80077f4:	3361      	adds	r3, #97	; 0x61
 80077f6:	2205      	movs	r2, #5
 80077f8:	701a      	strb	r2, [r3, #0]
}
 80077fa:	e275      	b.n	8007ce8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	4413      	add	r3, r2
 8007804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 0310 	and.w	r3, r3, #16
 800780e:	2b10      	cmp	r3, #16
 8007810:	d150      	bne.n	80078b4 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	212c      	movs	r1, #44	; 0x2c
 8007818:	fb01 f303 	mul.w	r3, r1, r3
 800781c:	4413      	add	r3, r2
 800781e:	335c      	adds	r3, #92	; 0x5c
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	212c      	movs	r1, #44	; 0x2c
 800782a:	fb01 f303 	mul.w	r3, r1, r3
 800782e:	4413      	add	r3, r2
 8007830:	3361      	adds	r3, #97	; 0x61
 8007832:	2203      	movs	r2, #3
 8007834:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	212c      	movs	r1, #44	; 0x2c
 800783c:	fb01 f303 	mul.w	r3, r1, r3
 8007840:	4413      	add	r3, r2
 8007842:	333d      	adds	r3, #61	; 0x3d
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d112      	bne.n	8007870 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	212c      	movs	r1, #44	; 0x2c
 8007850:	fb01 f303 	mul.w	r3, r1, r3
 8007854:	4413      	add	r3, r2
 8007856:	333c      	adds	r3, #60	; 0x3c
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d108      	bne.n	8007870 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	212c      	movs	r1, #44	; 0x2c
 8007864:	fb01 f303 	mul.w	r3, r1, r3
 8007868:	4413      	add	r3, r2
 800786a:	333d      	adds	r3, #61	; 0x3d
 800786c:	2201      	movs	r2, #1
 800786e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	4413      	add	r3, r2
 8007878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	0151      	lsls	r1, r2, #5
 8007882:	69ba      	ldr	r2, [r7, #24]
 8007884:	440a      	add	r2, r1
 8007886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800788a:	f043 0302 	orr.w	r3, r3, #2
 800788e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	b2d2      	uxtb	r2, r2
 8007898:	4611      	mov	r1, r2
 800789a:	4618      	mov	r0, r3
 800789c:	f005 fdb7 	bl	800d40e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ac:	461a      	mov	r2, r3
 80078ae:	2310      	movs	r3, #16
 80078b0:	6093      	str	r3, [r2, #8]
}
 80078b2:	e219      	b.n	8007ce8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c6:	2b80      	cmp	r3, #128	; 0x80
 80078c8:	d175      	bne.n	80079b6 <HCD_HC_OUT_IRQHandler+0x4c4>
    if (hhcd->Init.dma_enable == 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d121      	bne.n	8007916 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	212c      	movs	r1, #44	; 0x2c
 80078d8:	fb01 f303 	mul.w	r3, r1, r3
 80078dc:	4413      	add	r3, r2
 80078de:	3361      	adds	r3, #97	; 0x61
 80078e0:	2206      	movs	r2, #6
 80078e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	0151      	lsls	r1, r2, #5
 80078f6:	69ba      	ldr	r2, [r7, #24]
 80078f8:	440a      	add	r2, r1
 80078fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078fe:	f043 0302 	orr.w	r3, r3, #2
 8007902:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	4611      	mov	r1, r2
 800790e:	4618      	mov	r0, r3
 8007910:	f005 fd7d 	bl	800d40e <USB_HC_Halt>
 8007914:	e045      	b.n	80079a2 <HCD_HC_OUT_IRQHandler+0x4b0>
      hhcd->hc[ch_num].ErrCnt++;
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	212c      	movs	r1, #44	; 0x2c
 800791c:	fb01 f303 	mul.w	r3, r1, r3
 8007920:	4413      	add	r3, r2
 8007922:	335c      	adds	r3, #92	; 0x5c
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	6879      	ldr	r1, [r7, #4]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	202c      	movs	r0, #44	; 0x2c
 800792e:	fb00 f303 	mul.w	r3, r0, r3
 8007932:	440b      	add	r3, r1
 8007934:	335c      	adds	r3, #92	; 0x5c
 8007936:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	212c      	movs	r1, #44	; 0x2c
 800793e:	fb01 f303 	mul.w	r3, r1, r3
 8007942:	4413      	add	r3, r2
 8007944:	335c      	adds	r3, #92	; 0x5c
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b02      	cmp	r3, #2
 800794a:	d921      	bls.n	8007990 <HCD_HC_OUT_IRQHandler+0x49e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	212c      	movs	r1, #44	; 0x2c
 8007952:	fb01 f303 	mul.w	r3, r1, r3
 8007956:	4413      	add	r3, r2
 8007958:	335c      	adds	r3, #92	; 0x5c
 800795a:	2200      	movs	r2, #0
 800795c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	212c      	movs	r1, #44	; 0x2c
 8007964:	fb01 f303 	mul.w	r3, r1, r3
 8007968:	4413      	add	r3, r2
 800796a:	3360      	adds	r3, #96	; 0x60
 800796c:	2204      	movs	r2, #4
 800796e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	b2d8      	uxtb	r0, r3
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	212c      	movs	r1, #44	; 0x2c
 800797a:	fb01 f303 	mul.w	r3, r1, r3
 800797e:	4413      	add	r3, r2
 8007980:	3360      	adds	r3, #96	; 0x60
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	4601      	mov	r1, r0
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f019 f8e1 	bl	8020b50 <HAL_HCD_HC_NotifyURBChange_Callback>
 800798e:	e008      	b.n	80079a2 <HCD_HC_OUT_IRQHandler+0x4b0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	212c      	movs	r1, #44	; 0x2c
 8007996:	fb01 f303 	mul.w	r3, r1, r3
 800799a:	4413      	add	r3, r2
 800799c:	3360      	adds	r3, #96	; 0x60
 800799e:	2202      	movs	r2, #2
 80079a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ae:	461a      	mov	r2, r3
 80079b0:	2380      	movs	r3, #128	; 0x80
 80079b2:	6093      	str	r3, [r2, #8]
}
 80079b4:	e198      	b.n	8007ce8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079cc:	d134      	bne.n	8007a38 <HCD_HC_OUT_IRQHandler+0x546>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	0151      	lsls	r1, r2, #5
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	440a      	add	r2, r1
 80079e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079e8:	f043 0302 	orr.w	r3, r3, #2
 80079ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	b2d2      	uxtb	r2, r2
 80079f6:	4611      	mov	r1, r2
 80079f8:	4618      	mov	r0, r3
 80079fa:	f005 fd08 	bl	800d40e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	2310      	movs	r3, #16
 8007a0e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a22:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	212c      	movs	r1, #44	; 0x2c
 8007a2a:	fb01 f303 	mul.w	r3, r1, r3
 8007a2e:	4413      	add	r3, r2
 8007a30:	3361      	adds	r3, #97	; 0x61
 8007a32:	2208      	movs	r2, #8
 8007a34:	701a      	strb	r2, [r3, #0]
}
 8007a36:	e157      	b.n	8007ce8 <HCD_HC_OUT_IRQHandler+0x7f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	f040 814c 	bne.w	8007ce8 <HCD_HC_OUT_IRQHandler+0x7f6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	0151      	lsls	r1, r2, #5
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	440a      	add	r2, r1
 8007a66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a6a:	f023 0302 	bic.w	r3, r3, #2
 8007a6e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	212c      	movs	r1, #44	; 0x2c
 8007a76:	fb01 f303 	mul.w	r3, r1, r3
 8007a7a:	4413      	add	r3, r2
 8007a7c:	3361      	adds	r3, #97	; 0x61
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d179      	bne.n	8007b78 <HCD_HC_OUT_IRQHandler+0x686>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	212c      	movs	r1, #44	; 0x2c
 8007a8a:	fb01 f303 	mul.w	r3, r1, r3
 8007a8e:	4413      	add	r3, r2
 8007a90:	3360      	adds	r3, #96	; 0x60
 8007a92:	2201      	movs	r2, #1
 8007a94:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	212c      	movs	r1, #44	; 0x2c
 8007a9c:	fb01 f303 	mul.w	r3, r1, r3
 8007aa0:	4413      	add	r3, r2
 8007aa2:	333f      	adds	r3, #63	; 0x3f
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d00a      	beq.n	8007ac0 <HCD_HC_OUT_IRQHandler+0x5ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	212c      	movs	r1, #44	; 0x2c
 8007ab0:	fb01 f303 	mul.w	r3, r1, r3
 8007ab4:	4413      	add	r3, r2
 8007ab6:	333f      	adds	r3, #63	; 0x3f
 8007ab8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	f040 80fc 	bne.w	8007cb8 <HCD_HC_OUT_IRQHandler+0x7c6>
        if (hhcd->Init.dma_enable == 1U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d142      	bne.n	8007b4e <HCD_HC_OUT_IRQHandler+0x65c>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	212c      	movs	r1, #44	; 0x2c
 8007ace:	fb01 f303 	mul.w	r3, r1, r3
 8007ad2:	4413      	add	r3, r2
 8007ad4:	334c      	adds	r3, #76	; 0x4c
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 80ed 	beq.w	8007cb8 <HCD_HC_OUT_IRQHandler+0x7c6>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	212c      	movs	r1, #44	; 0x2c
 8007ae4:	fb01 f303 	mul.w	r3, r1, r3
 8007ae8:	4413      	add	r3, r2
 8007aea:	334c      	adds	r3, #76	; 0x4c
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6879      	ldr	r1, [r7, #4]
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	202c      	movs	r0, #44	; 0x2c
 8007af4:	fb00 f202 	mul.w	r2, r0, r2
 8007af8:	440a      	add	r2, r1
 8007afa:	3240      	adds	r2, #64	; 0x40
 8007afc:	8812      	ldrh	r2, [r2, #0]
 8007afe:	4413      	add	r3, r2
 8007b00:	3b01      	subs	r3, #1
 8007b02:	6879      	ldr	r1, [r7, #4]
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	202c      	movs	r0, #44	; 0x2c
 8007b08:	fb00 f202 	mul.w	r2, r0, r2
 8007b0c:	440a      	add	r2, r1
 8007b0e:	3240      	adds	r2, #64	; 0x40
 8007b10:	8812      	ldrh	r2, [r2, #0]
 8007b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 80ca 	beq.w	8007cb8 <HCD_HC_OUT_IRQHandler+0x7c6>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	212c      	movs	r1, #44	; 0x2c
 8007b2a:	fb01 f303 	mul.w	r3, r1, r3
 8007b2e:	4413      	add	r3, r2
 8007b30:	3355      	adds	r3, #85	; 0x55
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	f083 0301 	eor.w	r3, r3, #1
 8007b38:	b2d8      	uxtb	r0, r3
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	212c      	movs	r1, #44	; 0x2c
 8007b40:	fb01 f303 	mul.w	r3, r1, r3
 8007b44:	4413      	add	r3, r2
 8007b46:	3355      	adds	r3, #85	; 0x55
 8007b48:	4602      	mov	r2, r0
 8007b4a:	701a      	strb	r2, [r3, #0]
 8007b4c:	e0b4      	b.n	8007cb8 <HCD_HC_OUT_IRQHandler+0x7c6>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	212c      	movs	r1, #44	; 0x2c
 8007b54:	fb01 f303 	mul.w	r3, r1, r3
 8007b58:	4413      	add	r3, r2
 8007b5a:	3355      	adds	r3, #85	; 0x55
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	f083 0301 	eor.w	r3, r3, #1
 8007b62:	b2d8      	uxtb	r0, r3
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	212c      	movs	r1, #44	; 0x2c
 8007b6a:	fb01 f303 	mul.w	r3, r1, r3
 8007b6e:	4413      	add	r3, r2
 8007b70:	3355      	adds	r3, #85	; 0x55
 8007b72:	4602      	mov	r2, r0
 8007b74:	701a      	strb	r2, [r3, #0]
 8007b76:	e09f      	b.n	8007cb8 <HCD_HC_OUT_IRQHandler+0x7c6>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	212c      	movs	r1, #44	; 0x2c
 8007b7e:	fb01 f303 	mul.w	r3, r1, r3
 8007b82:	4413      	add	r3, r2
 8007b84:	3361      	adds	r3, #97	; 0x61
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	2b03      	cmp	r3, #3
 8007b8a:	d109      	bne.n	8007ba0 <HCD_HC_OUT_IRQHandler+0x6ae>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	212c      	movs	r1, #44	; 0x2c
 8007b92:	fb01 f303 	mul.w	r3, r1, r3
 8007b96:	4413      	add	r3, r2
 8007b98:	3360      	adds	r3, #96	; 0x60
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	701a      	strb	r2, [r3, #0]
 8007b9e:	e08b      	b.n	8007cb8 <HCD_HC_OUT_IRQHandler+0x7c6>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	212c      	movs	r1, #44	; 0x2c
 8007ba6:	fb01 f303 	mul.w	r3, r1, r3
 8007baa:	4413      	add	r3, r2
 8007bac:	3361      	adds	r3, #97	; 0x61
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d109      	bne.n	8007bc8 <HCD_HC_OUT_IRQHandler+0x6d6>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	212c      	movs	r1, #44	; 0x2c
 8007bba:	fb01 f303 	mul.w	r3, r1, r3
 8007bbe:	4413      	add	r3, r2
 8007bc0:	3360      	adds	r3, #96	; 0x60
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	701a      	strb	r2, [r3, #0]
 8007bc6:	e077      	b.n	8007cb8 <HCD_HC_OUT_IRQHandler+0x7c6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	212c      	movs	r1, #44	; 0x2c
 8007bce:	fb01 f303 	mul.w	r3, r1, r3
 8007bd2:	4413      	add	r3, r2
 8007bd4:	3361      	adds	r3, #97	; 0x61
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b05      	cmp	r3, #5
 8007bda:	d109      	bne.n	8007bf0 <HCD_HC_OUT_IRQHandler+0x6fe>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	212c      	movs	r1, #44	; 0x2c
 8007be2:	fb01 f303 	mul.w	r3, r1, r3
 8007be6:	4413      	add	r3, r2
 8007be8:	3360      	adds	r3, #96	; 0x60
 8007bea:	2205      	movs	r2, #5
 8007bec:	701a      	strb	r2, [r3, #0]
 8007bee:	e063      	b.n	8007cb8 <HCD_HC_OUT_IRQHandler+0x7c6>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	212c      	movs	r1, #44	; 0x2c
 8007bf6:	fb01 f303 	mul.w	r3, r1, r3
 8007bfa:	4413      	add	r3, r2
 8007bfc:	3361      	adds	r3, #97	; 0x61
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b06      	cmp	r3, #6
 8007c02:	d009      	beq.n	8007c18 <HCD_HC_OUT_IRQHandler+0x726>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	212c      	movs	r1, #44	; 0x2c
 8007c0a:	fb01 f303 	mul.w	r3, r1, r3
 8007c0e:	4413      	add	r3, r2
 8007c10:	3361      	adds	r3, #97	; 0x61
 8007c12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d14f      	bne.n	8007cb8 <HCD_HC_OUT_IRQHandler+0x7c6>
      hhcd->hc[ch_num].ErrCnt++;
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	212c      	movs	r1, #44	; 0x2c
 8007c1e:	fb01 f303 	mul.w	r3, r1, r3
 8007c22:	4413      	add	r3, r2
 8007c24:	335c      	adds	r3, #92	; 0x5c
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	6879      	ldr	r1, [r7, #4]
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	202c      	movs	r0, #44	; 0x2c
 8007c30:	fb00 f303 	mul.w	r3, r0, r3
 8007c34:	440b      	add	r3, r1
 8007c36:	335c      	adds	r3, #92	; 0x5c
 8007c38:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	212c      	movs	r1, #44	; 0x2c
 8007c40:	fb01 f303 	mul.w	r3, r1, r3
 8007c44:	4413      	add	r3, r2
 8007c46:	335c      	adds	r3, #92	; 0x5c
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d912      	bls.n	8007c74 <HCD_HC_OUT_IRQHandler+0x782>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	212c      	movs	r1, #44	; 0x2c
 8007c54:	fb01 f303 	mul.w	r3, r1, r3
 8007c58:	4413      	add	r3, r2
 8007c5a:	335c      	adds	r3, #92	; 0x5c
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	212c      	movs	r1, #44	; 0x2c
 8007c66:	fb01 f303 	mul.w	r3, r1, r3
 8007c6a:	4413      	add	r3, r2
 8007c6c:	3360      	adds	r3, #96	; 0x60
 8007c6e:	2204      	movs	r2, #4
 8007c70:	701a      	strb	r2, [r3, #0]
 8007c72:	e021      	b.n	8007cb8 <HCD_HC_OUT_IRQHandler+0x7c6>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	212c      	movs	r1, #44	; 0x2c
 8007c7a:	fb01 f303 	mul.w	r3, r1, r3
 8007c7e:	4413      	add	r3, r2
 8007c80:	3360      	adds	r3, #96	; 0x60
 8007c82:	2202      	movs	r2, #2
 8007c84:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c9c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ca4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	015a      	lsls	r2, r3, #5
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	b2d8      	uxtb	r0, r3
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	212c      	movs	r1, #44	; 0x2c
 8007cd4:	fb01 f303 	mul.w	r3, r1, r3
 8007cd8:	4413      	add	r3, r2
 8007cda:	3360      	adds	r3, #96	; 0x60
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	4601      	mov	r1, r0
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f018 ff34 	bl	8020b50 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007ce8:	bf00      	nop
 8007cea:	3720      	adds	r7, #32
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08a      	sub	sp, #40	; 0x28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	f003 030f 	and.w	r3, r3, #15
 8007d10:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	0c5b      	lsrs	r3, r3, #17
 8007d16:	f003 030f 	and.w	r3, r3, #15
 8007d1a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	091b      	lsrs	r3, r3, #4
 8007d20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d24:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d003      	beq.n	8007d34 <HCD_RXQLVL_IRQHandler+0x44>
 8007d2c:	2b05      	cmp	r3, #5
 8007d2e:	f000 80a9 	beq.w	8007e84 <HCD_RXQLVL_IRQHandler+0x194>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007d32:	e0aa      	b.n	8007e8a <HCD_RXQLVL_IRQHandler+0x19a>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 80a6 	beq.w	8007e88 <HCD_RXQLVL_IRQHandler+0x198>
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	212c      	movs	r1, #44	; 0x2c
 8007d42:	fb01 f303 	mul.w	r3, r1, r3
 8007d46:	4413      	add	r3, r2
 8007d48:	3344      	adds	r3, #68	; 0x44
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 809b 	beq.w	8007e88 <HCD_RXQLVL_IRQHandler+0x198>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	212c      	movs	r1, #44	; 0x2c
 8007d58:	fb01 f303 	mul.w	r3, r1, r3
 8007d5c:	4413      	add	r3, r2
 8007d5e:	3350      	adds	r3, #80	; 0x50
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	441a      	add	r2, r3
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	202c      	movs	r0, #44	; 0x2c
 8007d6c:	fb00 f303 	mul.w	r3, r0, r3
 8007d70:	440b      	add	r3, r1
 8007d72:	334c      	adds	r3, #76	; 0x4c
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d87a      	bhi.n	8007e70 <HCD_RXQLVL_IRQHandler+0x180>
          (void)USB_ReadPacket(hhcd->Instance,
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6818      	ldr	r0, [r3, #0]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	212c      	movs	r1, #44	; 0x2c
 8007d84:	fb01 f303 	mul.w	r3, r1, r3
 8007d88:	4413      	add	r3, r2
 8007d8a:	3344      	adds	r3, #68	; 0x44
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	b292      	uxth	r2, r2
 8007d92:	4619      	mov	r1, r3
 8007d94:	f004 fee3 	bl	800cb5e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	212c      	movs	r1, #44	; 0x2c
 8007d9e:	fb01 f303 	mul.w	r3, r1, r3
 8007da2:	4413      	add	r3, r2
 8007da4:	3344      	adds	r3, #68	; 0x44
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	441a      	add	r2, r3
 8007dac:	6879      	ldr	r1, [r7, #4]
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	202c      	movs	r0, #44	; 0x2c
 8007db2:	fb00 f303 	mul.w	r3, r0, r3
 8007db6:	440b      	add	r3, r1
 8007db8:	3344      	adds	r3, #68	; 0x44
 8007dba:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	212c      	movs	r1, #44	; 0x2c
 8007dc2:	fb01 f303 	mul.w	r3, r1, r3
 8007dc6:	4413      	add	r3, r2
 8007dc8:	3350      	adds	r3, #80	; 0x50
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	441a      	add	r2, r3
 8007dd0:	6879      	ldr	r1, [r7, #4]
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	202c      	movs	r0, #44	; 0x2c
 8007dd6:	fb00 f303 	mul.w	r3, r0, r3
 8007dda:	440b      	add	r3, r1
 8007ddc:	3350      	adds	r3, #80	; 0x50
 8007dde:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	015a      	lsls	r2, r3, #5
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	0cdb      	lsrs	r3, r3, #19
 8007df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007df4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	212c      	movs	r1, #44	; 0x2c
 8007dfc:	fb01 f303 	mul.w	r3, r1, r3
 8007e00:	4413      	add	r3, r2
 8007e02:	3340      	adds	r3, #64	; 0x40
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d13c      	bne.n	8007e88 <HCD_RXQLVL_IRQHandler+0x198>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d039      	beq.n	8007e88 <HCD_RXQLVL_IRQHandler+0x198>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	015a      	lsls	r2, r3, #5
 8007e18:	6a3b      	ldr	r3, [r7, #32]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e2a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e32:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e40:	461a      	mov	r2, r3
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	212c      	movs	r1, #44	; 0x2c
 8007e4c:	fb01 f303 	mul.w	r3, r1, r3
 8007e50:	4413      	add	r3, r2
 8007e52:	3354      	adds	r3, #84	; 0x54
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	f083 0301 	eor.w	r3, r3, #1
 8007e5a:	b2d8      	uxtb	r0, r3
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	212c      	movs	r1, #44	; 0x2c
 8007e62:	fb01 f303 	mul.w	r3, r1, r3
 8007e66:	4413      	add	r3, r2
 8007e68:	3354      	adds	r3, #84	; 0x54
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	701a      	strb	r2, [r3, #0]
      break;
 8007e6e:	e00b      	b.n	8007e88 <HCD_RXQLVL_IRQHandler+0x198>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	212c      	movs	r1, #44	; 0x2c
 8007e76:	fb01 f303 	mul.w	r3, r1, r3
 8007e7a:	4413      	add	r3, r2
 8007e7c:	3360      	adds	r3, #96	; 0x60
 8007e7e:	2204      	movs	r2, #4
 8007e80:	701a      	strb	r2, [r3, #0]
      break;
 8007e82:	e001      	b.n	8007e88 <HCD_RXQLVL_IRQHandler+0x198>
      break;
 8007e84:	bf00      	nop
 8007e86:	e000      	b.n	8007e8a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007e88:	bf00      	nop
  }
}
 8007e8a:	bf00      	nop
 8007e8c:	3728      	adds	r7, #40	; 0x28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b086      	sub	sp, #24
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007ebe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d10b      	bne.n	8007ee2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d102      	bne.n	8007eda <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f018 fe1f 	bl	8020b18 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	f043 0302 	orr.w	r3, r3, #2
 8007ee0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f003 0308 	and.w	r3, r3, #8
 8007ee8:	2b08      	cmp	r3, #8
 8007eea:	d132      	bne.n	8007f52 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f043 0308 	orr.w	r3, r3, #8
 8007ef2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f003 0304 	and.w	r3, r3, #4
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d126      	bne.n	8007f4c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d113      	bne.n	8007f2e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007f0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f10:	d106      	bne.n	8007f20 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2102      	movs	r1, #2
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f004 ff4f 	bl	800cdbc <USB_InitFSLSPClkSel>
 8007f1e:	e011      	b.n	8007f44 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2101      	movs	r1, #1
 8007f26:	4618      	mov	r0, r3
 8007f28:	f004 ff48 	bl	800cdbc <USB_InitFSLSPClkSel>
 8007f2c:	e00a      	b.n	8007f44 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d106      	bne.n	8007f44 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007f42:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f018 fe15 	bl	8020b74 <HAL_HCD_PortEnabled_Callback>
 8007f4a:	e002      	b.n	8007f52 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f018 fe1f 	bl	8020b90 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f003 0320 	and.w	r3, r3, #32
 8007f58:	2b20      	cmp	r3, #32
 8007f5a:	d103      	bne.n	8007f64 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f043 0320 	orr.w	r3, r3, #32
 8007f62:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	6013      	str	r3, [r2, #0]
}
 8007f70:	bf00      	nop
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e07f      	b.n	800808a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d106      	bne.n	8007fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7f9 fe9a 	bl	8001cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2224      	movs	r2, #36	; 0x24
 8007fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0201 	bic.w	r2, r2, #1
 8007fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007fc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d107      	bne.n	8007ff2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	689a      	ldr	r2, [r3, #8]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fee:	609a      	str	r2, [r3, #8]
 8007ff0:	e006      	b.n	8008000 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	689a      	ldr	r2, [r3, #8]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007ffe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	2b02      	cmp	r3, #2
 8008006:	d104      	bne.n	8008012 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008010:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6859      	ldr	r1, [r3, #4]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	4b1d      	ldr	r3, [pc, #116]	; (8008094 <HAL_I2C_Init+0x11c>)
 800801e:	430b      	orrs	r3, r1
 8008020:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68da      	ldr	r2, [r3, #12]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008030:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	691a      	ldr	r2, [r3, #16]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	ea42 0103 	orr.w	r1, r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	021a      	lsls	r2, r3, #8
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	430a      	orrs	r2, r1
 800804a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	69d9      	ldr	r1, [r3, #28]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a1a      	ldr	r2, [r3, #32]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	430a      	orrs	r2, r1
 800805a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0201 	orr.w	r2, r2, #1
 800806a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2220      	movs	r2, #32
 8008076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	02008000 	.word	0x02008000

08008098 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b20      	cmp	r3, #32
 80080ac:	d138      	bne.n	8008120 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d101      	bne.n	80080bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80080b8:	2302      	movs	r3, #2
 80080ba:	e032      	b.n	8008122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2224      	movs	r2, #36	; 0x24
 80080c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f022 0201 	bic.w	r2, r2, #1
 80080da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6819      	ldr	r1, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f042 0201 	orr.w	r2, r2, #1
 800810a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2220      	movs	r2, #32
 8008110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	e000      	b.n	8008122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008120:	2302      	movs	r3, #2
  }
}
 8008122:	4618      	mov	r0, r3
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800812e:	b480      	push	{r7}
 8008130:	b085      	sub	sp, #20
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b20      	cmp	r3, #32
 8008142:	d139      	bne.n	80081b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800814a:	2b01      	cmp	r3, #1
 800814c:	d101      	bne.n	8008152 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800814e:	2302      	movs	r3, #2
 8008150:	e033      	b.n	80081ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2224      	movs	r2, #36	; 0x24
 800815e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 0201 	bic.w	r2, r2, #1
 8008170:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008180:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	021b      	lsls	r3, r3, #8
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4313      	orrs	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f042 0201 	orr.w	r2, r2, #1
 80081a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2220      	movs	r2, #32
 80081a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	e000      	b.n	80081ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80081b8:	2302      	movs	r3, #2
  }
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b083      	sub	sp, #12
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80081d6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
	...

080081e8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d101      	bne.n	80081fa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e0bf      	b.n	800837a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d106      	bne.n	8008214 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7f9 fdda 	bl	8001dc8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	699a      	ldr	r2, [r3, #24]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800822a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6999      	ldr	r1, [r3, #24]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008240:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6899      	ldr	r1, [r3, #8]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	4b4a      	ldr	r3, [pc, #296]	; (8008384 <HAL_LTDC_Init+0x19c>)
 800825c:	400b      	ands	r3, r1
 800825e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	695b      	ldr	r3, [r3, #20]
 8008264:	041b      	lsls	r3, r3, #16
 8008266:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6899      	ldr	r1, [r3, #8]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	699a      	ldr	r2, [r3, #24]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	431a      	orrs	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68d9      	ldr	r1, [r3, #12]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	4b3e      	ldr	r3, [pc, #248]	; (8008384 <HAL_LTDC_Init+0x19c>)
 800828a:	400b      	ands	r3, r1
 800828c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	041b      	lsls	r3, r3, #16
 8008294:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68d9      	ldr	r1, [r3, #12]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a1a      	ldr	r2, [r3, #32]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	431a      	orrs	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	430a      	orrs	r2, r1
 80082aa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6919      	ldr	r1, [r3, #16]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	4b33      	ldr	r3, [pc, #204]	; (8008384 <HAL_LTDC_Init+0x19c>)
 80082b8:	400b      	ands	r3, r1
 80082ba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	041b      	lsls	r3, r3, #16
 80082c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6919      	ldr	r1, [r3, #16]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	431a      	orrs	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	430a      	orrs	r2, r1
 80082d8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6959      	ldr	r1, [r3, #20]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	4b27      	ldr	r3, [pc, #156]	; (8008384 <HAL_LTDC_Init+0x19c>)
 80082e6:	400b      	ands	r3, r1
 80082e8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ee:	041b      	lsls	r3, r3, #16
 80082f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	6959      	ldr	r1, [r3, #20]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	431a      	orrs	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800830e:	021b      	lsls	r3, r3, #8
 8008310:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008318:	041b      	lsls	r3, r3, #16
 800831a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800832a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4313      	orrs	r3, r2
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800833e:	431a      	orrs	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0206 	orr.w	r2, r2, #6
 8008356:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	699a      	ldr	r2, [r3, #24]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f042 0201 	orr.w	r2, r2, #1
 8008366:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	f000f800 	.word	0xf000f800

08008388 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008396:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800839e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f003 0304 	and.w	r3, r3, #4
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d023      	beq.n	80083f2 <HAL_LTDC_IRQHandler+0x6a>
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	f003 0304 	and.w	r3, r3, #4
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d01e      	beq.n	80083f2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f022 0204 	bic.w	r2, r2, #4
 80083c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2204      	movs	r2, #4
 80083ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80083d2:	f043 0201 	orr.w	r2, r3, #1
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2204      	movs	r2, #4
 80083e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f86f 	bl	80084d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f003 0302 	and.w	r3, r3, #2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d023      	beq.n	8008444 <HAL_LTDC_IRQHandler+0xbc>
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	f003 0302 	and.w	r3, r3, #2
 8008402:	2b00      	cmp	r3, #0
 8008404:	d01e      	beq.n	8008444 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f022 0202 	bic.w	r2, r2, #2
 8008414:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2202      	movs	r2, #2
 800841c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008424:	f043 0202 	orr.w	r2, r3, #2
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2204      	movs	r2, #4
 8008432:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f846 	bl	80084d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d01b      	beq.n	8008486 <HAL_LTDC_IRQHandler+0xfe>
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	2b00      	cmp	r3, #0
 8008456:	d016      	beq.n	8008486 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 0201 	bic.w	r2, r2, #1
 8008466:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2201      	movs	r2, #1
 800846e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f82f 	bl	80084e4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f003 0308 	and.w	r3, r3, #8
 800848c:	2b00      	cmp	r3, #0
 800848e:	d01b      	beq.n	80084c8 <HAL_LTDC_IRQHandler+0x140>
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	f003 0308 	and.w	r3, r3, #8
 8008496:	2b00      	cmp	r3, #0
 8008498:	d016      	beq.n	80084c8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f022 0208 	bic.w	r2, r2, #8
 80084a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2208      	movs	r2, #8
 80084b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f818 	bl	80084f8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80084c8:	bf00      	nop
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800850c:	b5b0      	push	{r4, r5, r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800851e:	2b01      	cmp	r3, #1
 8008520:	d101      	bne.n	8008526 <HAL_LTDC_ConfigLayer+0x1a>
 8008522:	2302      	movs	r3, #2
 8008524:	e02c      	b.n	8008580 <HAL_LTDC_ConfigLayer+0x74>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2202      	movs	r2, #2
 8008532:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2134      	movs	r1, #52	; 0x34
 800853c:	fb01 f303 	mul.w	r3, r1, r3
 8008540:	4413      	add	r3, r2
 8008542:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	4614      	mov	r4, r2
 800854a:	461d      	mov	r5, r3
 800854c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800854e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008558:	682b      	ldr	r3, [r5, #0]
 800855a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	68b9      	ldr	r1, [r7, #8]
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 f81f 	bl	80085a4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2201      	movs	r2, #1
 800856c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bdb0      	pop	{r4, r5, r7, pc}

08008588 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008596:	b2db      	uxtb	r3, r3
}
 8008598:	4618      	mov	r0, r3
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b089      	sub	sp, #36	; 0x24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	685a      	ldr	r2, [r3, #4]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	0c1b      	lsrs	r3, r3, #16
 80085bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085c0:	4413      	add	r3, r2
 80085c2:	041b      	lsls	r3, r3, #16
 80085c4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	01db      	lsls	r3, r3, #7
 80085d0:	4413      	add	r3, r2
 80085d2:	3384      	adds	r3, #132	; 0x84
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	6812      	ldr	r2, [r2, #0]
 80085da:	4611      	mov	r1, r2
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	01d2      	lsls	r2, r2, #7
 80085e0:	440a      	add	r2, r1
 80085e2:	3284      	adds	r2, #132	; 0x84
 80085e4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80085e8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	0c1b      	lsrs	r3, r3, #16
 80085f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085fa:	4413      	add	r3, r2
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4619      	mov	r1, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	01db      	lsls	r3, r3, #7
 8008608:	440b      	add	r3, r1
 800860a:	3384      	adds	r3, #132	; 0x84
 800860c:	4619      	mov	r1, r3
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	4313      	orrs	r3, r2
 8008612:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008622:	4413      	add	r3, r2
 8008624:	041b      	lsls	r3, r3, #16
 8008626:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	461a      	mov	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	01db      	lsls	r3, r3, #7
 8008632:	4413      	add	r3, r2
 8008634:	3384      	adds	r3, #132	; 0x84
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	6812      	ldr	r2, [r2, #0]
 800863c:	4611      	mov	r1, r2
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	01d2      	lsls	r2, r2, #7
 8008642:	440a      	add	r2, r1
 8008644:	3284      	adds	r2, #132	; 0x84
 8008646:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800864a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	689a      	ldr	r2, [r3, #8]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800865a:	4413      	add	r3, r2
 800865c:	1c5a      	adds	r2, r3, #1
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4619      	mov	r1, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	01db      	lsls	r3, r3, #7
 8008668:	440b      	add	r3, r1
 800866a:	3384      	adds	r3, #132	; 0x84
 800866c:	4619      	mov	r1, r3
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	4313      	orrs	r3, r2
 8008672:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	01db      	lsls	r3, r3, #7
 800867e:	4413      	add	r3, r2
 8008680:	3384      	adds	r3, #132	; 0x84
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	6812      	ldr	r2, [r2, #0]
 8008688:	4611      	mov	r1, r2
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	01d2      	lsls	r2, r2, #7
 800868e:	440a      	add	r2, r1
 8008690:	3284      	adds	r2, #132	; 0x84
 8008692:	f023 0307 	bic.w	r3, r3, #7
 8008696:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	461a      	mov	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	01db      	lsls	r3, r3, #7
 80086a2:	4413      	add	r3, r2
 80086a4:	3384      	adds	r3, #132	; 0x84
 80086a6:	461a      	mov	r2, r3
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80086b4:	021b      	lsls	r3, r3, #8
 80086b6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80086be:	041b      	lsls	r3, r3, #16
 80086c0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	061b      	lsls	r3, r3, #24
 80086c8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	01db      	lsls	r3, r3, #7
 80086d4:	4413      	add	r3, r2
 80086d6:	3384      	adds	r3, #132	; 0x84
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	01db      	lsls	r3, r3, #7
 80086e4:	4413      	add	r3, r2
 80086e6:	3384      	adds	r3, #132	; 0x84
 80086e8:	461a      	mov	r2, r3
 80086ea:	2300      	movs	r3, #0
 80086ec:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086f4:	461a      	mov	r2, r3
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	431a      	orrs	r2, r3
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	431a      	orrs	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4619      	mov	r1, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	01db      	lsls	r3, r3, #7
 8008708:	440b      	add	r3, r1
 800870a:	3384      	adds	r3, #132	; 0x84
 800870c:	4619      	mov	r1, r3
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	4313      	orrs	r3, r2
 8008712:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	461a      	mov	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	01db      	lsls	r3, r3, #7
 800871e:	4413      	add	r3, r2
 8008720:	3384      	adds	r3, #132	; 0x84
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	6812      	ldr	r2, [r2, #0]
 8008728:	4611      	mov	r1, r2
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	01d2      	lsls	r2, r2, #7
 800872e:	440a      	add	r2, r1
 8008730:	3284      	adds	r2, #132	; 0x84
 8008732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008736:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	461a      	mov	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	01db      	lsls	r3, r3, #7
 8008742:	4413      	add	r3, r2
 8008744:	3384      	adds	r3, #132	; 0x84
 8008746:	461a      	mov	r2, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	695b      	ldr	r3, [r3, #20]
 800874c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	461a      	mov	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	01db      	lsls	r3, r3, #7
 8008758:	4413      	add	r3, r2
 800875a:	3384      	adds	r3, #132	; 0x84
 800875c:	69da      	ldr	r2, [r3, #28]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4619      	mov	r1, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	01db      	lsls	r3, r3, #7
 8008768:	440b      	add	r3, r1
 800876a:	3384      	adds	r3, #132	; 0x84
 800876c:	4619      	mov	r1, r3
 800876e:	4b58      	ldr	r3, [pc, #352]	; (80088d0 <LTDC_SetConfig+0x32c>)
 8008770:	4013      	ands	r3, r2
 8008772:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	69da      	ldr	r2, [r3, #28]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	6a1b      	ldr	r3, [r3, #32]
 800877c:	68f9      	ldr	r1, [r7, #12]
 800877e:	6809      	ldr	r1, [r1, #0]
 8008780:	4608      	mov	r0, r1
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	01c9      	lsls	r1, r1, #7
 8008786:	4401      	add	r1, r0
 8008788:	3184      	adds	r1, #132	; 0x84
 800878a:	4313      	orrs	r3, r2
 800878c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	01db      	lsls	r3, r3, #7
 8008798:	4413      	add	r3, r2
 800879a:	3384      	adds	r3, #132	; 0x84
 800879c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	01db      	lsls	r3, r3, #7
 80087a8:	4413      	add	r3, r2
 80087aa:	3384      	adds	r3, #132	; 0x84
 80087ac:	461a      	mov	r2, r3
 80087ae:	2300      	movs	r3, #0
 80087b0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	01db      	lsls	r3, r3, #7
 80087bc:	4413      	add	r3, r2
 80087be:	3384      	adds	r3, #132	; 0x84
 80087c0:	461a      	mov	r2, r3
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d102      	bne.n	80087d6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80087d0:	2304      	movs	r3, #4
 80087d2:	61fb      	str	r3, [r7, #28]
 80087d4:	e01b      	b.n	800880e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d102      	bne.n	80087e4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80087de:	2303      	movs	r3, #3
 80087e0:	61fb      	str	r3, [r7, #28]
 80087e2:	e014      	b.n	800880e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	2b04      	cmp	r3, #4
 80087ea:	d00b      	beq.n	8008804 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d007      	beq.n	8008804 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80087f8:	2b03      	cmp	r3, #3
 80087fa:	d003      	beq.n	8008804 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008800:	2b07      	cmp	r3, #7
 8008802:	d102      	bne.n	800880a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008804:	2302      	movs	r3, #2
 8008806:	61fb      	str	r3, [r7, #28]
 8008808:	e001      	b.n	800880e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800880a:	2301      	movs	r3, #1
 800880c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	01db      	lsls	r3, r3, #7
 8008818:	4413      	add	r3, r2
 800881a:	3384      	adds	r3, #132	; 0x84
 800881c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	6812      	ldr	r2, [r2, #0]
 8008822:	4611      	mov	r1, r2
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	01d2      	lsls	r2, r2, #7
 8008828:	440a      	add	r2, r1
 800882a:	3284      	adds	r2, #132	; 0x84
 800882c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008830:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008836:	69fa      	ldr	r2, [r7, #28]
 8008838:	fb02 f303 	mul.w	r3, r2, r3
 800883c:	041a      	lsls	r2, r3, #16
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	6859      	ldr	r1, [r3, #4]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	1acb      	subs	r3, r1, r3
 8008848:	69f9      	ldr	r1, [r7, #28]
 800884a:	fb01 f303 	mul.w	r3, r1, r3
 800884e:	3303      	adds	r3, #3
 8008850:	68f9      	ldr	r1, [r7, #12]
 8008852:	6809      	ldr	r1, [r1, #0]
 8008854:	4608      	mov	r0, r1
 8008856:	6879      	ldr	r1, [r7, #4]
 8008858:	01c9      	lsls	r1, r1, #7
 800885a:	4401      	add	r1, r0
 800885c:	3184      	adds	r1, #132	; 0x84
 800885e:	4313      	orrs	r3, r2
 8008860:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	01db      	lsls	r3, r3, #7
 800886c:	4413      	add	r3, r2
 800886e:	3384      	adds	r3, #132	; 0x84
 8008870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4619      	mov	r1, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	01db      	lsls	r3, r3, #7
 800887c:	440b      	add	r3, r1
 800887e:	3384      	adds	r3, #132	; 0x84
 8008880:	4619      	mov	r1, r3
 8008882:	4b14      	ldr	r3, [pc, #80]	; (80088d4 <LTDC_SetConfig+0x330>)
 8008884:	4013      	ands	r3, r2
 8008886:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	461a      	mov	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	01db      	lsls	r3, r3, #7
 8008892:	4413      	add	r3, r2
 8008894:	3384      	adds	r3, #132	; 0x84
 8008896:	461a      	mov	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	01db      	lsls	r3, r3, #7
 80088a8:	4413      	add	r3, r2
 80088aa:	3384      	adds	r3, #132	; 0x84
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	6812      	ldr	r2, [r2, #0]
 80088b2:	4611      	mov	r1, r2
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	01d2      	lsls	r2, r2, #7
 80088b8:	440a      	add	r2, r1
 80088ba:	3284      	adds	r2, #132	; 0x84
 80088bc:	f043 0301 	orr.w	r3, r3, #1
 80088c0:	6013      	str	r3, [r2, #0]
}
 80088c2:	bf00      	nop
 80088c4:	3724      	adds	r7, #36	; 0x24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	fffff8f8 	.word	0xfffff8f8
 80088d4:	fffff800 	.word	0xfffff800

080088d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80088d8:	b480      	push	{r7}
 80088da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80088dc:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a04      	ldr	r2, [pc, #16]	; (80088f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80088e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088e6:	6013      	str	r3, [r2, #0]
}
 80088e8:	bf00      	nop
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	40007000 	.word	0x40007000

080088f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008902:	4b23      	ldr	r3, [pc, #140]	; (8008990 <HAL_PWREx_EnableOverDrive+0x98>)
 8008904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008906:	4a22      	ldr	r2, [pc, #136]	; (8008990 <HAL_PWREx_EnableOverDrive+0x98>)
 8008908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800890c:	6413      	str	r3, [r2, #64]	; 0x40
 800890e:	4b20      	ldr	r3, [pc, #128]	; (8008990 <HAL_PWREx_EnableOverDrive+0x98>)
 8008910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008916:	603b      	str	r3, [r7, #0]
 8008918:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800891a:	4b1e      	ldr	r3, [pc, #120]	; (8008994 <HAL_PWREx_EnableOverDrive+0x9c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a1d      	ldr	r2, [pc, #116]	; (8008994 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008924:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008926:	f7fb f821 	bl	800396c <HAL_GetTick>
 800892a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800892c:	e009      	b.n	8008942 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800892e:	f7fb f81d 	bl	800396c <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800893c:	d901      	bls.n	8008942 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e022      	b.n	8008988 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008942:	4b14      	ldr	r3, [pc, #80]	; (8008994 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800894a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800894e:	d1ee      	bne.n	800892e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008950:	4b10      	ldr	r3, [pc, #64]	; (8008994 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a0f      	ldr	r2, [pc, #60]	; (8008994 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800895a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800895c:	f7fb f806 	bl	800396c <HAL_GetTick>
 8008960:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008962:	e009      	b.n	8008978 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008964:	f7fb f802 	bl	800396c <HAL_GetTick>
 8008968:	4602      	mov	r2, r0
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008972:	d901      	bls.n	8008978 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e007      	b.n	8008988 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008978:	4b06      	ldr	r3, [pc, #24]	; (8008994 <HAL_PWREx_EnableOverDrive+0x9c>)
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008980:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008984:	d1ee      	bne.n	8008964 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	40023800 	.word	0x40023800
 8008994:	40007000 	.word	0x40007000

08008998 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af02      	add	r7, sp, #8
 800899e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80089a0:	f7fa ffe4 	bl	800396c <HAL_GetTick>
 80089a4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e067      	b.n	8008a80 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10b      	bne.n	80089d4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7f9 fac7 	bl	8001f58 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80089ca:	f241 3188 	movw	r1, #5000	; 0x1388
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f85e 	bl	8008a90 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	3b01      	subs	r3, #1
 80089e4:	021a      	lsls	r2, r3, #8
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	2120      	movs	r1, #32
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f856 	bl	8008aac <QSPI_WaitFlagStateUntilTimeout>
 8008a00:	4603      	mov	r3, r0
 8008a02:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008a04:	7afb      	ldrb	r3, [r7, #11]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d135      	bne.n	8008a76 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	4b1d      	ldr	r3, [pc, #116]	; (8008a88 <HAL_QSPI_Init+0xf0>)
 8008a12:	4013      	ands	r3, r2
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	6852      	ldr	r2, [r2, #4]
 8008a18:	0611      	lsls	r1, r2, #24
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	68d2      	ldr	r2, [r2, #12]
 8008a1e:	4311      	orrs	r1, r2
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	69d2      	ldr	r2, [r2, #28]
 8008a24:	4311      	orrs	r1, r2
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	6a12      	ldr	r2, [r2, #32]
 8008a2a:	4311      	orrs	r1, r2
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	6812      	ldr	r2, [r2, #0]
 8008a30:	430b      	orrs	r3, r1
 8008a32:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	4b14      	ldr	r3, [pc, #80]	; (8008a8c <HAL_QSPI_Init+0xf4>)
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	6912      	ldr	r2, [r2, #16]
 8008a42:	0411      	lsls	r1, r2, #16
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	6952      	ldr	r2, [r2, #20]
 8008a48:	4311      	orrs	r1, r2
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	6992      	ldr	r2, [r2, #24]
 8008a4e:	4311      	orrs	r1, r2
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	6812      	ldr	r2, [r2, #0]
 8008a54:	430b      	orrs	r3, r1
 8008a56:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f042 0201 	orr.w	r2, r2, #1
 8008a66:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008a7e:	7afb      	ldrb	r3, [r7, #11]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	00ffff2f 	.word	0x00ffff2f
 8008a8c:	ffe0f8fe 	.word	0xffe0f8fe

08008a90 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008abc:	e01a      	b.n	8008af4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ac4:	d016      	beq.n	8008af4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ac6:	f7fa ff51 	bl	800396c <HAL_GetTick>
 8008aca:	4602      	mov	r2, r0
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	1ad3      	subs	r3, r2, r3
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d302      	bcc.n	8008adc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10b      	bne.n	8008af4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2204      	movs	r2, #4
 8008ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ae8:	f043 0201 	orr.w	r2, r3, #1
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e00e      	b.n	8008b12 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689a      	ldr	r2, [r3, #8]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	4013      	ands	r3, r2
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	bf14      	ite	ne
 8008b02:	2301      	movne	r3, #1
 8008b04:	2300      	moveq	r3, #0
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	461a      	mov	r2, r3
 8008b0a:	79fb      	ldrb	r3, [r7, #7]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d1d6      	bne.n	8008abe <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
	...

08008b1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008b24:	2300      	movs	r3, #0
 8008b26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e291      	b.n	8009056 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f000 8087 	beq.w	8008c4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b40:	4b96      	ldr	r3, [pc, #600]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f003 030c 	and.w	r3, r3, #12
 8008b48:	2b04      	cmp	r3, #4
 8008b4a:	d00c      	beq.n	8008b66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b4c:	4b93      	ldr	r3, [pc, #588]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f003 030c 	and.w	r3, r3, #12
 8008b54:	2b08      	cmp	r3, #8
 8008b56:	d112      	bne.n	8008b7e <HAL_RCC_OscConfig+0x62>
 8008b58:	4b90      	ldr	r3, [pc, #576]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b64:	d10b      	bne.n	8008b7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b66:	4b8d      	ldr	r3, [pc, #564]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d06c      	beq.n	8008c4c <HAL_RCC_OscConfig+0x130>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d168      	bne.n	8008c4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e26b      	b.n	8009056 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b86:	d106      	bne.n	8008b96 <HAL_RCC_OscConfig+0x7a>
 8008b88:	4b84      	ldr	r3, [pc, #528]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a83      	ldr	r2, [pc, #524]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	e02e      	b.n	8008bf4 <HAL_RCC_OscConfig+0xd8>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10c      	bne.n	8008bb8 <HAL_RCC_OscConfig+0x9c>
 8008b9e:	4b7f      	ldr	r3, [pc, #508]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a7e      	ldr	r2, [pc, #504]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	4b7c      	ldr	r3, [pc, #496]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a7b      	ldr	r2, [pc, #492]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	e01d      	b.n	8008bf4 <HAL_RCC_OscConfig+0xd8>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bc0:	d10c      	bne.n	8008bdc <HAL_RCC_OscConfig+0xc0>
 8008bc2:	4b76      	ldr	r3, [pc, #472]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a75      	ldr	r2, [pc, #468]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008bcc:	6013      	str	r3, [r2, #0]
 8008bce:	4b73      	ldr	r3, [pc, #460]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a72      	ldr	r2, [pc, #456]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bd8:	6013      	str	r3, [r2, #0]
 8008bda:	e00b      	b.n	8008bf4 <HAL_RCC_OscConfig+0xd8>
 8008bdc:	4b6f      	ldr	r3, [pc, #444]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a6e      	ldr	r2, [pc, #440]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008be6:	6013      	str	r3, [r2, #0]
 8008be8:	4b6c      	ldr	r3, [pc, #432]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a6b      	ldr	r2, [pc, #428]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d013      	beq.n	8008c24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bfc:	f7fa feb6 	bl	800396c <HAL_GetTick>
 8008c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c02:	e008      	b.n	8008c16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c04:	f7fa feb2 	bl	800396c <HAL_GetTick>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	2b64      	cmp	r3, #100	; 0x64
 8008c10:	d901      	bls.n	8008c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e21f      	b.n	8009056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c16:	4b61      	ldr	r3, [pc, #388]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0f0      	beq.n	8008c04 <HAL_RCC_OscConfig+0xe8>
 8008c22:	e014      	b.n	8008c4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c24:	f7fa fea2 	bl	800396c <HAL_GetTick>
 8008c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c2a:	e008      	b.n	8008c3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c2c:	f7fa fe9e 	bl	800396c <HAL_GetTick>
 8008c30:	4602      	mov	r2, r0
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	2b64      	cmp	r3, #100	; 0x64
 8008c38:	d901      	bls.n	8008c3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e20b      	b.n	8009056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c3e:	4b57      	ldr	r3, [pc, #348]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1f0      	bne.n	8008c2c <HAL_RCC_OscConfig+0x110>
 8008c4a:	e000      	b.n	8008c4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0302 	and.w	r3, r3, #2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d069      	beq.n	8008d2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008c5a:	4b50      	ldr	r3, [pc, #320]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f003 030c 	and.w	r3, r3, #12
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00b      	beq.n	8008c7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c66:	4b4d      	ldr	r3, [pc, #308]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f003 030c 	and.w	r3, r3, #12
 8008c6e:	2b08      	cmp	r3, #8
 8008c70:	d11c      	bne.n	8008cac <HAL_RCC_OscConfig+0x190>
 8008c72:	4b4a      	ldr	r3, [pc, #296]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d116      	bne.n	8008cac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c7e:	4b47      	ldr	r3, [pc, #284]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0302 	and.w	r3, r3, #2
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d005      	beq.n	8008c96 <HAL_RCC_OscConfig+0x17a>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d001      	beq.n	8008c96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e1df      	b.n	8009056 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c96:	4b41      	ldr	r3, [pc, #260]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	00db      	lsls	r3, r3, #3
 8008ca4:	493d      	ldr	r1, [pc, #244]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008caa:	e040      	b.n	8008d2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d023      	beq.n	8008cfc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cb4:	4b39      	ldr	r3, [pc, #228]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a38      	ldr	r2, [pc, #224]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008cba:	f043 0301 	orr.w	r3, r3, #1
 8008cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cc0:	f7fa fe54 	bl	800396c <HAL_GetTick>
 8008cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cc6:	e008      	b.n	8008cda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cc8:	f7fa fe50 	bl	800396c <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d901      	bls.n	8008cda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e1bd      	b.n	8009056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cda:	4b30      	ldr	r3, [pc, #192]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0f0      	beq.n	8008cc8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ce6:	4b2d      	ldr	r3, [pc, #180]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	00db      	lsls	r3, r3, #3
 8008cf4:	4929      	ldr	r1, [pc, #164]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	600b      	str	r3, [r1, #0]
 8008cfa:	e018      	b.n	8008d2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cfc:	4b27      	ldr	r3, [pc, #156]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a26      	ldr	r2, [pc, #152]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008d02:	f023 0301 	bic.w	r3, r3, #1
 8008d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d08:	f7fa fe30 	bl	800396c <HAL_GetTick>
 8008d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d0e:	e008      	b.n	8008d22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d10:	f7fa fe2c 	bl	800396c <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d901      	bls.n	8008d22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e199      	b.n	8009056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d22:	4b1e      	ldr	r3, [pc, #120]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 0302 	and.w	r3, r3, #2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1f0      	bne.n	8008d10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0308 	and.w	r3, r3, #8
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d038      	beq.n	8008dac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d019      	beq.n	8008d76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d42:	4b16      	ldr	r3, [pc, #88]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d46:	4a15      	ldr	r2, [pc, #84]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008d48:	f043 0301 	orr.w	r3, r3, #1
 8008d4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d4e:	f7fa fe0d 	bl	800396c <HAL_GetTick>
 8008d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d54:	e008      	b.n	8008d68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d56:	f7fa fe09 	bl	800396c <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d901      	bls.n	8008d68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e176      	b.n	8009056 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d68:	4b0c      	ldr	r3, [pc, #48]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d6c:	f003 0302 	and.w	r3, r3, #2
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d0f0      	beq.n	8008d56 <HAL_RCC_OscConfig+0x23a>
 8008d74:	e01a      	b.n	8008dac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d76:	4b09      	ldr	r3, [pc, #36]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d7a:	4a08      	ldr	r2, [pc, #32]	; (8008d9c <HAL_RCC_OscConfig+0x280>)
 8008d7c:	f023 0301 	bic.w	r3, r3, #1
 8008d80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d82:	f7fa fdf3 	bl	800396c <HAL_GetTick>
 8008d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d88:	e00a      	b.n	8008da0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d8a:	f7fa fdef 	bl	800396c <HAL_GetTick>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d903      	bls.n	8008da0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e15c      	b.n	8009056 <HAL_RCC_OscConfig+0x53a>
 8008d9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008da0:	4b91      	ldr	r3, [pc, #580]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008da4:	f003 0302 	and.w	r3, r3, #2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1ee      	bne.n	8008d8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0304 	and.w	r3, r3, #4
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 80a4 	beq.w	8008f02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008dba:	4b8b      	ldr	r3, [pc, #556]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10d      	bne.n	8008de2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dc6:	4b88      	ldr	r3, [pc, #544]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dca:	4a87      	ldr	r2, [pc, #540]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8008dd2:	4b85      	ldr	r3, [pc, #532]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dda:	60bb      	str	r3, [r7, #8]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dde:	2301      	movs	r3, #1
 8008de0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008de2:	4b82      	ldr	r3, [pc, #520]	; (8008fec <HAL_RCC_OscConfig+0x4d0>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d118      	bne.n	8008e20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008dee:	4b7f      	ldr	r3, [pc, #508]	; (8008fec <HAL_RCC_OscConfig+0x4d0>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a7e      	ldr	r2, [pc, #504]	; (8008fec <HAL_RCC_OscConfig+0x4d0>)
 8008df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dfa:	f7fa fdb7 	bl	800396c <HAL_GetTick>
 8008dfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e00:	e008      	b.n	8008e14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e02:	f7fa fdb3 	bl	800396c <HAL_GetTick>
 8008e06:	4602      	mov	r2, r0
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	2b64      	cmp	r3, #100	; 0x64
 8008e0e:	d901      	bls.n	8008e14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e120      	b.n	8009056 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e14:	4b75      	ldr	r3, [pc, #468]	; (8008fec <HAL_RCC_OscConfig+0x4d0>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d0f0      	beq.n	8008e02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d106      	bne.n	8008e36 <HAL_RCC_OscConfig+0x31a>
 8008e28:	4b6f      	ldr	r3, [pc, #444]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e2c:	4a6e      	ldr	r2, [pc, #440]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008e2e:	f043 0301 	orr.w	r3, r3, #1
 8008e32:	6713      	str	r3, [r2, #112]	; 0x70
 8008e34:	e02d      	b.n	8008e92 <HAL_RCC_OscConfig+0x376>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10c      	bne.n	8008e58 <HAL_RCC_OscConfig+0x33c>
 8008e3e:	4b6a      	ldr	r3, [pc, #424]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e42:	4a69      	ldr	r2, [pc, #420]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008e44:	f023 0301 	bic.w	r3, r3, #1
 8008e48:	6713      	str	r3, [r2, #112]	; 0x70
 8008e4a:	4b67      	ldr	r3, [pc, #412]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e4e:	4a66      	ldr	r2, [pc, #408]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008e50:	f023 0304 	bic.w	r3, r3, #4
 8008e54:	6713      	str	r3, [r2, #112]	; 0x70
 8008e56:	e01c      	b.n	8008e92 <HAL_RCC_OscConfig+0x376>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	2b05      	cmp	r3, #5
 8008e5e:	d10c      	bne.n	8008e7a <HAL_RCC_OscConfig+0x35e>
 8008e60:	4b61      	ldr	r3, [pc, #388]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e64:	4a60      	ldr	r2, [pc, #384]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008e66:	f043 0304 	orr.w	r3, r3, #4
 8008e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8008e6c:	4b5e      	ldr	r3, [pc, #376]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e70:	4a5d      	ldr	r2, [pc, #372]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008e72:	f043 0301 	orr.w	r3, r3, #1
 8008e76:	6713      	str	r3, [r2, #112]	; 0x70
 8008e78:	e00b      	b.n	8008e92 <HAL_RCC_OscConfig+0x376>
 8008e7a:	4b5b      	ldr	r3, [pc, #364]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e7e:	4a5a      	ldr	r2, [pc, #360]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008e80:	f023 0301 	bic.w	r3, r3, #1
 8008e84:	6713      	str	r3, [r2, #112]	; 0x70
 8008e86:	4b58      	ldr	r3, [pc, #352]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8a:	4a57      	ldr	r2, [pc, #348]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008e8c:	f023 0304 	bic.w	r3, r3, #4
 8008e90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d015      	beq.n	8008ec6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e9a:	f7fa fd67 	bl	800396c <HAL_GetTick>
 8008e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ea0:	e00a      	b.n	8008eb8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ea2:	f7fa fd63 	bl	800396c <HAL_GetTick>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d901      	bls.n	8008eb8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e0ce      	b.n	8009056 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eb8:	4b4b      	ldr	r3, [pc, #300]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ebc:	f003 0302 	and.w	r3, r3, #2
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d0ee      	beq.n	8008ea2 <HAL_RCC_OscConfig+0x386>
 8008ec4:	e014      	b.n	8008ef0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ec6:	f7fa fd51 	bl	800396c <HAL_GetTick>
 8008eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ecc:	e00a      	b.n	8008ee4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ece:	f7fa fd4d 	bl	800396c <HAL_GetTick>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d901      	bls.n	8008ee4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e0b8      	b.n	8009056 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ee4:	4b40      	ldr	r3, [pc, #256]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee8:	f003 0302 	and.w	r3, r3, #2
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1ee      	bne.n	8008ece <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d105      	bne.n	8008f02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ef6:	4b3c      	ldr	r3, [pc, #240]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efa:	4a3b      	ldr	r2, [pc, #236]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f000 80a4 	beq.w	8009054 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f0c:	4b36      	ldr	r3, [pc, #216]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f003 030c 	and.w	r3, r3, #12
 8008f14:	2b08      	cmp	r3, #8
 8008f16:	d06b      	beq.n	8008ff0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d149      	bne.n	8008fb4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f20:	4b31      	ldr	r3, [pc, #196]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a30      	ldr	r2, [pc, #192]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f2c:	f7fa fd1e 	bl	800396c <HAL_GetTick>
 8008f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f32:	e008      	b.n	8008f46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f34:	f7fa fd1a 	bl	800396c <HAL_GetTick>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d901      	bls.n	8008f46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e087      	b.n	8009056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f46:	4b28      	ldr	r3, [pc, #160]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1f0      	bne.n	8008f34 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	69da      	ldr	r2, [r3, #28]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f60:	019b      	lsls	r3, r3, #6
 8008f62:	431a      	orrs	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f68:	085b      	lsrs	r3, r3, #1
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	041b      	lsls	r3, r3, #16
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f74:	061b      	lsls	r3, r3, #24
 8008f76:	4313      	orrs	r3, r2
 8008f78:	4a1b      	ldr	r2, [pc, #108]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008f7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f7e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f80:	4b19      	ldr	r3, [pc, #100]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a18      	ldr	r2, [pc, #96]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f8c:	f7fa fcee 	bl	800396c <HAL_GetTick>
 8008f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f92:	e008      	b.n	8008fa6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f94:	f7fa fcea 	bl	800396c <HAL_GetTick>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d901      	bls.n	8008fa6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	e057      	b.n	8009056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fa6:	4b10      	ldr	r3, [pc, #64]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0f0      	beq.n	8008f94 <HAL_RCC_OscConfig+0x478>
 8008fb2:	e04f      	b.n	8009054 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fb4:	4b0c      	ldr	r3, [pc, #48]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a0b      	ldr	r2, [pc, #44]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fc0:	f7fa fcd4 	bl	800396c <HAL_GetTick>
 8008fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fc6:	e008      	b.n	8008fda <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fc8:	f7fa fcd0 	bl	800396c <HAL_GetTick>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d901      	bls.n	8008fda <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e03d      	b.n	8009056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fda:	4b03      	ldr	r3, [pc, #12]	; (8008fe8 <HAL_RCC_OscConfig+0x4cc>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1f0      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x4ac>
 8008fe6:	e035      	b.n	8009054 <HAL_RCC_OscConfig+0x538>
 8008fe8:	40023800 	.word	0x40023800
 8008fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008ff0:	4b1b      	ldr	r3, [pc, #108]	; (8009060 <HAL_RCC_OscConfig+0x544>)
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d028      	beq.n	8009050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009008:	429a      	cmp	r2, r3
 800900a:	d121      	bne.n	8009050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009016:	429a      	cmp	r2, r3
 8009018:	d11a      	bne.n	8009050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009020:	4013      	ands	r3, r2
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009026:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009028:	4293      	cmp	r3, r2
 800902a:	d111      	bne.n	8009050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009036:	085b      	lsrs	r3, r3, #1
 8009038:	3b01      	subs	r3, #1
 800903a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800903c:	429a      	cmp	r2, r3
 800903e:	d107      	bne.n	8009050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800904c:	429a      	cmp	r2, r3
 800904e:	d001      	beq.n	8009054 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e000      	b.n	8009056 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3718      	adds	r7, #24
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	40023800 	.word	0x40023800

08009064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800906e:	2300      	movs	r3, #0
 8009070:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e0d0      	b.n	800921e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800907c:	4b6a      	ldr	r3, [pc, #424]	; (8009228 <HAL_RCC_ClockConfig+0x1c4>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 030f 	and.w	r3, r3, #15
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	429a      	cmp	r2, r3
 8009088:	d910      	bls.n	80090ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800908a:	4b67      	ldr	r3, [pc, #412]	; (8009228 <HAL_RCC_ClockConfig+0x1c4>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f023 020f 	bic.w	r2, r3, #15
 8009092:	4965      	ldr	r1, [pc, #404]	; (8009228 <HAL_RCC_ClockConfig+0x1c4>)
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	4313      	orrs	r3, r2
 8009098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800909a:	4b63      	ldr	r3, [pc, #396]	; (8009228 <HAL_RCC_ClockConfig+0x1c4>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 030f 	and.w	r3, r3, #15
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d001      	beq.n	80090ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e0b8      	b.n	800921e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0302 	and.w	r3, r3, #2
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d020      	beq.n	80090fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 0304 	and.w	r3, r3, #4
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d005      	beq.n	80090d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090c4:	4b59      	ldr	r3, [pc, #356]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	4a58      	ldr	r2, [pc, #352]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 80090ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80090ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 0308 	and.w	r3, r3, #8
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d005      	beq.n	80090e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80090dc:	4b53      	ldr	r3, [pc, #332]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	4a52      	ldr	r2, [pc, #328]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 80090e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80090e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090e8:	4b50      	ldr	r3, [pc, #320]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	494d      	ldr	r1, [pc, #308]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 80090f6:	4313      	orrs	r3, r2
 80090f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d040      	beq.n	8009188 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	2b01      	cmp	r3, #1
 800910c:	d107      	bne.n	800911e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800910e:	4b47      	ldr	r3, [pc, #284]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009116:	2b00      	cmp	r3, #0
 8009118:	d115      	bne.n	8009146 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e07f      	b.n	800921e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	2b02      	cmp	r3, #2
 8009124:	d107      	bne.n	8009136 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009126:	4b41      	ldr	r3, [pc, #260]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d109      	bne.n	8009146 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e073      	b.n	800921e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009136:	4b3d      	ldr	r3, [pc, #244]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 0302 	and.w	r3, r3, #2
 800913e:	2b00      	cmp	r3, #0
 8009140:	d101      	bne.n	8009146 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e06b      	b.n	800921e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009146:	4b39      	ldr	r3, [pc, #228]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f023 0203 	bic.w	r2, r3, #3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	4936      	ldr	r1, [pc, #216]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 8009154:	4313      	orrs	r3, r2
 8009156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009158:	f7fa fc08 	bl	800396c <HAL_GetTick>
 800915c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800915e:	e00a      	b.n	8009176 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009160:	f7fa fc04 	bl	800396c <HAL_GetTick>
 8009164:	4602      	mov	r2, r0
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	f241 3288 	movw	r2, #5000	; 0x1388
 800916e:	4293      	cmp	r3, r2
 8009170:	d901      	bls.n	8009176 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e053      	b.n	800921e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009176:	4b2d      	ldr	r3, [pc, #180]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f003 020c 	and.w	r2, r3, #12
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	429a      	cmp	r2, r3
 8009186:	d1eb      	bne.n	8009160 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009188:	4b27      	ldr	r3, [pc, #156]	; (8009228 <HAL_RCC_ClockConfig+0x1c4>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	429a      	cmp	r2, r3
 8009194:	d210      	bcs.n	80091b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009196:	4b24      	ldr	r3, [pc, #144]	; (8009228 <HAL_RCC_ClockConfig+0x1c4>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f023 020f 	bic.w	r2, r3, #15
 800919e:	4922      	ldr	r1, [pc, #136]	; (8009228 <HAL_RCC_ClockConfig+0x1c4>)
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091a6:	4b20      	ldr	r3, [pc, #128]	; (8009228 <HAL_RCC_ClockConfig+0x1c4>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 030f 	and.w	r3, r3, #15
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d001      	beq.n	80091b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	e032      	b.n	800921e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0304 	and.w	r3, r3, #4
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d008      	beq.n	80091d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091c4:	4b19      	ldr	r3, [pc, #100]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	4916      	ldr	r1, [pc, #88]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 0308 	and.w	r3, r3, #8
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d009      	beq.n	80091f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80091e2:	4b12      	ldr	r3, [pc, #72]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	00db      	lsls	r3, r3, #3
 80091f0:	490e      	ldr	r1, [pc, #56]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80091f6:	f000 f821 	bl	800923c <HAL_RCC_GetSysClockFreq>
 80091fa:	4601      	mov	r1, r0
 80091fc:	4b0b      	ldr	r3, [pc, #44]	; (800922c <HAL_RCC_ClockConfig+0x1c8>)
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	091b      	lsrs	r3, r3, #4
 8009202:	f003 030f 	and.w	r3, r3, #15
 8009206:	4a0a      	ldr	r2, [pc, #40]	; (8009230 <HAL_RCC_ClockConfig+0x1cc>)
 8009208:	5cd3      	ldrb	r3, [r2, r3]
 800920a:	fa21 f303 	lsr.w	r3, r1, r3
 800920e:	4a09      	ldr	r2, [pc, #36]	; (8009234 <HAL_RCC_ClockConfig+0x1d0>)
 8009210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009212:	4b09      	ldr	r3, [pc, #36]	; (8009238 <HAL_RCC_ClockConfig+0x1d4>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4618      	mov	r0, r3
 8009218:	f7f9 fae0 	bl	80027dc <HAL_InitTick>

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	40023c00 	.word	0x40023c00
 800922c:	40023800 	.word	0x40023800
 8009230:	08025408 	.word	0x08025408
 8009234:	20000000 	.word	0x20000000
 8009238:	20000008 	.word	0x20000008

0800923c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800923c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	607b      	str	r3, [r7, #4]
 8009246:	2300      	movs	r3, #0
 8009248:	60fb      	str	r3, [r7, #12]
 800924a:	2300      	movs	r3, #0
 800924c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009252:	4b50      	ldr	r3, [pc, #320]	; (8009394 <HAL_RCC_GetSysClockFreq+0x158>)
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	f003 030c 	and.w	r3, r3, #12
 800925a:	2b04      	cmp	r3, #4
 800925c:	d007      	beq.n	800926e <HAL_RCC_GetSysClockFreq+0x32>
 800925e:	2b08      	cmp	r3, #8
 8009260:	d008      	beq.n	8009274 <HAL_RCC_GetSysClockFreq+0x38>
 8009262:	2b00      	cmp	r3, #0
 8009264:	f040 808d 	bne.w	8009382 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009268:	4b4b      	ldr	r3, [pc, #300]	; (8009398 <HAL_RCC_GetSysClockFreq+0x15c>)
 800926a:	60bb      	str	r3, [r7, #8]
      break;
 800926c:	e08c      	b.n	8009388 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800926e:	4b4b      	ldr	r3, [pc, #300]	; (800939c <HAL_RCC_GetSysClockFreq+0x160>)
 8009270:	60bb      	str	r3, [r7, #8]
      break;
 8009272:	e089      	b.n	8009388 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009274:	4b47      	ldr	r3, [pc, #284]	; (8009394 <HAL_RCC_GetSysClockFreq+0x158>)
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800927c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800927e:	4b45      	ldr	r3, [pc, #276]	; (8009394 <HAL_RCC_GetSysClockFreq+0x158>)
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009286:	2b00      	cmp	r3, #0
 8009288:	d023      	beq.n	80092d2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800928a:	4b42      	ldr	r3, [pc, #264]	; (8009394 <HAL_RCC_GetSysClockFreq+0x158>)
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	099b      	lsrs	r3, r3, #6
 8009290:	f04f 0400 	mov.w	r4, #0
 8009294:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009298:	f04f 0200 	mov.w	r2, #0
 800929c:	ea03 0501 	and.w	r5, r3, r1
 80092a0:	ea04 0602 	and.w	r6, r4, r2
 80092a4:	4a3d      	ldr	r2, [pc, #244]	; (800939c <HAL_RCC_GetSysClockFreq+0x160>)
 80092a6:	fb02 f106 	mul.w	r1, r2, r6
 80092aa:	2200      	movs	r2, #0
 80092ac:	fb02 f205 	mul.w	r2, r2, r5
 80092b0:	440a      	add	r2, r1
 80092b2:	493a      	ldr	r1, [pc, #232]	; (800939c <HAL_RCC_GetSysClockFreq+0x160>)
 80092b4:	fba5 0101 	umull	r0, r1, r5, r1
 80092b8:	1853      	adds	r3, r2, r1
 80092ba:	4619      	mov	r1, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f04f 0400 	mov.w	r4, #0
 80092c2:	461a      	mov	r2, r3
 80092c4:	4623      	mov	r3, r4
 80092c6:	f7f6 fff3 	bl	80002b0 <__aeabi_uldivmod>
 80092ca:	4603      	mov	r3, r0
 80092cc:	460c      	mov	r4, r1
 80092ce:	60fb      	str	r3, [r7, #12]
 80092d0:	e049      	b.n	8009366 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092d2:	4b30      	ldr	r3, [pc, #192]	; (8009394 <HAL_RCC_GetSysClockFreq+0x158>)
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	099b      	lsrs	r3, r3, #6
 80092d8:	f04f 0400 	mov.w	r4, #0
 80092dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80092e0:	f04f 0200 	mov.w	r2, #0
 80092e4:	ea03 0501 	and.w	r5, r3, r1
 80092e8:	ea04 0602 	and.w	r6, r4, r2
 80092ec:	4629      	mov	r1, r5
 80092ee:	4632      	mov	r2, r6
 80092f0:	f04f 0300 	mov.w	r3, #0
 80092f4:	f04f 0400 	mov.w	r4, #0
 80092f8:	0154      	lsls	r4, r2, #5
 80092fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80092fe:	014b      	lsls	r3, r1, #5
 8009300:	4619      	mov	r1, r3
 8009302:	4622      	mov	r2, r4
 8009304:	1b49      	subs	r1, r1, r5
 8009306:	eb62 0206 	sbc.w	r2, r2, r6
 800930a:	f04f 0300 	mov.w	r3, #0
 800930e:	f04f 0400 	mov.w	r4, #0
 8009312:	0194      	lsls	r4, r2, #6
 8009314:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009318:	018b      	lsls	r3, r1, #6
 800931a:	1a5b      	subs	r3, r3, r1
 800931c:	eb64 0402 	sbc.w	r4, r4, r2
 8009320:	f04f 0100 	mov.w	r1, #0
 8009324:	f04f 0200 	mov.w	r2, #0
 8009328:	00e2      	lsls	r2, r4, #3
 800932a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800932e:	00d9      	lsls	r1, r3, #3
 8009330:	460b      	mov	r3, r1
 8009332:	4614      	mov	r4, r2
 8009334:	195b      	adds	r3, r3, r5
 8009336:	eb44 0406 	adc.w	r4, r4, r6
 800933a:	f04f 0100 	mov.w	r1, #0
 800933e:	f04f 0200 	mov.w	r2, #0
 8009342:	02a2      	lsls	r2, r4, #10
 8009344:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009348:	0299      	lsls	r1, r3, #10
 800934a:	460b      	mov	r3, r1
 800934c:	4614      	mov	r4, r2
 800934e:	4618      	mov	r0, r3
 8009350:	4621      	mov	r1, r4
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f04f 0400 	mov.w	r4, #0
 8009358:	461a      	mov	r2, r3
 800935a:	4623      	mov	r3, r4
 800935c:	f7f6 ffa8 	bl	80002b0 <__aeabi_uldivmod>
 8009360:	4603      	mov	r3, r0
 8009362:	460c      	mov	r4, r1
 8009364:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009366:	4b0b      	ldr	r3, [pc, #44]	; (8009394 <HAL_RCC_GetSysClockFreq+0x158>)
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	0c1b      	lsrs	r3, r3, #16
 800936c:	f003 0303 	and.w	r3, r3, #3
 8009370:	3301      	adds	r3, #1
 8009372:	005b      	lsls	r3, r3, #1
 8009374:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	fbb2 f3f3 	udiv	r3, r2, r3
 800937e:	60bb      	str	r3, [r7, #8]
      break;
 8009380:	e002      	b.n	8009388 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009382:	4b05      	ldr	r3, [pc, #20]	; (8009398 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009384:	60bb      	str	r3, [r7, #8]
      break;
 8009386:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009388:	68bb      	ldr	r3, [r7, #8]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009392:	bf00      	nop
 8009394:	40023800 	.word	0x40023800
 8009398:	00f42400 	.word	0x00f42400
 800939c:	017d7840 	.word	0x017d7840

080093a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093a0:	b480      	push	{r7}
 80093a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093a4:	4b03      	ldr	r3, [pc, #12]	; (80093b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80093a6:	681b      	ldr	r3, [r3, #0]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	20000000 	.word	0x20000000

080093b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80093bc:	f7ff fff0 	bl	80093a0 <HAL_RCC_GetHCLKFreq>
 80093c0:	4601      	mov	r1, r0
 80093c2:	4b05      	ldr	r3, [pc, #20]	; (80093d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	0a9b      	lsrs	r3, r3, #10
 80093c8:	f003 0307 	and.w	r3, r3, #7
 80093cc:	4a03      	ldr	r2, [pc, #12]	; (80093dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80093ce:	5cd3      	ldrb	r3, [r2, r3]
 80093d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	40023800 	.word	0x40023800
 80093dc:	08025418 	.word	0x08025418

080093e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80093e4:	f7ff ffdc 	bl	80093a0 <HAL_RCC_GetHCLKFreq>
 80093e8:	4601      	mov	r1, r0
 80093ea:	4b05      	ldr	r3, [pc, #20]	; (8009400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	0b5b      	lsrs	r3, r3, #13
 80093f0:	f003 0307 	and.w	r3, r3, #7
 80093f4:	4a03      	ldr	r2, [pc, #12]	; (8009404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093f6:	5cd3      	ldrb	r3, [r2, r3]
 80093f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	40023800 	.word	0x40023800
 8009404:	08025418 	.word	0x08025418

08009408 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	220f      	movs	r2, #15
 8009416:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009418:	4b12      	ldr	r3, [pc, #72]	; (8009464 <HAL_RCC_GetClockConfig+0x5c>)
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	f003 0203 	and.w	r2, r3, #3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009424:	4b0f      	ldr	r3, [pc, #60]	; (8009464 <HAL_RCC_GetClockConfig+0x5c>)
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009430:	4b0c      	ldr	r3, [pc, #48]	; (8009464 <HAL_RCC_GetClockConfig+0x5c>)
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800943c:	4b09      	ldr	r3, [pc, #36]	; (8009464 <HAL_RCC_GetClockConfig+0x5c>)
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	08db      	lsrs	r3, r3, #3
 8009442:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800944a:	4b07      	ldr	r3, [pc, #28]	; (8009468 <HAL_RCC_GetClockConfig+0x60>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 020f 	and.w	r2, r3, #15
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	601a      	str	r2, [r3, #0]
}
 8009456:	bf00      	nop
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	40023800 	.word	0x40023800
 8009468:	40023c00 	.word	0x40023c00

0800946c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b088      	sub	sp, #32
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009474:	2300      	movs	r3, #0
 8009476:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009480:	2300      	movs	r3, #0
 8009482:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009484:	2300      	movs	r3, #0
 8009486:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	2b00      	cmp	r3, #0
 8009492:	d012      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009494:	4b69      	ldr	r3, [pc, #420]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	4a68      	ldr	r2, [pc, #416]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800949a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800949e:	6093      	str	r3, [r2, #8]
 80094a0:	4b66      	ldr	r3, [pc, #408]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094a2:	689a      	ldr	r2, [r3, #8]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a8:	4964      	ldr	r1, [pc, #400]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80094b6:	2301      	movs	r3, #1
 80094b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d017      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80094c6:	4b5d      	ldr	r3, [pc, #372]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d4:	4959      	ldr	r1, [pc, #356]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094e4:	d101      	bne.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80094e6:	2301      	movs	r3, #1
 80094e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80094f2:	2301      	movs	r3, #1
 80094f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d017      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009502:	4b4e      	ldr	r3, [pc, #312]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009508:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009510:	494a      	ldr	r1, [pc, #296]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009512:	4313      	orrs	r3, r2
 8009514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009520:	d101      	bne.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009522:	2301      	movs	r3, #1
 8009524:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952a:	2b00      	cmp	r3, #0
 800952c:	d101      	bne.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800952e:	2301      	movs	r3, #1
 8009530:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800953e:	2301      	movs	r3, #1
 8009540:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 0320 	and.w	r3, r3, #32
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 808b 	beq.w	8009666 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009550:	4b3a      	ldr	r3, [pc, #232]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009554:	4a39      	ldr	r2, [pc, #228]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800955a:	6413      	str	r3, [r2, #64]	; 0x40
 800955c:	4b37      	ldr	r3, [pc, #220]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800955e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009564:	60bb      	str	r3, [r7, #8]
 8009566:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009568:	4b35      	ldr	r3, [pc, #212]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a34      	ldr	r2, [pc, #208]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800956e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009574:	f7fa f9fa 	bl	800396c <HAL_GetTick>
 8009578:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800957a:	e008      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800957c:	f7fa f9f6 	bl	800396c <HAL_GetTick>
 8009580:	4602      	mov	r2, r0
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	2b64      	cmp	r3, #100	; 0x64
 8009588:	d901      	bls.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	e357      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800958e:	4b2c      	ldr	r3, [pc, #176]	; (8009640 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0f0      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800959a:	4b28      	ldr	r3, [pc, #160]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800959c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d035      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d02e      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80095b8:	4b20      	ldr	r3, [pc, #128]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80095c2:	4b1e      	ldr	r3, [pc, #120]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095c6:	4a1d      	ldr	r2, [pc, #116]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80095ce:	4b1b      	ldr	r3, [pc, #108]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d2:	4a1a      	ldr	r2, [pc, #104]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80095da:	4a18      	ldr	r2, [pc, #96]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80095e0:	4b16      	ldr	r3, [pc, #88]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d114      	bne.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095ec:	f7fa f9be 	bl	800396c <HAL_GetTick>
 80095f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095f2:	e00a      	b.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095f4:	f7fa f9ba 	bl	800396c <HAL_GetTick>
 80095f8:	4602      	mov	r2, r0
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009602:	4293      	cmp	r3, r2
 8009604:	d901      	bls.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e319      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800960a:	4b0c      	ldr	r3, [pc, #48]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800960c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800960e:	f003 0302 	and.w	r3, r3, #2
 8009612:	2b00      	cmp	r3, #0
 8009614:	d0ee      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800961e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009622:	d111      	bne.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009624:	4b05      	ldr	r3, [pc, #20]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009630:	4b04      	ldr	r3, [pc, #16]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009632:	400b      	ands	r3, r1
 8009634:	4901      	ldr	r1, [pc, #4]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009636:	4313      	orrs	r3, r2
 8009638:	608b      	str	r3, [r1, #8]
 800963a:	e00b      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800963c:	40023800 	.word	0x40023800
 8009640:	40007000 	.word	0x40007000
 8009644:	0ffffcff 	.word	0x0ffffcff
 8009648:	4bb1      	ldr	r3, [pc, #708]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	4ab0      	ldr	r2, [pc, #704]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800964e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009652:	6093      	str	r3, [r2, #8]
 8009654:	4bae      	ldr	r3, [pc, #696]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009656:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009660:	49ab      	ldr	r1, [pc, #684]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009662:	4313      	orrs	r3, r2
 8009664:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 0310 	and.w	r3, r3, #16
 800966e:	2b00      	cmp	r3, #0
 8009670:	d010      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009672:	4ba7      	ldr	r3, [pc, #668]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009678:	4aa5      	ldr	r2, [pc, #660]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800967a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800967e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009682:	4ba3      	ldr	r3, [pc, #652]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009684:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968c:	49a0      	ldr	r1, [pc, #640]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800968e:	4313      	orrs	r3, r2
 8009690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00a      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80096a0:	4b9b      	ldr	r3, [pc, #620]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80096a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096ae:	4998      	ldr	r1, [pc, #608]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80096b0:	4313      	orrs	r3, r2
 80096b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00a      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80096c2:	4b93      	ldr	r3, [pc, #588]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80096c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096d0:	498f      	ldr	r1, [pc, #572]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00a      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80096e4:	4b8a      	ldr	r3, [pc, #552]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80096e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096f2:	4987      	ldr	r1, [pc, #540]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80096f4:	4313      	orrs	r3, r2
 80096f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00a      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009706:	4b82      	ldr	r3, [pc, #520]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800970c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009714:	497e      	ldr	r1, [pc, #504]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009716:	4313      	orrs	r3, r2
 8009718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00a      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009728:	4b79      	ldr	r3, [pc, #484]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800972a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800972e:	f023 0203 	bic.w	r2, r3, #3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009736:	4976      	ldr	r1, [pc, #472]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009738:	4313      	orrs	r3, r2
 800973a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00a      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800974a:	4b71      	ldr	r3, [pc, #452]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800974c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009750:	f023 020c 	bic.w	r2, r3, #12
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009758:	496d      	ldr	r1, [pc, #436]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800975a:	4313      	orrs	r3, r2
 800975c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00a      	beq.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800976c:	4b68      	ldr	r3, [pc, #416]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800976e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009772:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800977a:	4965      	ldr	r1, [pc, #404]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800977c:	4313      	orrs	r3, r2
 800977e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00a      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800978e:	4b60      	ldr	r3, [pc, #384]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009794:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800979c:	495c      	ldr	r1, [pc, #368]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00a      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80097b0:	4b57      	ldr	r3, [pc, #348]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80097b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097be:	4954      	ldr	r1, [pc, #336]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80097c0:	4313      	orrs	r3, r2
 80097c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00a      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80097d2:	4b4f      	ldr	r3, [pc, #316]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80097d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e0:	494b      	ldr	r1, [pc, #300]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80097e2:	4313      	orrs	r3, r2
 80097e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00a      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80097f4:	4b46      	ldr	r3, [pc, #280]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80097f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009802:	4943      	ldr	r1, [pc, #268]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009804:	4313      	orrs	r3, r2
 8009806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00a      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009816:	4b3e      	ldr	r3, [pc, #248]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800981c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009824:	493a      	ldr	r1, [pc, #232]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009826:	4313      	orrs	r3, r2
 8009828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00a      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009838:	4b35      	ldr	r3, [pc, #212]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800983a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800983e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009846:	4932      	ldr	r1, [pc, #200]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009848:	4313      	orrs	r3, r2
 800984a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d011      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800985a:	4b2d      	ldr	r3, [pc, #180]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800985c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009860:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009868:	4929      	ldr	r1, [pc, #164]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800986a:	4313      	orrs	r3, r2
 800986c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009874:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009878:	d101      	bne.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800987a:	2301      	movs	r3, #1
 800987c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 0308 	and.w	r3, r3, #8
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800988a:	2301      	movs	r3, #1
 800988c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00a      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800989a:	4b1d      	ldr	r3, [pc, #116]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800989c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098a8:	4919      	ldr	r1, [pc, #100]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098aa:	4313      	orrs	r3, r2
 80098ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00b      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80098bc:	4b14      	ldr	r3, [pc, #80]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098cc:	4910      	ldr	r1, [pc, #64]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098ce:	4313      	orrs	r3, r2
 80098d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d006      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f000 80d9 	beq.w	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80098e8:	4b09      	ldr	r3, [pc, #36]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a08      	ldr	r2, [pc, #32]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80098ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80098f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098f4:	f7fa f83a 	bl	800396c <HAL_GetTick>
 80098f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80098fa:	e00b      	b.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80098fc:	f7fa f836 	bl	800396c <HAL_GetTick>
 8009900:	4602      	mov	r2, r0
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	2b64      	cmp	r3, #100	; 0x64
 8009908:	d904      	bls.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e197      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800990e:	bf00      	nop
 8009910:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009914:	4b6c      	ldr	r3, [pc, #432]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1ed      	bne.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 0301 	and.w	r3, r3, #1
 8009928:	2b00      	cmp	r3, #0
 800992a:	d021      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009930:	2b00      	cmp	r3, #0
 8009932:	d11d      	bne.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009934:	4b64      	ldr	r3, [pc, #400]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800993a:	0c1b      	lsrs	r3, r3, #16
 800993c:	f003 0303 	and.w	r3, r3, #3
 8009940:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009942:	4b61      	ldr	r3, [pc, #388]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009948:	0e1b      	lsrs	r3, r3, #24
 800994a:	f003 030f 	and.w	r3, r3, #15
 800994e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	019a      	lsls	r2, r3, #6
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	041b      	lsls	r3, r3, #16
 800995a:	431a      	orrs	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	061b      	lsls	r3, r3, #24
 8009960:	431a      	orrs	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	071b      	lsls	r3, r3, #28
 8009968:	4957      	ldr	r1, [pc, #348]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800996a:	4313      	orrs	r3, r2
 800996c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d004      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009980:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009984:	d00a      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800998e:	2b00      	cmp	r3, #0
 8009990:	d02e      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800999a:	d129      	bne.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800999c:	4b4a      	ldr	r3, [pc, #296]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800999e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099a2:	0c1b      	lsrs	r3, r3, #16
 80099a4:	f003 0303 	and.w	r3, r3, #3
 80099a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80099aa:	4b47      	ldr	r3, [pc, #284]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099b0:	0f1b      	lsrs	r3, r3, #28
 80099b2:	f003 0307 	and.w	r3, r3, #7
 80099b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	019a      	lsls	r2, r3, #6
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	041b      	lsls	r3, r3, #16
 80099c2:	431a      	orrs	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	061b      	lsls	r3, r3, #24
 80099ca:	431a      	orrs	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	071b      	lsls	r3, r3, #28
 80099d0:	493d      	ldr	r1, [pc, #244]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099d2:	4313      	orrs	r3, r2
 80099d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80099d8:	4b3b      	ldr	r3, [pc, #236]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099de:	f023 021f 	bic.w	r2, r3, #31
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e6:	3b01      	subs	r3, #1
 80099e8:	4937      	ldr	r1, [pc, #220]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099ea:	4313      	orrs	r3, r2
 80099ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d01d      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80099fc:	4b32      	ldr	r3, [pc, #200]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a02:	0e1b      	lsrs	r3, r3, #24
 8009a04:	f003 030f 	and.w	r3, r3, #15
 8009a08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009a0a:	4b2f      	ldr	r3, [pc, #188]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a10:	0f1b      	lsrs	r3, r3, #28
 8009a12:	f003 0307 	and.w	r3, r3, #7
 8009a16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	019a      	lsls	r2, r3, #6
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	041b      	lsls	r3, r3, #16
 8009a24:	431a      	orrs	r2, r3
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	061b      	lsls	r3, r3, #24
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	071b      	lsls	r3, r3, #28
 8009a30:	4925      	ldr	r1, [pc, #148]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a32:	4313      	orrs	r3, r2
 8009a34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d011      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	019a      	lsls	r2, r3, #6
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	041b      	lsls	r3, r3, #16
 8009a50:	431a      	orrs	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	061b      	lsls	r3, r3, #24
 8009a58:	431a      	orrs	r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	071b      	lsls	r3, r3, #28
 8009a60:	4919      	ldr	r1, [pc, #100]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a62:	4313      	orrs	r3, r2
 8009a64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009a68:	4b17      	ldr	r3, [pc, #92]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a16      	ldr	r2, [pc, #88]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a74:	f7f9 ff7a 	bl	800396c <HAL_GetTick>
 8009a78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a7a:	e008      	b.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009a7c:	f7f9 ff76 	bl	800396c <HAL_GetTick>
 8009a80:	4602      	mov	r2, r0
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	2b64      	cmp	r3, #100	; 0x64
 8009a88:	d901      	bls.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e0d7      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a8e:	4b0e      	ldr	r3, [pc, #56]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0f0      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	f040 80cd 	bne.w	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009aa2:	4b09      	ldr	r3, [pc, #36]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a08      	ldr	r2, [pc, #32]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aae:	f7f9 ff5d 	bl	800396c <HAL_GetTick>
 8009ab2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009ab4:	e00a      	b.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009ab6:	f7f9 ff59 	bl	800396c <HAL_GetTick>
 8009aba:	4602      	mov	r2, r0
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	1ad3      	subs	r3, r2, r3
 8009ac0:	2b64      	cmp	r3, #100	; 0x64
 8009ac2:	d903      	bls.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	e0ba      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009ac8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009acc:	4b5e      	ldr	r3, [pc, #376]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ad8:	d0ed      	beq.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d003      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d009      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d02e      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d12a      	bne.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009b02:	4b51      	ldr	r3, [pc, #324]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b08:	0c1b      	lsrs	r3, r3, #16
 8009b0a:	f003 0303 	and.w	r3, r3, #3
 8009b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009b10:	4b4d      	ldr	r3, [pc, #308]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b16:	0f1b      	lsrs	r3, r3, #28
 8009b18:	f003 0307 	and.w	r3, r3, #7
 8009b1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	695b      	ldr	r3, [r3, #20]
 8009b22:	019a      	lsls	r2, r3, #6
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	041b      	lsls	r3, r3, #16
 8009b28:	431a      	orrs	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	061b      	lsls	r3, r3, #24
 8009b30:	431a      	orrs	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	071b      	lsls	r3, r3, #28
 8009b36:	4944      	ldr	r1, [pc, #272]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009b3e:	4b42      	ldr	r3, [pc, #264]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	021b      	lsls	r3, r3, #8
 8009b50:	493d      	ldr	r1, [pc, #244]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b52:	4313      	orrs	r3, r2
 8009b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d022      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b6c:	d11d      	bne.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009b6e:	4b36      	ldr	r3, [pc, #216]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b74:	0e1b      	lsrs	r3, r3, #24
 8009b76:	f003 030f 	and.w	r3, r3, #15
 8009b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009b7c:	4b32      	ldr	r3, [pc, #200]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b82:	0f1b      	lsrs	r3, r3, #28
 8009b84:	f003 0307 	and.w	r3, r3, #7
 8009b88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	019a      	lsls	r2, r3, #6
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a1b      	ldr	r3, [r3, #32]
 8009b94:	041b      	lsls	r3, r3, #16
 8009b96:	431a      	orrs	r2, r3
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	061b      	lsls	r3, r3, #24
 8009b9c:	431a      	orrs	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	071b      	lsls	r3, r3, #28
 8009ba2:	4929      	ldr	r1, [pc, #164]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 0308 	and.w	r3, r3, #8
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d028      	beq.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009bb6:	4b24      	ldr	r3, [pc, #144]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bbc:	0e1b      	lsrs	r3, r3, #24
 8009bbe:	f003 030f 	and.w	r3, r3, #15
 8009bc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009bc4:	4b20      	ldr	r3, [pc, #128]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bca:	0c1b      	lsrs	r3, r3, #16
 8009bcc:	f003 0303 	and.w	r3, r3, #3
 8009bd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	019a      	lsls	r2, r3, #6
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	041b      	lsls	r3, r3, #16
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	061b      	lsls	r3, r3, #24
 8009be2:	431a      	orrs	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	69db      	ldr	r3, [r3, #28]
 8009be8:	071b      	lsls	r3, r3, #28
 8009bea:	4917      	ldr	r1, [pc, #92]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bec:	4313      	orrs	r3, r2
 8009bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009bf2:	4b15      	ldr	r3, [pc, #84]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c00:	4911      	ldr	r1, [pc, #68]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c02:	4313      	orrs	r3, r2
 8009c04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009c08:	4b0f      	ldr	r3, [pc, #60]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a0e      	ldr	r2, [pc, #56]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c14:	f7f9 feaa 	bl	800396c <HAL_GetTick>
 8009c18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009c1a:	e008      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009c1c:	f7f9 fea6 	bl	800396c <HAL_GetTick>
 8009c20:	4602      	mov	r2, r0
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	2b64      	cmp	r3, #100	; 0x64
 8009c28:	d901      	bls.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e007      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009c2e:	4b06      	ldr	r3, [pc, #24]	; (8009c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c3a:	d1ef      	bne.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3720      	adds	r7, #32
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	40023800 	.word	0x40023800

08009c4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b087      	sub	sp, #28
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009c54:	2300      	movs	r3, #0
 8009c56:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009c60:	2300      	movs	r3, #0
 8009c62:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009c6a:	f040 8086 	bne.w	8009d7a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009c6e:	4b8d      	ldr	r3, [pc, #564]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c74:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009c7c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c84:	d03e      	beq.n	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8009c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c8a:	d073      	beq.n	8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d000      	beq.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009c90:	e074      	b.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009c92:	4b84      	ldr	r3, [pc, #528]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d108      	bne.n	8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009c9e:	4b81      	ldr	r3, [pc, #516]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ca6:	4a80      	ldr	r2, [pc, #512]	; (8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cac:	613b      	str	r3, [r7, #16]
 8009cae:	e007      	b.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009cb0:	4b7c      	ldr	r3, [pc, #496]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cb8:	4a7c      	ldr	r2, [pc, #496]	; (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cbe:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009cc0:	4b78      	ldr	r3, [pc, #480]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cc6:	0e1b      	lsrs	r3, r3, #24
 8009cc8:	f003 030f 	and.w	r3, r3, #15
 8009ccc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009cce:	4b75      	ldr	r3, [pc, #468]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cd4:	099b      	lsrs	r3, r3, #6
 8009cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cda:	693a      	ldr	r2, [r7, #16]
 8009cdc:	fb02 f203 	mul.w	r2, r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009ce8:	4b6e      	ldr	r3, [pc, #440]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cee:	0a1b      	lsrs	r3, r3, #8
 8009cf0:	f003 031f 	and.w	r3, r3, #31
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d00:	617b      	str	r3, [r7, #20]
        break;
 8009d02:	e03b      	b.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009d04:	4b67      	ldr	r3, [pc, #412]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d108      	bne.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009d10:	4b64      	ldr	r3, [pc, #400]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d18:	4a63      	ldr	r2, [pc, #396]	; (8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d1e:	613b      	str	r3, [r7, #16]
 8009d20:	e007      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009d22:	4b60      	ldr	r3, [pc, #384]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d2a:	4a60      	ldr	r2, [pc, #384]	; (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d30:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009d32:	4b5c      	ldr	r3, [pc, #368]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d38:	0e1b      	lsrs	r3, r3, #24
 8009d3a:	f003 030f 	and.w	r3, r3, #15
 8009d3e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009d40:	4b58      	ldr	r3, [pc, #352]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d46:	099b      	lsrs	r3, r3, #6
 8009d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d4c:	693a      	ldr	r2, [r7, #16]
 8009d4e:	fb02 f203 	mul.w	r2, r2, r3
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d58:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009d5a:	4b52      	ldr	r3, [pc, #328]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d60:	f003 031f 	and.w	r3, r3, #31
 8009d64:	3301      	adds	r3, #1
 8009d66:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d70:	617b      	str	r3, [r7, #20]
        break;
 8009d72:	e003      	b.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d74:	4b4e      	ldr	r3, [pc, #312]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8009d76:	617b      	str	r3, [r7, #20]
        break;
 8009d78:	e000      	b.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8009d7a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d82:	f040 8086 	bne.w	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009d86:	4b47      	ldr	r3, [pc, #284]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d8c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009d94:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d9c:	d03e      	beq.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009d9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009da2:	d073      	beq.n	8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d000      	beq.n	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009da8:	e074      	b.n	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009daa:	4b3e      	ldr	r3, [pc, #248]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d108      	bne.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009db6:	4b3b      	ldr	r3, [pc, #236]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009dbe:	4a3a      	ldr	r2, [pc, #232]	; (8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dc4:	613b      	str	r3, [r7, #16]
 8009dc6:	e007      	b.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009dc8:	4b36      	ldr	r3, [pc, #216]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009dd0:	4a36      	ldr	r2, [pc, #216]	; (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009dd8:	4b32      	ldr	r3, [pc, #200]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dde:	0e1b      	lsrs	r3, r3, #24
 8009de0:	f003 030f 	and.w	r3, r3, #15
 8009de4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009de6:	4b2f      	ldr	r3, [pc, #188]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dec:	099b      	lsrs	r3, r3, #6
 8009dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	fb02 f203 	mul.w	r2, r2, r3
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dfe:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009e00:	4b28      	ldr	r3, [pc, #160]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e06:	0a1b      	lsrs	r3, r3, #8
 8009e08:	f003 031f 	and.w	r3, r3, #31
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009e10:	697a      	ldr	r2, [r7, #20]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e18:	617b      	str	r3, [r7, #20]
        break;
 8009e1a:	e03b      	b.n	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009e1c:	4b21      	ldr	r3, [pc, #132]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d108      	bne.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009e28:	4b1e      	ldr	r3, [pc, #120]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e30:	4a1d      	ldr	r2, [pc, #116]	; (8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e36:	613b      	str	r3, [r7, #16]
 8009e38:	e007      	b.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009e3a:	4b1a      	ldr	r3, [pc, #104]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e42:	4a1a      	ldr	r2, [pc, #104]	; (8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e48:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009e4a:	4b16      	ldr	r3, [pc, #88]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e50:	0e1b      	lsrs	r3, r3, #24
 8009e52:	f003 030f 	and.w	r3, r3, #15
 8009e56:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009e58:	4b12      	ldr	r3, [pc, #72]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e5e:	099b      	lsrs	r3, r3, #6
 8009e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e64:	693a      	ldr	r2, [r7, #16]
 8009e66:	fb02 f203 	mul.w	r2, r2, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e70:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009e72:	4b0c      	ldr	r3, [pc, #48]	; (8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e78:	f003 031f 	and.w	r3, r3, #31
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e88:	617b      	str	r3, [r7, #20]
        break;
 8009e8a:	e003      	b.n	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e8c:	4b08      	ldr	r3, [pc, #32]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8009e8e:	617b      	str	r3, [r7, #20]
        break;
 8009e90:	e000      	b.n	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8009e92:	bf00      	nop

  return frequency;
 8009e94:	697b      	ldr	r3, [r7, #20]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	371c      	adds	r7, #28
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	40023800 	.word	0x40023800
 8009ea8:	00f42400 	.word	0x00f42400
 8009eac:	017d7840 	.word	0x017d7840
 8009eb0:	00bb8000 	.word	0x00bb8000

08009eb4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e081      	b.n	8009fca <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	7f5b      	ldrb	r3, [r3, #29]
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d105      	bne.n	8009edc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7f8 f8ce 	bl	8002078 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2202      	movs	r2, #2
 8009ee0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	22ca      	movs	r2, #202	; 0xca
 8009ee8:	625a      	str	r2, [r3, #36]	; 0x24
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2253      	movs	r2, #83	; 0x53
 8009ef0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fb16 	bl	800a524 <RTC_EnterInitMode>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d008      	beq.n	8009f10 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	22ff      	movs	r2, #255	; 0xff
 8009f04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2204      	movs	r2, #4
 8009f0a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e05c      	b.n	8009fca <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	6899      	ldr	r1, [r3, #8]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	4b2e      	ldr	r3, [pc, #184]	; (8009fd4 <HAL_RTC_Init+0x120>)
 8009f1c:	400b      	ands	r3, r1
 8009f1e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6899      	ldr	r1, [r3, #8]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	685a      	ldr	r2, [r3, #4]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	431a      	orrs	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	695b      	ldr	r3, [r3, #20]
 8009f34:	431a      	orrs	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	430a      	orrs	r2, r1
 8009f3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	68d2      	ldr	r2, [r2, #12]
 8009f46:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6919      	ldr	r1, [r3, #16]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	041a      	lsls	r2, r3, #16
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	430a      	orrs	r2, r1
 8009f5a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68da      	ldr	r2, [r3, #12]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f6a:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	f003 0320 	and.w	r3, r3, #32
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10e      	bne.n	8009f98 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 faaa 	bl	800a4d4 <HAL_RTC_WaitForSynchro>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d008      	beq.n	8009f98 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	22ff      	movs	r2, #255	; 0xff
 8009f8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2204      	movs	r2, #4
 8009f92:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e018      	b.n	8009fca <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f022 0208 	bic.w	r2, r2, #8
 8009fa6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	699a      	ldr	r2, [r3, #24]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	430a      	orrs	r2, r1
 8009fb8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	22ff      	movs	r2, #255	; 0xff
 8009fc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
  }
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	ff8fffbf 	.word	0xff8fffbf

08009fd8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009fd8:	b590      	push	{r4, r7, lr}
 8009fda:	b087      	sub	sp, #28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	7f1b      	ldrb	r3, [r3, #28]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d101      	bne.n	8009ff4 <HAL_RTC_SetTime+0x1c>
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	e0a8      	b.n	800a146 <HAL_RTC_SetTime+0x16e>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2202      	movs	r2, #2
 8009ffe:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d126      	bne.n	800a054 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a010:	2b00      	cmp	r3, #0
 800a012:	d102      	bne.n	800a01a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2200      	movs	r2, #0
 800a018:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 faac 	bl	800a57c <RTC_ByteToBcd2>
 800a024:	4603      	mov	r3, r0
 800a026:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	785b      	ldrb	r3, [r3, #1]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 faa5 	bl	800a57c <RTC_ByteToBcd2>
 800a032:	4603      	mov	r3, r0
 800a034:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a036:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	789b      	ldrb	r3, [r3, #2]
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 fa9d 	bl	800a57c <RTC_ByteToBcd2>
 800a042:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a044:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	7b1b      	ldrb	r3, [r3, #12]
 800a04c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a04e:	4313      	orrs	r3, r2
 800a050:	617b      	str	r3, [r7, #20]
 800a052:	e018      	b.n	800a086 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d102      	bne.n	800a068 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2200      	movs	r2, #0
 800a066:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	785b      	ldrb	r3, [r3, #1]
 800a072:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a074:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a076:	68ba      	ldr	r2, [r7, #8]
 800a078:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a07a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	7b1b      	ldrb	r3, [r3, #12]
 800a080:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a082:	4313      	orrs	r3, r2
 800a084:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	22ca      	movs	r2, #202	; 0xca
 800a08c:	625a      	str	r2, [r3, #36]	; 0x24
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2253      	movs	r2, #83	; 0x53
 800a094:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f000 fa44 	bl	800a524 <RTC_EnterInitMode>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00b      	beq.n	800a0ba <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	22ff      	movs	r2, #255	; 0xff
 800a0a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2204      	movs	r2, #4
 800a0ae:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e045      	b.n	800a146 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	6979      	ldr	r1, [r7, #20]
 800a0c0:	4b23      	ldr	r3, [pc, #140]	; (800a150 <HAL_RTC_SetTime+0x178>)
 800a0c2:	400b      	ands	r3, r1
 800a0c4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	689a      	ldr	r2, [r3, #8]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a0d4:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	6899      	ldr	r1, [r3, #8]
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	691a      	ldr	r2, [r3, #16]
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	695b      	ldr	r3, [r3, #20]
 800a0e4:	431a      	orrs	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68da      	ldr	r2, [r3, #12]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0fc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	f003 0320 	and.w	r3, r3, #32
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d111      	bne.n	800a130 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 f9e1 	bl	800a4d4 <HAL_RTC_WaitForSynchro>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00b      	beq.n	800a130 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	22ff      	movs	r2, #255	; 0xff
 800a11e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2204      	movs	r2, #4
 800a124:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	e00a      	b.n	800a146 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	22ff      	movs	r2, #255	; 0xff
 800a136:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2201      	movs	r2, #1
 800a13c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a144:	2300      	movs	r3, #0
  }
}
 800a146:	4618      	mov	r0, r3
 800a148:	371c      	adds	r7, #28
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd90      	pop	{r4, r7, pc}
 800a14e:	bf00      	nop
 800a150:	007f7f7f 	.word	0x007f7f7f

0800a154 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a154:	b590      	push	{r4, r7, lr}
 800a156:	b087      	sub	sp, #28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800a160:	2300      	movs	r3, #0
 800a162:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	7f1b      	ldrb	r3, [r3, #28]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d101      	bne.n	800a170 <HAL_RTC_SetDate+0x1c>
 800a16c:	2302      	movs	r3, #2
 800a16e:	e092      	b.n	800a296 <HAL_RTC_SetDate+0x142>
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2201      	movs	r2, #1
 800a174:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2202      	movs	r2, #2
 800a17a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10e      	bne.n	800a1a0 <HAL_RTC_SetDate+0x4c>
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	785b      	ldrb	r3, [r3, #1]
 800a186:	f003 0310 	and.w	r3, r3, #16
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d008      	beq.n	800a1a0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	785b      	ldrb	r3, [r3, #1]
 800a192:	f023 0310 	bic.w	r3, r3, #16
 800a196:	b2db      	uxtb	r3, r3
 800a198:	330a      	adds	r3, #10
 800a19a:	b2da      	uxtb	r2, r3
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d11c      	bne.n	800a1e0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	78db      	ldrb	r3, [r3, #3]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f000 f9e6 	bl	800a57c <RTC_ByteToBcd2>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	785b      	ldrb	r3, [r3, #1]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f000 f9df 	bl	800a57c <RTC_ByteToBcd2>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a1c2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	789b      	ldrb	r3, [r3, #2]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f000 f9d7 	bl	800a57c <RTC_ByteToBcd2>
 800a1ce:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a1d0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	617b      	str	r3, [r7, #20]
 800a1de:	e00e      	b.n	800a1fe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	78db      	ldrb	r3, [r3, #3]
 800a1e4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	785b      	ldrb	r3, [r3, #1]
 800a1ea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a1ec:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a1ee:	68ba      	ldr	r2, [r7, #8]
 800a1f0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800a1f2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	22ca      	movs	r2, #202	; 0xca
 800a204:	625a      	str	r2, [r3, #36]	; 0x24
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2253      	movs	r2, #83	; 0x53
 800a20c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f000 f988 	bl	800a524 <RTC_EnterInitMode>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00b      	beq.n	800a232 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	22ff      	movs	r2, #255	; 0xff
 800a220:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2204      	movs	r2, #4
 800a226:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e031      	b.n	800a296 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	6979      	ldr	r1, [r7, #20]
 800a238:	4b19      	ldr	r3, [pc, #100]	; (800a2a0 <HAL_RTC_SetDate+0x14c>)
 800a23a:	400b      	ands	r3, r1
 800a23c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68da      	ldr	r2, [r3, #12]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a24c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	f003 0320 	and.w	r3, r3, #32
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d111      	bne.n	800a280 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f000 f939 	bl	800a4d4 <HAL_RTC_WaitForSynchro>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00b      	beq.n	800a280 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	22ff      	movs	r2, #255	; 0xff
 800a26e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2204      	movs	r2, #4
 800a274:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2200      	movs	r2, #0
 800a27a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e00a      	b.n	800a296 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	22ff      	movs	r2, #255	; 0xff
 800a286:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2201      	movs	r2, #1
 800a28c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a294:	2300      	movs	r3, #0
  }
}
 800a296:	4618      	mov	r0, r3
 800a298:	371c      	adds	r7, #28
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd90      	pop	{r4, r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	00ffff3f 	.word	0x00ffff3f

0800a2a4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a2a4:	b590      	push	{r4, r7, lr}
 800a2a6:	b089      	sub	sp, #36	; 0x24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	61fb      	str	r3, [r7, #28]
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	7f1b      	ldrb	r3, [r3, #28]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d101      	bne.n	800a2c8 <HAL_RTC_SetAlarm+0x24>
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	e101      	b.n	800a4cc <HAL_RTC_SetAlarm+0x228>
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2202      	movs	r2, #2
 800a2d2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d137      	bne.n	800a34a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d102      	bne.n	800a2ee <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f000 f942 	bl	800a57c <RTC_ByteToBcd2>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	785b      	ldrb	r3, [r3, #1]
 800a300:	4618      	mov	r0, r3
 800a302:	f000 f93b 	bl	800a57c <RTC_ByteToBcd2>
 800a306:	4603      	mov	r3, r0
 800a308:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a30a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	789b      	ldrb	r3, [r3, #2]
 800a310:	4618      	mov	r0, r3
 800a312:	f000 f933 	bl	800a57c <RTC_ByteToBcd2>
 800a316:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a318:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	7b1b      	ldrb	r3, [r3, #12]
 800a320:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a322:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a32c:	4618      	mov	r0, r3
 800a32e:	f000 f925 	bl	800a57c <RTC_ByteToBcd2>
 800a332:	4603      	mov	r3, r0
 800a334:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a336:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a33e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a344:	4313      	orrs	r3, r2
 800a346:	61fb      	str	r3, [r7, #28]
 800a348:	e023      	b.n	800a392 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a354:	2b00      	cmp	r3, #0
 800a356:	d102      	bne.n	800a35e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	2200      	movs	r2, #0
 800a35c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	785b      	ldrb	r3, [r3, #1]
 800a368:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a36a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a370:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	7b1b      	ldrb	r3, [r3, #12]
 800a376:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a378:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a380:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a382:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a388:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a38e:	4313      	orrs	r3, r2
 800a390:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	22ca      	movs	r2, #202	; 0xca
 800a3a4:	625a      	str	r2, [r3, #36]	; 0x24
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2253      	movs	r2, #83	; 0x53
 800a3ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3b6:	d13f      	bne.n	800a438 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	689a      	ldr	r2, [r3, #8]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a3c6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	689a      	ldr	r2, [r3, #8]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a3d6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a3d8:	f7f9 fac8 	bl	800396c <HAL_GetTick>
 800a3dc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a3de:	e013      	b.n	800a408 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a3e0:	f7f9 fac4 	bl	800396c <HAL_GetTick>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	1ad3      	subs	r3, r2, r3
 800a3ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3ee:	d90b      	bls.n	800a408 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	22ff      	movs	r2, #255	; 0xff
 800a3f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2203      	movs	r2, #3
 800a3fc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a404:	2303      	movs	r3, #3
 800a406:	e061      	b.n	800a4cc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	f003 0301 	and.w	r3, r3, #1
 800a412:	2b00      	cmp	r3, #0
 800a414:	d0e4      	beq.n	800a3e0 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	69fa      	ldr	r2, [r7, #28]
 800a41c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	689a      	ldr	r2, [r3, #8]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a434:	609a      	str	r2, [r3, #8]
 800a436:	e03e      	b.n	800a4b6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	689a      	ldr	r2, [r3, #8]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a446:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689a      	ldr	r2, [r3, #8]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a456:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a458:	f7f9 fa88 	bl	800396c <HAL_GetTick>
 800a45c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a45e:	e013      	b.n	800a488 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a460:	f7f9 fa84 	bl	800396c <HAL_GetTick>
 800a464:	4602      	mov	r2, r0
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a46e:	d90b      	bls.n	800a488 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	22ff      	movs	r2, #255	; 0xff
 800a476:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2203      	movs	r2, #3
 800a47c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a484:	2303      	movs	r3, #3
 800a486:	e021      	b.n	800a4cc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	f003 0302 	and.w	r3, r3, #2
 800a492:	2b00      	cmp	r3, #0
 800a494:	d0e4      	beq.n	800a460 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	69fa      	ldr	r2, [r7, #28]
 800a49c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	697a      	ldr	r2, [r7, #20]
 800a4a4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689a      	ldr	r2, [r3, #8]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	22ff      	movs	r2, #255	; 0xff
 800a4bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3724      	adds	r7, #36	; 0x24
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd90      	pop	{r4, r7, pc}

0800a4d4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68da      	ldr	r2, [r3, #12]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a4ee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a4f0:	f7f9 fa3c 	bl	800396c <HAL_GetTick>
 800a4f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a4f6:	e009      	b.n	800a50c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a4f8:	f7f9 fa38 	bl	800396c <HAL_GetTick>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a506:	d901      	bls.n	800a50c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e007      	b.n	800a51c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	f003 0320 	and.w	r3, r3, #32
 800a516:	2b00      	cmp	r3, #0
 800a518:	d0ee      	beq.n	800a4f8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a52c:	2300      	movs	r3, #0
 800a52e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d119      	bne.n	800a572 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a546:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a548:	f7f9 fa10 	bl	800396c <HAL_GetTick>
 800a54c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a54e:	e009      	b.n	800a564 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a550:	f7f9 fa0c 	bl	800396c <HAL_GetTick>
 800a554:	4602      	mov	r2, r0
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a55e:	d901      	bls.n	800a564 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a560:	2303      	movs	r3, #3
 800a562:	e007      	b.n	800a574 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d0ee      	beq.n	800a550 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	4603      	mov	r3, r0
 800a584:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a586:	2300      	movs	r3, #0
 800a588:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a58a:	e005      	b.n	800a598 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	3301      	adds	r3, #1
 800a590:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a592:	79fb      	ldrb	r3, [r7, #7]
 800a594:	3b0a      	subs	r3, #10
 800a596:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a598:	79fb      	ldrb	r3, [r7, #7]
 800a59a:	2b09      	cmp	r3, #9
 800a59c:	d8f6      	bhi.n	800a58c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	011b      	lsls	r3, r3, #4
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	79fb      	ldrb	r3, [r7, #7]
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	b2db      	uxtb	r3, r3
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3714      	adds	r7, #20
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b087      	sub	sp, #28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	7f1b      	ldrb	r3, [r3, #28]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d101      	bne.n	800a5d4 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	e03e      	b.n	800a652 <HAL_RTCEx_SetTimeStamp+0x9a>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2202      	movs	r2, #2
 800a5de:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	689a      	ldr	r2, [r3, #8]
 800a5e6:	4b1e      	ldr	r3, [pc, #120]	; (800a660 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	22ca      	movs	r2, #202	; 0xca
 800a5fa:	625a      	str	r2, [r3, #36]	; 0x24
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2253      	movs	r2, #83	; 0x53
 800a602:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f022 0206 	bic.w	r2, r2, #6
 800a612:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	430a      	orrs	r2, r1
 800a622:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	697a      	ldr	r2, [r7, #20]
 800a62a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	689a      	ldr	r2, [r3, #8]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a63a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	22ff      	movs	r2, #255	; 0xff
 800a642:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2201      	movs	r2, #1
 800a648:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2200      	movs	r2, #0
 800a64e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	371c      	adds	r7, #28
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	fffff7f7 	.word	0xfffff7f7

0800a664 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b088      	sub	sp, #32
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800a66c:	2300      	movs	r3, #0
 800a66e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800a670:	2300      	movs	r3, #0
 800a672:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800a674:	2300      	movs	r3, #0
 800a676:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e152      	b.n	800a928 <HAL_SAI_Init+0x2c4>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d106      	bne.n	800a69c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7f8 f836 	bl	8002708 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2202      	movs	r2, #2
 800a6a0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 f957 	bl	800a958 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d007      	beq.n	800a6c2 <HAL_SAI_Init+0x5e>
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d302      	bcc.n	800a6bc <HAL_SAI_Init+0x58>
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d006      	beq.n	800a6c8 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800a6ba:	e008      	b.n	800a6ce <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	61fb      	str	r3, [r7, #28]
      break;
 800a6c0:	e005      	b.n	800a6ce <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a6c2:	2310      	movs	r3, #16
 800a6c4:	61fb      	str	r3, [r7, #28]
      break;
 800a6c6:	e002      	b.n	800a6ce <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a6c8:	2320      	movs	r3, #32
 800a6ca:	61fb      	str	r3, [r7, #28]
      break;
 800a6cc:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	2b03      	cmp	r3, #3
 800a6d4:	d81d      	bhi.n	800a712 <HAL_SAI_Init+0xae>
 800a6d6:	a201      	add	r2, pc, #4	; (adr r2, 800a6dc <HAL_SAI_Init+0x78>)
 800a6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6dc:	0800a6ed 	.word	0x0800a6ed
 800a6e0:	0800a6f3 	.word	0x0800a6f3
 800a6e4:	0800a6fb 	.word	0x0800a6fb
 800a6e8:	0800a703 	.word	0x0800a703
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	617b      	str	r3, [r7, #20]
    }
    break;
 800a6f0:	e010      	b.n	800a714 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a6f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6f6:	617b      	str	r3, [r7, #20]
    }
    break;
 800a6f8:	e00c      	b.n	800a714 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a6fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6fe:	617b      	str	r3, [r7, #20]
    }
    break;
 800a700:	e008      	b.n	800a714 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a702:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a706:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	f043 0301 	orr.w	r3, r3, #1
 800a70e:	61fb      	str	r3, [r7, #28]
    }
    break;
 800a710:	e000      	b.n	800a714 <HAL_SAI_Init+0xb0>
    default:
      break;
 800a712:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a85      	ldr	r2, [pc, #532]	; (800a930 <HAL_SAI_Init+0x2cc>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d004      	beq.n	800a728 <HAL_SAI_Init+0xc4>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a84      	ldr	r2, [pc, #528]	; (800a934 <HAL_SAI_Init+0x2d0>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d103      	bne.n	800a730 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800a728:	4a83      	ldr	r2, [pc, #524]	; (800a938 <HAL_SAI_Init+0x2d4>)
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	6013      	str	r3, [r2, #0]
 800a72e:	e002      	b.n	800a736 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a730:	4a82      	ldr	r2, [pc, #520]	; (800a93c <HAL_SAI_Init+0x2d8>)
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	69db      	ldr	r3, [r3, #28]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d04c      	beq.n	800a7d8 <HAL_SAI_Init+0x174>
  {
    uint32_t freq = 0;
 800a73e:	2300      	movs	r3, #0
 800a740:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a7a      	ldr	r2, [pc, #488]	; (800a930 <HAL_SAI_Init+0x2cc>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d004      	beq.n	800a756 <HAL_SAI_Init+0xf2>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a78      	ldr	r2, [pc, #480]	; (800a934 <HAL_SAI_Init+0x2d0>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d104      	bne.n	800a760 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a756:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a75a:	f7ff fa77 	bl	8009c4c <HAL_RCCEx_GetPeriphCLKFreq>
 800a75e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a76      	ldr	r2, [pc, #472]	; (800a940 <HAL_SAI_Init+0x2dc>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d004      	beq.n	800a774 <HAL_SAI_Init+0x110>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a75      	ldr	r2, [pc, #468]	; (800a944 <HAL_SAI_Init+0x2e0>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d104      	bne.n	800a77e <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a774:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a778:	f7ff fa68 	bl	8009c4c <HAL_RCCEx_GetPeriphCLKFreq>
 800a77c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	4613      	mov	r3, r2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4413      	add	r3, r2
 800a786:	005b      	lsls	r3, r3, #1
 800a788:	461a      	mov	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	69db      	ldr	r3, [r3, #28]
 800a78e:	025b      	lsls	r3, r3, #9
 800a790:	fbb2 f3f3 	udiv	r3, r2, r3
 800a794:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	4a6b      	ldr	r2, [pc, #428]	; (800a948 <HAL_SAI_Init+0x2e4>)
 800a79a:	fba2 2303 	umull	r2, r3, r2, r3
 800a79e:	08da      	lsrs	r2, r3, #3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800a7a4:	68f9      	ldr	r1, [r7, #12]
 800a7a6:	4b68      	ldr	r3, [pc, #416]	; (800a948 <HAL_SAI_Init+0x2e4>)
 800a7a8:	fba3 2301 	umull	r2, r3, r3, r1
 800a7ac:	08da      	lsrs	r2, r3, #3
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	005b      	lsls	r3, r3, #1
 800a7b6:	1aca      	subs	r2, r1, r3
 800a7b8:	2a08      	cmp	r2, #8
 800a7ba:	d904      	bls.n	800a7c6 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv += 1;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6a1b      	ldr	r3, [r3, #32]
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ca:	2b04      	cmp	r3, #4
 800a7cc:	d104      	bne.n	800a7d8 <HAL_SAI_Init+0x174>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a1b      	ldr	r3, [r3, #32]
 800a7d2:	085a      	lsrs	r2, r3, #1
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d003      	beq.n	800a7e8 <HAL_SAI_Init+0x184>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d109      	bne.n	800a7fc <HAL_SAI_Init+0x198>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d101      	bne.n	800a7f4 <HAL_SAI_Init+0x190>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	e001      	b.n	800a7f8 <HAL_SAI_Init+0x194>
 800a7f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7f8:	61bb      	str	r3, [r7, #24]
 800a7fa:	e008      	b.n	800a80e <HAL_SAI_Init+0x1aa>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a800:	2b01      	cmp	r3, #1
 800a802:	d102      	bne.n	800a80a <HAL_SAI_Init+0x1a6>
 800a804:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a808:	e000      	b.n	800a80c <HAL_SAI_Init+0x1a8>
 800a80a:	2300      	movs	r3, #0
 800a80c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	6819      	ldr	r1, [r3, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	4b4c      	ldr	r3, [pc, #304]	; (800a94c <HAL_SAI_Init+0x2e8>)
 800a81a:	400b      	ands	r3, r1
 800a81c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	6819      	ldr	r1, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685a      	ldr	r2, [r3, #4]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a832:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a838:	431a      	orrs	r2, r3
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800a846:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	691b      	ldr	r3, [r3, #16]
 800a84c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a852:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6a1b      	ldr	r3, [r3, #32]
 800a858:	051b      	lsls	r3, r3, #20
 800a85a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	430a      	orrs	r2, r1
 800a862:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6859      	ldr	r1, [r3, #4]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	4b38      	ldr	r3, [pc, #224]	; (800a950 <HAL_SAI_Init+0x2ec>)
 800a870:	400b      	ands	r3, r1
 800a872:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	6859      	ldr	r1, [r3, #4]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	699a      	ldr	r2, [r3, #24]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a882:	431a      	orrs	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a888:	431a      	orrs	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	430a      	orrs	r2, r1
 800a890:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	6899      	ldr	r1, [r3, #8]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	4b2d      	ldr	r3, [pc, #180]	; (800a954 <HAL_SAI_Init+0x2f0>)
 800a89e:	400b      	ands	r3, r1
 800a8a0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	6899      	ldr	r1, [r3, #8]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ac:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a8b2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800a8b8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800a8be:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a8c8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	430a      	orrs	r2, r1
 800a8d0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	68d9      	ldr	r1, [r3, #12]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a8e0:	400b      	ands	r3, r1
 800a8e2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68d9      	ldr	r1, [r3, #12]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8f2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8f8:	041b      	lsls	r3, r3, #16
 800a8fa:	431a      	orrs	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a900:	3b01      	subs	r3, #1
 800a902:	021b      	lsls	r3, r3, #8
 800a904:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	430a      	orrs	r2, r1
 800a90c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3720      	adds	r7, #32
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	40015804 	.word	0x40015804
 800a934:	40015824 	.word	0x40015824
 800a938:	40015800 	.word	0x40015800
 800a93c:	40015c00 	.word	0x40015c00
 800a940:	40015c04 	.word	0x40015c04
 800a944:	40015c24 	.word	0x40015c24
 800a948:	cccccccd 	.word	0xcccccccd
 800a94c:	ff05c010 	.word	0xff05c010
 800a950:	ffff1ff0 	.word	0xffff1ff0
 800a954:	fff88000 	.word	0xfff88000

0800a958 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800a960:	4b17      	ldr	r3, [pc, #92]	; (800a9c0 <SAI_Disable+0x68>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a17      	ldr	r2, [pc, #92]	; (800a9c4 <SAI_Disable+0x6c>)
 800a966:	fba2 2303 	umull	r2, r3, r2, r3
 800a96a:	0b1b      	lsrs	r3, r3, #12
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a970:	2300      	movs	r3, #0
 800a972:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a982:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	1e5a      	subs	r2, r3, #1
 800a988:	60fa      	str	r2, [r7, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10a      	bne.n	800a9a4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a994:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	72fb      	strb	r3, [r7, #11]
      break;
 800a9a2:	e006      	b.n	800a9b2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1e8      	bne.n	800a984 <SAI_Disable+0x2c>

  return status;
 800a9b2:	7afb      	ldrb	r3, [r7, #11]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr
 800a9c0:	20000000 	.word	0x20000000
 800a9c4:	95cbec1b 	.word	0x95cbec1b

0800a9c8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d101      	bne.n	800a9dc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e025      	b.n	800aa28 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d106      	bne.n	800a9f6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f7f7 fe7f 	bl	80026f4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	3304      	adds	r3, #4
 800aa06:	4619      	mov	r1, r3
 800aa08:	4610      	mov	r0, r2
 800aa0a:	f001 fe5d 	bl	800c6c8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6818      	ldr	r0, [r3, #0]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	461a      	mov	r2, r3
 800aa18:	6839      	ldr	r1, [r7, #0]
 800aa1a:	f001 fec7 	bl	800c7ac <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2201      	movs	r2, #1
 800aa22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d101      	bne.n	800aa4c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800aa48:	2302      	movs	r3, #2
 800aa4a:	e018      	b.n	800aa7e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2202      	movs	r2, #2
 800aa50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	68b9      	ldr	r1, [r7, #8]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f001 ff25 	bl	800c8ac <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d104      	bne.n	800aa74 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2205      	movs	r2, #5
 800aa6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800aa72:	e003      	b.n	800aa7c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b082      	sub	sp, #8
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d101      	bne.n	800aaa0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800aa9c:	2302      	movs	r3, #2
 800aa9e:	e00e      	b.n	800aabe <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	6839      	ldr	r1, [r7, #0]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f001 ff20 	bl	800c8f4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
	...

0800aac8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d101      	bne.n	800aada <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e04c      	b.n	800ab74 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d106      	bne.n	800aaf4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f7f7 fadc 	bl	80020ac <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f022 0203 	bic.w	r2, r2, #3
 800ab0a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	4b19      	ldr	r3, [pc, #100]	; (800ab7c <HAL_SPDIFRX_Init+0xb4>)
 800ab18:	4013      	ands	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800ab24:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800ab2a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800ab30:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800ab36:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800ab3c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800ab42:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800ab48:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800ab4e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800ab54:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	fff88407 	.word	0xfff88407

0800ab80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d101      	bne.n	800ab92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e09d      	b.n	800acce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d108      	bne.n	800abac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aba2:	d009      	beq.n	800abb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	61da      	str	r2, [r3, #28]
 800abaa:	e005      	b.n	800abb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d106      	bne.n	800abd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7f7 faac 	bl	8002130 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2202      	movs	r2, #2
 800abdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800abf8:	d902      	bls.n	800ac00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800abfa:	2300      	movs	r3, #0
 800abfc:	60fb      	str	r3, [r7, #12]
 800abfe:	e002      	b.n	800ac06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ac00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ac0e:	d007      	beq.n	800ac20 <HAL_SPI_Init+0xa0>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ac18:	d002      	beq.n	800ac20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ac30:	431a      	orrs	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	f003 0302 	and.w	r3, r3, #2
 800ac3a:	431a      	orrs	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	695b      	ldr	r3, [r3, #20]
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	431a      	orrs	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac4e:	431a      	orrs	r2, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	69db      	ldr	r3, [r3, #28]
 800ac54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac58:	431a      	orrs	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac62:	ea42 0103 	orr.w	r1, r2, r3
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	430a      	orrs	r2, r1
 800ac74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	0c1b      	lsrs	r3, r3, #16
 800ac7c:	f003 0204 	and.w	r2, r3, #4
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac84:	f003 0310 	and.w	r3, r3, #16
 800ac88:	431a      	orrs	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac8e:	f003 0308 	and.w	r3, r3, #8
 800ac92:	431a      	orrs	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ac9c:	ea42 0103 	orr.w	r1, r2, r3
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	430a      	orrs	r2, r1
 800acac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	69da      	ldr	r2, [r3, #28]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800acbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b082      	sub	sp, #8
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d101      	bne.n	800ace8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	e049      	b.n	800ad7c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d106      	bne.n	800ad02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7f7 fa79 	bl	80021f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2202      	movs	r2, #2
 800ad06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	3304      	adds	r3, #4
 800ad12:	4619      	mov	r1, r3
 800ad14:	4610      	mov	r0, r2
 800ad16:	f000 fc15 	bl	800b544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2201      	movs	r2, #1
 800ad26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2201      	movs	r2, #1
 800ad56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2201      	movs	r2, #1
 800ad66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2201      	movs	r2, #1
 800ad76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad7a:	2300      	movs	r3, #0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d001      	beq.n	800ad9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e054      	b.n	800ae46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2202      	movs	r2, #2
 800ada0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	68da      	ldr	r2, [r3, #12]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f042 0201 	orr.w	r2, r2, #1
 800adb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a26      	ldr	r2, [pc, #152]	; (800ae54 <HAL_TIM_Base_Start_IT+0xd0>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d022      	beq.n	800ae04 <HAL_TIM_Base_Start_IT+0x80>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adc6:	d01d      	beq.n	800ae04 <HAL_TIM_Base_Start_IT+0x80>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a22      	ldr	r2, [pc, #136]	; (800ae58 <HAL_TIM_Base_Start_IT+0xd4>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d018      	beq.n	800ae04 <HAL_TIM_Base_Start_IT+0x80>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a21      	ldr	r2, [pc, #132]	; (800ae5c <HAL_TIM_Base_Start_IT+0xd8>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d013      	beq.n	800ae04 <HAL_TIM_Base_Start_IT+0x80>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a1f      	ldr	r2, [pc, #124]	; (800ae60 <HAL_TIM_Base_Start_IT+0xdc>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d00e      	beq.n	800ae04 <HAL_TIM_Base_Start_IT+0x80>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a1e      	ldr	r2, [pc, #120]	; (800ae64 <HAL_TIM_Base_Start_IT+0xe0>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d009      	beq.n	800ae04 <HAL_TIM_Base_Start_IT+0x80>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a1c      	ldr	r2, [pc, #112]	; (800ae68 <HAL_TIM_Base_Start_IT+0xe4>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d004      	beq.n	800ae04 <HAL_TIM_Base_Start_IT+0x80>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a1b      	ldr	r2, [pc, #108]	; (800ae6c <HAL_TIM_Base_Start_IT+0xe8>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d115      	bne.n	800ae30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	689a      	ldr	r2, [r3, #8]
 800ae0a:	4b19      	ldr	r3, [pc, #100]	; (800ae70 <HAL_TIM_Base_Start_IT+0xec>)
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2b06      	cmp	r3, #6
 800ae14:	d015      	beq.n	800ae42 <HAL_TIM_Base_Start_IT+0xbe>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae1c:	d011      	beq.n	800ae42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f042 0201 	orr.w	r2, r2, #1
 800ae2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae2e:	e008      	b.n	800ae42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f042 0201 	orr.w	r2, r2, #1
 800ae3e:	601a      	str	r2, [r3, #0]
 800ae40:	e000      	b.n	800ae44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae44:	2300      	movs	r3, #0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	40010000 	.word	0x40010000
 800ae58:	40000400 	.word	0x40000400
 800ae5c:	40000800 	.word	0x40000800
 800ae60:	40000c00 	.word	0x40000c00
 800ae64:	40010400 	.word	0x40010400
 800ae68:	40014000 	.word	0x40014000
 800ae6c:	40001800 	.word	0x40001800
 800ae70:	00010007 	.word	0x00010007

0800ae74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d101      	bne.n	800ae86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	e049      	b.n	800af1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d106      	bne.n	800aea0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f7f7 fa18 	bl	80022d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2202      	movs	r2, #2
 800aea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3304      	adds	r3, #4
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	4610      	mov	r0, r2
 800aeb4:	f000 fb46 	bl	800b544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2201      	movs	r2, #1
 800aefc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b082      	sub	sp, #8
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	f003 0302 	and.w	r3, r3, #2
 800af34:	2b02      	cmp	r3, #2
 800af36:	d122      	bne.n	800af7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	f003 0302 	and.w	r3, r3, #2
 800af42:	2b02      	cmp	r3, #2
 800af44:	d11b      	bne.n	800af7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f06f 0202 	mvn.w	r2, #2
 800af4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	699b      	ldr	r3, [r3, #24]
 800af5c:	f003 0303 	and.w	r3, r3, #3
 800af60:	2b00      	cmp	r3, #0
 800af62:	d003      	beq.n	800af6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 facf 	bl	800b508 <HAL_TIM_IC_CaptureCallback>
 800af6a:	e005      	b.n	800af78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 fac1 	bl	800b4f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fad2 	bl	800b51c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	f003 0304 	and.w	r3, r3, #4
 800af88:	2b04      	cmp	r3, #4
 800af8a:	d122      	bne.n	800afd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	f003 0304 	and.w	r3, r3, #4
 800af96:	2b04      	cmp	r3, #4
 800af98:	d11b      	bne.n	800afd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f06f 0204 	mvn.w	r2, #4
 800afa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2202      	movs	r2, #2
 800afa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	699b      	ldr	r3, [r3, #24]
 800afb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d003      	beq.n	800afc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 faa5 	bl	800b508 <HAL_TIM_IC_CaptureCallback>
 800afbe:	e005      	b.n	800afcc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fa97 	bl	800b4f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 faa8 	bl	800b51c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	f003 0308 	and.w	r3, r3, #8
 800afdc:	2b08      	cmp	r3, #8
 800afde:	d122      	bne.n	800b026 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	f003 0308 	and.w	r3, r3, #8
 800afea:	2b08      	cmp	r3, #8
 800afec:	d11b      	bne.n	800b026 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f06f 0208 	mvn.w	r2, #8
 800aff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2204      	movs	r2, #4
 800affc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	69db      	ldr	r3, [r3, #28]
 800b004:	f003 0303 	and.w	r3, r3, #3
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d003      	beq.n	800b014 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 fa7b 	bl	800b508 <HAL_TIM_IC_CaptureCallback>
 800b012:	e005      	b.n	800b020 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 fa6d 	bl	800b4f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 fa7e 	bl	800b51c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	f003 0310 	and.w	r3, r3, #16
 800b030:	2b10      	cmp	r3, #16
 800b032:	d122      	bne.n	800b07a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	f003 0310 	and.w	r3, r3, #16
 800b03e:	2b10      	cmp	r3, #16
 800b040:	d11b      	bne.n	800b07a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f06f 0210 	mvn.w	r2, #16
 800b04a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2208      	movs	r2, #8
 800b050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	69db      	ldr	r3, [r3, #28]
 800b058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d003      	beq.n	800b068 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 fa51 	bl	800b508 <HAL_TIM_IC_CaptureCallback>
 800b066:	e005      	b.n	800b074 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 fa43 	bl	800b4f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fa54 	bl	800b51c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	f003 0301 	and.w	r3, r3, #1
 800b084:	2b01      	cmp	r3, #1
 800b086:	d10e      	bne.n	800b0a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	f003 0301 	and.w	r3, r3, #1
 800b092:	2b01      	cmp	r3, #1
 800b094:	d107      	bne.n	800b0a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f06f 0201 	mvn.w	r2, #1
 800b09e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f7f6 fc7d 	bl	80019a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0b0:	2b80      	cmp	r3, #128	; 0x80
 800b0b2:	d10e      	bne.n	800b0d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0be:	2b80      	cmp	r3, #128	; 0x80
 800b0c0:	d107      	bne.n	800b0d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b0ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fee7 	bl	800bea0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0e0:	d10e      	bne.n	800b100 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ec:	2b80      	cmp	r3, #128	; 0x80
 800b0ee:	d107      	bne.n	800b100 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b0f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 feda 	bl	800beb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b10a:	2b40      	cmp	r3, #64	; 0x40
 800b10c:	d10e      	bne.n	800b12c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b118:	2b40      	cmp	r3, #64	; 0x40
 800b11a:	d107      	bne.n	800b12c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fa02 	bl	800b530 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	f003 0320 	and.w	r3, r3, #32
 800b136:	2b20      	cmp	r3, #32
 800b138:	d10e      	bne.n	800b158 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	f003 0320 	and.w	r3, r3, #32
 800b144:	2b20      	cmp	r3, #32
 800b146:	d107      	bne.n	800b158 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f06f 0220 	mvn.w	r2, #32
 800b150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fe9a 	bl	800be8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b158:	bf00      	nop
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b172:	2b01      	cmp	r3, #1
 800b174:	d101      	bne.n	800b17a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b176:	2302      	movs	r3, #2
 800b178:	e0fd      	b.n	800b376 <HAL_TIM_PWM_ConfigChannel+0x216>
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2201      	movs	r2, #1
 800b17e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2b14      	cmp	r3, #20
 800b186:	f200 80f0 	bhi.w	800b36a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b18a:	a201      	add	r2, pc, #4	; (adr r2, 800b190 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b190:	0800b1e5 	.word	0x0800b1e5
 800b194:	0800b36b 	.word	0x0800b36b
 800b198:	0800b36b 	.word	0x0800b36b
 800b19c:	0800b36b 	.word	0x0800b36b
 800b1a0:	0800b225 	.word	0x0800b225
 800b1a4:	0800b36b 	.word	0x0800b36b
 800b1a8:	0800b36b 	.word	0x0800b36b
 800b1ac:	0800b36b 	.word	0x0800b36b
 800b1b0:	0800b267 	.word	0x0800b267
 800b1b4:	0800b36b 	.word	0x0800b36b
 800b1b8:	0800b36b 	.word	0x0800b36b
 800b1bc:	0800b36b 	.word	0x0800b36b
 800b1c0:	0800b2a7 	.word	0x0800b2a7
 800b1c4:	0800b36b 	.word	0x0800b36b
 800b1c8:	0800b36b 	.word	0x0800b36b
 800b1cc:	0800b36b 	.word	0x0800b36b
 800b1d0:	0800b2e9 	.word	0x0800b2e9
 800b1d4:	0800b36b 	.word	0x0800b36b
 800b1d8:	0800b36b 	.word	0x0800b36b
 800b1dc:	0800b36b 	.word	0x0800b36b
 800b1e0:	0800b329 	.word	0x0800b329
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	68b9      	ldr	r1, [r7, #8]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f000 fa4a 	bl	800b684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	699a      	ldr	r2, [r3, #24]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f042 0208 	orr.w	r2, r2, #8
 800b1fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	699a      	ldr	r2, [r3, #24]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f022 0204 	bic.w	r2, r2, #4
 800b20e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6999      	ldr	r1, [r3, #24]
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	691a      	ldr	r2, [r3, #16]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	430a      	orrs	r2, r1
 800b220:	619a      	str	r2, [r3, #24]
      break;
 800b222:	e0a3      	b.n	800b36c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	68b9      	ldr	r1, [r7, #8]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f000 fa9c 	bl	800b768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	699a      	ldr	r2, [r3, #24]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b23e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	699a      	ldr	r2, [r3, #24]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b24e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	6999      	ldr	r1, [r3, #24]
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	691b      	ldr	r3, [r3, #16]
 800b25a:	021a      	lsls	r2, r3, #8
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	430a      	orrs	r2, r1
 800b262:	619a      	str	r2, [r3, #24]
      break;
 800b264:	e082      	b.n	800b36c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	68b9      	ldr	r1, [r7, #8]
 800b26c:	4618      	mov	r0, r3
 800b26e:	f000 faf3 	bl	800b858 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	69da      	ldr	r2, [r3, #28]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f042 0208 	orr.w	r2, r2, #8
 800b280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	69da      	ldr	r2, [r3, #28]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f022 0204 	bic.w	r2, r2, #4
 800b290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	69d9      	ldr	r1, [r3, #28]
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	691a      	ldr	r2, [r3, #16]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	430a      	orrs	r2, r1
 800b2a2:	61da      	str	r2, [r3, #28]
      break;
 800b2a4:	e062      	b.n	800b36c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	68b9      	ldr	r1, [r7, #8]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f000 fb49 	bl	800b944 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	69da      	ldr	r2, [r3, #28]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	69da      	ldr	r2, [r3, #28]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	69d9      	ldr	r1, [r3, #28]
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	021a      	lsls	r2, r3, #8
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	430a      	orrs	r2, r1
 800b2e4:	61da      	str	r2, [r3, #28]
      break;
 800b2e6:	e041      	b.n	800b36c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68b9      	ldr	r1, [r7, #8]
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 fb80 	bl	800b9f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f042 0208 	orr.w	r2, r2, #8
 800b302:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f022 0204 	bic.w	r2, r2, #4
 800b312:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	691a      	ldr	r2, [r3, #16]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	430a      	orrs	r2, r1
 800b324:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b326:	e021      	b.n	800b36c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	68b9      	ldr	r1, [r7, #8]
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 fbb2 	bl	800ba98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b342:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b352:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	691b      	ldr	r3, [r3, #16]
 800b35e:	021a      	lsls	r2, r3, #8
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	430a      	orrs	r2, r1
 800b366:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b368:	e000      	b.n	800b36c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b36a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop

0800b380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b390:	2b01      	cmp	r3, #1
 800b392:	d101      	bne.n	800b398 <HAL_TIM_ConfigClockSource+0x18>
 800b394:	2302      	movs	r3, #2
 800b396:	e0a6      	b.n	800b4e6 <HAL_TIM_ConfigClockSource+0x166>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	4b4f      	ldr	r3, [pc, #316]	; (800b4f0 <HAL_TIM_ConfigClockSource+0x170>)
 800b3b4:	4013      	ands	r3, r2
 800b3b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2b40      	cmp	r3, #64	; 0x40
 800b3ce:	d067      	beq.n	800b4a0 <HAL_TIM_ConfigClockSource+0x120>
 800b3d0:	2b40      	cmp	r3, #64	; 0x40
 800b3d2:	d80b      	bhi.n	800b3ec <HAL_TIM_ConfigClockSource+0x6c>
 800b3d4:	2b10      	cmp	r3, #16
 800b3d6:	d073      	beq.n	800b4c0 <HAL_TIM_ConfigClockSource+0x140>
 800b3d8:	2b10      	cmp	r3, #16
 800b3da:	d802      	bhi.n	800b3e2 <HAL_TIM_ConfigClockSource+0x62>
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d06f      	beq.n	800b4c0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b3e0:	e078      	b.n	800b4d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b3e2:	2b20      	cmp	r3, #32
 800b3e4:	d06c      	beq.n	800b4c0 <HAL_TIM_ConfigClockSource+0x140>
 800b3e6:	2b30      	cmp	r3, #48	; 0x30
 800b3e8:	d06a      	beq.n	800b4c0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800b3ea:	e073      	b.n	800b4d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b3ec:	2b70      	cmp	r3, #112	; 0x70
 800b3ee:	d00d      	beq.n	800b40c <HAL_TIM_ConfigClockSource+0x8c>
 800b3f0:	2b70      	cmp	r3, #112	; 0x70
 800b3f2:	d804      	bhi.n	800b3fe <HAL_TIM_ConfigClockSource+0x7e>
 800b3f4:	2b50      	cmp	r3, #80	; 0x50
 800b3f6:	d033      	beq.n	800b460 <HAL_TIM_ConfigClockSource+0xe0>
 800b3f8:	2b60      	cmp	r3, #96	; 0x60
 800b3fa:	d041      	beq.n	800b480 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800b3fc:	e06a      	b.n	800b4d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b3fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b402:	d066      	beq.n	800b4d2 <HAL_TIM_ConfigClockSource+0x152>
 800b404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b408:	d017      	beq.n	800b43a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800b40a:	e063      	b.n	800b4d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6818      	ldr	r0, [r3, #0]
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	6899      	ldr	r1, [r3, #8]
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	685a      	ldr	r2, [r3, #4]
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	f000 fc0a 	bl	800bc34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b42e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	609a      	str	r2, [r3, #8]
      break;
 800b438:	e04c      	b.n	800b4d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6818      	ldr	r0, [r3, #0]
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	6899      	ldr	r1, [r3, #8]
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	685a      	ldr	r2, [r3, #4]
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	f000 fbf3 	bl	800bc34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	689a      	ldr	r2, [r3, #8]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b45c:	609a      	str	r2, [r3, #8]
      break;
 800b45e:	e039      	b.n	800b4d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6818      	ldr	r0, [r3, #0]
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	6859      	ldr	r1, [r3, #4]
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	461a      	mov	r2, r3
 800b46e:	f000 fb67 	bl	800bb40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2150      	movs	r1, #80	; 0x50
 800b478:	4618      	mov	r0, r3
 800b47a:	f000 fbc0 	bl	800bbfe <TIM_ITRx_SetConfig>
      break;
 800b47e:	e029      	b.n	800b4d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6818      	ldr	r0, [r3, #0]
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	6859      	ldr	r1, [r3, #4]
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	461a      	mov	r2, r3
 800b48e:	f000 fb86 	bl	800bb9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2160      	movs	r1, #96	; 0x60
 800b498:	4618      	mov	r0, r3
 800b49a:	f000 fbb0 	bl	800bbfe <TIM_ITRx_SetConfig>
      break;
 800b49e:	e019      	b.n	800b4d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6818      	ldr	r0, [r3, #0]
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	6859      	ldr	r1, [r3, #4]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	f000 fb47 	bl	800bb40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2140      	movs	r1, #64	; 0x40
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f000 fba0 	bl	800bbfe <TIM_ITRx_SetConfig>
      break;
 800b4be:	e009      	b.n	800b4d4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	4610      	mov	r0, r2
 800b4cc:	f000 fb97 	bl	800bbfe <TIM_ITRx_SetConfig>
        break;
 800b4d0:	e000      	b.n	800b4d4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b4d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	fffeff88 	.word	0xfffeff88

0800b4f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b4fc:	bf00      	nop
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b510:	bf00      	nop
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b538:	bf00      	nop
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4a40      	ldr	r2, [pc, #256]	; (800b658 <TIM_Base_SetConfig+0x114>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d013      	beq.n	800b584 <TIM_Base_SetConfig+0x40>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b562:	d00f      	beq.n	800b584 <TIM_Base_SetConfig+0x40>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4a3d      	ldr	r2, [pc, #244]	; (800b65c <TIM_Base_SetConfig+0x118>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d00b      	beq.n	800b584 <TIM_Base_SetConfig+0x40>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a3c      	ldr	r2, [pc, #240]	; (800b660 <TIM_Base_SetConfig+0x11c>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d007      	beq.n	800b584 <TIM_Base_SetConfig+0x40>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a3b      	ldr	r2, [pc, #236]	; (800b664 <TIM_Base_SetConfig+0x120>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d003      	beq.n	800b584 <TIM_Base_SetConfig+0x40>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a3a      	ldr	r2, [pc, #232]	; (800b668 <TIM_Base_SetConfig+0x124>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d108      	bne.n	800b596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b58a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	4313      	orrs	r3, r2
 800b594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4a2f      	ldr	r2, [pc, #188]	; (800b658 <TIM_Base_SetConfig+0x114>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d02b      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5a4:	d027      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4a2c      	ldr	r2, [pc, #176]	; (800b65c <TIM_Base_SetConfig+0x118>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d023      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4a2b      	ldr	r2, [pc, #172]	; (800b660 <TIM_Base_SetConfig+0x11c>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d01f      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	4a2a      	ldr	r2, [pc, #168]	; (800b664 <TIM_Base_SetConfig+0x120>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d01b      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a29      	ldr	r2, [pc, #164]	; (800b668 <TIM_Base_SetConfig+0x124>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d017      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a28      	ldr	r2, [pc, #160]	; (800b66c <TIM_Base_SetConfig+0x128>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d013      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a27      	ldr	r2, [pc, #156]	; (800b670 <TIM_Base_SetConfig+0x12c>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d00f      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a26      	ldr	r2, [pc, #152]	; (800b674 <TIM_Base_SetConfig+0x130>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d00b      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a25      	ldr	r2, [pc, #148]	; (800b678 <TIM_Base_SetConfig+0x134>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d007      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4a24      	ldr	r2, [pc, #144]	; (800b67c <TIM_Base_SetConfig+0x138>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d003      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a23      	ldr	r2, [pc, #140]	; (800b680 <TIM_Base_SetConfig+0x13c>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d108      	bne.n	800b608 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	68fa      	ldr	r2, [r7, #12]
 800b604:	4313      	orrs	r3, r2
 800b606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	695b      	ldr	r3, [r3, #20]
 800b612:	4313      	orrs	r3, r2
 800b614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	689a      	ldr	r2, [r3, #8]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a0a      	ldr	r2, [pc, #40]	; (800b658 <TIM_Base_SetConfig+0x114>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d003      	beq.n	800b63c <TIM_Base_SetConfig+0xf8>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4a0c      	ldr	r2, [pc, #48]	; (800b668 <TIM_Base_SetConfig+0x124>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d103      	bne.n	800b644 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	691a      	ldr	r2, [r3, #16]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	615a      	str	r2, [r3, #20]
}
 800b64a:	bf00      	nop
 800b64c:	3714      	adds	r7, #20
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop
 800b658:	40010000 	.word	0x40010000
 800b65c:	40000400 	.word	0x40000400
 800b660:	40000800 	.word	0x40000800
 800b664:	40000c00 	.word	0x40000c00
 800b668:	40010400 	.word	0x40010400
 800b66c:	40014000 	.word	0x40014000
 800b670:	40014400 	.word	0x40014400
 800b674:	40014800 	.word	0x40014800
 800b678:	40001800 	.word	0x40001800
 800b67c:	40001c00 	.word	0x40001c00
 800b680:	40002000 	.word	0x40002000

0800b684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b684:	b480      	push	{r7}
 800b686:	b087      	sub	sp, #28
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a1b      	ldr	r3, [r3, #32]
 800b692:	f023 0201 	bic.w	r2, r3, #1
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a1b      	ldr	r3, [r3, #32]
 800b69e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	699b      	ldr	r3, [r3, #24]
 800b6aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	4b2b      	ldr	r3, [pc, #172]	; (800b75c <TIM_OC1_SetConfig+0xd8>)
 800b6b0:	4013      	ands	r3, r2
 800b6b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f023 0303 	bic.w	r3, r3, #3
 800b6ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	f023 0302 	bic.w	r3, r3, #2
 800b6cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	697a      	ldr	r2, [r7, #20]
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4a21      	ldr	r2, [pc, #132]	; (800b760 <TIM_OC1_SetConfig+0xdc>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d003      	beq.n	800b6e8 <TIM_OC1_SetConfig+0x64>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4a20      	ldr	r2, [pc, #128]	; (800b764 <TIM_OC1_SetConfig+0xe0>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d10c      	bne.n	800b702 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	f023 0308 	bic.w	r3, r3, #8
 800b6ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	697a      	ldr	r2, [r7, #20]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	f023 0304 	bic.w	r3, r3, #4
 800b700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a16      	ldr	r2, [pc, #88]	; (800b760 <TIM_OC1_SetConfig+0xdc>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d003      	beq.n	800b712 <TIM_OC1_SetConfig+0x8e>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a15      	ldr	r2, [pc, #84]	; (800b764 <TIM_OC1_SetConfig+0xe0>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d111      	bne.n	800b736 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	695b      	ldr	r3, [r3, #20]
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	4313      	orrs	r3, r2
 800b72a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	699b      	ldr	r3, [r3, #24]
 800b730:	693a      	ldr	r2, [r7, #16]
 800b732:	4313      	orrs	r3, r2
 800b734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	621a      	str	r2, [r3, #32]
}
 800b750:	bf00      	nop
 800b752:	371c      	adds	r7, #28
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	fffeff8f 	.word	0xfffeff8f
 800b760:	40010000 	.word	0x40010000
 800b764:	40010400 	.word	0x40010400

0800b768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b768:	b480      	push	{r7}
 800b76a:	b087      	sub	sp, #28
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a1b      	ldr	r3, [r3, #32]
 800b776:	f023 0210 	bic.w	r2, r3, #16
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a1b      	ldr	r3, [r3, #32]
 800b782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	699b      	ldr	r3, [r3, #24]
 800b78e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	4b2e      	ldr	r3, [pc, #184]	; (800b84c <TIM_OC2_SetConfig+0xe4>)
 800b794:	4013      	ands	r3, r2
 800b796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b79e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	021b      	lsls	r3, r3, #8
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	f023 0320 	bic.w	r3, r3, #32
 800b7b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	011b      	lsls	r3, r3, #4
 800b7ba:	697a      	ldr	r2, [r7, #20]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4a23      	ldr	r2, [pc, #140]	; (800b850 <TIM_OC2_SetConfig+0xe8>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d003      	beq.n	800b7d0 <TIM_OC2_SetConfig+0x68>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4a22      	ldr	r2, [pc, #136]	; (800b854 <TIM_OC2_SetConfig+0xec>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d10d      	bne.n	800b7ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	011b      	lsls	r3, r3, #4
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a18      	ldr	r2, [pc, #96]	; (800b850 <TIM_OC2_SetConfig+0xe8>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d003      	beq.n	800b7fc <TIM_OC2_SetConfig+0x94>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	4a17      	ldr	r2, [pc, #92]	; (800b854 <TIM_OC2_SetConfig+0xec>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d113      	bne.n	800b824 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b802:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b80a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	695b      	ldr	r3, [r3, #20]
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	693a      	ldr	r2, [r7, #16]
 800b814:	4313      	orrs	r3, r2
 800b816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	699b      	ldr	r3, [r3, #24]
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	693a      	ldr	r2, [r7, #16]
 800b820:	4313      	orrs	r3, r2
 800b822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	693a      	ldr	r2, [r7, #16]
 800b828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	621a      	str	r2, [r3, #32]
}
 800b83e:	bf00      	nop
 800b840:	371c      	adds	r7, #28
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	feff8fff 	.word	0xfeff8fff
 800b850:	40010000 	.word	0x40010000
 800b854:	40010400 	.word	0x40010400

0800b858 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b858:	b480      	push	{r7}
 800b85a:	b087      	sub	sp, #28
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6a1b      	ldr	r3, [r3, #32]
 800b866:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a1b      	ldr	r3, [r3, #32]
 800b872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	69db      	ldr	r3, [r3, #28]
 800b87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	4b2d      	ldr	r3, [pc, #180]	; (800b938 <TIM_OC3_SetConfig+0xe0>)
 800b884:	4013      	ands	r3, r2
 800b886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f023 0303 	bic.w	r3, r3, #3
 800b88e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	4313      	orrs	r3, r2
 800b898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b8a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	021b      	lsls	r3, r3, #8
 800b8a8:	697a      	ldr	r2, [r7, #20]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4a22      	ldr	r2, [pc, #136]	; (800b93c <TIM_OC3_SetConfig+0xe4>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d003      	beq.n	800b8be <TIM_OC3_SetConfig+0x66>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	4a21      	ldr	r2, [pc, #132]	; (800b940 <TIM_OC3_SetConfig+0xe8>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d10d      	bne.n	800b8da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b8c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	021b      	lsls	r3, r3, #8
 800b8cc:	697a      	ldr	r2, [r7, #20]
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b8d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	4a17      	ldr	r2, [pc, #92]	; (800b93c <TIM_OC3_SetConfig+0xe4>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d003      	beq.n	800b8ea <TIM_OC3_SetConfig+0x92>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	4a16      	ldr	r2, [pc, #88]	; (800b940 <TIM_OC3_SetConfig+0xe8>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d113      	bne.n	800b912 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b8f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	695b      	ldr	r3, [r3, #20]
 800b8fe:	011b      	lsls	r3, r3, #4
 800b900:	693a      	ldr	r2, [r7, #16]
 800b902:	4313      	orrs	r3, r2
 800b904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	699b      	ldr	r3, [r3, #24]
 800b90a:	011b      	lsls	r3, r3, #4
 800b90c:	693a      	ldr	r2, [r7, #16]
 800b90e:	4313      	orrs	r3, r2
 800b910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	693a      	ldr	r2, [r7, #16]
 800b916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	685a      	ldr	r2, [r3, #4]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	697a      	ldr	r2, [r7, #20]
 800b92a:	621a      	str	r2, [r3, #32]
}
 800b92c:	bf00      	nop
 800b92e:	371c      	adds	r7, #28
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	fffeff8f 	.word	0xfffeff8f
 800b93c:	40010000 	.word	0x40010000
 800b940:	40010400 	.word	0x40010400

0800b944 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b944:	b480      	push	{r7}
 800b946:	b087      	sub	sp, #28
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6a1b      	ldr	r3, [r3, #32]
 800b952:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	69db      	ldr	r3, [r3, #28]
 800b96a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b96c:	68fa      	ldr	r2, [r7, #12]
 800b96e:	4b1e      	ldr	r3, [pc, #120]	; (800b9e8 <TIM_OC4_SetConfig+0xa4>)
 800b970:	4013      	ands	r3, r2
 800b972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b97a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	021b      	lsls	r3, r3, #8
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	4313      	orrs	r3, r2
 800b986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b98e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	689b      	ldr	r3, [r3, #8]
 800b994:	031b      	lsls	r3, r3, #12
 800b996:	693a      	ldr	r2, [r7, #16]
 800b998:	4313      	orrs	r3, r2
 800b99a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a13      	ldr	r2, [pc, #76]	; (800b9ec <TIM_OC4_SetConfig+0xa8>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d003      	beq.n	800b9ac <TIM_OC4_SetConfig+0x68>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a12      	ldr	r2, [pc, #72]	; (800b9f0 <TIM_OC4_SetConfig+0xac>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d109      	bne.n	800b9c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	695b      	ldr	r3, [r3, #20]
 800b9b8:	019b      	lsls	r3, r3, #6
 800b9ba:	697a      	ldr	r2, [r7, #20]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	697a      	ldr	r2, [r7, #20]
 800b9c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	685a      	ldr	r2, [r3, #4]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	693a      	ldr	r2, [r7, #16]
 800b9d8:	621a      	str	r2, [r3, #32]
}
 800b9da:	bf00      	nop
 800b9dc:	371c      	adds	r7, #28
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	feff8fff 	.word	0xfeff8fff
 800b9ec:	40010000 	.word	0x40010000
 800b9f0:	40010400 	.word	0x40010400

0800b9f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b087      	sub	sp, #28
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6a1b      	ldr	r3, [r3, #32]
 800ba02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6a1b      	ldr	r3, [r3, #32]
 800ba0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	4b1b      	ldr	r3, [pc, #108]	; (800ba8c <TIM_OC5_SetConfig+0x98>)
 800ba20:	4013      	ands	r3, r2
 800ba22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ba34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	041b      	lsls	r3, r3, #16
 800ba3c:	693a      	ldr	r2, [r7, #16]
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4a12      	ldr	r2, [pc, #72]	; (800ba90 <TIM_OC5_SetConfig+0x9c>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d003      	beq.n	800ba52 <TIM_OC5_SetConfig+0x5e>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a11      	ldr	r2, [pc, #68]	; (800ba94 <TIM_OC5_SetConfig+0xa0>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d109      	bne.n	800ba66 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	695b      	ldr	r3, [r3, #20]
 800ba5e:	021b      	lsls	r3, r3, #8
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	697a      	ldr	r2, [r7, #20]
 800ba6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	68fa      	ldr	r2, [r7, #12]
 800ba70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	685a      	ldr	r2, [r3, #4]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	693a      	ldr	r2, [r7, #16]
 800ba7e:	621a      	str	r2, [r3, #32]
}
 800ba80:	bf00      	nop
 800ba82:	371c      	adds	r7, #28
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr
 800ba8c:	fffeff8f 	.word	0xfffeff8f
 800ba90:	40010000 	.word	0x40010000
 800ba94:	40010400 	.word	0x40010400

0800ba98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b087      	sub	sp, #28
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a1b      	ldr	r3, [r3, #32]
 800baa6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a1b      	ldr	r3, [r3, #32]
 800bab2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800babe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	4b1c      	ldr	r3, [pc, #112]	; (800bb34 <TIM_OC6_SetConfig+0x9c>)
 800bac4:	4013      	ands	r3, r2
 800bac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	021b      	lsls	r3, r3, #8
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	4313      	orrs	r3, r2
 800bad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	051b      	lsls	r3, r3, #20
 800bae2:	693a      	ldr	r2, [r7, #16]
 800bae4:	4313      	orrs	r3, r2
 800bae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4a13      	ldr	r2, [pc, #76]	; (800bb38 <TIM_OC6_SetConfig+0xa0>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d003      	beq.n	800baf8 <TIM_OC6_SetConfig+0x60>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a12      	ldr	r2, [pc, #72]	; (800bb3c <TIM_OC6_SetConfig+0xa4>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d109      	bne.n	800bb0c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bafe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	695b      	ldr	r3, [r3, #20]
 800bb04:	029b      	lsls	r3, r3, #10
 800bb06:	697a      	ldr	r2, [r7, #20]
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	697a      	ldr	r2, [r7, #20]
 800bb10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	685a      	ldr	r2, [r3, #4]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	621a      	str	r2, [r3, #32]
}
 800bb26:	bf00      	nop
 800bb28:	371c      	adds	r7, #28
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	feff8fff 	.word	0xfeff8fff
 800bb38:	40010000 	.word	0x40010000
 800bb3c:	40010400 	.word	0x40010400

0800bb40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b087      	sub	sp, #28
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6a1b      	ldr	r3, [r3, #32]
 800bb50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	6a1b      	ldr	r3, [r3, #32]
 800bb56:	f023 0201 	bic.w	r2, r3, #1
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	699b      	ldr	r3, [r3, #24]
 800bb62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	011b      	lsls	r3, r3, #4
 800bb70:	693a      	ldr	r2, [r7, #16]
 800bb72:	4313      	orrs	r3, r2
 800bb74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f023 030a 	bic.w	r3, r3, #10
 800bb7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb7e:	697a      	ldr	r2, [r7, #20]
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	4313      	orrs	r3, r2
 800bb84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	693a      	ldr	r2, [r7, #16]
 800bb8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	697a      	ldr	r2, [r7, #20]
 800bb90:	621a      	str	r2, [r3, #32]
}
 800bb92:	bf00      	nop
 800bb94:	371c      	adds	r7, #28
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb9e:	b480      	push	{r7}
 800bba0:	b087      	sub	sp, #28
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	60f8      	str	r0, [r7, #12]
 800bba6:	60b9      	str	r1, [r7, #8]
 800bba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6a1b      	ldr	r3, [r3, #32]
 800bbae:	f023 0210 	bic.w	r2, r3, #16
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	699b      	ldr	r3, [r3, #24]
 800bbba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6a1b      	ldr	r3, [r3, #32]
 800bbc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bbc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	031b      	lsls	r3, r3, #12
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bbda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	011b      	lsls	r3, r3, #4
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	697a      	ldr	r2, [r7, #20]
 800bbea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	693a      	ldr	r2, [r7, #16]
 800bbf0:	621a      	str	r2, [r3, #32]
}
 800bbf2:	bf00      	nop
 800bbf4:	371c      	adds	r7, #28
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bbfe:	b480      	push	{r7}
 800bc00:	b085      	sub	sp, #20
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc16:	683a      	ldr	r2, [r7, #0]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	f043 0307 	orr.w	r3, r3, #7
 800bc20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	68fa      	ldr	r2, [r7, #12]
 800bc26:	609a      	str	r2, [r3, #8]
}
 800bc28:	bf00      	nop
 800bc2a:	3714      	adds	r7, #20
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b087      	sub	sp, #28
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
 800bc40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	021a      	lsls	r2, r3, #8
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	431a      	orrs	r2, r3
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	697a      	ldr	r2, [r7, #20]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	697a      	ldr	r2, [r7, #20]
 800bc66:	609a      	str	r2, [r3, #8]
}
 800bc68:	bf00      	nop
 800bc6a:	371c      	adds	r7, #28
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d101      	bne.n	800bc8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc88:	2302      	movs	r3, #2
 800bc8a:	e06d      	b.n	800bd68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2202      	movs	r2, #2
 800bc98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a30      	ldr	r2, [pc, #192]	; (800bd74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d004      	beq.n	800bcc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a2f      	ldr	r2, [pc, #188]	; (800bd78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d108      	bne.n	800bcd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bcc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	4313      	orrs	r3, r2
 800bce2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a20      	ldr	r2, [pc, #128]	; (800bd74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d022      	beq.n	800bd3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcfe:	d01d      	beq.n	800bd3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a1d      	ldr	r2, [pc, #116]	; (800bd7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d018      	beq.n	800bd3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a1c      	ldr	r2, [pc, #112]	; (800bd80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d013      	beq.n	800bd3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a1a      	ldr	r2, [pc, #104]	; (800bd84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d00e      	beq.n	800bd3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a15      	ldr	r2, [pc, #84]	; (800bd78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d009      	beq.n	800bd3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a16      	ldr	r2, [pc, #88]	; (800bd88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d004      	beq.n	800bd3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a15      	ldr	r2, [pc, #84]	; (800bd8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d10c      	bne.n	800bd56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	68ba      	ldr	r2, [r7, #8]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	68ba      	ldr	r2, [r7, #8]
 800bd54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd66:	2300      	movs	r3, #0
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3714      	adds	r7, #20
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr
 800bd74:	40010000 	.word	0x40010000
 800bd78:	40010400 	.word	0x40010400
 800bd7c:	40000400 	.word	0x40000400
 800bd80:	40000800 	.word	0x40000800
 800bd84:	40000c00 	.word	0x40000c00
 800bd88:	40014000 	.word	0x40014000
 800bd8c:	40001800 	.word	0x40001800

0800bd90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d101      	bne.n	800bdac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bda8:	2302      	movs	r3, #2
 800bdaa:	e065      	b.n	800be78 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4313      	orrs	r3, r2
 800bdea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	691b      	ldr	r3, [r3, #16]
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	695b      	ldr	r3, [r3, #20]
 800be04:	4313      	orrs	r3, r2
 800be06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be12:	4313      	orrs	r3, r2
 800be14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	041b      	lsls	r3, r3, #16
 800be22:	4313      	orrs	r3, r2
 800be24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a16      	ldr	r2, [pc, #88]	; (800be84 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d004      	beq.n	800be3a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a14      	ldr	r2, [pc, #80]	; (800be88 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d115      	bne.n	800be66 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be44:	051b      	lsls	r3, r3, #20
 800be46:	4313      	orrs	r3, r2
 800be48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	69db      	ldr	r3, [r3, #28]
 800be54:	4313      	orrs	r3, r2
 800be56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	6a1b      	ldr	r3, [r3, #32]
 800be62:	4313      	orrs	r3, r2
 800be64:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2200      	movs	r2, #0
 800be72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be76:	2300      	movs	r3, #0
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3714      	adds	r7, #20
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr
 800be84:	40010000 	.word	0x40010000
 800be88:	40010400 	.word	0x40010400

0800be8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be94:	bf00      	nop
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bea8:	bf00      	nop
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bebc:	bf00      	nop
 800bebe:	370c      	adds	r7, #12
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr

0800bec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d101      	bne.n	800beda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bed6:	2301      	movs	r3, #1
 800bed8:	e040      	b.n	800bf5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d106      	bne.n	800bef0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7f6 fade 	bl	80024ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2224      	movs	r2, #36	; 0x24
 800bef4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f022 0201 	bic.w	r2, r2, #1
 800bf04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f82c 	bl	800bf64 <UART_SetConfig>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d101      	bne.n	800bf16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bf12:	2301      	movs	r3, #1
 800bf14:	e022      	b.n	800bf5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d002      	beq.n	800bf24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 fa80 	bl	800c424 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	685a      	ldr	r2, [r3, #4]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bf32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	689a      	ldr	r2, [r3, #8]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bf42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f042 0201 	orr.w	r2, r2, #1
 800bf52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 fb07 	bl	800c568 <UART_CheckIdleState>
 800bf5a:	4603      	mov	r3, r0
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3708      	adds	r7, #8
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b088      	sub	sp, #32
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	689a      	ldr	r2, [r3, #8]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	691b      	ldr	r3, [r3, #16]
 800bf78:	431a      	orrs	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	695b      	ldr	r3, [r3, #20]
 800bf7e:	431a      	orrs	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	69db      	ldr	r3, [r3, #28]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	4bb1      	ldr	r3, [pc, #708]	; (800c254 <UART_SetConfig+0x2f0>)
 800bf90:	4013      	ands	r3, r2
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	6812      	ldr	r2, [r2, #0]
 800bf96:	6979      	ldr	r1, [r7, #20]
 800bf98:	430b      	orrs	r3, r1
 800bf9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	68da      	ldr	r2, [r3, #12]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	430a      	orrs	r2, r1
 800bfb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	699b      	ldr	r3, [r3, #24]
 800bfb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6a1b      	ldr	r3, [r3, #32]
 800bfbc:	697a      	ldr	r2, [r7, #20]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	697a      	ldr	r2, [r7, #20]
 800bfd2:	430a      	orrs	r2, r1
 800bfd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a9f      	ldr	r2, [pc, #636]	; (800c258 <UART_SetConfig+0x2f4>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d121      	bne.n	800c024 <UART_SetConfig+0xc0>
 800bfe0:	4b9e      	ldr	r3, [pc, #632]	; (800c25c <UART_SetConfig+0x2f8>)
 800bfe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfe6:	f003 0303 	and.w	r3, r3, #3
 800bfea:	2b03      	cmp	r3, #3
 800bfec:	d816      	bhi.n	800c01c <UART_SetConfig+0xb8>
 800bfee:	a201      	add	r2, pc, #4	; (adr r2, 800bff4 <UART_SetConfig+0x90>)
 800bff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff4:	0800c005 	.word	0x0800c005
 800bff8:	0800c011 	.word	0x0800c011
 800bffc:	0800c00b 	.word	0x0800c00b
 800c000:	0800c017 	.word	0x0800c017
 800c004:	2301      	movs	r3, #1
 800c006:	77fb      	strb	r3, [r7, #31]
 800c008:	e151      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c00a:	2302      	movs	r3, #2
 800c00c:	77fb      	strb	r3, [r7, #31]
 800c00e:	e14e      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c010:	2304      	movs	r3, #4
 800c012:	77fb      	strb	r3, [r7, #31]
 800c014:	e14b      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c016:	2308      	movs	r3, #8
 800c018:	77fb      	strb	r3, [r7, #31]
 800c01a:	e148      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c01c:	2310      	movs	r3, #16
 800c01e:	77fb      	strb	r3, [r7, #31]
 800c020:	bf00      	nop
 800c022:	e144      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a8d      	ldr	r2, [pc, #564]	; (800c260 <UART_SetConfig+0x2fc>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d134      	bne.n	800c098 <UART_SetConfig+0x134>
 800c02e:	4b8b      	ldr	r3, [pc, #556]	; (800c25c <UART_SetConfig+0x2f8>)
 800c030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c034:	f003 030c 	and.w	r3, r3, #12
 800c038:	2b0c      	cmp	r3, #12
 800c03a:	d829      	bhi.n	800c090 <UART_SetConfig+0x12c>
 800c03c:	a201      	add	r2, pc, #4	; (adr r2, 800c044 <UART_SetConfig+0xe0>)
 800c03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c042:	bf00      	nop
 800c044:	0800c079 	.word	0x0800c079
 800c048:	0800c091 	.word	0x0800c091
 800c04c:	0800c091 	.word	0x0800c091
 800c050:	0800c091 	.word	0x0800c091
 800c054:	0800c085 	.word	0x0800c085
 800c058:	0800c091 	.word	0x0800c091
 800c05c:	0800c091 	.word	0x0800c091
 800c060:	0800c091 	.word	0x0800c091
 800c064:	0800c07f 	.word	0x0800c07f
 800c068:	0800c091 	.word	0x0800c091
 800c06c:	0800c091 	.word	0x0800c091
 800c070:	0800c091 	.word	0x0800c091
 800c074:	0800c08b 	.word	0x0800c08b
 800c078:	2300      	movs	r3, #0
 800c07a:	77fb      	strb	r3, [r7, #31]
 800c07c:	e117      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c07e:	2302      	movs	r3, #2
 800c080:	77fb      	strb	r3, [r7, #31]
 800c082:	e114      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c084:	2304      	movs	r3, #4
 800c086:	77fb      	strb	r3, [r7, #31]
 800c088:	e111      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c08a:	2308      	movs	r3, #8
 800c08c:	77fb      	strb	r3, [r7, #31]
 800c08e:	e10e      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c090:	2310      	movs	r3, #16
 800c092:	77fb      	strb	r3, [r7, #31]
 800c094:	bf00      	nop
 800c096:	e10a      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4a71      	ldr	r2, [pc, #452]	; (800c264 <UART_SetConfig+0x300>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d120      	bne.n	800c0e4 <UART_SetConfig+0x180>
 800c0a2:	4b6e      	ldr	r3, [pc, #440]	; (800c25c <UART_SetConfig+0x2f8>)
 800c0a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c0ac:	2b10      	cmp	r3, #16
 800c0ae:	d00f      	beq.n	800c0d0 <UART_SetConfig+0x16c>
 800c0b0:	2b10      	cmp	r3, #16
 800c0b2:	d802      	bhi.n	800c0ba <UART_SetConfig+0x156>
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d005      	beq.n	800c0c4 <UART_SetConfig+0x160>
 800c0b8:	e010      	b.n	800c0dc <UART_SetConfig+0x178>
 800c0ba:	2b20      	cmp	r3, #32
 800c0bc:	d005      	beq.n	800c0ca <UART_SetConfig+0x166>
 800c0be:	2b30      	cmp	r3, #48	; 0x30
 800c0c0:	d009      	beq.n	800c0d6 <UART_SetConfig+0x172>
 800c0c2:	e00b      	b.n	800c0dc <UART_SetConfig+0x178>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	77fb      	strb	r3, [r7, #31]
 800c0c8:	e0f1      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c0ca:	2302      	movs	r3, #2
 800c0cc:	77fb      	strb	r3, [r7, #31]
 800c0ce:	e0ee      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c0d0:	2304      	movs	r3, #4
 800c0d2:	77fb      	strb	r3, [r7, #31]
 800c0d4:	e0eb      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c0d6:	2308      	movs	r3, #8
 800c0d8:	77fb      	strb	r3, [r7, #31]
 800c0da:	e0e8      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c0dc:	2310      	movs	r3, #16
 800c0de:	77fb      	strb	r3, [r7, #31]
 800c0e0:	bf00      	nop
 800c0e2:	e0e4      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a5f      	ldr	r2, [pc, #380]	; (800c268 <UART_SetConfig+0x304>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d120      	bne.n	800c130 <UART_SetConfig+0x1cc>
 800c0ee:	4b5b      	ldr	r3, [pc, #364]	; (800c25c <UART_SetConfig+0x2f8>)
 800c0f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c0f8:	2b40      	cmp	r3, #64	; 0x40
 800c0fa:	d00f      	beq.n	800c11c <UART_SetConfig+0x1b8>
 800c0fc:	2b40      	cmp	r3, #64	; 0x40
 800c0fe:	d802      	bhi.n	800c106 <UART_SetConfig+0x1a2>
 800c100:	2b00      	cmp	r3, #0
 800c102:	d005      	beq.n	800c110 <UART_SetConfig+0x1ac>
 800c104:	e010      	b.n	800c128 <UART_SetConfig+0x1c4>
 800c106:	2b80      	cmp	r3, #128	; 0x80
 800c108:	d005      	beq.n	800c116 <UART_SetConfig+0x1b2>
 800c10a:	2bc0      	cmp	r3, #192	; 0xc0
 800c10c:	d009      	beq.n	800c122 <UART_SetConfig+0x1be>
 800c10e:	e00b      	b.n	800c128 <UART_SetConfig+0x1c4>
 800c110:	2300      	movs	r3, #0
 800c112:	77fb      	strb	r3, [r7, #31]
 800c114:	e0cb      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c116:	2302      	movs	r3, #2
 800c118:	77fb      	strb	r3, [r7, #31]
 800c11a:	e0c8      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c11c:	2304      	movs	r3, #4
 800c11e:	77fb      	strb	r3, [r7, #31]
 800c120:	e0c5      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c122:	2308      	movs	r3, #8
 800c124:	77fb      	strb	r3, [r7, #31]
 800c126:	e0c2      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c128:	2310      	movs	r3, #16
 800c12a:	77fb      	strb	r3, [r7, #31]
 800c12c:	bf00      	nop
 800c12e:	e0be      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a4d      	ldr	r2, [pc, #308]	; (800c26c <UART_SetConfig+0x308>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d124      	bne.n	800c184 <UART_SetConfig+0x220>
 800c13a:	4b48      	ldr	r3, [pc, #288]	; (800c25c <UART_SetConfig+0x2f8>)
 800c13c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c148:	d012      	beq.n	800c170 <UART_SetConfig+0x20c>
 800c14a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c14e:	d802      	bhi.n	800c156 <UART_SetConfig+0x1f2>
 800c150:	2b00      	cmp	r3, #0
 800c152:	d007      	beq.n	800c164 <UART_SetConfig+0x200>
 800c154:	e012      	b.n	800c17c <UART_SetConfig+0x218>
 800c156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c15a:	d006      	beq.n	800c16a <UART_SetConfig+0x206>
 800c15c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c160:	d009      	beq.n	800c176 <UART_SetConfig+0x212>
 800c162:	e00b      	b.n	800c17c <UART_SetConfig+0x218>
 800c164:	2300      	movs	r3, #0
 800c166:	77fb      	strb	r3, [r7, #31]
 800c168:	e0a1      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c16a:	2302      	movs	r3, #2
 800c16c:	77fb      	strb	r3, [r7, #31]
 800c16e:	e09e      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c170:	2304      	movs	r3, #4
 800c172:	77fb      	strb	r3, [r7, #31]
 800c174:	e09b      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c176:	2308      	movs	r3, #8
 800c178:	77fb      	strb	r3, [r7, #31]
 800c17a:	e098      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c17c:	2310      	movs	r3, #16
 800c17e:	77fb      	strb	r3, [r7, #31]
 800c180:	bf00      	nop
 800c182:	e094      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a39      	ldr	r2, [pc, #228]	; (800c270 <UART_SetConfig+0x30c>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d124      	bne.n	800c1d8 <UART_SetConfig+0x274>
 800c18e:	4b33      	ldr	r3, [pc, #204]	; (800c25c <UART_SetConfig+0x2f8>)
 800c190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c194:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c19c:	d012      	beq.n	800c1c4 <UART_SetConfig+0x260>
 800c19e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1a2:	d802      	bhi.n	800c1aa <UART_SetConfig+0x246>
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d007      	beq.n	800c1b8 <UART_SetConfig+0x254>
 800c1a8:	e012      	b.n	800c1d0 <UART_SetConfig+0x26c>
 800c1aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1ae:	d006      	beq.n	800c1be <UART_SetConfig+0x25a>
 800c1b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c1b4:	d009      	beq.n	800c1ca <UART_SetConfig+0x266>
 800c1b6:	e00b      	b.n	800c1d0 <UART_SetConfig+0x26c>
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	77fb      	strb	r3, [r7, #31]
 800c1bc:	e077      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c1be:	2302      	movs	r3, #2
 800c1c0:	77fb      	strb	r3, [r7, #31]
 800c1c2:	e074      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c1c4:	2304      	movs	r3, #4
 800c1c6:	77fb      	strb	r3, [r7, #31]
 800c1c8:	e071      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c1ca:	2308      	movs	r3, #8
 800c1cc:	77fb      	strb	r3, [r7, #31]
 800c1ce:	e06e      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c1d0:	2310      	movs	r3, #16
 800c1d2:	77fb      	strb	r3, [r7, #31]
 800c1d4:	bf00      	nop
 800c1d6:	e06a      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a25      	ldr	r2, [pc, #148]	; (800c274 <UART_SetConfig+0x310>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d124      	bne.n	800c22c <UART_SetConfig+0x2c8>
 800c1e2:	4b1e      	ldr	r3, [pc, #120]	; (800c25c <UART_SetConfig+0x2f8>)
 800c1e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1e8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c1ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1f0:	d012      	beq.n	800c218 <UART_SetConfig+0x2b4>
 800c1f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1f6:	d802      	bhi.n	800c1fe <UART_SetConfig+0x29a>
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d007      	beq.n	800c20c <UART_SetConfig+0x2a8>
 800c1fc:	e012      	b.n	800c224 <UART_SetConfig+0x2c0>
 800c1fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c202:	d006      	beq.n	800c212 <UART_SetConfig+0x2ae>
 800c204:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c208:	d009      	beq.n	800c21e <UART_SetConfig+0x2ba>
 800c20a:	e00b      	b.n	800c224 <UART_SetConfig+0x2c0>
 800c20c:	2300      	movs	r3, #0
 800c20e:	77fb      	strb	r3, [r7, #31]
 800c210:	e04d      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c212:	2302      	movs	r3, #2
 800c214:	77fb      	strb	r3, [r7, #31]
 800c216:	e04a      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c218:	2304      	movs	r3, #4
 800c21a:	77fb      	strb	r3, [r7, #31]
 800c21c:	e047      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c21e:	2308      	movs	r3, #8
 800c220:	77fb      	strb	r3, [r7, #31]
 800c222:	e044      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c224:	2310      	movs	r3, #16
 800c226:	77fb      	strb	r3, [r7, #31]
 800c228:	bf00      	nop
 800c22a:	e040      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a11      	ldr	r2, [pc, #68]	; (800c278 <UART_SetConfig+0x314>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d139      	bne.n	800c2aa <UART_SetConfig+0x346>
 800c236:	4b09      	ldr	r3, [pc, #36]	; (800c25c <UART_SetConfig+0x2f8>)
 800c238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c23c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c244:	d027      	beq.n	800c296 <UART_SetConfig+0x332>
 800c246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c24a:	d817      	bhi.n	800c27c <UART_SetConfig+0x318>
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d01c      	beq.n	800c28a <UART_SetConfig+0x326>
 800c250:	e027      	b.n	800c2a2 <UART_SetConfig+0x33e>
 800c252:	bf00      	nop
 800c254:	efff69f3 	.word	0xefff69f3
 800c258:	40011000 	.word	0x40011000
 800c25c:	40023800 	.word	0x40023800
 800c260:	40004400 	.word	0x40004400
 800c264:	40004800 	.word	0x40004800
 800c268:	40004c00 	.word	0x40004c00
 800c26c:	40005000 	.word	0x40005000
 800c270:	40011400 	.word	0x40011400
 800c274:	40007800 	.word	0x40007800
 800c278:	40007c00 	.word	0x40007c00
 800c27c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c280:	d006      	beq.n	800c290 <UART_SetConfig+0x32c>
 800c282:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c286:	d009      	beq.n	800c29c <UART_SetConfig+0x338>
 800c288:	e00b      	b.n	800c2a2 <UART_SetConfig+0x33e>
 800c28a:	2300      	movs	r3, #0
 800c28c:	77fb      	strb	r3, [r7, #31]
 800c28e:	e00e      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c290:	2302      	movs	r3, #2
 800c292:	77fb      	strb	r3, [r7, #31]
 800c294:	e00b      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c296:	2304      	movs	r3, #4
 800c298:	77fb      	strb	r3, [r7, #31]
 800c29a:	e008      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c29c:	2308      	movs	r3, #8
 800c29e:	77fb      	strb	r3, [r7, #31]
 800c2a0:	e005      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c2a2:	2310      	movs	r3, #16
 800c2a4:	77fb      	strb	r3, [r7, #31]
 800c2a6:	bf00      	nop
 800c2a8:	e001      	b.n	800c2ae <UART_SetConfig+0x34a>
 800c2aa:	2310      	movs	r3, #16
 800c2ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	69db      	ldr	r3, [r3, #28]
 800c2b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2b6:	d15b      	bne.n	800c370 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 800c2b8:	7ffb      	ldrb	r3, [r7, #31]
 800c2ba:	2b08      	cmp	r3, #8
 800c2bc:	d827      	bhi.n	800c30e <UART_SetConfig+0x3aa>
 800c2be:	a201      	add	r2, pc, #4	; (adr r2, 800c2c4 <UART_SetConfig+0x360>)
 800c2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c4:	0800c2e9 	.word	0x0800c2e9
 800c2c8:	0800c2f1 	.word	0x0800c2f1
 800c2cc:	0800c2f9 	.word	0x0800c2f9
 800c2d0:	0800c30f 	.word	0x0800c30f
 800c2d4:	0800c2ff 	.word	0x0800c2ff
 800c2d8:	0800c30f 	.word	0x0800c30f
 800c2dc:	0800c30f 	.word	0x0800c30f
 800c2e0:	0800c30f 	.word	0x0800c30f
 800c2e4:	0800c307 	.word	0x0800c307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2e8:	f7fd f866 	bl	80093b8 <HAL_RCC_GetPCLK1Freq>
 800c2ec:	61b8      	str	r0, [r7, #24]
        break;
 800c2ee:	e013      	b.n	800c318 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2f0:	f7fd f876 	bl	80093e0 <HAL_RCC_GetPCLK2Freq>
 800c2f4:	61b8      	str	r0, [r7, #24]
        break;
 800c2f6:	e00f      	b.n	800c318 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c2f8:	4b49      	ldr	r3, [pc, #292]	; (800c420 <UART_SetConfig+0x4bc>)
 800c2fa:	61bb      	str	r3, [r7, #24]
        break;
 800c2fc:	e00c      	b.n	800c318 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2fe:	f7fc ff9d 	bl	800923c <HAL_RCC_GetSysClockFreq>
 800c302:	61b8      	str	r0, [r7, #24]
        break;
 800c304:	e008      	b.n	800c318 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c30a:	61bb      	str	r3, [r7, #24]
        break;
 800c30c:	e004      	b.n	800c318 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c30e:	2300      	movs	r3, #0
 800c310:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c312:	2301      	movs	r3, #1
 800c314:	77bb      	strb	r3, [r7, #30]
        break;
 800c316:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d074      	beq.n	800c408 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	005a      	lsls	r2, r3, #1
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	085b      	lsrs	r3, r3, #1
 800c328:	441a      	add	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c332:	b29b      	uxth	r3, r3
 800c334:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	2b0f      	cmp	r3, #15
 800c33a:	d916      	bls.n	800c36a <UART_SetConfig+0x406>
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c342:	d212      	bcs.n	800c36a <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	b29b      	uxth	r3, r3
 800c348:	f023 030f 	bic.w	r3, r3, #15
 800c34c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	085b      	lsrs	r3, r3, #1
 800c352:	b29b      	uxth	r3, r3
 800c354:	f003 0307 	and.w	r3, r3, #7
 800c358:	b29a      	uxth	r2, r3
 800c35a:	89fb      	ldrh	r3, [r7, #14]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	89fa      	ldrh	r2, [r7, #14]
 800c366:	60da      	str	r2, [r3, #12]
 800c368:	e04e      	b.n	800c408 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c36a:	2301      	movs	r3, #1
 800c36c:	77bb      	strb	r3, [r7, #30]
 800c36e:	e04b      	b.n	800c408 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c370:	7ffb      	ldrb	r3, [r7, #31]
 800c372:	2b08      	cmp	r3, #8
 800c374:	d827      	bhi.n	800c3c6 <UART_SetConfig+0x462>
 800c376:	a201      	add	r2, pc, #4	; (adr r2, 800c37c <UART_SetConfig+0x418>)
 800c378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37c:	0800c3a1 	.word	0x0800c3a1
 800c380:	0800c3a9 	.word	0x0800c3a9
 800c384:	0800c3b1 	.word	0x0800c3b1
 800c388:	0800c3c7 	.word	0x0800c3c7
 800c38c:	0800c3b7 	.word	0x0800c3b7
 800c390:	0800c3c7 	.word	0x0800c3c7
 800c394:	0800c3c7 	.word	0x0800c3c7
 800c398:	0800c3c7 	.word	0x0800c3c7
 800c39c:	0800c3bf 	.word	0x0800c3bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3a0:	f7fd f80a 	bl	80093b8 <HAL_RCC_GetPCLK1Freq>
 800c3a4:	61b8      	str	r0, [r7, #24]
        break;
 800c3a6:	e013      	b.n	800c3d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c3a8:	f7fd f81a 	bl	80093e0 <HAL_RCC_GetPCLK2Freq>
 800c3ac:	61b8      	str	r0, [r7, #24]
        break;
 800c3ae:	e00f      	b.n	800c3d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c3b0:	4b1b      	ldr	r3, [pc, #108]	; (800c420 <UART_SetConfig+0x4bc>)
 800c3b2:	61bb      	str	r3, [r7, #24]
        break;
 800c3b4:	e00c      	b.n	800c3d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c3b6:	f7fc ff41 	bl	800923c <HAL_RCC_GetSysClockFreq>
 800c3ba:	61b8      	str	r0, [r7, #24]
        break;
 800c3bc:	e008      	b.n	800c3d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3c2:	61bb      	str	r3, [r7, #24]
        break;
 800c3c4:	e004      	b.n	800c3d0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	77bb      	strb	r3, [r7, #30]
        break;
 800c3ce:	bf00      	nop
    }

    if (pclk != 0U)
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d018      	beq.n	800c408 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	085a      	lsrs	r2, r3, #1
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	441a      	add	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	2b0f      	cmp	r3, #15
 800c3f0:	d908      	bls.n	800c404 <UART_SetConfig+0x4a0>
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3f8:	d204      	bcs.n	800c404 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	693a      	ldr	r2, [r7, #16]
 800c400:	60da      	str	r2, [r3, #12]
 800c402:	e001      	b.n	800c408 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2200      	movs	r2, #0
 800c412:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c414:	7fbb      	ldrb	r3, [r7, #30]
}
 800c416:	4618      	mov	r0, r3
 800c418:	3720      	adds	r7, #32
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	00f42400 	.word	0x00f42400

0800c424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c430:	f003 0301 	and.w	r3, r3, #1
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00a      	beq.n	800c44e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	430a      	orrs	r2, r1
 800c44c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c452:	f003 0302 	and.w	r3, r3, #2
 800c456:	2b00      	cmp	r3, #0
 800c458:	d00a      	beq.n	800c470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	430a      	orrs	r2, r1
 800c46e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c474:	f003 0304 	and.w	r3, r3, #4
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d00a      	beq.n	800c492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	430a      	orrs	r2, r1
 800c490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c496:	f003 0308 	and.w	r3, r3, #8
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00a      	beq.n	800c4b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	430a      	orrs	r2, r1
 800c4b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b8:	f003 0310 	and.w	r3, r3, #16
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00a      	beq.n	800c4d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	689b      	ldr	r3, [r3, #8]
 800c4c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	430a      	orrs	r2, r1
 800c4d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4da:	f003 0320 	and.w	r3, r3, #32
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00a      	beq.n	800c4f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	430a      	orrs	r2, r1
 800c4f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c500:	2b00      	cmp	r3, #0
 800c502:	d01a      	beq.n	800c53a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	430a      	orrs	r2, r1
 800c518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c51e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c522:	d10a      	bne.n	800c53a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	430a      	orrs	r2, r1
 800c538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c542:	2b00      	cmp	r3, #0
 800c544:	d00a      	beq.n	800c55c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	430a      	orrs	r2, r1
 800c55a:	605a      	str	r2, [r3, #4]
  }
}
 800c55c:	bf00      	nop
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b086      	sub	sp, #24
 800c56c:	af02      	add	r7, sp, #8
 800c56e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c578:	f7f7 f9f8 	bl	800396c <HAL_GetTick>
 800c57c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f003 0308 	and.w	r3, r3, #8
 800c588:	2b08      	cmp	r3, #8
 800c58a:	d10e      	bne.n	800c5aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c58c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c590:	9300      	str	r3, [sp, #0]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2200      	movs	r2, #0
 800c596:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 f817 	bl	800c5ce <UART_WaitOnFlagUntilTimeout>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d001      	beq.n	800c5aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5a6:	2303      	movs	r3, #3
 800c5a8:	e00d      	b.n	800c5c6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2220      	movs	r2, #32
 800c5ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2220      	movs	r2, #32
 800c5b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c5c4:	2300      	movs	r3, #0
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3710      	adds	r7, #16
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b084      	sub	sp, #16
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	60f8      	str	r0, [r7, #12]
 800c5d6:	60b9      	str	r1, [r7, #8]
 800c5d8:	603b      	str	r3, [r7, #0]
 800c5da:	4613      	mov	r3, r2
 800c5dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5de:	e05e      	b.n	800c69e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5e6:	d05a      	beq.n	800c69e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5e8:	f7f7 f9c0 	bl	800396c <HAL_GetTick>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	69ba      	ldr	r2, [r7, #24]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d302      	bcc.n	800c5fe <UART_WaitOnFlagUntilTimeout+0x30>
 800c5f8:	69bb      	ldr	r3, [r7, #24]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d11b      	bne.n	800c636 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c60c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	689a      	ldr	r2, [r3, #8]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f022 0201 	bic.w	r2, r2, #1
 800c61c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2220      	movs	r2, #32
 800c622:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2220      	movs	r2, #32
 800c628:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	2200      	movs	r2, #0
 800c62e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c632:	2303      	movs	r3, #3
 800c634:	e043      	b.n	800c6be <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f003 0304 	and.w	r3, r3, #4
 800c640:	2b00      	cmp	r3, #0
 800c642:	d02c      	beq.n	800c69e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	69db      	ldr	r3, [r3, #28]
 800c64a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c64e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c652:	d124      	bne.n	800c69e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c65c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c66c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	689a      	ldr	r2, [r3, #8]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f022 0201 	bic.w	r2, r2, #1
 800c67c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2220      	movs	r2, #32
 800c682:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2220      	movs	r2, #32
 800c688:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2220      	movs	r2, #32
 800c68e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2200      	movs	r2, #0
 800c696:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c69a:	2303      	movs	r3, #3
 800c69c:	e00f      	b.n	800c6be <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	69da      	ldr	r2, [r3, #28]
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	4013      	ands	r3, r2
 800c6a8:	68ba      	ldr	r2, [r7, #8]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	bf0c      	ite	eq
 800c6ae:	2301      	moveq	r3, #1
 800c6b0:	2300      	movne	r3, #0
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	79fb      	ldrb	r3, [r7, #7]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d091      	beq.n	800c5e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c6bc:	2300      	movs	r3, #0
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3710      	adds	r7, #16
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
	...

0800c6c8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d027      	beq.n	800c732 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c6e8:	68fa      	ldr	r2, [r7, #12]
 800c6ea:	4b2f      	ldr	r3, [pc, #188]	; (800c7a8 <FMC_SDRAM_Init+0xe0>)
 800c6ec:	4013      	ands	r3, r2
 800c6ee:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c6f8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800c6fe:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800c704:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800c70a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800c710:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800c716:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800c71c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c722:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c724:	68fa      	ldr	r2, [r7, #12]
 800c726:	4313      	orrs	r3, r2
 800c728:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	601a      	str	r2, [r3, #0]
 800c730:	e032      	b.n	800c798 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c73e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c748:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c74e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	4313      	orrs	r3, r2
 800c754:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c75c:	68ba      	ldr	r2, [r7, #8]
 800c75e:	4b12      	ldr	r3, [pc, #72]	; (800c7a8 <FMC_SDRAM_Init+0xe0>)
 800c760:	4013      	ands	r3, r2
 800c762:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c76c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800c772:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800c778:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800c77e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800c784:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c786:	68ba      	ldr	r2, [r7, #8]
 800c788:	4313      	orrs	r3, r2
 800c78a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	68ba      	ldr	r2, [r7, #8]
 800c796:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3714      	adds	r7, #20
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	ffff8000 	.word	0xffff8000

0800c7ac <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b087      	sub	sp, #28
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d02e      	beq.n	800c824 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	689b      	ldr	r3, [r3, #8]
 800c7ca:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c7d2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c7e2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	3b01      	subs	r3, #1
 800c7ea:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c7ec:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	68db      	ldr	r3, [r3, #12]
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c7f6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	691b      	ldr	r3, [r3, #16]
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c800:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	695b      	ldr	r3, [r3, #20]
 800c806:	3b01      	subs	r3, #1
 800c808:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c80a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	699b      	ldr	r3, [r3, #24]
 800c810:	3b01      	subs	r3, #1
 800c812:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c814:	4313      	orrs	r3, r2
 800c816:	697a      	ldr	r2, [r7, #20]
 800c818:	4313      	orrs	r3, r2
 800c81a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	697a      	ldr	r2, [r7, #20]
 800c820:	609a      	str	r2, [r3, #8]
 800c822:	e039      	b.n	800c898 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c82a:	697a      	ldr	r2, [r7, #20]
 800c82c:	4b1e      	ldr	r3, [pc, #120]	; (800c8a8 <FMC_SDRAM_Timing_Init+0xfc>)
 800c82e:	4013      	ands	r3, r2
 800c830:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	3b01      	subs	r3, #1
 800c838:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	695b      	ldr	r3, [r3, #20]
 800c83e:	3b01      	subs	r3, #1
 800c840:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c842:	4313      	orrs	r3, r2
 800c844:	697a      	ldr	r2, [r7, #20]
 800c846:	4313      	orrs	r3, r2
 800c848:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c856:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	3b01      	subs	r3, #1
 800c864:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c866:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	3b01      	subs	r3, #1
 800c86e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c870:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	691b      	ldr	r3, [r3, #16]
 800c876:	3b01      	subs	r3, #1
 800c878:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c87a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	699b      	ldr	r3, [r3, #24]
 800c880:	3b01      	subs	r3, #1
 800c882:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c884:	4313      	orrs	r3, r2
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	4313      	orrs	r3, r2
 800c88a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	697a      	ldr	r2, [r7, #20]
 800c890:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	693a      	ldr	r2, [r7, #16]
 800c896:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	371c      	adds	r7, #28
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	ff0f0fff 	.word	0xff0f0fff

0800c8ac <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800c8ac:	b480      	push	{r7}
 800c8ae:	b085      	sub	sp, #20
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	691a      	ldr	r2, [r3, #16]
 800c8bc:	4b0c      	ldr	r3, [pc, #48]	; (800c8f0 <FMC_SDRAM_SendCommand+0x44>)
 800c8be:	4013      	ands	r3, r2
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	6811      	ldr	r1, [r2, #0]
 800c8c4:	68ba      	ldr	r2, [r7, #8]
 800c8c6:	6852      	ldr	r2, [r2, #4]
 800c8c8:	4311      	orrs	r1, r2
 800c8ca:	68ba      	ldr	r2, [r7, #8]
 800c8cc:	6892      	ldr	r2, [r2, #8]
 800c8ce:	3a01      	subs	r2, #1
 800c8d0:	0152      	lsls	r2, r2, #5
 800c8d2:	4311      	orrs	r1, r2
 800c8d4:	68ba      	ldr	r2, [r7, #8]
 800c8d6:	68d2      	ldr	r2, [r2, #12]
 800c8d8:	0252      	lsls	r2, r2, #9
 800c8da:	430a      	orrs	r2, r1
 800c8dc:	431a      	orrs	r2, r3
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800c8e2:	2300      	movs	r3, #0
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3714      	adds	r7, #20
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr
 800c8f0:	ffc00000 	.word	0xffc00000

0800c8f4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	695a      	ldr	r2, [r3, #20]
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	005b      	lsls	r3, r3, #1
 800c906:	431a      	orrs	r2, r3
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800c90c:	2300      	movs	r3, #0
}
 800c90e:	4618      	mov	r0, r3
 800c910:	370c      	adds	r7, #12
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
	...

0800c91c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c91c:	b084      	sub	sp, #16
 800c91e:	b580      	push	{r7, lr}
 800c920:	b084      	sub	sp, #16
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	f107 001c 	add.w	r0, r7, #28
 800c92a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c930:	2b01      	cmp	r3, #1
 800c932:	d120      	bne.n	800c976 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c938:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	68da      	ldr	r2, [r3, #12]
 800c944:	4b20      	ldr	r3, [pc, #128]	; (800c9c8 <USB_CoreInit+0xac>)
 800c946:	4013      	ands	r3, r2
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	68db      	ldr	r3, [r3, #12]
 800c950:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d105      	bne.n	800c96a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f000 f942 	bl	800cbf4 <USB_CoreReset>
 800c970:	4603      	mov	r3, r0
 800c972:	73fb      	strb	r3, [r7, #15]
 800c974:	e010      	b.n	800c998 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	68db      	ldr	r3, [r3, #12]
 800c97a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 f936 	bl	800cbf4 <USB_CoreReset>
 800c988:	4603      	mov	r3, r0
 800c98a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c990:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99a:	2b01      	cmp	r3, #1
 800c99c:	d10b      	bne.n	800c9b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	f043 0206 	orr.w	r2, r3, #6
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	f043 0220 	orr.w	r2, r3, #32
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c9c2:	b004      	add	sp, #16
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	ffbdffbf 	.word	0xffbdffbf

0800c9cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	f043 0201 	orr.w	r2, r3, #1
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	370c      	adds	r7, #12
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9ee:	b480      	push	{r7}
 800c9f0:	b083      	sub	sp, #12
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	f023 0201 	bic.w	r2, r3, #1
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ca02:	2300      	movs	r3, #0
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	460b      	mov	r3, r1
 800ca1a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	68db      	ldr	r3, [r3, #12]
 800ca20:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ca28:	78fb      	ldrb	r3, [r7, #3]
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d106      	bne.n	800ca3c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	60da      	str	r2, [r3, #12]
 800ca3a:	e00b      	b.n	800ca54 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ca3c:	78fb      	ldrb	r3, [r7, #3]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d106      	bne.n	800ca50 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	60da      	str	r2, [r3, #12]
 800ca4e:	e001      	b.n	800ca54 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ca50:	2301      	movs	r3, #1
 800ca52:	e003      	b.n	800ca5c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ca54:	2032      	movs	r0, #50	; 0x32
 800ca56:	f7f6 ff95 	bl	8003984 <HAL_Delay>

  return HAL_OK;
 800ca5a:	2300      	movs	r3, #0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	019b      	lsls	r3, r3, #6
 800ca76:	f043 0220 	orr.w	r2, r3, #32
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	3301      	adds	r3, #1
 800ca82:	60fb      	str	r3, [r7, #12]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	4a09      	ldr	r2, [pc, #36]	; (800caac <USB_FlushTxFifo+0x48>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d901      	bls.n	800ca90 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ca8c:	2303      	movs	r3, #3
 800ca8e:	e006      	b.n	800ca9e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	691b      	ldr	r3, [r3, #16]
 800ca94:	f003 0320 	and.w	r3, r3, #32
 800ca98:	2b20      	cmp	r3, #32
 800ca9a:	d0f0      	beq.n	800ca7e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ca9c:	2300      	movs	r3, #0
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3714      	adds	r7, #20
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	00030d40 	.word	0x00030d40

0800cab0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b085      	sub	sp, #20
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cab8:	2300      	movs	r3, #0
 800caba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2210      	movs	r2, #16
 800cac0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	3301      	adds	r3, #1
 800cac6:	60fb      	str	r3, [r7, #12]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	4a09      	ldr	r2, [pc, #36]	; (800caf0 <USB_FlushRxFifo+0x40>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d901      	bls.n	800cad4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cad0:	2303      	movs	r3, #3
 800cad2:	e006      	b.n	800cae2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	691b      	ldr	r3, [r3, #16]
 800cad8:	f003 0310 	and.w	r3, r3, #16
 800cadc:	2b10      	cmp	r3, #16
 800cade:	d0f0      	beq.n	800cac2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3714      	adds	r7, #20
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	00030d40 	.word	0x00030d40

0800caf4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b089      	sub	sp, #36	; 0x24
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	4611      	mov	r1, r2
 800cb00:	461a      	mov	r2, r3
 800cb02:	460b      	mov	r3, r1
 800cb04:	71fb      	strb	r3, [r7, #7]
 800cb06:	4613      	mov	r3, r2
 800cb08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800cb12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d11a      	bne.n	800cb50 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cb1a:	88bb      	ldrh	r3, [r7, #4]
 800cb1c:	3303      	adds	r3, #3
 800cb1e:	089b      	lsrs	r3, r3, #2
 800cb20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cb22:	2300      	movs	r3, #0
 800cb24:	61bb      	str	r3, [r7, #24]
 800cb26:	e00f      	b.n	800cb48 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cb28:	79fb      	ldrb	r3, [r7, #7]
 800cb2a:	031a      	lsls	r2, r3, #12
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	4413      	add	r3, r2
 800cb30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb34:	461a      	mov	r2, r3
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	3304      	adds	r3, #4
 800cb40:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	3301      	adds	r3, #1
 800cb46:	61bb      	str	r3, [r7, #24]
 800cb48:	69ba      	ldr	r2, [r7, #24]
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d3eb      	bcc.n	800cb28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3724      	adds	r7, #36	; 0x24
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr

0800cb5e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cb5e:	b480      	push	{r7}
 800cb60:	b089      	sub	sp, #36	; 0x24
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	60f8      	str	r0, [r7, #12]
 800cb66:	60b9      	str	r1, [r7, #8]
 800cb68:	4613      	mov	r3, r2
 800cb6a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800cb74:	88fb      	ldrh	r3, [r7, #6]
 800cb76:	3303      	adds	r3, #3
 800cb78:	089b      	lsrs	r3, r3, #2
 800cb7a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	61bb      	str	r3, [r7, #24]
 800cb80:	e00b      	b.n	800cb9a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	601a      	str	r2, [r3, #0]
    pDest++;
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	3304      	adds	r3, #4
 800cb92:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	3301      	adds	r3, #1
 800cb98:	61bb      	str	r3, [r7, #24]
 800cb9a:	69ba      	ldr	r2, [r7, #24]
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d3ef      	bcc.n	800cb82 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800cba2:	69fb      	ldr	r3, [r7, #28]
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3724      	adds	r7, #36	; 0x24
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr

0800cbb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	695b      	ldr	r3, [r3, #20]
 800cbbc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	699b      	ldr	r3, [r3, #24]
 800cbc2:	68fa      	ldr	r2, [r7, #12]
 800cbc4:	4013      	ands	r3, r2
 800cbc6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3714      	adds	r7, #20
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr

0800cbd6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cbd6:	b480      	push	{r7}
 800cbd8:	b083      	sub	sp, #12
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	f003 0301 	and.w	r3, r3, #1
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	370c      	adds	r7, #12
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr
	...

0800cbf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	3301      	adds	r3, #1
 800cc04:	60fb      	str	r3, [r7, #12]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	4a13      	ldr	r2, [pc, #76]	; (800cc58 <USB_CoreReset+0x64>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d901      	bls.n	800cc12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc0e:	2303      	movs	r3, #3
 800cc10:	e01b      	b.n	800cc4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	691b      	ldr	r3, [r3, #16]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	daf2      	bge.n	800cc00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	691b      	ldr	r3, [r3, #16]
 800cc22:	f043 0201 	orr.w	r2, r3, #1
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	60fb      	str	r3, [r7, #12]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	4a09      	ldr	r2, [pc, #36]	; (800cc58 <USB_CoreReset+0x64>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d901      	bls.n	800cc3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cc38:	2303      	movs	r3, #3
 800cc3a:	e006      	b.n	800cc4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	691b      	ldr	r3, [r3, #16]
 800cc40:	f003 0301 	and.w	r3, r3, #1
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d0f0      	beq.n	800cc2a <USB_CoreReset+0x36>

  return HAL_OK;
 800cc48:	2300      	movs	r3, #0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3714      	adds	r7, #20
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop
 800cc58:	00030d40 	.word	0x00030d40

0800cc5c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cc5c:	b084      	sub	sp, #16
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b084      	sub	sp, #16
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
 800cc66:	f107 001c 	add.w	r0, r7, #28
 800cc6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc78:	461a      	mov	r2, r3
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc82:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d018      	beq.n	800ccc8 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800cc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d10a      	bne.n	800ccb2 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	68ba      	ldr	r2, [r7, #8]
 800cca6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ccaa:	f043 0304 	orr.w	r3, r3, #4
 800ccae:	6013      	str	r3, [r2, #0]
 800ccb0:	e014      	b.n	800ccdc <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	68ba      	ldr	r2, [r7, #8]
 800ccbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ccc0:	f023 0304 	bic.w	r3, r3, #4
 800ccc4:	6013      	str	r3, [r2, #0]
 800ccc6:	e009      	b.n	800ccdc <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ccd6:	f023 0304 	bic.w	r3, r3, #4
 800ccda:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800ccdc:	2110      	movs	r1, #16
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f7ff fec0 	bl	800ca64 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f7ff fee3 	bl	800cab0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ccea:	2300      	movs	r3, #0
 800ccec:	60fb      	str	r3, [r7, #12]
 800ccee:	e015      	b.n	800cd1c <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	015a      	lsls	r2, r3, #5
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd02:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	015a      	lsls	r2, r3, #5
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd10:	461a      	mov	r2, r3
 800cd12:	2300      	movs	r3, #0
 800cd14:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	3301      	adds	r3, #1
 800cd1a:	60fb      	str	r3, [r7, #12]
 800cd1c:	6a3b      	ldr	r3, [r7, #32]
 800cd1e:	68fa      	ldr	r2, [r7, #12]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d3e5      	bcc.n	800ccf0 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800cd24:	2101      	movs	r1, #1
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 f8ac 	bl	800ce84 <USB_DriveVbus>

  HAL_Delay(200U);
 800cd2c:	20c8      	movs	r0, #200	; 0xc8
 800cd2e:	f7f6 fe29 	bl	8003984 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2200      	movs	r2, #0
 800cd36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd3e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00b      	beq.n	800cd64 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd52:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	4a14      	ldr	r2, [pc, #80]	; (800cda8 <USB_HostInit+0x14c>)
 800cd58:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	4a13      	ldr	r2, [pc, #76]	; (800cdac <USB_HostInit+0x150>)
 800cd5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cd62:	e009      	b.n	800cd78 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2280      	movs	r2, #128	; 0x80
 800cd68:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	4a10      	ldr	r2, [pc, #64]	; (800cdb0 <USB_HostInit+0x154>)
 800cd6e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4a10      	ldr	r2, [pc, #64]	; (800cdb4 <USB_HostInit+0x158>)
 800cd74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d105      	bne.n	800cd8a <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	699b      	ldr	r3, [r3, #24]
 800cd82:	f043 0210 	orr.w	r2, r3, #16
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	699a      	ldr	r2, [r3, #24]
 800cd8e:	4b0a      	ldr	r3, [pc, #40]	; (800cdb8 <USB_HostInit+0x15c>)
 800cd90:	4313      	orrs	r3, r2
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3710      	adds	r7, #16
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cda2:	b004      	add	sp, #16
 800cda4:	4770      	bx	lr
 800cda6:	bf00      	nop
 800cda8:	01000200 	.word	0x01000200
 800cdac:	00e00300 	.word	0x00e00300
 800cdb0:	00600080 	.word	0x00600080
 800cdb4:	004000e0 	.word	0x004000e0
 800cdb8:	a3200008 	.word	0xa3200008

0800cdbc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cdda:	f023 0303 	bic.w	r3, r3, #3
 800cdde:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	78fb      	ldrb	r3, [r7, #3]
 800cdea:	f003 0303 	and.w	r3, r3, #3
 800cdee:	68f9      	ldr	r1, [r7, #12]
 800cdf0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800cdf8:	78fb      	ldrb	r3, [r7, #3]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d107      	bne.n	800ce0e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce04:	461a      	mov	r2, r3
 800ce06:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ce0a:	6053      	str	r3, [r2, #4]
 800ce0c:	e009      	b.n	800ce22 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ce0e:	78fb      	ldrb	r3, [r7, #3]
 800ce10:	2b02      	cmp	r3, #2
 800ce12:	d106      	bne.n	800ce22 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	f241 7370 	movw	r3, #6000	; 0x1770
 800ce20:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ce22:	2300      	movs	r3, #0
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3714      	adds	r7, #20
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ce50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ce5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce5e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ce60:	2064      	movs	r0, #100	; 0x64
 800ce62:	f7f6 fd8f 	bl	8003984 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	68fa      	ldr	r2, [r7, #12]
 800ce6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ce6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce72:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800ce74:	200a      	movs	r0, #10
 800ce76:	f7f6 fd85 	bl	8003984 <HAL_Delay>

  return HAL_OK;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3710      	adds	r7, #16
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b085      	sub	sp, #20
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ce94:	2300      	movs	r3, #0
 800ce96:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cea8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d109      	bne.n	800cec8 <USB_DriveVbus+0x44>
 800ceb4:	78fb      	ldrb	r3, [r7, #3]
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d106      	bne.n	800cec8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cec2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cec6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ced2:	d109      	bne.n	800cee8 <USB_DriveVbus+0x64>
 800ced4:	78fb      	ldrb	r3, [r7, #3]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d106      	bne.n	800cee8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cee6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800cee8:	2300      	movs	r3, #0
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3714      	adds	r7, #20
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr

0800cef6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cef6:	b480      	push	{r7}
 800cef8:	b085      	sub	sp, #20
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cf02:	2300      	movs	r3, #0
 800cf04:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	0c5b      	lsrs	r3, r3, #17
 800cf14:	f003 0303 	and.w	r3, r3, #3
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3714      	adds	r7, #20
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b085      	sub	sp, #20
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	b29b      	uxth	r3, r3
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3714      	adds	r7, #20
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr
	...

0800cf48 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b088      	sub	sp, #32
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	4608      	mov	r0, r1
 800cf52:	4611      	mov	r1, r2
 800cf54:	461a      	mov	r2, r3
 800cf56:	4603      	mov	r3, r0
 800cf58:	70fb      	strb	r3, [r7, #3]
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	70bb      	strb	r3, [r7, #2]
 800cf5e:	4613      	mov	r3, r2
 800cf60:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800cf62:	2300      	movs	r3, #0
 800cf64:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800cf6a:	78fb      	ldrb	r3, [r7, #3]
 800cf6c:	015a      	lsls	r2, r3, #5
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	4413      	add	r3, r2
 800cf72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf76:	461a      	mov	r2, r3
 800cf78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf7c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800cf7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cf82:	2b03      	cmp	r3, #3
 800cf84:	d87e      	bhi.n	800d084 <USB_HC_Init+0x13c>
 800cf86:	a201      	add	r2, pc, #4	; (adr r2, 800cf8c <USB_HC_Init+0x44>)
 800cf88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf8c:	0800cf9d 	.word	0x0800cf9d
 800cf90:	0800d047 	.word	0x0800d047
 800cf94:	0800cf9d 	.word	0x0800cf9d
 800cf98:	0800d009 	.word	0x0800d009
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cf9c:	78fb      	ldrb	r3, [r7, #3]
 800cf9e:	015a      	lsls	r2, r3, #5
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	f240 439d 	movw	r3, #1181	; 0x49d
 800cfae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800cfb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	da10      	bge.n	800cfda <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cfb8:	78fb      	ldrb	r3, [r7, #3]
 800cfba:	015a      	lsls	r2, r3, #5
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	78fa      	ldrb	r2, [r7, #3]
 800cfc8:	0151      	lsls	r1, r2, #5
 800cfca:	693a      	ldr	r2, [r7, #16]
 800cfcc:	440a      	add	r2, r1
 800cfce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cfd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfd6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800cfd8:	e057      	b.n	800d08a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d051      	beq.n	800d08a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800cfe6:	78fb      	ldrb	r3, [r7, #3]
 800cfe8:	015a      	lsls	r2, r3, #5
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	4413      	add	r3, r2
 800cfee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cff2:	68db      	ldr	r3, [r3, #12]
 800cff4:	78fa      	ldrb	r2, [r7, #3]
 800cff6:	0151      	lsls	r1, r2, #5
 800cff8:	693a      	ldr	r2, [r7, #16]
 800cffa:	440a      	add	r2, r1
 800cffc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d000:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d004:	60d3      	str	r3, [r2, #12]
      break;
 800d006:	e040      	b.n	800d08a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d008:	78fb      	ldrb	r3, [r7, #3]
 800d00a:	015a      	lsls	r2, r3, #5
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	4413      	add	r3, r2
 800d010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d014:	461a      	mov	r2, r3
 800d016:	f240 639d 	movw	r3, #1693	; 0x69d
 800d01a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d01c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d020:	2b00      	cmp	r3, #0
 800d022:	da34      	bge.n	800d08e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d024:	78fb      	ldrb	r3, [r7, #3]
 800d026:	015a      	lsls	r2, r3, #5
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	4413      	add	r3, r2
 800d02c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	78fa      	ldrb	r2, [r7, #3]
 800d034:	0151      	lsls	r1, r2, #5
 800d036:	693a      	ldr	r2, [r7, #16]
 800d038:	440a      	add	r2, r1
 800d03a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d03e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d042:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d044:	e023      	b.n	800d08e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d046:	78fb      	ldrb	r3, [r7, #3]
 800d048:	015a      	lsls	r2, r3, #5
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	4413      	add	r3, r2
 800d04e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d052:	461a      	mov	r2, r3
 800d054:	f240 2325 	movw	r3, #549	; 0x225
 800d058:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d05a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	da17      	bge.n	800d092 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d062:	78fb      	ldrb	r3, [r7, #3]
 800d064:	015a      	lsls	r2, r3, #5
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	4413      	add	r3, r2
 800d06a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	78fa      	ldrb	r2, [r7, #3]
 800d072:	0151      	lsls	r1, r2, #5
 800d074:	693a      	ldr	r2, [r7, #16]
 800d076:	440a      	add	r2, r1
 800d078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d07c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d080:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d082:	e006      	b.n	800d092 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d084:	2301      	movs	r3, #1
 800d086:	77fb      	strb	r3, [r7, #31]
      break;
 800d088:	e004      	b.n	800d094 <USB_HC_Init+0x14c>
      break;
 800d08a:	bf00      	nop
 800d08c:	e002      	b.n	800d094 <USB_HC_Init+0x14c>
      break;
 800d08e:	bf00      	nop
 800d090:	e000      	b.n	800d094 <USB_HC_Init+0x14c>
      break;
 800d092:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d09a:	699a      	ldr	r2, [r3, #24]
 800d09c:	78fb      	ldrb	r3, [r7, #3]
 800d09e:	f003 030f 	and.w	r3, r3, #15
 800d0a2:	2101      	movs	r1, #1
 800d0a4:	fa01 f303 	lsl.w	r3, r1, r3
 800d0a8:	6939      	ldr	r1, [r7, #16]
 800d0aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	699b      	ldr	r3, [r3, #24]
 800d0b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d0be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	da03      	bge.n	800d0ce <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d0c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0ca:	61bb      	str	r3, [r7, #24]
 800d0cc:	e001      	b.n	800d0d2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f7ff ff0f 	bl	800cef6 <USB_GetHostSpeed>
 800d0d8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d0da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d0de:	2b02      	cmp	r3, #2
 800d0e0:	d106      	bne.n	800d0f0 <USB_HC_Init+0x1a8>
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2b02      	cmp	r3, #2
 800d0e6:	d003      	beq.n	800d0f0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d0e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d0ec:	617b      	str	r3, [r7, #20]
 800d0ee:	e001      	b.n	800d0f4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d0f4:	787b      	ldrb	r3, [r7, #1]
 800d0f6:	059b      	lsls	r3, r3, #22
 800d0f8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d0fc:	78bb      	ldrb	r3, [r7, #2]
 800d0fe:	02db      	lsls	r3, r3, #11
 800d100:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d104:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d106:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d10a:	049b      	lsls	r3, r3, #18
 800d10c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d110:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d112:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d114:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d118:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d11a:	69bb      	ldr	r3, [r7, #24]
 800d11c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d11e:	78fb      	ldrb	r3, [r7, #3]
 800d120:	0159      	lsls	r1, r3, #5
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	440b      	add	r3, r1
 800d126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d12a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d130:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800d132:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d136:	2b03      	cmp	r3, #3
 800d138:	d10f      	bne.n	800d15a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d13a:	78fb      	ldrb	r3, [r7, #3]
 800d13c:	015a      	lsls	r2, r3, #5
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	4413      	add	r3, r2
 800d142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	78fa      	ldrb	r2, [r7, #3]
 800d14a:	0151      	lsls	r1, r2, #5
 800d14c:	693a      	ldr	r2, [r7, #16]
 800d14e:	440a      	add	r2, r1
 800d150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d154:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d158:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d15a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3720      	adds	r7, #32
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b08c      	sub	sp, #48	; 0x30
 800d168:	af02      	add	r7, sp, #8
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	4613      	mov	r3, r2
 800d170:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	785b      	ldrb	r3, [r3, #1]
 800d17a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d17c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d180:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d02d      	beq.n	800d1ea <USB_HC_StartXfer+0x86>
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	791b      	ldrb	r3, [r3, #4]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d129      	bne.n	800d1ea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d196:	79fb      	ldrb	r3, [r7, #7]
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d117      	bne.n	800d1cc <USB_HC_StartXfer+0x68>
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	79db      	ldrb	r3, [r3, #7]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d003      	beq.n	800d1ac <USB_HC_StartXfer+0x48>
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	79db      	ldrb	r3, [r3, #7]
 800d1a8:	2b02      	cmp	r3, #2
 800d1aa:	d10f      	bne.n	800d1cc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	015a      	lsls	r2, r3, #5
 800d1b0:	6a3b      	ldr	r3, [r7, #32]
 800d1b2:	4413      	add	r3, r2
 800d1b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	69fa      	ldr	r2, [r7, #28]
 800d1bc:	0151      	lsls	r1, r2, #5
 800d1be:	6a3a      	ldr	r2, [r7, #32]
 800d1c0:	440a      	add	r2, r1
 800d1c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d1c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1ca:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d1cc:	79fb      	ldrb	r3, [r7, #7]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d10b      	bne.n	800d1ea <USB_HC_StartXfer+0x86>
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	795b      	ldrb	r3, [r3, #5]
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	d107      	bne.n	800d1ea <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	785b      	ldrb	r3, [r3, #1]
 800d1de:	4619      	mov	r1, r3
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f000 fa31 	bl	800d648 <USB_DoPing>
      return HAL_OK;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	e0f9      	b.n	800d3de <USB_HC_StartXfer+0x27a>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	695b      	ldr	r3, [r3, #20]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d018      	beq.n	800d224 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	695b      	ldr	r3, [r3, #20]
 800d1f6:	68ba      	ldr	r2, [r7, #8]
 800d1f8:	8912      	ldrh	r2, [r2, #8]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	68ba      	ldr	r2, [r7, #8]
 800d200:	8912      	ldrh	r2, [r2, #8]
 800d202:	fbb3 f3f2 	udiv	r3, r3, r2
 800d206:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d208:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d20a:	8b7b      	ldrh	r3, [r7, #26]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d90b      	bls.n	800d228 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d210:	8b7b      	ldrh	r3, [r7, #26]
 800d212:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d214:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d216:	68ba      	ldr	r2, [r7, #8]
 800d218:	8912      	ldrh	r2, [r2, #8]
 800d21a:	fb02 f203 	mul.w	r2, r2, r3
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	611a      	str	r2, [r3, #16]
 800d222:	e001      	b.n	800d228 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d224:	2301      	movs	r3, #1
 800d226:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	78db      	ldrb	r3, [r3, #3]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d007      	beq.n	800d240 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d230:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	8912      	ldrh	r2, [r2, #8]
 800d236:	fb02 f203 	mul.w	r2, r2, r3
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	611a      	str	r2, [r3, #16]
 800d23e:	e003      	b.n	800d248 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	695a      	ldr	r2, [r3, #20]
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d250:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d252:	04d9      	lsls	r1, r3, #19
 800d254:	4b64      	ldr	r3, [pc, #400]	; (800d3e8 <USB_HC_StartXfer+0x284>)
 800d256:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d258:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	7a9b      	ldrb	r3, [r3, #10]
 800d25e:	075b      	lsls	r3, r3, #29
 800d260:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d264:	69f9      	ldr	r1, [r7, #28]
 800d266:	0148      	lsls	r0, r1, #5
 800d268:	6a39      	ldr	r1, [r7, #32]
 800d26a:	4401      	add	r1, r0
 800d26c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d270:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d272:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d274:	79fb      	ldrb	r3, [r7, #7]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d009      	beq.n	800d28e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	68d9      	ldr	r1, [r3, #12]
 800d27e:	69fb      	ldr	r3, [r7, #28]
 800d280:	015a      	lsls	r2, r3, #5
 800d282:	6a3b      	ldr	r3, [r7, #32]
 800d284:	4413      	add	r3, r2
 800d286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d28a:	460a      	mov	r2, r1
 800d28c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d28e:	6a3b      	ldr	r3, [r7, #32]
 800d290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	f003 0301 	and.w	r3, r3, #1
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	bf0c      	ite	eq
 800d29e:	2301      	moveq	r3, #1
 800d2a0:	2300      	movne	r3, #0
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	015a      	lsls	r2, r3, #5
 800d2aa:	6a3b      	ldr	r3, [r7, #32]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	69fa      	ldr	r2, [r7, #28]
 800d2b6:	0151      	lsls	r1, r2, #5
 800d2b8:	6a3a      	ldr	r2, [r7, #32]
 800d2ba:	440a      	add	r2, r1
 800d2bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d2c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	015a      	lsls	r2, r3, #5
 800d2ca:	6a3b      	ldr	r3, [r7, #32]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	7e7b      	ldrb	r3, [r7, #25]
 800d2d6:	075b      	lsls	r3, r3, #29
 800d2d8:	69f9      	ldr	r1, [r7, #28]
 800d2da:	0148      	lsls	r0, r1, #5
 800d2dc:	6a39      	ldr	r1, [r7, #32]
 800d2de:	4401      	add	r1, r0
 800d2e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	015a      	lsls	r2, r3, #5
 800d2ec:	6a3b      	ldr	r3, [r7, #32]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d2fe:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	78db      	ldrb	r3, [r3, #3]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d004      	beq.n	800d312 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d30e:	613b      	str	r3, [r7, #16]
 800d310:	e003      	b.n	800d31a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d318:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d320:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d322:	69fb      	ldr	r3, [r7, #28]
 800d324:	015a      	lsls	r2, r3, #5
 800d326:	6a3b      	ldr	r3, [r7, #32]
 800d328:	4413      	add	r3, r2
 800d32a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d32e:	461a      	mov	r2, r3
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d334:	79fb      	ldrb	r3, [r7, #7]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d001      	beq.n	800d33e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d33a:	2300      	movs	r3, #0
 800d33c:	e04f      	b.n	800d3de <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	78db      	ldrb	r3, [r3, #3]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d14a      	bne.n	800d3dc <USB_HC_StartXfer+0x278>
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	695b      	ldr	r3, [r3, #20]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d046      	beq.n	800d3dc <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	79db      	ldrb	r3, [r3, #7]
 800d352:	2b03      	cmp	r3, #3
 800d354:	d830      	bhi.n	800d3b8 <USB_HC_StartXfer+0x254>
 800d356:	a201      	add	r2, pc, #4	; (adr r2, 800d35c <USB_HC_StartXfer+0x1f8>)
 800d358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d35c:	0800d36d 	.word	0x0800d36d
 800d360:	0800d391 	.word	0x0800d391
 800d364:	0800d36d 	.word	0x0800d36d
 800d368:	0800d391 	.word	0x0800d391
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	695b      	ldr	r3, [r3, #20]
 800d370:	3303      	adds	r3, #3
 800d372:	089b      	lsrs	r3, r3, #2
 800d374:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d376:	8afa      	ldrh	r2, [r7, #22]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	429a      	cmp	r2, r3
 800d380:	d91c      	bls.n	800d3bc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	699b      	ldr	r3, [r3, #24]
 800d386:	f043 0220 	orr.w	r2, r3, #32
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	619a      	str	r2, [r3, #24]
        }
        break;
 800d38e:	e015      	b.n	800d3bc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	695b      	ldr	r3, [r3, #20]
 800d394:	3303      	adds	r3, #3
 800d396:	089b      	lsrs	r3, r3, #2
 800d398:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d39a:	8afa      	ldrh	r2, [r7, #22]
 800d39c:	6a3b      	ldr	r3, [r7, #32]
 800d39e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d3a2:	691b      	ldr	r3, [r3, #16]
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d90a      	bls.n	800d3c0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	699b      	ldr	r3, [r3, #24]
 800d3ae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	619a      	str	r2, [r3, #24]
        }
        break;
 800d3b6:	e003      	b.n	800d3c0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d3b8:	bf00      	nop
 800d3ba:	e002      	b.n	800d3c2 <USB_HC_StartXfer+0x25e>
        break;
 800d3bc:	bf00      	nop
 800d3be:	e000      	b.n	800d3c2 <USB_HC_StartXfer+0x25e>
        break;
 800d3c0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	68d9      	ldr	r1, [r3, #12]
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	785a      	ldrb	r2, [r3, #1]
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	695b      	ldr	r3, [r3, #20]
 800d3ce:	b298      	uxth	r0, r3
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	9300      	str	r3, [sp, #0]
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	68f8      	ldr	r0, [r7, #12]
 800d3d8:	f7ff fb8c 	bl	800caf4 <USB_WritePacket>
  }

  return HAL_OK;
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3728      	adds	r7, #40	; 0x28
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	1ff80000 	.word	0x1ff80000

0800d3ec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b085      	sub	sp, #20
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d3fe:	695b      	ldr	r3, [r3, #20]
 800d400:	b29b      	uxth	r3, r3
}
 800d402:	4618      	mov	r0, r3
 800d404:	3714      	adds	r7, #20
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr

0800d40e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d40e:	b480      	push	{r7}
 800d410:	b089      	sub	sp, #36	; 0x24
 800d412:	af00      	add	r7, sp, #0
 800d414:	6078      	str	r0, [r7, #4]
 800d416:	460b      	mov	r3, r1
 800d418:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800d41e:	78fb      	ldrb	r3, [r7, #3]
 800d420:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800d422:	2300      	movs	r3, #0
 800d424:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	015a      	lsls	r2, r3, #5
 800d42a:	69bb      	ldr	r3, [r7, #24]
 800d42c:	4413      	add	r3, r2
 800d42e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	0c9b      	lsrs	r3, r3, #18
 800d436:	f003 0303 	and.w	r3, r3, #3
 800d43a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	015a      	lsls	r2, r3, #5
 800d440:	69bb      	ldr	r3, [r7, #24]
 800d442:	4413      	add	r3, r2
 800d444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	0fdb      	lsrs	r3, r3, #31
 800d44c:	f003 0301 	and.w	r3, r3, #1
 800d450:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	689b      	ldr	r3, [r3, #8]
 800d456:	f003 0320 	and.w	r3, r3, #32
 800d45a:	2b20      	cmp	r3, #32
 800d45c:	d104      	bne.n	800d468 <USB_HC_Halt+0x5a>
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d101      	bne.n	800d468 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d464:	2300      	movs	r3, #0
 800d466:	e0e8      	b.n	800d63a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d002      	beq.n	800d474 <USB_HC_Halt+0x66>
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	2b02      	cmp	r3, #2
 800d472:	d173      	bne.n	800d55c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	015a      	lsls	r2, r3, #5
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	4413      	add	r3, r2
 800d47c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	697a      	ldr	r2, [r7, #20]
 800d484:	0151      	lsls	r1, r2, #5
 800d486:	69ba      	ldr	r2, [r7, #24]
 800d488:	440a      	add	r2, r1
 800d48a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d48e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d492:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	f003 0320 	and.w	r3, r3, #32
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f040 80cb 	bne.w	800d638 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d143      	bne.n	800d536 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	015a      	lsls	r2, r3, #5
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	697a      	ldr	r2, [r7, #20]
 800d4be:	0151      	lsls	r1, r2, #5
 800d4c0:	69ba      	ldr	r2, [r7, #24]
 800d4c2:	440a      	add	r2, r1
 800d4c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4cc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	015a      	lsls	r2, r3, #5
 800d4d2:	69bb      	ldr	r3, [r7, #24]
 800d4d4:	4413      	add	r3, r2
 800d4d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	697a      	ldr	r2, [r7, #20]
 800d4de:	0151      	lsls	r1, r2, #5
 800d4e0:	69ba      	ldr	r2, [r7, #24]
 800d4e2:	440a      	add	r2, r1
 800d4e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d4ec:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	015a      	lsls	r2, r3, #5
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	697a      	ldr	r2, [r7, #20]
 800d4fe:	0151      	lsls	r1, r2, #5
 800d500:	69ba      	ldr	r2, [r7, #24]
 800d502:	440a      	add	r2, r1
 800d504:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d508:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d50c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	3301      	adds	r3, #1
 800d512:	61fb      	str	r3, [r7, #28]
 800d514:	69fb      	ldr	r3, [r7, #28]
 800d516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d51a:	d81d      	bhi.n	800d558 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	015a      	lsls	r2, r3, #5
 800d520:	69bb      	ldr	r3, [r7, #24]
 800d522:	4413      	add	r3, r2
 800d524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d52e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d532:	d0ec      	beq.n	800d50e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d534:	e080      	b.n	800d638 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	015a      	lsls	r2, r3, #5
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	4413      	add	r3, r2
 800d53e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	697a      	ldr	r2, [r7, #20]
 800d546:	0151      	lsls	r1, r2, #5
 800d548:	69ba      	ldr	r2, [r7, #24]
 800d54a:	440a      	add	r2, r1
 800d54c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d554:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d556:	e06f      	b.n	800d638 <USB_HC_Halt+0x22a>
            break;
 800d558:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d55a:	e06d      	b.n	800d638 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	015a      	lsls	r2, r3, #5
 800d560:	69bb      	ldr	r3, [r7, #24]
 800d562:	4413      	add	r3, r2
 800d564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	697a      	ldr	r2, [r7, #20]
 800d56c:	0151      	lsls	r1, r2, #5
 800d56e:	69ba      	ldr	r2, [r7, #24]
 800d570:	440a      	add	r2, r1
 800d572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d576:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d57a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d57c:	69bb      	ldr	r3, [r7, #24]
 800d57e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d582:	691b      	ldr	r3, [r3, #16]
 800d584:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d143      	bne.n	800d614 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	015a      	lsls	r2, r3, #5
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	4413      	add	r3, r2
 800d594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	697a      	ldr	r2, [r7, #20]
 800d59c:	0151      	lsls	r1, r2, #5
 800d59e:	69ba      	ldr	r2, [r7, #24]
 800d5a0:	440a      	add	r2, r1
 800d5a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d5a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	015a      	lsls	r2, r3, #5
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	4413      	add	r3, r2
 800d5b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	697a      	ldr	r2, [r7, #20]
 800d5bc:	0151      	lsls	r1, r2, #5
 800d5be:	69ba      	ldr	r2, [r7, #24]
 800d5c0:	440a      	add	r2, r1
 800d5c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d5c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d5ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	015a      	lsls	r2, r3, #5
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	4413      	add	r3, r2
 800d5d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	697a      	ldr	r2, [r7, #20]
 800d5dc:	0151      	lsls	r1, r2, #5
 800d5de:	69ba      	ldr	r2, [r7, #24]
 800d5e0:	440a      	add	r2, r1
 800d5e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d5e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d5ea:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	61fb      	str	r3, [r7, #28]
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d5f8:	d81d      	bhi.n	800d636 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	015a      	lsls	r2, r3, #5
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	4413      	add	r3, r2
 800d602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d60c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d610:	d0ec      	beq.n	800d5ec <USB_HC_Halt+0x1de>
 800d612:	e011      	b.n	800d638 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	015a      	lsls	r2, r3, #5
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	4413      	add	r3, r2
 800d61c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	697a      	ldr	r2, [r7, #20]
 800d624:	0151      	lsls	r1, r2, #5
 800d626:	69ba      	ldr	r2, [r7, #24]
 800d628:	440a      	add	r2, r1
 800d62a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d62e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d632:	6013      	str	r3, [r2, #0]
 800d634:	e000      	b.n	800d638 <USB_HC_Halt+0x22a>
          break;
 800d636:	bf00      	nop
    }
  }

  return HAL_OK;
 800d638:	2300      	movs	r3, #0
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3724      	adds	r7, #36	; 0x24
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr
	...

0800d648 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d648:	b480      	push	{r7}
 800d64a:	b087      	sub	sp, #28
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	460b      	mov	r3, r1
 800d652:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d658:	78fb      	ldrb	r3, [r7, #3]
 800d65a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d65c:	2301      	movs	r3, #1
 800d65e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	04da      	lsls	r2, r3, #19
 800d664:	4b15      	ldr	r3, [pc, #84]	; (800d6bc <USB_DoPing+0x74>)
 800d666:	4013      	ands	r3, r2
 800d668:	693a      	ldr	r2, [r7, #16]
 800d66a:	0151      	lsls	r1, r2, #5
 800d66c:	697a      	ldr	r2, [r7, #20]
 800d66e:	440a      	add	r2, r1
 800d670:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d674:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d678:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	015a      	lsls	r2, r3, #5
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	4413      	add	r3, r2
 800d682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d690:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d698:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	015a      	lsls	r2, r3, #5
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d6ac:	2300      	movs	r3, #0
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	371c      	adds	r7, #28
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr
 800d6ba:	bf00      	nop
 800d6bc:	1ff80000 	.word	0x1ff80000

0800d6c0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b086      	sub	sp, #24
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7ff f98c 	bl	800c9ee <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d6d6:	2110      	movs	r1, #16
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f7ff f9c3 	bl	800ca64 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7ff f9e6 	bl	800cab0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	613b      	str	r3, [r7, #16]
 800d6e8:	e01f      	b.n	800d72a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	015a      	lsls	r2, r3, #5
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	4413      	add	r3, r2
 800d6f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d700:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d708:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d710:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	015a      	lsls	r2, r3, #5
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	4413      	add	r3, r2
 800d71a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d71e:	461a      	mov	r2, r3
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	3301      	adds	r3, #1
 800d728:	613b      	str	r3, [r7, #16]
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	2b0f      	cmp	r3, #15
 800d72e:	d9dc      	bls.n	800d6ea <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d730:	2300      	movs	r3, #0
 800d732:	613b      	str	r3, [r7, #16]
 800d734:	e034      	b.n	800d7a0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	015a      	lsls	r2, r3, #5
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	4413      	add	r3, r2
 800d73e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d74c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d754:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d75c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	015a      	lsls	r2, r3, #5
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	4413      	add	r3, r2
 800d766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d76a:	461a      	mov	r2, r3
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	3301      	adds	r3, #1
 800d774:	617b      	str	r3, [r7, #20]
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d77c:	d80c      	bhi.n	800d798 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	015a      	lsls	r2, r3, #5
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	4413      	add	r3, r2
 800d786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d794:	d0ec      	beq.n	800d770 <USB_StopHost+0xb0>
 800d796:	e000      	b.n	800d79a <USB_StopHost+0xda>
        break;
 800d798:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	3301      	adds	r3, #1
 800d79e:	613b      	str	r3, [r7, #16]
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	2b0f      	cmp	r3, #15
 800d7a4:	d9c7      	bls.n	800d736 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7b2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7ba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f7ff f905 	bl	800c9cc <USB_EnableGlobalInt>

  return HAL_OK;
 800d7c2:	2300      	movs	r3, #0
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3718      	adds	r7, #24
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b084      	sub	sp, #16
 800d7d0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800d7d2:	2100      	movs	r1, #0
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	f006 ff91 	bl	80146fc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800d7da:	4b45      	ldr	r3, [pc, #276]	; (800d8f0 <MX_LWIP_Init+0x124>)
 800d7dc:	2200      	movs	r2, #0
 800d7de:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800d7e0:	4b44      	ldr	r3, [pc, #272]	; (800d8f4 <MX_LWIP_Init+0x128>)
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800d7e6:	4b44      	ldr	r3, [pc, #272]	; (800d8f8 <MX_LWIP_Init+0x12c>)
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800d7ec:	4b43      	ldr	r3, [pc, #268]	; (800d8fc <MX_LWIP_Init+0x130>)
 800d7ee:	9302      	str	r3, [sp, #8]
 800d7f0:	4b43      	ldr	r3, [pc, #268]	; (800d900 <MX_LWIP_Init+0x134>)
 800d7f2:	9301      	str	r3, [sp, #4]
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	9300      	str	r3, [sp, #0]
 800d7f8:	4b3f      	ldr	r3, [pc, #252]	; (800d8f8 <MX_LWIP_Init+0x12c>)
 800d7fa:	4a3e      	ldr	r2, [pc, #248]	; (800d8f4 <MX_LWIP_Init+0x128>)
 800d7fc:	493c      	ldr	r1, [pc, #240]	; (800d8f0 <MX_LWIP_Init+0x124>)
 800d7fe:	4841      	ldr	r0, [pc, #260]	; (800d904 <MX_LWIP_Init+0x138>)
 800d800:	f007 fd00 	bl	8015204 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800d804:	483f      	ldr	r0, [pc, #252]	; (800d904 <MX_LWIP_Init+0x138>)
 800d806:	f007 fec1 	bl	801558c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800d80a:	4b3e      	ldr	r3, [pc, #248]	; (800d904 <MX_LWIP_Init+0x138>)
 800d80c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d810:	089b      	lsrs	r3, r3, #2
 800d812:	f003 0301 	and.w	r3, r3, #1
 800d816:	b2db      	uxtb	r3, r3
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d009      	beq.n	800d830 <MX_LWIP_Init+0x64>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800d81c:	4839      	ldr	r0, [pc, #228]	; (800d904 <MX_LWIP_Init+0x138>)
 800d81e:	f007 fec5 	bl	80155ac <netif_set_up>
    LCD_UsrLog ((char *)"  State: Network link is up\n");
 800d822:	4b39      	ldr	r3, [pc, #228]	; (800d908 <MX_LWIP_Init+0x13c>)
 800d824:	4a39      	ldr	r2, [pc, #228]	; (800d90c <MX_LWIP_Init+0x140>)
 800d826:	601a      	str	r2, [r3, #0]
 800d828:	4839      	ldr	r0, [pc, #228]	; (800d910 <MX_LWIP_Init+0x144>)
 800d82a:	f013 ff57 	bl	80216dc <puts>
 800d82e:	e008      	b.n	800d842 <MX_LWIP_Init+0x76>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800d830:	4834      	ldr	r0, [pc, #208]	; (800d904 <MX_LWIP_Init+0x138>)
 800d832:	f007 ff2f 	bl	8015694 <netif_set_down>
    LCD_UsrLog ((char *)"  State: Network link is down\n");
 800d836:	4b34      	ldr	r3, [pc, #208]	; (800d908 <MX_LWIP_Init+0x13c>)
 800d838:	4a34      	ldr	r2, [pc, #208]	; (800d90c <MX_LWIP_Init+0x140>)
 800d83a:	601a      	str	r2, [r3, #0]
 800d83c:	4835      	ldr	r0, [pc, #212]	; (800d914 <MX_LWIP_Init+0x148>)
 800d83e:	f013 ff4d 	bl	80216dc <puts>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800d842:	4935      	ldr	r1, [pc, #212]	; (800d918 <MX_LWIP_Init+0x14c>)
 800d844:	482f      	ldr	r0, [pc, #188]	; (800d904 <MX_LWIP_Init+0x138>)
 800d846:	f007 ffc7 	bl	80157d8 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800d84a:	2200      	movs	r2, #0
 800d84c:	2101      	movs	r1, #1
 800d84e:	2001      	movs	r0, #1
 800d850:	f003 f8c2 	bl	80109d8 <osSemaphoreNew>
 800d854:	4602      	mov	r2, r0
 800d856:	4b31      	ldr	r3, [pc, #196]	; (800d91c <MX_LWIP_Init+0x150>)
 800d858:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 800d85a:	4b31      	ldr	r3, [pc, #196]	; (800d920 <MX_LWIP_Init+0x154>)
 800d85c:	4a29      	ldr	r2, [pc, #164]	; (800d904 <MX_LWIP_Init+0x138>)
 800d85e:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800d860:	4b2e      	ldr	r3, [pc, #184]	; (800d91c <MX_LWIP_Init+0x150>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a2e      	ldr	r2, [pc, #184]	; (800d920 <MX_LWIP_Init+0x154>)
 800d866:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800d868:	2224      	movs	r2, #36	; 0x24
 800d86a:	2100      	movs	r1, #0
 800d86c:	482d      	ldr	r0, [pc, #180]	; (800d924 <MX_LWIP_Init+0x158>)
 800d86e:	f013 fe11 	bl	8021494 <memset>
  attributes.name = "LinkThr";
 800d872:	4b2c      	ldr	r3, [pc, #176]	; (800d924 <MX_LWIP_Init+0x158>)
 800d874:	4a2c      	ldr	r2, [pc, #176]	; (800d928 <MX_LWIP_Init+0x15c>)
 800d876:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800d878:	4b2a      	ldr	r3, [pc, #168]	; (800d924 <MX_LWIP_Init+0x158>)
 800d87a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d87e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800d880:	4b28      	ldr	r3, [pc, #160]	; (800d924 <MX_LWIP_Init+0x158>)
 800d882:	2210      	movs	r2, #16
 800d884:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800d886:	4a27      	ldr	r2, [pc, #156]	; (800d924 <MX_LWIP_Init+0x158>)
 800d888:	4925      	ldr	r1, [pc, #148]	; (800d920 <MX_LWIP_Init+0x154>)
 800d88a:	4828      	ldr	r0, [pc, #160]	; (800d92c <MX_LWIP_Init+0x160>)
 800d88c:	f002 fe48 	bl	8010520 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  LCD_UsrLog ("  State: Looking for DHCP server ...\n");
 800d890:	4b1d      	ldr	r3, [pc, #116]	; (800d908 <MX_LWIP_Init+0x13c>)
 800d892:	4a1e      	ldr	r2, [pc, #120]	; (800d90c <MX_LWIP_Init+0x140>)
 800d894:	601a      	str	r2, [r3, #0]
 800d896:	4826      	ldr	r0, [pc, #152]	; (800d930 <MX_LWIP_Init+0x164>)
 800d898:	f013 ff20 	bl	80216dc <puts>
  if(dhcp_start(&gnetif) == ERR_OK)
 800d89c:	4819      	ldr	r0, [pc, #100]	; (800d904 <MX_LWIP_Init+0x138>)
 800d89e:	f00f f8fd 	bl	801ca9c <dhcp_start>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d119      	bne.n	800d8dc <MX_LWIP_Init+0x110>
  {
	  osDelay(2000);
 800d8a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d8ac:	f002 ff1e 	bl	80106ec <osDelay>
	  LCD_UsrLog ("  Accquired DHCP address\n");
 800d8b0:	4b15      	ldr	r3, [pc, #84]	; (800d908 <MX_LWIP_Init+0x13c>)
 800d8b2:	4a16      	ldr	r2, [pc, #88]	; (800d90c <MX_LWIP_Init+0x140>)
 800d8b4:	601a      	str	r2, [r3, #0]
 800d8b6:	481f      	ldr	r0, [pc, #124]	; (800d934 <MX_LWIP_Init+0x168>)
 800d8b8:	f013 ff10 	bl	80216dc <puts>
	  sprintf((char *)iptxt, "%s", ip4addr_ntoa((const ip4_addr_t *)&gnetif.ip_addr));
 800d8bc:	481e      	ldr	r0, [pc, #120]	; (800d938 <MX_LWIP_Init+0x16c>)
 800d8be:	f011 ffe5 	bl	801f88c <ip4addr_ntoa>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	481d      	ldr	r0, [pc, #116]	; (800d93c <MX_LWIP_Init+0x170>)
 800d8c8:	f013 ff54 	bl	8021774 <strcpy>
	  LCD_UsrLog ("  IP address assigned by a DHCP server: %s\n", iptxt);
 800d8cc:	4b0e      	ldr	r3, [pc, #56]	; (800d908 <MX_LWIP_Init+0x13c>)
 800d8ce:	4a0f      	ldr	r2, [pc, #60]	; (800d90c <MX_LWIP_Init+0x140>)
 800d8d0:	601a      	str	r2, [r3, #0]
 800d8d2:	491a      	ldr	r1, [pc, #104]	; (800d93c <MX_LWIP_Init+0x170>)
 800d8d4:	481a      	ldr	r0, [pc, #104]	; (800d940 <MX_LWIP_Init+0x174>)
 800d8d6:	f013 fe8d 	bl	80215f4 <iprintf>


/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800d8da:	e005      	b.n	800d8e8 <MX_LWIP_Init+0x11c>
	  LCD_UsrLog ("  Failed to get IP address\n");
 800d8dc:	4b0a      	ldr	r3, [pc, #40]	; (800d908 <MX_LWIP_Init+0x13c>)
 800d8de:	4a0b      	ldr	r2, [pc, #44]	; (800d90c <MX_LWIP_Init+0x140>)
 800d8e0:	601a      	str	r2, [r3, #0]
 800d8e2:	4818      	ldr	r0, [pc, #96]	; (800d944 <MX_LWIP_Init+0x178>)
 800d8e4:	f013 fefa 	bl	80216dc <puts>
}
 800d8e8:	bf00      	nop
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	20009ab4 	.word	0x20009ab4
 800d8f4:	20009acc 	.word	0x20009acc
 800d8f8:	20009ad0 	.word	0x20009ad0
 800d8fc:	08014639 	.word	0x08014639
 800d900:	0800df59 	.word	0x0800df59
 800d904:	20009a78 	.word	0x20009a78
 800d908:	200146f0 	.word	0x200146f0
 800d90c:	ff000080 	.word	0xff000080
 800d910:	08022444 	.word	0x08022444
 800d914:	08022460 	.word	0x08022460
 800d918:	0800e03d 	.word	0x0800e03d
 800d91c:	20000254 	.word	0x20000254
 800d920:	20009a4c 	.word	0x20009a4c
 800d924:	20009a54 	.word	0x20009a54
 800d928:	08022480 	.word	0x08022480
 800d92c:	0800dfc5 	.word	0x0800dfc5
 800d930:	08022488 	.word	0x08022488
 800d934:	080224b0 	.word	0x080224b0
 800d938:	20009a7c 	.word	0x20009a7c
 800d93c:	20009ab8 	.word	0x20009ab8
 800d940:	080224cc 	.word	0x080224cc
 800d944:	080224f8 	.word	0x080224f8

0800d948 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b08e      	sub	sp, #56	; 0x38
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d954:	2200      	movs	r2, #0
 800d956:	601a      	str	r2, [r3, #0]
 800d958:	605a      	str	r2, [r3, #4]
 800d95a:	609a      	str	r2, [r3, #8]
 800d95c:	60da      	str	r2, [r3, #12]
 800d95e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4a44      	ldr	r2, [pc, #272]	; (800da78 <HAL_ETH_MspInit+0x130>)
 800d966:	4293      	cmp	r3, r2
 800d968:	f040 8081 	bne.w	800da6e <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800d96c:	4b43      	ldr	r3, [pc, #268]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d970:	4a42      	ldr	r2, [pc, #264]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d972:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d976:	6313      	str	r3, [r2, #48]	; 0x30
 800d978:	4b40      	ldr	r3, [pc, #256]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d97c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d980:	623b      	str	r3, [r7, #32]
 800d982:	6a3b      	ldr	r3, [r7, #32]
 800d984:	4b3d      	ldr	r3, [pc, #244]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d988:	4a3c      	ldr	r2, [pc, #240]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d98a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d98e:	6313      	str	r3, [r2, #48]	; 0x30
 800d990:	4b3a      	ldr	r3, [pc, #232]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d994:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d998:	61fb      	str	r3, [r7, #28]
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	4b37      	ldr	r3, [pc, #220]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d99e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9a0:	4a36      	ldr	r2, [pc, #216]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d9a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d9a6:	6313      	str	r3, [r2, #48]	; 0x30
 800d9a8:	4b34      	ldr	r3, [pc, #208]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d9b0:	61bb      	str	r3, [r7, #24]
 800d9b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800d9b4:	4b31      	ldr	r3, [pc, #196]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9b8:	4a30      	ldr	r2, [pc, #192]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9be:	6313      	str	r3, [r2, #48]	; 0x30
 800d9c0:	4b2e      	ldr	r3, [pc, #184]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9c8:	617b      	str	r3, [r7, #20]
 800d9ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d9cc:	4b2b      	ldr	r3, [pc, #172]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d0:	4a2a      	ldr	r2, [pc, #168]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d9d2:	f043 0304 	orr.w	r3, r3, #4
 800d9d6:	6313      	str	r3, [r2, #48]	; 0x30
 800d9d8:	4b28      	ldr	r3, [pc, #160]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9dc:	f003 0304 	and.w	r3, r3, #4
 800d9e0:	613b      	str	r3, [r7, #16]
 800d9e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9e4:	4b25      	ldr	r3, [pc, #148]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d9e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9e8:	4a24      	ldr	r2, [pc, #144]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d9ea:	f043 0301 	orr.w	r3, r3, #1
 800d9ee:	6313      	str	r3, [r2, #48]	; 0x30
 800d9f0:	4b22      	ldr	r3, [pc, #136]	; (800da7c <HAL_ETH_MspInit+0x134>)
 800d9f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9f4:	f003 0301 	and.w	r3, r3, #1
 800d9f8:	60fb      	str	r3, [r7, #12]
 800d9fa:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800d9fc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800da00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da02:	2302      	movs	r3, #2
 800da04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da06:	2300      	movs	r3, #0
 800da08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da0a:	2303      	movs	r3, #3
 800da0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800da0e:	230b      	movs	r3, #11
 800da10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800da12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da16:	4619      	mov	r1, r3
 800da18:	4819      	ldr	r0, [pc, #100]	; (800da80 <HAL_ETH_MspInit+0x138>)
 800da1a:	f7f8 fb81 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800da1e:	2332      	movs	r3, #50	; 0x32
 800da20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da22:	2302      	movs	r3, #2
 800da24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da26:	2300      	movs	r3, #0
 800da28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da2a:	2303      	movs	r3, #3
 800da2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800da2e:	230b      	movs	r3, #11
 800da30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800da32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da36:	4619      	mov	r1, r3
 800da38:	4812      	ldr	r0, [pc, #72]	; (800da84 <HAL_ETH_MspInit+0x13c>)
 800da3a:	f7f8 fb71 	bl	8006120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800da3e:	2386      	movs	r3, #134	; 0x86
 800da40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da42:	2302      	movs	r3, #2
 800da44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da46:	2300      	movs	r3, #0
 800da48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da4a:	2303      	movs	r3, #3
 800da4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800da4e:	230b      	movs	r3, #11
 800da50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da56:	4619      	mov	r1, r3
 800da58:	480b      	ldr	r0, [pc, #44]	; (800da88 <HAL_ETH_MspInit+0x140>)
 800da5a:	f7f8 fb61 	bl	8006120 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800da5e:	2200      	movs	r2, #0
 800da60:	2105      	movs	r1, #5
 800da62:	203d      	movs	r0, #61	; 0x3d
 800da64:	f7f6 faf0 	bl	8004048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800da68:	203d      	movs	r0, #61	; 0x3d
 800da6a:	f7f6 fb09 	bl	8004080 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800da6e:	bf00      	nop
 800da70:	3738      	adds	r7, #56	; 0x38
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	40028000 	.word	0x40028000
 800da7c:	40023800 	.word	0x40023800
 800da80:	40021800 	.word	0x40021800
 800da84:	40020800 	.word	0x40020800
 800da88:	40020000 	.word	0x40020000

0800da8c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800da94:	4b04      	ldr	r3, [pc, #16]	; (800daa8 <HAL_ETH_RxCpltCallback+0x1c>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4618      	mov	r0, r3
 800da9a:	f003 f8a1 	bl	8010be0 <osSemaphoreRelease>
}
 800da9e:	bf00      	nop
 800daa0:	3708      	adds	r7, #8
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	20000258 	.word	0x20000258

0800daac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b090      	sub	sp, #64	; 0x40
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800dab4:	2300      	movs	r3, #0
 800dab6:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800dab8:	4b5d      	ldr	r3, [pc, #372]	; (800dc30 <low_level_init+0x184>)
 800daba:	4a5e      	ldr	r2, [pc, #376]	; (800dc34 <low_level_init+0x188>)
 800dabc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800dabe:	4b5c      	ldr	r3, [pc, #368]	; (800dc30 <low_level_init+0x184>)
 800dac0:	2201      	movs	r2, #1
 800dac2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800dac4:	4b5a      	ldr	r3, [pc, #360]	; (800dc30 <low_level_init+0x184>)
 800dac6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800daca:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800dacc:	4b58      	ldr	r3, [pc, #352]	; (800dc30 <low_level_init+0x184>)
 800dace:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dad2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800dad4:	4b56      	ldr	r3, [pc, #344]	; (800dc30 <low_level_init+0x184>)
 800dad6:	2200      	movs	r2, #0
 800dad8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800dada:	2300      	movs	r3, #0
 800dadc:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800dade:	2380      	movs	r3, #128	; 0x80
 800dae0:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800dae2:	23e1      	movs	r3, #225	; 0xe1
 800dae4:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x06;
 800dae6:	2306      	movs	r3, #6
 800dae8:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x0A;
 800daea:	230a      	movs	r3, #10
 800daec:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x55;
 800daee:	2355      	movs	r3, #85	; 0x55
 800daf0:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800daf2:	4a4f      	ldr	r2, [pc, #316]	; (800dc30 <low_level_init+0x184>)
 800daf4:	f107 030c 	add.w	r3, r7, #12
 800daf8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800dafa:	4b4d      	ldr	r3, [pc, #308]	; (800dc30 <low_level_init+0x184>)
 800dafc:	2201      	movs	r2, #1
 800dafe:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800db00:	4b4b      	ldr	r3, [pc, #300]	; (800dc30 <low_level_init+0x184>)
 800db02:	2200      	movs	r2, #0
 800db04:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800db06:	4b4a      	ldr	r3, [pc, #296]	; (800dc30 <low_level_init+0x184>)
 800db08:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800db0c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800db0e:	4848      	ldr	r0, [pc, #288]	; (800dc30 <low_level_init+0x184>)
 800db10:	f7f7 f980 	bl	8004e14 <HAL_ETH_Init>
 800db14:	4603      	mov	r3, r0
 800db16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800db1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d108      	bne.n	800db34 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800db28:	f043 0304 	orr.w	r3, r3, #4
 800db2c:	b2da      	uxtb	r2, r3
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800db34:	2304      	movs	r3, #4
 800db36:	4a40      	ldr	r2, [pc, #256]	; (800dc38 <low_level_init+0x18c>)
 800db38:	4940      	ldr	r1, [pc, #256]	; (800dc3c <low_level_init+0x190>)
 800db3a:	483d      	ldr	r0, [pc, #244]	; (800dc30 <low_level_init+0x184>)
 800db3c:	f7f7 fb06 	bl	800514c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800db40:	2304      	movs	r3, #4
 800db42:	4a3f      	ldr	r2, [pc, #252]	; (800dc40 <low_level_init+0x194>)
 800db44:	493f      	ldr	r1, [pc, #252]	; (800dc44 <low_level_init+0x198>)
 800db46:	483a      	ldr	r0, [pc, #232]	; (800dc30 <low_level_init+0x184>)
 800db48:	f7f7 fb69 	bl	800521e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2206      	movs	r2, #6
 800db50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800db54:	4b36      	ldr	r3, [pc, #216]	; (800dc30 <low_level_init+0x184>)
 800db56:	695b      	ldr	r3, [r3, #20]
 800db58:	781a      	ldrb	r2, [r3, #0]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800db60:	4b33      	ldr	r3, [pc, #204]	; (800dc30 <low_level_init+0x184>)
 800db62:	695b      	ldr	r3, [r3, #20]
 800db64:	785a      	ldrb	r2, [r3, #1]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800db6c:	4b30      	ldr	r3, [pc, #192]	; (800dc30 <low_level_init+0x184>)
 800db6e:	695b      	ldr	r3, [r3, #20]
 800db70:	789a      	ldrb	r2, [r3, #2]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800db78:	4b2d      	ldr	r3, [pc, #180]	; (800dc30 <low_level_init+0x184>)
 800db7a:	695b      	ldr	r3, [r3, #20]
 800db7c:	78da      	ldrb	r2, [r3, #3]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800db84:	4b2a      	ldr	r3, [pc, #168]	; (800dc30 <low_level_init+0x184>)
 800db86:	695b      	ldr	r3, [r3, #20]
 800db88:	791a      	ldrb	r2, [r3, #4]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800db90:	4b27      	ldr	r3, [pc, #156]	; (800dc30 <low_level_init+0x184>)
 800db92:	695b      	ldr	r3, [r3, #20]
 800db94:	795a      	ldrb	r2, [r3, #5]
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* maximum transfer unit */
  netif->mtu = 1500;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800dba2:	859a      	strh	r2, [r3, #44]	; 0x2c

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800dbaa:	f043 030a 	orr.w	r3, r3, #10
 800dbae:	b2da      	uxtb	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	2101      	movs	r1, #1
 800dbba:	2001      	movs	r0, #1
 800dbbc:	f002 ff0c 	bl	80109d8 <osSemaphoreNew>
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	4b21      	ldr	r3, [pc, #132]	; (800dc48 <low_level_init+0x19c>)
 800dbc4:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800dbc6:	f107 0314 	add.w	r3, r7, #20
 800dbca:	2224      	movs	r2, #36	; 0x24
 800dbcc:	2100      	movs	r1, #0
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f013 fc60 	bl	8021494 <memset>
  attributes.name = "EthIf";
 800dbd4:	4b1d      	ldr	r3, [pc, #116]	; (800dc4c <low_level_init+0x1a0>)
 800dbd6:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800dbd8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800dbdc:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 800dbde:	2330      	movs	r3, #48	; 0x30
 800dbe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800dbe2:	f107 0314 	add.w	r3, r7, #20
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	6879      	ldr	r1, [r7, #4]
 800dbea:	4819      	ldr	r0, [pc, #100]	; (800dc50 <low_level_init+0x1a4>)
 800dbec:	f002 fc98 	bl	8010520 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800dbf0:	480f      	ldr	r0, [pc, #60]	; (800dc30 <low_level_init+0x184>)
 800dbf2:	f7f7 fe3c 	bl	800586e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800dbf6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	211d      	movs	r1, #29
 800dbfe:	480c      	ldr	r0, [pc, #48]	; (800dc30 <low_level_init+0x184>)
 800dc00:	f7f7 fd67 	bl	80056d2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800dc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc06:	f043 030b 	orr.w	r3, r3, #11
 800dc0a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800dc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0e:	461a      	mov	r2, r3
 800dc10:	211d      	movs	r1, #29
 800dc12:	4807      	ldr	r0, [pc, #28]	; (800dc30 <low_level_init+0x184>)
 800dc14:	f7f7 fdc5 	bl	80057a2 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800dc18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	211d      	movs	r1, #29
 800dc20:	4803      	ldr	r0, [pc, #12]	; (800dc30 <low_level_init+0x184>)
 800dc22:	f7f7 fd56 	bl	80056d2 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800dc26:	bf00      	nop
 800dc28:	3740      	adds	r7, #64	; 0x40
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	2000b3a4 	.word	0x2000b3a4
 800dc34:	40028000 	.word	0x40028000
 800dc38:	2000b3ec 	.word	0x2000b3ec
 800dc3c:	20009ad4 	.word	0x20009ad4
 800dc40:	20009b54 	.word	0x20009b54
 800dc44:	2000b324 	.word	0x2000b324
 800dc48:	20000258 	.word	0x20000258
 800dc4c:	08022514 	.word	0x08022514
 800dc50:	0800def9 	.word	0x0800def9

0800dc54 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b08a      	sub	sp, #40	; 0x28
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800dc5e:	4b4b      	ldr	r3, [pc, #300]	; (800dd8c <low_level_output+0x138>)
 800dc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc62:	689b      	ldr	r3, [r3, #8]
 800dc64:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800dc66:	2300      	movs	r3, #0
 800dc68:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800dc72:	2300      	movs	r3, #0
 800dc74:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800dc76:	4b45      	ldr	r3, [pc, #276]	; (800dd8c <low_level_output+0x138>)
 800dc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc7a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	623b      	str	r3, [r7, #32]
 800dc84:	e05a      	b.n	800dd3c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800dc86:	69bb      	ldr	r3, [r7, #24]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	da03      	bge.n	800dc96 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800dc8e:	23f8      	movs	r3, #248	; 0xf8
 800dc90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800dc94:	e05c      	b.n	800dd50 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800dc96:	6a3b      	ldr	r3, [r7, #32]
 800dc98:	895b      	ldrh	r3, [r3, #10]
 800dc9a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800dca0:	e02f      	b.n	800dd02 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800dca2:	69fa      	ldr	r2, [r7, #28]
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	18d0      	adds	r0, r2, r3
 800dca8:	6a3b      	ldr	r3, [r7, #32]
 800dcaa:	685a      	ldr	r2, [r3, #4]
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	18d1      	adds	r1, r2, r3
 800dcb0:	693a      	ldr	r2, [r7, #16]
 800dcb2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800dcb6:	1a9b      	subs	r3, r3, r2
 800dcb8:	461a      	mov	r2, r3
 800dcba:	f013 fbe0 	bl	802147e <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800dcbe:	69bb      	ldr	r3, [r7, #24]
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	da03      	bge.n	800dcd4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800dccc:	23f8      	movs	r3, #248	; 0xf8
 800dcce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800dcd2:	e03d      	b.n	800dd50 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800dcd4:	69bb      	ldr	r3, [r7, #24]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800dcda:	693a      	ldr	r2, [r7, #16]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	4413      	add	r3, r2
 800dce0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800dce4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	1ad3      	subs	r3, r2, r3
 800dcec:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800dcf0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800dcf2:	697a      	ldr	r2, [r7, #20]
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	1ad3      	subs	r3, r2, r3
 800dcf8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800dcfc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	4413      	add	r3, r2
 800dd08:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d8c8      	bhi.n	800dca2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800dd10:	69fa      	ldr	r2, [r7, #28]
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	18d0      	adds	r0, r2, r3
 800dd16:	6a3b      	ldr	r3, [r7, #32]
 800dd18:	685a      	ldr	r2, [r3, #4]
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	4413      	add	r3, r2
 800dd1e:	68fa      	ldr	r2, [r7, #12]
 800dd20:	4619      	mov	r1, r3
 800dd22:	f013 fbac 	bl	802147e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800dd26:	693a      	ldr	r2, [r7, #16]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	4413      	add	r3, r2
 800dd2c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800dd2e:	697a      	ldr	r2, [r7, #20]
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	4413      	add	r3, r2
 800dd34:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800dd36:	6a3b      	ldr	r3, [r7, #32]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	623b      	str	r3, [r7, #32]
 800dd3c:	6a3b      	ldr	r3, [r7, #32]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d1a1      	bne.n	800dc86 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800dd42:	6979      	ldr	r1, [r7, #20]
 800dd44:	4811      	ldr	r0, [pc, #68]	; (800dd8c <low_level_output+0x138>)
 800dd46:	f7f7 fad7 	bl	80052f8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800dd50:	4b0e      	ldr	r3, [pc, #56]	; (800dd8c <low_level_output+0x138>)
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	f241 0314 	movw	r3, #4116	; 0x1014
 800dd58:	4413      	add	r3, r2
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f003 0320 	and.w	r3, r3, #32
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d00d      	beq.n	800dd80 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800dd64:	4b09      	ldr	r3, [pc, #36]	; (800dd8c <low_level_output+0x138>)
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	f241 0314 	movw	r3, #4116	; 0x1014
 800dd6c:	4413      	add	r3, r2
 800dd6e:	2220      	movs	r2, #32
 800dd70:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800dd72:	4b06      	ldr	r3, [pc, #24]	; (800dd8c <low_level_output+0x138>)
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	f241 0304 	movw	r3, #4100	; 0x1004
 800dd7a:	4413      	add	r3, r2
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800dd80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3728      	adds	r7, #40	; 0x28
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	2000b3a4 	.word	0x2000b3a4

0800dd90 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b08c      	sub	sp, #48	; 0x30
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800dda0:	2300      	movs	r3, #0
 800dda2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800dda4:	2300      	movs	r3, #0
 800dda6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800ddac:	2300      	movs	r3, #0
 800ddae:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800ddb4:	484f      	ldr	r0, [pc, #316]	; (800def4 <low_level_input+0x164>)
 800ddb6:	f7f7 fb89 	bl	80054cc <HAL_ETH_GetReceivedFrame_IT>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d001      	beq.n	800ddc4 <low_level_input+0x34>

    return NULL;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	e092      	b.n	800deea <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800ddc4:	4b4b      	ldr	r3, [pc, #300]	; (800def4 <low_level_input+0x164>)
 800ddc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddc8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800ddca:	4b4a      	ldr	r3, [pc, #296]	; (800def4 <low_level_input+0x164>)
 800ddcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddce:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800ddd0:	89fb      	ldrh	r3, [r7, #14]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d007      	beq.n	800dde6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800ddd6:	89fb      	ldrh	r3, [r7, #14]
 800ddd8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800dddc:	4619      	mov	r1, r3
 800ddde:	2000      	movs	r0, #0
 800dde0:	f007 fdc4 	bl	801596c <pbuf_alloc>
 800dde4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800dde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d04b      	beq.n	800de84 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800ddec:	4b41      	ldr	r3, [pc, #260]	; (800def4 <low_level_input+0x164>)
 800ddee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddf0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800ddf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf8:	62bb      	str	r3, [r7, #40]	; 0x28
 800ddfa:	e040      	b.n	800de7e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800ddfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfe:	895b      	ldrh	r3, [r3, #10]
 800de00:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800de02:	2300      	movs	r3, #0
 800de04:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800de06:	e021      	b.n	800de4c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800de08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0a:	685a      	ldr	r2, [r3, #4]
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	18d0      	adds	r0, r2, r3
 800de10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de12:	69fb      	ldr	r3, [r7, #28]
 800de14:	18d1      	adds	r1, r2, r3
 800de16:	69fa      	ldr	r2, [r7, #28]
 800de18:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800de1c:	1a9b      	subs	r3, r3, r2
 800de1e:	461a      	mov	r2, r3
 800de20:	f013 fb2d 	bl	802147e <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800de24:	6a3b      	ldr	r3, [r7, #32]
 800de26:	68db      	ldr	r3, [r3, #12]
 800de28:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800de2a:	6a3b      	ldr	r3, [r7, #32]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800de30:	69fa      	ldr	r2, [r7, #28]
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	4413      	add	r3, r2
 800de36:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800de3a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800de3c:	69ba      	ldr	r2, [r7, #24]
 800de3e:	69fb      	ldr	r3, [r7, #28]
 800de40:	1ad3      	subs	r3, r2, r3
 800de42:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800de46:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800de48:	2300      	movs	r3, #0
 800de4a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800de4c:	697a      	ldr	r2, [r7, #20]
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	4413      	add	r3, r2
 800de52:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800de56:	4293      	cmp	r3, r2
 800de58:	d8d6      	bhi.n	800de08 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800de5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5c:	685a      	ldr	r2, [r3, #4]
 800de5e:	69bb      	ldr	r3, [r7, #24]
 800de60:	18d0      	adds	r0, r2, r3
 800de62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	4413      	add	r3, r2
 800de68:	697a      	ldr	r2, [r7, #20]
 800de6a:	4619      	mov	r1, r3
 800de6c:	f013 fb07 	bl	802147e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800de70:	69fa      	ldr	r2, [r7, #28]
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	4413      	add	r3, r2
 800de76:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800de78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800de7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de80:	2b00      	cmp	r3, #0
 800de82:	d1bb      	bne.n	800ddfc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800de84:	4b1b      	ldr	r3, [pc, #108]	; (800def4 <low_level_input+0x164>)
 800de86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de88:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800de8a:	2300      	movs	r3, #0
 800de8c:	613b      	str	r3, [r7, #16]
 800de8e:	e00b      	b.n	800dea8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800de90:	6a3b      	ldr	r3, [r7, #32]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800de98:	6a3b      	ldr	r3, [r7, #32]
 800de9a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800de9c:	6a3b      	ldr	r3, [r7, #32]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	3301      	adds	r3, #1
 800dea6:	613b      	str	r3, [r7, #16]
 800dea8:	4b12      	ldr	r3, [pc, #72]	; (800def4 <low_level_input+0x164>)
 800deaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deac:	693a      	ldr	r2, [r7, #16]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d3ee      	bcc.n	800de90 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800deb2:	4b10      	ldr	r3, [pc, #64]	; (800def4 <low_level_input+0x164>)
 800deb4:	2200      	movs	r2, #0
 800deb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800deb8:	4b0e      	ldr	r3, [pc, #56]	; (800def4 <low_level_input+0x164>)
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	f241 0314 	movw	r3, #4116	; 0x1014
 800dec0:	4413      	add	r3, r2
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d00d      	beq.n	800dee8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800decc:	4b09      	ldr	r3, [pc, #36]	; (800def4 <low_level_input+0x164>)
 800dece:	681a      	ldr	r2, [r3, #0]
 800ded0:	f241 0314 	movw	r3, #4116	; 0x1014
 800ded4:	4413      	add	r3, r2
 800ded6:	2280      	movs	r2, #128	; 0x80
 800ded8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800deda:	4b06      	ldr	r3, [pc, #24]	; (800def4 <low_level_input+0x164>)
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	f241 0308 	movw	r3, #4104	; 0x1008
 800dee2:	4413      	add	r3, r2
 800dee4:	2200      	movs	r2, #0
 800dee6:	601a      	str	r2, [r3, #0]
  }
  return p;
 800dee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800deea:	4618      	mov	r0, r3
 800deec:	3730      	adds	r7, #48	; 0x30
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	2000b3a4 	.word	0x2000b3a4

0800def8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800df04:	4b12      	ldr	r3, [pc, #72]	; (800df50 <ethernetif_input+0x58>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800df0c:	4618      	mov	r0, r3
 800df0e:	f002 fe01 	bl	8010b14 <osSemaphoreAcquire>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d1f5      	bne.n	800df04 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800df18:	480e      	ldr	r0, [pc, #56]	; (800df54 <ethernetif_input+0x5c>)
 800df1a:	f012 fceb 	bl	80208f4 <sys_mutex_lock>
        p = low_level_input( netif );
 800df1e:	68f8      	ldr	r0, [r7, #12]
 800df20:	f7ff ff36 	bl	800dd90 <low_level_input>
 800df24:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d00a      	beq.n	800df42 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	691b      	ldr	r3, [r3, #16]
 800df30:	68f9      	ldr	r1, [r7, #12]
 800df32:	68b8      	ldr	r0, [r7, #8]
 800df34:	4798      	blx	r3
 800df36:	4603      	mov	r3, r0
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d002      	beq.n	800df42 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800df3c:	68b8      	ldr	r0, [r7, #8]
 800df3e:	f007 fff5 	bl	8015f2c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800df42:	4804      	ldr	r0, [pc, #16]	; (800df54 <ethernetif_input+0x5c>)
 800df44:	f012 fce5 	bl	8020912 <sys_mutex_unlock>
      } while(p!=NULL);
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d1e4      	bne.n	800df18 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800df4e:	e7d9      	b.n	800df04 <ethernetif_input+0xc>
 800df50:	20000258 	.word	0x20000258
 800df54:	2000cc20 	.word	0x2000cc20

0800df58 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d106      	bne.n	800df74 <ethernetif_init+0x1c>
 800df66:	4b0e      	ldr	r3, [pc, #56]	; (800dfa0 <ethernetif_init+0x48>)
 800df68:	f44f 720c 	mov.w	r2, #560	; 0x230
 800df6c:	490d      	ldr	r1, [pc, #52]	; (800dfa4 <ethernetif_init+0x4c>)
 800df6e:	480e      	ldr	r0, [pc, #56]	; (800dfa8 <ethernetif_init+0x50>)
 800df70:	f013 fb40 	bl	80215f4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2273      	movs	r2, #115	; 0x73
 800df78:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  netif->name[1] = IFNAME1;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2274      	movs	r2, #116	; 0x74
 800df80:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	4a09      	ldr	r2, [pc, #36]	; (800dfac <ethernetif_init+0x54>)
 800df88:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	4a08      	ldr	r2, [pc, #32]	; (800dfb0 <ethernetif_init+0x58>)
 800df8e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f7ff fd8b 	bl	800daac <low_level_init>

  return ERR_OK;
 800df96:	2300      	movs	r3, #0
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3708      	adds	r7, #8
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	0802251c 	.word	0x0802251c
 800dfa4:	08022538 	.word	0x08022538
 800dfa8:	08022548 	.word	0x08022548
 800dfac:	0801e989 	.word	0x0801e989
 800dfb0:	0800dc55 	.word	0x0800dc55

0800dfb4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800dfb8:	f7f5 fcd8 	bl	800396c <HAL_GetTick>
 800dfbc:	4603      	mov	r3, r0
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	bd80      	pop	{r7, pc}
	...

0800dfc4 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800dfd4:	f107 0308 	add.w	r3, r7, #8
 800dfd8:	461a      	mov	r2, r3
 800dfda:	2101      	movs	r1, #1
 800dfdc:	4816      	ldr	r0, [pc, #88]	; (800e038 <ethernetif_set_link+0x74>)
 800dfde:	f7f7 fb78 	bl	80056d2 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	f003 0304 	and.w	r3, r3, #4
 800dfe8:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800dff2:	f003 0304 	and.w	r3, r3, #4
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d108      	bne.n	800e00c <ethernetif_set_link+0x48>
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d005      	beq.n	800e00c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4618      	mov	r0, r3
 800e006:	f007 fb7f 	bl	8015708 <netif_set_link_up>
 800e00a:	e011      	b.n	800e030 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e014:	089b      	lsrs	r3, r3, #2
 800e016:	f003 0301 	and.w	r3, r3, #1
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d007      	beq.n	800e030 <ethernetif_set_link+0x6c>
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d104      	bne.n	800e030 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f007 fba4 	bl	8015778 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800e030:	20c8      	movs	r0, #200	; 0xc8
 800e032:	f002 fb5b 	bl	80106ec <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800e036:	e7cd      	b.n	800dfd4 <ethernetif_set_link+0x10>
 800e038:	2000b3a4 	.word	0x2000b3a4

0800e03c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800e044:	2300      	movs	r3, #0
 800e046:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800e048:	2300      	movs	r3, #0
 800e04a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e052:	089b      	lsrs	r3, r3, #2
 800e054:	f003 0301 	and.w	r3, r3, #1
 800e058:	b2db      	uxtb	r3, r3
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d05d      	beq.n	800e11a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800e05e:	4b34      	ldr	r3, [pc, #208]	; (800e130 <ethernetif_update_config+0xf4>)
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d03f      	beq.n	800e0e6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800e066:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e06a:	2100      	movs	r1, #0
 800e06c:	4830      	ldr	r0, [pc, #192]	; (800e130 <ethernetif_update_config+0xf4>)
 800e06e:	f7f7 fb98 	bl	80057a2 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800e072:	f7f5 fc7b 	bl	800396c <HAL_GetTick>
 800e076:	4603      	mov	r3, r0
 800e078:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800e07a:	f107 0308 	add.w	r3, r7, #8
 800e07e:	461a      	mov	r2, r3
 800e080:	2101      	movs	r1, #1
 800e082:	482b      	ldr	r0, [pc, #172]	; (800e130 <ethernetif_update_config+0xf4>)
 800e084:	f7f7 fb25 	bl	80056d2 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800e088:	f7f5 fc70 	bl	800396c <HAL_GetTick>
 800e08c:	4602      	mov	r2, r0
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e096:	d828      	bhi.n	800e0ea <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	f003 0320 	and.w	r3, r3, #32
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d0eb      	beq.n	800e07a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800e0a2:	f107 0308 	add.w	r3, r7, #8
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	211f      	movs	r1, #31
 800e0aa:	4821      	ldr	r0, [pc, #132]	; (800e130 <ethernetif_update_config+0xf4>)
 800e0ac:	f7f7 fb11 	bl	80056d2 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	f003 0310 	and.w	r3, r3, #16
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d004      	beq.n	800e0c4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800e0ba:	4b1d      	ldr	r3, [pc, #116]	; (800e130 <ethernetif_update_config+0xf4>)
 800e0bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e0c0:	60da      	str	r2, [r3, #12]
 800e0c2:	e002      	b.n	800e0ca <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800e0c4:	4b1a      	ldr	r3, [pc, #104]	; (800e130 <ethernetif_update_config+0xf4>)
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	f003 0304 	and.w	r3, r3, #4
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d003      	beq.n	800e0dc <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800e0d4:	4b16      	ldr	r3, [pc, #88]	; (800e130 <ethernetif_update_config+0xf4>)
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	609a      	str	r2, [r3, #8]
 800e0da:	e016      	b.n	800e10a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800e0dc:	4b14      	ldr	r3, [pc, #80]	; (800e130 <ethernetif_update_config+0xf4>)
 800e0de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e0e2:	609a      	str	r2, [r3, #8]
 800e0e4:	e011      	b.n	800e10a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800e0e6:	bf00      	nop
 800e0e8:	e000      	b.n	800e0ec <ethernetif_update_config+0xb0>
          goto error;
 800e0ea:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800e0ec:	4b10      	ldr	r3, [pc, #64]	; (800e130 <ethernetif_update_config+0xf4>)
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	08db      	lsrs	r3, r3, #3
 800e0f2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800e0f4:	4b0e      	ldr	r3, [pc, #56]	; (800e130 <ethernetif_update_config+0xf4>)
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	085b      	lsrs	r3, r3, #1
 800e0fa:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	461a      	mov	r2, r3
 800e102:	2100      	movs	r1, #0
 800e104:	480a      	ldr	r0, [pc, #40]	; (800e130 <ethernetif_update_config+0xf4>)
 800e106:	f7f7 fb4c 	bl	80057a2 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800e10a:	2100      	movs	r1, #0
 800e10c:	4808      	ldr	r0, [pc, #32]	; (800e130 <ethernetif_update_config+0xf4>)
 800e10e:	f7f7 fc0d 	bl	800592c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800e112:	4807      	ldr	r0, [pc, #28]	; (800e130 <ethernetif_update_config+0xf4>)
 800e114:	f7f7 fbab 	bl	800586e <HAL_ETH_Start>
 800e118:	e002      	b.n	800e120 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800e11a:	4805      	ldr	r0, [pc, #20]	; (800e130 <ethernetif_update_config+0xf4>)
 800e11c:	f7f7 fbd6 	bl	80058cc <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f000 f807 	bl	800e134 <ethernetif_notify_conn_changed>
}
 800e126:	bf00      	nop
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	2000b3a4 	.word	0x2000b3a4

0800e134 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800e13c:	bf00      	nop
 800e13e:	370c      	adds	r7, #12
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr

0800e148 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e148:	b590      	push	{r4, r7, lr}
 800e14a:	b089      	sub	sp, #36	; 0x24
 800e14c:	af04      	add	r7, sp, #16
 800e14e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e150:	2301      	movs	r3, #1
 800e152:	2202      	movs	r2, #2
 800e154:	2102      	movs	r1, #2
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 fcb4 	bl	800eac4 <USBH_FindInterface>
 800e15c:	4603      	mov	r3, r0
 800e15e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e160:	7bfb      	ldrb	r3, [r7, #15]
 800e162:	2bff      	cmp	r3, #255	; 0xff
 800e164:	d002      	beq.n	800e16c <USBH_CDC_InterfaceInit+0x24>
 800e166:	7bfb      	ldrb	r3, [r7, #15]
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d901      	bls.n	800e170 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e16c:	2302      	movs	r3, #2
 800e16e:	e13d      	b.n	800e3ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e170:	7bfb      	ldrb	r3, [r7, #15]
 800e172:	4619      	mov	r1, r3
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 fc89 	bl	800ea8c <USBH_SelectInterface>
 800e17a:	4603      	mov	r3, r0
 800e17c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e17e:	7bbb      	ldrb	r3, [r7, #14]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d001      	beq.n	800e188 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e184:	2302      	movs	r3, #2
 800e186:	e131      	b.n	800e3ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800e18e:	2050      	movs	r0, #80	; 0x50
 800e190:	f013 f956 	bl	8021440 <malloc>
 800e194:	4603      	mov	r3, r0
 800e196:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e19e:	69db      	ldr	r3, [r3, #28]
 800e1a0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d101      	bne.n	800e1ac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e1a8:	2302      	movs	r3, #2
 800e1aa:	e11f      	b.n	800e3ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e1ac:	2250      	movs	r2, #80	; 0x50
 800e1ae:	2100      	movs	r1, #0
 800e1b0:	68b8      	ldr	r0, [r7, #8]
 800e1b2:	f013 f96f 	bl	8021494 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e1b6:	7bfb      	ldrb	r3, [r7, #15]
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	211a      	movs	r1, #26
 800e1bc:	fb01 f303 	mul.w	r3, r1, r3
 800e1c0:	4413      	add	r3, r2
 800e1c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	b25b      	sxtb	r3, r3
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	da15      	bge.n	800e1fa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e1ce:	7bfb      	ldrb	r3, [r7, #15]
 800e1d0:	687a      	ldr	r2, [r7, #4]
 800e1d2:	211a      	movs	r1, #26
 800e1d4:	fb01 f303 	mul.w	r3, r1, r3
 800e1d8:	4413      	add	r3, r2
 800e1da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e1de:	781a      	ldrb	r2, [r3, #0]
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e1e4:	7bfb      	ldrb	r3, [r7, #15]
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	211a      	movs	r1, #26
 800e1ea:	fb01 f303 	mul.w	r3, r1, r3
 800e1ee:	4413      	add	r3, r2
 800e1f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e1f4:	881a      	ldrh	r2, [r3, #0]
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	785b      	ldrb	r3, [r3, #1]
 800e1fe:	4619      	mov	r1, r3
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f002 f890 	bl	8010326 <USBH_AllocPipe>
 800e206:	4603      	mov	r3, r0
 800e208:	461a      	mov	r2, r3
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	7819      	ldrb	r1, [r3, #0]
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	7858      	ldrb	r0, [r3, #1]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e222:	68ba      	ldr	r2, [r7, #8]
 800e224:	8952      	ldrh	r2, [r2, #10]
 800e226:	9202      	str	r2, [sp, #8]
 800e228:	2203      	movs	r2, #3
 800e22a:	9201      	str	r2, [sp, #4]
 800e22c:	9300      	str	r3, [sp, #0]
 800e22e:	4623      	mov	r3, r4
 800e230:	4602      	mov	r2, r0
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f002 f848 	bl	80102c8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	2200      	movs	r2, #0
 800e23e:	4619      	mov	r1, r3
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f012 fe21 	bl	8020e88 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e246:	2300      	movs	r3, #0
 800e248:	2200      	movs	r2, #0
 800e24a:	210a      	movs	r1, #10
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f000 fc39 	bl	800eac4 <USBH_FindInterface>
 800e252:	4603      	mov	r3, r0
 800e254:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e256:	7bfb      	ldrb	r3, [r7, #15]
 800e258:	2bff      	cmp	r3, #255	; 0xff
 800e25a:	d002      	beq.n	800e262 <USBH_CDC_InterfaceInit+0x11a>
 800e25c:	7bfb      	ldrb	r3, [r7, #15]
 800e25e:	2b01      	cmp	r3, #1
 800e260:	d901      	bls.n	800e266 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e262:	2302      	movs	r3, #2
 800e264:	e0c2      	b.n	800e3ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e266:	7bfb      	ldrb	r3, [r7, #15]
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	211a      	movs	r1, #26
 800e26c:	fb01 f303 	mul.w	r3, r1, r3
 800e270:	4413      	add	r3, r2
 800e272:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	b25b      	sxtb	r3, r3
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	da16      	bge.n	800e2ac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e27e:	7bfb      	ldrb	r3, [r7, #15]
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	211a      	movs	r1, #26
 800e284:	fb01 f303 	mul.w	r3, r1, r3
 800e288:	4413      	add	r3, r2
 800e28a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e28e:	781a      	ldrb	r2, [r3, #0]
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e294:	7bfb      	ldrb	r3, [r7, #15]
 800e296:	687a      	ldr	r2, [r7, #4]
 800e298:	211a      	movs	r1, #26
 800e29a:	fb01 f303 	mul.w	r3, r1, r3
 800e29e:	4413      	add	r3, r2
 800e2a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e2a4:	881a      	ldrh	r2, [r3, #0]
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	835a      	strh	r2, [r3, #26]
 800e2aa:	e015      	b.n	800e2d8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e2ac:	7bfb      	ldrb	r3, [r7, #15]
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	211a      	movs	r1, #26
 800e2b2:	fb01 f303 	mul.w	r3, r1, r3
 800e2b6:	4413      	add	r3, r2
 800e2b8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e2bc:	781a      	ldrb	r2, [r3, #0]
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e2c2:	7bfb      	ldrb	r3, [r7, #15]
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	211a      	movs	r1, #26
 800e2c8:	fb01 f303 	mul.w	r3, r1, r3
 800e2cc:	4413      	add	r3, r2
 800e2ce:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e2d2:	881a      	ldrh	r2, [r3, #0]
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e2d8:	7bfb      	ldrb	r3, [r7, #15]
 800e2da:	687a      	ldr	r2, [r7, #4]
 800e2dc:	211a      	movs	r1, #26
 800e2de:	fb01 f303 	mul.w	r3, r1, r3
 800e2e2:	4413      	add	r3, r2
 800e2e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	b25b      	sxtb	r3, r3
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	da16      	bge.n	800e31e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e2f0:	7bfb      	ldrb	r3, [r7, #15]
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	211a      	movs	r1, #26
 800e2f6:	fb01 f303 	mul.w	r3, r1, r3
 800e2fa:	4413      	add	r3, r2
 800e2fc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e300:	781a      	ldrb	r2, [r3, #0]
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e306:	7bfb      	ldrb	r3, [r7, #15]
 800e308:	687a      	ldr	r2, [r7, #4]
 800e30a:	211a      	movs	r1, #26
 800e30c:	fb01 f303 	mul.w	r3, r1, r3
 800e310:	4413      	add	r3, r2
 800e312:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e316:	881a      	ldrh	r2, [r3, #0]
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	835a      	strh	r2, [r3, #26]
 800e31c:	e015      	b.n	800e34a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e31e:	7bfb      	ldrb	r3, [r7, #15]
 800e320:	687a      	ldr	r2, [r7, #4]
 800e322:	211a      	movs	r1, #26
 800e324:	fb01 f303 	mul.w	r3, r1, r3
 800e328:	4413      	add	r3, r2
 800e32a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e32e:	781a      	ldrb	r2, [r3, #0]
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e334:	7bfb      	ldrb	r3, [r7, #15]
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	211a      	movs	r1, #26
 800e33a:	fb01 f303 	mul.w	r3, r1, r3
 800e33e:	4413      	add	r3, r2
 800e340:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e344:	881a      	ldrh	r2, [r3, #0]
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	7b9b      	ldrb	r3, [r3, #14]
 800e34e:	4619      	mov	r1, r3
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f001 ffe8 	bl	8010326 <USBH_AllocPipe>
 800e356:	4603      	mov	r3, r0
 800e358:	461a      	mov	r2, r3
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	7bdb      	ldrb	r3, [r3, #15]
 800e362:	4619      	mov	r1, r3
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f001 ffde 	bl	8010326 <USBH_AllocPipe>
 800e36a:	4603      	mov	r3, r0
 800e36c:	461a      	mov	r2, r3
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	7b59      	ldrb	r1, [r3, #13]
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	7b98      	ldrb	r0, [r3, #14]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e386:	68ba      	ldr	r2, [r7, #8]
 800e388:	8b12      	ldrh	r2, [r2, #24]
 800e38a:	9202      	str	r2, [sp, #8]
 800e38c:	2202      	movs	r2, #2
 800e38e:	9201      	str	r2, [sp, #4]
 800e390:	9300      	str	r3, [sp, #0]
 800e392:	4623      	mov	r3, r4
 800e394:	4602      	mov	r2, r0
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f001 ff96 	bl	80102c8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	7b19      	ldrb	r1, [r3, #12]
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	7bd8      	ldrb	r0, [r3, #15]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e3b0:	68ba      	ldr	r2, [r7, #8]
 800e3b2:	8b52      	ldrh	r2, [r2, #26]
 800e3b4:	9202      	str	r2, [sp, #8]
 800e3b6:	2202      	movs	r2, #2
 800e3b8:	9201      	str	r2, [sp, #4]
 800e3ba:	9300      	str	r3, [sp, #0]
 800e3bc:	4623      	mov	r3, r4
 800e3be:	4602      	mov	r2, r0
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f001 ff81 	bl	80102c8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	7b5b      	ldrb	r3, [r3, #13]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f012 fd56 	bl	8020e88 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	7b1b      	ldrb	r3, [r3, #12]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f012 fd4f 	bl	8020e88 <USBH_LL_SetToggle>

  return USBH_OK;
 800e3ea:	2300      	movs	r3, #0
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3714      	adds	r7, #20
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd90      	pop	{r4, r7, pc}

0800e3f4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e402:	69db      	ldr	r3, [r3, #28]
 800e404:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d00e      	beq.n	800e42c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	4619      	mov	r1, r3
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f001 ff76 	bl	8010306 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	4619      	mov	r1, r3
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f001 ffa1 	bl	8010368 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2200      	movs	r2, #0
 800e42a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	7b1b      	ldrb	r3, [r3, #12]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d00e      	beq.n	800e452 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	7b1b      	ldrb	r3, [r3, #12]
 800e438:	4619      	mov	r1, r3
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f001 ff63 	bl	8010306 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	7b1b      	ldrb	r3, [r3, #12]
 800e444:	4619      	mov	r1, r3
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f001 ff8e 	bl	8010368 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2200      	movs	r2, #0
 800e450:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	7b5b      	ldrb	r3, [r3, #13]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d00e      	beq.n	800e478 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	7b5b      	ldrb	r3, [r3, #13]
 800e45e:	4619      	mov	r1, r3
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f001 ff50 	bl	8010306 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	7b5b      	ldrb	r3, [r3, #13]
 800e46a:	4619      	mov	r1, r3
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f001 ff7b 	bl	8010368 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2200      	movs	r2, #0
 800e476:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e47e:	69db      	ldr	r3, [r3, #28]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d00b      	beq.n	800e49c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e48a:	69db      	ldr	r3, [r3, #28]
 800e48c:	4618      	mov	r0, r3
 800e48e:	f012 ffdf 	bl	8021450 <free>
    phost->pActiveClass->pData = 0U;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e498:	2200      	movs	r2, #0
 800e49a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e49c:	2300      	movs	r3, #0
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3710      	adds	r7, #16
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}

0800e4a6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e4a6:	b580      	push	{r7, lr}
 800e4a8:	b084      	sub	sp, #16
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4b4:	69db      	ldr	r3, [r3, #28]
 800e4b6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	3340      	adds	r3, #64	; 0x40
 800e4bc:	4619      	mov	r1, r3
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 f8b1 	bl	800e626 <GetLineCoding>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e4c8:	7afb      	ldrb	r3, [r7, #11]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d105      	bne.n	800e4da <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e4d4:	2102      	movs	r1, #2
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e4da:	7afb      	ldrb	r3, [r7, #11]
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3710      	adds	r7, #16
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4fa:	69db      	ldr	r3, [r3, #28]
 800e4fc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e504:	2b04      	cmp	r3, #4
 800e506:	d877      	bhi.n	800e5f8 <USBH_CDC_Process+0x114>
 800e508:	a201      	add	r2, pc, #4	; (adr r2, 800e510 <USBH_CDC_Process+0x2c>)
 800e50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e50e:	bf00      	nop
 800e510:	0800e525 	.word	0x0800e525
 800e514:	0800e52b 	.word	0x0800e52b
 800e518:	0800e55b 	.word	0x0800e55b
 800e51c:	0800e5cf 	.word	0x0800e5cf
 800e520:	0800e5dd 	.word	0x0800e5dd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e524:	2300      	movs	r3, #0
 800e526:	73fb      	strb	r3, [r7, #15]
      break;
 800e528:	e06d      	b.n	800e606 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e52e:	4619      	mov	r1, r3
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f000 f897 	bl	800e664 <SetLineCoding>
 800e536:	4603      	mov	r3, r0
 800e538:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e53a:	7bbb      	ldrb	r3, [r7, #14]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d104      	bne.n	800e54a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	2202      	movs	r2, #2
 800e544:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e548:	e058      	b.n	800e5fc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e54a:	7bbb      	ldrb	r3, [r7, #14]
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d055      	beq.n	800e5fc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	2204      	movs	r2, #4
 800e554:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e558:	e050      	b.n	800e5fc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	3340      	adds	r3, #64	; 0x40
 800e55e:	4619      	mov	r1, r3
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 f860 	bl	800e626 <GetLineCoding>
 800e566:	4603      	mov	r3, r0
 800e568:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e56a:	7bbb      	ldrb	r3, [r7, #14]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d126      	bne.n	800e5be <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	2200      	movs	r2, #0
 800e574:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e582:	791b      	ldrb	r3, [r3, #4]
 800e584:	429a      	cmp	r2, r3
 800e586:	d13b      	bne.n	800e600 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e592:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e594:	429a      	cmp	r2, r3
 800e596:	d133      	bne.n	800e600 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5a2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d12b      	bne.n	800e600 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5b0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d124      	bne.n	800e600 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f000 f984 	bl	800e8c4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e5bc:	e020      	b.n	800e600 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e5be:	7bbb      	ldrb	r3, [r7, #14]
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d01d      	beq.n	800e600 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	2204      	movs	r2, #4
 800e5c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e5cc:	e018      	b.n	800e600 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 f867 	bl	800e6a2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f000 f8f8 	bl	800e7ca <CDC_ProcessReception>
      break;
 800e5da:	e014      	b.n	800e606 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e5dc:	2100      	movs	r1, #0
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f001 f94f 	bl	800f882 <USBH_ClrFeature>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e5e8:	7bbb      	ldrb	r3, [r7, #14]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d10a      	bne.n	800e604 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800e5f6:	e005      	b.n	800e604 <USBH_CDC_Process+0x120>

    default:
      break;
 800e5f8:	bf00      	nop
 800e5fa:	e004      	b.n	800e606 <USBH_CDC_Process+0x122>
      break;
 800e5fc:	bf00      	nop
 800e5fe:	e002      	b.n	800e606 <USBH_CDC_Process+0x122>
      break;
 800e600:	bf00      	nop
 800e602:	e000      	b.n	800e606 <USBH_CDC_Process+0x122>
      break;
 800e604:	bf00      	nop

  }

  return status;
 800e606:	7bfb      	ldrb	r3, [r7, #15]
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3710      	adds	r7, #16
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e618:	2300      	movs	r3, #0
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	370c      	adds	r7, #12
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr

0800e626 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e626:	b580      	push	{r7, lr}
 800e628:	b082      	sub	sp, #8
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
 800e62e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	22a1      	movs	r2, #161	; 0xa1
 800e634:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2221      	movs	r2, #33	; 0x21
 800e63a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2200      	movs	r2, #0
 800e646:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2207      	movs	r2, #7
 800e64c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	2207      	movs	r2, #7
 800e652:	4619      	mov	r1, r3
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f001 faf4 	bl	800fc42 <USBH_CtlReq>
 800e65a:	4603      	mov	r3, r0
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3708      	adds	r7, #8
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b082      	sub	sp, #8
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2221      	movs	r2, #33	; 0x21
 800e672:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2220      	movs	r2, #32
 800e678:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2200      	movs	r2, #0
 800e67e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2200      	movs	r2, #0
 800e684:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2207      	movs	r2, #7
 800e68a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	2207      	movs	r2, #7
 800e690:	4619      	mov	r1, r3
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f001 fad5 	bl	800fc42 <USBH_CtlReq>
 800e698:	4603      	mov	r3, r0
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3708      	adds	r7, #8
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b086      	sub	sp, #24
 800e6a6:	af02      	add	r7, sp, #8
 800e6a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e6b0:	69db      	ldr	r3, [r3, #28]
 800e6b2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d002      	beq.n	800e6c8 <CDC_ProcessTransmission+0x26>
 800e6c2:	2b02      	cmp	r3, #2
 800e6c4:	d025      	beq.n	800e712 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800e6c6:	e07c      	b.n	800e7c2 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6cc:	68fa      	ldr	r2, [r7, #12]
 800e6ce:	8b12      	ldrh	r2, [r2, #24]
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d90c      	bls.n	800e6ee <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	69d9      	ldr	r1, [r3, #28]
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	8b1a      	ldrh	r2, [r3, #24]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	7b58      	ldrb	r0, [r3, #13]
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	9300      	str	r3, [sp, #0]
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f001 fdab 	bl	8010242 <USBH_BulkSendData>
 800e6ec:	e00c      	b.n	800e708 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800e6f6:	b29a      	uxth	r2, r3
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	7b58      	ldrb	r0, [r3, #13]
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	9300      	str	r3, [sp, #0]
 800e700:	4603      	mov	r3, r0
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f001 fd9d 	bl	8010242 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2202      	movs	r2, #2
 800e70c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e710:	e057      	b.n	800e7c2 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	7b5b      	ldrb	r3, [r3, #13]
 800e716:	4619      	mov	r1, r3
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f012 fb8b 	bl	8020e34 <USBH_LL_GetURBState>
 800e71e:	4603      	mov	r3, r0
 800e720:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e722:	7afb      	ldrb	r3, [r7, #11]
 800e724:	2b01      	cmp	r3, #1
 800e726:	d136      	bne.n	800e796 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e72c:	68fa      	ldr	r2, [r7, #12]
 800e72e:	8b12      	ldrh	r2, [r2, #24]
 800e730:	4293      	cmp	r3, r2
 800e732:	d90e      	bls.n	800e752 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e738:	68fa      	ldr	r2, [r7, #12]
 800e73a:	8b12      	ldrh	r2, [r2, #24]
 800e73c:	1a9a      	subs	r2, r3, r2
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	69db      	ldr	r3, [r3, #28]
 800e746:	68fa      	ldr	r2, [r7, #12]
 800e748:	8b12      	ldrh	r2, [r2, #24]
 800e74a:	441a      	add	r2, r3
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	61da      	str	r2, [r3, #28]
 800e750:	e002      	b.n	800e758 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2200      	movs	r2, #0
 800e756:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d004      	beq.n	800e76a <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2201      	movs	r2, #1
 800e764:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800e768:	e006      	b.n	800e778 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2200      	movs	r2, #0
 800e76e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f000 f892 	bl	800e89c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2204      	movs	r2, #4
 800e77c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e78c:	2300      	movs	r3, #0
 800e78e:	2200      	movs	r2, #0
 800e790:	f002 fb04 	bl	8010d9c <osMessageQueuePut>
      break;
 800e794:	e014      	b.n	800e7c0 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800e796:	7afb      	ldrb	r3, [r7, #11]
 800e798:	2b02      	cmp	r3, #2
 800e79a:	d111      	bne.n	800e7c0 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2201      	movs	r2, #1
 800e7a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2204      	movs	r2, #4
 800e7a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f002 faee 	bl	8010d9c <osMessageQueuePut>
      break;
 800e7c0:	bf00      	nop
  }
}
 800e7c2:	bf00      	nop
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b086      	sub	sp, #24
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e7d8:	69db      	ldr	r3, [r3, #28]
 800e7da:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e7e6:	2b03      	cmp	r3, #3
 800e7e8:	d002      	beq.n	800e7f0 <CDC_ProcessReception+0x26>
 800e7ea:	2b04      	cmp	r3, #4
 800e7ec:	d00e      	beq.n	800e80c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e7ee:	e051      	b.n	800e894 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	6a19      	ldr	r1, [r3, #32]
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	8b5a      	ldrh	r2, [r3, #26]
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	7b1b      	ldrb	r3, [r3, #12]
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f001 fd45 	bl	801028c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	2204      	movs	r2, #4
 800e806:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e80a:	e043      	b.n	800e894 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	7b1b      	ldrb	r3, [r3, #12]
 800e810:	4619      	mov	r1, r3
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f012 fb0e 	bl	8020e34 <USBH_LL_GetURBState>
 800e818:	4603      	mov	r3, r0
 800e81a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e81c:	7cfb      	ldrb	r3, [r7, #19]
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d137      	bne.n	800e892 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	7b1b      	ldrb	r3, [r3, #12]
 800e826:	4619      	mov	r1, r3
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f012 fa71 	bl	8020d10 <USBH_LL_GetLastXferSize>
 800e82e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	429a      	cmp	r2, r3
 800e838:	d016      	beq.n	800e868 <CDC_ProcessReception+0x9e>
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	8b5b      	ldrh	r3, [r3, #26]
 800e83e:	461a      	mov	r2, r3
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	4293      	cmp	r3, r2
 800e844:	d910      	bls.n	800e868 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	1ad2      	subs	r2, r2, r3
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	6a1a      	ldr	r2, [r3, #32]
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	441a      	add	r2, r3
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	2203      	movs	r2, #3
 800e862:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800e866:	e006      	b.n	800e876 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	2200      	movs	r2, #0
 800e86c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 f81d 	bl	800e8b0 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2204      	movs	r2, #4
 800e87a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e88a:	2300      	movs	r3, #0
 800e88c:	2200      	movs	r2, #0
 800e88e:	f002 fa85 	bl	8010d9c <osMessageQueuePut>
      break;
 800e892:	bf00      	nop
  }
}
 800e894:	bf00      	nop
 800e896:	3718      	adds	r7, #24
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}

0800e89c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e89c:	b480      	push	{r7}
 800e89e:	b083      	sub	sp, #12
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e8a4:	bf00      	nop
 800e8a6:	370c      	adds	r7, #12
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b083      	sub	sp, #12
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e8b8:	bf00      	nop
 800e8ba:	370c      	adds	r7, #12
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr

0800e8c4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e8cc:	bf00      	nop
 800e8ce:	370c      	adds	r7, #12
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	4770      	bx	lr

0800e8d8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	4613      	mov	r3, r2
 800e8e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d101      	bne.n	800e8f0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e8ec:	2302      	movs	r3, #2
 800e8ee:	e044      	b.n	800e97a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	79fa      	ldrb	r2, [r7, #7]
 800e8f4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2200      	movs	r2, #0
 800e904:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f000 f841 	bl	800e990 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2200      	movs	r2, #0
 800e912:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	2200      	movs	r2, #0
 800e91a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2200      	movs	r2, #0
 800e922:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2200      	movs	r2, #0
 800e92a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d003      	beq.n	800e93c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	68ba      	ldr	r2, [r7, #8]
 800e938:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800e93c:	2200      	movs	r2, #0
 800e93e:	2104      	movs	r1, #4
 800e940:	2010      	movs	r0, #16
 800e942:	f002 f9a5 	bl	8010c90 <osMessageQueueNew>
 800e946:	4602      	mov	r2, r0
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800e94e:	4b0d      	ldr	r3, [pc, #52]	; (800e984 <USBH_Init+0xac>)
 800e950:	4a0d      	ldr	r2, [pc, #52]	; (800e988 <USBH_Init+0xb0>)
 800e952:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800e954:	4b0b      	ldr	r3, [pc, #44]	; (800e984 <USBH_Init+0xac>)
 800e956:	2280      	movs	r2, #128	; 0x80
 800e958:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800e95a:	4b0a      	ldr	r3, [pc, #40]	; (800e984 <USBH_Init+0xac>)
 800e95c:	2218      	movs	r2, #24
 800e95e:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800e960:	4a08      	ldr	r2, [pc, #32]	; (800e984 <USBH_Init+0xac>)
 800e962:	68f9      	ldr	r1, [r7, #12]
 800e964:	4809      	ldr	r0, [pc, #36]	; (800e98c <USBH_Init+0xb4>)
 800e966:	f001 fddb 	bl	8010520 <osThreadNew>
 800e96a:	4602      	mov	r2, r0
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e972:	68f8      	ldr	r0, [r7, #12]
 800e974:	f012 f91a 	bl	8020bac <USBH_LL_Init>

  return USBH_OK;
 800e978:	2300      	movs	r3, #0
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	3710      	adds	r7, #16
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}
 800e982:	bf00      	nop
 800e984:	2000cbbc 	.word	0x2000cbbc
 800e988:	08022574 	.word	0x08022574
 800e98c:	0800f5f9 	.word	0x0800f5f9

0800e990 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e990:	b480      	push	{r7}
 800e992:	b085      	sub	sp, #20
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e998:	2300      	movs	r3, #0
 800e99a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e99c:	2300      	movs	r3, #0
 800e99e:	60fb      	str	r3, [r7, #12]
 800e9a0:	e009      	b.n	800e9b6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	33e0      	adds	r3, #224	; 0xe0
 800e9a8:	009b      	lsls	r3, r3, #2
 800e9aa:	4413      	add	r3, r2
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	60fb      	str	r3, [r7, #12]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2b0e      	cmp	r3, #14
 800e9ba:	d9f2      	bls.n	800e9a2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e9bc:	2300      	movs	r3, #0
 800e9be:	60fb      	str	r3, [r7, #12]
 800e9c0:	e009      	b.n	800e9d6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e9c2:	687a      	ldr	r2, [r7, #4]
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	4413      	add	r3, r2
 800e9c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	60fb      	str	r3, [r7, #12]
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9dc:	d3f1      	bcc.n	800e9c2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2240      	movs	r2, #64	; 0x40
 800ea02:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2200      	movs	r2, #0
 800ea08:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2201      	movs	r2, #1
 800ea16:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2200      	movs	r2, #0
 800ea26:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ea2a:	2300      	movs	r3, #0
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3714      	adds	r7, #20
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr

0800ea38 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ea42:	2300      	movs	r3, #0
 800ea44:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d016      	beq.n	800ea7a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d10e      	bne.n	800ea74 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ea5c:	1c59      	adds	r1, r3, #1
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ea64:	687a      	ldr	r2, [r7, #4]
 800ea66:	33de      	adds	r3, #222	; 0xde
 800ea68:	6839      	ldr	r1, [r7, #0]
 800ea6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	73fb      	strb	r3, [r7, #15]
 800ea72:	e004      	b.n	800ea7e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ea74:	2302      	movs	r3, #2
 800ea76:	73fb      	strb	r3, [r7, #15]
 800ea78:	e001      	b.n	800ea7e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ea7a:	2302      	movs	r3, #2
 800ea7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ea7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3714      	adds	r7, #20
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr

0800ea8c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b085      	sub	sp, #20
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	460b      	mov	r3, r1
 800ea96:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800eaa2:	78fa      	ldrb	r2, [r7, #3]
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d204      	bcs.n	800eab2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	78fa      	ldrb	r2, [r7, #3]
 800eaac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800eab0:	e001      	b.n	800eab6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800eab2:	2302      	movs	r3, #2
 800eab4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800eab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3714      	adds	r7, #20
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b087      	sub	sp, #28
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	4608      	mov	r0, r1
 800eace:	4611      	mov	r1, r2
 800ead0:	461a      	mov	r2, r3
 800ead2:	4603      	mov	r3, r0
 800ead4:	70fb      	strb	r3, [r7, #3]
 800ead6:	460b      	mov	r3, r1
 800ead8:	70bb      	strb	r3, [r7, #2]
 800eada:	4613      	mov	r3, r2
 800eadc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800eade:	2300      	movs	r3, #0
 800eae0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800eae2:	2300      	movs	r3, #0
 800eae4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800eaec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800eaee:	e025      	b.n	800eb3c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800eaf0:	7dfb      	ldrb	r3, [r7, #23]
 800eaf2:	221a      	movs	r2, #26
 800eaf4:	fb02 f303 	mul.w	r3, r2, r3
 800eaf8:	3308      	adds	r3, #8
 800eafa:	68fa      	ldr	r2, [r7, #12]
 800eafc:	4413      	add	r3, r2
 800eafe:	3302      	adds	r3, #2
 800eb00:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	795b      	ldrb	r3, [r3, #5]
 800eb06:	78fa      	ldrb	r2, [r7, #3]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d002      	beq.n	800eb12 <USBH_FindInterface+0x4e>
 800eb0c:	78fb      	ldrb	r3, [r7, #3]
 800eb0e:	2bff      	cmp	r3, #255	; 0xff
 800eb10:	d111      	bne.n	800eb36 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800eb16:	78ba      	ldrb	r2, [r7, #2]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d002      	beq.n	800eb22 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eb1c:	78bb      	ldrb	r3, [r7, #2]
 800eb1e:	2bff      	cmp	r3, #255	; 0xff
 800eb20:	d109      	bne.n	800eb36 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eb26:	787a      	ldrb	r2, [r7, #1]
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d002      	beq.n	800eb32 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800eb2c:	787b      	ldrb	r3, [r7, #1]
 800eb2e:	2bff      	cmp	r3, #255	; 0xff
 800eb30:	d101      	bne.n	800eb36 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800eb32:	7dfb      	ldrb	r3, [r7, #23]
 800eb34:	e006      	b.n	800eb44 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800eb36:	7dfb      	ldrb	r3, [r7, #23]
 800eb38:	3301      	adds	r3, #1
 800eb3a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800eb3c:	7dfb      	ldrb	r3, [r7, #23]
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d9d6      	bls.n	800eaf0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800eb42:	23ff      	movs	r3, #255	; 0xff
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	371c      	adds	r7, #28
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr

0800eb50 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f012 f863 	bl	8020c24 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800eb5e:	2101      	movs	r1, #1
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f012 f97a 	bl	8020e5a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800eb66:	2300      	movs	r3, #0
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b088      	sub	sp, #32
 800eb74:	af04      	add	r7, sp, #16
 800eb76:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800eb78:	2302      	movs	r3, #2
 800eb7a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d102      	bne.n	800eb92 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2203      	movs	r2, #3
 800eb90:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	b2db      	uxtb	r3, r3
 800eb98:	2b0b      	cmp	r3, #11
 800eb9a:	f200 823c 	bhi.w	800f016 <USBH_Process+0x4a6>
 800eb9e:	a201      	add	r2, pc, #4	; (adr r2, 800eba4 <USBH_Process+0x34>)
 800eba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba4:	0800ebd5 	.word	0x0800ebd5
 800eba8:	0800ec23 	.word	0x0800ec23
 800ebac:	0800eca7 	.word	0x0800eca7
 800ebb0:	0800ef95 	.word	0x0800ef95
 800ebb4:	0800f017 	.word	0x0800f017
 800ebb8:	0800ed67 	.word	0x0800ed67
 800ebbc:	0800ef1f 	.word	0x0800ef1f
 800ebc0:	0800edb9 	.word	0x0800edb9
 800ebc4:	0800edf5 	.word	0x0800edf5
 800ebc8:	0800ee2f 	.word	0x0800ee2f
 800ebcc:	0800ee77 	.word	0x0800ee77
 800ebd0:	0800ef7d 	.word	0x0800ef7d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	f000 821c 	beq.w	800f01a <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ebe8:	20c8      	movs	r0, #200	; 0xc8
 800ebea:	f012 f97d 	bl	8020ee8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f012 f873 	bl	8020cda <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2201      	movs	r2, #1
 800ec08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ec18:	2300      	movs	r3, #0
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f002 f8be 	bl	8010d9c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800ec20:	e1fb      	b.n	800f01a <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d107      	bne.n	800ec3c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2202      	movs	r2, #2
 800ec38:	701a      	strb	r2, [r3, #0]
 800ec3a:	e025      	b.n	800ec88 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ec42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ec46:	d914      	bls.n	800ec72 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ec4e:	3301      	adds	r3, #1
 800ec50:	b2da      	uxtb	r2, r3
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ec5e:	2b03      	cmp	r3, #3
 800ec60:	d903      	bls.n	800ec6a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	220d      	movs	r2, #13
 800ec66:	701a      	strb	r2, [r3, #0]
 800ec68:	e00e      	b.n	800ec88 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	701a      	strb	r2, [r3, #0]
 800ec70:	e00a      	b.n	800ec88 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ec78:	f103 020a 	add.w	r2, r3, #10
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ec82:	200a      	movs	r0, #10
 800ec84:	f012 f930 	bl	8020ee8 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	2200      	movs	r2, #0
 800eca0:	f002 f87c 	bl	8010d9c <osMessageQueuePut>
#endif
#endif
      break;
 800eca4:	e1c0      	b.n	800f028 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d005      	beq.n	800ecbc <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ecb6:	2104      	movs	r1, #4
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ecbc:	2064      	movs	r0, #100	; 0x64
 800ecbe:	f012 f913 	bl	8020ee8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f011 ffe4 	bl	8020c90 <USBH_LL_GetSpeed>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	461a      	mov	r2, r3
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2205      	movs	r2, #5
 800ecd6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ecd8:	2100      	movs	r1, #0
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f001 fb23 	bl	8010326 <USBH_AllocPipe>
 800ece0:	4603      	mov	r3, r0
 800ece2:	461a      	mov	r2, r3
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ece8:	2180      	movs	r1, #128	; 0x80
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f001 fb1b 	bl	8010326 <USBH_AllocPipe>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	461a      	mov	r2, r3
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	7919      	ldrb	r1, [r3, #4]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ed08:	687a      	ldr	r2, [r7, #4]
 800ed0a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ed0c:	b292      	uxth	r2, r2
 800ed0e:	9202      	str	r2, [sp, #8]
 800ed10:	2200      	movs	r2, #0
 800ed12:	9201      	str	r2, [sp, #4]
 800ed14:	9300      	str	r3, [sp, #0]
 800ed16:	4603      	mov	r3, r0
 800ed18:	2280      	movs	r2, #128	; 0x80
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f001 fad4 	bl	80102c8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	7959      	ldrb	r1, [r3, #5]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ed30:	687a      	ldr	r2, [r7, #4]
 800ed32:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ed34:	b292      	uxth	r2, r2
 800ed36:	9202      	str	r2, [sp, #8]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	9201      	str	r2, [sp, #4]
 800ed3c:	9300      	str	r3, [sp, #0]
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2200      	movs	r2, #0
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f001 fac0 	bl	80102c8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	2200      	movs	r2, #0
 800ed60:	f002 f81c 	bl	8010d9c <osMessageQueuePut>
#endif
#endif
      break;
 800ed64:	e160      	b.n	800f028 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f000 f964 	bl	800f034 <USBH_HandleEnum>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ed70:	7bbb      	ldrb	r3, [r7, #14]
 800ed72:	b2db      	uxtb	r3, r3
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	f040 8152 	bne.w	800f01e <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	d103      	bne.n	800ed94 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2208      	movs	r2, #8
 800ed90:	701a      	strb	r2, [r3, #0]
 800ed92:	e002      	b.n	800ed9a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2207      	movs	r2, #7
 800ed98:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2205      	movs	r2, #5
 800ed9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800edae:	2300      	movs	r3, #0
 800edb0:	2200      	movs	r2, #0
 800edb2:	f001 fff3 	bl	8010d9c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800edb6:	e132      	b.n	800f01e <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	f000 812f 	beq.w	800f022 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800edca:	2101      	movs	r1, #1
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2208      	movs	r2, #8
 800edd4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2205      	movs	r2, #5
 800edda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800edea:	2300      	movs	r3, #0
 800edec:	2200      	movs	r2, #0
 800edee:	f001 ffd5 	bl	8010d9c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800edf2:	e116      	b.n	800f022 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	4619      	mov	r1, r3
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f000 fcf8 	bl	800f7f4 <USBH_SetCfg>
 800ee04:	4603      	mov	r3, r0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d102      	bne.n	800ee10 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2209      	movs	r2, #9
 800ee0e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2201      	movs	r2, #1
 800ee14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ee24:	2300      	movs	r3, #0
 800ee26:	2200      	movs	r2, #0
 800ee28:	f001 ffb8 	bl	8010d9c <osMessageQueuePut>
#endif
#endif
      break;
 800ee2c:	e0fc      	b.n	800f028 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ee34:	f003 0320 	and.w	r3, r3, #32
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d00a      	beq.n	800ee52 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ee3c:	2101      	movs	r1, #1
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 fcfb 	bl	800f83a <USBH_SetFeature>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d106      	bne.n	800ee58 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	220a      	movs	r2, #10
 800ee4e:	701a      	strb	r2, [r3, #0]
 800ee50:	e002      	b.n	800ee58 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	220a      	movs	r2, #10
 800ee56:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	2200      	movs	r2, #0
 800ee70:	f001 ff94 	bl	8010d9c <osMessageQueuePut>
#endif
#endif
      break;
 800ee74:	e0d8      	b.n	800f028 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d03f      	beq.n	800ef00 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2200      	movs	r2, #0
 800ee84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ee88:	2300      	movs	r3, #0
 800ee8a:	73fb      	strb	r3, [r7, #15]
 800ee8c:	e016      	b.n	800eebc <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ee8e:	7bfa      	ldrb	r2, [r7, #15]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	32de      	adds	r2, #222	; 0xde
 800ee94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee98:	791a      	ldrb	r2, [r3, #4]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d108      	bne.n	800eeb6 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800eea4:	7bfa      	ldrb	r2, [r7, #15]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	32de      	adds	r2, #222	; 0xde
 800eeaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800eeb4:	e005      	b.n	800eec2 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800eeb6:	7bfb      	ldrb	r3, [r7, #15]
 800eeb8:	3301      	adds	r3, #1
 800eeba:	73fb      	strb	r3, [r7, #15]
 800eebc:	7bfb      	ldrb	r3, [r7, #15]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d0e5      	beq.n	800ee8e <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d016      	beq.n	800eefa <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eed2:	689b      	ldr	r3, [r3, #8]
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	4798      	blx	r3
 800eed8:	4603      	mov	r3, r0
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d109      	bne.n	800eef2 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2206      	movs	r2, #6
 800eee2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eeea:	2103      	movs	r1, #3
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	4798      	blx	r3
 800eef0:	e006      	b.n	800ef00 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	220d      	movs	r2, #13
 800eef6:	701a      	strb	r2, [r3, #0]
 800eef8:	e002      	b.n	800ef00 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	220d      	movs	r2, #13
 800eefe:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2205      	movs	r2, #5
 800ef04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ef14:	2300      	movs	r3, #0
 800ef16:	2200      	movs	r2, #0
 800ef18:	f001 ff40 	bl	8010d9c <osMessageQueuePut>
#endif
#endif
      break;
 800ef1c:	e084      	b.n	800f028 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d017      	beq.n	800ef58 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef2e:	691b      	ldr	r3, [r3, #16]
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	4798      	blx	r3
 800ef34:	4603      	mov	r3, r0
 800ef36:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ef38:	7bbb      	ldrb	r3, [r7, #14]
 800ef3a:	b2db      	uxtb	r3, r3
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d103      	bne.n	800ef48 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	220b      	movs	r2, #11
 800ef44:	701a      	strb	r2, [r3, #0]
 800ef46:	e00a      	b.n	800ef5e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800ef48:	7bbb      	ldrb	r3, [r7, #14]
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	2b02      	cmp	r3, #2
 800ef4e:	d106      	bne.n	800ef5e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	220d      	movs	r2, #13
 800ef54:	701a      	strb	r2, [r3, #0]
 800ef56:	e002      	b.n	800ef5e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	220d      	movs	r2, #13
 800ef5c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2205      	movs	r2, #5
 800ef62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ef72:	2300      	movs	r3, #0
 800ef74:	2200      	movs	r2, #0
 800ef76:	f001 ff11 	bl	8010d9c <osMessageQueuePut>
#endif
#endif
      break;
 800ef7a:	e055      	b.n	800f028 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d04f      	beq.n	800f026 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef8c:	695b      	ldr	r3, [r3, #20]
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	4798      	blx	r3
      }
      break;
 800ef92:	e048      	b.n	800f026 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2200      	movs	r2, #0
 800ef98:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f7ff fcf7 	bl	800e990 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d009      	beq.n	800efc0 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2200      	movs	r2, #0
 800efbc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d005      	beq.n	800efd6 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800efd0:	2105      	movs	r1, #5
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800efdc:	b2db      	uxtb	r3, r3
 800efde:	2b01      	cmp	r3, #1
 800efe0:	d107      	bne.n	800eff2 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2200      	movs	r2, #0
 800efe6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f7ff fdb0 	bl	800eb50 <USBH_Start>
 800eff0:	e002      	b.n	800eff8 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f011 fe16 	bl	8020c24 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2201      	movs	r2, #1
 800effc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f00c:	2300      	movs	r3, #0
 800f00e:	2200      	movs	r2, #0
 800f010:	f001 fec4 	bl	8010d9c <osMessageQueuePut>
#endif
#endif
      break;
 800f014:	e008      	b.n	800f028 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800f016:	bf00      	nop
 800f018:	e006      	b.n	800f028 <USBH_Process+0x4b8>
      break;
 800f01a:	bf00      	nop
 800f01c:	e004      	b.n	800f028 <USBH_Process+0x4b8>
      break;
 800f01e:	bf00      	nop
 800f020:	e002      	b.n	800f028 <USBH_Process+0x4b8>
    break;
 800f022:	bf00      	nop
 800f024:	e000      	b.n	800f028 <USBH_Process+0x4b8>
      break;
 800f026:	bf00      	nop
  }
  return USBH_OK;
 800f028:	2300      	movs	r3, #0
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3710      	adds	r7, #16
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop

0800f034 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b088      	sub	sp, #32
 800f038:	af04      	add	r7, sp, #16
 800f03a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f03c:	2301      	movs	r3, #1
 800f03e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f040:	2301      	movs	r3, #1
 800f042:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	785b      	ldrb	r3, [r3, #1]
 800f048:	2b07      	cmp	r3, #7
 800f04a:	f200 8208 	bhi.w	800f45e <USBH_HandleEnum+0x42a>
 800f04e:	a201      	add	r2, pc, #4	; (adr r2, 800f054 <USBH_HandleEnum+0x20>)
 800f050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f054:	0800f075 	.word	0x0800f075
 800f058:	0800f133 	.word	0x0800f133
 800f05c:	0800f19d 	.word	0x0800f19d
 800f060:	0800f22b 	.word	0x0800f22b
 800f064:	0800f295 	.word	0x0800f295
 800f068:	0800f305 	.word	0x0800f305
 800f06c:	0800f3a1 	.word	0x0800f3a1
 800f070:	0800f41f 	.word	0x0800f41f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f074:	2108      	movs	r1, #8
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f000 faec 	bl	800f654 <USBH_Get_DevDesc>
 800f07c:	4603      	mov	r3, r0
 800f07e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f080:	7bbb      	ldrb	r3, [r7, #14]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d130      	bne.n	800f0e8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2201      	movs	r2, #1
 800f094:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	7919      	ldrb	r1, [r3, #4]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f0aa:	b292      	uxth	r2, r2
 800f0ac:	9202      	str	r2, [sp, #8]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	9201      	str	r2, [sp, #4]
 800f0b2:	9300      	str	r3, [sp, #0]
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	2280      	movs	r2, #128	; 0x80
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f001 f905 	bl	80102c8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	7959      	ldrb	r1, [r3, #5]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f0d2:	b292      	uxth	r2, r2
 800f0d4:	9202      	str	r2, [sp, #8]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	9201      	str	r2, [sp, #4]
 800f0da:	9300      	str	r3, [sp, #0]
 800f0dc:	4603      	mov	r3, r0
 800f0de:	2200      	movs	r2, #0
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f001 f8f1 	bl	80102c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f0e6:	e1bc      	b.n	800f462 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f0e8:	7bbb      	ldrb	r3, [r7, #14]
 800f0ea:	2b03      	cmp	r3, #3
 800f0ec:	f040 81b9 	bne.w	800f462 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f0f6:	3301      	adds	r3, #1
 800f0f8:	b2da      	uxtb	r2, r3
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f106:	2b03      	cmp	r3, #3
 800f108:	d903      	bls.n	800f112 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	220d      	movs	r2, #13
 800f10e:	701a      	strb	r2, [r3, #0]
      break;
 800f110:	e1a7      	b.n	800f462 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	795b      	ldrb	r3, [r3, #5]
 800f116:	4619      	mov	r1, r3
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f001 f925 	bl	8010368 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	791b      	ldrb	r3, [r3, #4]
 800f122:	4619      	mov	r1, r3
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f001 f91f 	bl	8010368 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2200      	movs	r2, #0
 800f12e:	701a      	strb	r2, [r3, #0]
      break;
 800f130:	e197      	b.n	800f462 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f132:	2112      	movs	r1, #18
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f000 fa8d 	bl	800f654 <USBH_Get_DevDesc>
 800f13a:	4603      	mov	r3, r0
 800f13c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f13e:	7bbb      	ldrb	r3, [r7, #14]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d103      	bne.n	800f14c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2202      	movs	r2, #2
 800f148:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f14a:	e18c      	b.n	800f466 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f14c:	7bbb      	ldrb	r3, [r7, #14]
 800f14e:	2b03      	cmp	r3, #3
 800f150:	f040 8189 	bne.w	800f466 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f15a:	3301      	adds	r3, #1
 800f15c:	b2da      	uxtb	r2, r3
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f16a:	2b03      	cmp	r3, #3
 800f16c:	d903      	bls.n	800f176 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	220d      	movs	r2, #13
 800f172:	701a      	strb	r2, [r3, #0]
      break;
 800f174:	e177      	b.n	800f466 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	795b      	ldrb	r3, [r3, #5]
 800f17a:	4619      	mov	r1, r3
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f001 f8f3 	bl	8010368 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	791b      	ldrb	r3, [r3, #4]
 800f186:	4619      	mov	r1, r3
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f001 f8ed 	bl	8010368 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2200      	movs	r2, #0
 800f192:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2200      	movs	r2, #0
 800f198:	701a      	strb	r2, [r3, #0]
      break;
 800f19a:	e164      	b.n	800f466 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f19c:	2101      	movs	r1, #1
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 fb04 	bl	800f7ac <USBH_SetAddress>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f1a8:	7bbb      	ldrb	r3, [r7, #14]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d132      	bne.n	800f214 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800f1ae:	2002      	movs	r0, #2
 800f1b0:	f011 fe9a 	bl	8020ee8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2203      	movs	r2, #3
 800f1c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	7919      	ldrb	r1, [r3, #4]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f1d6:	b292      	uxth	r2, r2
 800f1d8:	9202      	str	r2, [sp, #8]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	9201      	str	r2, [sp, #4]
 800f1de:	9300      	str	r3, [sp, #0]
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2280      	movs	r2, #128	; 0x80
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f001 f86f 	bl	80102c8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	7959      	ldrb	r1, [r3, #5]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f1fa:	687a      	ldr	r2, [r7, #4]
 800f1fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f1fe:	b292      	uxth	r2, r2
 800f200:	9202      	str	r2, [sp, #8]
 800f202:	2200      	movs	r2, #0
 800f204:	9201      	str	r2, [sp, #4]
 800f206:	9300      	str	r3, [sp, #0]
 800f208:	4603      	mov	r3, r0
 800f20a:	2200      	movs	r2, #0
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f001 f85b 	bl	80102c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f212:	e12a      	b.n	800f46a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f214:	7bbb      	ldrb	r3, [r7, #14]
 800f216:	2b03      	cmp	r3, #3
 800f218:	f040 8127 	bne.w	800f46a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	220d      	movs	r2, #13
 800f220:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2200      	movs	r2, #0
 800f226:	705a      	strb	r2, [r3, #1]
      break;
 800f228:	e11f      	b.n	800f46a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f22a:	2109      	movs	r1, #9
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f000 fa39 	bl	800f6a4 <USBH_Get_CfgDesc>
 800f232:	4603      	mov	r3, r0
 800f234:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f236:	7bbb      	ldrb	r3, [r7, #14]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d103      	bne.n	800f244 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2204      	movs	r2, #4
 800f240:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f242:	e114      	b.n	800f46e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f244:	7bbb      	ldrb	r3, [r7, #14]
 800f246:	2b03      	cmp	r3, #3
 800f248:	f040 8111 	bne.w	800f46e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f252:	3301      	adds	r3, #1
 800f254:	b2da      	uxtb	r2, r3
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f262:	2b03      	cmp	r3, #3
 800f264:	d903      	bls.n	800f26e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	220d      	movs	r2, #13
 800f26a:	701a      	strb	r2, [r3, #0]
      break;
 800f26c:	e0ff      	b.n	800f46e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	795b      	ldrb	r3, [r3, #5]
 800f272:	4619      	mov	r1, r3
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f001 f877 	bl	8010368 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	791b      	ldrb	r3, [r3, #4]
 800f27e:	4619      	mov	r1, r3
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f001 f871 	bl	8010368 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2200      	movs	r2, #0
 800f28a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2200      	movs	r2, #0
 800f290:	701a      	strb	r2, [r3, #0]
      break;
 800f292:	e0ec      	b.n	800f46e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800f29a:	4619      	mov	r1, r3
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f000 fa01 	bl	800f6a4 <USBH_Get_CfgDesc>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f2a6:	7bbb      	ldrb	r3, [r7, #14]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d103      	bne.n	800f2b4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2205      	movs	r2, #5
 800f2b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f2b2:	e0de      	b.n	800f472 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f2b4:	7bbb      	ldrb	r3, [r7, #14]
 800f2b6:	2b03      	cmp	r3, #3
 800f2b8:	f040 80db 	bne.w	800f472 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	b2da      	uxtb	r2, r3
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f2d2:	2b03      	cmp	r3, #3
 800f2d4:	d903      	bls.n	800f2de <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	220d      	movs	r2, #13
 800f2da:	701a      	strb	r2, [r3, #0]
      break;
 800f2dc:	e0c9      	b.n	800f472 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	795b      	ldrb	r3, [r3, #5]
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f001 f83f 	bl	8010368 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	791b      	ldrb	r3, [r3, #4]
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f001 f839 	bl	8010368 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	701a      	strb	r2, [r3, #0]
      break;
 800f302:	e0b6      	b.n	800f472 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d036      	beq.n	800f37c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f31a:	23ff      	movs	r3, #255	; 0xff
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 f9e5 	bl	800f6ec <USBH_Get_StringDesc>
 800f322:	4603      	mov	r3, r0
 800f324:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f326:	7bbb      	ldrb	r3, [r7, #14]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d111      	bne.n	800f350 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2206      	movs	r2, #6
 800f330:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2205      	movs	r2, #5
 800f336:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f346:	2300      	movs	r3, #0
 800f348:	2200      	movs	r2, #0
 800f34a:	f001 fd27 	bl	8010d9c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f34e:	e092      	b.n	800f476 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f350:	7bbb      	ldrb	r3, [r7, #14]
 800f352:	2b03      	cmp	r3, #3
 800f354:	f040 808f 	bne.w	800f476 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2206      	movs	r2, #6
 800f35c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2205      	movs	r2, #5
 800f362:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f372:	2300      	movs	r3, #0
 800f374:	2200      	movs	r2, #0
 800f376:	f001 fd11 	bl	8010d9c <osMessageQueuePut>
      break;
 800f37a:	e07c      	b.n	800f476 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2206      	movs	r2, #6
 800f380:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2205      	movs	r2, #5
 800f386:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f396:	2300      	movs	r3, #0
 800f398:	2200      	movs	r2, #0
 800f39a:	f001 fcff 	bl	8010d9c <osMessageQueuePut>
      break;
 800f39e:	e06a      	b.n	800f476 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d027      	beq.n	800f3fa <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f3b6:	23ff      	movs	r3, #255	; 0xff
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f000 f997 	bl	800f6ec <USBH_Get_StringDesc>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f3c2:	7bbb      	ldrb	r3, [r7, #14]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d103      	bne.n	800f3d0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2207      	movs	r2, #7
 800f3cc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f3ce:	e054      	b.n	800f47a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f3d0:	7bbb      	ldrb	r3, [r7, #14]
 800f3d2:	2b03      	cmp	r3, #3
 800f3d4:	d151      	bne.n	800f47a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2207      	movs	r2, #7
 800f3da:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2205      	movs	r2, #5
 800f3e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f001 fcd2 	bl	8010d9c <osMessageQueuePut>
      break;
 800f3f8:	e03f      	b.n	800f47a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2207      	movs	r2, #7
 800f3fe:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2205      	movs	r2, #5
 800f404:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f414:	2300      	movs	r3, #0
 800f416:	2200      	movs	r2, #0
 800f418:	f001 fcc0 	bl	8010d9c <osMessageQueuePut>
      break;
 800f41c:	e02d      	b.n	800f47a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800f424:	2b00      	cmp	r3, #0
 800f426:	d017      	beq.n	800f458 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f434:	23ff      	movs	r3, #255	; 0xff
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f000 f958 	bl	800f6ec <USBH_Get_StringDesc>
 800f43c:	4603      	mov	r3, r0
 800f43e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f440:	7bbb      	ldrb	r3, [r7, #14]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d102      	bne.n	800f44c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f446:	2300      	movs	r3, #0
 800f448:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f44a:	e018      	b.n	800f47e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f44c:	7bbb      	ldrb	r3, [r7, #14]
 800f44e:	2b03      	cmp	r3, #3
 800f450:	d115      	bne.n	800f47e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800f452:	2300      	movs	r3, #0
 800f454:	73fb      	strb	r3, [r7, #15]
      break;
 800f456:	e012      	b.n	800f47e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800f458:	2300      	movs	r3, #0
 800f45a:	73fb      	strb	r3, [r7, #15]
      break;
 800f45c:	e00f      	b.n	800f47e <USBH_HandleEnum+0x44a>

    default:
      break;
 800f45e:	bf00      	nop
 800f460:	e00e      	b.n	800f480 <USBH_HandleEnum+0x44c>
      break;
 800f462:	bf00      	nop
 800f464:	e00c      	b.n	800f480 <USBH_HandleEnum+0x44c>
      break;
 800f466:	bf00      	nop
 800f468:	e00a      	b.n	800f480 <USBH_HandleEnum+0x44c>
      break;
 800f46a:	bf00      	nop
 800f46c:	e008      	b.n	800f480 <USBH_HandleEnum+0x44c>
      break;
 800f46e:	bf00      	nop
 800f470:	e006      	b.n	800f480 <USBH_HandleEnum+0x44c>
      break;
 800f472:	bf00      	nop
 800f474:	e004      	b.n	800f480 <USBH_HandleEnum+0x44c>
      break;
 800f476:	bf00      	nop
 800f478:	e002      	b.n	800f480 <USBH_HandleEnum+0x44c>
      break;
 800f47a:	bf00      	nop
 800f47c:	e000      	b.n	800f480 <USBH_HandleEnum+0x44c>
      break;
 800f47e:	bf00      	nop
  }
  return Status;
 800f480:	7bfb      	ldrb	r3, [r7, #15]
}
 800f482:	4618      	mov	r0, r3
 800f484:	3710      	adds	r7, #16
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}
 800f48a:	bf00      	nop

0800f48c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	683a      	ldr	r2, [r7, #0]
 800f49a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800f49e:	bf00      	nop
 800f4a0:	370c      	adds	r7, #12
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a8:	4770      	bx	lr

0800f4aa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f4aa:	b580      	push	{r7, lr}
 800f4ac:	b082      	sub	sp, #8
 800f4ae:	af00      	add	r7, sp, #0
 800f4b0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f4b8:	1c5a      	adds	r2, r3, #1
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 f804 	bl	800f4ce <USBH_HandleSof>
}
 800f4c6:	bf00      	nop
 800f4c8:	3708      	adds	r7, #8
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}

0800f4ce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f4ce:	b580      	push	{r7, lr}
 800f4d0:	b082      	sub	sp, #8
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	2b0b      	cmp	r3, #11
 800f4de:	d10a      	bne.n	800f4f6 <USBH_HandleSof+0x28>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d005      	beq.n	800f4f6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f4f0:	699b      	ldr	r3, [r3, #24]
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	4798      	blx	r3
  }
}
 800f4f6:	bf00      	nop
 800f4f8:	3708      	adds	r7, #8
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b082      	sub	sp, #8
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2201      	movs	r2, #1
 800f50a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2201      	movs	r2, #1
 800f512:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f522:	2300      	movs	r3, #0
 800f524:	2200      	movs	r2, #0
 800f526:	f001 fc39 	bl	8010d9c <osMessageQueuePut>
#endif
#endif

  return;
 800f52a:	bf00      	nop
}
 800f52c:	3708      	adds	r7, #8
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}

0800f532 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f532:	b480      	push	{r7}
 800f534:	b083      	sub	sp, #12
 800f536:	af00      	add	r7, sp, #0
 800f538:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2200      	movs	r2, #0
 800f53e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f542:	bf00      	nop
}
 800f544:	370c      	adds	r7, #12
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr

0800f54e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f54e:	b580      	push	{r7, lr}
 800f550:	b082      	sub	sp, #8
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2201      	movs	r2, #1
 800f55a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2200      	movs	r2, #0
 800f562:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2200      	movs	r2, #0
 800f56a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2201      	movs	r2, #1
 800f572:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f582:	2300      	movs	r3, #0
 800f584:	2200      	movs	r2, #0
 800f586:	f001 fc09 	bl	8010d9c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800f58a:	2300      	movs	r3, #0
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3708      	adds	r7, #8
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b082      	sub	sp, #8
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2201      	movs	r2, #1
 800f5a0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f011 fb50 	bl	8020c5a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	791b      	ldrb	r3, [r3, #4]
 800f5be:	4619      	mov	r1, r3
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f000 fed1 	bl	8010368 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	795b      	ldrb	r3, [r3, #5]
 800f5ca:	4619      	mov	r1, r3
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f000 fecb 	bl	8010368 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2201      	movs	r2, #1
 800f5d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	f001 fbd7 	bl	8010d9c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800f5ee:	2300      	movs	r3, #0
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3708      	adds	r7, #8
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}

0800f5f8 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b084      	sub	sp, #16
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800f60c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f610:	2200      	movs	r2, #0
 800f612:	f001 fc37 	bl	8010e84 <osMessageQueueGet>
 800f616:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d1f0      	bne.n	800f600 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f7ff faa6 	bl	800eb70 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800f624:	e7ec      	b.n	800f600 <USBH_Process_OS+0x8>

0800f626 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800f626:	b580      	push	{r7, lr}
 800f628:	b082      	sub	sp, #8
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2201      	movs	r2, #1
 800f632:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f642:	2300      	movs	r3, #0
 800f644:	2200      	movs	r2, #0
 800f646:	f001 fba9 	bl	8010d9c <osMessageQueuePut>
#endif

  return USBH_OK;
 800f64a:	2300      	movs	r3, #0
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3708      	adds	r7, #8
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b086      	sub	sp, #24
 800f658:	af02      	add	r7, sp, #8
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	460b      	mov	r3, r1
 800f65e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f666:	78fb      	ldrb	r3, [r7, #3]
 800f668:	b29b      	uxth	r3, r3
 800f66a:	9300      	str	r3, [sp, #0]
 800f66c:	4613      	mov	r3, r2
 800f66e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f672:	2100      	movs	r1, #0
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 f864 	bl	800f742 <USBH_GetDescriptor>
 800f67a:	4603      	mov	r3, r0
 800f67c:	73fb      	strb	r3, [r7, #15]
 800f67e:	7bfb      	ldrb	r3, [r7, #15]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d10a      	bne.n	800f69a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f690:	78fa      	ldrb	r2, [r7, #3]
 800f692:	b292      	uxth	r2, r2
 800f694:	4619      	mov	r1, r3
 800f696:	f000 f918 	bl	800f8ca <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3710      	adds	r7, #16
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b086      	sub	sp, #24
 800f6a8:	af02      	add	r7, sp, #8
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	331c      	adds	r3, #28
 800f6b4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f6b6:	887b      	ldrh	r3, [r7, #2]
 800f6b8:	9300      	str	r3, [sp, #0]
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f6c0:	2100      	movs	r1, #0
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 f83d 	bl	800f742 <USBH_GetDescriptor>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	72fb      	strb	r3, [r7, #11]
 800f6cc:	7afb      	ldrb	r3, [r7, #11]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d107      	bne.n	800f6e2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f6d8:	887a      	ldrh	r2, [r7, #2]
 800f6da:	68f9      	ldr	r1, [r7, #12]
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f000 f964 	bl	800f9aa <USBH_ParseCfgDesc>
  }

  return status;
 800f6e2:	7afb      	ldrb	r3, [r7, #11]
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3710      	adds	r7, #16
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b088      	sub	sp, #32
 800f6f0:	af02      	add	r7, sp, #8
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	607a      	str	r2, [r7, #4]
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	72fb      	strb	r3, [r7, #11]
 800f6fc:	4613      	mov	r3, r2
 800f6fe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f700:	7afb      	ldrb	r3, [r7, #11]
 800f702:	b29b      	uxth	r3, r3
 800f704:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f708:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f710:	893b      	ldrh	r3, [r7, #8]
 800f712:	9300      	str	r3, [sp, #0]
 800f714:	460b      	mov	r3, r1
 800f716:	2100      	movs	r1, #0
 800f718:	68f8      	ldr	r0, [r7, #12]
 800f71a:	f000 f812 	bl	800f742 <USBH_GetDescriptor>
 800f71e:	4603      	mov	r3, r0
 800f720:	75fb      	strb	r3, [r7, #23]
 800f722:	7dfb      	ldrb	r3, [r7, #23]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d107      	bne.n	800f738 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f72e:	893a      	ldrh	r2, [r7, #8]
 800f730:	6879      	ldr	r1, [r7, #4]
 800f732:	4618      	mov	r0, r3
 800f734:	f000 fa37 	bl	800fba6 <USBH_ParseStringDesc>
  }

  return status;
 800f738:	7dfb      	ldrb	r3, [r7, #23]
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3718      	adds	r7, #24
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}

0800f742 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f742:	b580      	push	{r7, lr}
 800f744:	b084      	sub	sp, #16
 800f746:	af00      	add	r7, sp, #0
 800f748:	60f8      	str	r0, [r7, #12]
 800f74a:	607b      	str	r3, [r7, #4]
 800f74c:	460b      	mov	r3, r1
 800f74e:	72fb      	strb	r3, [r7, #11]
 800f750:	4613      	mov	r3, r2
 800f752:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	789b      	ldrb	r3, [r3, #2]
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d11c      	bne.n	800f796 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f75c:	7afb      	ldrb	r3, [r7, #11]
 800f75e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f762:	b2da      	uxtb	r2, r3
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	2206      	movs	r2, #6
 800f76c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	893a      	ldrh	r2, [r7, #8]
 800f772:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f774:	893b      	ldrh	r3, [r7, #8]
 800f776:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f77a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f77e:	d104      	bne.n	800f78a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	f240 4209 	movw	r2, #1033	; 0x409
 800f786:	829a      	strh	r2, [r3, #20]
 800f788:	e002      	b.n	800f790 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	2200      	movs	r2, #0
 800f78e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	8b3a      	ldrh	r2, [r7, #24]
 800f794:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f796:	8b3b      	ldrh	r3, [r7, #24]
 800f798:	461a      	mov	r2, r3
 800f79a:	6879      	ldr	r1, [r7, #4]
 800f79c:	68f8      	ldr	r0, [r7, #12]
 800f79e:	f000 fa50 	bl	800fc42 <USBH_CtlReq>
 800f7a2:	4603      	mov	r3, r0
}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	3710      	adds	r7, #16
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}

0800f7ac <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	460b      	mov	r3, r1
 800f7b6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	789b      	ldrb	r3, [r3, #2]
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d10f      	bne.n	800f7e0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2205      	movs	r2, #5
 800f7ca:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f7cc:	78fb      	ldrb	r3, [r7, #3]
 800f7ce:	b29a      	uxth	r2, r3
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	2100      	movs	r1, #0
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f000 fa2c 	bl	800fc42 <USBH_CtlReq>
 800f7ea:	4603      	mov	r3, r0
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3708      	adds	r7, #8
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	460b      	mov	r3, r1
 800f7fe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	789b      	ldrb	r3, [r3, #2]
 800f804:	2b01      	cmp	r3, #1
 800f806:	d10e      	bne.n	800f826 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2200      	movs	r2, #0
 800f80c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2209      	movs	r2, #9
 800f812:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	887a      	ldrh	r2, [r7, #2]
 800f818:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2200      	movs	r2, #0
 800f81e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2200      	movs	r2, #0
 800f824:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f826:	2200      	movs	r2, #0
 800f828:	2100      	movs	r1, #0
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f000 fa09 	bl	800fc42 <USBH_CtlReq>
 800f830:	4603      	mov	r3, r0
}
 800f832:	4618      	mov	r0, r3
 800f834:	3708      	adds	r7, #8
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}

0800f83a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f83a:	b580      	push	{r7, lr}
 800f83c:	b082      	sub	sp, #8
 800f83e:	af00      	add	r7, sp, #0
 800f840:	6078      	str	r0, [r7, #4]
 800f842:	460b      	mov	r3, r1
 800f844:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	789b      	ldrb	r3, [r3, #2]
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d10f      	bne.n	800f86e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2200      	movs	r2, #0
 800f852:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2203      	movs	r2, #3
 800f858:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f85a:	78fb      	ldrb	r3, [r7, #3]
 800f85c:	b29a      	uxth	r2, r3
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2200      	movs	r2, #0
 800f866:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2200      	movs	r2, #0
 800f86c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f86e:	2200      	movs	r2, #0
 800f870:	2100      	movs	r1, #0
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f000 f9e5 	bl	800fc42 <USBH_CtlReq>
 800f878:	4603      	mov	r3, r0
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3708      	adds	r7, #8
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}

0800f882 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f882:	b580      	push	{r7, lr}
 800f884:	b082      	sub	sp, #8
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
 800f88a:	460b      	mov	r3, r1
 800f88c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	789b      	ldrb	r3, [r3, #2]
 800f892:	2b01      	cmp	r3, #1
 800f894:	d10f      	bne.n	800f8b6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2202      	movs	r2, #2
 800f89a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2201      	movs	r2, #1
 800f8a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f8a8:	78fb      	ldrb	r3, [r7, #3]
 800f8aa:	b29a      	uxth	r2, r3
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	2100      	movs	r1, #0
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f000 f9c1 	bl	800fc42 <USBH_CtlReq>
 800f8c0:	4603      	mov	r3, r0
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3708      	adds	r7, #8
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}

0800f8ca <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f8ca:	b480      	push	{r7}
 800f8cc:	b085      	sub	sp, #20
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	60f8      	str	r0, [r7, #12]
 800f8d2:	60b9      	str	r1, [r7, #8]
 800f8d4:	4613      	mov	r3, r2
 800f8d6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	781a      	ldrb	r2, [r3, #0]
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	785a      	ldrb	r2, [r3, #1]
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	3302      	adds	r3, #2
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	b29a      	uxth	r2, r3
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	3303      	adds	r3, #3
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	b29b      	uxth	r3, r3
 800f8f8:	021b      	lsls	r3, r3, #8
 800f8fa:	b29b      	uxth	r3, r3
 800f8fc:	4313      	orrs	r3, r2
 800f8fe:	b29a      	uxth	r2, r3
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	791a      	ldrb	r2, [r3, #4]
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	795a      	ldrb	r2, [r3, #5]
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	799a      	ldrb	r2, [r3, #6]
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	79da      	ldrb	r2, [r3, #7]
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800f924:	88fb      	ldrh	r3, [r7, #6]
 800f926:	2b08      	cmp	r3, #8
 800f928:	d939      	bls.n	800f99e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	3308      	adds	r3, #8
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	b29a      	uxth	r2, r3
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	3309      	adds	r3, #9
 800f936:	781b      	ldrb	r3, [r3, #0]
 800f938:	b29b      	uxth	r3, r3
 800f93a:	021b      	lsls	r3, r3, #8
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	4313      	orrs	r3, r2
 800f940:	b29a      	uxth	r2, r3
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	330a      	adds	r3, #10
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	b29a      	uxth	r2, r3
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	330b      	adds	r3, #11
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	b29b      	uxth	r3, r3
 800f956:	021b      	lsls	r3, r3, #8
 800f958:	b29b      	uxth	r3, r3
 800f95a:	4313      	orrs	r3, r2
 800f95c:	b29a      	uxth	r2, r3
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	330c      	adds	r3, #12
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	b29a      	uxth	r2, r3
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	330d      	adds	r3, #13
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	b29b      	uxth	r3, r3
 800f972:	021b      	lsls	r3, r3, #8
 800f974:	b29b      	uxth	r3, r3
 800f976:	4313      	orrs	r3, r2
 800f978:	b29a      	uxth	r2, r3
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	7b9a      	ldrb	r2, [r3, #14]
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	7bda      	ldrb	r2, [r3, #15]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	7c1a      	ldrb	r2, [r3, #16]
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	7c5a      	ldrb	r2, [r3, #17]
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	745a      	strb	r2, [r3, #17]
  }
}
 800f99e:	bf00      	nop
 800f9a0:	3714      	adds	r7, #20
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr

0800f9aa <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f9aa:	b580      	push	{r7, lr}
 800f9ac:	b08a      	sub	sp, #40	; 0x28
 800f9ae:	af00      	add	r7, sp, #0
 800f9b0:	60f8      	str	r0, [r7, #12]
 800f9b2:	60b9      	str	r1, [r7, #8]
 800f9b4:	4613      	mov	r3, r2
 800f9b6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	781a      	ldrb	r2, [r3, #0]
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	785a      	ldrb	r2, [r3, #1]
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	3302      	adds	r3, #2
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	b29a      	uxth	r2, r3
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	3303      	adds	r3, #3
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	b29b      	uxth	r3, r3
 800f9ec:	021b      	lsls	r3, r3, #8
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	4313      	orrs	r3, r2
 800f9f2:	b29a      	uxth	r2, r3
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	791a      	ldrb	r2, [r3, #4]
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	795a      	ldrb	r2, [r3, #5]
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	799a      	ldrb	r2, [r3, #6]
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	79da      	ldrb	r2, [r3, #7]
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	7a1a      	ldrb	r2, [r3, #8]
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fa20:	88fb      	ldrh	r3, [r7, #6]
 800fa22:	2b09      	cmp	r3, #9
 800fa24:	d95f      	bls.n	800fae6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800fa26:	2309      	movs	r3, #9
 800fa28:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fa2e:	e051      	b.n	800fad4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fa30:	f107 0316 	add.w	r3, r7, #22
 800fa34:	4619      	mov	r1, r3
 800fa36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa38:	f000 f8e8 	bl	800fc0c <USBH_GetNextDesc>
 800fa3c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800fa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa40:	785b      	ldrb	r3, [r3, #1]
 800fa42:	2b04      	cmp	r3, #4
 800fa44:	d146      	bne.n	800fad4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800fa46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fa4a:	221a      	movs	r2, #26
 800fa4c:	fb02 f303 	mul.w	r3, r2, r3
 800fa50:	3308      	adds	r3, #8
 800fa52:	68fa      	ldr	r2, [r7, #12]
 800fa54:	4413      	add	r3, r2
 800fa56:	3302      	adds	r3, #2
 800fa58:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800fa5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa5c:	69f8      	ldr	r0, [r7, #28]
 800fa5e:	f000 f846 	bl	800faee <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800fa62:	2300      	movs	r3, #0
 800fa64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fa6c:	e022      	b.n	800fab4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fa6e:	f107 0316 	add.w	r3, r7, #22
 800fa72:	4619      	mov	r1, r3
 800fa74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa76:	f000 f8c9 	bl	800fc0c <USBH_GetNextDesc>
 800fa7a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7e:	785b      	ldrb	r3, [r3, #1]
 800fa80:	2b05      	cmp	r3, #5
 800fa82:	d117      	bne.n	800fab4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800fa84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fa88:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fa8c:	3201      	adds	r2, #1
 800fa8e:	00d2      	lsls	r2, r2, #3
 800fa90:	211a      	movs	r1, #26
 800fa92:	fb01 f303 	mul.w	r3, r1, r3
 800fa96:	4413      	add	r3, r2
 800fa98:	3308      	adds	r3, #8
 800fa9a:	68fa      	ldr	r2, [r7, #12]
 800fa9c:	4413      	add	r3, r2
 800fa9e:	3304      	adds	r3, #4
 800faa0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800faa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800faa4:	69b8      	ldr	r0, [r7, #24]
 800faa6:	f000 f851 	bl	800fb4c <USBH_ParseEPDesc>
            ep_ix++;
 800faaa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800faae:	3301      	adds	r3, #1
 800fab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	791b      	ldrb	r3, [r3, #4]
 800fab8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fabc:	429a      	cmp	r2, r3
 800fabe:	d204      	bcs.n	800faca <USBH_ParseCfgDesc+0x120>
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	885a      	ldrh	r2, [r3, #2]
 800fac4:	8afb      	ldrh	r3, [r7, #22]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d8d1      	bhi.n	800fa6e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800faca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800face:	3301      	adds	r3, #1
 800fad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fad4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fad8:	2b01      	cmp	r3, #1
 800fada:	d804      	bhi.n	800fae6 <USBH_ParseCfgDesc+0x13c>
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	885a      	ldrh	r2, [r3, #2]
 800fae0:	8afb      	ldrh	r3, [r7, #22]
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d8a4      	bhi.n	800fa30 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800fae6:	bf00      	nop
 800fae8:	3728      	adds	r7, #40	; 0x28
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}

0800faee <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800faee:	b480      	push	{r7}
 800faf0:	b083      	sub	sp, #12
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	6078      	str	r0, [r7, #4]
 800faf6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	781a      	ldrb	r2, [r3, #0]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	785a      	ldrb	r2, [r3, #1]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	789a      	ldrb	r2, [r3, #2]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	78da      	ldrb	r2, [r3, #3]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	791a      	ldrb	r2, [r3, #4]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	795a      	ldrb	r2, [r3, #5]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	799a      	ldrb	r2, [r3, #6]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	79da      	ldrb	r2, [r3, #7]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	7a1a      	ldrb	r2, [r3, #8]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	721a      	strb	r2, [r3, #8]
}
 800fb40:	bf00      	nop
 800fb42:	370c      	adds	r7, #12
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr

0800fb4c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b083      	sub	sp, #12
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	781a      	ldrb	r2, [r3, #0]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	785a      	ldrb	r2, [r3, #1]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	789a      	ldrb	r2, [r3, #2]
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	78da      	ldrb	r2, [r3, #3]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	3304      	adds	r3, #4
 800fb7a:	781b      	ldrb	r3, [r3, #0]
 800fb7c:	b29a      	uxth	r2, r3
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	3305      	adds	r3, #5
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	b29b      	uxth	r3, r3
 800fb86:	021b      	lsls	r3, r3, #8
 800fb88:	b29b      	uxth	r3, r3
 800fb8a:	4313      	orrs	r3, r2
 800fb8c:	b29a      	uxth	r2, r3
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	799a      	ldrb	r2, [r3, #6]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	719a      	strb	r2, [r3, #6]
}
 800fb9a:	bf00      	nop
 800fb9c:	370c      	adds	r7, #12
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba4:	4770      	bx	lr

0800fba6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800fba6:	b480      	push	{r7}
 800fba8:	b087      	sub	sp, #28
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	60f8      	str	r0, [r7, #12]
 800fbae:	60b9      	str	r1, [r7, #8]
 800fbb0:	4613      	mov	r3, r2
 800fbb2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	3301      	adds	r3, #1
 800fbb8:	781b      	ldrb	r3, [r3, #0]
 800fbba:	2b03      	cmp	r3, #3
 800fbbc:	d120      	bne.n	800fc00 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	1e9a      	subs	r2, r3, #2
 800fbc4:	88fb      	ldrh	r3, [r7, #6]
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	bf28      	it	cs
 800fbca:	4613      	movcs	r3, r2
 800fbcc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	3302      	adds	r3, #2
 800fbd2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	82fb      	strh	r3, [r7, #22]
 800fbd8:	e00b      	b.n	800fbf2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800fbda:	8afb      	ldrh	r3, [r7, #22]
 800fbdc:	68fa      	ldr	r2, [r7, #12]
 800fbde:	4413      	add	r3, r2
 800fbe0:	781a      	ldrb	r2, [r3, #0]
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	3301      	adds	r3, #1
 800fbea:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800fbec:	8afb      	ldrh	r3, [r7, #22]
 800fbee:	3302      	adds	r3, #2
 800fbf0:	82fb      	strh	r3, [r7, #22]
 800fbf2:	8afa      	ldrh	r2, [r7, #22]
 800fbf4:	8abb      	ldrh	r3, [r7, #20]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d3ef      	bcc.n	800fbda <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	701a      	strb	r2, [r3, #0]
  }
}
 800fc00:	bf00      	nop
 800fc02:	371c      	adds	r7, #28
 800fc04:	46bd      	mov	sp, r7
 800fc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0a:	4770      	bx	lr

0800fc0c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b085      	sub	sp, #20
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	881a      	ldrh	r2, [r3, #0]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	4413      	add	r3, r2
 800fc22:	b29a      	uxth	r2, r3
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	781b      	ldrb	r3, [r3, #0]
 800fc2c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	4413      	add	r3, r2
 800fc32:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fc34:	68fb      	ldr	r3, [r7, #12]
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3714      	adds	r7, #20
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr

0800fc42 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800fc42:	b580      	push	{r7, lr}
 800fc44:	b086      	sub	sp, #24
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	60f8      	str	r0, [r7, #12]
 800fc4a:	60b9      	str	r1, [r7, #8]
 800fc4c:	4613      	mov	r3, r2
 800fc4e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800fc50:	2301      	movs	r3, #1
 800fc52:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	789b      	ldrb	r3, [r3, #2]
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	d002      	beq.n	800fc62 <USBH_CtlReq+0x20>
 800fc5c:	2b02      	cmp	r3, #2
 800fc5e:	d01d      	beq.n	800fc9c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800fc60:	e043      	b.n	800fcea <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	68ba      	ldr	r2, [r7, #8]
 800fc66:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	88fa      	ldrh	r2, [r7, #6]
 800fc6c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	2201      	movs	r2, #1
 800fc72:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2202      	movs	r2, #2
 800fc78:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2203      	movs	r2, #3
 800fc82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fc92:	2300      	movs	r3, #0
 800fc94:	2200      	movs	r2, #0
 800fc96:	f001 f881 	bl	8010d9c <osMessageQueuePut>
      break;
 800fc9a:	e026      	b.n	800fcea <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800fc9c:	68f8      	ldr	r0, [r7, #12]
 800fc9e:	f000 f829 	bl	800fcf4 <USBH_HandleControl>
 800fca2:	4603      	mov	r3, r0
 800fca4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800fca6:	7dfb      	ldrb	r3, [r7, #23]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d002      	beq.n	800fcb2 <USBH_CtlReq+0x70>
 800fcac:	7dfb      	ldrb	r3, [r7, #23]
 800fcae:	2b03      	cmp	r3, #3
 800fcb0:	d106      	bne.n	800fcc0 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	2201      	movs	r2, #1
 800fcb6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	761a      	strb	r2, [r3, #24]
 800fcbe:	e005      	b.n	800fccc <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800fcc0:	7dfb      	ldrb	r3, [r7, #23]
 800fcc2:	2b02      	cmp	r3, #2
 800fcc4:	d102      	bne.n	800fccc <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	2201      	movs	r2, #1
 800fcca:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	2203      	movs	r2, #3
 800fcd0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fce0:	2300      	movs	r3, #0
 800fce2:	2200      	movs	r2, #0
 800fce4:	f001 f85a 	bl	8010d9c <osMessageQueuePut>
      break;
 800fce8:	bf00      	nop
  }
  return status;
 800fcea:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3718      	adds	r7, #24
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b086      	sub	sp, #24
 800fcf8:	af02      	add	r7, sp, #8
 800fcfa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800fcfc:	2301      	movs	r3, #1
 800fcfe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fd00:	2300      	movs	r3, #0
 800fd02:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	7e1b      	ldrb	r3, [r3, #24]
 800fd08:	3b01      	subs	r3, #1
 800fd0a:	2b0a      	cmp	r3, #10
 800fd0c:	f200 822b 	bhi.w	8010166 <USBH_HandleControl+0x472>
 800fd10:	a201      	add	r2, pc, #4	; (adr r2, 800fd18 <USBH_HandleControl+0x24>)
 800fd12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd16:	bf00      	nop
 800fd18:	0800fd45 	.word	0x0800fd45
 800fd1c:	0800fd5f 	.word	0x0800fd5f
 800fd20:	0800fe01 	.word	0x0800fe01
 800fd24:	0800fe27 	.word	0x0800fe27
 800fd28:	0800feb3 	.word	0x0800feb3
 800fd2c:	0800fedf 	.word	0x0800fedf
 800fd30:	0800ffa1 	.word	0x0800ffa1
 800fd34:	0800ffc3 	.word	0x0800ffc3
 800fd38:	08010055 	.word	0x08010055
 800fd3c:	0801007d 	.word	0x0801007d
 800fd40:	0801010f 	.word	0x0801010f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f103 0110 	add.w	r1, r3, #16
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	795b      	ldrb	r3, [r3, #5]
 800fd4e:	461a      	mov	r2, r3
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f000 fa19 	bl	8010188 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2202      	movs	r2, #2
 800fd5a:	761a      	strb	r2, [r3, #24]
      break;
 800fd5c:	e20e      	b.n	801017c <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	795b      	ldrb	r3, [r3, #5]
 800fd62:	4619      	mov	r1, r3
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f011 f865 	bl	8020e34 <USBH_LL_GetURBState>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800fd6e:	7bbb      	ldrb	r3, [r7, #14]
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d12c      	bne.n	800fdce <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	7c1b      	ldrb	r3, [r3, #16]
 800fd78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fd7c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	8adb      	ldrh	r3, [r3, #22]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d00a      	beq.n	800fd9c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800fd86:	7b7b      	ldrb	r3, [r7, #13]
 800fd88:	2b80      	cmp	r3, #128	; 0x80
 800fd8a:	d103      	bne.n	800fd94 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2203      	movs	r2, #3
 800fd90:	761a      	strb	r2, [r3, #24]
 800fd92:	e00d      	b.n	800fdb0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2205      	movs	r2, #5
 800fd98:	761a      	strb	r2, [r3, #24]
 800fd9a:	e009      	b.n	800fdb0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800fd9c:	7b7b      	ldrb	r3, [r7, #13]
 800fd9e:	2b80      	cmp	r3, #128	; 0x80
 800fda0:	d103      	bne.n	800fdaa <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2209      	movs	r2, #9
 800fda6:	761a      	strb	r2, [r3, #24]
 800fda8:	e002      	b.n	800fdb0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2207      	movs	r2, #7
 800fdae:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2203      	movs	r2, #3
 800fdb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	f000 ffe8 	bl	8010d9c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fdcc:	e1cd      	b.n	801016a <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fdce:	7bbb      	ldrb	r3, [r7, #14]
 800fdd0:	2b04      	cmp	r3, #4
 800fdd2:	d003      	beq.n	800fddc <USBH_HandleControl+0xe8>
 800fdd4:	7bbb      	ldrb	r3, [r7, #14]
 800fdd6:	2b02      	cmp	r3, #2
 800fdd8:	f040 81c7 	bne.w	801016a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	220b      	movs	r2, #11
 800fde0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2203      	movs	r2, #3
 800fde6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	f000 ffcf 	bl	8010d9c <osMessageQueuePut>
      break;
 800fdfe:	e1b4      	b.n	801016a <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fe06:	b29a      	uxth	r2, r3
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6899      	ldr	r1, [r3, #8]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	899a      	ldrh	r2, [r3, #12]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	791b      	ldrb	r3, [r3, #4]
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f000 f9f4 	bl	8010206 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2204      	movs	r2, #4
 800fe22:	761a      	strb	r2, [r3, #24]
      break;
 800fe24:	e1aa      	b.n	801017c <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	791b      	ldrb	r3, [r3, #4]
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f011 f801 	bl	8020e34 <USBH_LL_GetURBState>
 800fe32:	4603      	mov	r3, r0
 800fe34:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800fe36:	7bbb      	ldrb	r3, [r7, #14]
 800fe38:	2b01      	cmp	r3, #1
 800fe3a:	d110      	bne.n	800fe5e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2209      	movs	r2, #9
 800fe40:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2203      	movs	r2, #3
 800fe46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fe56:	2300      	movs	r3, #0
 800fe58:	2200      	movs	r2, #0
 800fe5a:	f000 ff9f 	bl	8010d9c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800fe5e:	7bbb      	ldrb	r3, [r7, #14]
 800fe60:	2b05      	cmp	r3, #5
 800fe62:	d110      	bne.n	800fe86 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800fe64:	2303      	movs	r3, #3
 800fe66:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2203      	movs	r2, #3
 800fe6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	2200      	movs	r2, #0
 800fe80:	f000 ff8c 	bl	8010d9c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fe84:	e173      	b.n	801016e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800fe86:	7bbb      	ldrb	r3, [r7, #14]
 800fe88:	2b04      	cmp	r3, #4
 800fe8a:	f040 8170 	bne.w	801016e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	220b      	movs	r2, #11
 800fe92:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2203      	movs	r2, #3
 800fe98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fea8:	2300      	movs	r3, #0
 800feaa:	2200      	movs	r2, #0
 800feac:	f000 ff76 	bl	8010d9c <osMessageQueuePut>
      break;
 800feb0:	e15d      	b.n	801016e <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6899      	ldr	r1, [r3, #8]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	899a      	ldrh	r2, [r3, #12]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	7958      	ldrb	r0, [r3, #5]
 800febe:	2301      	movs	r3, #1
 800fec0:	9300      	str	r3, [sp, #0]
 800fec2:	4603      	mov	r3, r0
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f000 f979 	bl	80101bc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fed0:	b29a      	uxth	r2, r3
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2206      	movs	r2, #6
 800feda:	761a      	strb	r2, [r3, #24]
      break;
 800fedc:	e14e      	b.n	801017c <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	795b      	ldrb	r3, [r3, #5]
 800fee2:	4619      	mov	r1, r3
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f010 ffa5 	bl	8020e34 <USBH_LL_GetURBState>
 800feea:	4603      	mov	r3, r0
 800feec:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800feee:	7bbb      	ldrb	r3, [r7, #14]
 800fef0:	2b01      	cmp	r3, #1
 800fef2:	d111      	bne.n	800ff18 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2207      	movs	r2, #7
 800fef8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2203      	movs	r2, #3
 800fefe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ff0e:	2300      	movs	r3, #0
 800ff10:	2200      	movs	r2, #0
 800ff12:	f000 ff43 	bl	8010d9c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ff16:	e12c      	b.n	8010172 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800ff18:	7bbb      	ldrb	r3, [r7, #14]
 800ff1a:	2b05      	cmp	r3, #5
 800ff1c:	d113      	bne.n	800ff46 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	220c      	movs	r2, #12
 800ff22:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ff24:	2303      	movs	r3, #3
 800ff26:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2203      	movs	r2, #3
 800ff2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	2200      	movs	r2, #0
 800ff40:	f000 ff2c 	bl	8010d9c <osMessageQueuePut>
      break;
 800ff44:	e115      	b.n	8010172 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ff46:	7bbb      	ldrb	r3, [r7, #14]
 800ff48:	2b02      	cmp	r3, #2
 800ff4a:	d111      	bne.n	800ff70 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2205      	movs	r2, #5
 800ff50:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2203      	movs	r2, #3
 800ff56:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ff66:	2300      	movs	r3, #0
 800ff68:	2200      	movs	r2, #0
 800ff6a:	f000 ff17 	bl	8010d9c <osMessageQueuePut>
      break;
 800ff6e:	e100      	b.n	8010172 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800ff70:	7bbb      	ldrb	r3, [r7, #14]
 800ff72:	2b04      	cmp	r3, #4
 800ff74:	f040 80fd 	bne.w	8010172 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	220b      	movs	r2, #11
 800ff7c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ff7e:	2302      	movs	r3, #2
 800ff80:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2203      	movs	r2, #3
 800ff86:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ff96:	2300      	movs	r3, #0
 800ff98:	2200      	movs	r2, #0
 800ff9a:	f000 feff 	bl	8010d9c <osMessageQueuePut>
      break;
 800ff9e:	e0e8      	b.n	8010172 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	791b      	ldrb	r3, [r3, #4]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	2100      	movs	r1, #0
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f000 f92c 	bl	8010206 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ffb4:	b29a      	uxth	r2, r3
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2208      	movs	r2, #8
 800ffbe:	761a      	strb	r2, [r3, #24]

      break;
 800ffc0:	e0dc      	b.n	801017c <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	791b      	ldrb	r3, [r3, #4]
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f010 ff33 	bl	8020e34 <USBH_LL_GetURBState>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ffd2:	7bbb      	ldrb	r3, [r7, #14]
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	d113      	bne.n	8010000 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	220d      	movs	r2, #13
 800ffdc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2203      	movs	r2, #3
 800ffe6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fff6:	2300      	movs	r3, #0
 800fff8:	2200      	movs	r2, #0
 800fffa:	f000 fecf 	bl	8010d9c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fffe:	e0ba      	b.n	8010176 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8010000:	7bbb      	ldrb	r3, [r7, #14]
 8010002:	2b04      	cmp	r3, #4
 8010004:	d111      	bne.n	801002a <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	220b      	movs	r2, #11
 801000a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2203      	movs	r2, #3
 8010010:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010020:	2300      	movs	r3, #0
 8010022:	2200      	movs	r2, #0
 8010024:	f000 feba 	bl	8010d9c <osMessageQueuePut>
      break;
 8010028:	e0a5      	b.n	8010176 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 801002a:	7bbb      	ldrb	r3, [r7, #14]
 801002c:	2b05      	cmp	r3, #5
 801002e:	f040 80a2 	bne.w	8010176 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 8010032:	2303      	movs	r3, #3
 8010034:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2203      	movs	r2, #3
 801003a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801004a:	2300      	movs	r3, #0
 801004c:	2200      	movs	r2, #0
 801004e:	f000 fea5 	bl	8010d9c <osMessageQueuePut>
      break;
 8010052:	e090      	b.n	8010176 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	795a      	ldrb	r2, [r3, #5]
 8010058:	2301      	movs	r3, #1
 801005a:	9300      	str	r3, [sp, #0]
 801005c:	4613      	mov	r3, r2
 801005e:	2200      	movs	r2, #0
 8010060:	2100      	movs	r1, #0
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f000 f8aa 	bl	80101bc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801006e:	b29a      	uxth	r2, r3
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	220a      	movs	r2, #10
 8010078:	761a      	strb	r2, [r3, #24]
      break;
 801007a:	e07f      	b.n	801017c <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	795b      	ldrb	r3, [r3, #5]
 8010080:	4619      	mov	r1, r3
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f010 fed6 	bl	8020e34 <USBH_LL_GetURBState>
 8010088:	4603      	mov	r3, r0
 801008a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801008c:	7bbb      	ldrb	r3, [r7, #14]
 801008e:	2b01      	cmp	r3, #1
 8010090:	d113      	bne.n	80100ba <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 8010092:	2300      	movs	r3, #0
 8010094:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	220d      	movs	r2, #13
 801009a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2203      	movs	r2, #3
 80100a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80100b0:	2300      	movs	r3, #0
 80100b2:	2200      	movs	r2, #0
 80100b4:	f000 fe72 	bl	8010d9c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80100b8:	e05f      	b.n	801017a <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 80100ba:	7bbb      	ldrb	r3, [r7, #14]
 80100bc:	2b02      	cmp	r3, #2
 80100be:	d111      	bne.n	80100e4 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2209      	movs	r2, #9
 80100c4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2203      	movs	r2, #3
 80100ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80100da:	2300      	movs	r3, #0
 80100dc:	2200      	movs	r2, #0
 80100de:	f000 fe5d 	bl	8010d9c <osMessageQueuePut>
      break;
 80100e2:	e04a      	b.n	801017a <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 80100e4:	7bbb      	ldrb	r3, [r7, #14]
 80100e6:	2b04      	cmp	r3, #4
 80100e8:	d147      	bne.n	801017a <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	220b      	movs	r2, #11
 80100ee:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2203      	movs	r2, #3
 80100f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010104:	2300      	movs	r3, #0
 8010106:	2200      	movs	r2, #0
 8010108:	f000 fe48 	bl	8010d9c <osMessageQueuePut>
      break;
 801010c:	e035      	b.n	801017a <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	7e5b      	ldrb	r3, [r3, #25]
 8010112:	3301      	adds	r3, #1
 8010114:	b2da      	uxtb	r2, r3
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	765a      	strb	r2, [r3, #25]
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	7e5b      	ldrb	r3, [r3, #25]
 801011e:	2b02      	cmp	r3, #2
 8010120:	d806      	bhi.n	8010130 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2201      	movs	r2, #1
 8010126:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2201      	movs	r2, #1
 801012c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801012e:	e025      	b.n	801017c <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010136:	2106      	movs	r1, #6
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2200      	movs	r2, #0
 8010140:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	795b      	ldrb	r3, [r3, #5]
 8010146:	4619      	mov	r1, r3
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f000 f90d 	bl	8010368 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	791b      	ldrb	r3, [r3, #4]
 8010152:	4619      	mov	r1, r3
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 f907 	bl	8010368 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2200      	movs	r2, #0
 801015e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8010160:	2302      	movs	r3, #2
 8010162:	73fb      	strb	r3, [r7, #15]
      break;
 8010164:	e00a      	b.n	801017c <USBH_HandleControl+0x488>

    default:
      break;
 8010166:	bf00      	nop
 8010168:	e008      	b.n	801017c <USBH_HandleControl+0x488>
      break;
 801016a:	bf00      	nop
 801016c:	e006      	b.n	801017c <USBH_HandleControl+0x488>
      break;
 801016e:	bf00      	nop
 8010170:	e004      	b.n	801017c <USBH_HandleControl+0x488>
      break;
 8010172:	bf00      	nop
 8010174:	e002      	b.n	801017c <USBH_HandleControl+0x488>
      break;
 8010176:	bf00      	nop
 8010178:	e000      	b.n	801017c <USBH_HandleControl+0x488>
      break;
 801017a:	bf00      	nop
  }

  return status;
 801017c:	7bfb      	ldrb	r3, [r7, #15]
}
 801017e:	4618      	mov	r0, r3
 8010180:	3710      	adds	r7, #16
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
 8010186:	bf00      	nop

08010188 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b088      	sub	sp, #32
 801018c:	af04      	add	r7, sp, #16
 801018e:	60f8      	str	r0, [r7, #12]
 8010190:	60b9      	str	r1, [r7, #8]
 8010192:	4613      	mov	r3, r2
 8010194:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010196:	79f9      	ldrb	r1, [r7, #7]
 8010198:	2300      	movs	r3, #0
 801019a:	9303      	str	r3, [sp, #12]
 801019c:	2308      	movs	r3, #8
 801019e:	9302      	str	r3, [sp, #8]
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	9301      	str	r3, [sp, #4]
 80101a4:	2300      	movs	r3, #0
 80101a6:	9300      	str	r3, [sp, #0]
 80101a8:	2300      	movs	r3, #0
 80101aa:	2200      	movs	r2, #0
 80101ac:	68f8      	ldr	r0, [r7, #12]
 80101ae:	f010 fe10 	bl	8020dd2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80101b2:	2300      	movs	r3, #0
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3710      	adds	r7, #16
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}

080101bc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b088      	sub	sp, #32
 80101c0:	af04      	add	r7, sp, #16
 80101c2:	60f8      	str	r0, [r7, #12]
 80101c4:	60b9      	str	r1, [r7, #8]
 80101c6:	4611      	mov	r1, r2
 80101c8:	461a      	mov	r2, r3
 80101ca:	460b      	mov	r3, r1
 80101cc:	80fb      	strh	r3, [r7, #6]
 80101ce:	4613      	mov	r3, r2
 80101d0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d001      	beq.n	80101e0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80101dc:	2300      	movs	r3, #0
 80101de:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80101e0:	7979      	ldrb	r1, [r7, #5]
 80101e2:	7e3b      	ldrb	r3, [r7, #24]
 80101e4:	9303      	str	r3, [sp, #12]
 80101e6:	88fb      	ldrh	r3, [r7, #6]
 80101e8:	9302      	str	r3, [sp, #8]
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	9301      	str	r3, [sp, #4]
 80101ee:	2301      	movs	r3, #1
 80101f0:	9300      	str	r3, [sp, #0]
 80101f2:	2300      	movs	r3, #0
 80101f4:	2200      	movs	r2, #0
 80101f6:	68f8      	ldr	r0, [r7, #12]
 80101f8:	f010 fdeb 	bl	8020dd2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80101fc:	2300      	movs	r3, #0
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3710      	adds	r7, #16
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}

08010206 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8010206:	b580      	push	{r7, lr}
 8010208:	b088      	sub	sp, #32
 801020a:	af04      	add	r7, sp, #16
 801020c:	60f8      	str	r0, [r7, #12]
 801020e:	60b9      	str	r1, [r7, #8]
 8010210:	4611      	mov	r1, r2
 8010212:	461a      	mov	r2, r3
 8010214:	460b      	mov	r3, r1
 8010216:	80fb      	strh	r3, [r7, #6]
 8010218:	4613      	mov	r3, r2
 801021a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801021c:	7979      	ldrb	r1, [r7, #5]
 801021e:	2300      	movs	r3, #0
 8010220:	9303      	str	r3, [sp, #12]
 8010222:	88fb      	ldrh	r3, [r7, #6]
 8010224:	9302      	str	r3, [sp, #8]
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	9301      	str	r3, [sp, #4]
 801022a:	2301      	movs	r3, #1
 801022c:	9300      	str	r3, [sp, #0]
 801022e:	2300      	movs	r3, #0
 8010230:	2201      	movs	r2, #1
 8010232:	68f8      	ldr	r0, [r7, #12]
 8010234:	f010 fdcd 	bl	8020dd2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010238:	2300      	movs	r3, #0

}
 801023a:	4618      	mov	r0, r3
 801023c:	3710      	adds	r7, #16
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}

08010242 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8010242:	b580      	push	{r7, lr}
 8010244:	b088      	sub	sp, #32
 8010246:	af04      	add	r7, sp, #16
 8010248:	60f8      	str	r0, [r7, #12]
 801024a:	60b9      	str	r1, [r7, #8]
 801024c:	4611      	mov	r1, r2
 801024e:	461a      	mov	r2, r3
 8010250:	460b      	mov	r3, r1
 8010252:	80fb      	strh	r3, [r7, #6]
 8010254:	4613      	mov	r3, r2
 8010256:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801025e:	2b00      	cmp	r3, #0
 8010260:	d001      	beq.n	8010266 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8010262:	2300      	movs	r3, #0
 8010264:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010266:	7979      	ldrb	r1, [r7, #5]
 8010268:	7e3b      	ldrb	r3, [r7, #24]
 801026a:	9303      	str	r3, [sp, #12]
 801026c:	88fb      	ldrh	r3, [r7, #6]
 801026e:	9302      	str	r3, [sp, #8]
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	9301      	str	r3, [sp, #4]
 8010274:	2301      	movs	r3, #1
 8010276:	9300      	str	r3, [sp, #0]
 8010278:	2302      	movs	r3, #2
 801027a:	2200      	movs	r2, #0
 801027c:	68f8      	ldr	r0, [r7, #12]
 801027e:	f010 fda8 	bl	8020dd2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8010282:	2300      	movs	r3, #0
}
 8010284:	4618      	mov	r0, r3
 8010286:	3710      	adds	r7, #16
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b088      	sub	sp, #32
 8010290:	af04      	add	r7, sp, #16
 8010292:	60f8      	str	r0, [r7, #12]
 8010294:	60b9      	str	r1, [r7, #8]
 8010296:	4611      	mov	r1, r2
 8010298:	461a      	mov	r2, r3
 801029a:	460b      	mov	r3, r1
 801029c:	80fb      	strh	r3, [r7, #6]
 801029e:	4613      	mov	r3, r2
 80102a0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80102a2:	7979      	ldrb	r1, [r7, #5]
 80102a4:	2300      	movs	r3, #0
 80102a6:	9303      	str	r3, [sp, #12]
 80102a8:	88fb      	ldrh	r3, [r7, #6]
 80102aa:	9302      	str	r3, [sp, #8]
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	9301      	str	r3, [sp, #4]
 80102b0:	2301      	movs	r3, #1
 80102b2:	9300      	str	r3, [sp, #0]
 80102b4:	2302      	movs	r3, #2
 80102b6:	2201      	movs	r2, #1
 80102b8:	68f8      	ldr	r0, [r7, #12]
 80102ba:	f010 fd8a 	bl	8020dd2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80102be:	2300      	movs	r3, #0
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3710      	adds	r7, #16
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}

080102c8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b086      	sub	sp, #24
 80102cc:	af04      	add	r7, sp, #16
 80102ce:	6078      	str	r0, [r7, #4]
 80102d0:	4608      	mov	r0, r1
 80102d2:	4611      	mov	r1, r2
 80102d4:	461a      	mov	r2, r3
 80102d6:	4603      	mov	r3, r0
 80102d8:	70fb      	strb	r3, [r7, #3]
 80102da:	460b      	mov	r3, r1
 80102dc:	70bb      	strb	r3, [r7, #2]
 80102de:	4613      	mov	r3, r2
 80102e0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80102e2:	7878      	ldrb	r0, [r7, #1]
 80102e4:	78ba      	ldrb	r2, [r7, #2]
 80102e6:	78f9      	ldrb	r1, [r7, #3]
 80102e8:	8b3b      	ldrh	r3, [r7, #24]
 80102ea:	9302      	str	r3, [sp, #8]
 80102ec:	7d3b      	ldrb	r3, [r7, #20]
 80102ee:	9301      	str	r3, [sp, #4]
 80102f0:	7c3b      	ldrb	r3, [r7, #16]
 80102f2:	9300      	str	r3, [sp, #0]
 80102f4:	4603      	mov	r3, r0
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f010 fd1d 	bl	8020d36 <USBH_LL_OpenPipe>

  return USBH_OK;
 80102fc:	2300      	movs	r3, #0
}
 80102fe:	4618      	mov	r0, r3
 8010300:	3708      	adds	r7, #8
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}

08010306 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8010306:	b580      	push	{r7, lr}
 8010308:	b082      	sub	sp, #8
 801030a:	af00      	add	r7, sp, #0
 801030c:	6078      	str	r0, [r7, #4]
 801030e:	460b      	mov	r3, r1
 8010310:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8010312:	78fb      	ldrb	r3, [r7, #3]
 8010314:	4619      	mov	r1, r3
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f010 fd3c 	bl	8020d94 <USBH_LL_ClosePipe>

  return USBH_OK;
 801031c:	2300      	movs	r3, #0
}
 801031e:	4618      	mov	r0, r3
 8010320:	3708      	adds	r7, #8
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}

08010326 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8010326:	b580      	push	{r7, lr}
 8010328:	b084      	sub	sp, #16
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
 801032e:	460b      	mov	r3, r1
 8010330:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f000 f836 	bl	80103a4 <USBH_GetFreePipe>
 8010338:	4603      	mov	r3, r0
 801033a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 801033c:	89fb      	ldrh	r3, [r7, #14]
 801033e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010342:	4293      	cmp	r3, r2
 8010344:	d00a      	beq.n	801035c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8010346:	78fa      	ldrb	r2, [r7, #3]
 8010348:	89fb      	ldrh	r3, [r7, #14]
 801034a:	f003 030f 	and.w	r3, r3, #15
 801034e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010352:	6879      	ldr	r1, [r7, #4]
 8010354:	33e0      	adds	r3, #224	; 0xe0
 8010356:	009b      	lsls	r3, r3, #2
 8010358:	440b      	add	r3, r1
 801035a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 801035c:	89fb      	ldrh	r3, [r7, #14]
 801035e:	b2db      	uxtb	r3, r3
}
 8010360:	4618      	mov	r0, r3
 8010362:	3710      	adds	r7, #16
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010368:	b480      	push	{r7}
 801036a:	b083      	sub	sp, #12
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	460b      	mov	r3, r1
 8010372:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8010374:	78fb      	ldrb	r3, [r7, #3]
 8010376:	2b0a      	cmp	r3, #10
 8010378:	d80d      	bhi.n	8010396 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801037a:	78fb      	ldrb	r3, [r7, #3]
 801037c:	687a      	ldr	r2, [r7, #4]
 801037e:	33e0      	adds	r3, #224	; 0xe0
 8010380:	009b      	lsls	r3, r3, #2
 8010382:	4413      	add	r3, r2
 8010384:	685a      	ldr	r2, [r3, #4]
 8010386:	78fb      	ldrb	r3, [r7, #3]
 8010388:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801038c:	6879      	ldr	r1, [r7, #4]
 801038e:	33e0      	adds	r3, #224	; 0xe0
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	440b      	add	r3, r1
 8010394:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010396:	2300      	movs	r3, #0
}
 8010398:	4618      	mov	r0, r3
 801039a:	370c      	adds	r7, #12
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr

080103a4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b085      	sub	sp, #20
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80103ac:	2300      	movs	r3, #0
 80103ae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80103b0:	2300      	movs	r3, #0
 80103b2:	73fb      	strb	r3, [r7, #15]
 80103b4:	e00f      	b.n	80103d6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80103b6:	7bfb      	ldrb	r3, [r7, #15]
 80103b8:	687a      	ldr	r2, [r7, #4]
 80103ba:	33e0      	adds	r3, #224	; 0xe0
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	4413      	add	r3, r2
 80103c0:	685b      	ldr	r3, [r3, #4]
 80103c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d102      	bne.n	80103d0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80103ca:	7bfb      	ldrb	r3, [r7, #15]
 80103cc:	b29b      	uxth	r3, r3
 80103ce:	e007      	b.n	80103e0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80103d0:	7bfb      	ldrb	r3, [r7, #15]
 80103d2:	3301      	adds	r3, #1
 80103d4:	73fb      	strb	r3, [r7, #15]
 80103d6:	7bfb      	ldrb	r3, [r7, #15]
 80103d8:	2b0a      	cmp	r3, #10
 80103da:	d9ec      	bls.n	80103b6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80103dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3714      	adds	r7, #20
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr

080103ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80103ec:	b480      	push	{r7}
 80103ee:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80103f0:	bf00      	nop
 80103f2:	46bd      	mov	sp, r7
 80103f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f8:	4770      	bx	lr
	...

080103fc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80103fc:	b480      	push	{r7}
 80103fe:	b085      	sub	sp, #20
 8010400:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010402:	f3ef 8305 	mrs	r3, IPSR
 8010406:	60bb      	str	r3, [r7, #8]
  return(result);
 8010408:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801040a:	2b00      	cmp	r3, #0
 801040c:	d10f      	bne.n	801042e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801040e:	f3ef 8310 	mrs	r3, PRIMASK
 8010412:	607b      	str	r3, [r7, #4]
  return(result);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d105      	bne.n	8010426 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801041a:	f3ef 8311 	mrs	r3, BASEPRI
 801041e:	603b      	str	r3, [r7, #0]
  return(result);
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d007      	beq.n	8010436 <osKernelInitialize+0x3a>
 8010426:	4b0e      	ldr	r3, [pc, #56]	; (8010460 <osKernelInitialize+0x64>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	2b02      	cmp	r3, #2
 801042c:	d103      	bne.n	8010436 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801042e:	f06f 0305 	mvn.w	r3, #5
 8010432:	60fb      	str	r3, [r7, #12]
 8010434:	e00c      	b.n	8010450 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010436:	4b0a      	ldr	r3, [pc, #40]	; (8010460 <osKernelInitialize+0x64>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d105      	bne.n	801044a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801043e:	4b08      	ldr	r3, [pc, #32]	; (8010460 <osKernelInitialize+0x64>)
 8010440:	2201      	movs	r2, #1
 8010442:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010444:	2300      	movs	r3, #0
 8010446:	60fb      	str	r3, [r7, #12]
 8010448:	e002      	b.n	8010450 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801044a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801044e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010450:	68fb      	ldr	r3, [r7, #12]
}
 8010452:	4618      	mov	r0, r3
 8010454:	3714      	adds	r7, #20
 8010456:	46bd      	mov	sp, r7
 8010458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045c:	4770      	bx	lr
 801045e:	bf00      	nop
 8010460:	2000025c 	.word	0x2000025c

08010464 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010464:	b580      	push	{r7, lr}
 8010466:	b084      	sub	sp, #16
 8010468:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801046a:	f3ef 8305 	mrs	r3, IPSR
 801046e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010470:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010472:	2b00      	cmp	r3, #0
 8010474:	d10f      	bne.n	8010496 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010476:	f3ef 8310 	mrs	r3, PRIMASK
 801047a:	607b      	str	r3, [r7, #4]
  return(result);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d105      	bne.n	801048e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010482:	f3ef 8311 	mrs	r3, BASEPRI
 8010486:	603b      	str	r3, [r7, #0]
  return(result);
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d007      	beq.n	801049e <osKernelStart+0x3a>
 801048e:	4b0f      	ldr	r3, [pc, #60]	; (80104cc <osKernelStart+0x68>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2b02      	cmp	r3, #2
 8010494:	d103      	bne.n	801049e <osKernelStart+0x3a>
    stat = osErrorISR;
 8010496:	f06f 0305 	mvn.w	r3, #5
 801049a:	60fb      	str	r3, [r7, #12]
 801049c:	e010      	b.n	80104c0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 801049e:	4b0b      	ldr	r3, [pc, #44]	; (80104cc <osKernelStart+0x68>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	2b01      	cmp	r3, #1
 80104a4:	d109      	bne.n	80104ba <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80104a6:	f7ff ffa1 	bl	80103ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80104aa:	4b08      	ldr	r3, [pc, #32]	; (80104cc <osKernelStart+0x68>)
 80104ac:	2202      	movs	r2, #2
 80104ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80104b0:	f002 f9ee 	bl	8012890 <vTaskStartScheduler>
      stat = osOK;
 80104b4:	2300      	movs	r3, #0
 80104b6:	60fb      	str	r3, [r7, #12]
 80104b8:	e002      	b.n	80104c0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80104ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80104c0:	68fb      	ldr	r3, [r7, #12]
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	3710      	adds	r7, #16
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}
 80104ca:	bf00      	nop
 80104cc:	2000025c 	.word	0x2000025c

080104d0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b084      	sub	sp, #16
 80104d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104d6:	f3ef 8305 	mrs	r3, IPSR
 80104da:	60bb      	str	r3, [r7, #8]
  return(result);
 80104dc:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d10f      	bne.n	8010502 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104e2:	f3ef 8310 	mrs	r3, PRIMASK
 80104e6:	607b      	str	r3, [r7, #4]
  return(result);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d105      	bne.n	80104fa <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80104ee:	f3ef 8311 	mrs	r3, BASEPRI
 80104f2:	603b      	str	r3, [r7, #0]
  return(result);
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d007      	beq.n	801050a <osKernelGetTickCount+0x3a>
 80104fa:	4b08      	ldr	r3, [pc, #32]	; (801051c <osKernelGetTickCount+0x4c>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	2b02      	cmp	r3, #2
 8010500:	d103      	bne.n	801050a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8010502:	f002 fae9 	bl	8012ad8 <xTaskGetTickCountFromISR>
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	e002      	b.n	8010510 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 801050a:	f002 fad5 	bl	8012ab8 <xTaskGetTickCount>
 801050e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8010510:	68fb      	ldr	r3, [r7, #12]
}
 8010512:	4618      	mov	r0, r3
 8010514:	3710      	adds	r7, #16
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	2000025c 	.word	0x2000025c

08010520 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010520:	b580      	push	{r7, lr}
 8010522:	b090      	sub	sp, #64	; 0x40
 8010524:	af04      	add	r7, sp, #16
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801052c:	2300      	movs	r3, #0
 801052e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010530:	f3ef 8305 	mrs	r3, IPSR
 8010534:	61fb      	str	r3, [r7, #28]
  return(result);
 8010536:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8010538:	2b00      	cmp	r3, #0
 801053a:	f040 808f 	bne.w	801065c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801053e:	f3ef 8310 	mrs	r3, PRIMASK
 8010542:	61bb      	str	r3, [r7, #24]
  return(result);
 8010544:	69bb      	ldr	r3, [r7, #24]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d105      	bne.n	8010556 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801054a:	f3ef 8311 	mrs	r3, BASEPRI
 801054e:	617b      	str	r3, [r7, #20]
  return(result);
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d003      	beq.n	801055e <osThreadNew+0x3e>
 8010556:	4b44      	ldr	r3, [pc, #272]	; (8010668 <osThreadNew+0x148>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	2b02      	cmp	r3, #2
 801055c:	d07e      	beq.n	801065c <osThreadNew+0x13c>
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d07b      	beq.n	801065c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8010564:	2380      	movs	r3, #128	; 0x80
 8010566:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8010568:	2318      	movs	r3, #24
 801056a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 801056c:	2300      	movs	r3, #0
 801056e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8010570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010574:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d045      	beq.n	8010608 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d002      	beq.n	801058a <osThreadNew+0x6a>
        name = attr->name;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	699b      	ldr	r3, [r3, #24]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d002      	beq.n	8010598 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	699b      	ldr	r3, [r3, #24]
 8010596:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801059a:	2b00      	cmp	r3, #0
 801059c:	d008      	beq.n	80105b0 <osThreadNew+0x90>
 801059e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a0:	2b38      	cmp	r3, #56	; 0x38
 80105a2:	d805      	bhi.n	80105b0 <osThreadNew+0x90>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	685b      	ldr	r3, [r3, #4]
 80105a8:	f003 0301 	and.w	r3, r3, #1
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d001      	beq.n	80105b4 <osThreadNew+0x94>
        return (NULL);
 80105b0:	2300      	movs	r3, #0
 80105b2:	e054      	b.n	801065e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	695b      	ldr	r3, [r3, #20]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d003      	beq.n	80105c4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	695b      	ldr	r3, [r3, #20]
 80105c0:	089b      	lsrs	r3, r3, #2
 80105c2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	689b      	ldr	r3, [r3, #8]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d00e      	beq.n	80105ea <osThreadNew+0xca>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	68db      	ldr	r3, [r3, #12]
 80105d0:	2b5f      	cmp	r3, #95	; 0x5f
 80105d2:	d90a      	bls.n	80105ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d006      	beq.n	80105ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	695b      	ldr	r3, [r3, #20]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d002      	beq.n	80105ea <osThreadNew+0xca>
        mem = 1;
 80105e4:	2301      	movs	r3, #1
 80105e6:	623b      	str	r3, [r7, #32]
 80105e8:	e010      	b.n	801060c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	689b      	ldr	r3, [r3, #8]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d10c      	bne.n	801060c <osThreadNew+0xec>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	68db      	ldr	r3, [r3, #12]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d108      	bne.n	801060c <osThreadNew+0xec>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	691b      	ldr	r3, [r3, #16]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d104      	bne.n	801060c <osThreadNew+0xec>
          mem = 0;
 8010602:	2300      	movs	r3, #0
 8010604:	623b      	str	r3, [r7, #32]
 8010606:	e001      	b.n	801060c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010608:	2300      	movs	r3, #0
 801060a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801060c:	6a3b      	ldr	r3, [r7, #32]
 801060e:	2b01      	cmp	r3, #1
 8010610:	d110      	bne.n	8010634 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801061a:	9202      	str	r2, [sp, #8]
 801061c:	9301      	str	r3, [sp, #4]
 801061e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010620:	9300      	str	r3, [sp, #0]
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010628:	68f8      	ldr	r0, [r7, #12]
 801062a:	f001 fe77 	bl	801231c <xTaskCreateStatic>
 801062e:	4603      	mov	r3, r0
 8010630:	613b      	str	r3, [r7, #16]
 8010632:	e013      	b.n	801065c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8010634:	6a3b      	ldr	r3, [r7, #32]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d110      	bne.n	801065c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801063a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063c:	b29a      	uxth	r2, r3
 801063e:	f107 0310 	add.w	r3, r7, #16
 8010642:	9301      	str	r3, [sp, #4]
 8010644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010646:	9300      	str	r3, [sp, #0]
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801064c:	68f8      	ldr	r0, [r7, #12]
 801064e:	f001 fec5 	bl	80123dc <xTaskCreate>
 8010652:	4603      	mov	r3, r0
 8010654:	2b01      	cmp	r3, #1
 8010656:	d001      	beq.n	801065c <osThreadNew+0x13c>
          hTask = NULL;
 8010658:	2300      	movs	r3, #0
 801065a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 801065c:	693b      	ldr	r3, [r7, #16]
}
 801065e:	4618      	mov	r0, r3
 8010660:	3730      	adds	r7, #48	; 0x30
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}
 8010666:	bf00      	nop
 8010668:	2000025c 	.word	0x2000025c

0801066c <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 801066c:	b580      	push	{r7, lr}
 801066e:	b088      	sub	sp, #32
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010678:	f3ef 8305 	mrs	r3, IPSR
 801067c:	613b      	str	r3, [r7, #16]
  return(result);
 801067e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8010680:	2b00      	cmp	r3, #0
 8010682:	d10f      	bne.n	80106a4 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010684:	f3ef 8310 	mrs	r3, PRIMASK
 8010688:	60fb      	str	r3, [r7, #12]
  return(result);
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d105      	bne.n	801069c <osThreadTerminate+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010690:	f3ef 8311 	mrs	r3, BASEPRI
 8010694:	60bb      	str	r3, [r7, #8]
  return(result);
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d007      	beq.n	80106ac <osThreadTerminate+0x40>
 801069c:	4b12      	ldr	r3, [pc, #72]	; (80106e8 <osThreadTerminate+0x7c>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2b02      	cmp	r3, #2
 80106a2:	d103      	bne.n	80106ac <osThreadTerminate+0x40>
    stat = osErrorISR;
 80106a4:	f06f 0305 	mvn.w	r3, #5
 80106a8:	61fb      	str	r3, [r7, #28]
 80106aa:	e017      	b.n	80106dc <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 80106ac:	69bb      	ldr	r3, [r7, #24]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d103      	bne.n	80106ba <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 80106b2:	f06f 0303 	mvn.w	r3, #3
 80106b6:	61fb      	str	r3, [r7, #28]
 80106b8:	e010      	b.n	80106dc <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 80106ba:	69b8      	ldr	r0, [r7, #24]
 80106bc:	f002 f880 	bl	80127c0 <eTaskGetState>
 80106c0:	4603      	mov	r3, r0
 80106c2:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 80106c4:	7dfb      	ldrb	r3, [r7, #23]
 80106c6:	2b04      	cmp	r3, #4
 80106c8:	d005      	beq.n	80106d6 <osThreadTerminate+0x6a>
      stat = osOK;
 80106ca:	2300      	movs	r3, #0
 80106cc:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 80106ce:	69b8      	ldr	r0, [r7, #24]
 80106d0:	f001 ffcc 	bl	801266c <vTaskDelete>
 80106d4:	e002      	b.n	80106dc <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 80106d6:	f06f 0302 	mvn.w	r3, #2
 80106da:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 80106dc:	69fb      	ldr	r3, [r7, #28]
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3720      	adds	r7, #32
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
 80106e6:	bf00      	nop
 80106e8:	2000025c 	.word	0x2000025c

080106ec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b086      	sub	sp, #24
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80106f4:	f3ef 8305 	mrs	r3, IPSR
 80106f8:	613b      	str	r3, [r7, #16]
  return(result);
 80106fa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d10f      	bne.n	8010720 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010700:	f3ef 8310 	mrs	r3, PRIMASK
 8010704:	60fb      	str	r3, [r7, #12]
  return(result);
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d105      	bne.n	8010718 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801070c:	f3ef 8311 	mrs	r3, BASEPRI
 8010710:	60bb      	str	r3, [r7, #8]
  return(result);
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d007      	beq.n	8010728 <osDelay+0x3c>
 8010718:	4b0a      	ldr	r3, [pc, #40]	; (8010744 <osDelay+0x58>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	2b02      	cmp	r3, #2
 801071e:	d103      	bne.n	8010728 <osDelay+0x3c>
    stat = osErrorISR;
 8010720:	f06f 0305 	mvn.w	r3, #5
 8010724:	617b      	str	r3, [r7, #20]
 8010726:	e007      	b.n	8010738 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010728:	2300      	movs	r3, #0
 801072a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d002      	beq.n	8010738 <osDelay+0x4c>
      vTaskDelay(ticks);
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f002 f80e 	bl	8012754 <vTaskDelay>
    }
  }

  return (stat);
 8010738:	697b      	ldr	r3, [r7, #20]
}
 801073a:	4618      	mov	r0, r3
 801073c:	3718      	adds	r7, #24
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	2000025c 	.word	0x2000025c

08010748 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8010748:	b580      	push	{r7, lr}
 801074a:	b08a      	sub	sp, #40	; 0x28
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8010750:	2300      	movs	r3, #0
 8010752:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010754:	f3ef 8305 	mrs	r3, IPSR
 8010758:	613b      	str	r3, [r7, #16]
  return(result);
 801075a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 801075c:	2b00      	cmp	r3, #0
 801075e:	f040 8085 	bne.w	801086c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010762:	f3ef 8310 	mrs	r3, PRIMASK
 8010766:	60fb      	str	r3, [r7, #12]
  return(result);
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d105      	bne.n	801077a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801076e:	f3ef 8311 	mrs	r3, BASEPRI
 8010772:	60bb      	str	r3, [r7, #8]
  return(result);
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d003      	beq.n	8010782 <osMutexNew+0x3a>
 801077a:	4b3f      	ldr	r3, [pc, #252]	; (8010878 <osMutexNew+0x130>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	2b02      	cmp	r3, #2
 8010780:	d074      	beq.n	801086c <osMutexNew+0x124>
    if (attr != NULL) {
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d003      	beq.n	8010790 <osMutexNew+0x48>
      type = attr->attr_bits;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	685b      	ldr	r3, [r3, #4]
 801078c:	623b      	str	r3, [r7, #32]
 801078e:	e001      	b.n	8010794 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8010790:	2300      	movs	r3, #0
 8010792:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8010794:	6a3b      	ldr	r3, [r7, #32]
 8010796:	f003 0301 	and.w	r3, r3, #1
 801079a:	2b00      	cmp	r3, #0
 801079c:	d002      	beq.n	80107a4 <osMutexNew+0x5c>
      rmtx = 1U;
 801079e:	2301      	movs	r3, #1
 80107a0:	61fb      	str	r3, [r7, #28]
 80107a2:	e001      	b.n	80107a8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80107a4:	2300      	movs	r3, #0
 80107a6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80107a8:	6a3b      	ldr	r3, [r7, #32]
 80107aa:	f003 0308 	and.w	r3, r3, #8
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d15c      	bne.n	801086c <osMutexNew+0x124>
      mem = -1;
 80107b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107b6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d015      	beq.n	80107ea <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	689b      	ldr	r3, [r3, #8]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d006      	beq.n	80107d4 <osMutexNew+0x8c>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	68db      	ldr	r3, [r3, #12]
 80107ca:	2b4f      	cmp	r3, #79	; 0x4f
 80107cc:	d902      	bls.n	80107d4 <osMutexNew+0x8c>
          mem = 1;
 80107ce:	2301      	movs	r3, #1
 80107d0:	61bb      	str	r3, [r7, #24]
 80107d2:	e00c      	b.n	80107ee <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	689b      	ldr	r3, [r3, #8]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d108      	bne.n	80107ee <osMutexNew+0xa6>
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	68db      	ldr	r3, [r3, #12]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d104      	bne.n	80107ee <osMutexNew+0xa6>
            mem = 0;
 80107e4:	2300      	movs	r3, #0
 80107e6:	61bb      	str	r3, [r7, #24]
 80107e8:	e001      	b.n	80107ee <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80107ea:	2300      	movs	r3, #0
 80107ec:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80107ee:	69bb      	ldr	r3, [r7, #24]
 80107f0:	2b01      	cmp	r3, #1
 80107f2:	d112      	bne.n	801081a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80107f4:	69fb      	ldr	r3, [r7, #28]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d007      	beq.n	801080a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	689b      	ldr	r3, [r3, #8]
 80107fe:	4619      	mov	r1, r3
 8010800:	2004      	movs	r0, #4
 8010802:	f000 fe1e 	bl	8011442 <xQueueCreateMutexStatic>
 8010806:	6278      	str	r0, [r7, #36]	; 0x24
 8010808:	e016      	b.n	8010838 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	689b      	ldr	r3, [r3, #8]
 801080e:	4619      	mov	r1, r3
 8010810:	2001      	movs	r0, #1
 8010812:	f000 fe16 	bl	8011442 <xQueueCreateMutexStatic>
 8010816:	6278      	str	r0, [r7, #36]	; 0x24
 8010818:	e00e      	b.n	8010838 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d10b      	bne.n	8010838 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8010820:	69fb      	ldr	r3, [r7, #28]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d004      	beq.n	8010830 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8010826:	2004      	movs	r0, #4
 8010828:	f000 fdf3 	bl	8011412 <xQueueCreateMutex>
 801082c:	6278      	str	r0, [r7, #36]	; 0x24
 801082e:	e003      	b.n	8010838 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8010830:	2001      	movs	r0, #1
 8010832:	f000 fdee 	bl	8011412 <xQueueCreateMutex>
 8010836:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8010838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083a:	2b00      	cmp	r3, #0
 801083c:	d00c      	beq.n	8010858 <osMutexNew+0x110>
        if (attr != NULL) {
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d003      	beq.n	801084c <osMutexNew+0x104>
          name = attr->name;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	617b      	str	r3, [r7, #20]
 801084a:	e001      	b.n	8010850 <osMutexNew+0x108>
        } else {
          name = NULL;
 801084c:	2300      	movs	r3, #0
 801084e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8010850:	6979      	ldr	r1, [r7, #20]
 8010852:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010854:	f001 fcdc 	bl	8012210 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8010858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085a:	2b00      	cmp	r3, #0
 801085c:	d006      	beq.n	801086c <osMutexNew+0x124>
 801085e:	69fb      	ldr	r3, [r7, #28]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d003      	beq.n	801086c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8010864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010866:	f043 0301 	orr.w	r3, r3, #1
 801086a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 801086c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801086e:	4618      	mov	r0, r3
 8010870:	3728      	adds	r7, #40	; 0x28
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}
 8010876:	bf00      	nop
 8010878:	2000025c 	.word	0x2000025c

0801087c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801087c:	b580      	push	{r7, lr}
 801087e:	b088      	sub	sp, #32
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f023 0301 	bic.w	r3, r3, #1
 801088c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f003 0301 	and.w	r3, r3, #1
 8010894:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010896:	2300      	movs	r3, #0
 8010898:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801089a:	f3ef 8305 	mrs	r3, IPSR
 801089e:	613b      	str	r3, [r7, #16]
  return(result);
 80108a0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d10f      	bne.n	80108c6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108a6:	f3ef 8310 	mrs	r3, PRIMASK
 80108aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d105      	bne.n	80108be <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80108b2:	f3ef 8311 	mrs	r3, BASEPRI
 80108b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d007      	beq.n	80108ce <osMutexAcquire+0x52>
 80108be:	4b1d      	ldr	r3, [pc, #116]	; (8010934 <osMutexAcquire+0xb8>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	2b02      	cmp	r3, #2
 80108c4:	d103      	bne.n	80108ce <osMutexAcquire+0x52>
    stat = osErrorISR;
 80108c6:	f06f 0305 	mvn.w	r3, #5
 80108ca:	61fb      	str	r3, [r7, #28]
 80108cc:	e02c      	b.n	8010928 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80108ce:	69bb      	ldr	r3, [r7, #24]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d103      	bne.n	80108dc <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80108d4:	f06f 0303 	mvn.w	r3, #3
 80108d8:	61fb      	str	r3, [r7, #28]
 80108da:	e025      	b.n	8010928 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d011      	beq.n	8010906 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80108e2:	6839      	ldr	r1, [r7, #0]
 80108e4:	69b8      	ldr	r0, [r7, #24]
 80108e6:	f000 fdfc 	bl	80114e2 <xQueueTakeMutexRecursive>
 80108ea:	4603      	mov	r3, r0
 80108ec:	2b01      	cmp	r3, #1
 80108ee:	d01b      	beq.n	8010928 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d003      	beq.n	80108fe <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80108f6:	f06f 0301 	mvn.w	r3, #1
 80108fa:	61fb      	str	r3, [r7, #28]
 80108fc:	e014      	b.n	8010928 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80108fe:	f06f 0302 	mvn.w	r3, #2
 8010902:	61fb      	str	r3, [r7, #28]
 8010904:	e010      	b.n	8010928 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8010906:	6839      	ldr	r1, [r7, #0]
 8010908:	69b8      	ldr	r0, [r7, #24]
 801090a:	f001 f9a1 	bl	8011c50 <xQueueSemaphoreTake>
 801090e:	4603      	mov	r3, r0
 8010910:	2b01      	cmp	r3, #1
 8010912:	d009      	beq.n	8010928 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d003      	beq.n	8010922 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 801091a:	f06f 0301 	mvn.w	r3, #1
 801091e:	61fb      	str	r3, [r7, #28]
 8010920:	e002      	b.n	8010928 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010922:	f06f 0302 	mvn.w	r3, #2
 8010926:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010928:	69fb      	ldr	r3, [r7, #28]
}
 801092a:	4618      	mov	r0, r3
 801092c:	3720      	adds	r7, #32
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	2000025c 	.word	0x2000025c

08010938 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8010938:	b580      	push	{r7, lr}
 801093a:	b088      	sub	sp, #32
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f023 0301 	bic.w	r3, r3, #1
 8010946:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f003 0301 	and.w	r3, r3, #1
 801094e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010950:	2300      	movs	r3, #0
 8010952:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010954:	f3ef 8305 	mrs	r3, IPSR
 8010958:	613b      	str	r3, [r7, #16]
  return(result);
 801095a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 801095c:	2b00      	cmp	r3, #0
 801095e:	d10f      	bne.n	8010980 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010960:	f3ef 8310 	mrs	r3, PRIMASK
 8010964:	60fb      	str	r3, [r7, #12]
  return(result);
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d105      	bne.n	8010978 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801096c:	f3ef 8311 	mrs	r3, BASEPRI
 8010970:	60bb      	str	r3, [r7, #8]
  return(result);
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d007      	beq.n	8010988 <osMutexRelease+0x50>
 8010978:	4b16      	ldr	r3, [pc, #88]	; (80109d4 <osMutexRelease+0x9c>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	2b02      	cmp	r3, #2
 801097e:	d103      	bne.n	8010988 <osMutexRelease+0x50>
    stat = osErrorISR;
 8010980:	f06f 0305 	mvn.w	r3, #5
 8010984:	61fb      	str	r3, [r7, #28]
 8010986:	e01f      	b.n	80109c8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8010988:	69bb      	ldr	r3, [r7, #24]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d103      	bne.n	8010996 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 801098e:	f06f 0303 	mvn.w	r3, #3
 8010992:	61fb      	str	r3, [r7, #28]
 8010994:	e018      	b.n	80109c8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d009      	beq.n	80109b0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 801099c:	69b8      	ldr	r0, [r7, #24]
 801099e:	f000 fd6b 	bl	8011478 <xQueueGiveMutexRecursive>
 80109a2:	4603      	mov	r3, r0
 80109a4:	2b01      	cmp	r3, #1
 80109a6:	d00f      	beq.n	80109c8 <osMutexRelease+0x90>
        stat = osErrorResource;
 80109a8:	f06f 0302 	mvn.w	r3, #2
 80109ac:	61fb      	str	r3, [r7, #28]
 80109ae:	e00b      	b.n	80109c8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80109b0:	2300      	movs	r3, #0
 80109b2:	2200      	movs	r2, #0
 80109b4:	2100      	movs	r1, #0
 80109b6:	69b8      	ldr	r0, [r7, #24]
 80109b8:	f000 fe38 	bl	801162c <xQueueGenericSend>
 80109bc:	4603      	mov	r3, r0
 80109be:	2b01      	cmp	r3, #1
 80109c0:	d002      	beq.n	80109c8 <osMutexRelease+0x90>
        stat = osErrorResource;
 80109c2:	f06f 0302 	mvn.w	r3, #2
 80109c6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80109c8:	69fb      	ldr	r3, [r7, #28]
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3720      	adds	r7, #32
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	2000025c 	.word	0x2000025c

080109d8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80109d8:	b580      	push	{r7, lr}
 80109da:	b08c      	sub	sp, #48	; 0x30
 80109dc:	af02      	add	r7, sp, #8
 80109de:	60f8      	str	r0, [r7, #12]
 80109e0:	60b9      	str	r1, [r7, #8]
 80109e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80109e4:	2300      	movs	r3, #0
 80109e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80109e8:	f3ef 8305 	mrs	r3, IPSR
 80109ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80109ee:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	f040 8087 	bne.w	8010b04 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109f6:	f3ef 8310 	mrs	r3, PRIMASK
 80109fa:	617b      	str	r3, [r7, #20]
  return(result);
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d105      	bne.n	8010a0e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010a02:	f3ef 8311 	mrs	r3, BASEPRI
 8010a06:	613b      	str	r3, [r7, #16]
  return(result);
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d003      	beq.n	8010a16 <osSemaphoreNew+0x3e>
 8010a0e:	4b40      	ldr	r3, [pc, #256]	; (8010b10 <osSemaphoreNew+0x138>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	2b02      	cmp	r3, #2
 8010a14:	d076      	beq.n	8010b04 <osSemaphoreNew+0x12c>
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d073      	beq.n	8010b04 <osSemaphoreNew+0x12c>
 8010a1c:	68ba      	ldr	r2, [r7, #8]
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d86f      	bhi.n	8010b04 <osSemaphoreNew+0x12c>
    mem = -1;
 8010a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a28:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d015      	beq.n	8010a5c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	689b      	ldr	r3, [r3, #8]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d006      	beq.n	8010a46 <osSemaphoreNew+0x6e>
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	68db      	ldr	r3, [r3, #12]
 8010a3c:	2b4f      	cmp	r3, #79	; 0x4f
 8010a3e:	d902      	bls.n	8010a46 <osSemaphoreNew+0x6e>
        mem = 1;
 8010a40:	2301      	movs	r3, #1
 8010a42:	623b      	str	r3, [r7, #32]
 8010a44:	e00c      	b.n	8010a60 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	689b      	ldr	r3, [r3, #8]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d108      	bne.n	8010a60 <osSemaphoreNew+0x88>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	68db      	ldr	r3, [r3, #12]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d104      	bne.n	8010a60 <osSemaphoreNew+0x88>
          mem = 0;
 8010a56:	2300      	movs	r3, #0
 8010a58:	623b      	str	r3, [r7, #32]
 8010a5a:	e001      	b.n	8010a60 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8010a60:	6a3b      	ldr	r3, [r7, #32]
 8010a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a66:	d04d      	beq.n	8010b04 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	2b01      	cmp	r3, #1
 8010a6c:	d129      	bne.n	8010ac2 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8010a6e:	6a3b      	ldr	r3, [r7, #32]
 8010a70:	2b01      	cmp	r3, #1
 8010a72:	d10b      	bne.n	8010a8c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	689a      	ldr	r2, [r3, #8]
 8010a78:	2303      	movs	r3, #3
 8010a7a:	9300      	str	r3, [sp, #0]
 8010a7c:	4613      	mov	r3, r2
 8010a7e:	2200      	movs	r2, #0
 8010a80:	2100      	movs	r1, #0
 8010a82:	2001      	movs	r0, #1
 8010a84:	f000 fbca 	bl	801121c <xQueueGenericCreateStatic>
 8010a88:	6278      	str	r0, [r7, #36]	; 0x24
 8010a8a:	e005      	b.n	8010a98 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8010a8c:	2203      	movs	r2, #3
 8010a8e:	2100      	movs	r1, #0
 8010a90:	2001      	movs	r0, #1
 8010a92:	f000 fc40 	bl	8011316 <xQueueGenericCreate>
 8010a96:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d022      	beq.n	8010ae4 <osSemaphoreNew+0x10c>
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d01f      	beq.n	8010ae4 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	2100      	movs	r1, #0
 8010aaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010aac:	f000 fdbe 	bl	801162c <xQueueGenericSend>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	2b01      	cmp	r3, #1
 8010ab4:	d016      	beq.n	8010ae4 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8010ab6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ab8:	f001 fa5d 	bl	8011f76 <vQueueDelete>
            hSemaphore = NULL;
 8010abc:	2300      	movs	r3, #0
 8010abe:	627b      	str	r3, [r7, #36]	; 0x24
 8010ac0:	e010      	b.n	8010ae4 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8010ac2:	6a3b      	ldr	r3, [r7, #32]
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	d108      	bne.n	8010ada <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	689b      	ldr	r3, [r3, #8]
 8010acc:	461a      	mov	r2, r3
 8010ace:	68b9      	ldr	r1, [r7, #8]
 8010ad0:	68f8      	ldr	r0, [r7, #12]
 8010ad2:	f000 fd3d 	bl	8011550 <xQueueCreateCountingSemaphoreStatic>
 8010ad6:	6278      	str	r0, [r7, #36]	; 0x24
 8010ad8:	e004      	b.n	8010ae4 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010ada:	68b9      	ldr	r1, [r7, #8]
 8010adc:	68f8      	ldr	r0, [r7, #12]
 8010ade:	f000 fd70 	bl	80115c2 <xQueueCreateCountingSemaphore>
 8010ae2:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d00c      	beq.n	8010b04 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d003      	beq.n	8010af8 <osSemaphoreNew+0x120>
          name = attr->name;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	61fb      	str	r3, [r7, #28]
 8010af6:	e001      	b.n	8010afc <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8010af8:	2300      	movs	r3, #0
 8010afa:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010afc:	69f9      	ldr	r1, [r7, #28]
 8010afe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b00:	f001 fb86 	bl	8012210 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3728      	adds	r7, #40	; 0x28
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	2000025c 	.word	0x2000025c

08010b14 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b088      	sub	sp, #32
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010b22:	2300      	movs	r3, #0
 8010b24:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010b26:	69bb      	ldr	r3, [r7, #24]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d103      	bne.n	8010b34 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010b2c:	f06f 0303 	mvn.w	r3, #3
 8010b30:	61fb      	str	r3, [r7, #28]
 8010b32:	e04b      	b.n	8010bcc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b34:	f3ef 8305 	mrs	r3, IPSR
 8010b38:	617b      	str	r3, [r7, #20]
  return(result);
 8010b3a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d10f      	bne.n	8010b60 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b40:	f3ef 8310 	mrs	r3, PRIMASK
 8010b44:	613b      	str	r3, [r7, #16]
  return(result);
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d105      	bne.n	8010b58 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010b4c:	f3ef 8311 	mrs	r3, BASEPRI
 8010b50:	60fb      	str	r3, [r7, #12]
  return(result);
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d026      	beq.n	8010ba6 <osSemaphoreAcquire+0x92>
 8010b58:	4b1f      	ldr	r3, [pc, #124]	; (8010bd8 <osSemaphoreAcquire+0xc4>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	2b02      	cmp	r3, #2
 8010b5e:	d122      	bne.n	8010ba6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d003      	beq.n	8010b6e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8010b66:	f06f 0303 	mvn.w	r3, #3
 8010b6a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010b6c:	e02d      	b.n	8010bca <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010b72:	f107 0308 	add.w	r3, r7, #8
 8010b76:	461a      	mov	r2, r3
 8010b78:	2100      	movs	r1, #0
 8010b7a:	69b8      	ldr	r0, [r7, #24]
 8010b7c:	f001 f978 	bl	8011e70 <xQueueReceiveFromISR>
 8010b80:	4603      	mov	r3, r0
 8010b82:	2b01      	cmp	r3, #1
 8010b84:	d003      	beq.n	8010b8e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8010b86:	f06f 0302 	mvn.w	r3, #2
 8010b8a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010b8c:	e01d      	b.n	8010bca <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d01a      	beq.n	8010bca <osSemaphoreAcquire+0xb6>
 8010b94:	4b11      	ldr	r3, [pc, #68]	; (8010bdc <osSemaphoreAcquire+0xc8>)
 8010b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b9a:	601a      	str	r2, [r3, #0]
 8010b9c:	f3bf 8f4f 	dsb	sy
 8010ba0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8010ba4:	e011      	b.n	8010bca <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010ba6:	6839      	ldr	r1, [r7, #0]
 8010ba8:	69b8      	ldr	r0, [r7, #24]
 8010baa:	f001 f851 	bl	8011c50 <xQueueSemaphoreTake>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	d00b      	beq.n	8010bcc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d003      	beq.n	8010bc2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8010bba:	f06f 0301 	mvn.w	r3, #1
 8010bbe:	61fb      	str	r3, [r7, #28]
 8010bc0:	e004      	b.n	8010bcc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8010bc2:	f06f 0302 	mvn.w	r3, #2
 8010bc6:	61fb      	str	r3, [r7, #28]
 8010bc8:	e000      	b.n	8010bcc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8010bca:	bf00      	nop
      }
    }
  }

  return (stat);
 8010bcc:	69fb      	ldr	r3, [r7, #28]
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3720      	adds	r7, #32
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}
 8010bd6:	bf00      	nop
 8010bd8:	2000025c 	.word	0x2000025c
 8010bdc:	e000ed04 	.word	0xe000ed04

08010be0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b088      	sub	sp, #32
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010bec:	2300      	movs	r3, #0
 8010bee:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d103      	bne.n	8010bfe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8010bf6:	f06f 0303 	mvn.w	r3, #3
 8010bfa:	61fb      	str	r3, [r7, #28]
 8010bfc:	e03e      	b.n	8010c7c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010bfe:	f3ef 8305 	mrs	r3, IPSR
 8010c02:	617b      	str	r3, [r7, #20]
  return(result);
 8010c04:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d10f      	bne.n	8010c2a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8010c0e:	613b      	str	r3, [r7, #16]
  return(result);
 8010c10:	693b      	ldr	r3, [r7, #16]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d105      	bne.n	8010c22 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010c16:	f3ef 8311 	mrs	r3, BASEPRI
 8010c1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d01e      	beq.n	8010c60 <osSemaphoreRelease+0x80>
 8010c22:	4b19      	ldr	r3, [pc, #100]	; (8010c88 <osSemaphoreRelease+0xa8>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	2b02      	cmp	r3, #2
 8010c28:	d11a      	bne.n	8010c60 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010c2e:	f107 0308 	add.w	r3, r7, #8
 8010c32:	4619      	mov	r1, r3
 8010c34:	69b8      	ldr	r0, [r7, #24]
 8010c36:	f000 fe97 	bl	8011968 <xQueueGiveFromISR>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	2b01      	cmp	r3, #1
 8010c3e:	d003      	beq.n	8010c48 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8010c40:	f06f 0302 	mvn.w	r3, #2
 8010c44:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010c46:	e018      	b.n	8010c7a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d015      	beq.n	8010c7a <osSemaphoreRelease+0x9a>
 8010c4e:	4b0f      	ldr	r3, [pc, #60]	; (8010c8c <osSemaphoreRelease+0xac>)
 8010c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c54:	601a      	str	r2, [r3, #0]
 8010c56:	f3bf 8f4f 	dsb	sy
 8010c5a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010c5e:	e00c      	b.n	8010c7a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010c60:	2300      	movs	r3, #0
 8010c62:	2200      	movs	r2, #0
 8010c64:	2100      	movs	r1, #0
 8010c66:	69b8      	ldr	r0, [r7, #24]
 8010c68:	f000 fce0 	bl	801162c <xQueueGenericSend>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	2b01      	cmp	r3, #1
 8010c70:	d004      	beq.n	8010c7c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8010c72:	f06f 0302 	mvn.w	r3, #2
 8010c76:	61fb      	str	r3, [r7, #28]
 8010c78:	e000      	b.n	8010c7c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010c7a:	bf00      	nop
    }
  }

  return (stat);
 8010c7c:	69fb      	ldr	r3, [r7, #28]
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3720      	adds	r7, #32
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}
 8010c86:	bf00      	nop
 8010c88:	2000025c 	.word	0x2000025c
 8010c8c:	e000ed04 	.word	0xe000ed04

08010c90 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b08c      	sub	sp, #48	; 0x30
 8010c94:	af02      	add	r7, sp, #8
 8010c96:	60f8      	str	r0, [r7, #12]
 8010c98:	60b9      	str	r1, [r7, #8]
 8010c9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ca0:	f3ef 8305 	mrs	r3, IPSR
 8010ca4:	61bb      	str	r3, [r7, #24]
  return(result);
 8010ca6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d170      	bne.n	8010d8e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010cac:	f3ef 8310 	mrs	r3, PRIMASK
 8010cb0:	617b      	str	r3, [r7, #20]
  return(result);
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d105      	bne.n	8010cc4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010cb8:	f3ef 8311 	mrs	r3, BASEPRI
 8010cbc:	613b      	str	r3, [r7, #16]
  return(result);
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d003      	beq.n	8010ccc <osMessageQueueNew+0x3c>
 8010cc4:	4b34      	ldr	r3, [pc, #208]	; (8010d98 <osMessageQueueNew+0x108>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	2b02      	cmp	r3, #2
 8010cca:	d060      	beq.n	8010d8e <osMessageQueueNew+0xfe>
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d05d      	beq.n	8010d8e <osMessageQueueNew+0xfe>
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d05a      	beq.n	8010d8e <osMessageQueueNew+0xfe>
    mem = -1;
 8010cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cdc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d029      	beq.n	8010d38 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	689b      	ldr	r3, [r3, #8]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d012      	beq.n	8010d12 <osMessageQueueNew+0x82>
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	68db      	ldr	r3, [r3, #12]
 8010cf0:	2b4f      	cmp	r3, #79	; 0x4f
 8010cf2:	d90e      	bls.n	8010d12 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d00a      	beq.n	8010d12 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	695a      	ldr	r2, [r3, #20]
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	68b9      	ldr	r1, [r7, #8]
 8010d04:	fb01 f303 	mul.w	r3, r1, r3
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d302      	bcc.n	8010d12 <osMessageQueueNew+0x82>
        mem = 1;
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	623b      	str	r3, [r7, #32]
 8010d10:	e014      	b.n	8010d3c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	689b      	ldr	r3, [r3, #8]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d110      	bne.n	8010d3c <osMessageQueueNew+0xac>
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	68db      	ldr	r3, [r3, #12]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d10c      	bne.n	8010d3c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d108      	bne.n	8010d3c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	695b      	ldr	r3, [r3, #20]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d104      	bne.n	8010d3c <osMessageQueueNew+0xac>
          mem = 0;
 8010d32:	2300      	movs	r3, #0
 8010d34:	623b      	str	r3, [r7, #32]
 8010d36:	e001      	b.n	8010d3c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010d3c:	6a3b      	ldr	r3, [r7, #32]
 8010d3e:	2b01      	cmp	r3, #1
 8010d40:	d10c      	bne.n	8010d5c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	691a      	ldr	r2, [r3, #16]
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6899      	ldr	r1, [r3, #8]
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	9300      	str	r3, [sp, #0]
 8010d4e:	460b      	mov	r3, r1
 8010d50:	68b9      	ldr	r1, [r7, #8]
 8010d52:	68f8      	ldr	r0, [r7, #12]
 8010d54:	f000 fa62 	bl	801121c <xQueueGenericCreateStatic>
 8010d58:	6278      	str	r0, [r7, #36]	; 0x24
 8010d5a:	e008      	b.n	8010d6e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8010d5c:	6a3b      	ldr	r3, [r7, #32]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d105      	bne.n	8010d6e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8010d62:	2200      	movs	r2, #0
 8010d64:	68b9      	ldr	r1, [r7, #8]
 8010d66:	68f8      	ldr	r0, [r7, #12]
 8010d68:	f000 fad5 	bl	8011316 <xQueueGenericCreate>
 8010d6c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d00c      	beq.n	8010d8e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d003      	beq.n	8010d82 <osMessageQueueNew+0xf2>
        name = attr->name;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	61fb      	str	r3, [r7, #28]
 8010d80:	e001      	b.n	8010d86 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8010d82:	2300      	movs	r3, #0
 8010d84:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8010d86:	69f9      	ldr	r1, [r7, #28]
 8010d88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d8a:	f001 fa41 	bl	8012210 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010d90:	4618      	mov	r0, r3
 8010d92:	3728      	adds	r7, #40	; 0x28
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}
 8010d98:	2000025c 	.word	0x2000025c

08010d9c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b08a      	sub	sp, #40	; 0x28
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	60f8      	str	r0, [r7, #12]
 8010da4:	60b9      	str	r1, [r7, #8]
 8010da6:	603b      	str	r3, [r7, #0]
 8010da8:	4613      	mov	r3, r2
 8010daa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010db0:	2300      	movs	r3, #0
 8010db2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010db4:	f3ef 8305 	mrs	r3, IPSR
 8010db8:	61fb      	str	r3, [r7, #28]
  return(result);
 8010dba:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d10f      	bne.n	8010de0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8010dc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8010dc6:	69bb      	ldr	r3, [r7, #24]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d105      	bne.n	8010dd8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010dcc:	f3ef 8311 	mrs	r3, BASEPRI
 8010dd0:	617b      	str	r3, [r7, #20]
  return(result);
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d02c      	beq.n	8010e32 <osMessageQueuePut+0x96>
 8010dd8:	4b28      	ldr	r3, [pc, #160]	; (8010e7c <osMessageQueuePut+0xe0>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	2b02      	cmp	r3, #2
 8010dde:	d128      	bne.n	8010e32 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010de0:	6a3b      	ldr	r3, [r7, #32]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d005      	beq.n	8010df2 <osMessageQueuePut+0x56>
 8010de6:	68bb      	ldr	r3, [r7, #8]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d002      	beq.n	8010df2 <osMessageQueuePut+0x56>
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d003      	beq.n	8010dfa <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8010df2:	f06f 0303 	mvn.w	r3, #3
 8010df6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010df8:	e039      	b.n	8010e6e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010dfe:	f107 0210 	add.w	r2, r7, #16
 8010e02:	2300      	movs	r3, #0
 8010e04:	68b9      	ldr	r1, [r7, #8]
 8010e06:	6a38      	ldr	r0, [r7, #32]
 8010e08:	f000 fd12 	bl	8011830 <xQueueGenericSendFromISR>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	d003      	beq.n	8010e1a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8010e12:	f06f 0302 	mvn.w	r3, #2
 8010e16:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010e18:	e029      	b.n	8010e6e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8010e1a:	693b      	ldr	r3, [r7, #16]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d026      	beq.n	8010e6e <osMessageQueuePut+0xd2>
 8010e20:	4b17      	ldr	r3, [pc, #92]	; (8010e80 <osMessageQueuePut+0xe4>)
 8010e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e26:	601a      	str	r2, [r3, #0]
 8010e28:	f3bf 8f4f 	dsb	sy
 8010e2c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010e30:	e01d      	b.n	8010e6e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010e32:	6a3b      	ldr	r3, [r7, #32]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d002      	beq.n	8010e3e <osMessageQueuePut+0xa2>
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d103      	bne.n	8010e46 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8010e3e:	f06f 0303 	mvn.w	r3, #3
 8010e42:	627b      	str	r3, [r7, #36]	; 0x24
 8010e44:	e014      	b.n	8010e70 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010e46:	2300      	movs	r3, #0
 8010e48:	683a      	ldr	r2, [r7, #0]
 8010e4a:	68b9      	ldr	r1, [r7, #8]
 8010e4c:	6a38      	ldr	r0, [r7, #32]
 8010e4e:	f000 fbed 	bl	801162c <xQueueGenericSend>
 8010e52:	4603      	mov	r3, r0
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	d00b      	beq.n	8010e70 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d003      	beq.n	8010e66 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8010e5e:	f06f 0301 	mvn.w	r3, #1
 8010e62:	627b      	str	r3, [r7, #36]	; 0x24
 8010e64:	e004      	b.n	8010e70 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8010e66:	f06f 0302 	mvn.w	r3, #2
 8010e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8010e6c:	e000      	b.n	8010e70 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010e6e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3728      	adds	r7, #40	; 0x28
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	2000025c 	.word	0x2000025c
 8010e80:	e000ed04 	.word	0xe000ed04

08010e84 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b08a      	sub	sp, #40	; 0x28
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	60f8      	str	r0, [r7, #12]
 8010e8c:	60b9      	str	r1, [r7, #8]
 8010e8e:	607a      	str	r2, [r7, #4]
 8010e90:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010e96:	2300      	movs	r3, #0
 8010e98:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e9a:	f3ef 8305 	mrs	r3, IPSR
 8010e9e:	61fb      	str	r3, [r7, #28]
  return(result);
 8010ea0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d10f      	bne.n	8010ec6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8010eaa:	61bb      	str	r3, [r7, #24]
  return(result);
 8010eac:	69bb      	ldr	r3, [r7, #24]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d105      	bne.n	8010ebe <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010eb2:	f3ef 8311 	mrs	r3, BASEPRI
 8010eb6:	617b      	str	r3, [r7, #20]
  return(result);
 8010eb8:	697b      	ldr	r3, [r7, #20]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d02c      	beq.n	8010f18 <osMessageQueueGet+0x94>
 8010ebe:	4b28      	ldr	r3, [pc, #160]	; (8010f60 <osMessageQueueGet+0xdc>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	2b02      	cmp	r3, #2
 8010ec4:	d128      	bne.n	8010f18 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010ec6:	6a3b      	ldr	r3, [r7, #32]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d005      	beq.n	8010ed8 <osMessageQueueGet+0x54>
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d002      	beq.n	8010ed8 <osMessageQueueGet+0x54>
 8010ed2:	683b      	ldr	r3, [r7, #0]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d003      	beq.n	8010ee0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8010ed8:	f06f 0303 	mvn.w	r3, #3
 8010edc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010ede:	e038      	b.n	8010f52 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010ee4:	f107 0310 	add.w	r3, r7, #16
 8010ee8:	461a      	mov	r2, r3
 8010eea:	68b9      	ldr	r1, [r7, #8]
 8010eec:	6a38      	ldr	r0, [r7, #32]
 8010eee:	f000 ffbf 	bl	8011e70 <xQueueReceiveFromISR>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	2b01      	cmp	r3, #1
 8010ef6:	d003      	beq.n	8010f00 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8010ef8:	f06f 0302 	mvn.w	r3, #2
 8010efc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010efe:	e028      	b.n	8010f52 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8010f00:	693b      	ldr	r3, [r7, #16]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d025      	beq.n	8010f52 <osMessageQueueGet+0xce>
 8010f06:	4b17      	ldr	r3, [pc, #92]	; (8010f64 <osMessageQueueGet+0xe0>)
 8010f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f0c:	601a      	str	r2, [r3, #0]
 8010f0e:	f3bf 8f4f 	dsb	sy
 8010f12:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f16:	e01c      	b.n	8010f52 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010f18:	6a3b      	ldr	r3, [r7, #32]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d002      	beq.n	8010f24 <osMessageQueueGet+0xa0>
 8010f1e:	68bb      	ldr	r3, [r7, #8]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d103      	bne.n	8010f2c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8010f24:	f06f 0303 	mvn.w	r3, #3
 8010f28:	627b      	str	r3, [r7, #36]	; 0x24
 8010f2a:	e013      	b.n	8010f54 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010f2c:	683a      	ldr	r2, [r7, #0]
 8010f2e:	68b9      	ldr	r1, [r7, #8]
 8010f30:	6a38      	ldr	r0, [r7, #32]
 8010f32:	f000 fdab 	bl	8011a8c <xQueueReceive>
 8010f36:	4603      	mov	r3, r0
 8010f38:	2b01      	cmp	r3, #1
 8010f3a:	d00b      	beq.n	8010f54 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8010f3c:	683b      	ldr	r3, [r7, #0]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d003      	beq.n	8010f4a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8010f42:	f06f 0301 	mvn.w	r3, #1
 8010f46:	627b      	str	r3, [r7, #36]	; 0x24
 8010f48:	e004      	b.n	8010f54 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8010f4a:	f06f 0302 	mvn.w	r3, #2
 8010f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8010f50:	e000      	b.n	8010f54 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f52:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3728      	adds	r7, #40	; 0x28
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	2000025c 	.word	0x2000025c
 8010f64:	e000ed04 	.word	0xe000ed04

08010f68 <vApplicationTickHook>:

/**
  Dummy implementation of the callback function vApplicationTickHook().
*/
#if (configUSE_TICK_HOOK == 1)
 __WEAK void vApplicationTickHook (void){}
 8010f68:	b480      	push	{r7}
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	bf00      	nop
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f74:	4770      	bx	lr
	...

08010f78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010f78:	b480      	push	{r7}
 8010f7a:	b085      	sub	sp, #20
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	60f8      	str	r0, [r7, #12]
 8010f80:	60b9      	str	r1, [r7, #8]
 8010f82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	4a07      	ldr	r2, [pc, #28]	; (8010fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8010f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	4a06      	ldr	r2, [pc, #24]	; (8010fa8 <vApplicationGetIdleTaskMemory+0x30>)
 8010f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2280      	movs	r2, #128	; 0x80
 8010f94:	601a      	str	r2, [r3, #0]
}
 8010f96:	bf00      	nop
 8010f98:	3714      	adds	r7, #20
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa0:	4770      	bx	lr
 8010fa2:	bf00      	nop
 8010fa4:	20000260 	.word	0x20000260
 8010fa8:	200002c0 	.word	0x200002c0

08010fac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010fac:	b480      	push	{r7}
 8010fae:	b085      	sub	sp, #20
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	60b9      	str	r1, [r7, #8]
 8010fb6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	4a07      	ldr	r2, [pc, #28]	; (8010fd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8010fbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	4a06      	ldr	r2, [pc, #24]	; (8010fdc <vApplicationGetTimerTaskMemory+0x30>)
 8010fc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010fca:	601a      	str	r2, [r3, #0]
}
 8010fcc:	bf00      	nop
 8010fce:	3714      	adds	r7, #20
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd6:	4770      	bx	lr
 8010fd8:	200004c0 	.word	0x200004c0
 8010fdc:	20000520 	.word	0x20000520

08010fe0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	b083      	sub	sp, #12
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f103 0208 	add.w	r2, r3, #8
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ff8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f103 0208 	add.w	r2, r3, #8
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f103 0208 	add.w	r2, r3, #8
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	2200      	movs	r2, #0
 8011012:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011014:	bf00      	nop
 8011016:	370c      	adds	r7, #12
 8011018:	46bd      	mov	sp, r7
 801101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101e:	4770      	bx	lr

08011020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011020:	b480      	push	{r7}
 8011022:	b083      	sub	sp, #12
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2200      	movs	r2, #0
 801102c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801102e:	bf00      	nop
 8011030:	370c      	adds	r7, #12
 8011032:	46bd      	mov	sp, r7
 8011034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011038:	4770      	bx	lr

0801103a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801103a:	b480      	push	{r7}
 801103c:	b085      	sub	sp, #20
 801103e:	af00      	add	r7, sp, #0
 8011040:	6078      	str	r0, [r7, #4]
 8011042:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	685b      	ldr	r3, [r3, #4]
 8011048:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	68fa      	ldr	r2, [r7, #12]
 801104e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	689a      	ldr	r2, [r3, #8]
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	689b      	ldr	r3, [r3, #8]
 801105c:	683a      	ldr	r2, [r7, #0]
 801105e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	683a      	ldr	r2, [r7, #0]
 8011064:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	687a      	ldr	r2, [r7, #4]
 801106a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	1c5a      	adds	r2, r3, #1
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	601a      	str	r2, [r3, #0]
}
 8011076:	bf00      	nop
 8011078:	3714      	adds	r7, #20
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr

08011082 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011082:	b480      	push	{r7}
 8011084:	b085      	sub	sp, #20
 8011086:	af00      	add	r7, sp, #0
 8011088:	6078      	str	r0, [r7, #4]
 801108a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011098:	d103      	bne.n	80110a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	691b      	ldr	r3, [r3, #16]
 801109e:	60fb      	str	r3, [r7, #12]
 80110a0:	e00c      	b.n	80110bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	3308      	adds	r3, #8
 80110a6:	60fb      	str	r3, [r7, #12]
 80110a8:	e002      	b.n	80110b0 <vListInsert+0x2e>
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	685b      	ldr	r3, [r3, #4]
 80110ae:	60fb      	str	r3, [r7, #12]
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	68ba      	ldr	r2, [r7, #8]
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d2f6      	bcs.n	80110aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	685a      	ldr	r2, [r3, #4]
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	683a      	ldr	r2, [r7, #0]
 80110ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	68fa      	ldr	r2, [r7, #12]
 80110d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	683a      	ldr	r2, [r7, #0]
 80110d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	687a      	ldr	r2, [r7, #4]
 80110dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	1c5a      	adds	r2, r3, #1
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	601a      	str	r2, [r3, #0]
}
 80110e8:	bf00      	nop
 80110ea:	3714      	adds	r7, #20
 80110ec:	46bd      	mov	sp, r7
 80110ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f2:	4770      	bx	lr

080110f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80110f4:	b480      	push	{r7}
 80110f6:	b085      	sub	sp, #20
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	691b      	ldr	r3, [r3, #16]
 8011100:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	685b      	ldr	r3, [r3, #4]
 8011106:	687a      	ldr	r2, [r7, #4]
 8011108:	6892      	ldr	r2, [r2, #8]
 801110a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	689b      	ldr	r3, [r3, #8]
 8011110:	687a      	ldr	r2, [r7, #4]
 8011112:	6852      	ldr	r2, [r2, #4]
 8011114:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	685b      	ldr	r3, [r3, #4]
 801111a:	687a      	ldr	r2, [r7, #4]
 801111c:	429a      	cmp	r2, r3
 801111e:	d103      	bne.n	8011128 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	689a      	ldr	r2, [r3, #8]
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2200      	movs	r2, #0
 801112c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	1e5a      	subs	r2, r3, #1
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	681b      	ldr	r3, [r3, #0]
}
 801113c:	4618      	mov	r0, r3
 801113e:	3714      	adds	r7, #20
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr

08011148 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b084      	sub	sp, #16
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d10b      	bne.n	8011174 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801115c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011160:	b672      	cpsid	i
 8011162:	f383 8811 	msr	BASEPRI, r3
 8011166:	f3bf 8f6f 	isb	sy
 801116a:	f3bf 8f4f 	dsb	sy
 801116e:	b662      	cpsie	i
 8011170:	60bb      	str	r3, [r7, #8]
 8011172:	e7fe      	b.n	8011172 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8011174:	f002 fe68 	bl	8013e48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	681a      	ldr	r2, [r3, #0]
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011180:	68f9      	ldr	r1, [r7, #12]
 8011182:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011184:	fb01 f303 	mul.w	r3, r1, r3
 8011188:	441a      	add	r2, r3
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2200      	movs	r2, #0
 8011192:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	681a      	ldr	r2, [r3, #0]
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	681a      	ldr	r2, [r3, #0]
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111a4:	3b01      	subs	r3, #1
 80111a6:	68f9      	ldr	r1, [r7, #12]
 80111a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80111aa:	fb01 f303 	mul.w	r3, r1, r3
 80111ae:	441a      	add	r2, r3
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	22ff      	movs	r2, #255	; 0xff
 80111b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	22ff      	movs	r2, #255	; 0xff
 80111c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d114      	bne.n	80111f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	691b      	ldr	r3, [r3, #16]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d01a      	beq.n	8011208 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	3310      	adds	r3, #16
 80111d6:	4618      	mov	r0, r3
 80111d8:	f001 fe28 	bl	8012e2c <xTaskRemoveFromEventList>
 80111dc:	4603      	mov	r3, r0
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d012      	beq.n	8011208 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80111e2:	4b0d      	ldr	r3, [pc, #52]	; (8011218 <xQueueGenericReset+0xd0>)
 80111e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111e8:	601a      	str	r2, [r3, #0]
 80111ea:	f3bf 8f4f 	dsb	sy
 80111ee:	f3bf 8f6f 	isb	sy
 80111f2:	e009      	b.n	8011208 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	3310      	adds	r3, #16
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7ff fef1 	bl	8010fe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	3324      	adds	r3, #36	; 0x24
 8011202:	4618      	mov	r0, r3
 8011204:	f7ff feec 	bl	8010fe0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011208:	f002 fe50 	bl	8013eac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801120c:	2301      	movs	r3, #1
}
 801120e:	4618      	mov	r0, r3
 8011210:	3710      	adds	r7, #16
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	e000ed04 	.word	0xe000ed04

0801121c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801121c:	b580      	push	{r7, lr}
 801121e:	b08e      	sub	sp, #56	; 0x38
 8011220:	af02      	add	r7, sp, #8
 8011222:	60f8      	str	r0, [r7, #12]
 8011224:	60b9      	str	r1, [r7, #8]
 8011226:	607a      	str	r2, [r7, #4]
 8011228:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d10b      	bne.n	8011248 <xQueueGenericCreateStatic+0x2c>
 8011230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011234:	b672      	cpsid	i
 8011236:	f383 8811 	msr	BASEPRI, r3
 801123a:	f3bf 8f6f 	isb	sy
 801123e:	f3bf 8f4f 	dsb	sy
 8011242:	b662      	cpsie	i
 8011244:	62bb      	str	r3, [r7, #40]	; 0x28
 8011246:	e7fe      	b.n	8011246 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d10b      	bne.n	8011266 <xQueueGenericCreateStatic+0x4a>
 801124e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011252:	b672      	cpsid	i
 8011254:	f383 8811 	msr	BASEPRI, r3
 8011258:	f3bf 8f6f 	isb	sy
 801125c:	f3bf 8f4f 	dsb	sy
 8011260:	b662      	cpsie	i
 8011262:	627b      	str	r3, [r7, #36]	; 0x24
 8011264:	e7fe      	b.n	8011264 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d002      	beq.n	8011272 <xQueueGenericCreateStatic+0x56>
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d001      	beq.n	8011276 <xQueueGenericCreateStatic+0x5a>
 8011272:	2301      	movs	r3, #1
 8011274:	e000      	b.n	8011278 <xQueueGenericCreateStatic+0x5c>
 8011276:	2300      	movs	r3, #0
 8011278:	2b00      	cmp	r3, #0
 801127a:	d10b      	bne.n	8011294 <xQueueGenericCreateStatic+0x78>
 801127c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011280:	b672      	cpsid	i
 8011282:	f383 8811 	msr	BASEPRI, r3
 8011286:	f3bf 8f6f 	isb	sy
 801128a:	f3bf 8f4f 	dsb	sy
 801128e:	b662      	cpsie	i
 8011290:	623b      	str	r3, [r7, #32]
 8011292:	e7fe      	b.n	8011292 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d102      	bne.n	80112a0 <xQueueGenericCreateStatic+0x84>
 801129a:	68bb      	ldr	r3, [r7, #8]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d101      	bne.n	80112a4 <xQueueGenericCreateStatic+0x88>
 80112a0:	2301      	movs	r3, #1
 80112a2:	e000      	b.n	80112a6 <xQueueGenericCreateStatic+0x8a>
 80112a4:	2300      	movs	r3, #0
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d10b      	bne.n	80112c2 <xQueueGenericCreateStatic+0xa6>
 80112aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ae:	b672      	cpsid	i
 80112b0:	f383 8811 	msr	BASEPRI, r3
 80112b4:	f3bf 8f6f 	isb	sy
 80112b8:	f3bf 8f4f 	dsb	sy
 80112bc:	b662      	cpsie	i
 80112be:	61fb      	str	r3, [r7, #28]
 80112c0:	e7fe      	b.n	80112c0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80112c2:	2350      	movs	r3, #80	; 0x50
 80112c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	2b50      	cmp	r3, #80	; 0x50
 80112ca:	d00b      	beq.n	80112e4 <xQueueGenericCreateStatic+0xc8>
 80112cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d0:	b672      	cpsid	i
 80112d2:	f383 8811 	msr	BASEPRI, r3
 80112d6:	f3bf 8f6f 	isb	sy
 80112da:	f3bf 8f4f 	dsb	sy
 80112de:	b662      	cpsie	i
 80112e0:	61bb      	str	r3, [r7, #24]
 80112e2:	e7fe      	b.n	80112e2 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80112e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80112ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d00d      	beq.n	801130c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80112f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f2:	2201      	movs	r2, #1
 80112f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80112f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80112fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112fe:	9300      	str	r3, [sp, #0]
 8011300:	4613      	mov	r3, r2
 8011302:	687a      	ldr	r2, [r7, #4]
 8011304:	68b9      	ldr	r1, [r7, #8]
 8011306:	68f8      	ldr	r0, [r7, #12]
 8011308:	f000 f846 	bl	8011398 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801130c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801130e:	4618      	mov	r0, r3
 8011310:	3730      	adds	r7, #48	; 0x30
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}

08011316 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011316:	b580      	push	{r7, lr}
 8011318:	b08a      	sub	sp, #40	; 0x28
 801131a:	af02      	add	r7, sp, #8
 801131c:	60f8      	str	r0, [r7, #12]
 801131e:	60b9      	str	r1, [r7, #8]
 8011320:	4613      	mov	r3, r2
 8011322:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d10b      	bne.n	8011342 <xQueueGenericCreate+0x2c>
 801132a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801132e:	b672      	cpsid	i
 8011330:	f383 8811 	msr	BASEPRI, r3
 8011334:	f3bf 8f6f 	isb	sy
 8011338:	f3bf 8f4f 	dsb	sy
 801133c:	b662      	cpsie	i
 801133e:	613b      	str	r3, [r7, #16]
 8011340:	e7fe      	b.n	8011340 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d102      	bne.n	801134e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011348:	2300      	movs	r3, #0
 801134a:	61fb      	str	r3, [r7, #28]
 801134c:	e004      	b.n	8011358 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	68ba      	ldr	r2, [r7, #8]
 8011352:	fb02 f303 	mul.w	r3, r2, r3
 8011356:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011358:	69fb      	ldr	r3, [r7, #28]
 801135a:	3350      	adds	r3, #80	; 0x50
 801135c:	4618      	mov	r0, r3
 801135e:	f002 fe95 	bl	801408c <pvPortMalloc>
 8011362:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011364:	69bb      	ldr	r3, [r7, #24]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d011      	beq.n	801138e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801136a:	69bb      	ldr	r3, [r7, #24]
 801136c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	3350      	adds	r3, #80	; 0x50
 8011372:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011374:	69bb      	ldr	r3, [r7, #24]
 8011376:	2200      	movs	r2, #0
 8011378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801137c:	79fa      	ldrb	r2, [r7, #7]
 801137e:	69bb      	ldr	r3, [r7, #24]
 8011380:	9300      	str	r3, [sp, #0]
 8011382:	4613      	mov	r3, r2
 8011384:	697a      	ldr	r2, [r7, #20]
 8011386:	68b9      	ldr	r1, [r7, #8]
 8011388:	68f8      	ldr	r0, [r7, #12]
 801138a:	f000 f805 	bl	8011398 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801138e:	69bb      	ldr	r3, [r7, #24]
	}
 8011390:	4618      	mov	r0, r3
 8011392:	3720      	adds	r7, #32
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}

08011398 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b084      	sub	sp, #16
 801139c:	af00      	add	r7, sp, #0
 801139e:	60f8      	str	r0, [r7, #12]
 80113a0:	60b9      	str	r1, [r7, #8]
 80113a2:	607a      	str	r2, [r7, #4]
 80113a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d103      	bne.n	80113b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80113ac:	69bb      	ldr	r3, [r7, #24]
 80113ae:	69ba      	ldr	r2, [r7, #24]
 80113b0:	601a      	str	r2, [r3, #0]
 80113b2:	e002      	b.n	80113ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80113b4:	69bb      	ldr	r3, [r7, #24]
 80113b6:	687a      	ldr	r2, [r7, #4]
 80113b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80113ba:	69bb      	ldr	r3, [r7, #24]
 80113bc:	68fa      	ldr	r2, [r7, #12]
 80113be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80113c0:	69bb      	ldr	r3, [r7, #24]
 80113c2:	68ba      	ldr	r2, [r7, #8]
 80113c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80113c6:	2101      	movs	r1, #1
 80113c8:	69b8      	ldr	r0, [r7, #24]
 80113ca:	f7ff febd 	bl	8011148 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80113ce:	69bb      	ldr	r3, [r7, #24]
 80113d0:	78fa      	ldrb	r2, [r7, #3]
 80113d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80113d6:	bf00      	nop
 80113d8:	3710      	adds	r7, #16
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}

080113de <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80113de:	b580      	push	{r7, lr}
 80113e0:	b082      	sub	sp, #8
 80113e2:	af00      	add	r7, sp, #0
 80113e4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d00e      	beq.n	801140a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2200      	movs	r2, #0
 80113f0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2200      	movs	r2, #0
 80113f6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2200      	movs	r2, #0
 80113fc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80113fe:	2300      	movs	r3, #0
 8011400:	2200      	movs	r2, #0
 8011402:	2100      	movs	r1, #0
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f000 f911 	bl	801162c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801140a:	bf00      	nop
 801140c:	3708      	adds	r7, #8
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}

08011412 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011412:	b580      	push	{r7, lr}
 8011414:	b086      	sub	sp, #24
 8011416:	af00      	add	r7, sp, #0
 8011418:	4603      	mov	r3, r0
 801141a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801141c:	2301      	movs	r3, #1
 801141e:	617b      	str	r3, [r7, #20]
 8011420:	2300      	movs	r3, #0
 8011422:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011424:	79fb      	ldrb	r3, [r7, #7]
 8011426:	461a      	mov	r2, r3
 8011428:	6939      	ldr	r1, [r7, #16]
 801142a:	6978      	ldr	r0, [r7, #20]
 801142c:	f7ff ff73 	bl	8011316 <xQueueGenericCreate>
 8011430:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011432:	68f8      	ldr	r0, [r7, #12]
 8011434:	f7ff ffd3 	bl	80113de <prvInitialiseMutex>

		return xNewQueue;
 8011438:	68fb      	ldr	r3, [r7, #12]
	}
 801143a:	4618      	mov	r0, r3
 801143c:	3718      	adds	r7, #24
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}

08011442 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011442:	b580      	push	{r7, lr}
 8011444:	b088      	sub	sp, #32
 8011446:	af02      	add	r7, sp, #8
 8011448:	4603      	mov	r3, r0
 801144a:	6039      	str	r1, [r7, #0]
 801144c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801144e:	2301      	movs	r3, #1
 8011450:	617b      	str	r3, [r7, #20]
 8011452:	2300      	movs	r3, #0
 8011454:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011456:	79fb      	ldrb	r3, [r7, #7]
 8011458:	9300      	str	r3, [sp, #0]
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	2200      	movs	r2, #0
 801145e:	6939      	ldr	r1, [r7, #16]
 8011460:	6978      	ldr	r0, [r7, #20]
 8011462:	f7ff fedb 	bl	801121c <xQueueGenericCreateStatic>
 8011466:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011468:	68f8      	ldr	r0, [r7, #12]
 801146a:	f7ff ffb8 	bl	80113de <prvInitialiseMutex>

		return xNewQueue;
 801146e:	68fb      	ldr	r3, [r7, #12]
	}
 8011470:	4618      	mov	r0, r3
 8011472:	3718      	adds	r7, #24
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}

08011478 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8011478:	b590      	push	{r4, r7, lr}
 801147a:	b087      	sub	sp, #28
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d10b      	bne.n	80114a2 <xQueueGiveMutexRecursive+0x2a>
 801148a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801148e:	b672      	cpsid	i
 8011490:	f383 8811 	msr	BASEPRI, r3
 8011494:	f3bf 8f6f 	isb	sy
 8011498:	f3bf 8f4f 	dsb	sy
 801149c:	b662      	cpsie	i
 801149e:	60fb      	str	r3, [r7, #12]
 80114a0:	e7fe      	b.n	80114a0 <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	689c      	ldr	r4, [r3, #8]
 80114a6:	f001 fe81 	bl	80131ac <xTaskGetCurrentTaskHandle>
 80114aa:	4603      	mov	r3, r0
 80114ac:	429c      	cmp	r4, r3
 80114ae:	d111      	bne.n	80114d4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80114b0:	693b      	ldr	r3, [r7, #16]
 80114b2:	68db      	ldr	r3, [r3, #12]
 80114b4:	1e5a      	subs	r2, r3, #1
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d105      	bne.n	80114ce <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80114c2:	2300      	movs	r3, #0
 80114c4:	2200      	movs	r2, #0
 80114c6:	2100      	movs	r1, #0
 80114c8:	6938      	ldr	r0, [r7, #16]
 80114ca:	f000 f8af 	bl	801162c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80114ce:	2301      	movs	r3, #1
 80114d0:	617b      	str	r3, [r7, #20]
 80114d2:	e001      	b.n	80114d8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80114d4:	2300      	movs	r3, #0
 80114d6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80114d8:	697b      	ldr	r3, [r7, #20]
	}
 80114da:	4618      	mov	r0, r3
 80114dc:	371c      	adds	r7, #28
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd90      	pop	{r4, r7, pc}

080114e2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80114e2:	b590      	push	{r4, r7, lr}
 80114e4:	b087      	sub	sp, #28
 80114e6:	af00      	add	r7, sp, #0
 80114e8:	6078      	str	r0, [r7, #4]
 80114ea:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d10b      	bne.n	801150e <xQueueTakeMutexRecursive+0x2c>
 80114f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114fa:	b672      	cpsid	i
 80114fc:	f383 8811 	msr	BASEPRI, r3
 8011500:	f3bf 8f6f 	isb	sy
 8011504:	f3bf 8f4f 	dsb	sy
 8011508:	b662      	cpsie	i
 801150a:	60fb      	str	r3, [r7, #12]
 801150c:	e7fe      	b.n	801150c <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	689c      	ldr	r4, [r3, #8]
 8011512:	f001 fe4b 	bl	80131ac <xTaskGetCurrentTaskHandle>
 8011516:	4603      	mov	r3, r0
 8011518:	429c      	cmp	r4, r3
 801151a:	d107      	bne.n	801152c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801151c:	693b      	ldr	r3, [r7, #16]
 801151e:	68db      	ldr	r3, [r3, #12]
 8011520:	1c5a      	adds	r2, r3, #1
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8011526:	2301      	movs	r3, #1
 8011528:	617b      	str	r3, [r7, #20]
 801152a:	e00c      	b.n	8011546 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801152c:	6839      	ldr	r1, [r7, #0]
 801152e:	6938      	ldr	r0, [r7, #16]
 8011530:	f000 fb8e 	bl	8011c50 <xQueueSemaphoreTake>
 8011534:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d004      	beq.n	8011546 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801153c:	693b      	ldr	r3, [r7, #16]
 801153e:	68db      	ldr	r3, [r3, #12]
 8011540:	1c5a      	adds	r2, r3, #1
 8011542:	693b      	ldr	r3, [r7, #16]
 8011544:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8011546:	697b      	ldr	r3, [r7, #20]
	}
 8011548:	4618      	mov	r0, r3
 801154a:	371c      	adds	r7, #28
 801154c:	46bd      	mov	sp, r7
 801154e:	bd90      	pop	{r4, r7, pc}

08011550 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8011550:	b580      	push	{r7, lr}
 8011552:	b08a      	sub	sp, #40	; 0x28
 8011554:	af02      	add	r7, sp, #8
 8011556:	60f8      	str	r0, [r7, #12]
 8011558:	60b9      	str	r1, [r7, #8]
 801155a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d10b      	bne.n	801157a <xQueueCreateCountingSemaphoreStatic+0x2a>
 8011562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011566:	b672      	cpsid	i
 8011568:	f383 8811 	msr	BASEPRI, r3
 801156c:	f3bf 8f6f 	isb	sy
 8011570:	f3bf 8f4f 	dsb	sy
 8011574:	b662      	cpsie	i
 8011576:	61bb      	str	r3, [r7, #24]
 8011578:	e7fe      	b.n	8011578 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 801157a:	68ba      	ldr	r2, [r7, #8]
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	429a      	cmp	r2, r3
 8011580:	d90b      	bls.n	801159a <xQueueCreateCountingSemaphoreStatic+0x4a>
 8011582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011586:	b672      	cpsid	i
 8011588:	f383 8811 	msr	BASEPRI, r3
 801158c:	f3bf 8f6f 	isb	sy
 8011590:	f3bf 8f4f 	dsb	sy
 8011594:	b662      	cpsie	i
 8011596:	617b      	str	r3, [r7, #20]
 8011598:	e7fe      	b.n	8011598 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801159a:	2302      	movs	r3, #2
 801159c:	9300      	str	r3, [sp, #0]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2200      	movs	r2, #0
 80115a2:	2100      	movs	r1, #0
 80115a4:	68f8      	ldr	r0, [r7, #12]
 80115a6:	f7ff fe39 	bl	801121c <xQueueGenericCreateStatic>
 80115aa:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80115ac:	69fb      	ldr	r3, [r7, #28]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d002      	beq.n	80115b8 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80115b2:	69fb      	ldr	r3, [r7, #28]
 80115b4:	68ba      	ldr	r2, [r7, #8]
 80115b6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80115b8:	69fb      	ldr	r3, [r7, #28]
	}
 80115ba:	4618      	mov	r0, r3
 80115bc:	3720      	adds	r7, #32
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}

080115c2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80115c2:	b580      	push	{r7, lr}
 80115c4:	b086      	sub	sp, #24
 80115c6:	af00      	add	r7, sp, #0
 80115c8:	6078      	str	r0, [r7, #4]
 80115ca:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d10b      	bne.n	80115ea <xQueueCreateCountingSemaphore+0x28>
 80115d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115d6:	b672      	cpsid	i
 80115d8:	f383 8811 	msr	BASEPRI, r3
 80115dc:	f3bf 8f6f 	isb	sy
 80115e0:	f3bf 8f4f 	dsb	sy
 80115e4:	b662      	cpsie	i
 80115e6:	613b      	str	r3, [r7, #16]
 80115e8:	e7fe      	b.n	80115e8 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80115ea:	683a      	ldr	r2, [r7, #0]
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	429a      	cmp	r2, r3
 80115f0:	d90b      	bls.n	801160a <xQueueCreateCountingSemaphore+0x48>
 80115f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f6:	b672      	cpsid	i
 80115f8:	f383 8811 	msr	BASEPRI, r3
 80115fc:	f3bf 8f6f 	isb	sy
 8011600:	f3bf 8f4f 	dsb	sy
 8011604:	b662      	cpsie	i
 8011606:	60fb      	str	r3, [r7, #12]
 8011608:	e7fe      	b.n	8011608 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801160a:	2202      	movs	r2, #2
 801160c:	2100      	movs	r1, #0
 801160e:	6878      	ldr	r0, [r7, #4]
 8011610:	f7ff fe81 	bl	8011316 <xQueueGenericCreate>
 8011614:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d002      	beq.n	8011622 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	683a      	ldr	r2, [r7, #0]
 8011620:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011622:	697b      	ldr	r3, [r7, #20]
	}
 8011624:	4618      	mov	r0, r3
 8011626:	3718      	adds	r7, #24
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}

0801162c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b08e      	sub	sp, #56	; 0x38
 8011630:	af00      	add	r7, sp, #0
 8011632:	60f8      	str	r0, [r7, #12]
 8011634:	60b9      	str	r1, [r7, #8]
 8011636:	607a      	str	r2, [r7, #4]
 8011638:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801163a:	2300      	movs	r3, #0
 801163c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011644:	2b00      	cmp	r3, #0
 8011646:	d10b      	bne.n	8011660 <xQueueGenericSend+0x34>
 8011648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801164c:	b672      	cpsid	i
 801164e:	f383 8811 	msr	BASEPRI, r3
 8011652:	f3bf 8f6f 	isb	sy
 8011656:	f3bf 8f4f 	dsb	sy
 801165a:	b662      	cpsie	i
 801165c:	62bb      	str	r3, [r7, #40]	; 0x28
 801165e:	e7fe      	b.n	801165e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d103      	bne.n	801166e <xQueueGenericSend+0x42>
 8011666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801166a:	2b00      	cmp	r3, #0
 801166c:	d101      	bne.n	8011672 <xQueueGenericSend+0x46>
 801166e:	2301      	movs	r3, #1
 8011670:	e000      	b.n	8011674 <xQueueGenericSend+0x48>
 8011672:	2300      	movs	r3, #0
 8011674:	2b00      	cmp	r3, #0
 8011676:	d10b      	bne.n	8011690 <xQueueGenericSend+0x64>
 8011678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801167c:	b672      	cpsid	i
 801167e:	f383 8811 	msr	BASEPRI, r3
 8011682:	f3bf 8f6f 	isb	sy
 8011686:	f3bf 8f4f 	dsb	sy
 801168a:	b662      	cpsie	i
 801168c:	627b      	str	r3, [r7, #36]	; 0x24
 801168e:	e7fe      	b.n	801168e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	2b02      	cmp	r3, #2
 8011694:	d103      	bne.n	801169e <xQueueGenericSend+0x72>
 8011696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801169a:	2b01      	cmp	r3, #1
 801169c:	d101      	bne.n	80116a2 <xQueueGenericSend+0x76>
 801169e:	2301      	movs	r3, #1
 80116a0:	e000      	b.n	80116a4 <xQueueGenericSend+0x78>
 80116a2:	2300      	movs	r3, #0
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d10b      	bne.n	80116c0 <xQueueGenericSend+0x94>
 80116a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ac:	b672      	cpsid	i
 80116ae:	f383 8811 	msr	BASEPRI, r3
 80116b2:	f3bf 8f6f 	isb	sy
 80116b6:	f3bf 8f4f 	dsb	sy
 80116ba:	b662      	cpsie	i
 80116bc:	623b      	str	r3, [r7, #32]
 80116be:	e7fe      	b.n	80116be <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80116c0:	f001 fd84 	bl	80131cc <xTaskGetSchedulerState>
 80116c4:	4603      	mov	r3, r0
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d102      	bne.n	80116d0 <xQueueGenericSend+0xa4>
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d101      	bne.n	80116d4 <xQueueGenericSend+0xa8>
 80116d0:	2301      	movs	r3, #1
 80116d2:	e000      	b.n	80116d6 <xQueueGenericSend+0xaa>
 80116d4:	2300      	movs	r3, #0
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d10b      	bne.n	80116f2 <xQueueGenericSend+0xc6>
 80116da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116de:	b672      	cpsid	i
 80116e0:	f383 8811 	msr	BASEPRI, r3
 80116e4:	f3bf 8f6f 	isb	sy
 80116e8:	f3bf 8f4f 	dsb	sy
 80116ec:	b662      	cpsie	i
 80116ee:	61fb      	str	r3, [r7, #28]
 80116f0:	e7fe      	b.n	80116f0 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80116f2:	f002 fba9 	bl	8013e48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80116f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116fe:	429a      	cmp	r2, r3
 8011700:	d302      	bcc.n	8011708 <xQueueGenericSend+0xdc>
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	2b02      	cmp	r3, #2
 8011706:	d129      	bne.n	801175c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011708:	683a      	ldr	r2, [r7, #0]
 801170a:	68b9      	ldr	r1, [r7, #8]
 801170c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801170e:	f000 fc6e 	bl	8011fee <prvCopyDataToQueue>
 8011712:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011718:	2b00      	cmp	r3, #0
 801171a:	d010      	beq.n	801173e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801171c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801171e:	3324      	adds	r3, #36	; 0x24
 8011720:	4618      	mov	r0, r3
 8011722:	f001 fb83 	bl	8012e2c <xTaskRemoveFromEventList>
 8011726:	4603      	mov	r3, r0
 8011728:	2b00      	cmp	r3, #0
 801172a:	d013      	beq.n	8011754 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801172c:	4b3f      	ldr	r3, [pc, #252]	; (801182c <xQueueGenericSend+0x200>)
 801172e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011732:	601a      	str	r2, [r3, #0]
 8011734:	f3bf 8f4f 	dsb	sy
 8011738:	f3bf 8f6f 	isb	sy
 801173c:	e00a      	b.n	8011754 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801173e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011740:	2b00      	cmp	r3, #0
 8011742:	d007      	beq.n	8011754 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011744:	4b39      	ldr	r3, [pc, #228]	; (801182c <xQueueGenericSend+0x200>)
 8011746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801174a:	601a      	str	r2, [r3, #0]
 801174c:	f3bf 8f4f 	dsb	sy
 8011750:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011754:	f002 fbaa 	bl	8013eac <vPortExitCritical>
				return pdPASS;
 8011758:	2301      	movs	r3, #1
 801175a:	e063      	b.n	8011824 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d103      	bne.n	801176a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011762:	f002 fba3 	bl	8013eac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011766:	2300      	movs	r3, #0
 8011768:	e05c      	b.n	8011824 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801176a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801176c:	2b00      	cmp	r3, #0
 801176e:	d106      	bne.n	801177e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011770:	f107 0314 	add.w	r3, r7, #20
 8011774:	4618      	mov	r0, r3
 8011776:	f001 fbbd 	bl	8012ef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801177a:	2301      	movs	r3, #1
 801177c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801177e:	f002 fb95 	bl	8013eac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011782:	f001 f8ed 	bl	8012960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011786:	f002 fb5f 	bl	8013e48 <vPortEnterCritical>
 801178a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801178c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011790:	b25b      	sxtb	r3, r3
 8011792:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011796:	d103      	bne.n	80117a0 <xQueueGenericSend+0x174>
 8011798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179a:	2200      	movs	r2, #0
 801179c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80117a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117a6:	b25b      	sxtb	r3, r3
 80117a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117ac:	d103      	bne.n	80117b6 <xQueueGenericSend+0x18a>
 80117ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b0:	2200      	movs	r2, #0
 80117b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80117b6:	f002 fb79 	bl	8013eac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80117ba:	1d3a      	adds	r2, r7, #4
 80117bc:	f107 0314 	add.w	r3, r7, #20
 80117c0:	4611      	mov	r1, r2
 80117c2:	4618      	mov	r0, r3
 80117c4:	f001 fbac 	bl	8012f20 <xTaskCheckForTimeOut>
 80117c8:	4603      	mov	r3, r0
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d124      	bne.n	8011818 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80117ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117d0:	f000 fd05 	bl	80121de <prvIsQueueFull>
 80117d4:	4603      	mov	r3, r0
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d018      	beq.n	801180c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80117da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117dc:	3310      	adds	r3, #16
 80117de:	687a      	ldr	r2, [r7, #4]
 80117e0:	4611      	mov	r1, r2
 80117e2:	4618      	mov	r0, r3
 80117e4:	f001 fad0 	bl	8012d88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80117e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117ea:	f000 fc90 	bl	801210e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80117ee:	f001 f8c5 	bl	801297c <xTaskResumeAll>
 80117f2:	4603      	mov	r3, r0
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	f47f af7c 	bne.w	80116f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80117fa:	4b0c      	ldr	r3, [pc, #48]	; (801182c <xQueueGenericSend+0x200>)
 80117fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011800:	601a      	str	r2, [r3, #0]
 8011802:	f3bf 8f4f 	dsb	sy
 8011806:	f3bf 8f6f 	isb	sy
 801180a:	e772      	b.n	80116f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801180c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801180e:	f000 fc7e 	bl	801210e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011812:	f001 f8b3 	bl	801297c <xTaskResumeAll>
 8011816:	e76c      	b.n	80116f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801181a:	f000 fc78 	bl	801210e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801181e:	f001 f8ad 	bl	801297c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011822:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011824:	4618      	mov	r0, r3
 8011826:	3738      	adds	r7, #56	; 0x38
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}
 801182c:	e000ed04 	.word	0xe000ed04

08011830 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b08e      	sub	sp, #56	; 0x38
 8011834:	af00      	add	r7, sp, #0
 8011836:	60f8      	str	r0, [r7, #12]
 8011838:	60b9      	str	r1, [r7, #8]
 801183a:	607a      	str	r2, [r7, #4]
 801183c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011844:	2b00      	cmp	r3, #0
 8011846:	d10b      	bne.n	8011860 <xQueueGenericSendFromISR+0x30>
 8011848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801184c:	b672      	cpsid	i
 801184e:	f383 8811 	msr	BASEPRI, r3
 8011852:	f3bf 8f6f 	isb	sy
 8011856:	f3bf 8f4f 	dsb	sy
 801185a:	b662      	cpsie	i
 801185c:	627b      	str	r3, [r7, #36]	; 0x24
 801185e:	e7fe      	b.n	801185e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d103      	bne.n	801186e <xQueueGenericSendFromISR+0x3e>
 8011866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801186a:	2b00      	cmp	r3, #0
 801186c:	d101      	bne.n	8011872 <xQueueGenericSendFromISR+0x42>
 801186e:	2301      	movs	r3, #1
 8011870:	e000      	b.n	8011874 <xQueueGenericSendFromISR+0x44>
 8011872:	2300      	movs	r3, #0
 8011874:	2b00      	cmp	r3, #0
 8011876:	d10b      	bne.n	8011890 <xQueueGenericSendFromISR+0x60>
 8011878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801187c:	b672      	cpsid	i
 801187e:	f383 8811 	msr	BASEPRI, r3
 8011882:	f3bf 8f6f 	isb	sy
 8011886:	f3bf 8f4f 	dsb	sy
 801188a:	b662      	cpsie	i
 801188c:	623b      	str	r3, [r7, #32]
 801188e:	e7fe      	b.n	801188e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	2b02      	cmp	r3, #2
 8011894:	d103      	bne.n	801189e <xQueueGenericSendFromISR+0x6e>
 8011896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801189a:	2b01      	cmp	r3, #1
 801189c:	d101      	bne.n	80118a2 <xQueueGenericSendFromISR+0x72>
 801189e:	2301      	movs	r3, #1
 80118a0:	e000      	b.n	80118a4 <xQueueGenericSendFromISR+0x74>
 80118a2:	2300      	movs	r3, #0
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d10b      	bne.n	80118c0 <xQueueGenericSendFromISR+0x90>
 80118a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ac:	b672      	cpsid	i
 80118ae:	f383 8811 	msr	BASEPRI, r3
 80118b2:	f3bf 8f6f 	isb	sy
 80118b6:	f3bf 8f4f 	dsb	sy
 80118ba:	b662      	cpsie	i
 80118bc:	61fb      	str	r3, [r7, #28]
 80118be:	e7fe      	b.n	80118be <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80118c0:	f002 fba2 	bl	8014008 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80118c4:	f3ef 8211 	mrs	r2, BASEPRI
 80118c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118cc:	b672      	cpsid	i
 80118ce:	f383 8811 	msr	BASEPRI, r3
 80118d2:	f3bf 8f6f 	isb	sy
 80118d6:	f3bf 8f4f 	dsb	sy
 80118da:	b662      	cpsie	i
 80118dc:	61ba      	str	r2, [r7, #24]
 80118de:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80118e0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80118e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80118e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80118e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d302      	bcc.n	80118f6 <xQueueGenericSendFromISR+0xc6>
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	2b02      	cmp	r3, #2
 80118f4:	d12c      	bne.n	8011950 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80118f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80118fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011900:	683a      	ldr	r2, [r7, #0]
 8011902:	68b9      	ldr	r1, [r7, #8]
 8011904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011906:	f000 fb72 	bl	8011fee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801190a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801190e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011912:	d112      	bne.n	801193a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011918:	2b00      	cmp	r3, #0
 801191a:	d016      	beq.n	801194a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801191c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801191e:	3324      	adds	r3, #36	; 0x24
 8011920:	4618      	mov	r0, r3
 8011922:	f001 fa83 	bl	8012e2c <xTaskRemoveFromEventList>
 8011926:	4603      	mov	r3, r0
 8011928:	2b00      	cmp	r3, #0
 801192a:	d00e      	beq.n	801194a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d00b      	beq.n	801194a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2201      	movs	r2, #1
 8011936:	601a      	str	r2, [r3, #0]
 8011938:	e007      	b.n	801194a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801193a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801193e:	3301      	adds	r3, #1
 8011940:	b2db      	uxtb	r3, r3
 8011942:	b25a      	sxtb	r2, r3
 8011944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801194a:	2301      	movs	r3, #1
 801194c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801194e:	e001      	b.n	8011954 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011950:	2300      	movs	r3, #0
 8011952:	637b      	str	r3, [r7, #52]	; 0x34
 8011954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011956:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801195e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011960:	4618      	mov	r0, r3
 8011962:	3738      	adds	r7, #56	; 0x38
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}

08011968 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b08e      	sub	sp, #56	; 0x38
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011978:	2b00      	cmp	r3, #0
 801197a:	d10b      	bne.n	8011994 <xQueueGiveFromISR+0x2c>
	__asm volatile
 801197c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011980:	b672      	cpsid	i
 8011982:	f383 8811 	msr	BASEPRI, r3
 8011986:	f3bf 8f6f 	isb	sy
 801198a:	f3bf 8f4f 	dsb	sy
 801198e:	b662      	cpsie	i
 8011990:	623b      	str	r3, [r7, #32]
 8011992:	e7fe      	b.n	8011992 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011998:	2b00      	cmp	r3, #0
 801199a:	d00b      	beq.n	80119b4 <xQueueGiveFromISR+0x4c>
 801199c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119a0:	b672      	cpsid	i
 80119a2:	f383 8811 	msr	BASEPRI, r3
 80119a6:	f3bf 8f6f 	isb	sy
 80119aa:	f3bf 8f4f 	dsb	sy
 80119ae:	b662      	cpsie	i
 80119b0:	61fb      	str	r3, [r7, #28]
 80119b2:	e7fe      	b.n	80119b2 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80119b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d103      	bne.n	80119c4 <xQueueGiveFromISR+0x5c>
 80119bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119be:	689b      	ldr	r3, [r3, #8]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d101      	bne.n	80119c8 <xQueueGiveFromISR+0x60>
 80119c4:	2301      	movs	r3, #1
 80119c6:	e000      	b.n	80119ca <xQueueGiveFromISR+0x62>
 80119c8:	2300      	movs	r3, #0
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d10b      	bne.n	80119e6 <xQueueGiveFromISR+0x7e>
 80119ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119d2:	b672      	cpsid	i
 80119d4:	f383 8811 	msr	BASEPRI, r3
 80119d8:	f3bf 8f6f 	isb	sy
 80119dc:	f3bf 8f4f 	dsb	sy
 80119e0:	b662      	cpsie	i
 80119e2:	61bb      	str	r3, [r7, #24]
 80119e4:	e7fe      	b.n	80119e4 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80119e6:	f002 fb0f 	bl	8014008 <vPortValidateInterruptPriority>
	__asm volatile
 80119ea:	f3ef 8211 	mrs	r2, BASEPRI
 80119ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f2:	b672      	cpsid	i
 80119f4:	f383 8811 	msr	BASEPRI, r3
 80119f8:	f3bf 8f6f 	isb	sy
 80119fc:	f3bf 8f4f 	dsb	sy
 8011a00:	b662      	cpsie	i
 8011a02:	617a      	str	r2, [r7, #20]
 8011a04:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011a06:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011a08:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a0e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d22b      	bcs.n	8011a72 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a26:	1c5a      	adds	r2, r3, #1
 8011a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011a2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a34:	d112      	bne.n	8011a5c <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d016      	beq.n	8011a6c <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a40:	3324      	adds	r3, #36	; 0x24
 8011a42:	4618      	mov	r0, r3
 8011a44:	f001 f9f2 	bl	8012e2c <xTaskRemoveFromEventList>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d00e      	beq.n	8011a6c <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d00b      	beq.n	8011a6c <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	2201      	movs	r2, #1
 8011a58:	601a      	str	r2, [r3, #0]
 8011a5a:	e007      	b.n	8011a6c <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a60:	3301      	adds	r3, #1
 8011a62:	b2db      	uxtb	r3, r3
 8011a64:	b25a      	sxtb	r2, r3
 8011a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8011a70:	e001      	b.n	8011a76 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011a72:	2300      	movs	r3, #0
 8011a74:	637b      	str	r3, [r7, #52]	; 0x34
 8011a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a78:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3738      	adds	r7, #56	; 0x38
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}
	...

08011a8c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b08c      	sub	sp, #48	; 0x30
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	60f8      	str	r0, [r7, #12]
 8011a94:	60b9      	str	r1, [r7, #8]
 8011a96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011a98:	2300      	movs	r3, #0
 8011a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d10b      	bne.n	8011abe <xQueueReceive+0x32>
	__asm volatile
 8011aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aaa:	b672      	cpsid	i
 8011aac:	f383 8811 	msr	BASEPRI, r3
 8011ab0:	f3bf 8f6f 	isb	sy
 8011ab4:	f3bf 8f4f 	dsb	sy
 8011ab8:	b662      	cpsie	i
 8011aba:	623b      	str	r3, [r7, #32]
 8011abc:	e7fe      	b.n	8011abc <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d103      	bne.n	8011acc <xQueueReceive+0x40>
 8011ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d101      	bne.n	8011ad0 <xQueueReceive+0x44>
 8011acc:	2301      	movs	r3, #1
 8011ace:	e000      	b.n	8011ad2 <xQueueReceive+0x46>
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d10b      	bne.n	8011aee <xQueueReceive+0x62>
 8011ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ada:	b672      	cpsid	i
 8011adc:	f383 8811 	msr	BASEPRI, r3
 8011ae0:	f3bf 8f6f 	isb	sy
 8011ae4:	f3bf 8f4f 	dsb	sy
 8011ae8:	b662      	cpsie	i
 8011aea:	61fb      	str	r3, [r7, #28]
 8011aec:	e7fe      	b.n	8011aec <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011aee:	f001 fb6d 	bl	80131cc <xTaskGetSchedulerState>
 8011af2:	4603      	mov	r3, r0
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d102      	bne.n	8011afe <xQueueReceive+0x72>
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d101      	bne.n	8011b02 <xQueueReceive+0x76>
 8011afe:	2301      	movs	r3, #1
 8011b00:	e000      	b.n	8011b04 <xQueueReceive+0x78>
 8011b02:	2300      	movs	r3, #0
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d10b      	bne.n	8011b20 <xQueueReceive+0x94>
 8011b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b0c:	b672      	cpsid	i
 8011b0e:	f383 8811 	msr	BASEPRI, r3
 8011b12:	f3bf 8f6f 	isb	sy
 8011b16:	f3bf 8f4f 	dsb	sy
 8011b1a:	b662      	cpsie	i
 8011b1c:	61bb      	str	r3, [r7, #24]
 8011b1e:	e7fe      	b.n	8011b1e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011b20:	f002 f992 	bl	8013e48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b28:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d01f      	beq.n	8011b70 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011b30:	68b9      	ldr	r1, [r7, #8]
 8011b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b34:	f000 fac5 	bl	80120c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3a:	1e5a      	subs	r2, r3, #1
 8011b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b3e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b42:	691b      	ldr	r3, [r3, #16]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d00f      	beq.n	8011b68 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b4a:	3310      	adds	r3, #16
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f001 f96d 	bl	8012e2c <xTaskRemoveFromEventList>
 8011b52:	4603      	mov	r3, r0
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d007      	beq.n	8011b68 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011b58:	4b3c      	ldr	r3, [pc, #240]	; (8011c4c <xQueueReceive+0x1c0>)
 8011b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b5e:	601a      	str	r2, [r3, #0]
 8011b60:	f3bf 8f4f 	dsb	sy
 8011b64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011b68:	f002 f9a0 	bl	8013eac <vPortExitCritical>
				return pdPASS;
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	e069      	b.n	8011c44 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d103      	bne.n	8011b7e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011b76:	f002 f999 	bl	8013eac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	e062      	b.n	8011c44 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d106      	bne.n	8011b92 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011b84:	f107 0310 	add.w	r3, r7, #16
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f001 f9b3 	bl	8012ef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011b8e:	2301      	movs	r3, #1
 8011b90:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011b92:	f002 f98b 	bl	8013eac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011b96:	f000 fee3 	bl	8012960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011b9a:	f002 f955 	bl	8013e48 <vPortEnterCritical>
 8011b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ba4:	b25b      	sxtb	r3, r3
 8011ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011baa:	d103      	bne.n	8011bb4 <xQueueReceive+0x128>
 8011bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bae:	2200      	movs	r2, #0
 8011bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011bba:	b25b      	sxtb	r3, r3
 8011bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bc0:	d103      	bne.n	8011bca <xQueueReceive+0x13e>
 8011bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011bca:	f002 f96f 	bl	8013eac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011bce:	1d3a      	adds	r2, r7, #4
 8011bd0:	f107 0310 	add.w	r3, r7, #16
 8011bd4:	4611      	mov	r1, r2
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f001 f9a2 	bl	8012f20 <xTaskCheckForTimeOut>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d123      	bne.n	8011c2a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011be4:	f000 fae5 	bl	80121b2 <prvIsQueueEmpty>
 8011be8:	4603      	mov	r3, r0
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d017      	beq.n	8011c1e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bf0:	3324      	adds	r3, #36	; 0x24
 8011bf2:	687a      	ldr	r2, [r7, #4]
 8011bf4:	4611      	mov	r1, r2
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f001 f8c6 	bl	8012d88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011bfe:	f000 fa86 	bl	801210e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011c02:	f000 febb 	bl	801297c <xTaskResumeAll>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d189      	bne.n	8011b20 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8011c0c:	4b0f      	ldr	r3, [pc, #60]	; (8011c4c <xQueueReceive+0x1c0>)
 8011c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c12:	601a      	str	r2, [r3, #0]
 8011c14:	f3bf 8f4f 	dsb	sy
 8011c18:	f3bf 8f6f 	isb	sy
 8011c1c:	e780      	b.n	8011b20 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c20:	f000 fa75 	bl	801210e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011c24:	f000 feaa 	bl	801297c <xTaskResumeAll>
 8011c28:	e77a      	b.n	8011b20 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c2c:	f000 fa6f 	bl	801210e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011c30:	f000 fea4 	bl	801297c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c36:	f000 fabc 	bl	80121b2 <prvIsQueueEmpty>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	f43f af6f 	beq.w	8011b20 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011c42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	3730      	adds	r7, #48	; 0x30
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}
 8011c4c:	e000ed04 	.word	0xe000ed04

08011c50 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b08e      	sub	sp, #56	; 0x38
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011c62:	2300      	movs	r3, #0
 8011c64:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d10b      	bne.n	8011c84 <xQueueSemaphoreTake+0x34>
 8011c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c70:	b672      	cpsid	i
 8011c72:	f383 8811 	msr	BASEPRI, r3
 8011c76:	f3bf 8f6f 	isb	sy
 8011c7a:	f3bf 8f4f 	dsb	sy
 8011c7e:	b662      	cpsie	i
 8011c80:	623b      	str	r3, [r7, #32]
 8011c82:	e7fe      	b.n	8011c82 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d00b      	beq.n	8011ca4 <xQueueSemaphoreTake+0x54>
 8011c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c90:	b672      	cpsid	i
 8011c92:	f383 8811 	msr	BASEPRI, r3
 8011c96:	f3bf 8f6f 	isb	sy
 8011c9a:	f3bf 8f4f 	dsb	sy
 8011c9e:	b662      	cpsie	i
 8011ca0:	61fb      	str	r3, [r7, #28]
 8011ca2:	e7fe      	b.n	8011ca2 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011ca4:	f001 fa92 	bl	80131cc <xTaskGetSchedulerState>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d102      	bne.n	8011cb4 <xQueueSemaphoreTake+0x64>
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d101      	bne.n	8011cb8 <xQueueSemaphoreTake+0x68>
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	e000      	b.n	8011cba <xQueueSemaphoreTake+0x6a>
 8011cb8:	2300      	movs	r3, #0
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d10b      	bne.n	8011cd6 <xQueueSemaphoreTake+0x86>
 8011cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc2:	b672      	cpsid	i
 8011cc4:	f383 8811 	msr	BASEPRI, r3
 8011cc8:	f3bf 8f6f 	isb	sy
 8011ccc:	f3bf 8f4f 	dsb	sy
 8011cd0:	b662      	cpsie	i
 8011cd2:	61bb      	str	r3, [r7, #24]
 8011cd4:	e7fe      	b.n	8011cd4 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011cd6:	f002 f8b7 	bl	8013e48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cde:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d024      	beq.n	8011d30 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce8:	1e5a      	subs	r2, r3, #1
 8011cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cec:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d104      	bne.n	8011d00 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011cf6:	f001 fbe3 	bl	80134c0 <pvTaskIncrementMutexHeldCount>
 8011cfa:	4602      	mov	r2, r0
 8011cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cfe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d02:	691b      	ldr	r3, [r3, #16]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d00f      	beq.n	8011d28 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d0a:	3310      	adds	r3, #16
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f001 f88d 	bl	8012e2c <xTaskRemoveFromEventList>
 8011d12:	4603      	mov	r3, r0
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d007      	beq.n	8011d28 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011d18:	4b54      	ldr	r3, [pc, #336]	; (8011e6c <xQueueSemaphoreTake+0x21c>)
 8011d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d1e:	601a      	str	r2, [r3, #0]
 8011d20:	f3bf 8f4f 	dsb	sy
 8011d24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011d28:	f002 f8c0 	bl	8013eac <vPortExitCritical>
				return pdPASS;
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	e098      	b.n	8011e62 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d112      	bne.n	8011d5c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d00b      	beq.n	8011d54 <xQueueSemaphoreTake+0x104>
 8011d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d40:	b672      	cpsid	i
 8011d42:	f383 8811 	msr	BASEPRI, r3
 8011d46:	f3bf 8f6f 	isb	sy
 8011d4a:	f3bf 8f4f 	dsb	sy
 8011d4e:	b662      	cpsie	i
 8011d50:	617b      	str	r3, [r7, #20]
 8011d52:	e7fe      	b.n	8011d52 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011d54:	f002 f8aa 	bl	8013eac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	e082      	b.n	8011e62 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d106      	bne.n	8011d70 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011d62:	f107 030c 	add.w	r3, r7, #12
 8011d66:	4618      	mov	r0, r3
 8011d68:	f001 f8c4 	bl	8012ef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011d70:	f002 f89c 	bl	8013eac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011d74:	f000 fdf4 	bl	8012960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011d78:	f002 f866 	bl	8013e48 <vPortEnterCritical>
 8011d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011d82:	b25b      	sxtb	r3, r3
 8011d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d88:	d103      	bne.n	8011d92 <xQueueSemaphoreTake+0x142>
 8011d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d98:	b25b      	sxtb	r3, r3
 8011d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d9e:	d103      	bne.n	8011da8 <xQueueSemaphoreTake+0x158>
 8011da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da2:	2200      	movs	r2, #0
 8011da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011da8:	f002 f880 	bl	8013eac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011dac:	463a      	mov	r2, r7
 8011dae:	f107 030c 	add.w	r3, r7, #12
 8011db2:	4611      	mov	r1, r2
 8011db4:	4618      	mov	r0, r3
 8011db6:	f001 f8b3 	bl	8012f20 <xTaskCheckForTimeOut>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d132      	bne.n	8011e26 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011dc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011dc2:	f000 f9f6 	bl	80121b2 <prvIsQueueEmpty>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d026      	beq.n	8011e1a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d109      	bne.n	8011de8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8011dd4:	f002 f838 	bl	8013e48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dda:	689b      	ldr	r3, [r3, #8]
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f001 fa13 	bl	8013208 <xTaskPriorityInherit>
 8011de2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011de4:	f002 f862 	bl	8013eac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dea:	3324      	adds	r3, #36	; 0x24
 8011dec:	683a      	ldr	r2, [r7, #0]
 8011dee:	4611      	mov	r1, r2
 8011df0:	4618      	mov	r0, r3
 8011df2:	f000 ffc9 	bl	8012d88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011df6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011df8:	f000 f989 	bl	801210e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011dfc:	f000 fdbe 	bl	801297c <xTaskResumeAll>
 8011e00:	4603      	mov	r3, r0
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	f47f af67 	bne.w	8011cd6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8011e08:	4b18      	ldr	r3, [pc, #96]	; (8011e6c <xQueueSemaphoreTake+0x21c>)
 8011e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e0e:	601a      	str	r2, [r3, #0]
 8011e10:	f3bf 8f4f 	dsb	sy
 8011e14:	f3bf 8f6f 	isb	sy
 8011e18:	e75d      	b.n	8011cd6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011e1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e1c:	f000 f977 	bl	801210e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011e20:	f000 fdac 	bl	801297c <xTaskResumeAll>
 8011e24:	e757      	b.n	8011cd6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011e26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e28:	f000 f971 	bl	801210e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011e2c:	f000 fda6 	bl	801297c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e32:	f000 f9be 	bl	80121b2 <prvIsQueueEmpty>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	f43f af4c 	beq.w	8011cd6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d00d      	beq.n	8011e60 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8011e44:	f002 f800 	bl	8013e48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011e48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e4a:	f000 f8b8 	bl	8011fbe <prvGetDisinheritPriorityAfterTimeout>
 8011e4e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e52:	689b      	ldr	r3, [r3, #8]
 8011e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e56:	4618      	mov	r0, r3
 8011e58:	f001 faae 	bl	80133b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011e5c:	f002 f826 	bl	8013eac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011e60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3738      	adds	r7, #56	; 0x38
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	e000ed04 	.word	0xe000ed04

08011e70 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b08e      	sub	sp, #56	; 0x38
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	60f8      	str	r0, [r7, #12]
 8011e78:	60b9      	str	r1, [r7, #8]
 8011e7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d10b      	bne.n	8011e9e <xQueueReceiveFromISR+0x2e>
 8011e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e8a:	b672      	cpsid	i
 8011e8c:	f383 8811 	msr	BASEPRI, r3
 8011e90:	f3bf 8f6f 	isb	sy
 8011e94:	f3bf 8f4f 	dsb	sy
 8011e98:	b662      	cpsie	i
 8011e9a:	623b      	str	r3, [r7, #32]
 8011e9c:	e7fe      	b.n	8011e9c <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e9e:	68bb      	ldr	r3, [r7, #8]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d103      	bne.n	8011eac <xQueueReceiveFromISR+0x3c>
 8011ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d101      	bne.n	8011eb0 <xQueueReceiveFromISR+0x40>
 8011eac:	2301      	movs	r3, #1
 8011eae:	e000      	b.n	8011eb2 <xQueueReceiveFromISR+0x42>
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d10b      	bne.n	8011ece <xQueueReceiveFromISR+0x5e>
 8011eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eba:	b672      	cpsid	i
 8011ebc:	f383 8811 	msr	BASEPRI, r3
 8011ec0:	f3bf 8f6f 	isb	sy
 8011ec4:	f3bf 8f4f 	dsb	sy
 8011ec8:	b662      	cpsie	i
 8011eca:	61fb      	str	r3, [r7, #28]
 8011ecc:	e7fe      	b.n	8011ecc <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011ece:	f002 f89b 	bl	8014008 <vPortValidateInterruptPriority>
	__asm volatile
 8011ed2:	f3ef 8211 	mrs	r2, BASEPRI
 8011ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eda:	b672      	cpsid	i
 8011edc:	f383 8811 	msr	BASEPRI, r3
 8011ee0:	f3bf 8f6f 	isb	sy
 8011ee4:	f3bf 8f4f 	dsb	sy
 8011ee8:	b662      	cpsie	i
 8011eea:	61ba      	str	r2, [r7, #24]
 8011eec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011eee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ef6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d02f      	beq.n	8011f5e <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011f08:	68b9      	ldr	r1, [r7, #8]
 8011f0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f0c:	f000 f8d9 	bl	80120c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f12:	1e5a      	subs	r2, r3, #1
 8011f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011f18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f20:	d112      	bne.n	8011f48 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f24:	691b      	ldr	r3, [r3, #16]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d016      	beq.n	8011f58 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f2c:	3310      	adds	r3, #16
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f000 ff7c 	bl	8012e2c <xTaskRemoveFromEventList>
 8011f34:	4603      	mov	r3, r0
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d00e      	beq.n	8011f58 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d00b      	beq.n	8011f58 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2201      	movs	r2, #1
 8011f44:	601a      	str	r2, [r3, #0]
 8011f46:	e007      	b.n	8011f58 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f4c:	3301      	adds	r3, #1
 8011f4e:	b2db      	uxtb	r3, r3
 8011f50:	b25a      	sxtb	r2, r3
 8011f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011f58:	2301      	movs	r3, #1
 8011f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8011f5c:	e001      	b.n	8011f62 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	637b      	str	r3, [r7, #52]	; 0x34
 8011f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3738      	adds	r7, #56	; 0x38
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}

08011f76 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011f76:	b580      	push	{r7, lr}
 8011f78:	b084      	sub	sp, #16
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d10b      	bne.n	8011fa0 <vQueueDelete+0x2a>
	__asm volatile
 8011f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f8c:	b672      	cpsid	i
 8011f8e:	f383 8811 	msr	BASEPRI, r3
 8011f92:	f3bf 8f6f 	isb	sy
 8011f96:	f3bf 8f4f 	dsb	sy
 8011f9a:	b662      	cpsie	i
 8011f9c:	60bb      	str	r3, [r7, #8]
 8011f9e:	e7fe      	b.n	8011f9e <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011fa0:	68f8      	ldr	r0, [r7, #12]
 8011fa2:	f000 f95d 	bl	8012260 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d102      	bne.n	8011fb6 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8011fb0:	68f8      	ldr	r0, [r7, #12]
 8011fb2:	f002 f937 	bl	8014224 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011fb6:	bf00      	nop
 8011fb8:	3710      	adds	r7, #16
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}

08011fbe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011fbe:	b480      	push	{r7}
 8011fc0:	b085      	sub	sp, #20
 8011fc2:	af00      	add	r7, sp, #0
 8011fc4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d006      	beq.n	8011fdc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011fd8:	60fb      	str	r3, [r7, #12]
 8011fda:	e001      	b.n	8011fe0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
	}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	3714      	adds	r7, #20
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fec:	4770      	bx	lr

08011fee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011fee:	b580      	push	{r7, lr}
 8011ff0:	b086      	sub	sp, #24
 8011ff2:	af00      	add	r7, sp, #0
 8011ff4:	60f8      	str	r0, [r7, #12]
 8011ff6:	60b9      	str	r1, [r7, #8]
 8011ff8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012002:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012008:	2b00      	cmp	r3, #0
 801200a:	d10d      	bne.n	8012028 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d14d      	bne.n	80120b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	689b      	ldr	r3, [r3, #8]
 8012018:	4618      	mov	r0, r3
 801201a:	f001 f95d 	bl	80132d8 <xTaskPriorityDisinherit>
 801201e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	2200      	movs	r2, #0
 8012024:	609a      	str	r2, [r3, #8]
 8012026:	e043      	b.n	80120b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d119      	bne.n	8012062 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	6858      	ldr	r0, [r3, #4]
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012036:	461a      	mov	r2, r3
 8012038:	68b9      	ldr	r1, [r7, #8]
 801203a:	f00f fa20 	bl	802147e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	685a      	ldr	r2, [r3, #4]
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012046:	441a      	add	r2, r3
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	685a      	ldr	r2, [r3, #4]
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	689b      	ldr	r3, [r3, #8]
 8012054:	429a      	cmp	r2, r3
 8012056:	d32b      	bcc.n	80120b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	681a      	ldr	r2, [r3, #0]
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	605a      	str	r2, [r3, #4]
 8012060:	e026      	b.n	80120b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	68d8      	ldr	r0, [r3, #12]
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801206a:	461a      	mov	r2, r3
 801206c:	68b9      	ldr	r1, [r7, #8]
 801206e:	f00f fa06 	bl	802147e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	68da      	ldr	r2, [r3, #12]
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801207a:	425b      	negs	r3, r3
 801207c:	441a      	add	r2, r3
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	68da      	ldr	r2, [r3, #12]
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	429a      	cmp	r2, r3
 801208c:	d207      	bcs.n	801209e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	689a      	ldr	r2, [r3, #8]
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012096:	425b      	negs	r3, r3
 8012098:	441a      	add	r2, r3
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2b02      	cmp	r3, #2
 80120a2:	d105      	bne.n	80120b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d002      	beq.n	80120b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	3b01      	subs	r3, #1
 80120ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80120b0:	693b      	ldr	r3, [r7, #16]
 80120b2:	1c5a      	adds	r2, r3, #1
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80120b8:	697b      	ldr	r3, [r7, #20]
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3718      	adds	r7, #24
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}

080120c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80120c2:	b580      	push	{r7, lr}
 80120c4:	b082      	sub	sp, #8
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
 80120ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d018      	beq.n	8012106 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	68da      	ldr	r2, [r3, #12]
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120dc:	441a      	add	r2, r3
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	68da      	ldr	r2, [r3, #12]
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	689b      	ldr	r3, [r3, #8]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d303      	bcc.n	80120f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681a      	ldr	r2, [r3, #0]
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	68d9      	ldr	r1, [r3, #12]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120fe:	461a      	mov	r2, r3
 8012100:	6838      	ldr	r0, [r7, #0]
 8012102:	f00f f9bc 	bl	802147e <memcpy>
	}
}
 8012106:	bf00      	nop
 8012108:	3708      	adds	r7, #8
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}

0801210e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801210e:	b580      	push	{r7, lr}
 8012110:	b084      	sub	sp, #16
 8012112:	af00      	add	r7, sp, #0
 8012114:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012116:	f001 fe97 	bl	8013e48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012120:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012122:	e011      	b.n	8012148 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012128:	2b00      	cmp	r3, #0
 801212a:	d012      	beq.n	8012152 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	3324      	adds	r3, #36	; 0x24
 8012130:	4618      	mov	r0, r3
 8012132:	f000 fe7b 	bl	8012e2c <xTaskRemoveFromEventList>
 8012136:	4603      	mov	r3, r0
 8012138:	2b00      	cmp	r3, #0
 801213a:	d001      	beq.n	8012140 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801213c:	f000 ff54 	bl	8012fe8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012140:	7bfb      	ldrb	r3, [r7, #15]
 8012142:	3b01      	subs	r3, #1
 8012144:	b2db      	uxtb	r3, r3
 8012146:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801214c:	2b00      	cmp	r3, #0
 801214e:	dce9      	bgt.n	8012124 <prvUnlockQueue+0x16>
 8012150:	e000      	b.n	8012154 <prvUnlockQueue+0x46>
					break;
 8012152:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	22ff      	movs	r2, #255	; 0xff
 8012158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801215c:	f001 fea6 	bl	8013eac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012160:	f001 fe72 	bl	8013e48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801216a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801216c:	e011      	b.n	8012192 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	691b      	ldr	r3, [r3, #16]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d012      	beq.n	801219c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	3310      	adds	r3, #16
 801217a:	4618      	mov	r0, r3
 801217c:	f000 fe56 	bl	8012e2c <xTaskRemoveFromEventList>
 8012180:	4603      	mov	r3, r0
 8012182:	2b00      	cmp	r3, #0
 8012184:	d001      	beq.n	801218a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012186:	f000 ff2f 	bl	8012fe8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801218a:	7bbb      	ldrb	r3, [r7, #14]
 801218c:	3b01      	subs	r3, #1
 801218e:	b2db      	uxtb	r3, r3
 8012190:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012192:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012196:	2b00      	cmp	r3, #0
 8012198:	dce9      	bgt.n	801216e <prvUnlockQueue+0x60>
 801219a:	e000      	b.n	801219e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801219c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	22ff      	movs	r2, #255	; 0xff
 80121a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80121a6:	f001 fe81 	bl	8013eac <vPortExitCritical>
}
 80121aa:	bf00      	nop
 80121ac:	3710      	adds	r7, #16
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}

080121b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80121b2:	b580      	push	{r7, lr}
 80121b4:	b084      	sub	sp, #16
 80121b6:	af00      	add	r7, sp, #0
 80121b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80121ba:	f001 fe45 	bl	8013e48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d102      	bne.n	80121cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80121c6:	2301      	movs	r3, #1
 80121c8:	60fb      	str	r3, [r7, #12]
 80121ca:	e001      	b.n	80121d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80121cc:	2300      	movs	r3, #0
 80121ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80121d0:	f001 fe6c 	bl	8013eac <vPortExitCritical>

	return xReturn;
 80121d4:	68fb      	ldr	r3, [r7, #12]
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3710      	adds	r7, #16
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}

080121de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80121de:	b580      	push	{r7, lr}
 80121e0:	b084      	sub	sp, #16
 80121e2:	af00      	add	r7, sp, #0
 80121e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80121e6:	f001 fe2f 	bl	8013e48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d102      	bne.n	80121fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80121f6:	2301      	movs	r3, #1
 80121f8:	60fb      	str	r3, [r7, #12]
 80121fa:	e001      	b.n	8012200 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80121fc:	2300      	movs	r3, #0
 80121fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012200:	f001 fe54 	bl	8013eac <vPortExitCritical>

	return xReturn;
 8012204:	68fb      	ldr	r3, [r7, #12]
}
 8012206:	4618      	mov	r0, r3
 8012208:	3710      	adds	r7, #16
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}
	...

08012210 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012210:	b480      	push	{r7}
 8012212:	b085      	sub	sp, #20
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801221a:	2300      	movs	r3, #0
 801221c:	60fb      	str	r3, [r7, #12]
 801221e:	e014      	b.n	801224a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012220:	4a0e      	ldr	r2, [pc, #56]	; (801225c <vQueueAddToRegistry+0x4c>)
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d10b      	bne.n	8012244 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801222c:	490b      	ldr	r1, [pc, #44]	; (801225c <vQueueAddToRegistry+0x4c>)
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	683a      	ldr	r2, [r7, #0]
 8012232:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012236:	4a09      	ldr	r2, [pc, #36]	; (801225c <vQueueAddToRegistry+0x4c>)
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	00db      	lsls	r3, r3, #3
 801223c:	4413      	add	r3, r2
 801223e:	687a      	ldr	r2, [r7, #4]
 8012240:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012242:	e005      	b.n	8012250 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	3301      	adds	r3, #1
 8012248:	60fb      	str	r3, [r7, #12]
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	2b07      	cmp	r3, #7
 801224e:	d9e7      	bls.n	8012220 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012250:	bf00      	nop
 8012252:	3714      	adds	r7, #20
 8012254:	46bd      	mov	sp, r7
 8012256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225a:	4770      	bx	lr
 801225c:	2000cbe0 	.word	0x2000cbe0

08012260 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012260:	b480      	push	{r7}
 8012262:	b085      	sub	sp, #20
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012268:	2300      	movs	r3, #0
 801226a:	60fb      	str	r3, [r7, #12]
 801226c:	e016      	b.n	801229c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801226e:	4a10      	ldr	r2, [pc, #64]	; (80122b0 <vQueueUnregisterQueue+0x50>)
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	00db      	lsls	r3, r3, #3
 8012274:	4413      	add	r3, r2
 8012276:	685b      	ldr	r3, [r3, #4]
 8012278:	687a      	ldr	r2, [r7, #4]
 801227a:	429a      	cmp	r2, r3
 801227c:	d10b      	bne.n	8012296 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801227e:	4a0c      	ldr	r2, [pc, #48]	; (80122b0 <vQueueUnregisterQueue+0x50>)
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	2100      	movs	r1, #0
 8012284:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012288:	4a09      	ldr	r2, [pc, #36]	; (80122b0 <vQueueUnregisterQueue+0x50>)
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	00db      	lsls	r3, r3, #3
 801228e:	4413      	add	r3, r2
 8012290:	2200      	movs	r2, #0
 8012292:	605a      	str	r2, [r3, #4]
				break;
 8012294:	e005      	b.n	80122a2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	3301      	adds	r3, #1
 801229a:	60fb      	str	r3, [r7, #12]
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	2b07      	cmp	r3, #7
 80122a0:	d9e5      	bls.n	801226e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80122a2:	bf00      	nop
 80122a4:	3714      	adds	r7, #20
 80122a6:	46bd      	mov	sp, r7
 80122a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ac:	4770      	bx	lr
 80122ae:	bf00      	nop
 80122b0:	2000cbe0 	.word	0x2000cbe0

080122b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b086      	sub	sp, #24
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80122c4:	f001 fdc0 	bl	8013e48 <vPortEnterCritical>
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80122ce:	b25b      	sxtb	r3, r3
 80122d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80122d4:	d103      	bne.n	80122de <vQueueWaitForMessageRestricted+0x2a>
 80122d6:	697b      	ldr	r3, [r7, #20]
 80122d8:	2200      	movs	r2, #0
 80122da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80122e4:	b25b      	sxtb	r3, r3
 80122e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80122ea:	d103      	bne.n	80122f4 <vQueueWaitForMessageRestricted+0x40>
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	2200      	movs	r2, #0
 80122f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80122f4:	f001 fdda 	bl	8013eac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80122f8:	697b      	ldr	r3, [r7, #20]
 80122fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d106      	bne.n	801230e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	3324      	adds	r3, #36	; 0x24
 8012304:	687a      	ldr	r2, [r7, #4]
 8012306:	68b9      	ldr	r1, [r7, #8]
 8012308:	4618      	mov	r0, r3
 801230a:	f000 fd63 	bl	8012dd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801230e:	6978      	ldr	r0, [r7, #20]
 8012310:	f7ff fefd 	bl	801210e <prvUnlockQueue>
	}
 8012314:	bf00      	nop
 8012316:	3718      	adds	r7, #24
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}

0801231c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801231c:	b580      	push	{r7, lr}
 801231e:	b08e      	sub	sp, #56	; 0x38
 8012320:	af04      	add	r7, sp, #16
 8012322:	60f8      	str	r0, [r7, #12]
 8012324:	60b9      	str	r1, [r7, #8]
 8012326:	607a      	str	r2, [r7, #4]
 8012328:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801232a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801232c:	2b00      	cmp	r3, #0
 801232e:	d10b      	bne.n	8012348 <xTaskCreateStatic+0x2c>
 8012330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012334:	b672      	cpsid	i
 8012336:	f383 8811 	msr	BASEPRI, r3
 801233a:	f3bf 8f6f 	isb	sy
 801233e:	f3bf 8f4f 	dsb	sy
 8012342:	b662      	cpsie	i
 8012344:	623b      	str	r3, [r7, #32]
 8012346:	e7fe      	b.n	8012346 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8012348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801234a:	2b00      	cmp	r3, #0
 801234c:	d10b      	bne.n	8012366 <xTaskCreateStatic+0x4a>
 801234e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012352:	b672      	cpsid	i
 8012354:	f383 8811 	msr	BASEPRI, r3
 8012358:	f3bf 8f6f 	isb	sy
 801235c:	f3bf 8f4f 	dsb	sy
 8012360:	b662      	cpsie	i
 8012362:	61fb      	str	r3, [r7, #28]
 8012364:	e7fe      	b.n	8012364 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012366:	2360      	movs	r3, #96	; 0x60
 8012368:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801236a:	693b      	ldr	r3, [r7, #16]
 801236c:	2b60      	cmp	r3, #96	; 0x60
 801236e:	d00b      	beq.n	8012388 <xTaskCreateStatic+0x6c>
 8012370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012374:	b672      	cpsid	i
 8012376:	f383 8811 	msr	BASEPRI, r3
 801237a:	f3bf 8f6f 	isb	sy
 801237e:	f3bf 8f4f 	dsb	sy
 8012382:	b662      	cpsie	i
 8012384:	61bb      	str	r3, [r7, #24]
 8012386:	e7fe      	b.n	8012386 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012388:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801238a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801238c:	2b00      	cmp	r3, #0
 801238e:	d01e      	beq.n	80123ce <xTaskCreateStatic+0xb2>
 8012390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012392:	2b00      	cmp	r3, #0
 8012394:	d01b      	beq.n	80123ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012398:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801239c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801239e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80123a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a2:	2202      	movs	r2, #2
 80123a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80123a8:	2300      	movs	r3, #0
 80123aa:	9303      	str	r3, [sp, #12]
 80123ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ae:	9302      	str	r3, [sp, #8]
 80123b0:	f107 0314 	add.w	r3, r7, #20
 80123b4:	9301      	str	r3, [sp, #4]
 80123b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b8:	9300      	str	r3, [sp, #0]
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	687a      	ldr	r2, [r7, #4]
 80123be:	68b9      	ldr	r1, [r7, #8]
 80123c0:	68f8      	ldr	r0, [r7, #12]
 80123c2:	f000 f850 	bl	8012466 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80123c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123c8:	f000 f8e0 	bl	801258c <prvAddNewTaskToReadyList>
 80123cc:	e001      	b.n	80123d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80123ce:	2300      	movs	r3, #0
 80123d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80123d2:	697b      	ldr	r3, [r7, #20]
	}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3728      	adds	r7, #40	; 0x28
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}

080123dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b08c      	sub	sp, #48	; 0x30
 80123e0:	af04      	add	r7, sp, #16
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	603b      	str	r3, [r7, #0]
 80123e8:	4613      	mov	r3, r2
 80123ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80123ec:	88fb      	ldrh	r3, [r7, #6]
 80123ee:	009b      	lsls	r3, r3, #2
 80123f0:	4618      	mov	r0, r3
 80123f2:	f001 fe4b 	bl	801408c <pvPortMalloc>
 80123f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80123f8:	697b      	ldr	r3, [r7, #20]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d00e      	beq.n	801241c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80123fe:	2060      	movs	r0, #96	; 0x60
 8012400:	f001 fe44 	bl	801408c <pvPortMalloc>
 8012404:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012406:	69fb      	ldr	r3, [r7, #28]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d003      	beq.n	8012414 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801240c:	69fb      	ldr	r3, [r7, #28]
 801240e:	697a      	ldr	r2, [r7, #20]
 8012410:	631a      	str	r2, [r3, #48]	; 0x30
 8012412:	e005      	b.n	8012420 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012414:	6978      	ldr	r0, [r7, #20]
 8012416:	f001 ff05 	bl	8014224 <vPortFree>
 801241a:	e001      	b.n	8012420 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801241c:	2300      	movs	r3, #0
 801241e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012420:	69fb      	ldr	r3, [r7, #28]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d017      	beq.n	8012456 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012426:	69fb      	ldr	r3, [r7, #28]
 8012428:	2200      	movs	r2, #0
 801242a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801242e:	88fa      	ldrh	r2, [r7, #6]
 8012430:	2300      	movs	r3, #0
 8012432:	9303      	str	r3, [sp, #12]
 8012434:	69fb      	ldr	r3, [r7, #28]
 8012436:	9302      	str	r3, [sp, #8]
 8012438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801243a:	9301      	str	r3, [sp, #4]
 801243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801243e:	9300      	str	r3, [sp, #0]
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	68b9      	ldr	r1, [r7, #8]
 8012444:	68f8      	ldr	r0, [r7, #12]
 8012446:	f000 f80e 	bl	8012466 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801244a:	69f8      	ldr	r0, [r7, #28]
 801244c:	f000 f89e 	bl	801258c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012450:	2301      	movs	r3, #1
 8012452:	61bb      	str	r3, [r7, #24]
 8012454:	e002      	b.n	801245c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801245a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801245c:	69bb      	ldr	r3, [r7, #24]
	}
 801245e:	4618      	mov	r0, r3
 8012460:	3720      	adds	r7, #32
 8012462:	46bd      	mov	sp, r7
 8012464:	bd80      	pop	{r7, pc}

08012466 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012466:	b580      	push	{r7, lr}
 8012468:	b088      	sub	sp, #32
 801246a:	af00      	add	r7, sp, #0
 801246c:	60f8      	str	r0, [r7, #12]
 801246e:	60b9      	str	r1, [r7, #8]
 8012470:	607a      	str	r2, [r7, #4]
 8012472:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012476:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	009b      	lsls	r3, r3, #2
 801247c:	461a      	mov	r2, r3
 801247e:	21a5      	movs	r1, #165	; 0xa5
 8012480:	f00f f808 	bl	8021494 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012488:	6879      	ldr	r1, [r7, #4]
 801248a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801248e:	440b      	add	r3, r1
 8012490:	009b      	lsls	r3, r3, #2
 8012492:	4413      	add	r3, r2
 8012494:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012496:	69bb      	ldr	r3, [r7, #24]
 8012498:	f023 0307 	bic.w	r3, r3, #7
 801249c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801249e:	69bb      	ldr	r3, [r7, #24]
 80124a0:	f003 0307 	and.w	r3, r3, #7
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d00b      	beq.n	80124c0 <prvInitialiseNewTask+0x5a>
 80124a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ac:	b672      	cpsid	i
 80124ae:	f383 8811 	msr	BASEPRI, r3
 80124b2:	f3bf 8f6f 	isb	sy
 80124b6:	f3bf 8f4f 	dsb	sy
 80124ba:	b662      	cpsie	i
 80124bc:	617b      	str	r3, [r7, #20]
 80124be:	e7fe      	b.n	80124be <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d01f      	beq.n	8012506 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80124c6:	2300      	movs	r3, #0
 80124c8:	61fb      	str	r3, [r7, #28]
 80124ca:	e012      	b.n	80124f2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80124cc:	68ba      	ldr	r2, [r7, #8]
 80124ce:	69fb      	ldr	r3, [r7, #28]
 80124d0:	4413      	add	r3, r2
 80124d2:	7819      	ldrb	r1, [r3, #0]
 80124d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124d6:	69fb      	ldr	r3, [r7, #28]
 80124d8:	4413      	add	r3, r2
 80124da:	3334      	adds	r3, #52	; 0x34
 80124dc:	460a      	mov	r2, r1
 80124de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80124e0:	68ba      	ldr	r2, [r7, #8]
 80124e2:	69fb      	ldr	r3, [r7, #28]
 80124e4:	4413      	add	r3, r2
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d006      	beq.n	80124fa <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80124ec:	69fb      	ldr	r3, [r7, #28]
 80124ee:	3301      	adds	r3, #1
 80124f0:	61fb      	str	r3, [r7, #28]
 80124f2:	69fb      	ldr	r3, [r7, #28]
 80124f4:	2b0f      	cmp	r3, #15
 80124f6:	d9e9      	bls.n	80124cc <prvInitialiseNewTask+0x66>
 80124f8:	e000      	b.n	80124fc <prvInitialiseNewTask+0x96>
			{
				break;
 80124fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80124fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124fe:	2200      	movs	r2, #0
 8012500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012504:	e003      	b.n	801250e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012508:	2200      	movs	r2, #0
 801250a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012510:	2b37      	cmp	r3, #55	; 0x37
 8012512:	d901      	bls.n	8012518 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012514:	2337      	movs	r3, #55	; 0x37
 8012516:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801251a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801251c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012522:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012526:	2200      	movs	r2, #0
 8012528:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801252c:	3304      	adds	r3, #4
 801252e:	4618      	mov	r0, r3
 8012530:	f7fe fd76 	bl	8011020 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012536:	3318      	adds	r3, #24
 8012538:	4618      	mov	r0, r3
 801253a:	f7fe fd71 	bl	8011020 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012542:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012546:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801254c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012552:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8012554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012556:	2200      	movs	r2, #0
 8012558:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801255c:	2200      	movs	r2, #0
 801255e:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012562:	2200      	movs	r2, #0
 8012564:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012568:	683a      	ldr	r2, [r7, #0]
 801256a:	68f9      	ldr	r1, [r7, #12]
 801256c:	69b8      	ldr	r0, [r7, #24]
 801256e:	f001 fb63 	bl	8013c38 <pxPortInitialiseStack>
 8012572:	4602      	mov	r2, r0
 8012574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012576:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801257a:	2b00      	cmp	r3, #0
 801257c:	d002      	beq.n	8012584 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012582:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012584:	bf00      	nop
 8012586:	3720      	adds	r7, #32
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}

0801258c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b082      	sub	sp, #8
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012594:	f001 fc58 	bl	8013e48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012598:	4b2d      	ldr	r3, [pc, #180]	; (8012650 <prvAddNewTaskToReadyList+0xc4>)
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	3301      	adds	r3, #1
 801259e:	4a2c      	ldr	r2, [pc, #176]	; (8012650 <prvAddNewTaskToReadyList+0xc4>)
 80125a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80125a2:	4b2c      	ldr	r3, [pc, #176]	; (8012654 <prvAddNewTaskToReadyList+0xc8>)
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d109      	bne.n	80125be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80125aa:	4a2a      	ldr	r2, [pc, #168]	; (8012654 <prvAddNewTaskToReadyList+0xc8>)
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80125b0:	4b27      	ldr	r3, [pc, #156]	; (8012650 <prvAddNewTaskToReadyList+0xc4>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	2b01      	cmp	r3, #1
 80125b6:	d110      	bne.n	80125da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80125b8:	f000 fd3c 	bl	8013034 <prvInitialiseTaskLists>
 80125bc:	e00d      	b.n	80125da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80125be:	4b26      	ldr	r3, [pc, #152]	; (8012658 <prvAddNewTaskToReadyList+0xcc>)
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d109      	bne.n	80125da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80125c6:	4b23      	ldr	r3, [pc, #140]	; (8012654 <prvAddNewTaskToReadyList+0xc8>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d802      	bhi.n	80125da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80125d4:	4a1f      	ldr	r2, [pc, #124]	; (8012654 <prvAddNewTaskToReadyList+0xc8>)
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80125da:	4b20      	ldr	r3, [pc, #128]	; (801265c <prvAddNewTaskToReadyList+0xd0>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	3301      	adds	r3, #1
 80125e0:	4a1e      	ldr	r2, [pc, #120]	; (801265c <prvAddNewTaskToReadyList+0xd0>)
 80125e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80125e4:	4b1d      	ldr	r3, [pc, #116]	; (801265c <prvAddNewTaskToReadyList+0xd0>)
 80125e6:	681a      	ldr	r2, [r3, #0]
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125f0:	4b1b      	ldr	r3, [pc, #108]	; (8012660 <prvAddNewTaskToReadyList+0xd4>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	429a      	cmp	r2, r3
 80125f6:	d903      	bls.n	8012600 <prvAddNewTaskToReadyList+0x74>
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125fc:	4a18      	ldr	r2, [pc, #96]	; (8012660 <prvAddNewTaskToReadyList+0xd4>)
 80125fe:	6013      	str	r3, [r2, #0]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012604:	4613      	mov	r3, r2
 8012606:	009b      	lsls	r3, r3, #2
 8012608:	4413      	add	r3, r2
 801260a:	009b      	lsls	r3, r3, #2
 801260c:	4a15      	ldr	r2, [pc, #84]	; (8012664 <prvAddNewTaskToReadyList+0xd8>)
 801260e:	441a      	add	r2, r3
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	3304      	adds	r3, #4
 8012614:	4619      	mov	r1, r3
 8012616:	4610      	mov	r0, r2
 8012618:	f7fe fd0f 	bl	801103a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801261c:	f001 fc46 	bl	8013eac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012620:	4b0d      	ldr	r3, [pc, #52]	; (8012658 <prvAddNewTaskToReadyList+0xcc>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d00e      	beq.n	8012646 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012628:	4b0a      	ldr	r3, [pc, #40]	; (8012654 <prvAddNewTaskToReadyList+0xc8>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012632:	429a      	cmp	r2, r3
 8012634:	d207      	bcs.n	8012646 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012636:	4b0c      	ldr	r3, [pc, #48]	; (8012668 <prvAddNewTaskToReadyList+0xdc>)
 8012638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801263c:	601a      	str	r2, [r3, #0]
 801263e:	f3bf 8f4f 	dsb	sy
 8012642:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012646:	bf00      	nop
 8012648:	3708      	adds	r7, #8
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}
 801264e:	bf00      	nop
 8012650:	20000df4 	.word	0x20000df4
 8012654:	20000920 	.word	0x20000920
 8012658:	20000e00 	.word	0x20000e00
 801265c:	20000e10 	.word	0x20000e10
 8012660:	20000dfc 	.word	0x20000dfc
 8012664:	20000924 	.word	0x20000924
 8012668:	e000ed04 	.word	0xe000ed04

0801266c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801266c:	b580      	push	{r7, lr}
 801266e:	b084      	sub	sp, #16
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012674:	f001 fbe8 	bl	8013e48 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d102      	bne.n	8012684 <vTaskDelete+0x18>
 801267e:	4b2d      	ldr	r3, [pc, #180]	; (8012734 <vTaskDelete+0xc8>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	e000      	b.n	8012686 <vTaskDelete+0x1a>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	3304      	adds	r3, #4
 801268c:	4618      	mov	r0, r3
 801268e:	f7fe fd31 	bl	80110f4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012696:	2b00      	cmp	r3, #0
 8012698:	d004      	beq.n	80126a4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	3318      	adds	r3, #24
 801269e:	4618      	mov	r0, r3
 80126a0:	f7fe fd28 	bl	80110f4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80126a4:	4b24      	ldr	r3, [pc, #144]	; (8012738 <vTaskDelete+0xcc>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	3301      	adds	r3, #1
 80126aa:	4a23      	ldr	r2, [pc, #140]	; (8012738 <vTaskDelete+0xcc>)
 80126ac:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80126ae:	4b21      	ldr	r3, [pc, #132]	; (8012734 <vTaskDelete+0xc8>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	68fa      	ldr	r2, [r7, #12]
 80126b4:	429a      	cmp	r2, r3
 80126b6:	d10b      	bne.n	80126d0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	3304      	adds	r3, #4
 80126bc:	4619      	mov	r1, r3
 80126be:	481f      	ldr	r0, [pc, #124]	; (801273c <vTaskDelete+0xd0>)
 80126c0:	f7fe fcbb 	bl	801103a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80126c4:	4b1e      	ldr	r3, [pc, #120]	; (8012740 <vTaskDelete+0xd4>)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	3301      	adds	r3, #1
 80126ca:	4a1d      	ldr	r2, [pc, #116]	; (8012740 <vTaskDelete+0xd4>)
 80126cc:	6013      	str	r3, [r2, #0]
 80126ce:	e009      	b.n	80126e4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80126d0:	4b1c      	ldr	r3, [pc, #112]	; (8012744 <vTaskDelete+0xd8>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	3b01      	subs	r3, #1
 80126d6:	4a1b      	ldr	r2, [pc, #108]	; (8012744 <vTaskDelete+0xd8>)
 80126d8:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80126da:	68f8      	ldr	r0, [r7, #12]
 80126dc:	f000 fd16 	bl	801310c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80126e0:	f000 fd44 	bl	801316c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80126e4:	f001 fbe2 	bl	8013eac <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80126e8:	4b17      	ldr	r3, [pc, #92]	; (8012748 <vTaskDelete+0xdc>)
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d01c      	beq.n	801272a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80126f0:	4b10      	ldr	r3, [pc, #64]	; (8012734 <vTaskDelete+0xc8>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	68fa      	ldr	r2, [r7, #12]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d117      	bne.n	801272a <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80126fa:	4b14      	ldr	r3, [pc, #80]	; (801274c <vTaskDelete+0xe0>)
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d00b      	beq.n	801271a <vTaskDelete+0xae>
 8012702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012706:	b672      	cpsid	i
 8012708:	f383 8811 	msr	BASEPRI, r3
 801270c:	f3bf 8f6f 	isb	sy
 8012710:	f3bf 8f4f 	dsb	sy
 8012714:	b662      	cpsie	i
 8012716:	60bb      	str	r3, [r7, #8]
 8012718:	e7fe      	b.n	8012718 <vTaskDelete+0xac>
				portYIELD_WITHIN_API();
 801271a:	4b0d      	ldr	r3, [pc, #52]	; (8012750 <vTaskDelete+0xe4>)
 801271c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012720:	601a      	str	r2, [r3, #0]
 8012722:	f3bf 8f4f 	dsb	sy
 8012726:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801272a:	bf00      	nop
 801272c:	3710      	adds	r7, #16
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}
 8012732:	bf00      	nop
 8012734:	20000920 	.word	0x20000920
 8012738:	20000e10 	.word	0x20000e10
 801273c:	20000dc8 	.word	0x20000dc8
 8012740:	20000ddc 	.word	0x20000ddc
 8012744:	20000df4 	.word	0x20000df4
 8012748:	20000e00 	.word	0x20000e00
 801274c:	20000e1c 	.word	0x20000e1c
 8012750:	e000ed04 	.word	0xe000ed04

08012754 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012754:	b580      	push	{r7, lr}
 8012756:	b084      	sub	sp, #16
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801275c:	2300      	movs	r3, #0
 801275e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d018      	beq.n	8012798 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012766:	4b14      	ldr	r3, [pc, #80]	; (80127b8 <vTaskDelay+0x64>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d00b      	beq.n	8012786 <vTaskDelay+0x32>
 801276e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012772:	b672      	cpsid	i
 8012774:	f383 8811 	msr	BASEPRI, r3
 8012778:	f3bf 8f6f 	isb	sy
 801277c:	f3bf 8f4f 	dsb	sy
 8012780:	b662      	cpsie	i
 8012782:	60bb      	str	r3, [r7, #8]
 8012784:	e7fe      	b.n	8012784 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8012786:	f000 f8eb 	bl	8012960 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801278a:	2100      	movs	r1, #0
 801278c:	6878      	ldr	r0, [r7, #4]
 801278e:	f000 feab 	bl	80134e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012792:	f000 f8f3 	bl	801297c <xTaskResumeAll>
 8012796:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d107      	bne.n	80127ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801279e:	4b07      	ldr	r3, [pc, #28]	; (80127bc <vTaskDelay+0x68>)
 80127a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127a4:	601a      	str	r2, [r3, #0]
 80127a6:	f3bf 8f4f 	dsb	sy
 80127aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80127ae:	bf00      	nop
 80127b0:	3710      	adds	r7, #16
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}
 80127b6:	bf00      	nop
 80127b8:	20000e1c 	.word	0x20000e1c
 80127bc:	e000ed04 	.word	0xe000ed04

080127c0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b088      	sub	sp, #32
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80127cc:	69bb      	ldr	r3, [r7, #24]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d10b      	bne.n	80127ea <eTaskGetState+0x2a>
 80127d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127d6:	b672      	cpsid	i
 80127d8:	f383 8811 	msr	BASEPRI, r3
 80127dc:	f3bf 8f6f 	isb	sy
 80127e0:	f3bf 8f4f 	dsb	sy
 80127e4:	b662      	cpsie	i
 80127e6:	60bb      	str	r3, [r7, #8]
 80127e8:	e7fe      	b.n	80127e8 <eTaskGetState+0x28>

		if( pxTCB == pxCurrentTCB )
 80127ea:	4b24      	ldr	r3, [pc, #144]	; (801287c <eTaskGetState+0xbc>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	69ba      	ldr	r2, [r7, #24]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d102      	bne.n	80127fa <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80127f4:	2300      	movs	r3, #0
 80127f6:	77fb      	strb	r3, [r7, #31]
 80127f8:	e03a      	b.n	8012870 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 80127fa:	f001 fb25 	bl	8013e48 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80127fe:	69bb      	ldr	r3, [r7, #24]
 8012800:	695b      	ldr	r3, [r3, #20]
 8012802:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8012804:	4b1e      	ldr	r3, [pc, #120]	; (8012880 <eTaskGetState+0xc0>)
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801280a:	4b1e      	ldr	r3, [pc, #120]	; (8012884 <eTaskGetState+0xc4>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8012810:	f001 fb4c 	bl	8013eac <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8012814:	697a      	ldr	r2, [r7, #20]
 8012816:	693b      	ldr	r3, [r7, #16]
 8012818:	429a      	cmp	r2, r3
 801281a:	d003      	beq.n	8012824 <eTaskGetState+0x64>
 801281c:	697a      	ldr	r2, [r7, #20]
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	429a      	cmp	r2, r3
 8012822:	d102      	bne.n	801282a <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8012824:	2302      	movs	r3, #2
 8012826:	77fb      	strb	r3, [r7, #31]
 8012828:	e022      	b.n	8012870 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	4a16      	ldr	r2, [pc, #88]	; (8012888 <eTaskGetState+0xc8>)
 801282e:	4293      	cmp	r3, r2
 8012830:	d112      	bne.n	8012858 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8012832:	69bb      	ldr	r3, [r7, #24]
 8012834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012836:	2b00      	cmp	r3, #0
 8012838:	d10b      	bne.n	8012852 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801283a:	69bb      	ldr	r3, [r7, #24]
 801283c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8012840:	b2db      	uxtb	r3, r3
 8012842:	2b01      	cmp	r3, #1
 8012844:	d102      	bne.n	801284c <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8012846:	2302      	movs	r3, #2
 8012848:	77fb      	strb	r3, [r7, #31]
 801284a:	e011      	b.n	8012870 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 801284c:	2303      	movs	r3, #3
 801284e:	77fb      	strb	r3, [r7, #31]
 8012850:	e00e      	b.n	8012870 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8012852:	2302      	movs	r3, #2
 8012854:	77fb      	strb	r3, [r7, #31]
 8012856:	e00b      	b.n	8012870 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	4a0c      	ldr	r2, [pc, #48]	; (801288c <eTaskGetState+0xcc>)
 801285c:	4293      	cmp	r3, r2
 801285e:	d002      	beq.n	8012866 <eTaskGetState+0xa6>
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d102      	bne.n	801286c <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8012866:	2304      	movs	r3, #4
 8012868:	77fb      	strb	r3, [r7, #31]
 801286a:	e001      	b.n	8012870 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801286c:	2301      	movs	r3, #1
 801286e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8012870:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8012872:	4618      	mov	r0, r3
 8012874:	3720      	adds	r7, #32
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}
 801287a:	bf00      	nop
 801287c:	20000920 	.word	0x20000920
 8012880:	20000dac 	.word	0x20000dac
 8012884:	20000db0 	.word	0x20000db0
 8012888:	20000de0 	.word	0x20000de0
 801288c:	20000dc8 	.word	0x20000dc8

08012890 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b08a      	sub	sp, #40	; 0x28
 8012894:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012896:	2300      	movs	r3, #0
 8012898:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801289a:	2300      	movs	r3, #0
 801289c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801289e:	463a      	mov	r2, r7
 80128a0:	1d39      	adds	r1, r7, #4
 80128a2:	f107 0308 	add.w	r3, r7, #8
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7fe fb66 	bl	8010f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80128ac:	6839      	ldr	r1, [r7, #0]
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	68ba      	ldr	r2, [r7, #8]
 80128b2:	9202      	str	r2, [sp, #8]
 80128b4:	9301      	str	r3, [sp, #4]
 80128b6:	2300      	movs	r3, #0
 80128b8:	9300      	str	r3, [sp, #0]
 80128ba:	2300      	movs	r3, #0
 80128bc:	460a      	mov	r2, r1
 80128be:	4922      	ldr	r1, [pc, #136]	; (8012948 <vTaskStartScheduler+0xb8>)
 80128c0:	4822      	ldr	r0, [pc, #136]	; (801294c <vTaskStartScheduler+0xbc>)
 80128c2:	f7ff fd2b 	bl	801231c <xTaskCreateStatic>
 80128c6:	4602      	mov	r2, r0
 80128c8:	4b21      	ldr	r3, [pc, #132]	; (8012950 <vTaskStartScheduler+0xc0>)
 80128ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80128cc:	4b20      	ldr	r3, [pc, #128]	; (8012950 <vTaskStartScheduler+0xc0>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d002      	beq.n	80128da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80128d4:	2301      	movs	r3, #1
 80128d6:	617b      	str	r3, [r7, #20]
 80128d8:	e001      	b.n	80128de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80128da:	2300      	movs	r3, #0
 80128dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80128de:	697b      	ldr	r3, [r7, #20]
 80128e0:	2b01      	cmp	r3, #1
 80128e2:	d102      	bne.n	80128ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80128e4:	f000 fe54 	bl	8013590 <xTimerCreateTimerTask>
 80128e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	2b01      	cmp	r3, #1
 80128ee:	d117      	bne.n	8012920 <vTaskStartScheduler+0x90>
 80128f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128f4:	b672      	cpsid	i
 80128f6:	f383 8811 	msr	BASEPRI, r3
 80128fa:	f3bf 8f6f 	isb	sy
 80128fe:	f3bf 8f4f 	dsb	sy
 8012902:	b662      	cpsie	i
 8012904:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012906:	4b13      	ldr	r3, [pc, #76]	; (8012954 <vTaskStartScheduler+0xc4>)
 8012908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801290c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801290e:	4b12      	ldr	r3, [pc, #72]	; (8012958 <vTaskStartScheduler+0xc8>)
 8012910:	2201      	movs	r2, #1
 8012912:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012914:	4b11      	ldr	r3, [pc, #68]	; (801295c <vTaskStartScheduler+0xcc>)
 8012916:	2200      	movs	r2, #0
 8012918:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801291a:	f001 fa19 	bl	8013d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801291e:	e00f      	b.n	8012940 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012920:	697b      	ldr	r3, [r7, #20]
 8012922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012926:	d10b      	bne.n	8012940 <vTaskStartScheduler+0xb0>
 8012928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801292c:	b672      	cpsid	i
 801292e:	f383 8811 	msr	BASEPRI, r3
 8012932:	f3bf 8f6f 	isb	sy
 8012936:	f3bf 8f4f 	dsb	sy
 801293a:	b662      	cpsie	i
 801293c:	60fb      	str	r3, [r7, #12]
 801293e:	e7fe      	b.n	801293e <vTaskStartScheduler+0xae>
}
 8012940:	bf00      	nop
 8012942:	3718      	adds	r7, #24
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}
 8012948:	08022580 	.word	0x08022580
 801294c:	08013001 	.word	0x08013001
 8012950:	20000e18 	.word	0x20000e18
 8012954:	20000e14 	.word	0x20000e14
 8012958:	20000e00 	.word	0x20000e00
 801295c:	20000df8 	.word	0x20000df8

08012960 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012960:	b480      	push	{r7}
 8012962:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012964:	4b04      	ldr	r3, [pc, #16]	; (8012978 <vTaskSuspendAll+0x18>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	3301      	adds	r3, #1
 801296a:	4a03      	ldr	r2, [pc, #12]	; (8012978 <vTaskSuspendAll+0x18>)
 801296c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801296e:	bf00      	nop
 8012970:	46bd      	mov	sp, r7
 8012972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012976:	4770      	bx	lr
 8012978:	20000e1c 	.word	0x20000e1c

0801297c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b084      	sub	sp, #16
 8012980:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012982:	2300      	movs	r3, #0
 8012984:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012986:	2300      	movs	r3, #0
 8012988:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801298a:	4b42      	ldr	r3, [pc, #264]	; (8012a94 <xTaskResumeAll+0x118>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d10b      	bne.n	80129aa <xTaskResumeAll+0x2e>
 8012992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012996:	b672      	cpsid	i
 8012998:	f383 8811 	msr	BASEPRI, r3
 801299c:	f3bf 8f6f 	isb	sy
 80129a0:	f3bf 8f4f 	dsb	sy
 80129a4:	b662      	cpsie	i
 80129a6:	603b      	str	r3, [r7, #0]
 80129a8:	e7fe      	b.n	80129a8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80129aa:	f001 fa4d 	bl	8013e48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80129ae:	4b39      	ldr	r3, [pc, #228]	; (8012a94 <xTaskResumeAll+0x118>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	3b01      	subs	r3, #1
 80129b4:	4a37      	ldr	r2, [pc, #220]	; (8012a94 <xTaskResumeAll+0x118>)
 80129b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80129b8:	4b36      	ldr	r3, [pc, #216]	; (8012a94 <xTaskResumeAll+0x118>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d162      	bne.n	8012a86 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80129c0:	4b35      	ldr	r3, [pc, #212]	; (8012a98 <xTaskResumeAll+0x11c>)
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d05e      	beq.n	8012a86 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80129c8:	e02f      	b.n	8012a2a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129ca:	4b34      	ldr	r3, [pc, #208]	; (8012a9c <xTaskResumeAll+0x120>)
 80129cc:	68db      	ldr	r3, [r3, #12]
 80129ce:	68db      	ldr	r3, [r3, #12]
 80129d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	3318      	adds	r3, #24
 80129d6:	4618      	mov	r0, r3
 80129d8:	f7fe fb8c 	bl	80110f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	3304      	adds	r3, #4
 80129e0:	4618      	mov	r0, r3
 80129e2:	f7fe fb87 	bl	80110f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129ea:	4b2d      	ldr	r3, [pc, #180]	; (8012aa0 <xTaskResumeAll+0x124>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d903      	bls.n	80129fa <xTaskResumeAll+0x7e>
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129f6:	4a2a      	ldr	r2, [pc, #168]	; (8012aa0 <xTaskResumeAll+0x124>)
 80129f8:	6013      	str	r3, [r2, #0]
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129fe:	4613      	mov	r3, r2
 8012a00:	009b      	lsls	r3, r3, #2
 8012a02:	4413      	add	r3, r2
 8012a04:	009b      	lsls	r3, r3, #2
 8012a06:	4a27      	ldr	r2, [pc, #156]	; (8012aa4 <xTaskResumeAll+0x128>)
 8012a08:	441a      	add	r2, r3
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	3304      	adds	r3, #4
 8012a0e:	4619      	mov	r1, r3
 8012a10:	4610      	mov	r0, r2
 8012a12:	f7fe fb12 	bl	801103a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a1a:	4b23      	ldr	r3, [pc, #140]	; (8012aa8 <xTaskResumeAll+0x12c>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d302      	bcc.n	8012a2a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8012a24:	4b21      	ldr	r3, [pc, #132]	; (8012aac <xTaskResumeAll+0x130>)
 8012a26:	2201      	movs	r2, #1
 8012a28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012a2a:	4b1c      	ldr	r3, [pc, #112]	; (8012a9c <xTaskResumeAll+0x120>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d1cb      	bne.n	80129ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d001      	beq.n	8012a3c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012a38:	f000 fb98 	bl	801316c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012a3c:	4b1c      	ldr	r3, [pc, #112]	; (8012ab0 <xTaskResumeAll+0x134>)
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d010      	beq.n	8012a6a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012a48:	f000 f858 	bl	8012afc <xTaskIncrementTick>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d002      	beq.n	8012a58 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8012a52:	4b16      	ldr	r3, [pc, #88]	; (8012aac <xTaskResumeAll+0x130>)
 8012a54:	2201      	movs	r2, #1
 8012a56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	3b01      	subs	r3, #1
 8012a5c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d1f1      	bne.n	8012a48 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8012a64:	4b12      	ldr	r3, [pc, #72]	; (8012ab0 <xTaskResumeAll+0x134>)
 8012a66:	2200      	movs	r2, #0
 8012a68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012a6a:	4b10      	ldr	r3, [pc, #64]	; (8012aac <xTaskResumeAll+0x130>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d009      	beq.n	8012a86 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012a72:	2301      	movs	r3, #1
 8012a74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012a76:	4b0f      	ldr	r3, [pc, #60]	; (8012ab4 <xTaskResumeAll+0x138>)
 8012a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a7c:	601a      	str	r2, [r3, #0]
 8012a7e:	f3bf 8f4f 	dsb	sy
 8012a82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012a86:	f001 fa11 	bl	8013eac <vPortExitCritical>

	return xAlreadyYielded;
 8012a8a:	68bb      	ldr	r3, [r7, #8]
}
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	3710      	adds	r7, #16
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}
 8012a94:	20000e1c 	.word	0x20000e1c
 8012a98:	20000df4 	.word	0x20000df4
 8012a9c:	20000db4 	.word	0x20000db4
 8012aa0:	20000dfc 	.word	0x20000dfc
 8012aa4:	20000924 	.word	0x20000924
 8012aa8:	20000920 	.word	0x20000920
 8012aac:	20000e08 	.word	0x20000e08
 8012ab0:	20000e04 	.word	0x20000e04
 8012ab4:	e000ed04 	.word	0xe000ed04

08012ab8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012ab8:	b480      	push	{r7}
 8012aba:	b083      	sub	sp, #12
 8012abc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012abe:	4b05      	ldr	r3, [pc, #20]	; (8012ad4 <xTaskGetTickCount+0x1c>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012ac4:	687b      	ldr	r3, [r7, #4]
}
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	370c      	adds	r7, #12
 8012aca:	46bd      	mov	sp, r7
 8012acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad0:	4770      	bx	lr
 8012ad2:	bf00      	nop
 8012ad4:	20000df8 	.word	0x20000df8

08012ad8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b082      	sub	sp, #8
 8012adc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012ade:	f001 fa93 	bl	8014008 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012ae6:	4b04      	ldr	r3, [pc, #16]	; (8012af8 <xTaskGetTickCountFromISR+0x20>)
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012aec:	683b      	ldr	r3, [r7, #0]
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3708      	adds	r7, #8
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}
 8012af6:	bf00      	nop
 8012af8:	20000df8 	.word	0x20000df8

08012afc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b086      	sub	sp, #24
 8012b00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012b02:	2300      	movs	r3, #0
 8012b04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b06:	4b53      	ldr	r3, [pc, #332]	; (8012c54 <xTaskIncrementTick+0x158>)
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	f040 8090 	bne.w	8012c30 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012b10:	4b51      	ldr	r3, [pc, #324]	; (8012c58 <xTaskIncrementTick+0x15c>)
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	3301      	adds	r3, #1
 8012b16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012b18:	4a4f      	ldr	r2, [pc, #316]	; (8012c58 <xTaskIncrementTick+0x15c>)
 8012b1a:	693b      	ldr	r3, [r7, #16]
 8012b1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012b1e:	693b      	ldr	r3, [r7, #16]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d121      	bne.n	8012b68 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8012b24:	4b4d      	ldr	r3, [pc, #308]	; (8012c5c <xTaskIncrementTick+0x160>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d00b      	beq.n	8012b46 <xTaskIncrementTick+0x4a>
 8012b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b32:	b672      	cpsid	i
 8012b34:	f383 8811 	msr	BASEPRI, r3
 8012b38:	f3bf 8f6f 	isb	sy
 8012b3c:	f3bf 8f4f 	dsb	sy
 8012b40:	b662      	cpsie	i
 8012b42:	603b      	str	r3, [r7, #0]
 8012b44:	e7fe      	b.n	8012b44 <xTaskIncrementTick+0x48>
 8012b46:	4b45      	ldr	r3, [pc, #276]	; (8012c5c <xTaskIncrementTick+0x160>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	60fb      	str	r3, [r7, #12]
 8012b4c:	4b44      	ldr	r3, [pc, #272]	; (8012c60 <xTaskIncrementTick+0x164>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	4a42      	ldr	r2, [pc, #264]	; (8012c5c <xTaskIncrementTick+0x160>)
 8012b52:	6013      	str	r3, [r2, #0]
 8012b54:	4a42      	ldr	r2, [pc, #264]	; (8012c60 <xTaskIncrementTick+0x164>)
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	6013      	str	r3, [r2, #0]
 8012b5a:	4b42      	ldr	r3, [pc, #264]	; (8012c64 <xTaskIncrementTick+0x168>)
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	3301      	adds	r3, #1
 8012b60:	4a40      	ldr	r2, [pc, #256]	; (8012c64 <xTaskIncrementTick+0x168>)
 8012b62:	6013      	str	r3, [r2, #0]
 8012b64:	f000 fb02 	bl	801316c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012b68:	4b3f      	ldr	r3, [pc, #252]	; (8012c68 <xTaskIncrementTick+0x16c>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	693a      	ldr	r2, [r7, #16]
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d349      	bcc.n	8012c06 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012b72:	4b3a      	ldr	r3, [pc, #232]	; (8012c5c <xTaskIncrementTick+0x160>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d104      	bne.n	8012b86 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b7c:	4b3a      	ldr	r3, [pc, #232]	; (8012c68 <xTaskIncrementTick+0x16c>)
 8012b7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012b82:	601a      	str	r2, [r3, #0]
					break;
 8012b84:	e03f      	b.n	8012c06 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b86:	4b35      	ldr	r3, [pc, #212]	; (8012c5c <xTaskIncrementTick+0x160>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	68db      	ldr	r3, [r3, #12]
 8012b8c:	68db      	ldr	r3, [r3, #12]
 8012b8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	685b      	ldr	r3, [r3, #4]
 8012b94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012b96:	693a      	ldr	r2, [r7, #16]
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d203      	bcs.n	8012ba6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012b9e:	4a32      	ldr	r2, [pc, #200]	; (8012c68 <xTaskIncrementTick+0x16c>)
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012ba4:	e02f      	b.n	8012c06 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	3304      	adds	r3, #4
 8012baa:	4618      	mov	r0, r3
 8012bac:	f7fe faa2 	bl	80110f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012bb0:	68bb      	ldr	r3, [r7, #8]
 8012bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d004      	beq.n	8012bc2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	3318      	adds	r3, #24
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f7fe fa99 	bl	80110f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012bc2:	68bb      	ldr	r3, [r7, #8]
 8012bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bc6:	4b29      	ldr	r3, [pc, #164]	; (8012c6c <xTaskIncrementTick+0x170>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	d903      	bls.n	8012bd6 <xTaskIncrementTick+0xda>
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bd2:	4a26      	ldr	r2, [pc, #152]	; (8012c6c <xTaskIncrementTick+0x170>)
 8012bd4:	6013      	str	r3, [r2, #0]
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bda:	4613      	mov	r3, r2
 8012bdc:	009b      	lsls	r3, r3, #2
 8012bde:	4413      	add	r3, r2
 8012be0:	009b      	lsls	r3, r3, #2
 8012be2:	4a23      	ldr	r2, [pc, #140]	; (8012c70 <xTaskIncrementTick+0x174>)
 8012be4:	441a      	add	r2, r3
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	3304      	adds	r3, #4
 8012bea:	4619      	mov	r1, r3
 8012bec:	4610      	mov	r0, r2
 8012bee:	f7fe fa24 	bl	801103a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bf6:	4b1f      	ldr	r3, [pc, #124]	; (8012c74 <xTaskIncrementTick+0x178>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d3b8      	bcc.n	8012b72 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012c00:	2301      	movs	r3, #1
 8012c02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012c04:	e7b5      	b.n	8012b72 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012c06:	4b1b      	ldr	r3, [pc, #108]	; (8012c74 <xTaskIncrementTick+0x178>)
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c0c:	4918      	ldr	r1, [pc, #96]	; (8012c70 <xTaskIncrementTick+0x174>)
 8012c0e:	4613      	mov	r3, r2
 8012c10:	009b      	lsls	r3, r3, #2
 8012c12:	4413      	add	r3, r2
 8012c14:	009b      	lsls	r3, r3, #2
 8012c16:	440b      	add	r3, r1
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	2b01      	cmp	r3, #1
 8012c1c:	d901      	bls.n	8012c22 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8012c1e:	2301      	movs	r3, #1
 8012c20:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8012c22:	4b15      	ldr	r3, [pc, #84]	; (8012c78 <xTaskIncrementTick+0x17c>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d109      	bne.n	8012c3e <xTaskIncrementTick+0x142>
			{
				vApplicationTickHook();
 8012c2a:	f7fe f99d 	bl	8010f68 <vApplicationTickHook>
 8012c2e:	e006      	b.n	8012c3e <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012c30:	4b11      	ldr	r3, [pc, #68]	; (8012c78 <xTaskIncrementTick+0x17c>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	3301      	adds	r3, #1
 8012c36:	4a10      	ldr	r2, [pc, #64]	; (8012c78 <xTaskIncrementTick+0x17c>)
 8012c38:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8012c3a:	f7fe f995 	bl	8010f68 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012c3e:	4b0f      	ldr	r3, [pc, #60]	; (8012c7c <xTaskIncrementTick+0x180>)
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d001      	beq.n	8012c4a <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 8012c46:	2301      	movs	r3, #1
 8012c48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012c4a:	697b      	ldr	r3, [r7, #20]
}
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	3718      	adds	r7, #24
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}
 8012c54:	20000e1c 	.word	0x20000e1c
 8012c58:	20000df8 	.word	0x20000df8
 8012c5c:	20000dac 	.word	0x20000dac
 8012c60:	20000db0 	.word	0x20000db0
 8012c64:	20000e0c 	.word	0x20000e0c
 8012c68:	20000e14 	.word	0x20000e14
 8012c6c:	20000dfc 	.word	0x20000dfc
 8012c70:	20000924 	.word	0x20000924
 8012c74:	20000920 	.word	0x20000920
 8012c78:	20000e04 	.word	0x20000e04
 8012c7c:	20000e08 	.word	0x20000e08

08012c80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b086      	sub	sp, #24
 8012c84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012c86:	4b3b      	ldr	r3, [pc, #236]	; (8012d74 <vTaskSwitchContext+0xf4>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d003      	beq.n	8012c96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012c8e:	4b3a      	ldr	r3, [pc, #232]	; (8012d78 <vTaskSwitchContext+0xf8>)
 8012c90:	2201      	movs	r2, #1
 8012c92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012c94:	e069      	b.n	8012d6a <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8012c96:	4b38      	ldr	r3, [pc, #224]	; (8012d78 <vTaskSwitchContext+0xf8>)
 8012c98:	2200      	movs	r2, #0
 8012c9a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8012c9c:	4b37      	ldr	r3, [pc, #220]	; (8012d7c <vTaskSwitchContext+0xfc>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ca2:	613b      	str	r3, [r7, #16]
 8012ca4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8012ca8:	60fb      	str	r3, [r7, #12]
 8012caa:	693b      	ldr	r3, [r7, #16]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	68fa      	ldr	r2, [r7, #12]
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	d111      	bne.n	8012cd8 <vTaskSwitchContext+0x58>
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	3304      	adds	r3, #4
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	68fa      	ldr	r2, [r7, #12]
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	d10b      	bne.n	8012cd8 <vTaskSwitchContext+0x58>
 8012cc0:	693b      	ldr	r3, [r7, #16]
 8012cc2:	3308      	adds	r3, #8
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	68fa      	ldr	r2, [r7, #12]
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d105      	bne.n	8012cd8 <vTaskSwitchContext+0x58>
 8012ccc:	693b      	ldr	r3, [r7, #16]
 8012cce:	330c      	adds	r3, #12
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	68fa      	ldr	r2, [r7, #12]
 8012cd4:	429a      	cmp	r2, r3
 8012cd6:	d008      	beq.n	8012cea <vTaskSwitchContext+0x6a>
 8012cd8:	4b28      	ldr	r3, [pc, #160]	; (8012d7c <vTaskSwitchContext+0xfc>)
 8012cda:	681a      	ldr	r2, [r3, #0]
 8012cdc:	4b27      	ldr	r3, [pc, #156]	; (8012d7c <vTaskSwitchContext+0xfc>)
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	3334      	adds	r3, #52	; 0x34
 8012ce2:	4619      	mov	r1, r3
 8012ce4:	4610      	mov	r0, r2
 8012ce6:	f7ed fc6a 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012cea:	4b25      	ldr	r3, [pc, #148]	; (8012d80 <vTaskSwitchContext+0x100>)
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	617b      	str	r3, [r7, #20]
 8012cf0:	e011      	b.n	8012d16 <vTaskSwitchContext+0x96>
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d10b      	bne.n	8012d10 <vTaskSwitchContext+0x90>
 8012cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cfc:	b672      	cpsid	i
 8012cfe:	f383 8811 	msr	BASEPRI, r3
 8012d02:	f3bf 8f6f 	isb	sy
 8012d06:	f3bf 8f4f 	dsb	sy
 8012d0a:	b662      	cpsie	i
 8012d0c:	607b      	str	r3, [r7, #4]
 8012d0e:	e7fe      	b.n	8012d0e <vTaskSwitchContext+0x8e>
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	3b01      	subs	r3, #1
 8012d14:	617b      	str	r3, [r7, #20]
 8012d16:	491b      	ldr	r1, [pc, #108]	; (8012d84 <vTaskSwitchContext+0x104>)
 8012d18:	697a      	ldr	r2, [r7, #20]
 8012d1a:	4613      	mov	r3, r2
 8012d1c:	009b      	lsls	r3, r3, #2
 8012d1e:	4413      	add	r3, r2
 8012d20:	009b      	lsls	r3, r3, #2
 8012d22:	440b      	add	r3, r1
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d0e3      	beq.n	8012cf2 <vTaskSwitchContext+0x72>
 8012d2a:	697a      	ldr	r2, [r7, #20]
 8012d2c:	4613      	mov	r3, r2
 8012d2e:	009b      	lsls	r3, r3, #2
 8012d30:	4413      	add	r3, r2
 8012d32:	009b      	lsls	r3, r3, #2
 8012d34:	4a13      	ldr	r2, [pc, #76]	; (8012d84 <vTaskSwitchContext+0x104>)
 8012d36:	4413      	add	r3, r2
 8012d38:	60bb      	str	r3, [r7, #8]
 8012d3a:	68bb      	ldr	r3, [r7, #8]
 8012d3c:	685b      	ldr	r3, [r3, #4]
 8012d3e:	685a      	ldr	r2, [r3, #4]
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	605a      	str	r2, [r3, #4]
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	685a      	ldr	r2, [r3, #4]
 8012d48:	68bb      	ldr	r3, [r7, #8]
 8012d4a:	3308      	adds	r3, #8
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	d104      	bne.n	8012d5a <vTaskSwitchContext+0xda>
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	685b      	ldr	r3, [r3, #4]
 8012d54:	685a      	ldr	r2, [r3, #4]
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	605a      	str	r2, [r3, #4]
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	685b      	ldr	r3, [r3, #4]
 8012d5e:	68db      	ldr	r3, [r3, #12]
 8012d60:	4a06      	ldr	r2, [pc, #24]	; (8012d7c <vTaskSwitchContext+0xfc>)
 8012d62:	6013      	str	r3, [r2, #0]
 8012d64:	4a06      	ldr	r2, [pc, #24]	; (8012d80 <vTaskSwitchContext+0x100>)
 8012d66:	697b      	ldr	r3, [r7, #20]
 8012d68:	6013      	str	r3, [r2, #0]
}
 8012d6a:	bf00      	nop
 8012d6c:	3718      	adds	r7, #24
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}
 8012d72:	bf00      	nop
 8012d74:	20000e1c 	.word	0x20000e1c
 8012d78:	20000e08 	.word	0x20000e08
 8012d7c:	20000920 	.word	0x20000920
 8012d80:	20000dfc 	.word	0x20000dfc
 8012d84:	20000924 	.word	0x20000924

08012d88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b084      	sub	sp, #16
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d10b      	bne.n	8012db0 <vTaskPlaceOnEventList+0x28>
 8012d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d9c:	b672      	cpsid	i
 8012d9e:	f383 8811 	msr	BASEPRI, r3
 8012da2:	f3bf 8f6f 	isb	sy
 8012da6:	f3bf 8f4f 	dsb	sy
 8012daa:	b662      	cpsie	i
 8012dac:	60fb      	str	r3, [r7, #12]
 8012dae:	e7fe      	b.n	8012dae <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012db0:	4b07      	ldr	r3, [pc, #28]	; (8012dd0 <vTaskPlaceOnEventList+0x48>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	3318      	adds	r3, #24
 8012db6:	4619      	mov	r1, r3
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f7fe f962 	bl	8011082 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012dbe:	2101      	movs	r1, #1
 8012dc0:	6838      	ldr	r0, [r7, #0]
 8012dc2:	f000 fb91 	bl	80134e8 <prvAddCurrentTaskToDelayedList>
}
 8012dc6:	bf00      	nop
 8012dc8:	3710      	adds	r7, #16
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	20000920 	.word	0x20000920

08012dd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b086      	sub	sp, #24
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	60f8      	str	r0, [r7, #12]
 8012ddc:	60b9      	str	r1, [r7, #8]
 8012dde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d10b      	bne.n	8012dfe <vTaskPlaceOnEventListRestricted+0x2a>
 8012de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dea:	b672      	cpsid	i
 8012dec:	f383 8811 	msr	BASEPRI, r3
 8012df0:	f3bf 8f6f 	isb	sy
 8012df4:	f3bf 8f4f 	dsb	sy
 8012df8:	b662      	cpsie	i
 8012dfa:	617b      	str	r3, [r7, #20]
 8012dfc:	e7fe      	b.n	8012dfc <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012dfe:	4b0a      	ldr	r3, [pc, #40]	; (8012e28 <vTaskPlaceOnEventListRestricted+0x54>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	3318      	adds	r3, #24
 8012e04:	4619      	mov	r1, r3
 8012e06:	68f8      	ldr	r0, [r7, #12]
 8012e08:	f7fe f917 	bl	801103a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d002      	beq.n	8012e18 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8012e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012e18:	6879      	ldr	r1, [r7, #4]
 8012e1a:	68b8      	ldr	r0, [r7, #8]
 8012e1c:	f000 fb64 	bl	80134e8 <prvAddCurrentTaskToDelayedList>
	}
 8012e20:	bf00      	nop
 8012e22:	3718      	adds	r7, #24
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	20000920 	.word	0x20000920

08012e2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b086      	sub	sp, #24
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	68db      	ldr	r3, [r3, #12]
 8012e38:	68db      	ldr	r3, [r3, #12]
 8012e3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012e3c:	693b      	ldr	r3, [r7, #16]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d10b      	bne.n	8012e5a <xTaskRemoveFromEventList+0x2e>
 8012e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e46:	b672      	cpsid	i
 8012e48:	f383 8811 	msr	BASEPRI, r3
 8012e4c:	f3bf 8f6f 	isb	sy
 8012e50:	f3bf 8f4f 	dsb	sy
 8012e54:	b662      	cpsie	i
 8012e56:	60fb      	str	r3, [r7, #12]
 8012e58:	e7fe      	b.n	8012e58 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	3318      	adds	r3, #24
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7fe f948 	bl	80110f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e64:	4b1d      	ldr	r3, [pc, #116]	; (8012edc <xTaskRemoveFromEventList+0xb0>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d11d      	bne.n	8012ea8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012e6c:	693b      	ldr	r3, [r7, #16]
 8012e6e:	3304      	adds	r3, #4
 8012e70:	4618      	mov	r0, r3
 8012e72:	f7fe f93f 	bl	80110f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e7a:	4b19      	ldr	r3, [pc, #100]	; (8012ee0 <xTaskRemoveFromEventList+0xb4>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	429a      	cmp	r2, r3
 8012e80:	d903      	bls.n	8012e8a <xTaskRemoveFromEventList+0x5e>
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e86:	4a16      	ldr	r2, [pc, #88]	; (8012ee0 <xTaskRemoveFromEventList+0xb4>)
 8012e88:	6013      	str	r3, [r2, #0]
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e8e:	4613      	mov	r3, r2
 8012e90:	009b      	lsls	r3, r3, #2
 8012e92:	4413      	add	r3, r2
 8012e94:	009b      	lsls	r3, r3, #2
 8012e96:	4a13      	ldr	r2, [pc, #76]	; (8012ee4 <xTaskRemoveFromEventList+0xb8>)
 8012e98:	441a      	add	r2, r3
 8012e9a:	693b      	ldr	r3, [r7, #16]
 8012e9c:	3304      	adds	r3, #4
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	4610      	mov	r0, r2
 8012ea2:	f7fe f8ca 	bl	801103a <vListInsertEnd>
 8012ea6:	e005      	b.n	8012eb4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012ea8:	693b      	ldr	r3, [r7, #16]
 8012eaa:	3318      	adds	r3, #24
 8012eac:	4619      	mov	r1, r3
 8012eae:	480e      	ldr	r0, [pc, #56]	; (8012ee8 <xTaskRemoveFromEventList+0xbc>)
 8012eb0:	f7fe f8c3 	bl	801103a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012eb4:	693b      	ldr	r3, [r7, #16]
 8012eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eb8:	4b0c      	ldr	r3, [pc, #48]	; (8012eec <xTaskRemoveFromEventList+0xc0>)
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ebe:	429a      	cmp	r2, r3
 8012ec0:	d905      	bls.n	8012ece <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012ec2:	2301      	movs	r3, #1
 8012ec4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012ec6:	4b0a      	ldr	r3, [pc, #40]	; (8012ef0 <xTaskRemoveFromEventList+0xc4>)
 8012ec8:	2201      	movs	r2, #1
 8012eca:	601a      	str	r2, [r3, #0]
 8012ecc:	e001      	b.n	8012ed2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012ed2:	697b      	ldr	r3, [r7, #20]
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3718      	adds	r7, #24
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}
 8012edc:	20000e1c 	.word	0x20000e1c
 8012ee0:	20000dfc 	.word	0x20000dfc
 8012ee4:	20000924 	.word	0x20000924
 8012ee8:	20000db4 	.word	0x20000db4
 8012eec:	20000920 	.word	0x20000920
 8012ef0:	20000e08 	.word	0x20000e08

08012ef4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012ef4:	b480      	push	{r7}
 8012ef6:	b083      	sub	sp, #12
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012efc:	4b06      	ldr	r3, [pc, #24]	; (8012f18 <vTaskInternalSetTimeOutState+0x24>)
 8012efe:	681a      	ldr	r2, [r3, #0]
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012f04:	4b05      	ldr	r3, [pc, #20]	; (8012f1c <vTaskInternalSetTimeOutState+0x28>)
 8012f06:	681a      	ldr	r2, [r3, #0]
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	605a      	str	r2, [r3, #4]
}
 8012f0c:	bf00      	nop
 8012f0e:	370c      	adds	r7, #12
 8012f10:	46bd      	mov	sp, r7
 8012f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f16:	4770      	bx	lr
 8012f18:	20000e0c 	.word	0x20000e0c
 8012f1c:	20000df8 	.word	0x20000df8

08012f20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b088      	sub	sp, #32
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d10b      	bne.n	8012f48 <xTaskCheckForTimeOut+0x28>
 8012f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f34:	b672      	cpsid	i
 8012f36:	f383 8811 	msr	BASEPRI, r3
 8012f3a:	f3bf 8f6f 	isb	sy
 8012f3e:	f3bf 8f4f 	dsb	sy
 8012f42:	b662      	cpsie	i
 8012f44:	613b      	str	r3, [r7, #16]
 8012f46:	e7fe      	b.n	8012f46 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d10b      	bne.n	8012f66 <xTaskCheckForTimeOut+0x46>
 8012f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f52:	b672      	cpsid	i
 8012f54:	f383 8811 	msr	BASEPRI, r3
 8012f58:	f3bf 8f6f 	isb	sy
 8012f5c:	f3bf 8f4f 	dsb	sy
 8012f60:	b662      	cpsie	i
 8012f62:	60fb      	str	r3, [r7, #12]
 8012f64:	e7fe      	b.n	8012f64 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8012f66:	f000 ff6f 	bl	8013e48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012f6a:	4b1d      	ldr	r3, [pc, #116]	; (8012fe0 <xTaskCheckForTimeOut+0xc0>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	685b      	ldr	r3, [r3, #4]
 8012f74:	69ba      	ldr	r2, [r7, #24]
 8012f76:	1ad3      	subs	r3, r2, r3
 8012f78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f82:	d102      	bne.n	8012f8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012f84:	2300      	movs	r3, #0
 8012f86:	61fb      	str	r3, [r7, #28]
 8012f88:	e023      	b.n	8012fd2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	681a      	ldr	r2, [r3, #0]
 8012f8e:	4b15      	ldr	r3, [pc, #84]	; (8012fe4 <xTaskCheckForTimeOut+0xc4>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	429a      	cmp	r2, r3
 8012f94:	d007      	beq.n	8012fa6 <xTaskCheckForTimeOut+0x86>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	685b      	ldr	r3, [r3, #4]
 8012f9a:	69ba      	ldr	r2, [r7, #24]
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	d302      	bcc.n	8012fa6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	61fb      	str	r3, [r7, #28]
 8012fa4:	e015      	b.n	8012fd2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012fa6:	683b      	ldr	r3, [r7, #0]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	697a      	ldr	r2, [r7, #20]
 8012fac:	429a      	cmp	r2, r3
 8012fae:	d20b      	bcs.n	8012fc8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	681a      	ldr	r2, [r3, #0]
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	1ad2      	subs	r2, r2, r3
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f7ff ff99 	bl	8012ef4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	61fb      	str	r3, [r7, #28]
 8012fc6:	e004      	b.n	8012fd2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	2200      	movs	r2, #0
 8012fcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012fce:	2301      	movs	r3, #1
 8012fd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012fd2:	f000 ff6b 	bl	8013eac <vPortExitCritical>

	return xReturn;
 8012fd6:	69fb      	ldr	r3, [r7, #28]
}
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3720      	adds	r7, #32
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	20000df8 	.word	0x20000df8
 8012fe4:	20000e0c 	.word	0x20000e0c

08012fe8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012fe8:	b480      	push	{r7}
 8012fea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012fec:	4b03      	ldr	r3, [pc, #12]	; (8012ffc <vTaskMissedYield+0x14>)
 8012fee:	2201      	movs	r2, #1
 8012ff0:	601a      	str	r2, [r3, #0]
}
 8012ff2:	bf00      	nop
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffa:	4770      	bx	lr
 8012ffc:	20000e08 	.word	0x20000e08

08013000 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b082      	sub	sp, #8
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013008:	f000 f854 	bl	80130b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801300c:	4b07      	ldr	r3, [pc, #28]	; (801302c <prvIdleTask+0x2c>)
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	2b01      	cmp	r3, #1
 8013012:	d907      	bls.n	8013024 <prvIdleTask+0x24>
			{
				taskYIELD();
 8013014:	4b06      	ldr	r3, [pc, #24]	; (8013030 <prvIdleTask+0x30>)
 8013016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801301a:	601a      	str	r2, [r3, #0]
 801301c:	f3bf 8f4f 	dsb	sy
 8013020:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8013024:	f7ed fac4 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8013028:	e7ee      	b.n	8013008 <prvIdleTask+0x8>
 801302a:	bf00      	nop
 801302c:	20000924 	.word	0x20000924
 8013030:	e000ed04 	.word	0xe000ed04

08013034 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b082      	sub	sp, #8
 8013038:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801303a:	2300      	movs	r3, #0
 801303c:	607b      	str	r3, [r7, #4]
 801303e:	e00c      	b.n	801305a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	4613      	mov	r3, r2
 8013044:	009b      	lsls	r3, r3, #2
 8013046:	4413      	add	r3, r2
 8013048:	009b      	lsls	r3, r3, #2
 801304a:	4a12      	ldr	r2, [pc, #72]	; (8013094 <prvInitialiseTaskLists+0x60>)
 801304c:	4413      	add	r3, r2
 801304e:	4618      	mov	r0, r3
 8013050:	f7fd ffc6 	bl	8010fe0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	3301      	adds	r3, #1
 8013058:	607b      	str	r3, [r7, #4]
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	2b37      	cmp	r3, #55	; 0x37
 801305e:	d9ef      	bls.n	8013040 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013060:	480d      	ldr	r0, [pc, #52]	; (8013098 <prvInitialiseTaskLists+0x64>)
 8013062:	f7fd ffbd 	bl	8010fe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013066:	480d      	ldr	r0, [pc, #52]	; (801309c <prvInitialiseTaskLists+0x68>)
 8013068:	f7fd ffba 	bl	8010fe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801306c:	480c      	ldr	r0, [pc, #48]	; (80130a0 <prvInitialiseTaskLists+0x6c>)
 801306e:	f7fd ffb7 	bl	8010fe0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013072:	480c      	ldr	r0, [pc, #48]	; (80130a4 <prvInitialiseTaskLists+0x70>)
 8013074:	f7fd ffb4 	bl	8010fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013078:	480b      	ldr	r0, [pc, #44]	; (80130a8 <prvInitialiseTaskLists+0x74>)
 801307a:	f7fd ffb1 	bl	8010fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801307e:	4b0b      	ldr	r3, [pc, #44]	; (80130ac <prvInitialiseTaskLists+0x78>)
 8013080:	4a05      	ldr	r2, [pc, #20]	; (8013098 <prvInitialiseTaskLists+0x64>)
 8013082:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013084:	4b0a      	ldr	r3, [pc, #40]	; (80130b0 <prvInitialiseTaskLists+0x7c>)
 8013086:	4a05      	ldr	r2, [pc, #20]	; (801309c <prvInitialiseTaskLists+0x68>)
 8013088:	601a      	str	r2, [r3, #0]
}
 801308a:	bf00      	nop
 801308c:	3708      	adds	r7, #8
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}
 8013092:	bf00      	nop
 8013094:	20000924 	.word	0x20000924
 8013098:	20000d84 	.word	0x20000d84
 801309c:	20000d98 	.word	0x20000d98
 80130a0:	20000db4 	.word	0x20000db4
 80130a4:	20000dc8 	.word	0x20000dc8
 80130a8:	20000de0 	.word	0x20000de0
 80130ac:	20000dac 	.word	0x20000dac
 80130b0:	20000db0 	.word	0x20000db0

080130b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b082      	sub	sp, #8
 80130b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80130ba:	e019      	b.n	80130f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80130bc:	f000 fec4 	bl	8013e48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80130c0:	4b0f      	ldr	r3, [pc, #60]	; (8013100 <prvCheckTasksWaitingTermination+0x4c>)
 80130c2:	68db      	ldr	r3, [r3, #12]
 80130c4:	68db      	ldr	r3, [r3, #12]
 80130c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	3304      	adds	r3, #4
 80130cc:	4618      	mov	r0, r3
 80130ce:	f7fe f811 	bl	80110f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80130d2:	4b0c      	ldr	r3, [pc, #48]	; (8013104 <prvCheckTasksWaitingTermination+0x50>)
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	3b01      	subs	r3, #1
 80130d8:	4a0a      	ldr	r2, [pc, #40]	; (8013104 <prvCheckTasksWaitingTermination+0x50>)
 80130da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80130dc:	4b0a      	ldr	r3, [pc, #40]	; (8013108 <prvCheckTasksWaitingTermination+0x54>)
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	3b01      	subs	r3, #1
 80130e2:	4a09      	ldr	r2, [pc, #36]	; (8013108 <prvCheckTasksWaitingTermination+0x54>)
 80130e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80130e6:	f000 fee1 	bl	8013eac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80130ea:	6878      	ldr	r0, [r7, #4]
 80130ec:	f000 f80e 	bl	801310c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80130f0:	4b05      	ldr	r3, [pc, #20]	; (8013108 <prvCheckTasksWaitingTermination+0x54>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d1e1      	bne.n	80130bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80130f8:	bf00      	nop
 80130fa:	3708      	adds	r7, #8
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}
 8013100:	20000dc8 	.word	0x20000dc8
 8013104:	20000df4 	.word	0x20000df4
 8013108:	20000ddc 	.word	0x20000ddc

0801310c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801310c:	b580      	push	{r7, lr}
 801310e:	b084      	sub	sp, #16
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801311a:	2b00      	cmp	r3, #0
 801311c:	d108      	bne.n	8013130 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013122:	4618      	mov	r0, r3
 8013124:	f001 f87e 	bl	8014224 <vPortFree>
				vPortFree( pxTCB );
 8013128:	6878      	ldr	r0, [r7, #4]
 801312a:	f001 f87b 	bl	8014224 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801312e:	e019      	b.n	8013164 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013136:	2b01      	cmp	r3, #1
 8013138:	d103      	bne.n	8013142 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801313a:	6878      	ldr	r0, [r7, #4]
 801313c:	f001 f872 	bl	8014224 <vPortFree>
	}
 8013140:	e010      	b.n	8013164 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013148:	2b02      	cmp	r3, #2
 801314a:	d00b      	beq.n	8013164 <prvDeleteTCB+0x58>
 801314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013150:	b672      	cpsid	i
 8013152:	f383 8811 	msr	BASEPRI, r3
 8013156:	f3bf 8f6f 	isb	sy
 801315a:	f3bf 8f4f 	dsb	sy
 801315e:	b662      	cpsie	i
 8013160:	60fb      	str	r3, [r7, #12]
 8013162:	e7fe      	b.n	8013162 <prvDeleteTCB+0x56>
	}
 8013164:	bf00      	nop
 8013166:	3710      	adds	r7, #16
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}

0801316c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801316c:	b480      	push	{r7}
 801316e:	b083      	sub	sp, #12
 8013170:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013172:	4b0c      	ldr	r3, [pc, #48]	; (80131a4 <prvResetNextTaskUnblockTime+0x38>)
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d104      	bne.n	8013186 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801317c:	4b0a      	ldr	r3, [pc, #40]	; (80131a8 <prvResetNextTaskUnblockTime+0x3c>)
 801317e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013182:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013184:	e008      	b.n	8013198 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013186:	4b07      	ldr	r3, [pc, #28]	; (80131a4 <prvResetNextTaskUnblockTime+0x38>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	68db      	ldr	r3, [r3, #12]
 801318c:	68db      	ldr	r3, [r3, #12]
 801318e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	685b      	ldr	r3, [r3, #4]
 8013194:	4a04      	ldr	r2, [pc, #16]	; (80131a8 <prvResetNextTaskUnblockTime+0x3c>)
 8013196:	6013      	str	r3, [r2, #0]
}
 8013198:	bf00      	nop
 801319a:	370c      	adds	r7, #12
 801319c:	46bd      	mov	sp, r7
 801319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a2:	4770      	bx	lr
 80131a4:	20000dac 	.word	0x20000dac
 80131a8:	20000e14 	.word	0x20000e14

080131ac <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80131ac:	b480      	push	{r7}
 80131ae:	b083      	sub	sp, #12
 80131b0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80131b2:	4b05      	ldr	r3, [pc, #20]	; (80131c8 <xTaskGetCurrentTaskHandle+0x1c>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80131b8:	687b      	ldr	r3, [r7, #4]
	}
 80131ba:	4618      	mov	r0, r3
 80131bc:	370c      	adds	r7, #12
 80131be:	46bd      	mov	sp, r7
 80131c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c4:	4770      	bx	lr
 80131c6:	bf00      	nop
 80131c8:	20000920 	.word	0x20000920

080131cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80131cc:	b480      	push	{r7}
 80131ce:	b083      	sub	sp, #12
 80131d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80131d2:	4b0b      	ldr	r3, [pc, #44]	; (8013200 <xTaskGetSchedulerState+0x34>)
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d102      	bne.n	80131e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80131da:	2301      	movs	r3, #1
 80131dc:	607b      	str	r3, [r7, #4]
 80131de:	e008      	b.n	80131f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80131e0:	4b08      	ldr	r3, [pc, #32]	; (8013204 <xTaskGetSchedulerState+0x38>)
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d102      	bne.n	80131ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80131e8:	2302      	movs	r3, #2
 80131ea:	607b      	str	r3, [r7, #4]
 80131ec:	e001      	b.n	80131f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80131ee:	2300      	movs	r3, #0
 80131f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80131f2:	687b      	ldr	r3, [r7, #4]
	}
 80131f4:	4618      	mov	r0, r3
 80131f6:	370c      	adds	r7, #12
 80131f8:	46bd      	mov	sp, r7
 80131fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fe:	4770      	bx	lr
 8013200:	20000e00 	.word	0x20000e00
 8013204:	20000e1c 	.word	0x20000e1c

08013208 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013208:	b580      	push	{r7, lr}
 801320a:	b084      	sub	sp, #16
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013214:	2300      	movs	r3, #0
 8013216:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d051      	beq.n	80132c2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013222:	4b2a      	ldr	r3, [pc, #168]	; (80132cc <xTaskPriorityInherit+0xc4>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013228:	429a      	cmp	r2, r3
 801322a:	d241      	bcs.n	80132b0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	699b      	ldr	r3, [r3, #24]
 8013230:	2b00      	cmp	r3, #0
 8013232:	db06      	blt.n	8013242 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013234:	4b25      	ldr	r3, [pc, #148]	; (80132cc <xTaskPriorityInherit+0xc4>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801323a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	6959      	ldr	r1, [r3, #20]
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801324a:	4613      	mov	r3, r2
 801324c:	009b      	lsls	r3, r3, #2
 801324e:	4413      	add	r3, r2
 8013250:	009b      	lsls	r3, r3, #2
 8013252:	4a1f      	ldr	r2, [pc, #124]	; (80132d0 <xTaskPriorityInherit+0xc8>)
 8013254:	4413      	add	r3, r2
 8013256:	4299      	cmp	r1, r3
 8013258:	d122      	bne.n	80132a0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	3304      	adds	r3, #4
 801325e:	4618      	mov	r0, r3
 8013260:	f7fd ff48 	bl	80110f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013264:	4b19      	ldr	r3, [pc, #100]	; (80132cc <xTaskPriorityInherit+0xc4>)
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013272:	4b18      	ldr	r3, [pc, #96]	; (80132d4 <xTaskPriorityInherit+0xcc>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	429a      	cmp	r2, r3
 8013278:	d903      	bls.n	8013282 <xTaskPriorityInherit+0x7a>
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801327e:	4a15      	ldr	r2, [pc, #84]	; (80132d4 <xTaskPriorityInherit+0xcc>)
 8013280:	6013      	str	r3, [r2, #0]
 8013282:	68bb      	ldr	r3, [r7, #8]
 8013284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013286:	4613      	mov	r3, r2
 8013288:	009b      	lsls	r3, r3, #2
 801328a:	4413      	add	r3, r2
 801328c:	009b      	lsls	r3, r3, #2
 801328e:	4a10      	ldr	r2, [pc, #64]	; (80132d0 <xTaskPriorityInherit+0xc8>)
 8013290:	441a      	add	r2, r3
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	3304      	adds	r3, #4
 8013296:	4619      	mov	r1, r3
 8013298:	4610      	mov	r0, r2
 801329a:	f7fd fece 	bl	801103a <vListInsertEnd>
 801329e:	e004      	b.n	80132aa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80132a0:	4b0a      	ldr	r3, [pc, #40]	; (80132cc <xTaskPriorityInherit+0xc4>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80132aa:	2301      	movs	r3, #1
 80132ac:	60fb      	str	r3, [r7, #12]
 80132ae:	e008      	b.n	80132c2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80132b4:	4b05      	ldr	r3, [pc, #20]	; (80132cc <xTaskPriorityInherit+0xc4>)
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132ba:	429a      	cmp	r2, r3
 80132bc:	d201      	bcs.n	80132c2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80132be:	2301      	movs	r3, #1
 80132c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80132c2:	68fb      	ldr	r3, [r7, #12]
	}
 80132c4:	4618      	mov	r0, r3
 80132c6:	3710      	adds	r7, #16
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bd80      	pop	{r7, pc}
 80132cc:	20000920 	.word	0x20000920
 80132d0:	20000924 	.word	0x20000924
 80132d4:	20000dfc 	.word	0x20000dfc

080132d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b086      	sub	sp, #24
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80132e4:	2300      	movs	r3, #0
 80132e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d058      	beq.n	80133a0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80132ee:	4b2f      	ldr	r3, [pc, #188]	; (80133ac <xTaskPriorityDisinherit+0xd4>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	693a      	ldr	r2, [r7, #16]
 80132f4:	429a      	cmp	r2, r3
 80132f6:	d00b      	beq.n	8013310 <xTaskPriorityDisinherit+0x38>
 80132f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132fc:	b672      	cpsid	i
 80132fe:	f383 8811 	msr	BASEPRI, r3
 8013302:	f3bf 8f6f 	isb	sy
 8013306:	f3bf 8f4f 	dsb	sy
 801330a:	b662      	cpsie	i
 801330c:	60fb      	str	r3, [r7, #12]
 801330e:	e7fe      	b.n	801330e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8013310:	693b      	ldr	r3, [r7, #16]
 8013312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013314:	2b00      	cmp	r3, #0
 8013316:	d10b      	bne.n	8013330 <xTaskPriorityDisinherit+0x58>
 8013318:	f04f 0350 	mov.w	r3, #80	; 0x50
 801331c:	b672      	cpsid	i
 801331e:	f383 8811 	msr	BASEPRI, r3
 8013322:	f3bf 8f6f 	isb	sy
 8013326:	f3bf 8f4f 	dsb	sy
 801332a:	b662      	cpsie	i
 801332c:	60bb      	str	r3, [r7, #8]
 801332e:	e7fe      	b.n	801332e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013334:	1e5a      	subs	r2, r3, #1
 8013336:	693b      	ldr	r3, [r7, #16]
 8013338:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801333a:	693b      	ldr	r3, [r7, #16]
 801333c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801333e:	693b      	ldr	r3, [r7, #16]
 8013340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013342:	429a      	cmp	r2, r3
 8013344:	d02c      	beq.n	80133a0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801334a:	2b00      	cmp	r3, #0
 801334c:	d128      	bne.n	80133a0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	3304      	adds	r3, #4
 8013352:	4618      	mov	r0, r3
 8013354:	f7fd fece 	bl	80110f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013358:	693b      	ldr	r3, [r7, #16]
 801335a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013364:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801336c:	693b      	ldr	r3, [r7, #16]
 801336e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013370:	4b0f      	ldr	r3, [pc, #60]	; (80133b0 <xTaskPriorityDisinherit+0xd8>)
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	429a      	cmp	r2, r3
 8013376:	d903      	bls.n	8013380 <xTaskPriorityDisinherit+0xa8>
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801337c:	4a0c      	ldr	r2, [pc, #48]	; (80133b0 <xTaskPriorityDisinherit+0xd8>)
 801337e:	6013      	str	r3, [r2, #0]
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013384:	4613      	mov	r3, r2
 8013386:	009b      	lsls	r3, r3, #2
 8013388:	4413      	add	r3, r2
 801338a:	009b      	lsls	r3, r3, #2
 801338c:	4a09      	ldr	r2, [pc, #36]	; (80133b4 <xTaskPriorityDisinherit+0xdc>)
 801338e:	441a      	add	r2, r3
 8013390:	693b      	ldr	r3, [r7, #16]
 8013392:	3304      	adds	r3, #4
 8013394:	4619      	mov	r1, r3
 8013396:	4610      	mov	r0, r2
 8013398:	f7fd fe4f 	bl	801103a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801339c:	2301      	movs	r3, #1
 801339e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80133a0:	697b      	ldr	r3, [r7, #20]
	}
 80133a2:	4618      	mov	r0, r3
 80133a4:	3718      	adds	r7, #24
 80133a6:	46bd      	mov	sp, r7
 80133a8:	bd80      	pop	{r7, pc}
 80133aa:	bf00      	nop
 80133ac:	20000920 	.word	0x20000920
 80133b0:	20000dfc 	.word	0x20000dfc
 80133b4:	20000924 	.word	0x20000924

080133b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b088      	sub	sp, #32
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80133c6:	2301      	movs	r3, #1
 80133c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d06c      	beq.n	80134aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80133d0:	69bb      	ldr	r3, [r7, #24]
 80133d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d10b      	bne.n	80133f0 <vTaskPriorityDisinheritAfterTimeout+0x38>
 80133d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133dc:	b672      	cpsid	i
 80133de:	f383 8811 	msr	BASEPRI, r3
 80133e2:	f3bf 8f6f 	isb	sy
 80133e6:	f3bf 8f4f 	dsb	sy
 80133ea:	b662      	cpsie	i
 80133ec:	60fb      	str	r3, [r7, #12]
 80133ee:	e7fe      	b.n	80133ee <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80133f0:	69bb      	ldr	r3, [r7, #24]
 80133f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133f4:	683a      	ldr	r2, [r7, #0]
 80133f6:	429a      	cmp	r2, r3
 80133f8:	d902      	bls.n	8013400 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	61fb      	str	r3, [r7, #28]
 80133fe:	e002      	b.n	8013406 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013400:	69bb      	ldr	r3, [r7, #24]
 8013402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013404:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013406:	69bb      	ldr	r3, [r7, #24]
 8013408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801340a:	69fa      	ldr	r2, [r7, #28]
 801340c:	429a      	cmp	r2, r3
 801340e:	d04c      	beq.n	80134aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013410:	69bb      	ldr	r3, [r7, #24]
 8013412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013414:	697a      	ldr	r2, [r7, #20]
 8013416:	429a      	cmp	r2, r3
 8013418:	d147      	bne.n	80134aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801341a:	4b26      	ldr	r3, [pc, #152]	; (80134b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	69ba      	ldr	r2, [r7, #24]
 8013420:	429a      	cmp	r2, r3
 8013422:	d10b      	bne.n	801343c <vTaskPriorityDisinheritAfterTimeout+0x84>
 8013424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013428:	b672      	cpsid	i
 801342a:	f383 8811 	msr	BASEPRI, r3
 801342e:	f3bf 8f6f 	isb	sy
 8013432:	f3bf 8f4f 	dsb	sy
 8013436:	b662      	cpsie	i
 8013438:	60bb      	str	r3, [r7, #8]
 801343a:	e7fe      	b.n	801343a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801343c:	69bb      	ldr	r3, [r7, #24]
 801343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013440:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013442:	69bb      	ldr	r3, [r7, #24]
 8013444:	69fa      	ldr	r2, [r7, #28]
 8013446:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013448:	69bb      	ldr	r3, [r7, #24]
 801344a:	699b      	ldr	r3, [r3, #24]
 801344c:	2b00      	cmp	r3, #0
 801344e:	db04      	blt.n	801345a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013450:	69fb      	ldr	r3, [r7, #28]
 8013452:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013456:	69bb      	ldr	r3, [r7, #24]
 8013458:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801345a:	69bb      	ldr	r3, [r7, #24]
 801345c:	6959      	ldr	r1, [r3, #20]
 801345e:	693a      	ldr	r2, [r7, #16]
 8013460:	4613      	mov	r3, r2
 8013462:	009b      	lsls	r3, r3, #2
 8013464:	4413      	add	r3, r2
 8013466:	009b      	lsls	r3, r3, #2
 8013468:	4a13      	ldr	r2, [pc, #76]	; (80134b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801346a:	4413      	add	r3, r2
 801346c:	4299      	cmp	r1, r3
 801346e:	d11c      	bne.n	80134aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013470:	69bb      	ldr	r3, [r7, #24]
 8013472:	3304      	adds	r3, #4
 8013474:	4618      	mov	r0, r3
 8013476:	f7fd fe3d 	bl	80110f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801347a:	69bb      	ldr	r3, [r7, #24]
 801347c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801347e:	4b0f      	ldr	r3, [pc, #60]	; (80134bc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	429a      	cmp	r2, r3
 8013484:	d903      	bls.n	801348e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8013486:	69bb      	ldr	r3, [r7, #24]
 8013488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801348a:	4a0c      	ldr	r2, [pc, #48]	; (80134bc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801348c:	6013      	str	r3, [r2, #0]
 801348e:	69bb      	ldr	r3, [r7, #24]
 8013490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013492:	4613      	mov	r3, r2
 8013494:	009b      	lsls	r3, r3, #2
 8013496:	4413      	add	r3, r2
 8013498:	009b      	lsls	r3, r3, #2
 801349a:	4a07      	ldr	r2, [pc, #28]	; (80134b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801349c:	441a      	add	r2, r3
 801349e:	69bb      	ldr	r3, [r7, #24]
 80134a0:	3304      	adds	r3, #4
 80134a2:	4619      	mov	r1, r3
 80134a4:	4610      	mov	r0, r2
 80134a6:	f7fd fdc8 	bl	801103a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80134aa:	bf00      	nop
 80134ac:	3720      	adds	r7, #32
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}
 80134b2:	bf00      	nop
 80134b4:	20000920 	.word	0x20000920
 80134b8:	20000924 	.word	0x20000924
 80134bc:	20000dfc 	.word	0x20000dfc

080134c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80134c0:	b480      	push	{r7}
 80134c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80134c4:	4b07      	ldr	r3, [pc, #28]	; (80134e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d004      	beq.n	80134d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80134cc:	4b05      	ldr	r3, [pc, #20]	; (80134e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80134d2:	3201      	adds	r2, #1
 80134d4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80134d6:	4b03      	ldr	r3, [pc, #12]	; (80134e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80134d8:	681b      	ldr	r3, [r3, #0]
	}
 80134da:	4618      	mov	r0, r3
 80134dc:	46bd      	mov	sp, r7
 80134de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e2:	4770      	bx	lr
 80134e4:	20000920 	.word	0x20000920

080134e8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b084      	sub	sp, #16
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
 80134f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80134f2:	4b21      	ldr	r3, [pc, #132]	; (8013578 <prvAddCurrentTaskToDelayedList+0x90>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134f8:	4b20      	ldr	r3, [pc, #128]	; (801357c <prvAddCurrentTaskToDelayedList+0x94>)
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	3304      	adds	r3, #4
 80134fe:	4618      	mov	r0, r3
 8013500:	f7fd fdf8 	bl	80110f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801350a:	d10a      	bne.n	8013522 <prvAddCurrentTaskToDelayedList+0x3a>
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d007      	beq.n	8013522 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013512:	4b1a      	ldr	r3, [pc, #104]	; (801357c <prvAddCurrentTaskToDelayedList+0x94>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	3304      	adds	r3, #4
 8013518:	4619      	mov	r1, r3
 801351a:	4819      	ldr	r0, [pc, #100]	; (8013580 <prvAddCurrentTaskToDelayedList+0x98>)
 801351c:	f7fd fd8d 	bl	801103a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013520:	e026      	b.n	8013570 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013522:	68fa      	ldr	r2, [r7, #12]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	4413      	add	r3, r2
 8013528:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801352a:	4b14      	ldr	r3, [pc, #80]	; (801357c <prvAddCurrentTaskToDelayedList+0x94>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	68ba      	ldr	r2, [r7, #8]
 8013530:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013532:	68ba      	ldr	r2, [r7, #8]
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	429a      	cmp	r2, r3
 8013538:	d209      	bcs.n	801354e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801353a:	4b12      	ldr	r3, [pc, #72]	; (8013584 <prvAddCurrentTaskToDelayedList+0x9c>)
 801353c:	681a      	ldr	r2, [r3, #0]
 801353e:	4b0f      	ldr	r3, [pc, #60]	; (801357c <prvAddCurrentTaskToDelayedList+0x94>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	3304      	adds	r3, #4
 8013544:	4619      	mov	r1, r3
 8013546:	4610      	mov	r0, r2
 8013548:	f7fd fd9b 	bl	8011082 <vListInsert>
}
 801354c:	e010      	b.n	8013570 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801354e:	4b0e      	ldr	r3, [pc, #56]	; (8013588 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013550:	681a      	ldr	r2, [r3, #0]
 8013552:	4b0a      	ldr	r3, [pc, #40]	; (801357c <prvAddCurrentTaskToDelayedList+0x94>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	3304      	adds	r3, #4
 8013558:	4619      	mov	r1, r3
 801355a:	4610      	mov	r0, r2
 801355c:	f7fd fd91 	bl	8011082 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013560:	4b0a      	ldr	r3, [pc, #40]	; (801358c <prvAddCurrentTaskToDelayedList+0xa4>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	68ba      	ldr	r2, [r7, #8]
 8013566:	429a      	cmp	r2, r3
 8013568:	d202      	bcs.n	8013570 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801356a:	4a08      	ldr	r2, [pc, #32]	; (801358c <prvAddCurrentTaskToDelayedList+0xa4>)
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	6013      	str	r3, [r2, #0]
}
 8013570:	bf00      	nop
 8013572:	3710      	adds	r7, #16
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}
 8013578:	20000df8 	.word	0x20000df8
 801357c:	20000920 	.word	0x20000920
 8013580:	20000de0 	.word	0x20000de0
 8013584:	20000db0 	.word	0x20000db0
 8013588:	20000dac 	.word	0x20000dac
 801358c:	20000e14 	.word	0x20000e14

08013590 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b08a      	sub	sp, #40	; 0x28
 8013594:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013596:	2300      	movs	r3, #0
 8013598:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801359a:	f000 fb0d 	bl	8013bb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801359e:	4b1d      	ldr	r3, [pc, #116]	; (8013614 <xTimerCreateTimerTask+0x84>)
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d021      	beq.n	80135ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80135a6:	2300      	movs	r3, #0
 80135a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80135aa:	2300      	movs	r3, #0
 80135ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80135ae:	1d3a      	adds	r2, r7, #4
 80135b0:	f107 0108 	add.w	r1, r7, #8
 80135b4:	f107 030c 	add.w	r3, r7, #12
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7fd fcf7 	bl	8010fac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80135be:	6879      	ldr	r1, [r7, #4]
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	68fa      	ldr	r2, [r7, #12]
 80135c4:	9202      	str	r2, [sp, #8]
 80135c6:	9301      	str	r3, [sp, #4]
 80135c8:	2302      	movs	r3, #2
 80135ca:	9300      	str	r3, [sp, #0]
 80135cc:	2300      	movs	r3, #0
 80135ce:	460a      	mov	r2, r1
 80135d0:	4911      	ldr	r1, [pc, #68]	; (8013618 <xTimerCreateTimerTask+0x88>)
 80135d2:	4812      	ldr	r0, [pc, #72]	; (801361c <xTimerCreateTimerTask+0x8c>)
 80135d4:	f7fe fea2 	bl	801231c <xTaskCreateStatic>
 80135d8:	4602      	mov	r2, r0
 80135da:	4b11      	ldr	r3, [pc, #68]	; (8013620 <xTimerCreateTimerTask+0x90>)
 80135dc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80135de:	4b10      	ldr	r3, [pc, #64]	; (8013620 <xTimerCreateTimerTask+0x90>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d001      	beq.n	80135ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80135e6:	2301      	movs	r3, #1
 80135e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d10b      	bne.n	8013608 <xTimerCreateTimerTask+0x78>
 80135f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135f4:	b672      	cpsid	i
 80135f6:	f383 8811 	msr	BASEPRI, r3
 80135fa:	f3bf 8f6f 	isb	sy
 80135fe:	f3bf 8f4f 	dsb	sy
 8013602:	b662      	cpsie	i
 8013604:	613b      	str	r3, [r7, #16]
 8013606:	e7fe      	b.n	8013606 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8013608:	697b      	ldr	r3, [r7, #20]
}
 801360a:	4618      	mov	r0, r3
 801360c:	3718      	adds	r7, #24
 801360e:	46bd      	mov	sp, r7
 8013610:	bd80      	pop	{r7, pc}
 8013612:	bf00      	nop
 8013614:	20000e50 	.word	0x20000e50
 8013618:	08022588 	.word	0x08022588
 801361c:	0801375d 	.word	0x0801375d
 8013620:	20000e54 	.word	0x20000e54

08013624 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b08a      	sub	sp, #40	; 0x28
 8013628:	af00      	add	r7, sp, #0
 801362a:	60f8      	str	r0, [r7, #12]
 801362c:	60b9      	str	r1, [r7, #8]
 801362e:	607a      	str	r2, [r7, #4]
 8013630:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013632:	2300      	movs	r3, #0
 8013634:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d10b      	bne.n	8013654 <xTimerGenericCommand+0x30>
 801363c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013640:	b672      	cpsid	i
 8013642:	f383 8811 	msr	BASEPRI, r3
 8013646:	f3bf 8f6f 	isb	sy
 801364a:	f3bf 8f4f 	dsb	sy
 801364e:	b662      	cpsie	i
 8013650:	623b      	str	r3, [r7, #32]
 8013652:	e7fe      	b.n	8013652 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013654:	4b19      	ldr	r3, [pc, #100]	; (80136bc <xTimerGenericCommand+0x98>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d02a      	beq.n	80136b2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	2b05      	cmp	r3, #5
 801366c:	dc18      	bgt.n	80136a0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801366e:	f7ff fdad 	bl	80131cc <xTaskGetSchedulerState>
 8013672:	4603      	mov	r3, r0
 8013674:	2b02      	cmp	r3, #2
 8013676:	d109      	bne.n	801368c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013678:	4b10      	ldr	r3, [pc, #64]	; (80136bc <xTimerGenericCommand+0x98>)
 801367a:	6818      	ldr	r0, [r3, #0]
 801367c:	f107 0110 	add.w	r1, r7, #16
 8013680:	2300      	movs	r3, #0
 8013682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013684:	f7fd ffd2 	bl	801162c <xQueueGenericSend>
 8013688:	6278      	str	r0, [r7, #36]	; 0x24
 801368a:	e012      	b.n	80136b2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801368c:	4b0b      	ldr	r3, [pc, #44]	; (80136bc <xTimerGenericCommand+0x98>)
 801368e:	6818      	ldr	r0, [r3, #0]
 8013690:	f107 0110 	add.w	r1, r7, #16
 8013694:	2300      	movs	r3, #0
 8013696:	2200      	movs	r2, #0
 8013698:	f7fd ffc8 	bl	801162c <xQueueGenericSend>
 801369c:	6278      	str	r0, [r7, #36]	; 0x24
 801369e:	e008      	b.n	80136b2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80136a0:	4b06      	ldr	r3, [pc, #24]	; (80136bc <xTimerGenericCommand+0x98>)
 80136a2:	6818      	ldr	r0, [r3, #0]
 80136a4:	f107 0110 	add.w	r1, r7, #16
 80136a8:	2300      	movs	r3, #0
 80136aa:	683a      	ldr	r2, [r7, #0]
 80136ac:	f7fe f8c0 	bl	8011830 <xQueueGenericSendFromISR>
 80136b0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80136b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3728      	adds	r7, #40	; 0x28
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}
 80136bc:	20000e50 	.word	0x20000e50

080136c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b088      	sub	sp, #32
 80136c4:	af02      	add	r7, sp, #8
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136ca:	4b23      	ldr	r3, [pc, #140]	; (8013758 <prvProcessExpiredTimer+0x98>)
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	68db      	ldr	r3, [r3, #12]
 80136d0:	68db      	ldr	r3, [r3, #12]
 80136d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80136d4:	697b      	ldr	r3, [r7, #20]
 80136d6:	3304      	adds	r3, #4
 80136d8:	4618      	mov	r0, r3
 80136da:	f7fd fd0b 	bl	80110f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80136e4:	f003 0304 	and.w	r3, r3, #4
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d023      	beq.n	8013734 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80136ec:	697b      	ldr	r3, [r7, #20]
 80136ee:	699a      	ldr	r2, [r3, #24]
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	18d1      	adds	r1, r2, r3
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	683a      	ldr	r2, [r7, #0]
 80136f8:	6978      	ldr	r0, [r7, #20]
 80136fa:	f000 f8d3 	bl	80138a4 <prvInsertTimerInActiveList>
 80136fe:	4603      	mov	r3, r0
 8013700:	2b00      	cmp	r3, #0
 8013702:	d020      	beq.n	8013746 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013704:	2300      	movs	r3, #0
 8013706:	9300      	str	r3, [sp, #0]
 8013708:	2300      	movs	r3, #0
 801370a:	687a      	ldr	r2, [r7, #4]
 801370c:	2100      	movs	r1, #0
 801370e:	6978      	ldr	r0, [r7, #20]
 8013710:	f7ff ff88 	bl	8013624 <xTimerGenericCommand>
 8013714:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013716:	693b      	ldr	r3, [r7, #16]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d114      	bne.n	8013746 <prvProcessExpiredTimer+0x86>
 801371c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013720:	b672      	cpsid	i
 8013722:	f383 8811 	msr	BASEPRI, r3
 8013726:	f3bf 8f6f 	isb	sy
 801372a:	f3bf 8f4f 	dsb	sy
 801372e:	b662      	cpsie	i
 8013730:	60fb      	str	r3, [r7, #12]
 8013732:	e7fe      	b.n	8013732 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013734:	697b      	ldr	r3, [r7, #20]
 8013736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801373a:	f023 0301 	bic.w	r3, r3, #1
 801373e:	b2da      	uxtb	r2, r3
 8013740:	697b      	ldr	r3, [r7, #20]
 8013742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	6a1b      	ldr	r3, [r3, #32]
 801374a:	6978      	ldr	r0, [r7, #20]
 801374c:	4798      	blx	r3
}
 801374e:	bf00      	nop
 8013750:	3718      	adds	r7, #24
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}
 8013756:	bf00      	nop
 8013758:	20000e48 	.word	0x20000e48

0801375c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b084      	sub	sp, #16
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013764:	f107 0308 	add.w	r3, r7, #8
 8013768:	4618      	mov	r0, r3
 801376a:	f000 f857 	bl	801381c <prvGetNextExpireTime>
 801376e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013770:	68bb      	ldr	r3, [r7, #8]
 8013772:	4619      	mov	r1, r3
 8013774:	68f8      	ldr	r0, [r7, #12]
 8013776:	f000 f803 	bl	8013780 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801377a:	f000 f8d5 	bl	8013928 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801377e:	e7f1      	b.n	8013764 <prvTimerTask+0x8>

08013780 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b084      	sub	sp, #16
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
 8013788:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801378a:	f7ff f8e9 	bl	8012960 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801378e:	f107 0308 	add.w	r3, r7, #8
 8013792:	4618      	mov	r0, r3
 8013794:	f000 f866 	bl	8013864 <prvSampleTimeNow>
 8013798:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d130      	bne.n	8013802 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d10a      	bne.n	80137bc <prvProcessTimerOrBlockTask+0x3c>
 80137a6:	687a      	ldr	r2, [r7, #4]
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d806      	bhi.n	80137bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80137ae:	f7ff f8e5 	bl	801297c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80137b2:	68f9      	ldr	r1, [r7, #12]
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f7ff ff83 	bl	80136c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80137ba:	e024      	b.n	8013806 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d008      	beq.n	80137d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80137c2:	4b13      	ldr	r3, [pc, #76]	; (8013810 <prvProcessTimerOrBlockTask+0x90>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d101      	bne.n	80137d0 <prvProcessTimerOrBlockTask+0x50>
 80137cc:	2301      	movs	r3, #1
 80137ce:	e000      	b.n	80137d2 <prvProcessTimerOrBlockTask+0x52>
 80137d0:	2300      	movs	r3, #0
 80137d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80137d4:	4b0f      	ldr	r3, [pc, #60]	; (8013814 <prvProcessTimerOrBlockTask+0x94>)
 80137d6:	6818      	ldr	r0, [r3, #0]
 80137d8:	687a      	ldr	r2, [r7, #4]
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	1ad3      	subs	r3, r2, r3
 80137de:	683a      	ldr	r2, [r7, #0]
 80137e0:	4619      	mov	r1, r3
 80137e2:	f7fe fd67 	bl	80122b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80137e6:	f7ff f8c9 	bl	801297c <xTaskResumeAll>
 80137ea:	4603      	mov	r3, r0
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d10a      	bne.n	8013806 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80137f0:	4b09      	ldr	r3, [pc, #36]	; (8013818 <prvProcessTimerOrBlockTask+0x98>)
 80137f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137f6:	601a      	str	r2, [r3, #0]
 80137f8:	f3bf 8f4f 	dsb	sy
 80137fc:	f3bf 8f6f 	isb	sy
}
 8013800:	e001      	b.n	8013806 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013802:	f7ff f8bb 	bl	801297c <xTaskResumeAll>
}
 8013806:	bf00      	nop
 8013808:	3710      	adds	r7, #16
 801380a:	46bd      	mov	sp, r7
 801380c:	bd80      	pop	{r7, pc}
 801380e:	bf00      	nop
 8013810:	20000e4c 	.word	0x20000e4c
 8013814:	20000e50 	.word	0x20000e50
 8013818:	e000ed04 	.word	0xe000ed04

0801381c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801381c:	b480      	push	{r7}
 801381e:	b085      	sub	sp, #20
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013824:	4b0e      	ldr	r3, [pc, #56]	; (8013860 <prvGetNextExpireTime+0x44>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d101      	bne.n	8013832 <prvGetNextExpireTime+0x16>
 801382e:	2201      	movs	r2, #1
 8013830:	e000      	b.n	8013834 <prvGetNextExpireTime+0x18>
 8013832:	2200      	movs	r2, #0
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d105      	bne.n	801384c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013840:	4b07      	ldr	r3, [pc, #28]	; (8013860 <prvGetNextExpireTime+0x44>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	68db      	ldr	r3, [r3, #12]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	60fb      	str	r3, [r7, #12]
 801384a:	e001      	b.n	8013850 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801384c:	2300      	movs	r3, #0
 801384e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013850:	68fb      	ldr	r3, [r7, #12]
}
 8013852:	4618      	mov	r0, r3
 8013854:	3714      	adds	r7, #20
 8013856:	46bd      	mov	sp, r7
 8013858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385c:	4770      	bx	lr
 801385e:	bf00      	nop
 8013860:	20000e48 	.word	0x20000e48

08013864 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b084      	sub	sp, #16
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801386c:	f7ff f924 	bl	8012ab8 <xTaskGetTickCount>
 8013870:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013872:	4b0b      	ldr	r3, [pc, #44]	; (80138a0 <prvSampleTimeNow+0x3c>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	68fa      	ldr	r2, [r7, #12]
 8013878:	429a      	cmp	r2, r3
 801387a:	d205      	bcs.n	8013888 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801387c:	f000 f936 	bl	8013aec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	2201      	movs	r2, #1
 8013884:	601a      	str	r2, [r3, #0]
 8013886:	e002      	b.n	801388e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	2200      	movs	r2, #0
 801388c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801388e:	4a04      	ldr	r2, [pc, #16]	; (80138a0 <prvSampleTimeNow+0x3c>)
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013894:	68fb      	ldr	r3, [r7, #12]
}
 8013896:	4618      	mov	r0, r3
 8013898:	3710      	adds	r7, #16
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}
 801389e:	bf00      	nop
 80138a0:	20000e58 	.word	0x20000e58

080138a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b086      	sub	sp, #24
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	60f8      	str	r0, [r7, #12]
 80138ac:	60b9      	str	r1, [r7, #8]
 80138ae:	607a      	str	r2, [r7, #4]
 80138b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80138b2:	2300      	movs	r3, #0
 80138b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	68ba      	ldr	r2, [r7, #8]
 80138ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	68fa      	ldr	r2, [r7, #12]
 80138c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80138c2:	68ba      	ldr	r2, [r7, #8]
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d812      	bhi.n	80138f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80138ca:	687a      	ldr	r2, [r7, #4]
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	1ad2      	subs	r2, r2, r3
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	699b      	ldr	r3, [r3, #24]
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d302      	bcc.n	80138de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80138d8:	2301      	movs	r3, #1
 80138da:	617b      	str	r3, [r7, #20]
 80138dc:	e01b      	b.n	8013916 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80138de:	4b10      	ldr	r3, [pc, #64]	; (8013920 <prvInsertTimerInActiveList+0x7c>)
 80138e0:	681a      	ldr	r2, [r3, #0]
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	3304      	adds	r3, #4
 80138e6:	4619      	mov	r1, r3
 80138e8:	4610      	mov	r0, r2
 80138ea:	f7fd fbca 	bl	8011082 <vListInsert>
 80138ee:	e012      	b.n	8013916 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80138f0:	687a      	ldr	r2, [r7, #4]
 80138f2:	683b      	ldr	r3, [r7, #0]
 80138f4:	429a      	cmp	r2, r3
 80138f6:	d206      	bcs.n	8013906 <prvInsertTimerInActiveList+0x62>
 80138f8:	68ba      	ldr	r2, [r7, #8]
 80138fa:	683b      	ldr	r3, [r7, #0]
 80138fc:	429a      	cmp	r2, r3
 80138fe:	d302      	bcc.n	8013906 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013900:	2301      	movs	r3, #1
 8013902:	617b      	str	r3, [r7, #20]
 8013904:	e007      	b.n	8013916 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013906:	4b07      	ldr	r3, [pc, #28]	; (8013924 <prvInsertTimerInActiveList+0x80>)
 8013908:	681a      	ldr	r2, [r3, #0]
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	3304      	adds	r3, #4
 801390e:	4619      	mov	r1, r3
 8013910:	4610      	mov	r0, r2
 8013912:	f7fd fbb6 	bl	8011082 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013916:	697b      	ldr	r3, [r7, #20]
}
 8013918:	4618      	mov	r0, r3
 801391a:	3718      	adds	r7, #24
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}
 8013920:	20000e4c 	.word	0x20000e4c
 8013924:	20000e48 	.word	0x20000e48

08013928 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b08e      	sub	sp, #56	; 0x38
 801392c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801392e:	e0cc      	b.n	8013aca <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	2b00      	cmp	r3, #0
 8013934:	da19      	bge.n	801396a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013936:	1d3b      	adds	r3, r7, #4
 8013938:	3304      	adds	r3, #4
 801393a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801393e:	2b00      	cmp	r3, #0
 8013940:	d10b      	bne.n	801395a <prvProcessReceivedCommands+0x32>
 8013942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013946:	b672      	cpsid	i
 8013948:	f383 8811 	msr	BASEPRI, r3
 801394c:	f3bf 8f6f 	isb	sy
 8013950:	f3bf 8f4f 	dsb	sy
 8013954:	b662      	cpsie	i
 8013956:	61fb      	str	r3, [r7, #28]
 8013958:	e7fe      	b.n	8013958 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013960:	6850      	ldr	r0, [r2, #4]
 8013962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013964:	6892      	ldr	r2, [r2, #8]
 8013966:	4611      	mov	r1, r2
 8013968:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2b00      	cmp	r3, #0
 801396e:	f2c0 80ab 	blt.w	8013ac8 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013978:	695b      	ldr	r3, [r3, #20]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d004      	beq.n	8013988 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801397e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013980:	3304      	adds	r3, #4
 8013982:	4618      	mov	r0, r3
 8013984:	f7fd fbb6 	bl	80110f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013988:	463b      	mov	r3, r7
 801398a:	4618      	mov	r0, r3
 801398c:	f7ff ff6a 	bl	8013864 <prvSampleTimeNow>
 8013990:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	2b09      	cmp	r3, #9
 8013996:	f200 8098 	bhi.w	8013aca <prvProcessReceivedCommands+0x1a2>
 801399a:	a201      	add	r2, pc, #4	; (adr r2, 80139a0 <prvProcessReceivedCommands+0x78>)
 801399c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139a0:	080139c9 	.word	0x080139c9
 80139a4:	080139c9 	.word	0x080139c9
 80139a8:	080139c9 	.word	0x080139c9
 80139ac:	08013a3f 	.word	0x08013a3f
 80139b0:	08013a53 	.word	0x08013a53
 80139b4:	08013a9f 	.word	0x08013a9f
 80139b8:	080139c9 	.word	0x080139c9
 80139bc:	080139c9 	.word	0x080139c9
 80139c0:	08013a3f 	.word	0x08013a3f
 80139c4:	08013a53 	.word	0x08013a53
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80139c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80139ce:	f043 0301 	orr.w	r3, r3, #1
 80139d2:	b2da      	uxtb	r2, r3
 80139d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80139da:	68ba      	ldr	r2, [r7, #8]
 80139dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139de:	699b      	ldr	r3, [r3, #24]
 80139e0:	18d1      	adds	r1, r2, r3
 80139e2:	68bb      	ldr	r3, [r7, #8]
 80139e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139e8:	f7ff ff5c 	bl	80138a4 <prvInsertTimerInActiveList>
 80139ec:	4603      	mov	r3, r0
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d06b      	beq.n	8013aca <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80139f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f4:	6a1b      	ldr	r3, [r3, #32]
 80139f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80139fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a00:	f003 0304 	and.w	r3, r3, #4
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d060      	beq.n	8013aca <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013a08:	68ba      	ldr	r2, [r7, #8]
 8013a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a0c:	699b      	ldr	r3, [r3, #24]
 8013a0e:	441a      	add	r2, r3
 8013a10:	2300      	movs	r3, #0
 8013a12:	9300      	str	r3, [sp, #0]
 8013a14:	2300      	movs	r3, #0
 8013a16:	2100      	movs	r1, #0
 8013a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a1a:	f7ff fe03 	bl	8013624 <xTimerGenericCommand>
 8013a1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013a20:	6a3b      	ldr	r3, [r7, #32]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d151      	bne.n	8013aca <prvProcessReceivedCommands+0x1a2>
 8013a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a2a:	b672      	cpsid	i
 8013a2c:	f383 8811 	msr	BASEPRI, r3
 8013a30:	f3bf 8f6f 	isb	sy
 8013a34:	f3bf 8f4f 	dsb	sy
 8013a38:	b662      	cpsie	i
 8013a3a:	61bb      	str	r3, [r7, #24]
 8013a3c:	e7fe      	b.n	8013a3c <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a44:	f023 0301 	bic.w	r3, r3, #1
 8013a48:	b2da      	uxtb	r2, r3
 8013a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013a50:	e03b      	b.n	8013aca <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a58:	f043 0301 	orr.w	r3, r3, #1
 8013a5c:	b2da      	uxtb	r2, r3
 8013a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013a64:	68ba      	ldr	r2, [r7, #8]
 8013a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a68:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a6c:	699b      	ldr	r3, [r3, #24]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d10b      	bne.n	8013a8a <prvProcessReceivedCommands+0x162>
 8013a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a76:	b672      	cpsid	i
 8013a78:	f383 8811 	msr	BASEPRI, r3
 8013a7c:	f3bf 8f6f 	isb	sy
 8013a80:	f3bf 8f4f 	dsb	sy
 8013a84:	b662      	cpsie	i
 8013a86:	617b      	str	r3, [r7, #20]
 8013a88:	e7fe      	b.n	8013a88 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a8c:	699a      	ldr	r2, [r3, #24]
 8013a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a90:	18d1      	adds	r1, r2, r3
 8013a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a98:	f7ff ff04 	bl	80138a4 <prvInsertTimerInActiveList>
					break;
 8013a9c:	e015      	b.n	8013aca <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013aa4:	f003 0302 	and.w	r3, r3, #2
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d103      	bne.n	8013ab4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8013aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013aae:	f000 fbb9 	bl	8014224 <vPortFree>
 8013ab2:	e00a      	b.n	8013aca <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013aba:	f023 0301 	bic.w	r3, r3, #1
 8013abe:	b2da      	uxtb	r2, r3
 8013ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013ac6:	e000      	b.n	8013aca <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013ac8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013aca:	4b07      	ldr	r3, [pc, #28]	; (8013ae8 <prvProcessReceivedCommands+0x1c0>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	1d39      	adds	r1, r7, #4
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f7fd ffda 	bl	8011a8c <xQueueReceive>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	f47f af28 	bne.w	8013930 <prvProcessReceivedCommands+0x8>
	}
}
 8013ae0:	bf00      	nop
 8013ae2:	3730      	adds	r7, #48	; 0x30
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	bd80      	pop	{r7, pc}
 8013ae8:	20000e50 	.word	0x20000e50

08013aec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b088      	sub	sp, #32
 8013af0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013af2:	e049      	b.n	8013b88 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013af4:	4b2e      	ldr	r3, [pc, #184]	; (8013bb0 <prvSwitchTimerLists+0xc4>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	68db      	ldr	r3, [r3, #12]
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013afe:	4b2c      	ldr	r3, [pc, #176]	; (8013bb0 <prvSwitchTimerLists+0xc4>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	68db      	ldr	r3, [r3, #12]
 8013b04:	68db      	ldr	r3, [r3, #12]
 8013b06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	3304      	adds	r3, #4
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7fd faf1 	bl	80110f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	6a1b      	ldr	r3, [r3, #32]
 8013b16:	68f8      	ldr	r0, [r7, #12]
 8013b18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b20:	f003 0304 	and.w	r3, r3, #4
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d02f      	beq.n	8013b88 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	699b      	ldr	r3, [r3, #24]
 8013b2c:	693a      	ldr	r2, [r7, #16]
 8013b2e:	4413      	add	r3, r2
 8013b30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013b32:	68ba      	ldr	r2, [r7, #8]
 8013b34:	693b      	ldr	r3, [r7, #16]
 8013b36:	429a      	cmp	r2, r3
 8013b38:	d90e      	bls.n	8013b58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	68ba      	ldr	r2, [r7, #8]
 8013b3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	68fa      	ldr	r2, [r7, #12]
 8013b44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013b46:	4b1a      	ldr	r3, [pc, #104]	; (8013bb0 <prvSwitchTimerLists+0xc4>)
 8013b48:	681a      	ldr	r2, [r3, #0]
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	3304      	adds	r3, #4
 8013b4e:	4619      	mov	r1, r3
 8013b50:	4610      	mov	r0, r2
 8013b52:	f7fd fa96 	bl	8011082 <vListInsert>
 8013b56:	e017      	b.n	8013b88 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013b58:	2300      	movs	r3, #0
 8013b5a:	9300      	str	r3, [sp, #0]
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	693a      	ldr	r2, [r7, #16]
 8013b60:	2100      	movs	r1, #0
 8013b62:	68f8      	ldr	r0, [r7, #12]
 8013b64:	f7ff fd5e 	bl	8013624 <xTimerGenericCommand>
 8013b68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d10b      	bne.n	8013b88 <prvSwitchTimerLists+0x9c>
 8013b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b74:	b672      	cpsid	i
 8013b76:	f383 8811 	msr	BASEPRI, r3
 8013b7a:	f3bf 8f6f 	isb	sy
 8013b7e:	f3bf 8f4f 	dsb	sy
 8013b82:	b662      	cpsie	i
 8013b84:	603b      	str	r3, [r7, #0]
 8013b86:	e7fe      	b.n	8013b86 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013b88:	4b09      	ldr	r3, [pc, #36]	; (8013bb0 <prvSwitchTimerLists+0xc4>)
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d1b0      	bne.n	8013af4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013b92:	4b07      	ldr	r3, [pc, #28]	; (8013bb0 <prvSwitchTimerLists+0xc4>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013b98:	4b06      	ldr	r3, [pc, #24]	; (8013bb4 <prvSwitchTimerLists+0xc8>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	4a04      	ldr	r2, [pc, #16]	; (8013bb0 <prvSwitchTimerLists+0xc4>)
 8013b9e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013ba0:	4a04      	ldr	r2, [pc, #16]	; (8013bb4 <prvSwitchTimerLists+0xc8>)
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	6013      	str	r3, [r2, #0]
}
 8013ba6:	bf00      	nop
 8013ba8:	3718      	adds	r7, #24
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bd80      	pop	{r7, pc}
 8013bae:	bf00      	nop
 8013bb0:	20000e48 	.word	0x20000e48
 8013bb4:	20000e4c 	.word	0x20000e4c

08013bb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b082      	sub	sp, #8
 8013bbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013bbe:	f000 f943 	bl	8013e48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013bc2:	4b15      	ldr	r3, [pc, #84]	; (8013c18 <prvCheckForValidListAndQueue+0x60>)
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d120      	bne.n	8013c0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013bca:	4814      	ldr	r0, [pc, #80]	; (8013c1c <prvCheckForValidListAndQueue+0x64>)
 8013bcc:	f7fd fa08 	bl	8010fe0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013bd0:	4813      	ldr	r0, [pc, #76]	; (8013c20 <prvCheckForValidListAndQueue+0x68>)
 8013bd2:	f7fd fa05 	bl	8010fe0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013bd6:	4b13      	ldr	r3, [pc, #76]	; (8013c24 <prvCheckForValidListAndQueue+0x6c>)
 8013bd8:	4a10      	ldr	r2, [pc, #64]	; (8013c1c <prvCheckForValidListAndQueue+0x64>)
 8013bda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013bdc:	4b12      	ldr	r3, [pc, #72]	; (8013c28 <prvCheckForValidListAndQueue+0x70>)
 8013bde:	4a10      	ldr	r2, [pc, #64]	; (8013c20 <prvCheckForValidListAndQueue+0x68>)
 8013be0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013be2:	2300      	movs	r3, #0
 8013be4:	9300      	str	r3, [sp, #0]
 8013be6:	4b11      	ldr	r3, [pc, #68]	; (8013c2c <prvCheckForValidListAndQueue+0x74>)
 8013be8:	4a11      	ldr	r2, [pc, #68]	; (8013c30 <prvCheckForValidListAndQueue+0x78>)
 8013bea:	2110      	movs	r1, #16
 8013bec:	200a      	movs	r0, #10
 8013bee:	f7fd fb15 	bl	801121c <xQueueGenericCreateStatic>
 8013bf2:	4602      	mov	r2, r0
 8013bf4:	4b08      	ldr	r3, [pc, #32]	; (8013c18 <prvCheckForValidListAndQueue+0x60>)
 8013bf6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013bf8:	4b07      	ldr	r3, [pc, #28]	; (8013c18 <prvCheckForValidListAndQueue+0x60>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d005      	beq.n	8013c0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013c00:	4b05      	ldr	r3, [pc, #20]	; (8013c18 <prvCheckForValidListAndQueue+0x60>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	490b      	ldr	r1, [pc, #44]	; (8013c34 <prvCheckForValidListAndQueue+0x7c>)
 8013c06:	4618      	mov	r0, r3
 8013c08:	f7fe fb02 	bl	8012210 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013c0c:	f000 f94e 	bl	8013eac <vPortExitCritical>
}
 8013c10:	bf00      	nop
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}
 8013c16:	bf00      	nop
 8013c18:	20000e50 	.word	0x20000e50
 8013c1c:	20000e20 	.word	0x20000e20
 8013c20:	20000e34 	.word	0x20000e34
 8013c24:	20000e48 	.word	0x20000e48
 8013c28:	20000e4c 	.word	0x20000e4c
 8013c2c:	20000efc 	.word	0x20000efc
 8013c30:	20000e5c 	.word	0x20000e5c
 8013c34:	08022590 	.word	0x08022590

08013c38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013c38:	b480      	push	{r7}
 8013c3a:	b085      	sub	sp, #20
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	60f8      	str	r0, [r7, #12]
 8013c40:	60b9      	str	r1, [r7, #8]
 8013c42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	3b04      	subs	r3, #4
 8013c48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	3b04      	subs	r3, #4
 8013c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	f023 0201 	bic.w	r2, r3, #1
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	3b04      	subs	r3, #4
 8013c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013c68:	4a0c      	ldr	r2, [pc, #48]	; (8013c9c <pxPortInitialiseStack+0x64>)
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	3b14      	subs	r3, #20
 8013c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013c74:	687a      	ldr	r2, [r7, #4]
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	3b04      	subs	r3, #4
 8013c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	f06f 0202 	mvn.w	r2, #2
 8013c86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	3b20      	subs	r3, #32
 8013c8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
}
 8013c90:	4618      	mov	r0, r3
 8013c92:	3714      	adds	r7, #20
 8013c94:	46bd      	mov	sp, r7
 8013c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9a:	4770      	bx	lr
 8013c9c:	08013ca1 	.word	0x08013ca1

08013ca0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013ca0:	b480      	push	{r7}
 8013ca2:	b085      	sub	sp, #20
 8013ca4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013caa:	4b13      	ldr	r3, [pc, #76]	; (8013cf8 <prvTaskExitError+0x58>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013cb2:	d00b      	beq.n	8013ccc <prvTaskExitError+0x2c>
 8013cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb8:	b672      	cpsid	i
 8013cba:	f383 8811 	msr	BASEPRI, r3
 8013cbe:	f3bf 8f6f 	isb	sy
 8013cc2:	f3bf 8f4f 	dsb	sy
 8013cc6:	b662      	cpsie	i
 8013cc8:	60fb      	str	r3, [r7, #12]
 8013cca:	e7fe      	b.n	8013cca <prvTaskExitError+0x2a>
 8013ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cd0:	b672      	cpsid	i
 8013cd2:	f383 8811 	msr	BASEPRI, r3
 8013cd6:	f3bf 8f6f 	isb	sy
 8013cda:	f3bf 8f4f 	dsb	sy
 8013cde:	b662      	cpsie	i
 8013ce0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013ce2:	bf00      	nop
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d0fc      	beq.n	8013ce4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013cea:	bf00      	nop
 8013cec:	3714      	adds	r7, #20
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf4:	4770      	bx	lr
 8013cf6:	bf00      	nop
 8013cf8:	20000030 	.word	0x20000030
 8013cfc:	00000000 	.word	0x00000000

08013d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013d00:	4b07      	ldr	r3, [pc, #28]	; (8013d20 <pxCurrentTCBConst2>)
 8013d02:	6819      	ldr	r1, [r3, #0]
 8013d04:	6808      	ldr	r0, [r1, #0]
 8013d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d0a:	f380 8809 	msr	PSP, r0
 8013d0e:	f3bf 8f6f 	isb	sy
 8013d12:	f04f 0000 	mov.w	r0, #0
 8013d16:	f380 8811 	msr	BASEPRI, r0
 8013d1a:	4770      	bx	lr
 8013d1c:	f3af 8000 	nop.w

08013d20 <pxCurrentTCBConst2>:
 8013d20:	20000920 	.word	0x20000920
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013d24:	bf00      	nop
 8013d26:	bf00      	nop

08013d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013d28:	4808      	ldr	r0, [pc, #32]	; (8013d4c <prvPortStartFirstTask+0x24>)
 8013d2a:	6800      	ldr	r0, [r0, #0]
 8013d2c:	6800      	ldr	r0, [r0, #0]
 8013d2e:	f380 8808 	msr	MSP, r0
 8013d32:	f04f 0000 	mov.w	r0, #0
 8013d36:	f380 8814 	msr	CONTROL, r0
 8013d3a:	b662      	cpsie	i
 8013d3c:	b661      	cpsie	f
 8013d3e:	f3bf 8f4f 	dsb	sy
 8013d42:	f3bf 8f6f 	isb	sy
 8013d46:	df00      	svc	0
 8013d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013d4a:	bf00      	nop
 8013d4c:	e000ed08 	.word	0xe000ed08

08013d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b084      	sub	sp, #16
 8013d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013d56:	4b36      	ldr	r3, [pc, #216]	; (8013e30 <xPortStartScheduler+0xe0>)
 8013d58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	781b      	ldrb	r3, [r3, #0]
 8013d5e:	b2db      	uxtb	r3, r3
 8013d60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	22ff      	movs	r2, #255	; 0xff
 8013d66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	781b      	ldrb	r3, [r3, #0]
 8013d6c:	b2db      	uxtb	r3, r3
 8013d6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013d70:	78fb      	ldrb	r3, [r7, #3]
 8013d72:	b2db      	uxtb	r3, r3
 8013d74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013d78:	b2da      	uxtb	r2, r3
 8013d7a:	4b2e      	ldr	r3, [pc, #184]	; (8013e34 <xPortStartScheduler+0xe4>)
 8013d7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013d7e:	4b2e      	ldr	r3, [pc, #184]	; (8013e38 <xPortStartScheduler+0xe8>)
 8013d80:	2207      	movs	r2, #7
 8013d82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013d84:	e009      	b.n	8013d9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013d86:	4b2c      	ldr	r3, [pc, #176]	; (8013e38 <xPortStartScheduler+0xe8>)
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	3b01      	subs	r3, #1
 8013d8c:	4a2a      	ldr	r2, [pc, #168]	; (8013e38 <xPortStartScheduler+0xe8>)
 8013d8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013d90:	78fb      	ldrb	r3, [r7, #3]
 8013d92:	b2db      	uxtb	r3, r3
 8013d94:	005b      	lsls	r3, r3, #1
 8013d96:	b2db      	uxtb	r3, r3
 8013d98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013d9a:	78fb      	ldrb	r3, [r7, #3]
 8013d9c:	b2db      	uxtb	r3, r3
 8013d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013da2:	2b80      	cmp	r3, #128	; 0x80
 8013da4:	d0ef      	beq.n	8013d86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013da6:	4b24      	ldr	r3, [pc, #144]	; (8013e38 <xPortStartScheduler+0xe8>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	f1c3 0307 	rsb	r3, r3, #7
 8013dae:	2b04      	cmp	r3, #4
 8013db0:	d00b      	beq.n	8013dca <xPortStartScheduler+0x7a>
 8013db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013db6:	b672      	cpsid	i
 8013db8:	f383 8811 	msr	BASEPRI, r3
 8013dbc:	f3bf 8f6f 	isb	sy
 8013dc0:	f3bf 8f4f 	dsb	sy
 8013dc4:	b662      	cpsie	i
 8013dc6:	60bb      	str	r3, [r7, #8]
 8013dc8:	e7fe      	b.n	8013dc8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013dca:	4b1b      	ldr	r3, [pc, #108]	; (8013e38 <xPortStartScheduler+0xe8>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	021b      	lsls	r3, r3, #8
 8013dd0:	4a19      	ldr	r2, [pc, #100]	; (8013e38 <xPortStartScheduler+0xe8>)
 8013dd2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013dd4:	4b18      	ldr	r3, [pc, #96]	; (8013e38 <xPortStartScheduler+0xe8>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013ddc:	4a16      	ldr	r2, [pc, #88]	; (8013e38 <xPortStartScheduler+0xe8>)
 8013dde:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	b2da      	uxtb	r2, r3
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013de8:	4b14      	ldr	r3, [pc, #80]	; (8013e3c <xPortStartScheduler+0xec>)
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	4a13      	ldr	r2, [pc, #76]	; (8013e3c <xPortStartScheduler+0xec>)
 8013dee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013df2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013df4:	4b11      	ldr	r3, [pc, #68]	; (8013e3c <xPortStartScheduler+0xec>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	4a10      	ldr	r2, [pc, #64]	; (8013e3c <xPortStartScheduler+0xec>)
 8013dfa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013dfe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013e00:	f000 f8d4 	bl	8013fac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013e04:	4b0e      	ldr	r3, [pc, #56]	; (8013e40 <xPortStartScheduler+0xf0>)
 8013e06:	2200      	movs	r2, #0
 8013e08:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013e0a:	f000 f8f3 	bl	8013ff4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013e0e:	4b0d      	ldr	r3, [pc, #52]	; (8013e44 <xPortStartScheduler+0xf4>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	4a0c      	ldr	r2, [pc, #48]	; (8013e44 <xPortStartScheduler+0xf4>)
 8013e14:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013e18:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013e1a:	f7ff ff85 	bl	8013d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013e1e:	f7fe ff2f 	bl	8012c80 <vTaskSwitchContext>
	prvTaskExitError();
 8013e22:	f7ff ff3d 	bl	8013ca0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013e26:	2300      	movs	r3, #0
}
 8013e28:	4618      	mov	r0, r3
 8013e2a:	3710      	adds	r7, #16
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}
 8013e30:	e000e400 	.word	0xe000e400
 8013e34:	20000f4c 	.word	0x20000f4c
 8013e38:	20000f50 	.word	0x20000f50
 8013e3c:	e000ed20 	.word	0xe000ed20
 8013e40:	20000030 	.word	0x20000030
 8013e44:	e000ef34 	.word	0xe000ef34

08013e48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013e48:	b480      	push	{r7}
 8013e4a:	b083      	sub	sp, #12
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e52:	b672      	cpsid	i
 8013e54:	f383 8811 	msr	BASEPRI, r3
 8013e58:	f3bf 8f6f 	isb	sy
 8013e5c:	f3bf 8f4f 	dsb	sy
 8013e60:	b662      	cpsie	i
 8013e62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013e64:	4b0f      	ldr	r3, [pc, #60]	; (8013ea4 <vPortEnterCritical+0x5c>)
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	3301      	adds	r3, #1
 8013e6a:	4a0e      	ldr	r2, [pc, #56]	; (8013ea4 <vPortEnterCritical+0x5c>)
 8013e6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013e6e:	4b0d      	ldr	r3, [pc, #52]	; (8013ea4 <vPortEnterCritical+0x5c>)
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	2b01      	cmp	r3, #1
 8013e74:	d110      	bne.n	8013e98 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013e76:	4b0c      	ldr	r3, [pc, #48]	; (8013ea8 <vPortEnterCritical+0x60>)
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	b2db      	uxtb	r3, r3
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d00b      	beq.n	8013e98 <vPortEnterCritical+0x50>
 8013e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e84:	b672      	cpsid	i
 8013e86:	f383 8811 	msr	BASEPRI, r3
 8013e8a:	f3bf 8f6f 	isb	sy
 8013e8e:	f3bf 8f4f 	dsb	sy
 8013e92:	b662      	cpsie	i
 8013e94:	603b      	str	r3, [r7, #0]
 8013e96:	e7fe      	b.n	8013e96 <vPortEnterCritical+0x4e>
	}
}
 8013e98:	bf00      	nop
 8013e9a:	370c      	adds	r7, #12
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea2:	4770      	bx	lr
 8013ea4:	20000030 	.word	0x20000030
 8013ea8:	e000ed04 	.word	0xe000ed04

08013eac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013eac:	b480      	push	{r7}
 8013eae:	b083      	sub	sp, #12
 8013eb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013eb2:	4b12      	ldr	r3, [pc, #72]	; (8013efc <vPortExitCritical+0x50>)
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d10b      	bne.n	8013ed2 <vPortExitCritical+0x26>
 8013eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ebe:	b672      	cpsid	i
 8013ec0:	f383 8811 	msr	BASEPRI, r3
 8013ec4:	f3bf 8f6f 	isb	sy
 8013ec8:	f3bf 8f4f 	dsb	sy
 8013ecc:	b662      	cpsie	i
 8013ece:	607b      	str	r3, [r7, #4]
 8013ed0:	e7fe      	b.n	8013ed0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8013ed2:	4b0a      	ldr	r3, [pc, #40]	; (8013efc <vPortExitCritical+0x50>)
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	3b01      	subs	r3, #1
 8013ed8:	4a08      	ldr	r2, [pc, #32]	; (8013efc <vPortExitCritical+0x50>)
 8013eda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013edc:	4b07      	ldr	r3, [pc, #28]	; (8013efc <vPortExitCritical+0x50>)
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d104      	bne.n	8013eee <vPortExitCritical+0x42>
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013ee8:	683b      	ldr	r3, [r7, #0]
 8013eea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8013eee:	bf00      	nop
 8013ef0:	370c      	adds	r7, #12
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef8:	4770      	bx	lr
 8013efa:	bf00      	nop
 8013efc:	20000030 	.word	0x20000030

08013f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013f00:	f3ef 8009 	mrs	r0, PSP
 8013f04:	f3bf 8f6f 	isb	sy
 8013f08:	4b15      	ldr	r3, [pc, #84]	; (8013f60 <pxCurrentTCBConst>)
 8013f0a:	681a      	ldr	r2, [r3, #0]
 8013f0c:	f01e 0f10 	tst.w	lr, #16
 8013f10:	bf08      	it	eq
 8013f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f1a:	6010      	str	r0, [r2, #0]
 8013f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013f24:	b672      	cpsid	i
 8013f26:	f380 8811 	msr	BASEPRI, r0
 8013f2a:	f3bf 8f4f 	dsb	sy
 8013f2e:	f3bf 8f6f 	isb	sy
 8013f32:	b662      	cpsie	i
 8013f34:	f7fe fea4 	bl	8012c80 <vTaskSwitchContext>
 8013f38:	f04f 0000 	mov.w	r0, #0
 8013f3c:	f380 8811 	msr	BASEPRI, r0
 8013f40:	bc09      	pop	{r0, r3}
 8013f42:	6819      	ldr	r1, [r3, #0]
 8013f44:	6808      	ldr	r0, [r1, #0]
 8013f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f4a:	f01e 0f10 	tst.w	lr, #16
 8013f4e:	bf08      	it	eq
 8013f50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013f54:	f380 8809 	msr	PSP, r0
 8013f58:	f3bf 8f6f 	isb	sy
 8013f5c:	4770      	bx	lr
 8013f5e:	bf00      	nop

08013f60 <pxCurrentTCBConst>:
 8013f60:	20000920 	.word	0x20000920
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013f64:	bf00      	nop
 8013f66:	bf00      	nop

08013f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b082      	sub	sp, #8
 8013f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8013f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f72:	b672      	cpsid	i
 8013f74:	f383 8811 	msr	BASEPRI, r3
 8013f78:	f3bf 8f6f 	isb	sy
 8013f7c:	f3bf 8f4f 	dsb	sy
 8013f80:	b662      	cpsie	i
 8013f82:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013f84:	f7fe fdba 	bl	8012afc <xTaskIncrementTick>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d003      	beq.n	8013f96 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013f8e:	4b06      	ldr	r3, [pc, #24]	; (8013fa8 <SysTick_Handler+0x40>)
 8013f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f94:	601a      	str	r2, [r3, #0]
 8013f96:	2300      	movs	r3, #0
 8013f98:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8013fa0:	bf00      	nop
 8013fa2:	3708      	adds	r7, #8
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	bd80      	pop	{r7, pc}
 8013fa8:	e000ed04 	.word	0xe000ed04

08013fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013fac:	b480      	push	{r7}
 8013fae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013fb0:	4b0b      	ldr	r3, [pc, #44]	; (8013fe0 <vPortSetupTimerInterrupt+0x34>)
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013fb6:	4b0b      	ldr	r3, [pc, #44]	; (8013fe4 <vPortSetupTimerInterrupt+0x38>)
 8013fb8:	2200      	movs	r2, #0
 8013fba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013fbc:	4b0a      	ldr	r3, [pc, #40]	; (8013fe8 <vPortSetupTimerInterrupt+0x3c>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	4a0a      	ldr	r2, [pc, #40]	; (8013fec <vPortSetupTimerInterrupt+0x40>)
 8013fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8013fc6:	099b      	lsrs	r3, r3, #6
 8013fc8:	4a09      	ldr	r2, [pc, #36]	; (8013ff0 <vPortSetupTimerInterrupt+0x44>)
 8013fca:	3b01      	subs	r3, #1
 8013fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013fce:	4b04      	ldr	r3, [pc, #16]	; (8013fe0 <vPortSetupTimerInterrupt+0x34>)
 8013fd0:	2207      	movs	r2, #7
 8013fd2:	601a      	str	r2, [r3, #0]
}
 8013fd4:	bf00      	nop
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fdc:	4770      	bx	lr
 8013fde:	bf00      	nop
 8013fe0:	e000e010 	.word	0xe000e010
 8013fe4:	e000e018 	.word	0xe000e018
 8013fe8:	20000000 	.word	0x20000000
 8013fec:	10624dd3 	.word	0x10624dd3
 8013ff0:	e000e014 	.word	0xe000e014

08013ff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013ff4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014004 <vPortEnableVFP+0x10>
 8013ff8:	6801      	ldr	r1, [r0, #0]
 8013ffa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013ffe:	6001      	str	r1, [r0, #0]
 8014000:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014002:	bf00      	nop
 8014004:	e000ed88 	.word	0xe000ed88

08014008 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014008:	b480      	push	{r7}
 801400a:	b085      	sub	sp, #20
 801400c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801400e:	f3ef 8305 	mrs	r3, IPSR
 8014012:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	2b0f      	cmp	r3, #15
 8014018:	d915      	bls.n	8014046 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801401a:	4a18      	ldr	r2, [pc, #96]	; (801407c <vPortValidateInterruptPriority+0x74>)
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	4413      	add	r3, r2
 8014020:	781b      	ldrb	r3, [r3, #0]
 8014022:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014024:	4b16      	ldr	r3, [pc, #88]	; (8014080 <vPortValidateInterruptPriority+0x78>)
 8014026:	781b      	ldrb	r3, [r3, #0]
 8014028:	7afa      	ldrb	r2, [r7, #11]
 801402a:	429a      	cmp	r2, r3
 801402c:	d20b      	bcs.n	8014046 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014032:	b672      	cpsid	i
 8014034:	f383 8811 	msr	BASEPRI, r3
 8014038:	f3bf 8f6f 	isb	sy
 801403c:	f3bf 8f4f 	dsb	sy
 8014040:	b662      	cpsie	i
 8014042:	607b      	str	r3, [r7, #4]
 8014044:	e7fe      	b.n	8014044 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014046:	4b0f      	ldr	r3, [pc, #60]	; (8014084 <vPortValidateInterruptPriority+0x7c>)
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801404e:	4b0e      	ldr	r3, [pc, #56]	; (8014088 <vPortValidateInterruptPriority+0x80>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	429a      	cmp	r2, r3
 8014054:	d90b      	bls.n	801406e <vPortValidateInterruptPriority+0x66>
 8014056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801405a:	b672      	cpsid	i
 801405c:	f383 8811 	msr	BASEPRI, r3
 8014060:	f3bf 8f6f 	isb	sy
 8014064:	f3bf 8f4f 	dsb	sy
 8014068:	b662      	cpsie	i
 801406a:	603b      	str	r3, [r7, #0]
 801406c:	e7fe      	b.n	801406c <vPortValidateInterruptPriority+0x64>
	}
 801406e:	bf00      	nop
 8014070:	3714      	adds	r7, #20
 8014072:	46bd      	mov	sp, r7
 8014074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014078:	4770      	bx	lr
 801407a:	bf00      	nop
 801407c:	e000e3f0 	.word	0xe000e3f0
 8014080:	20000f4c 	.word	0x20000f4c
 8014084:	e000ed0c 	.word	0xe000ed0c
 8014088:	20000f50 	.word	0x20000f50

0801408c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b08a      	sub	sp, #40	; 0x28
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014094:	2300      	movs	r3, #0
 8014096:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014098:	f7fe fc62 	bl	8012960 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801409c:	4b5c      	ldr	r3, [pc, #368]	; (8014210 <pvPortMalloc+0x184>)
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d101      	bne.n	80140a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80140a4:	f000 f91a 	bl	80142dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80140a8:	4b5a      	ldr	r3, [pc, #360]	; (8014214 <pvPortMalloc+0x188>)
 80140aa:	681a      	ldr	r2, [r3, #0]
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	4013      	ands	r3, r2
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	f040 8090 	bne.w	80141d6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d01e      	beq.n	80140fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80140bc:	2208      	movs	r2, #8
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	4413      	add	r3, r2
 80140c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	f003 0307 	and.w	r3, r3, #7
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d015      	beq.n	80140fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	f023 0307 	bic.w	r3, r3, #7
 80140d4:	3308      	adds	r3, #8
 80140d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	f003 0307 	and.w	r3, r3, #7
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d00b      	beq.n	80140fa <pvPortMalloc+0x6e>
 80140e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140e6:	b672      	cpsid	i
 80140e8:	f383 8811 	msr	BASEPRI, r3
 80140ec:	f3bf 8f6f 	isb	sy
 80140f0:	f3bf 8f4f 	dsb	sy
 80140f4:	b662      	cpsie	i
 80140f6:	617b      	str	r3, [r7, #20]
 80140f8:	e7fe      	b.n	80140f8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d06a      	beq.n	80141d6 <pvPortMalloc+0x14a>
 8014100:	4b45      	ldr	r3, [pc, #276]	; (8014218 <pvPortMalloc+0x18c>)
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	687a      	ldr	r2, [r7, #4]
 8014106:	429a      	cmp	r2, r3
 8014108:	d865      	bhi.n	80141d6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801410a:	4b44      	ldr	r3, [pc, #272]	; (801421c <pvPortMalloc+0x190>)
 801410c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801410e:	4b43      	ldr	r3, [pc, #268]	; (801421c <pvPortMalloc+0x190>)
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014114:	e004      	b.n	8014120 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8014116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014118:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014122:	685b      	ldr	r3, [r3, #4]
 8014124:	687a      	ldr	r2, [r7, #4]
 8014126:	429a      	cmp	r2, r3
 8014128:	d903      	bls.n	8014132 <pvPortMalloc+0xa6>
 801412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d1f1      	bne.n	8014116 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014132:	4b37      	ldr	r3, [pc, #220]	; (8014210 <pvPortMalloc+0x184>)
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014138:	429a      	cmp	r2, r3
 801413a:	d04c      	beq.n	80141d6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801413c:	6a3b      	ldr	r3, [r7, #32]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	2208      	movs	r2, #8
 8014142:	4413      	add	r3, r2
 8014144:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014148:	681a      	ldr	r2, [r3, #0]
 801414a:	6a3b      	ldr	r3, [r7, #32]
 801414c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014150:	685a      	ldr	r2, [r3, #4]
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	1ad2      	subs	r2, r2, r3
 8014156:	2308      	movs	r3, #8
 8014158:	005b      	lsls	r3, r3, #1
 801415a:	429a      	cmp	r2, r3
 801415c:	d920      	bls.n	80141a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801415e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	4413      	add	r3, r2
 8014164:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014166:	69bb      	ldr	r3, [r7, #24]
 8014168:	f003 0307 	and.w	r3, r3, #7
 801416c:	2b00      	cmp	r3, #0
 801416e:	d00b      	beq.n	8014188 <pvPortMalloc+0xfc>
 8014170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014174:	b672      	cpsid	i
 8014176:	f383 8811 	msr	BASEPRI, r3
 801417a:	f3bf 8f6f 	isb	sy
 801417e:	f3bf 8f4f 	dsb	sy
 8014182:	b662      	cpsie	i
 8014184:	613b      	str	r3, [r7, #16]
 8014186:	e7fe      	b.n	8014186 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801418a:	685a      	ldr	r2, [r3, #4]
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	1ad2      	subs	r2, r2, r3
 8014190:	69bb      	ldr	r3, [r7, #24]
 8014192:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014196:	687a      	ldr	r2, [r7, #4]
 8014198:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801419a:	69b8      	ldr	r0, [r7, #24]
 801419c:	f000 f900 	bl	80143a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80141a0:	4b1d      	ldr	r3, [pc, #116]	; (8014218 <pvPortMalloc+0x18c>)
 80141a2:	681a      	ldr	r2, [r3, #0]
 80141a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141a6:	685b      	ldr	r3, [r3, #4]
 80141a8:	1ad3      	subs	r3, r2, r3
 80141aa:	4a1b      	ldr	r2, [pc, #108]	; (8014218 <pvPortMalloc+0x18c>)
 80141ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80141ae:	4b1a      	ldr	r3, [pc, #104]	; (8014218 <pvPortMalloc+0x18c>)
 80141b0:	681a      	ldr	r2, [r3, #0]
 80141b2:	4b1b      	ldr	r3, [pc, #108]	; (8014220 <pvPortMalloc+0x194>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	429a      	cmp	r2, r3
 80141b8:	d203      	bcs.n	80141c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80141ba:	4b17      	ldr	r3, [pc, #92]	; (8014218 <pvPortMalloc+0x18c>)
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	4a18      	ldr	r2, [pc, #96]	; (8014220 <pvPortMalloc+0x194>)
 80141c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80141c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c4:	685a      	ldr	r2, [r3, #4]
 80141c6:	4b13      	ldr	r3, [pc, #76]	; (8014214 <pvPortMalloc+0x188>)
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	431a      	orrs	r2, r3
 80141cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80141d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d2:	2200      	movs	r2, #0
 80141d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80141d6:	f7fe fbd1 	bl	801297c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80141da:	69fb      	ldr	r3, [r7, #28]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d101      	bne.n	80141e4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80141e0:	f7ec f9f8 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80141e4:	69fb      	ldr	r3, [r7, #28]
 80141e6:	f003 0307 	and.w	r3, r3, #7
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d00b      	beq.n	8014206 <pvPortMalloc+0x17a>
 80141ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141f2:	b672      	cpsid	i
 80141f4:	f383 8811 	msr	BASEPRI, r3
 80141f8:	f3bf 8f6f 	isb	sy
 80141fc:	f3bf 8f4f 	dsb	sy
 8014200:	b662      	cpsie	i
 8014202:	60fb      	str	r3, [r7, #12]
 8014204:	e7fe      	b.n	8014204 <pvPortMalloc+0x178>
	return pvReturn;
 8014206:	69fb      	ldr	r3, [r7, #28]
}
 8014208:	4618      	mov	r0, r3
 801420a:	3728      	adds	r7, #40	; 0x28
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}
 8014210:	20008f5c 	.word	0x20008f5c
 8014214:	20008f68 	.word	0x20008f68
 8014218:	20008f60 	.word	0x20008f60
 801421c:	20008f54 	.word	0x20008f54
 8014220:	20008f64 	.word	0x20008f64

08014224 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b086      	sub	sp, #24
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d04a      	beq.n	80142cc <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014236:	2308      	movs	r3, #8
 8014238:	425b      	negs	r3, r3
 801423a:	697a      	ldr	r2, [r7, #20]
 801423c:	4413      	add	r3, r2
 801423e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014240:	697b      	ldr	r3, [r7, #20]
 8014242:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014244:	693b      	ldr	r3, [r7, #16]
 8014246:	685a      	ldr	r2, [r3, #4]
 8014248:	4b22      	ldr	r3, [pc, #136]	; (80142d4 <vPortFree+0xb0>)
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	4013      	ands	r3, r2
 801424e:	2b00      	cmp	r3, #0
 8014250:	d10b      	bne.n	801426a <vPortFree+0x46>
 8014252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014256:	b672      	cpsid	i
 8014258:	f383 8811 	msr	BASEPRI, r3
 801425c:	f3bf 8f6f 	isb	sy
 8014260:	f3bf 8f4f 	dsb	sy
 8014264:	b662      	cpsie	i
 8014266:	60fb      	str	r3, [r7, #12]
 8014268:	e7fe      	b.n	8014268 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801426a:	693b      	ldr	r3, [r7, #16]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d00b      	beq.n	801428a <vPortFree+0x66>
 8014272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014276:	b672      	cpsid	i
 8014278:	f383 8811 	msr	BASEPRI, r3
 801427c:	f3bf 8f6f 	isb	sy
 8014280:	f3bf 8f4f 	dsb	sy
 8014284:	b662      	cpsie	i
 8014286:	60bb      	str	r3, [r7, #8]
 8014288:	e7fe      	b.n	8014288 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801428a:	693b      	ldr	r3, [r7, #16]
 801428c:	685a      	ldr	r2, [r3, #4]
 801428e:	4b11      	ldr	r3, [pc, #68]	; (80142d4 <vPortFree+0xb0>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	4013      	ands	r3, r2
 8014294:	2b00      	cmp	r3, #0
 8014296:	d019      	beq.n	80142cc <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014298:	693b      	ldr	r3, [r7, #16]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d115      	bne.n	80142cc <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80142a0:	693b      	ldr	r3, [r7, #16]
 80142a2:	685a      	ldr	r2, [r3, #4]
 80142a4:	4b0b      	ldr	r3, [pc, #44]	; (80142d4 <vPortFree+0xb0>)
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	43db      	mvns	r3, r3
 80142aa:	401a      	ands	r2, r3
 80142ac:	693b      	ldr	r3, [r7, #16]
 80142ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80142b0:	f7fe fb56 	bl	8012960 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80142b4:	693b      	ldr	r3, [r7, #16]
 80142b6:	685a      	ldr	r2, [r3, #4]
 80142b8:	4b07      	ldr	r3, [pc, #28]	; (80142d8 <vPortFree+0xb4>)
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	4413      	add	r3, r2
 80142be:	4a06      	ldr	r2, [pc, #24]	; (80142d8 <vPortFree+0xb4>)
 80142c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80142c2:	6938      	ldr	r0, [r7, #16]
 80142c4:	f000 f86c 	bl	80143a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80142c8:	f7fe fb58 	bl	801297c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80142cc:	bf00      	nop
 80142ce:	3718      	adds	r7, #24
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bd80      	pop	{r7, pc}
 80142d4:	20008f68 	.word	0x20008f68
 80142d8:	20008f60 	.word	0x20008f60

080142dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80142dc:	b480      	push	{r7}
 80142de:	b085      	sub	sp, #20
 80142e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80142e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80142e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80142e8:	4b27      	ldr	r3, [pc, #156]	; (8014388 <prvHeapInit+0xac>)
 80142ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	f003 0307 	and.w	r3, r3, #7
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d00c      	beq.n	8014310 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	3307      	adds	r3, #7
 80142fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	f023 0307 	bic.w	r3, r3, #7
 8014302:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014304:	68ba      	ldr	r2, [r7, #8]
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	1ad3      	subs	r3, r2, r3
 801430a:	4a1f      	ldr	r2, [pc, #124]	; (8014388 <prvHeapInit+0xac>)
 801430c:	4413      	add	r3, r2
 801430e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014314:	4a1d      	ldr	r2, [pc, #116]	; (801438c <prvHeapInit+0xb0>)
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801431a:	4b1c      	ldr	r3, [pc, #112]	; (801438c <prvHeapInit+0xb0>)
 801431c:	2200      	movs	r2, #0
 801431e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	68ba      	ldr	r2, [r7, #8]
 8014324:	4413      	add	r3, r2
 8014326:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014328:	2208      	movs	r2, #8
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	1a9b      	subs	r3, r3, r2
 801432e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	f023 0307 	bic.w	r3, r3, #7
 8014336:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	4a15      	ldr	r2, [pc, #84]	; (8014390 <prvHeapInit+0xb4>)
 801433c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801433e:	4b14      	ldr	r3, [pc, #80]	; (8014390 <prvHeapInit+0xb4>)
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	2200      	movs	r2, #0
 8014344:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014346:	4b12      	ldr	r3, [pc, #72]	; (8014390 <prvHeapInit+0xb4>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	2200      	movs	r2, #0
 801434c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014352:	683b      	ldr	r3, [r7, #0]
 8014354:	68fa      	ldr	r2, [r7, #12]
 8014356:	1ad2      	subs	r2, r2, r3
 8014358:	683b      	ldr	r3, [r7, #0]
 801435a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801435c:	4b0c      	ldr	r3, [pc, #48]	; (8014390 <prvHeapInit+0xb4>)
 801435e:	681a      	ldr	r2, [r3, #0]
 8014360:	683b      	ldr	r3, [r7, #0]
 8014362:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	685b      	ldr	r3, [r3, #4]
 8014368:	4a0a      	ldr	r2, [pc, #40]	; (8014394 <prvHeapInit+0xb8>)
 801436a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801436c:	683b      	ldr	r3, [r7, #0]
 801436e:	685b      	ldr	r3, [r3, #4]
 8014370:	4a09      	ldr	r2, [pc, #36]	; (8014398 <prvHeapInit+0xbc>)
 8014372:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014374:	4b09      	ldr	r3, [pc, #36]	; (801439c <prvHeapInit+0xc0>)
 8014376:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801437a:	601a      	str	r2, [r3, #0]
}
 801437c:	bf00      	nop
 801437e:	3714      	adds	r7, #20
 8014380:	46bd      	mov	sp, r7
 8014382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014386:	4770      	bx	lr
 8014388:	20000f54 	.word	0x20000f54
 801438c:	20008f54 	.word	0x20008f54
 8014390:	20008f5c 	.word	0x20008f5c
 8014394:	20008f64 	.word	0x20008f64
 8014398:	20008f60 	.word	0x20008f60
 801439c:	20008f68 	.word	0x20008f68

080143a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80143a0:	b480      	push	{r7}
 80143a2:	b085      	sub	sp, #20
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80143a8:	4b28      	ldr	r3, [pc, #160]	; (801444c <prvInsertBlockIntoFreeList+0xac>)
 80143aa:	60fb      	str	r3, [r7, #12]
 80143ac:	e002      	b.n	80143b4 <prvInsertBlockIntoFreeList+0x14>
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	60fb      	str	r3, [r7, #12]
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	687a      	ldr	r2, [r7, #4]
 80143ba:	429a      	cmp	r2, r3
 80143bc:	d8f7      	bhi.n	80143ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	685b      	ldr	r3, [r3, #4]
 80143c6:	68ba      	ldr	r2, [r7, #8]
 80143c8:	4413      	add	r3, r2
 80143ca:	687a      	ldr	r2, [r7, #4]
 80143cc:	429a      	cmp	r2, r3
 80143ce:	d108      	bne.n	80143e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	685a      	ldr	r2, [r3, #4]
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	685b      	ldr	r3, [r3, #4]
 80143d8:	441a      	add	r2, r3
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	685b      	ldr	r3, [r3, #4]
 80143ea:	68ba      	ldr	r2, [r7, #8]
 80143ec:	441a      	add	r2, r3
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	429a      	cmp	r2, r3
 80143f4:	d118      	bne.n	8014428 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	681a      	ldr	r2, [r3, #0]
 80143fa:	4b15      	ldr	r3, [pc, #84]	; (8014450 <prvInsertBlockIntoFreeList+0xb0>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	429a      	cmp	r2, r3
 8014400:	d00d      	beq.n	801441e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	685a      	ldr	r2, [r3, #4]
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	685b      	ldr	r3, [r3, #4]
 801440c:	441a      	add	r2, r3
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	681a      	ldr	r2, [r3, #0]
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	601a      	str	r2, [r3, #0]
 801441c:	e008      	b.n	8014430 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801441e:	4b0c      	ldr	r3, [pc, #48]	; (8014450 <prvInsertBlockIntoFreeList+0xb0>)
 8014420:	681a      	ldr	r2, [r3, #0]
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	601a      	str	r2, [r3, #0]
 8014426:	e003      	b.n	8014430 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	681a      	ldr	r2, [r3, #0]
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014430:	68fa      	ldr	r2, [r7, #12]
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	429a      	cmp	r2, r3
 8014436:	d002      	beq.n	801443e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	687a      	ldr	r2, [r7, #4]
 801443c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801443e:	bf00      	nop
 8014440:	3714      	adds	r7, #20
 8014442:	46bd      	mov	sp, r7
 8014444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014448:	4770      	bx	lr
 801444a:	bf00      	nop
 801444c:	20008f54 	.word	0x20008f54
 8014450:	20008f5c 	.word	0x20008f5c

08014454 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b084      	sub	sp, #16
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801445e:	f007 faab 	bl	801b9b8 <sys_timeouts_sleeptime>
 8014462:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801446a:	d10b      	bne.n	8014484 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801446c:	4813      	ldr	r0, [pc, #76]	; (80144bc <tcpip_timeouts_mbox_fetch+0x68>)
 801446e:	f00c fa50 	bl	8020912 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8014472:	2200      	movs	r2, #0
 8014474:	6839      	ldr	r1, [r7, #0]
 8014476:	6878      	ldr	r0, [r7, #4]
 8014478:	f00c f9d8 	bl	802082c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801447c:	480f      	ldr	r0, [pc, #60]	; (80144bc <tcpip_timeouts_mbox_fetch+0x68>)
 801447e:	f00c fa39 	bl	80208f4 <sys_mutex_lock>
    return;
 8014482:	e018      	b.n	80144b6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d102      	bne.n	8014490 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801448a:	f007 fa5b 	bl	801b944 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801448e:	e7e6      	b.n	801445e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8014490:	480a      	ldr	r0, [pc, #40]	; (80144bc <tcpip_timeouts_mbox_fetch+0x68>)
 8014492:	f00c fa3e 	bl	8020912 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8014496:	68fa      	ldr	r2, [r7, #12]
 8014498:	6839      	ldr	r1, [r7, #0]
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	f00c f9c6 	bl	802082c <sys_arch_mbox_fetch>
 80144a0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80144a2:	4806      	ldr	r0, [pc, #24]	; (80144bc <tcpip_timeouts_mbox_fetch+0x68>)
 80144a4:	f00c fa26 	bl	80208f4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80144a8:	68bb      	ldr	r3, [r7, #8]
 80144aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80144ae:	d102      	bne.n	80144b6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80144b0:	f007 fa48 	bl	801b944 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80144b4:	e7d3      	b.n	801445e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80144b6:	3710      	adds	r7, #16
 80144b8:	46bd      	mov	sp, r7
 80144ba:	bd80      	pop	{r7, pc}
 80144bc:	2000cc20 	.word	0x2000cc20

080144c0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b084      	sub	sp, #16
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80144c8:	4810      	ldr	r0, [pc, #64]	; (801450c <tcpip_thread+0x4c>)
 80144ca:	f00c fa13 	bl	80208f4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80144ce:	4b10      	ldr	r3, [pc, #64]	; (8014510 <tcpip_thread+0x50>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d005      	beq.n	80144e2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80144d6:	4b0e      	ldr	r3, [pc, #56]	; (8014510 <tcpip_thread+0x50>)
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	4a0e      	ldr	r2, [pc, #56]	; (8014514 <tcpip_thread+0x54>)
 80144dc:	6812      	ldr	r2, [r2, #0]
 80144de:	4610      	mov	r0, r2
 80144e0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80144e2:	f107 030c 	add.w	r3, r7, #12
 80144e6:	4619      	mov	r1, r3
 80144e8:	480b      	ldr	r0, [pc, #44]	; (8014518 <tcpip_thread+0x58>)
 80144ea:	f7ff ffb3 	bl	8014454 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d106      	bne.n	8014502 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80144f4:	4b09      	ldr	r3, [pc, #36]	; (801451c <tcpip_thread+0x5c>)
 80144f6:	2291      	movs	r2, #145	; 0x91
 80144f8:	4909      	ldr	r1, [pc, #36]	; (8014520 <tcpip_thread+0x60>)
 80144fa:	480a      	ldr	r0, [pc, #40]	; (8014524 <tcpip_thread+0x64>)
 80144fc:	f00d f87a 	bl	80215f4 <iprintf>
      continue;
 8014500:	e003      	b.n	801450a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	4618      	mov	r0, r3
 8014506:	f000 f80f 	bl	8014528 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801450a:	e7ea      	b.n	80144e2 <tcpip_thread+0x22>
 801450c:	2000cc20 	.word	0x2000cc20
 8014510:	20008f6c 	.word	0x20008f6c
 8014514:	20008f70 	.word	0x20008f70
 8014518:	20008f74 	.word	0x20008f74
 801451c:	08022598 	.word	0x08022598
 8014520:	080225c8 	.word	0x080225c8
 8014524:	080225e8 	.word	0x080225e8

08014528 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b082      	sub	sp, #8
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	781b      	ldrb	r3, [r3, #0]
 8014534:	2b01      	cmp	r3, #1
 8014536:	d018      	beq.n	801456a <tcpip_thread_handle_msg+0x42>
 8014538:	2b02      	cmp	r3, #2
 801453a:	d021      	beq.n	8014580 <tcpip_thread_handle_msg+0x58>
 801453c:	2b00      	cmp	r3, #0
 801453e:	d126      	bne.n	801458e <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	68db      	ldr	r3, [r3, #12]
 8014544:	687a      	ldr	r2, [r7, #4]
 8014546:	6850      	ldr	r0, [r2, #4]
 8014548:	687a      	ldr	r2, [r7, #4]
 801454a:	6892      	ldr	r2, [r2, #8]
 801454c:	4611      	mov	r1, r2
 801454e:	4798      	blx	r3
 8014550:	4603      	mov	r3, r0
 8014552:	2b00      	cmp	r3, #0
 8014554:	d004      	beq.n	8014560 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	685b      	ldr	r3, [r3, #4]
 801455a:	4618      	mov	r0, r3
 801455c:	f001 fce6 	bl	8015f2c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8014560:	6879      	ldr	r1, [r7, #4]
 8014562:	2009      	movs	r0, #9
 8014564:	f000 fe1c 	bl	80151a0 <memp_free>
      break;
 8014568:	e018      	b.n	801459c <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	685b      	ldr	r3, [r3, #4]
 801456e:	687a      	ldr	r2, [r7, #4]
 8014570:	6892      	ldr	r2, [r2, #8]
 8014572:	4610      	mov	r0, r2
 8014574:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8014576:	6879      	ldr	r1, [r7, #4]
 8014578:	2008      	movs	r0, #8
 801457a:	f000 fe11 	bl	80151a0 <memp_free>
      break;
 801457e:	e00d      	b.n	801459c <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	685b      	ldr	r3, [r3, #4]
 8014584:	687a      	ldr	r2, [r7, #4]
 8014586:	6892      	ldr	r2, [r2, #8]
 8014588:	4610      	mov	r0, r2
 801458a:	4798      	blx	r3
      break;
 801458c:	e006      	b.n	801459c <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801458e:	4b05      	ldr	r3, [pc, #20]	; (80145a4 <tcpip_thread_handle_msg+0x7c>)
 8014590:	22cf      	movs	r2, #207	; 0xcf
 8014592:	4905      	ldr	r1, [pc, #20]	; (80145a8 <tcpip_thread_handle_msg+0x80>)
 8014594:	4805      	ldr	r0, [pc, #20]	; (80145ac <tcpip_thread_handle_msg+0x84>)
 8014596:	f00d f82d 	bl	80215f4 <iprintf>
      break;
 801459a:	bf00      	nop
  }
}
 801459c:	bf00      	nop
 801459e:	3708      	adds	r7, #8
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}
 80145a4:	08022598 	.word	0x08022598
 80145a8:	080225c8 	.word	0x080225c8
 80145ac:	080225e8 	.word	0x080225e8

080145b0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b086      	sub	sp, #24
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	60f8      	str	r0, [r7, #12]
 80145b8:	60b9      	str	r1, [r7, #8]
 80145ba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80145bc:	481a      	ldr	r0, [pc, #104]	; (8014628 <tcpip_inpkt+0x78>)
 80145be:	f00c f966 	bl	802088e <sys_mbox_valid>
 80145c2:	4603      	mov	r3, r0
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d105      	bne.n	80145d4 <tcpip_inpkt+0x24>
 80145c8:	4b18      	ldr	r3, [pc, #96]	; (801462c <tcpip_inpkt+0x7c>)
 80145ca:	22fc      	movs	r2, #252	; 0xfc
 80145cc:	4918      	ldr	r1, [pc, #96]	; (8014630 <tcpip_inpkt+0x80>)
 80145ce:	4819      	ldr	r0, [pc, #100]	; (8014634 <tcpip_inpkt+0x84>)
 80145d0:	f00d f810 	bl	80215f4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80145d4:	2009      	movs	r0, #9
 80145d6:	f000 fd91 	bl	80150fc <memp_malloc>
 80145da:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80145dc:	697b      	ldr	r3, [r7, #20]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d102      	bne.n	80145e8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80145e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145e6:	e01a      	b.n	801461e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80145e8:	697b      	ldr	r3, [r7, #20]
 80145ea:	2200      	movs	r2, #0
 80145ec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80145ee:	697b      	ldr	r3, [r7, #20]
 80145f0:	68fa      	ldr	r2, [r7, #12]
 80145f2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80145f4:	697b      	ldr	r3, [r7, #20]
 80145f6:	68ba      	ldr	r2, [r7, #8]
 80145f8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80145fa:	697b      	ldr	r3, [r7, #20]
 80145fc:	687a      	ldr	r2, [r7, #4]
 80145fe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8014600:	6979      	ldr	r1, [r7, #20]
 8014602:	4809      	ldr	r0, [pc, #36]	; (8014628 <tcpip_inpkt+0x78>)
 8014604:	f00c f8f8 	bl	80207f8 <sys_mbox_trypost>
 8014608:	4603      	mov	r3, r0
 801460a:	2b00      	cmp	r3, #0
 801460c:	d006      	beq.n	801461c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801460e:	6979      	ldr	r1, [r7, #20]
 8014610:	2009      	movs	r0, #9
 8014612:	f000 fdc5 	bl	80151a0 <memp_free>
    return ERR_MEM;
 8014616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801461a:	e000      	b.n	801461e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801461c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801461e:	4618      	mov	r0, r3
 8014620:	3718      	adds	r7, #24
 8014622:	46bd      	mov	sp, r7
 8014624:	bd80      	pop	{r7, pc}
 8014626:	bf00      	nop
 8014628:	20008f74 	.word	0x20008f74
 801462c:	08022598 	.word	0x08022598
 8014630:	08022610 	.word	0x08022610
 8014634:	080225e8 	.word	0x080225e8

08014638 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b082      	sub	sp, #8
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
 8014640:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014648:	f003 0318 	and.w	r3, r3, #24
 801464c:	2b00      	cmp	r3, #0
 801464e:	d006      	beq.n	801465e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8014650:	4a08      	ldr	r2, [pc, #32]	; (8014674 <tcpip_input+0x3c>)
 8014652:	6839      	ldr	r1, [r7, #0]
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f7ff ffab 	bl	80145b0 <tcpip_inpkt>
 801465a:	4603      	mov	r3, r0
 801465c:	e005      	b.n	801466a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801465e:	4a06      	ldr	r2, [pc, #24]	; (8014678 <tcpip_input+0x40>)
 8014660:	6839      	ldr	r1, [r7, #0]
 8014662:	6878      	ldr	r0, [r7, #4]
 8014664:	f7ff ffa4 	bl	80145b0 <tcpip_inpkt>
 8014668:	4603      	mov	r3, r0
}
 801466a:	4618      	mov	r0, r3
 801466c:	3708      	adds	r7, #8
 801466e:	46bd      	mov	sp, r7
 8014670:	bd80      	pop	{r7, pc}
 8014672:	bf00      	nop
 8014674:	08020619 	.word	0x08020619
 8014678:	0801f3d9 	.word	0x0801f3d9

0801467c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b084      	sub	sp, #16
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
 8014684:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8014686:	4819      	ldr	r0, [pc, #100]	; (80146ec <tcpip_try_callback+0x70>)
 8014688:	f00c f901 	bl	802088e <sys_mbox_valid>
 801468c:	4603      	mov	r3, r0
 801468e:	2b00      	cmp	r3, #0
 8014690:	d106      	bne.n	80146a0 <tcpip_try_callback+0x24>
 8014692:	4b17      	ldr	r3, [pc, #92]	; (80146f0 <tcpip_try_callback+0x74>)
 8014694:	f240 125d 	movw	r2, #349	; 0x15d
 8014698:	4916      	ldr	r1, [pc, #88]	; (80146f4 <tcpip_try_callback+0x78>)
 801469a:	4817      	ldr	r0, [pc, #92]	; (80146f8 <tcpip_try_callback+0x7c>)
 801469c:	f00c ffaa 	bl	80215f4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80146a0:	2008      	movs	r0, #8
 80146a2:	f000 fd2b 	bl	80150fc <memp_malloc>
 80146a6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d102      	bne.n	80146b4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80146ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146b2:	e017      	b.n	80146e4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	2201      	movs	r2, #1
 80146b8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	687a      	ldr	r2, [r7, #4]
 80146be:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	683a      	ldr	r2, [r7, #0]
 80146c4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80146c6:	68f9      	ldr	r1, [r7, #12]
 80146c8:	4808      	ldr	r0, [pc, #32]	; (80146ec <tcpip_try_callback+0x70>)
 80146ca:	f00c f895 	bl	80207f8 <sys_mbox_trypost>
 80146ce:	4603      	mov	r3, r0
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d006      	beq.n	80146e2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80146d4:	68f9      	ldr	r1, [r7, #12]
 80146d6:	2008      	movs	r0, #8
 80146d8:	f000 fd62 	bl	80151a0 <memp_free>
    return ERR_MEM;
 80146dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146e0:	e000      	b.n	80146e4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80146e2:	2300      	movs	r3, #0
}
 80146e4:	4618      	mov	r0, r3
 80146e6:	3710      	adds	r7, #16
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bd80      	pop	{r7, pc}
 80146ec:	20008f74 	.word	0x20008f74
 80146f0:	08022598 	.word	0x08022598
 80146f4:	08022610 	.word	0x08022610
 80146f8:	080225e8 	.word	0x080225e8

080146fc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b084      	sub	sp, #16
 8014700:	af02      	add	r7, sp, #8
 8014702:	6078      	str	r0, [r7, #4]
 8014704:	6039      	str	r1, [r7, #0]
  lwip_init();
 8014706:	f000 f871 	bl	80147ec <lwip_init>

  tcpip_init_done = initfunc;
 801470a:	4a17      	ldr	r2, [pc, #92]	; (8014768 <tcpip_init+0x6c>)
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8014710:	4a16      	ldr	r2, [pc, #88]	; (801476c <tcpip_init+0x70>)
 8014712:	683b      	ldr	r3, [r7, #0]
 8014714:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8014716:	2106      	movs	r1, #6
 8014718:	4815      	ldr	r0, [pc, #84]	; (8014770 <tcpip_init+0x74>)
 801471a:	f00c f853 	bl	80207c4 <sys_mbox_new>
 801471e:	4603      	mov	r3, r0
 8014720:	2b00      	cmp	r3, #0
 8014722:	d006      	beq.n	8014732 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8014724:	4b13      	ldr	r3, [pc, #76]	; (8014774 <tcpip_init+0x78>)
 8014726:	f240 2261 	movw	r2, #609	; 0x261
 801472a:	4913      	ldr	r1, [pc, #76]	; (8014778 <tcpip_init+0x7c>)
 801472c:	4813      	ldr	r0, [pc, #76]	; (801477c <tcpip_init+0x80>)
 801472e:	f00c ff61 	bl	80215f4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8014732:	4813      	ldr	r0, [pc, #76]	; (8014780 <tcpip_init+0x84>)
 8014734:	f00c f8c8 	bl	80208c8 <sys_mutex_new>
 8014738:	4603      	mov	r3, r0
 801473a:	2b00      	cmp	r3, #0
 801473c:	d006      	beq.n	801474c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801473e:	4b0d      	ldr	r3, [pc, #52]	; (8014774 <tcpip_init+0x78>)
 8014740:	f240 2265 	movw	r2, #613	; 0x265
 8014744:	490f      	ldr	r1, [pc, #60]	; (8014784 <tcpip_init+0x88>)
 8014746:	480d      	ldr	r0, [pc, #52]	; (801477c <tcpip_init+0x80>)
 8014748:	f00c ff54 	bl	80215f4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801474c:	2318      	movs	r3, #24
 801474e:	9300      	str	r3, [sp, #0]
 8014750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014754:	2200      	movs	r2, #0
 8014756:	490c      	ldr	r1, [pc, #48]	; (8014788 <tcpip_init+0x8c>)
 8014758:	480c      	ldr	r0, [pc, #48]	; (801478c <tcpip_init+0x90>)
 801475a:	f00c f8e7 	bl	802092c <sys_thread_new>
}
 801475e:	bf00      	nop
 8014760:	3708      	adds	r7, #8
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}
 8014766:	bf00      	nop
 8014768:	20008f6c 	.word	0x20008f6c
 801476c:	20008f70 	.word	0x20008f70
 8014770:	20008f74 	.word	0x20008f74
 8014774:	08022598 	.word	0x08022598
 8014778:	08022620 	.word	0x08022620
 801477c:	080225e8 	.word	0x080225e8
 8014780:	2000cc20 	.word	0x2000cc20
 8014784:	08022644 	.word	0x08022644
 8014788:	080144c1 	.word	0x080144c1
 801478c:	08022668 	.word	0x08022668

08014790 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8014790:	b480      	push	{r7}
 8014792:	b083      	sub	sp, #12
 8014794:	af00      	add	r7, sp, #0
 8014796:	4603      	mov	r3, r0
 8014798:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801479a:	88fb      	ldrh	r3, [r7, #6]
 801479c:	021b      	lsls	r3, r3, #8
 801479e:	b21a      	sxth	r2, r3
 80147a0:	88fb      	ldrh	r3, [r7, #6]
 80147a2:	0a1b      	lsrs	r3, r3, #8
 80147a4:	b29b      	uxth	r3, r3
 80147a6:	b21b      	sxth	r3, r3
 80147a8:	4313      	orrs	r3, r2
 80147aa:	b21b      	sxth	r3, r3
 80147ac:	b29b      	uxth	r3, r3
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	370c      	adds	r7, #12
 80147b2:	46bd      	mov	sp, r7
 80147b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b8:	4770      	bx	lr

080147ba <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80147ba:	b480      	push	{r7}
 80147bc:	b083      	sub	sp, #12
 80147be:	af00      	add	r7, sp, #0
 80147c0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	061a      	lsls	r2, r3, #24
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	021b      	lsls	r3, r3, #8
 80147ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80147ce:	431a      	orrs	r2, r3
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	0a1b      	lsrs	r3, r3, #8
 80147d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80147d8:	431a      	orrs	r2, r3
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	0e1b      	lsrs	r3, r3, #24
 80147de:	4313      	orrs	r3, r2
}
 80147e0:	4618      	mov	r0, r3
 80147e2:	370c      	adds	r7, #12
 80147e4:	46bd      	mov	sp, r7
 80147e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ea:	4770      	bx	lr

080147ec <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b082      	sub	sp, #8
 80147f0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80147f2:	2300      	movs	r3, #0
 80147f4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80147f6:	f00c f85b 	bl	80208b0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80147fa:	f000 f8d5 	bl	80149a8 <mem_init>
  memp_init();
 80147fe:	f000 fc31 	bl	8015064 <memp_init>
  pbuf_init();
  netif_init();
 8014802:	f000 fcf7 	bl	80151f4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8014806:	f007 f90f 	bl	801ba28 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801480a:	f001 fe39 	bl	8016480 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801480e:	f007 f853 	bl	801b8b8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8014812:	bf00      	nop
 8014814:	3708      	adds	r7, #8
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}
	...

0801481c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801481c:	b480      	push	{r7}
 801481e:	b083      	sub	sp, #12
 8014820:	af00      	add	r7, sp, #0
 8014822:	4603      	mov	r3, r0
 8014824:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8014826:	4b05      	ldr	r3, [pc, #20]	; (801483c <ptr_to_mem+0x20>)
 8014828:	681a      	ldr	r2, [r3, #0]
 801482a:	88fb      	ldrh	r3, [r7, #6]
 801482c:	4413      	add	r3, r2
}
 801482e:	4618      	mov	r0, r3
 8014830:	370c      	adds	r7, #12
 8014832:	46bd      	mov	sp, r7
 8014834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014838:	4770      	bx	lr
 801483a:	bf00      	nop
 801483c:	20008f78 	.word	0x20008f78

08014840 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8014840:	b480      	push	{r7}
 8014842:	b083      	sub	sp, #12
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	4a05      	ldr	r2, [pc, #20]	; (8014860 <mem_to_ptr+0x20>)
 801484c:	6812      	ldr	r2, [r2, #0]
 801484e:	1a9b      	subs	r3, r3, r2
 8014850:	b29b      	uxth	r3, r3
}
 8014852:	4618      	mov	r0, r3
 8014854:	370c      	adds	r7, #12
 8014856:	46bd      	mov	sp, r7
 8014858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485c:	4770      	bx	lr
 801485e:	bf00      	nop
 8014860:	20008f78 	.word	0x20008f78

08014864 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8014864:	b590      	push	{r4, r7, lr}
 8014866:	b085      	sub	sp, #20
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801486c:	4b45      	ldr	r3, [pc, #276]	; (8014984 <plug_holes+0x120>)
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	687a      	ldr	r2, [r7, #4]
 8014872:	429a      	cmp	r2, r3
 8014874:	d206      	bcs.n	8014884 <plug_holes+0x20>
 8014876:	4b44      	ldr	r3, [pc, #272]	; (8014988 <plug_holes+0x124>)
 8014878:	f240 12df 	movw	r2, #479	; 0x1df
 801487c:	4943      	ldr	r1, [pc, #268]	; (801498c <plug_holes+0x128>)
 801487e:	4844      	ldr	r0, [pc, #272]	; (8014990 <plug_holes+0x12c>)
 8014880:	f00c feb8 	bl	80215f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8014884:	4b43      	ldr	r3, [pc, #268]	; (8014994 <plug_holes+0x130>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	687a      	ldr	r2, [r7, #4]
 801488a:	429a      	cmp	r2, r3
 801488c:	d306      	bcc.n	801489c <plug_holes+0x38>
 801488e:	4b3e      	ldr	r3, [pc, #248]	; (8014988 <plug_holes+0x124>)
 8014890:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014894:	4940      	ldr	r1, [pc, #256]	; (8014998 <plug_holes+0x134>)
 8014896:	483e      	ldr	r0, [pc, #248]	; (8014990 <plug_holes+0x12c>)
 8014898:	f00c feac 	bl	80215f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	791b      	ldrb	r3, [r3, #4]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d006      	beq.n	80148b2 <plug_holes+0x4e>
 80148a4:	4b38      	ldr	r3, [pc, #224]	; (8014988 <plug_holes+0x124>)
 80148a6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80148aa:	493c      	ldr	r1, [pc, #240]	; (801499c <plug_holes+0x138>)
 80148ac:	4838      	ldr	r0, [pc, #224]	; (8014990 <plug_holes+0x12c>)
 80148ae:	f00c fea1 	bl	80215f4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	881b      	ldrh	r3, [r3, #0]
 80148b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80148ba:	d906      	bls.n	80148ca <plug_holes+0x66>
 80148bc:	4b32      	ldr	r3, [pc, #200]	; (8014988 <plug_holes+0x124>)
 80148be:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80148c2:	4937      	ldr	r1, [pc, #220]	; (80149a0 <plug_holes+0x13c>)
 80148c4:	4832      	ldr	r0, [pc, #200]	; (8014990 <plug_holes+0x12c>)
 80148c6:	f00c fe95 	bl	80215f4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	881b      	ldrh	r3, [r3, #0]
 80148ce:	4618      	mov	r0, r3
 80148d0:	f7ff ffa4 	bl	801481c <ptr_to_mem>
 80148d4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80148d6:	687a      	ldr	r2, [r7, #4]
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	429a      	cmp	r2, r3
 80148dc:	d024      	beq.n	8014928 <plug_holes+0xc4>
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	791b      	ldrb	r3, [r3, #4]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d120      	bne.n	8014928 <plug_holes+0xc4>
 80148e6:	4b2b      	ldr	r3, [pc, #172]	; (8014994 <plug_holes+0x130>)
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	68fa      	ldr	r2, [r7, #12]
 80148ec:	429a      	cmp	r2, r3
 80148ee:	d01b      	beq.n	8014928 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80148f0:	4b2c      	ldr	r3, [pc, #176]	; (80149a4 <plug_holes+0x140>)
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	68fa      	ldr	r2, [r7, #12]
 80148f6:	429a      	cmp	r2, r3
 80148f8:	d102      	bne.n	8014900 <plug_holes+0x9c>
      lfree = mem;
 80148fa:	4a2a      	ldr	r2, [pc, #168]	; (80149a4 <plug_holes+0x140>)
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	881a      	ldrh	r2, [r3, #0]
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	881b      	ldrh	r3, [r3, #0]
 801490c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014910:	d00a      	beq.n	8014928 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	881b      	ldrh	r3, [r3, #0]
 8014916:	4618      	mov	r0, r3
 8014918:	f7ff ff80 	bl	801481c <ptr_to_mem>
 801491c:	4604      	mov	r4, r0
 801491e:	6878      	ldr	r0, [r7, #4]
 8014920:	f7ff ff8e 	bl	8014840 <mem_to_ptr>
 8014924:	4603      	mov	r3, r0
 8014926:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	885b      	ldrh	r3, [r3, #2]
 801492c:	4618      	mov	r0, r3
 801492e:	f7ff ff75 	bl	801481c <ptr_to_mem>
 8014932:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8014934:	68ba      	ldr	r2, [r7, #8]
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	429a      	cmp	r2, r3
 801493a:	d01f      	beq.n	801497c <plug_holes+0x118>
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	791b      	ldrb	r3, [r3, #4]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d11b      	bne.n	801497c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8014944:	4b17      	ldr	r3, [pc, #92]	; (80149a4 <plug_holes+0x140>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	687a      	ldr	r2, [r7, #4]
 801494a:	429a      	cmp	r2, r3
 801494c:	d102      	bne.n	8014954 <plug_holes+0xf0>
      lfree = pmem;
 801494e:	4a15      	ldr	r2, [pc, #84]	; (80149a4 <plug_holes+0x140>)
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	881a      	ldrh	r2, [r3, #0]
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	881b      	ldrh	r3, [r3, #0]
 8014960:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014964:	d00a      	beq.n	801497c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	881b      	ldrh	r3, [r3, #0]
 801496a:	4618      	mov	r0, r3
 801496c:	f7ff ff56 	bl	801481c <ptr_to_mem>
 8014970:	4604      	mov	r4, r0
 8014972:	68b8      	ldr	r0, [r7, #8]
 8014974:	f7ff ff64 	bl	8014840 <mem_to_ptr>
 8014978:	4603      	mov	r3, r0
 801497a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801497c:	bf00      	nop
 801497e:	3714      	adds	r7, #20
 8014980:	46bd      	mov	sp, r7
 8014982:	bd90      	pop	{r4, r7, pc}
 8014984:	20008f78 	.word	0x20008f78
 8014988:	08022678 	.word	0x08022678
 801498c:	080226a8 	.word	0x080226a8
 8014990:	080226c0 	.word	0x080226c0
 8014994:	20008f7c 	.word	0x20008f7c
 8014998:	080226e8 	.word	0x080226e8
 801499c:	08022704 	.word	0x08022704
 80149a0:	08022720 	.word	0x08022720
 80149a4:	20008f84 	.word	0x20008f84

080149a8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b082      	sub	sp, #8
 80149ac:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80149ae:	4b1f      	ldr	r3, [pc, #124]	; (8014a2c <mem_init+0x84>)
 80149b0:	3303      	adds	r3, #3
 80149b2:	f023 0303 	bic.w	r3, r3, #3
 80149b6:	461a      	mov	r2, r3
 80149b8:	4b1d      	ldr	r3, [pc, #116]	; (8014a30 <mem_init+0x88>)
 80149ba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80149bc:	4b1c      	ldr	r3, [pc, #112]	; (8014a30 <mem_init+0x88>)
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80149c8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	2200      	movs	r2, #0
 80149ce:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2200      	movs	r2, #0
 80149d4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80149d6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80149da:	f7ff ff1f 	bl	801481c <ptr_to_mem>
 80149de:	4602      	mov	r2, r0
 80149e0:	4b14      	ldr	r3, [pc, #80]	; (8014a34 <mem_init+0x8c>)
 80149e2:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80149e4:	4b13      	ldr	r3, [pc, #76]	; (8014a34 <mem_init+0x8c>)
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	2201      	movs	r2, #1
 80149ea:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80149ec:	4b11      	ldr	r3, [pc, #68]	; (8014a34 <mem_init+0x8c>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80149f4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80149f6:	4b0f      	ldr	r3, [pc, #60]	; (8014a34 <mem_init+0x8c>)
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80149fe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8014a00:	4b0b      	ldr	r3, [pc, #44]	; (8014a30 <mem_init+0x88>)
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	4a0c      	ldr	r2, [pc, #48]	; (8014a38 <mem_init+0x90>)
 8014a06:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8014a08:	480c      	ldr	r0, [pc, #48]	; (8014a3c <mem_init+0x94>)
 8014a0a:	f00b ff5d 	bl	80208c8 <sys_mutex_new>
 8014a0e:	4603      	mov	r3, r0
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d006      	beq.n	8014a22 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8014a14:	4b0a      	ldr	r3, [pc, #40]	; (8014a40 <mem_init+0x98>)
 8014a16:	f240 221f 	movw	r2, #543	; 0x21f
 8014a1a:	490a      	ldr	r1, [pc, #40]	; (8014a44 <mem_init+0x9c>)
 8014a1c:	480a      	ldr	r0, [pc, #40]	; (8014a48 <mem_init+0xa0>)
 8014a1e:	f00c fde9 	bl	80215f4 <iprintf>
  }
}
 8014a22:	bf00      	nop
 8014a24:	3708      	adds	r7, #8
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bd80      	pop	{r7, pc}
 8014a2a:	bf00      	nop
 8014a2c:	2000cc3c 	.word	0x2000cc3c
 8014a30:	20008f78 	.word	0x20008f78
 8014a34:	20008f7c 	.word	0x20008f7c
 8014a38:	20008f84 	.word	0x20008f84
 8014a3c:	20008f80 	.word	0x20008f80
 8014a40:	08022678 	.word	0x08022678
 8014a44:	0802274c 	.word	0x0802274c
 8014a48:	080226c0 	.word	0x080226c0

08014a4c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b086      	sub	sp, #24
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8014a54:	6878      	ldr	r0, [r7, #4]
 8014a56:	f7ff fef3 	bl	8014840 <mem_to_ptr>
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	881b      	ldrh	r3, [r3, #0]
 8014a62:	4618      	mov	r0, r3
 8014a64:	f7ff feda 	bl	801481c <ptr_to_mem>
 8014a68:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	885b      	ldrh	r3, [r3, #2]
 8014a6e:	4618      	mov	r0, r3
 8014a70:	f7ff fed4 	bl	801481c <ptr_to_mem>
 8014a74:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	881b      	ldrh	r3, [r3, #0]
 8014a7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014a7e:	d818      	bhi.n	8014ab2 <mem_link_valid+0x66>
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	885b      	ldrh	r3, [r3, #2]
 8014a84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014a88:	d813      	bhi.n	8014ab2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014a8e:	8afa      	ldrh	r2, [r7, #22]
 8014a90:	429a      	cmp	r2, r3
 8014a92:	d004      	beq.n	8014a9e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	881b      	ldrh	r3, [r3, #0]
 8014a98:	8afa      	ldrh	r2, [r7, #22]
 8014a9a:	429a      	cmp	r2, r3
 8014a9c:	d109      	bne.n	8014ab2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014a9e:	4b08      	ldr	r3, [pc, #32]	; (8014ac0 <mem_link_valid+0x74>)
 8014aa0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014aa2:	693a      	ldr	r2, [r7, #16]
 8014aa4:	429a      	cmp	r2, r3
 8014aa6:	d006      	beq.n	8014ab6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014aa8:	693b      	ldr	r3, [r7, #16]
 8014aaa:	885b      	ldrh	r3, [r3, #2]
 8014aac:	8afa      	ldrh	r2, [r7, #22]
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	d001      	beq.n	8014ab6 <mem_link_valid+0x6a>
    return 0;
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	e000      	b.n	8014ab8 <mem_link_valid+0x6c>
  }
  return 1;
 8014ab6:	2301      	movs	r3, #1
}
 8014ab8:	4618      	mov	r0, r3
 8014aba:	3718      	adds	r7, #24
 8014abc:	46bd      	mov	sp, r7
 8014abe:	bd80      	pop	{r7, pc}
 8014ac0:	20008f7c 	.word	0x20008f7c

08014ac4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b088      	sub	sp, #32
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d070      	beq.n	8014bb4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	f003 0303 	and.w	r3, r3, #3
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d00d      	beq.n	8014af8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8014adc:	4b37      	ldr	r3, [pc, #220]	; (8014bbc <mem_free+0xf8>)
 8014ade:	f240 2273 	movw	r2, #627	; 0x273
 8014ae2:	4937      	ldr	r1, [pc, #220]	; (8014bc0 <mem_free+0xfc>)
 8014ae4:	4837      	ldr	r0, [pc, #220]	; (8014bc4 <mem_free+0x100>)
 8014ae6:	f00c fd85 	bl	80215f4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014aea:	f00b ff3f 	bl	802096c <sys_arch_protect>
 8014aee:	60f8      	str	r0, [r7, #12]
 8014af0:	68f8      	ldr	r0, [r7, #12]
 8014af2:	f00b ff49 	bl	8020988 <sys_arch_unprotect>
    return;
 8014af6:	e05e      	b.n	8014bb6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	3b08      	subs	r3, #8
 8014afc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8014afe:	4b32      	ldr	r3, [pc, #200]	; (8014bc8 <mem_free+0x104>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	69fa      	ldr	r2, [r7, #28]
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d306      	bcc.n	8014b16 <mem_free+0x52>
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	f103 020c 	add.w	r2, r3, #12
 8014b0e:	4b2f      	ldr	r3, [pc, #188]	; (8014bcc <mem_free+0x108>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	429a      	cmp	r2, r3
 8014b14:	d90d      	bls.n	8014b32 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8014b16:	4b29      	ldr	r3, [pc, #164]	; (8014bbc <mem_free+0xf8>)
 8014b18:	f240 227f 	movw	r2, #639	; 0x27f
 8014b1c:	492c      	ldr	r1, [pc, #176]	; (8014bd0 <mem_free+0x10c>)
 8014b1e:	4829      	ldr	r0, [pc, #164]	; (8014bc4 <mem_free+0x100>)
 8014b20:	f00c fd68 	bl	80215f4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014b24:	f00b ff22 	bl	802096c <sys_arch_protect>
 8014b28:	6138      	str	r0, [r7, #16]
 8014b2a:	6938      	ldr	r0, [r7, #16]
 8014b2c:	f00b ff2c 	bl	8020988 <sys_arch_unprotect>
    return;
 8014b30:	e041      	b.n	8014bb6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8014b32:	4828      	ldr	r0, [pc, #160]	; (8014bd4 <mem_free+0x110>)
 8014b34:	f00b fede 	bl	80208f4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8014b38:	69fb      	ldr	r3, [r7, #28]
 8014b3a:	791b      	ldrb	r3, [r3, #4]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d110      	bne.n	8014b62 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8014b40:	4b1e      	ldr	r3, [pc, #120]	; (8014bbc <mem_free+0xf8>)
 8014b42:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8014b46:	4924      	ldr	r1, [pc, #144]	; (8014bd8 <mem_free+0x114>)
 8014b48:	481e      	ldr	r0, [pc, #120]	; (8014bc4 <mem_free+0x100>)
 8014b4a:	f00c fd53 	bl	80215f4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014b4e:	4821      	ldr	r0, [pc, #132]	; (8014bd4 <mem_free+0x110>)
 8014b50:	f00b fedf 	bl	8020912 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014b54:	f00b ff0a 	bl	802096c <sys_arch_protect>
 8014b58:	6178      	str	r0, [r7, #20]
 8014b5a:	6978      	ldr	r0, [r7, #20]
 8014b5c:	f00b ff14 	bl	8020988 <sys_arch_unprotect>
    return;
 8014b60:	e029      	b.n	8014bb6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8014b62:	69f8      	ldr	r0, [r7, #28]
 8014b64:	f7ff ff72 	bl	8014a4c <mem_link_valid>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d110      	bne.n	8014b90 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8014b6e:	4b13      	ldr	r3, [pc, #76]	; (8014bbc <mem_free+0xf8>)
 8014b70:	f240 2295 	movw	r2, #661	; 0x295
 8014b74:	4919      	ldr	r1, [pc, #100]	; (8014bdc <mem_free+0x118>)
 8014b76:	4813      	ldr	r0, [pc, #76]	; (8014bc4 <mem_free+0x100>)
 8014b78:	f00c fd3c 	bl	80215f4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014b7c:	4815      	ldr	r0, [pc, #84]	; (8014bd4 <mem_free+0x110>)
 8014b7e:	f00b fec8 	bl	8020912 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014b82:	f00b fef3 	bl	802096c <sys_arch_protect>
 8014b86:	61b8      	str	r0, [r7, #24]
 8014b88:	69b8      	ldr	r0, [r7, #24]
 8014b8a:	f00b fefd 	bl	8020988 <sys_arch_unprotect>
    return;
 8014b8e:	e012      	b.n	8014bb6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8014b90:	69fb      	ldr	r3, [r7, #28]
 8014b92:	2200      	movs	r2, #0
 8014b94:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8014b96:	4b12      	ldr	r3, [pc, #72]	; (8014be0 <mem_free+0x11c>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	69fa      	ldr	r2, [r7, #28]
 8014b9c:	429a      	cmp	r2, r3
 8014b9e:	d202      	bcs.n	8014ba6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8014ba0:	4a0f      	ldr	r2, [pc, #60]	; (8014be0 <mem_free+0x11c>)
 8014ba2:	69fb      	ldr	r3, [r7, #28]
 8014ba4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8014ba6:	69f8      	ldr	r0, [r7, #28]
 8014ba8:	f7ff fe5c 	bl	8014864 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014bac:	4809      	ldr	r0, [pc, #36]	; (8014bd4 <mem_free+0x110>)
 8014bae:	f00b feb0 	bl	8020912 <sys_mutex_unlock>
 8014bb2:	e000      	b.n	8014bb6 <mem_free+0xf2>
    return;
 8014bb4:	bf00      	nop
}
 8014bb6:	3720      	adds	r7, #32
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}
 8014bbc:	08022678 	.word	0x08022678
 8014bc0:	08022768 	.word	0x08022768
 8014bc4:	080226c0 	.word	0x080226c0
 8014bc8:	20008f78 	.word	0x20008f78
 8014bcc:	20008f7c 	.word	0x20008f7c
 8014bd0:	0802278c 	.word	0x0802278c
 8014bd4:	20008f80 	.word	0x20008f80
 8014bd8:	080227a8 	.word	0x080227a8
 8014bdc:	080227d0 	.word	0x080227d0
 8014be0:	20008f84 	.word	0x20008f84

08014be4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b088      	sub	sp, #32
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
 8014bec:	460b      	mov	r3, r1
 8014bee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8014bf0:	887b      	ldrh	r3, [r7, #2]
 8014bf2:	3303      	adds	r3, #3
 8014bf4:	b29b      	uxth	r3, r3
 8014bf6:	f023 0303 	bic.w	r3, r3, #3
 8014bfa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8014bfc:	8bfb      	ldrh	r3, [r7, #30]
 8014bfe:	2b0b      	cmp	r3, #11
 8014c00:	d801      	bhi.n	8014c06 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8014c02:	230c      	movs	r3, #12
 8014c04:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8014c06:	8bfb      	ldrh	r3, [r7, #30]
 8014c08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014c0c:	d803      	bhi.n	8014c16 <mem_trim+0x32>
 8014c0e:	8bfa      	ldrh	r2, [r7, #30]
 8014c10:	887b      	ldrh	r3, [r7, #2]
 8014c12:	429a      	cmp	r2, r3
 8014c14:	d201      	bcs.n	8014c1a <mem_trim+0x36>
    return NULL;
 8014c16:	2300      	movs	r3, #0
 8014c18:	e0d8      	b.n	8014dcc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8014c1a:	4b6e      	ldr	r3, [pc, #440]	; (8014dd4 <mem_trim+0x1f0>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	687a      	ldr	r2, [r7, #4]
 8014c20:	429a      	cmp	r2, r3
 8014c22:	d304      	bcc.n	8014c2e <mem_trim+0x4a>
 8014c24:	4b6c      	ldr	r3, [pc, #432]	; (8014dd8 <mem_trim+0x1f4>)
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	687a      	ldr	r2, [r7, #4]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	d306      	bcc.n	8014c3c <mem_trim+0x58>
 8014c2e:	4b6b      	ldr	r3, [pc, #428]	; (8014ddc <mem_trim+0x1f8>)
 8014c30:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014c34:	496a      	ldr	r1, [pc, #424]	; (8014de0 <mem_trim+0x1fc>)
 8014c36:	486b      	ldr	r0, [pc, #428]	; (8014de4 <mem_trim+0x200>)
 8014c38:	f00c fcdc 	bl	80215f4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8014c3c:	4b65      	ldr	r3, [pc, #404]	; (8014dd4 <mem_trim+0x1f0>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	687a      	ldr	r2, [r7, #4]
 8014c42:	429a      	cmp	r2, r3
 8014c44:	d304      	bcc.n	8014c50 <mem_trim+0x6c>
 8014c46:	4b64      	ldr	r3, [pc, #400]	; (8014dd8 <mem_trim+0x1f4>)
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	687a      	ldr	r2, [r7, #4]
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d307      	bcc.n	8014c60 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014c50:	f00b fe8c 	bl	802096c <sys_arch_protect>
 8014c54:	60b8      	str	r0, [r7, #8]
 8014c56:	68b8      	ldr	r0, [r7, #8]
 8014c58:	f00b fe96 	bl	8020988 <sys_arch_unprotect>
    return rmem;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	e0b5      	b.n	8014dcc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	3b08      	subs	r3, #8
 8014c64:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8014c66:	69b8      	ldr	r0, [r7, #24]
 8014c68:	f7ff fdea 	bl	8014840 <mem_to_ptr>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8014c70:	69bb      	ldr	r3, [r7, #24]
 8014c72:	881a      	ldrh	r2, [r3, #0]
 8014c74:	8afb      	ldrh	r3, [r7, #22]
 8014c76:	1ad3      	subs	r3, r2, r3
 8014c78:	b29b      	uxth	r3, r3
 8014c7a:	3b08      	subs	r3, #8
 8014c7c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8014c7e:	8bfa      	ldrh	r2, [r7, #30]
 8014c80:	8abb      	ldrh	r3, [r7, #20]
 8014c82:	429a      	cmp	r2, r3
 8014c84:	d906      	bls.n	8014c94 <mem_trim+0xb0>
 8014c86:	4b55      	ldr	r3, [pc, #340]	; (8014ddc <mem_trim+0x1f8>)
 8014c88:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8014c8c:	4956      	ldr	r1, [pc, #344]	; (8014de8 <mem_trim+0x204>)
 8014c8e:	4855      	ldr	r0, [pc, #340]	; (8014de4 <mem_trim+0x200>)
 8014c90:	f00c fcb0 	bl	80215f4 <iprintf>
  if (newsize > size) {
 8014c94:	8bfa      	ldrh	r2, [r7, #30]
 8014c96:	8abb      	ldrh	r3, [r7, #20]
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	d901      	bls.n	8014ca0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	e095      	b.n	8014dcc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8014ca0:	8bfa      	ldrh	r2, [r7, #30]
 8014ca2:	8abb      	ldrh	r3, [r7, #20]
 8014ca4:	429a      	cmp	r2, r3
 8014ca6:	d101      	bne.n	8014cac <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	e08f      	b.n	8014dcc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8014cac:	484f      	ldr	r0, [pc, #316]	; (8014dec <mem_trim+0x208>)
 8014cae:	f00b fe21 	bl	80208f4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8014cb2:	69bb      	ldr	r3, [r7, #24]
 8014cb4:	881b      	ldrh	r3, [r3, #0]
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f7ff fdb0 	bl	801481c <ptr_to_mem>
 8014cbc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8014cbe:	693b      	ldr	r3, [r7, #16]
 8014cc0:	791b      	ldrb	r3, [r3, #4]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d13f      	bne.n	8014d46 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014cc6:	69bb      	ldr	r3, [r7, #24]
 8014cc8:	881b      	ldrh	r3, [r3, #0]
 8014cca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014cce:	d106      	bne.n	8014cde <mem_trim+0xfa>
 8014cd0:	4b42      	ldr	r3, [pc, #264]	; (8014ddc <mem_trim+0x1f8>)
 8014cd2:	f240 22f5 	movw	r2, #757	; 0x2f5
 8014cd6:	4946      	ldr	r1, [pc, #280]	; (8014df0 <mem_trim+0x20c>)
 8014cd8:	4842      	ldr	r0, [pc, #264]	; (8014de4 <mem_trim+0x200>)
 8014cda:	f00c fc8b 	bl	80215f4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8014cde:	693b      	ldr	r3, [r7, #16]
 8014ce0:	881b      	ldrh	r3, [r3, #0]
 8014ce2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014ce4:	8afa      	ldrh	r2, [r7, #22]
 8014ce6:	8bfb      	ldrh	r3, [r7, #30]
 8014ce8:	4413      	add	r3, r2
 8014cea:	b29b      	uxth	r3, r3
 8014cec:	3308      	adds	r3, #8
 8014cee:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8014cf0:	4b40      	ldr	r3, [pc, #256]	; (8014df4 <mem_trim+0x210>)
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	693a      	ldr	r2, [r7, #16]
 8014cf6:	429a      	cmp	r2, r3
 8014cf8:	d106      	bne.n	8014d08 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8014cfa:	89fb      	ldrh	r3, [r7, #14]
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7ff fd8d 	bl	801481c <ptr_to_mem>
 8014d02:	4602      	mov	r2, r0
 8014d04:	4b3b      	ldr	r3, [pc, #236]	; (8014df4 <mem_trim+0x210>)
 8014d06:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8014d08:	89fb      	ldrh	r3, [r7, #14]
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f7ff fd86 	bl	801481c <ptr_to_mem>
 8014d10:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8014d12:	693b      	ldr	r3, [r7, #16]
 8014d14:	2200      	movs	r2, #0
 8014d16:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8014d18:	693b      	ldr	r3, [r7, #16]
 8014d1a:	89ba      	ldrh	r2, [r7, #12]
 8014d1c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8014d1e:	693b      	ldr	r3, [r7, #16]
 8014d20:	8afa      	ldrh	r2, [r7, #22]
 8014d22:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8014d24:	69bb      	ldr	r3, [r7, #24]
 8014d26:	89fa      	ldrh	r2, [r7, #14]
 8014d28:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014d2a:	693b      	ldr	r3, [r7, #16]
 8014d2c:	881b      	ldrh	r3, [r3, #0]
 8014d2e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014d32:	d047      	beq.n	8014dc4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014d34:	693b      	ldr	r3, [r7, #16]
 8014d36:	881b      	ldrh	r3, [r3, #0]
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f7ff fd6f 	bl	801481c <ptr_to_mem>
 8014d3e:	4602      	mov	r2, r0
 8014d40:	89fb      	ldrh	r3, [r7, #14]
 8014d42:	8053      	strh	r3, [r2, #2]
 8014d44:	e03e      	b.n	8014dc4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8014d46:	8bfb      	ldrh	r3, [r7, #30]
 8014d48:	f103 0214 	add.w	r2, r3, #20
 8014d4c:	8abb      	ldrh	r3, [r7, #20]
 8014d4e:	429a      	cmp	r2, r3
 8014d50:	d838      	bhi.n	8014dc4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014d52:	8afa      	ldrh	r2, [r7, #22]
 8014d54:	8bfb      	ldrh	r3, [r7, #30]
 8014d56:	4413      	add	r3, r2
 8014d58:	b29b      	uxth	r3, r3
 8014d5a:	3308      	adds	r3, #8
 8014d5c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014d5e:	69bb      	ldr	r3, [r7, #24]
 8014d60:	881b      	ldrh	r3, [r3, #0]
 8014d62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014d66:	d106      	bne.n	8014d76 <mem_trim+0x192>
 8014d68:	4b1c      	ldr	r3, [pc, #112]	; (8014ddc <mem_trim+0x1f8>)
 8014d6a:	f240 3216 	movw	r2, #790	; 0x316
 8014d6e:	4920      	ldr	r1, [pc, #128]	; (8014df0 <mem_trim+0x20c>)
 8014d70:	481c      	ldr	r0, [pc, #112]	; (8014de4 <mem_trim+0x200>)
 8014d72:	f00c fc3f 	bl	80215f4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8014d76:	89fb      	ldrh	r3, [r7, #14]
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f7ff fd4f 	bl	801481c <ptr_to_mem>
 8014d7e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8014d80:	4b1c      	ldr	r3, [pc, #112]	; (8014df4 <mem_trim+0x210>)
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	693a      	ldr	r2, [r7, #16]
 8014d86:	429a      	cmp	r2, r3
 8014d88:	d202      	bcs.n	8014d90 <mem_trim+0x1ac>
      lfree = mem2;
 8014d8a:	4a1a      	ldr	r2, [pc, #104]	; (8014df4 <mem_trim+0x210>)
 8014d8c:	693b      	ldr	r3, [r7, #16]
 8014d8e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8014d90:	693b      	ldr	r3, [r7, #16]
 8014d92:	2200      	movs	r2, #0
 8014d94:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8014d96:	69bb      	ldr	r3, [r7, #24]
 8014d98:	881a      	ldrh	r2, [r3, #0]
 8014d9a:	693b      	ldr	r3, [r7, #16]
 8014d9c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8014d9e:	693b      	ldr	r3, [r7, #16]
 8014da0:	8afa      	ldrh	r2, [r7, #22]
 8014da2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8014da4:	69bb      	ldr	r3, [r7, #24]
 8014da6:	89fa      	ldrh	r2, [r7, #14]
 8014da8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014daa:	693b      	ldr	r3, [r7, #16]
 8014dac:	881b      	ldrh	r3, [r3, #0]
 8014dae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014db2:	d007      	beq.n	8014dc4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	881b      	ldrh	r3, [r3, #0]
 8014db8:	4618      	mov	r0, r3
 8014dba:	f7ff fd2f 	bl	801481c <ptr_to_mem>
 8014dbe:	4602      	mov	r2, r0
 8014dc0:	89fb      	ldrh	r3, [r7, #14]
 8014dc2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014dc4:	4809      	ldr	r0, [pc, #36]	; (8014dec <mem_trim+0x208>)
 8014dc6:	f00b fda4 	bl	8020912 <sys_mutex_unlock>
  return rmem;
 8014dca:	687b      	ldr	r3, [r7, #4]
}
 8014dcc:	4618      	mov	r0, r3
 8014dce:	3720      	adds	r7, #32
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	bd80      	pop	{r7, pc}
 8014dd4:	20008f78 	.word	0x20008f78
 8014dd8:	20008f7c 	.word	0x20008f7c
 8014ddc:	08022678 	.word	0x08022678
 8014de0:	08022804 	.word	0x08022804
 8014de4:	080226c0 	.word	0x080226c0
 8014de8:	0802281c 	.word	0x0802281c
 8014dec:	20008f80 	.word	0x20008f80
 8014df0:	0802283c 	.word	0x0802283c
 8014df4:	20008f84 	.word	0x20008f84

08014df8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b088      	sub	sp, #32
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	4603      	mov	r3, r0
 8014e00:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8014e02:	88fb      	ldrh	r3, [r7, #6]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d101      	bne.n	8014e0c <mem_malloc+0x14>
    return NULL;
 8014e08:	2300      	movs	r3, #0
 8014e0a:	e0e2      	b.n	8014fd2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8014e0c:	88fb      	ldrh	r3, [r7, #6]
 8014e0e:	3303      	adds	r3, #3
 8014e10:	b29b      	uxth	r3, r3
 8014e12:	f023 0303 	bic.w	r3, r3, #3
 8014e16:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8014e18:	8bbb      	ldrh	r3, [r7, #28]
 8014e1a:	2b0b      	cmp	r3, #11
 8014e1c:	d801      	bhi.n	8014e22 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8014e1e:	230c      	movs	r3, #12
 8014e20:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8014e22:	8bbb      	ldrh	r3, [r7, #28]
 8014e24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014e28:	d803      	bhi.n	8014e32 <mem_malloc+0x3a>
 8014e2a:	8bba      	ldrh	r2, [r7, #28]
 8014e2c:	88fb      	ldrh	r3, [r7, #6]
 8014e2e:	429a      	cmp	r2, r3
 8014e30:	d201      	bcs.n	8014e36 <mem_malloc+0x3e>
    return NULL;
 8014e32:	2300      	movs	r3, #0
 8014e34:	e0cd      	b.n	8014fd2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8014e36:	4869      	ldr	r0, [pc, #420]	; (8014fdc <mem_malloc+0x1e4>)
 8014e38:	f00b fd5c 	bl	80208f4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014e3c:	4b68      	ldr	r3, [pc, #416]	; (8014fe0 <mem_malloc+0x1e8>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	4618      	mov	r0, r3
 8014e42:	f7ff fcfd 	bl	8014840 <mem_to_ptr>
 8014e46:	4603      	mov	r3, r0
 8014e48:	83fb      	strh	r3, [r7, #30]
 8014e4a:	e0b7      	b.n	8014fbc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8014e4c:	8bfb      	ldrh	r3, [r7, #30]
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f7ff fce4 	bl	801481c <ptr_to_mem>
 8014e54:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	791b      	ldrb	r3, [r3, #4]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	f040 80a7 	bne.w	8014fae <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	881b      	ldrh	r3, [r3, #0]
 8014e64:	461a      	mov	r2, r3
 8014e66:	8bfb      	ldrh	r3, [r7, #30]
 8014e68:	1ad3      	subs	r3, r2, r3
 8014e6a:	f1a3 0208 	sub.w	r2, r3, #8
 8014e6e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8014e70:	429a      	cmp	r2, r3
 8014e72:	f0c0 809c 	bcc.w	8014fae <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8014e76:	697b      	ldr	r3, [r7, #20]
 8014e78:	881b      	ldrh	r3, [r3, #0]
 8014e7a:	461a      	mov	r2, r3
 8014e7c:	8bfb      	ldrh	r3, [r7, #30]
 8014e7e:	1ad3      	subs	r3, r2, r3
 8014e80:	f1a3 0208 	sub.w	r2, r3, #8
 8014e84:	8bbb      	ldrh	r3, [r7, #28]
 8014e86:	3314      	adds	r3, #20
 8014e88:	429a      	cmp	r2, r3
 8014e8a:	d333      	bcc.n	8014ef4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8014e8c:	8bfa      	ldrh	r2, [r7, #30]
 8014e8e:	8bbb      	ldrh	r3, [r7, #28]
 8014e90:	4413      	add	r3, r2
 8014e92:	b29b      	uxth	r3, r3
 8014e94:	3308      	adds	r3, #8
 8014e96:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8014e98:	8a7b      	ldrh	r3, [r7, #18]
 8014e9a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014e9e:	d106      	bne.n	8014eae <mem_malloc+0xb6>
 8014ea0:	4b50      	ldr	r3, [pc, #320]	; (8014fe4 <mem_malloc+0x1ec>)
 8014ea2:	f240 3287 	movw	r2, #903	; 0x387
 8014ea6:	4950      	ldr	r1, [pc, #320]	; (8014fe8 <mem_malloc+0x1f0>)
 8014ea8:	4850      	ldr	r0, [pc, #320]	; (8014fec <mem_malloc+0x1f4>)
 8014eaa:	f00c fba3 	bl	80215f4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8014eae:	8a7b      	ldrh	r3, [r7, #18]
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7ff fcb3 	bl	801481c <ptr_to_mem>
 8014eb6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	2200      	movs	r2, #0
 8014ebc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8014ebe:	697b      	ldr	r3, [r7, #20]
 8014ec0:	881a      	ldrh	r2, [r3, #0]
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	8bfa      	ldrh	r2, [r7, #30]
 8014eca:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8014ecc:	697b      	ldr	r3, [r7, #20]
 8014ece:	8a7a      	ldrh	r2, [r7, #18]
 8014ed0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8014ed2:	697b      	ldr	r3, [r7, #20]
 8014ed4:	2201      	movs	r2, #1
 8014ed6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	881b      	ldrh	r3, [r3, #0]
 8014edc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014ee0:	d00b      	beq.n	8014efa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	881b      	ldrh	r3, [r3, #0]
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	f7ff fc98 	bl	801481c <ptr_to_mem>
 8014eec:	4602      	mov	r2, r0
 8014eee:	8a7b      	ldrh	r3, [r7, #18]
 8014ef0:	8053      	strh	r3, [r2, #2]
 8014ef2:	e002      	b.n	8014efa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014ef4:	697b      	ldr	r3, [r7, #20]
 8014ef6:	2201      	movs	r2, #1
 8014ef8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8014efa:	4b39      	ldr	r3, [pc, #228]	; (8014fe0 <mem_malloc+0x1e8>)
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	697a      	ldr	r2, [r7, #20]
 8014f00:	429a      	cmp	r2, r3
 8014f02:	d127      	bne.n	8014f54 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8014f04:	4b36      	ldr	r3, [pc, #216]	; (8014fe0 <mem_malloc+0x1e8>)
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8014f0a:	e005      	b.n	8014f18 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8014f0c:	69bb      	ldr	r3, [r7, #24]
 8014f0e:	881b      	ldrh	r3, [r3, #0]
 8014f10:	4618      	mov	r0, r3
 8014f12:	f7ff fc83 	bl	801481c <ptr_to_mem>
 8014f16:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8014f18:	69bb      	ldr	r3, [r7, #24]
 8014f1a:	791b      	ldrb	r3, [r3, #4]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d004      	beq.n	8014f2a <mem_malloc+0x132>
 8014f20:	4b33      	ldr	r3, [pc, #204]	; (8014ff0 <mem_malloc+0x1f8>)
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	69ba      	ldr	r2, [r7, #24]
 8014f26:	429a      	cmp	r2, r3
 8014f28:	d1f0      	bne.n	8014f0c <mem_malloc+0x114>
          }
          lfree = cur;
 8014f2a:	4a2d      	ldr	r2, [pc, #180]	; (8014fe0 <mem_malloc+0x1e8>)
 8014f2c:	69bb      	ldr	r3, [r7, #24]
 8014f2e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8014f30:	4b2b      	ldr	r3, [pc, #172]	; (8014fe0 <mem_malloc+0x1e8>)
 8014f32:	681a      	ldr	r2, [r3, #0]
 8014f34:	4b2e      	ldr	r3, [pc, #184]	; (8014ff0 <mem_malloc+0x1f8>)
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	429a      	cmp	r2, r3
 8014f3a:	d00b      	beq.n	8014f54 <mem_malloc+0x15c>
 8014f3c:	4b28      	ldr	r3, [pc, #160]	; (8014fe0 <mem_malloc+0x1e8>)
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	791b      	ldrb	r3, [r3, #4]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d006      	beq.n	8014f54 <mem_malloc+0x15c>
 8014f46:	4b27      	ldr	r3, [pc, #156]	; (8014fe4 <mem_malloc+0x1ec>)
 8014f48:	f240 32b5 	movw	r2, #949	; 0x3b5
 8014f4c:	4929      	ldr	r1, [pc, #164]	; (8014ff4 <mem_malloc+0x1fc>)
 8014f4e:	4827      	ldr	r0, [pc, #156]	; (8014fec <mem_malloc+0x1f4>)
 8014f50:	f00c fb50 	bl	80215f4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8014f54:	4821      	ldr	r0, [pc, #132]	; (8014fdc <mem_malloc+0x1e4>)
 8014f56:	f00b fcdc 	bl	8020912 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8014f5a:	8bba      	ldrh	r2, [r7, #28]
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	4413      	add	r3, r2
 8014f60:	3308      	adds	r3, #8
 8014f62:	4a23      	ldr	r2, [pc, #140]	; (8014ff0 <mem_malloc+0x1f8>)
 8014f64:	6812      	ldr	r2, [r2, #0]
 8014f66:	4293      	cmp	r3, r2
 8014f68:	d906      	bls.n	8014f78 <mem_malloc+0x180>
 8014f6a:	4b1e      	ldr	r3, [pc, #120]	; (8014fe4 <mem_malloc+0x1ec>)
 8014f6c:	f240 32ba 	movw	r2, #954	; 0x3ba
 8014f70:	4921      	ldr	r1, [pc, #132]	; (8014ff8 <mem_malloc+0x200>)
 8014f72:	481e      	ldr	r0, [pc, #120]	; (8014fec <mem_malloc+0x1f4>)
 8014f74:	f00c fb3e 	bl	80215f4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8014f78:	697b      	ldr	r3, [r7, #20]
 8014f7a:	f003 0303 	and.w	r3, r3, #3
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d006      	beq.n	8014f90 <mem_malloc+0x198>
 8014f82:	4b18      	ldr	r3, [pc, #96]	; (8014fe4 <mem_malloc+0x1ec>)
 8014f84:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8014f88:	491c      	ldr	r1, [pc, #112]	; (8014ffc <mem_malloc+0x204>)
 8014f8a:	4818      	ldr	r0, [pc, #96]	; (8014fec <mem_malloc+0x1f4>)
 8014f8c:	f00c fb32 	bl	80215f4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8014f90:	697b      	ldr	r3, [r7, #20]
 8014f92:	f003 0303 	and.w	r3, r3, #3
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d006      	beq.n	8014fa8 <mem_malloc+0x1b0>
 8014f9a:	4b12      	ldr	r3, [pc, #72]	; (8014fe4 <mem_malloc+0x1ec>)
 8014f9c:	f240 32be 	movw	r2, #958	; 0x3be
 8014fa0:	4917      	ldr	r1, [pc, #92]	; (8015000 <mem_malloc+0x208>)
 8014fa2:	4812      	ldr	r0, [pc, #72]	; (8014fec <mem_malloc+0x1f4>)
 8014fa4:	f00c fb26 	bl	80215f4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8014fa8:	697b      	ldr	r3, [r7, #20]
 8014faa:	3308      	adds	r3, #8
 8014fac:	e011      	b.n	8014fd2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8014fae:	8bfb      	ldrh	r3, [r7, #30]
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f7ff fc33 	bl	801481c <ptr_to_mem>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	881b      	ldrh	r3, [r3, #0]
 8014fba:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014fbc:	8bfa      	ldrh	r2, [r7, #30]
 8014fbe:	8bbb      	ldrh	r3, [r7, #28]
 8014fc0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	f4ff af41 	bcc.w	8014e4c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8014fca:	4804      	ldr	r0, [pc, #16]	; (8014fdc <mem_malloc+0x1e4>)
 8014fcc:	f00b fca1 	bl	8020912 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8014fd0:	2300      	movs	r3, #0
}
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	3720      	adds	r7, #32
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	bd80      	pop	{r7, pc}
 8014fda:	bf00      	nop
 8014fdc:	20008f80 	.word	0x20008f80
 8014fe0:	20008f84 	.word	0x20008f84
 8014fe4:	08022678 	.word	0x08022678
 8014fe8:	0802283c 	.word	0x0802283c
 8014fec:	080226c0 	.word	0x080226c0
 8014ff0:	20008f7c 	.word	0x20008f7c
 8014ff4:	08022850 	.word	0x08022850
 8014ff8:	0802286c 	.word	0x0802286c
 8014ffc:	0802289c 	.word	0x0802289c
 8015000:	080228cc 	.word	0x080228cc

08015004 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8015004:	b480      	push	{r7}
 8015006:	b085      	sub	sp, #20
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	689b      	ldr	r3, [r3, #8]
 8015010:	2200      	movs	r2, #0
 8015012:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	685b      	ldr	r3, [r3, #4]
 8015018:	3303      	adds	r3, #3
 801501a:	f023 0303 	bic.w	r3, r3, #3
 801501e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8015020:	2300      	movs	r3, #0
 8015022:	60fb      	str	r3, [r7, #12]
 8015024:	e011      	b.n	801504a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	689b      	ldr	r3, [r3, #8]
 801502a:	681a      	ldr	r2, [r3, #0]
 801502c:	68bb      	ldr	r3, [r7, #8]
 801502e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	689b      	ldr	r3, [r3, #8]
 8015034:	68ba      	ldr	r2, [r7, #8]
 8015036:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	881b      	ldrh	r3, [r3, #0]
 801503c:	461a      	mov	r2, r3
 801503e:	68bb      	ldr	r3, [r7, #8]
 8015040:	4413      	add	r3, r2
 8015042:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	3301      	adds	r3, #1
 8015048:	60fb      	str	r3, [r7, #12]
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	885b      	ldrh	r3, [r3, #2]
 801504e:	461a      	mov	r2, r3
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	4293      	cmp	r3, r2
 8015054:	dbe7      	blt.n	8015026 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8015056:	bf00      	nop
 8015058:	3714      	adds	r7, #20
 801505a:	46bd      	mov	sp, r7
 801505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015060:	4770      	bx	lr
	...

08015064 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b082      	sub	sp, #8
 8015068:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801506a:	2300      	movs	r3, #0
 801506c:	80fb      	strh	r3, [r7, #6]
 801506e:	e009      	b.n	8015084 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8015070:	88fb      	ldrh	r3, [r7, #6]
 8015072:	4a08      	ldr	r2, [pc, #32]	; (8015094 <memp_init+0x30>)
 8015074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015078:	4618      	mov	r0, r3
 801507a:	f7ff ffc3 	bl	8015004 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801507e:	88fb      	ldrh	r3, [r7, #6]
 8015080:	3301      	adds	r3, #1
 8015082:	80fb      	strh	r3, [r7, #6]
 8015084:	88fb      	ldrh	r3, [r7, #6]
 8015086:	2b0c      	cmp	r3, #12
 8015088:	d9f2      	bls.n	8015070 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801508a:	bf00      	nop
 801508c:	3708      	adds	r7, #8
 801508e:	46bd      	mov	sp, r7
 8015090:	bd80      	pop	{r7, pc}
 8015092:	bf00      	nop
 8015094:	080254c4 	.word	0x080254c4

08015098 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b084      	sub	sp, #16
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80150a0:	f00b fc64 	bl	802096c <sys_arch_protect>
 80150a4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	689b      	ldr	r3, [r3, #8]
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80150ae:	68bb      	ldr	r3, [r7, #8]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d015      	beq.n	80150e0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	689b      	ldr	r3, [r3, #8]
 80150b8:	68ba      	ldr	r2, [r7, #8]
 80150ba:	6812      	ldr	r2, [r2, #0]
 80150bc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80150be:	68bb      	ldr	r3, [r7, #8]
 80150c0:	f003 0303 	and.w	r3, r3, #3
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d006      	beq.n	80150d6 <do_memp_malloc_pool+0x3e>
 80150c8:	4b09      	ldr	r3, [pc, #36]	; (80150f0 <do_memp_malloc_pool+0x58>)
 80150ca:	f240 1219 	movw	r2, #281	; 0x119
 80150ce:	4909      	ldr	r1, [pc, #36]	; (80150f4 <do_memp_malloc_pool+0x5c>)
 80150d0:	4809      	ldr	r0, [pc, #36]	; (80150f8 <do_memp_malloc_pool+0x60>)
 80150d2:	f00c fa8f 	bl	80215f4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80150d6:	68f8      	ldr	r0, [r7, #12]
 80150d8:	f00b fc56 	bl	8020988 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80150dc:	68bb      	ldr	r3, [r7, #8]
 80150de:	e003      	b.n	80150e8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80150e0:	68f8      	ldr	r0, [r7, #12]
 80150e2:	f00b fc51 	bl	8020988 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80150e6:	2300      	movs	r3, #0
}
 80150e8:	4618      	mov	r0, r3
 80150ea:	3710      	adds	r7, #16
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd80      	pop	{r7, pc}
 80150f0:	080228f0 	.word	0x080228f0
 80150f4:	08022920 	.word	0x08022920
 80150f8:	08022944 	.word	0x08022944

080150fc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b084      	sub	sp, #16
 8015100:	af00      	add	r7, sp, #0
 8015102:	4603      	mov	r3, r0
 8015104:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8015106:	79fb      	ldrb	r3, [r7, #7]
 8015108:	2b0c      	cmp	r3, #12
 801510a:	d908      	bls.n	801511e <memp_malloc+0x22>
 801510c:	4b0a      	ldr	r3, [pc, #40]	; (8015138 <memp_malloc+0x3c>)
 801510e:	f240 1257 	movw	r2, #343	; 0x157
 8015112:	490a      	ldr	r1, [pc, #40]	; (801513c <memp_malloc+0x40>)
 8015114:	480a      	ldr	r0, [pc, #40]	; (8015140 <memp_malloc+0x44>)
 8015116:	f00c fa6d 	bl	80215f4 <iprintf>
 801511a:	2300      	movs	r3, #0
 801511c:	e008      	b.n	8015130 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801511e:	79fb      	ldrb	r3, [r7, #7]
 8015120:	4a08      	ldr	r2, [pc, #32]	; (8015144 <memp_malloc+0x48>)
 8015122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015126:	4618      	mov	r0, r3
 8015128:	f7ff ffb6 	bl	8015098 <do_memp_malloc_pool>
 801512c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801512e:	68fb      	ldr	r3, [r7, #12]
}
 8015130:	4618      	mov	r0, r3
 8015132:	3710      	adds	r7, #16
 8015134:	46bd      	mov	sp, r7
 8015136:	bd80      	pop	{r7, pc}
 8015138:	080228f0 	.word	0x080228f0
 801513c:	08022980 	.word	0x08022980
 8015140:	08022944 	.word	0x08022944
 8015144:	080254c4 	.word	0x080254c4

08015148 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b084      	sub	sp, #16
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
 8015150:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8015152:	683b      	ldr	r3, [r7, #0]
 8015154:	f003 0303 	and.w	r3, r3, #3
 8015158:	2b00      	cmp	r3, #0
 801515a:	d006      	beq.n	801516a <do_memp_free_pool+0x22>
 801515c:	4b0d      	ldr	r3, [pc, #52]	; (8015194 <do_memp_free_pool+0x4c>)
 801515e:	f240 126d 	movw	r2, #365	; 0x16d
 8015162:	490d      	ldr	r1, [pc, #52]	; (8015198 <do_memp_free_pool+0x50>)
 8015164:	480d      	ldr	r0, [pc, #52]	; (801519c <do_memp_free_pool+0x54>)
 8015166:	f00c fa45 	bl	80215f4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801516e:	f00b fbfd 	bl	802096c <sys_arch_protect>
 8015172:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	689b      	ldr	r3, [r3, #8]
 8015178:	681a      	ldr	r2, [r3, #0]
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	689b      	ldr	r3, [r3, #8]
 8015182:	68fa      	ldr	r2, [r7, #12]
 8015184:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8015186:	68b8      	ldr	r0, [r7, #8]
 8015188:	f00b fbfe 	bl	8020988 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801518c:	bf00      	nop
 801518e:	3710      	adds	r7, #16
 8015190:	46bd      	mov	sp, r7
 8015192:	bd80      	pop	{r7, pc}
 8015194:	080228f0 	.word	0x080228f0
 8015198:	080229a0 	.word	0x080229a0
 801519c:	08022944 	.word	0x08022944

080151a0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b082      	sub	sp, #8
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	4603      	mov	r3, r0
 80151a8:	6039      	str	r1, [r7, #0]
 80151aa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80151ac:	79fb      	ldrb	r3, [r7, #7]
 80151ae:	2b0c      	cmp	r3, #12
 80151b0:	d907      	bls.n	80151c2 <memp_free+0x22>
 80151b2:	4b0c      	ldr	r3, [pc, #48]	; (80151e4 <memp_free+0x44>)
 80151b4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80151b8:	490b      	ldr	r1, [pc, #44]	; (80151e8 <memp_free+0x48>)
 80151ba:	480c      	ldr	r0, [pc, #48]	; (80151ec <memp_free+0x4c>)
 80151bc:	f00c fa1a 	bl	80215f4 <iprintf>
 80151c0:	e00c      	b.n	80151dc <memp_free+0x3c>

  if (mem == NULL) {
 80151c2:	683b      	ldr	r3, [r7, #0]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d008      	beq.n	80151da <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80151c8:	79fb      	ldrb	r3, [r7, #7]
 80151ca:	4a09      	ldr	r2, [pc, #36]	; (80151f0 <memp_free+0x50>)
 80151cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80151d0:	6839      	ldr	r1, [r7, #0]
 80151d2:	4618      	mov	r0, r3
 80151d4:	f7ff ffb8 	bl	8015148 <do_memp_free_pool>
 80151d8:	e000      	b.n	80151dc <memp_free+0x3c>
    return;
 80151da:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80151dc:	3708      	adds	r7, #8
 80151de:	46bd      	mov	sp, r7
 80151e0:	bd80      	pop	{r7, pc}
 80151e2:	bf00      	nop
 80151e4:	080228f0 	.word	0x080228f0
 80151e8:	080229c0 	.word	0x080229c0
 80151ec:	08022944 	.word	0x08022944
 80151f0:	080254c4 	.word	0x080254c4

080151f4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80151f4:	b480      	push	{r7}
 80151f6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80151f8:	bf00      	nop
 80151fa:	46bd      	mov	sp, r7
 80151fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015200:	4770      	bx	lr
	...

08015204 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b086      	sub	sp, #24
 8015208:	af00      	add	r7, sp, #0
 801520a:	60f8      	str	r0, [r7, #12]
 801520c:	60b9      	str	r1, [r7, #8]
 801520e:	607a      	str	r2, [r7, #4]
 8015210:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d108      	bne.n	801522a <netif_add+0x26>
 8015218:	4b5c      	ldr	r3, [pc, #368]	; (801538c <netif_add+0x188>)
 801521a:	f240 1227 	movw	r2, #295	; 0x127
 801521e:	495c      	ldr	r1, [pc, #368]	; (8015390 <netif_add+0x18c>)
 8015220:	485c      	ldr	r0, [pc, #368]	; (8015394 <netif_add+0x190>)
 8015222:	f00c f9e7 	bl	80215f4 <iprintf>
 8015226:	2300      	movs	r3, #0
 8015228:	e0ac      	b.n	8015384 <netif_add+0x180>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801522c:	2b00      	cmp	r3, #0
 801522e:	d108      	bne.n	8015242 <netif_add+0x3e>
 8015230:	4b56      	ldr	r3, [pc, #344]	; (801538c <netif_add+0x188>)
 8015232:	f44f 7294 	mov.w	r2, #296	; 0x128
 8015236:	4958      	ldr	r1, [pc, #352]	; (8015398 <netif_add+0x194>)
 8015238:	4856      	ldr	r0, [pc, #344]	; (8015394 <netif_add+0x190>)
 801523a:	f00c f9db 	bl	80215f4 <iprintf>
 801523e:	2300      	movs	r3, #0
 8015240:	e0a0      	b.n	8015384 <netif_add+0x180>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8015242:	68bb      	ldr	r3, [r7, #8]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d101      	bne.n	801524c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8015248:	4b54      	ldr	r3, [pc, #336]	; (801539c <netif_add+0x198>)
 801524a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d101      	bne.n	8015256 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8015252:	4b52      	ldr	r3, [pc, #328]	; (801539c <netif_add+0x198>)
 8015254:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015256:	683b      	ldr	r3, [r7, #0]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d101      	bne.n	8015260 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801525c:	4b4f      	ldr	r3, [pc, #316]	; (801539c <netif_add+0x198>)
 801525e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	2200      	movs	r2, #0
 8015264:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	2200      	movs	r2, #0
 801526a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	2200      	movs	r2, #0
 8015270:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	4a4a      	ldr	r2, [pc, #296]	; (80153a0 <netif_add+0x19c>)
 8015276:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	2200      	movs	r2, #0
 801527c:	859a      	strh	r2, [r3, #44]	; 0x2c
  netif->flags = 0;
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	2200      	movs	r2, #0
 8015282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	3328      	adds	r3, #40	; 0x28
 801528a:	2204      	movs	r2, #4
 801528c:	2100      	movs	r1, #0
 801528e:	4618      	mov	r0, r3
 8015290:	f00c f900 	bl	8021494 <memset>
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	2200      	movs	r2, #0
 8015298:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	2200      	movs	r2, #0
 801529e:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	6a3a      	ldr	r2, [r7, #32]
 80152a4:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 80152a6:	4b3f      	ldr	r3, [pc, #252]	; (80153a4 <netif_add+0x1a0>)
 80152a8:	781a      	ldrb	r2, [r3, #0]
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  netif->input = input;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152b4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80152b6:	683b      	ldr	r3, [r7, #0]
 80152b8:	687a      	ldr	r2, [r7, #4]
 80152ba:	68b9      	ldr	r1, [r7, #8]
 80152bc:	68f8      	ldr	r0, [r7, #12]
 80152be:	f000 f91b 	bl	80154f8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80152c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c4:	68f8      	ldr	r0, [r7, #12]
 80152c6:	4798      	blx	r3
 80152c8:	4603      	mov	r3, r0
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d001      	beq.n	80152d2 <netif_add+0xce>
    return NULL;
 80152ce:	2300      	movs	r3, #0
 80152d0:	e058      	b.n	8015384 <netif_add+0x180>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80152d8:	2bff      	cmp	r3, #255	; 0xff
 80152da:	d103      	bne.n	80152e4 <netif_add+0xe0>
        netif->num = 0;
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	2200      	movs	r2, #0
 80152e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      }
      num_netifs = 0;
 80152e4:	2300      	movs	r3, #0
 80152e6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80152e8:	4b2f      	ldr	r3, [pc, #188]	; (80153a8 <netif_add+0x1a4>)
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	617b      	str	r3, [r7, #20]
 80152ee:	e02b      	b.n	8015348 <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80152f0:	697a      	ldr	r2, [r7, #20]
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	429a      	cmp	r2, r3
 80152f6:	d106      	bne.n	8015306 <netif_add+0x102>
 80152f8:	4b24      	ldr	r3, [pc, #144]	; (801538c <netif_add+0x188>)
 80152fa:	f240 128b 	movw	r2, #395	; 0x18b
 80152fe:	492b      	ldr	r1, [pc, #172]	; (80153ac <netif_add+0x1a8>)
 8015300:	4824      	ldr	r0, [pc, #144]	; (8015394 <netif_add+0x190>)
 8015302:	f00c f977 	bl	80215f4 <iprintf>
        num_netifs++;
 8015306:	693b      	ldr	r3, [r7, #16]
 8015308:	3301      	adds	r3, #1
 801530a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801530c:	693b      	ldr	r3, [r7, #16]
 801530e:	2bff      	cmp	r3, #255	; 0xff
 8015310:	dd06      	ble.n	8015320 <netif_add+0x11c>
 8015312:	4b1e      	ldr	r3, [pc, #120]	; (801538c <netif_add+0x188>)
 8015314:	f240 128d 	movw	r2, #397	; 0x18d
 8015318:	4925      	ldr	r1, [pc, #148]	; (80153b0 <netif_add+0x1ac>)
 801531a:	481e      	ldr	r0, [pc, #120]	; (8015394 <netif_add+0x190>)
 801531c:	f00c f96a 	bl	80215f4 <iprintf>
        if (netif2->num == netif->num) {
 8015320:	697b      	ldr	r3, [r7, #20]
 8015322:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801532c:	429a      	cmp	r2, r3
 801532e:	d108      	bne.n	8015342 <netif_add+0x13e>
          netif->num++;
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015336:	3301      	adds	r3, #1
 8015338:	b2da      	uxtb	r2, r3
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          break;
 8015340:	e005      	b.n	801534e <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015342:	697b      	ldr	r3, [r7, #20]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	617b      	str	r3, [r7, #20]
 8015348:	697b      	ldr	r3, [r7, #20]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d1d0      	bne.n	80152f0 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 801534e:	697b      	ldr	r3, [r7, #20]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d1be      	bne.n	80152d2 <netif_add+0xce>
  }
  if (netif->num == 254) {
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801535a:	2bfe      	cmp	r3, #254	; 0xfe
 801535c:	d103      	bne.n	8015366 <netif_add+0x162>
    netif_num = 0;
 801535e:	4b11      	ldr	r3, [pc, #68]	; (80153a4 <netif_add+0x1a0>)
 8015360:	2200      	movs	r2, #0
 8015362:	701a      	strb	r2, [r3, #0]
 8015364:	e006      	b.n	8015374 <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801536c:	3301      	adds	r3, #1
 801536e:	b2da      	uxtb	r2, r3
 8015370:	4b0c      	ldr	r3, [pc, #48]	; (80153a4 <netif_add+0x1a0>)
 8015372:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8015374:	4b0c      	ldr	r3, [pc, #48]	; (80153a8 <netif_add+0x1a4>)
 8015376:	681a      	ldr	r2, [r3, #0]
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801537c:	4a0a      	ldr	r2, [pc, #40]	; (80153a8 <netif_add+0x1a4>)
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8015382:	68fb      	ldr	r3, [r7, #12]
}
 8015384:	4618      	mov	r0, r3
 8015386:	3718      	adds	r7, #24
 8015388:	46bd      	mov	sp, r7
 801538a:	bd80      	pop	{r7, pc}
 801538c:	080229dc 	.word	0x080229dc
 8015390:	08022a70 	.word	0x08022a70
 8015394:	08022a2c 	.word	0x08022a2c
 8015398:	08022a8c 	.word	0x08022a8c
 801539c:	08025548 	.word	0x08025548
 80153a0:	080157fb 	.word	0x080157fb
 80153a4:	20008fbc 	.word	0x20008fbc
 80153a8:	20010348 	.word	0x20010348
 80153ac:	08022ab0 	.word	0x08022ab0
 80153b0:	08022ac4 	.word	0x08022ac4

080153b4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b082      	sub	sp, #8
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
 80153bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80153be:	6839      	ldr	r1, [r7, #0]
 80153c0:	6878      	ldr	r0, [r7, #4]
 80153c2:	f002 fb99 	bl	8017af8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80153c6:	6839      	ldr	r1, [r7, #0]
 80153c8:	6878      	ldr	r0, [r7, #4]
 80153ca:	f006 ffb9 	bl	801c340 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80153ce:	bf00      	nop
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
	...

080153d8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b086      	sub	sp, #24
 80153dc:	af00      	add	r7, sp, #0
 80153de:	60f8      	str	r0, [r7, #12]
 80153e0:	60b9      	str	r1, [r7, #8]
 80153e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80153e4:	68bb      	ldr	r3, [r7, #8]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d106      	bne.n	80153f8 <netif_do_set_ipaddr+0x20>
 80153ea:	4b21      	ldr	r3, [pc, #132]	; (8015470 <netif_do_set_ipaddr+0x98>)
 80153ec:	f240 12cb 	movw	r2, #459	; 0x1cb
 80153f0:	4920      	ldr	r1, [pc, #128]	; (8015474 <netif_do_set_ipaddr+0x9c>)
 80153f2:	4821      	ldr	r0, [pc, #132]	; (8015478 <netif_do_set_ipaddr+0xa0>)
 80153f4:	f00c f8fe 	bl	80215f4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d106      	bne.n	801540c <netif_do_set_ipaddr+0x34>
 80153fe:	4b1c      	ldr	r3, [pc, #112]	; (8015470 <netif_do_set_ipaddr+0x98>)
 8015400:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8015404:	491b      	ldr	r1, [pc, #108]	; (8015474 <netif_do_set_ipaddr+0x9c>)
 8015406:	481c      	ldr	r0, [pc, #112]	; (8015478 <netif_do_set_ipaddr+0xa0>)
 8015408:	f00c f8f4 	bl	80215f4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801540c:	68bb      	ldr	r3, [r7, #8]
 801540e:	681a      	ldr	r2, [r3, #0]
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	3304      	adds	r3, #4
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	429a      	cmp	r2, r3
 8015418:	d024      	beq.n	8015464 <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801541a:	68bb      	ldr	r3, [r7, #8]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	3304      	adds	r3, #4
 8015424:	681a      	ldr	r2, [r3, #0]
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801542a:	f107 0314 	add.w	r3, r7, #20
 801542e:	4619      	mov	r1, r3
 8015430:	6878      	ldr	r0, [r7, #4]
 8015432:	f7ff ffbf 	bl	80153b4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8015436:	68bb      	ldr	r3, [r7, #8]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d002      	beq.n	8015442 <netif_do_set_ipaddr+0x6a>
 801543c:	68bb      	ldr	r3, [r7, #8]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	e000      	b.n	8015444 <netif_do_set_ipaddr+0x6c>
 8015442:	2300      	movs	r3, #0
 8015444:	68fa      	ldr	r2, [r7, #12]
 8015446:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8015448:	2101      	movs	r1, #1
 801544a:	68f8      	ldr	r0, [r7, #12]
 801544c:	f000 f8e2 	bl	8015614 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	69db      	ldr	r3, [r3, #28]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d003      	beq.n	8015460 <netif_do_set_ipaddr+0x88>
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	69db      	ldr	r3, [r3, #28]
 801545c:	68f8      	ldr	r0, [r7, #12]
 801545e:	4798      	blx	r3
    return 1; /* address changed */
 8015460:	2301      	movs	r3, #1
 8015462:	e000      	b.n	8015466 <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 8015464:	2300      	movs	r3, #0
}
 8015466:	4618      	mov	r0, r3
 8015468:	3718      	adds	r7, #24
 801546a:	46bd      	mov	sp, r7
 801546c:	bd80      	pop	{r7, pc}
 801546e:	bf00      	nop
 8015470:	080229dc 	.word	0x080229dc
 8015474:	08022af4 	.word	0x08022af4
 8015478:	08022a2c 	.word	0x08022a2c

0801547c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801547c:	b480      	push	{r7}
 801547e:	b085      	sub	sp, #20
 8015480:	af00      	add	r7, sp, #0
 8015482:	60f8      	str	r0, [r7, #12]
 8015484:	60b9      	str	r1, [r7, #8]
 8015486:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8015488:	68bb      	ldr	r3, [r7, #8]
 801548a:	681a      	ldr	r2, [r3, #0]
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	3308      	adds	r3, #8
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	429a      	cmp	r2, r3
 8015494:	d00a      	beq.n	80154ac <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8015496:	68bb      	ldr	r3, [r7, #8]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d002      	beq.n	80154a2 <netif_do_set_netmask+0x26>
 801549c:	68bb      	ldr	r3, [r7, #8]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	e000      	b.n	80154a4 <netif_do_set_netmask+0x28>
 80154a2:	2300      	movs	r3, #0
 80154a4:	68fa      	ldr	r2, [r7, #12]
 80154a6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80154a8:	2301      	movs	r3, #1
 80154aa:	e000      	b.n	80154ae <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80154ac:	2300      	movs	r3, #0
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3714      	adds	r7, #20
 80154b2:	46bd      	mov	sp, r7
 80154b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b8:	4770      	bx	lr

080154ba <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80154ba:	b480      	push	{r7}
 80154bc:	b085      	sub	sp, #20
 80154be:	af00      	add	r7, sp, #0
 80154c0:	60f8      	str	r0, [r7, #12]
 80154c2:	60b9      	str	r1, [r7, #8]
 80154c4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80154c6:	68bb      	ldr	r3, [r7, #8]
 80154c8:	681a      	ldr	r2, [r3, #0]
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	330c      	adds	r3, #12
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	429a      	cmp	r2, r3
 80154d2:	d00a      	beq.n	80154ea <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80154d4:	68bb      	ldr	r3, [r7, #8]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d002      	beq.n	80154e0 <netif_do_set_gw+0x26>
 80154da:	68bb      	ldr	r3, [r7, #8]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	e000      	b.n	80154e2 <netif_do_set_gw+0x28>
 80154e0:	2300      	movs	r3, #0
 80154e2:	68fa      	ldr	r2, [r7, #12]
 80154e4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80154e6:	2301      	movs	r3, #1
 80154e8:	e000      	b.n	80154ec <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80154ea:	2300      	movs	r3, #0
}
 80154ec:	4618      	mov	r0, r3
 80154ee:	3714      	adds	r7, #20
 80154f0:	46bd      	mov	sp, r7
 80154f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f6:	4770      	bx	lr

080154f8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b088      	sub	sp, #32
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	60f8      	str	r0, [r7, #12]
 8015500:	60b9      	str	r1, [r7, #8]
 8015502:	607a      	str	r2, [r7, #4]
 8015504:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8015506:	2300      	movs	r3, #0
 8015508:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801550a:	2300      	movs	r3, #0
 801550c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801550e:	68bb      	ldr	r3, [r7, #8]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d101      	bne.n	8015518 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8015514:	4b1c      	ldr	r3, [pc, #112]	; (8015588 <netif_set_addr+0x90>)
 8015516:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d101      	bne.n	8015522 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801551e:	4b1a      	ldr	r3, [pc, #104]	; (8015588 <netif_set_addr+0x90>)
 8015520:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015522:	683b      	ldr	r3, [r7, #0]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d101      	bne.n	801552c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8015528:	4b17      	ldr	r3, [pc, #92]	; (8015588 <netif_set_addr+0x90>)
 801552a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d003      	beq.n	801553a <netif_set_addr+0x42>
 8015532:	68bb      	ldr	r3, [r7, #8]
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d101      	bne.n	801553e <netif_set_addr+0x46>
 801553a:	2301      	movs	r3, #1
 801553c:	e000      	b.n	8015540 <netif_set_addr+0x48>
 801553e:	2300      	movs	r3, #0
 8015540:	617b      	str	r3, [r7, #20]
  if (remove) {
 8015542:	697b      	ldr	r3, [r7, #20]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d006      	beq.n	8015556 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015548:	f107 0310 	add.w	r3, r7, #16
 801554c:	461a      	mov	r2, r3
 801554e:	68b9      	ldr	r1, [r7, #8]
 8015550:	68f8      	ldr	r0, [r7, #12]
 8015552:	f7ff ff41 	bl	80153d8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8015556:	69fa      	ldr	r2, [r7, #28]
 8015558:	6879      	ldr	r1, [r7, #4]
 801555a:	68f8      	ldr	r0, [r7, #12]
 801555c:	f7ff ff8e 	bl	801547c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8015560:	69ba      	ldr	r2, [r7, #24]
 8015562:	6839      	ldr	r1, [r7, #0]
 8015564:	68f8      	ldr	r0, [r7, #12]
 8015566:	f7ff ffa8 	bl	80154ba <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801556a:	697b      	ldr	r3, [r7, #20]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d106      	bne.n	801557e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015570:	f107 0310 	add.w	r3, r7, #16
 8015574:	461a      	mov	r2, r3
 8015576:	68b9      	ldr	r1, [r7, #8]
 8015578:	68f8      	ldr	r0, [r7, #12]
 801557a:	f7ff ff2d 	bl	80153d8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801557e:	bf00      	nop
 8015580:	3720      	adds	r7, #32
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}
 8015586:	bf00      	nop
 8015588:	08025548 	.word	0x08025548

0801558c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801558c:	b480      	push	{r7}
 801558e:	b083      	sub	sp, #12
 8015590:	af00      	add	r7, sp, #0
 8015592:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8015594:	4a04      	ldr	r2, [pc, #16]	; (80155a8 <netif_set_default+0x1c>)
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801559a:	bf00      	nop
 801559c:	370c      	adds	r7, #12
 801559e:	46bd      	mov	sp, r7
 80155a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a4:	4770      	bx	lr
 80155a6:	bf00      	nop
 80155a8:	2001034c 	.word	0x2001034c

080155ac <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b082      	sub	sp, #8
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d107      	bne.n	80155ca <netif_set_up+0x1e>
 80155ba:	4b13      	ldr	r3, [pc, #76]	; (8015608 <netif_set_up+0x5c>)
 80155bc:	f44f 7254 	mov.w	r2, #848	; 0x350
 80155c0:	4912      	ldr	r1, [pc, #72]	; (801560c <netif_set_up+0x60>)
 80155c2:	4813      	ldr	r0, [pc, #76]	; (8015610 <netif_set_up+0x64>)
 80155c4:	f00c f816 	bl	80215f4 <iprintf>
 80155c8:	e01b      	b.n	8015602 <netif_set_up+0x56>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80155d0:	f003 0301 	and.w	r3, r3, #1
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d114      	bne.n	8015602 <netif_set_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80155de:	f043 0301 	orr.w	r3, r3, #1
 80155e2:	b2da      	uxtb	r2, r3
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	69db      	ldr	r3, [r3, #28]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d003      	beq.n	80155fa <netif_set_up+0x4e>
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	69db      	ldr	r3, [r3, #28]
 80155f6:	6878      	ldr	r0, [r7, #4]
 80155f8:	4798      	blx	r3
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80155fa:	2103      	movs	r1, #3
 80155fc:	6878      	ldr	r0, [r7, #4]
 80155fe:	f000 f809 	bl	8015614 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8015602:	3708      	adds	r7, #8
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}
 8015608:	080229dc 	.word	0x080229dc
 801560c:	08022b64 	.word	0x08022b64
 8015610:	08022a2c 	.word	0x08022a2c

08015614 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8015614:	b580      	push	{r7, lr}
 8015616:	b082      	sub	sp, #8
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
 801561c:	460b      	mov	r3, r1
 801561e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d106      	bne.n	8015634 <netif_issue_reports+0x20>
 8015626:	4b18      	ldr	r3, [pc, #96]	; (8015688 <netif_issue_reports+0x74>)
 8015628:	f240 326d 	movw	r2, #877	; 0x36d
 801562c:	4917      	ldr	r1, [pc, #92]	; (801568c <netif_issue_reports+0x78>)
 801562e:	4818      	ldr	r0, [pc, #96]	; (8015690 <netif_issue_reports+0x7c>)
 8015630:	f00b ffe0 	bl	80215f4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801563a:	f003 0304 	and.w	r3, r3, #4
 801563e:	2b00      	cmp	r3, #0
 8015640:	d01e      	beq.n	8015680 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015648:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801564c:	2b00      	cmp	r3, #0
 801564e:	d017      	beq.n	8015680 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015650:	78fb      	ldrb	r3, [r7, #3]
 8015652:	f003 0301 	and.w	r3, r3, #1
 8015656:	2b00      	cmp	r3, #0
 8015658:	d013      	beq.n	8015682 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	3304      	adds	r3, #4
 801565e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015660:	2b00      	cmp	r3, #0
 8015662:	d00e      	beq.n	8015682 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801566a:	f003 0308 	and.w	r3, r3, #8
 801566e:	2b00      	cmp	r3, #0
 8015670:	d007      	beq.n	8015682 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	3304      	adds	r3, #4
 8015676:	4619      	mov	r1, r3
 8015678:	6878      	ldr	r0, [r7, #4]
 801567a:	f009 fc73 	bl	801ef64 <etharp_request>
 801567e:	e000      	b.n	8015682 <netif_issue_reports+0x6e>
    return;
 8015680:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8015682:	3708      	adds	r7, #8
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}
 8015688:	080229dc 	.word	0x080229dc
 801568c:	08022b80 	.word	0x08022b80
 8015690:	08022a2c 	.word	0x08022a2c

08015694 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b082      	sub	sp, #8
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d107      	bne.n	80156b2 <netif_set_down+0x1e>
 80156a2:	4b16      	ldr	r3, [pc, #88]	; (80156fc <netif_set_down+0x68>)
 80156a4:	f240 329b 	movw	r2, #923	; 0x39b
 80156a8:	4915      	ldr	r1, [pc, #84]	; (8015700 <netif_set_down+0x6c>)
 80156aa:	4816      	ldr	r0, [pc, #88]	; (8015704 <netif_set_down+0x70>)
 80156ac:	f00b ffa2 	bl	80215f4 <iprintf>
 80156b0:	e021      	b.n	80156f6 <netif_set_down+0x62>

  if (netif->flags & NETIF_FLAG_UP) {
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80156b8:	f003 0301 	and.w	r3, r3, #1
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d01a      	beq.n	80156f6 <netif_set_down+0x62>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80156c6:	f023 0301 	bic.w	r3, r3, #1
 80156ca:	b2da      	uxtb	r2, r3
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80156d8:	f003 0308 	and.w	r3, r3, #8
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d002      	beq.n	80156e6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80156e0:	6878      	ldr	r0, [r7, #4]
 80156e2:	f008 fff9 	bl	801e6d8 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	69db      	ldr	r3, [r3, #28]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d003      	beq.n	80156f6 <netif_set_down+0x62>
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	69db      	ldr	r3, [r3, #28]
 80156f2:	6878      	ldr	r0, [r7, #4]
 80156f4:	4798      	blx	r3
  }
}
 80156f6:	3708      	adds	r7, #8
 80156f8:	46bd      	mov	sp, r7
 80156fa:	bd80      	pop	{r7, pc}
 80156fc:	080229dc 	.word	0x080229dc
 8015700:	08022ba4 	.word	0x08022ba4
 8015704:	08022a2c 	.word	0x08022a2c

08015708 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b082      	sub	sp, #8
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d107      	bne.n	8015726 <netif_set_link_up+0x1e>
 8015716:	4b15      	ldr	r3, [pc, #84]	; (801576c <netif_set_link_up+0x64>)
 8015718:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801571c:	4914      	ldr	r1, [pc, #80]	; (8015770 <netif_set_link_up+0x68>)
 801571e:	4815      	ldr	r0, [pc, #84]	; (8015774 <netif_set_link_up+0x6c>)
 8015720:	f00b ff68 	bl	80215f4 <iprintf>
 8015724:	e01e      	b.n	8015764 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801572c:	f003 0304 	and.w	r3, r3, #4
 8015730:	2b00      	cmp	r3, #0
 8015732:	d117      	bne.n	8015764 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801573a:	f043 0304 	orr.w	r3, r3, #4
 801573e:	b2da      	uxtb	r2, r3
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8015746:	6878      	ldr	r0, [r7, #4]
 8015748:	f007 fa26 	bl	801cb98 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801574c:	2103      	movs	r1, #3
 801574e:	6878      	ldr	r0, [r7, #4]
 8015750:	f7ff ff60 	bl	8015614 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	6a1b      	ldr	r3, [r3, #32]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d003      	beq.n	8015764 <netif_set_link_up+0x5c>
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	6a1b      	ldr	r3, [r3, #32]
 8015760:	6878      	ldr	r0, [r7, #4]
 8015762:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8015764:	3708      	adds	r7, #8
 8015766:	46bd      	mov	sp, r7
 8015768:	bd80      	pop	{r7, pc}
 801576a:	bf00      	nop
 801576c:	080229dc 	.word	0x080229dc
 8015770:	08022bc4 	.word	0x08022bc4
 8015774:	08022a2c 	.word	0x08022a2c

08015778 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d107      	bne.n	8015796 <netif_set_link_down+0x1e>
 8015786:	4b11      	ldr	r3, [pc, #68]	; (80157cc <netif_set_link_down+0x54>)
 8015788:	f240 4206 	movw	r2, #1030	; 0x406
 801578c:	4910      	ldr	r1, [pc, #64]	; (80157d0 <netif_set_link_down+0x58>)
 801578e:	4811      	ldr	r0, [pc, #68]	; (80157d4 <netif_set_link_down+0x5c>)
 8015790:	f00b ff30 	bl	80215f4 <iprintf>
 8015794:	e017      	b.n	80157c6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801579c:	f003 0304 	and.w	r3, r3, #4
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d010      	beq.n	80157c6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80157aa:	f023 0304 	bic.w	r3, r3, #4
 80157ae:	b2da      	uxtb	r2, r3
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	6a1b      	ldr	r3, [r3, #32]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d003      	beq.n	80157c6 <netif_set_link_down+0x4e>
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	6a1b      	ldr	r3, [r3, #32]
 80157c2:	6878      	ldr	r0, [r7, #4]
 80157c4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80157c6:	3708      	adds	r7, #8
 80157c8:	46bd      	mov	sp, r7
 80157ca:	bd80      	pop	{r7, pc}
 80157cc:	080229dc 	.word	0x080229dc
 80157d0:	08022be8 	.word	0x08022be8
 80157d4:	08022a2c 	.word	0x08022a2c

080157d8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80157d8:	b480      	push	{r7}
 80157da:	b083      	sub	sp, #12
 80157dc:	af00      	add	r7, sp, #0
 80157de:	6078      	str	r0, [r7, #4]
 80157e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d002      	beq.n	80157ee <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	683a      	ldr	r2, [r7, #0]
 80157ec:	621a      	str	r2, [r3, #32]
  }
}
 80157ee:	bf00      	nop
 80157f0:	370c      	adds	r7, #12
 80157f2:	46bd      	mov	sp, r7
 80157f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f8:	4770      	bx	lr

080157fa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80157fa:	b480      	push	{r7}
 80157fc:	b085      	sub	sp, #20
 80157fe:	af00      	add	r7, sp, #0
 8015800:	60f8      	str	r0, [r7, #12]
 8015802:	60b9      	str	r1, [r7, #8]
 8015804:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8015806:	f06f 030b 	mvn.w	r3, #11
}
 801580a:	4618      	mov	r0, r3
 801580c:	3714      	adds	r7, #20
 801580e:	46bd      	mov	sp, r7
 8015810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015814:	4770      	bx	lr
	...

08015818 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8015818:	b480      	push	{r7}
 801581a:	b085      	sub	sp, #20
 801581c:	af00      	add	r7, sp, #0
 801581e:	4603      	mov	r3, r0
 8015820:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8015822:	79fb      	ldrb	r3, [r7, #7]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d013      	beq.n	8015850 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8015828:	4b0d      	ldr	r3, [pc, #52]	; (8015860 <netif_get_by_index+0x48>)
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	60fb      	str	r3, [r7, #12]
 801582e:	e00c      	b.n	801584a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015836:	3301      	adds	r3, #1
 8015838:	b2db      	uxtb	r3, r3
 801583a:	79fa      	ldrb	r2, [r7, #7]
 801583c:	429a      	cmp	r2, r3
 801583e:	d101      	bne.n	8015844 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	e006      	b.n	8015852 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	60fb      	str	r3, [r7, #12]
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d1ef      	bne.n	8015830 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8015850:	2300      	movs	r3, #0
}
 8015852:	4618      	mov	r0, r3
 8015854:	3714      	adds	r7, #20
 8015856:	46bd      	mov	sp, r7
 8015858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585c:	4770      	bx	lr
 801585e:	bf00      	nop
 8015860:	20010348 	.word	0x20010348

08015864 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b082      	sub	sp, #8
 8015868:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801586a:	f00b f87f 	bl	802096c <sys_arch_protect>
 801586e:	6038      	str	r0, [r7, #0]
 8015870:	4b0d      	ldr	r3, [pc, #52]	; (80158a8 <pbuf_free_ooseq+0x44>)
 8015872:	2200      	movs	r2, #0
 8015874:	701a      	strb	r2, [r3, #0]
 8015876:	6838      	ldr	r0, [r7, #0]
 8015878:	f00b f886 	bl	8020988 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801587c:	4b0b      	ldr	r3, [pc, #44]	; (80158ac <pbuf_free_ooseq+0x48>)
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	607b      	str	r3, [r7, #4]
 8015882:	e00a      	b.n	801589a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015888:	2b00      	cmp	r3, #0
 801588a:	d003      	beq.n	8015894 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801588c:	6878      	ldr	r0, [r7, #4]
 801588e:	f002 f971 	bl	8017b74 <tcp_free_ooseq>
      return;
 8015892:	e005      	b.n	80158a0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	68db      	ldr	r3, [r3, #12]
 8015898:	607b      	str	r3, [r7, #4]
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d1f1      	bne.n	8015884 <pbuf_free_ooseq+0x20>
    }
  }
}
 80158a0:	3708      	adds	r7, #8
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bd80      	pop	{r7, pc}
 80158a6:	bf00      	nop
 80158a8:	20010350 	.word	0x20010350
 80158ac:	20010358 	.word	0x20010358

080158b0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b082      	sub	sp, #8
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80158b8:	f7ff ffd4 	bl	8015864 <pbuf_free_ooseq>
}
 80158bc:	bf00      	nop
 80158be:	3708      	adds	r7, #8
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}

080158c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b082      	sub	sp, #8
 80158c8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80158ca:	f00b f84f 	bl	802096c <sys_arch_protect>
 80158ce:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80158d0:	4b0f      	ldr	r3, [pc, #60]	; (8015910 <pbuf_pool_is_empty+0x4c>)
 80158d2:	781b      	ldrb	r3, [r3, #0]
 80158d4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80158d6:	4b0e      	ldr	r3, [pc, #56]	; (8015910 <pbuf_pool_is_empty+0x4c>)
 80158d8:	2201      	movs	r2, #1
 80158da:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80158dc:	6878      	ldr	r0, [r7, #4]
 80158de:	f00b f853 	bl	8020988 <sys_arch_unprotect>

  if (!queued) {
 80158e2:	78fb      	ldrb	r3, [r7, #3]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d10f      	bne.n	8015908 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80158e8:	2100      	movs	r1, #0
 80158ea:	480a      	ldr	r0, [pc, #40]	; (8015914 <pbuf_pool_is_empty+0x50>)
 80158ec:	f7fe fec6 	bl	801467c <tcpip_try_callback>
 80158f0:	4603      	mov	r3, r0
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d008      	beq.n	8015908 <pbuf_pool_is_empty+0x44>
 80158f6:	f00b f839 	bl	802096c <sys_arch_protect>
 80158fa:	6078      	str	r0, [r7, #4]
 80158fc:	4b04      	ldr	r3, [pc, #16]	; (8015910 <pbuf_pool_is_empty+0x4c>)
 80158fe:	2200      	movs	r2, #0
 8015900:	701a      	strb	r2, [r3, #0]
 8015902:	6878      	ldr	r0, [r7, #4]
 8015904:	f00b f840 	bl	8020988 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8015908:	bf00      	nop
 801590a:	3708      	adds	r7, #8
 801590c:	46bd      	mov	sp, r7
 801590e:	bd80      	pop	{r7, pc}
 8015910:	20010350 	.word	0x20010350
 8015914:	080158b1 	.word	0x080158b1

08015918 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8015918:	b480      	push	{r7}
 801591a:	b085      	sub	sp, #20
 801591c:	af00      	add	r7, sp, #0
 801591e:	60f8      	str	r0, [r7, #12]
 8015920:	60b9      	str	r1, [r7, #8]
 8015922:	4611      	mov	r1, r2
 8015924:	461a      	mov	r2, r3
 8015926:	460b      	mov	r3, r1
 8015928:	80fb      	strh	r3, [r7, #6]
 801592a:	4613      	mov	r3, r2
 801592c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	2200      	movs	r2, #0
 8015932:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	68ba      	ldr	r2, [r7, #8]
 8015938:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	88fa      	ldrh	r2, [r7, #6]
 801593e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	88ba      	ldrh	r2, [r7, #4]
 8015944:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8015946:	8b3b      	ldrh	r3, [r7, #24]
 8015948:	b2da      	uxtb	r2, r3
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	7f3a      	ldrb	r2, [r7, #28]
 8015952:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	2201      	movs	r2, #1
 8015958:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	2200      	movs	r2, #0
 801595e:	73da      	strb	r2, [r3, #15]
}
 8015960:	bf00      	nop
 8015962:	3714      	adds	r7, #20
 8015964:	46bd      	mov	sp, r7
 8015966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596a:	4770      	bx	lr

0801596c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b08c      	sub	sp, #48	; 0x30
 8015970:	af02      	add	r7, sp, #8
 8015972:	4603      	mov	r3, r0
 8015974:	71fb      	strb	r3, [r7, #7]
 8015976:	460b      	mov	r3, r1
 8015978:	80bb      	strh	r3, [r7, #4]
 801597a:	4613      	mov	r3, r2
 801597c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801597e:	79fb      	ldrb	r3, [r7, #7]
 8015980:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8015982:	887b      	ldrh	r3, [r7, #2]
 8015984:	2b41      	cmp	r3, #65	; 0x41
 8015986:	d00b      	beq.n	80159a0 <pbuf_alloc+0x34>
 8015988:	2b41      	cmp	r3, #65	; 0x41
 801598a:	dc02      	bgt.n	8015992 <pbuf_alloc+0x26>
 801598c:	2b01      	cmp	r3, #1
 801598e:	d007      	beq.n	80159a0 <pbuf_alloc+0x34>
 8015990:	e0c2      	b.n	8015b18 <pbuf_alloc+0x1ac>
 8015992:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8015996:	d00b      	beq.n	80159b0 <pbuf_alloc+0x44>
 8015998:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801599c:	d070      	beq.n	8015a80 <pbuf_alloc+0x114>
 801599e:	e0bb      	b.n	8015b18 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80159a0:	887a      	ldrh	r2, [r7, #2]
 80159a2:	88bb      	ldrh	r3, [r7, #4]
 80159a4:	4619      	mov	r1, r3
 80159a6:	2000      	movs	r0, #0
 80159a8:	f000 f8d2 	bl	8015b50 <pbuf_alloc_reference>
 80159ac:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80159ae:	e0bd      	b.n	8015b2c <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80159b0:	2300      	movs	r3, #0
 80159b2:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80159b4:	2300      	movs	r3, #0
 80159b6:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80159b8:	88bb      	ldrh	r3, [r7, #4]
 80159ba:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80159bc:	200c      	movs	r0, #12
 80159be:	f7ff fb9d 	bl	80150fc <memp_malloc>
 80159c2:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80159c4:	693b      	ldr	r3, [r7, #16]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d109      	bne.n	80159de <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 80159ca:	f7ff ff7b 	bl	80158c4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80159ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d002      	beq.n	80159da <pbuf_alloc+0x6e>
            pbuf_free(p);
 80159d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80159d6:	f000 faa9 	bl	8015f2c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80159da:	2300      	movs	r3, #0
 80159dc:	e0a7      	b.n	8015b2e <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80159de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159e0:	3303      	adds	r3, #3
 80159e2:	b29b      	uxth	r3, r3
 80159e4:	f023 0303 	bic.w	r3, r3, #3
 80159e8:	b29b      	uxth	r3, r3
 80159ea:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80159ee:	b29b      	uxth	r3, r3
 80159f0:	8b7a      	ldrh	r2, [r7, #26]
 80159f2:	4293      	cmp	r3, r2
 80159f4:	bf28      	it	cs
 80159f6:	4613      	movcs	r3, r2
 80159f8:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80159fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159fc:	3310      	adds	r3, #16
 80159fe:	693a      	ldr	r2, [r7, #16]
 8015a00:	4413      	add	r3, r2
 8015a02:	3303      	adds	r3, #3
 8015a04:	f023 0303 	bic.w	r3, r3, #3
 8015a08:	4618      	mov	r0, r3
 8015a0a:	89f9      	ldrh	r1, [r7, #14]
 8015a0c:	8b7a      	ldrh	r2, [r7, #26]
 8015a0e:	2300      	movs	r3, #0
 8015a10:	9301      	str	r3, [sp, #4]
 8015a12:	887b      	ldrh	r3, [r7, #2]
 8015a14:	9300      	str	r3, [sp, #0]
 8015a16:	460b      	mov	r3, r1
 8015a18:	4601      	mov	r1, r0
 8015a1a:	6938      	ldr	r0, [r7, #16]
 8015a1c:	f7ff ff7c 	bl	8015918 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8015a20:	693b      	ldr	r3, [r7, #16]
 8015a22:	685b      	ldr	r3, [r3, #4]
 8015a24:	f003 0303 	and.w	r3, r3, #3
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d006      	beq.n	8015a3a <pbuf_alloc+0xce>
 8015a2c:	4b42      	ldr	r3, [pc, #264]	; (8015b38 <pbuf_alloc+0x1cc>)
 8015a2e:	f240 1201 	movw	r2, #257	; 0x101
 8015a32:	4942      	ldr	r1, [pc, #264]	; (8015b3c <pbuf_alloc+0x1d0>)
 8015a34:	4842      	ldr	r0, [pc, #264]	; (8015b40 <pbuf_alloc+0x1d4>)
 8015a36:	f00b fddd 	bl	80215f4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8015a3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a3c:	3303      	adds	r3, #3
 8015a3e:	f023 0303 	bic.w	r3, r3, #3
 8015a42:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8015a46:	d106      	bne.n	8015a56 <pbuf_alloc+0xea>
 8015a48:	4b3b      	ldr	r3, [pc, #236]	; (8015b38 <pbuf_alloc+0x1cc>)
 8015a4a:	f240 1203 	movw	r2, #259	; 0x103
 8015a4e:	493d      	ldr	r1, [pc, #244]	; (8015b44 <pbuf_alloc+0x1d8>)
 8015a50:	483b      	ldr	r0, [pc, #236]	; (8015b40 <pbuf_alloc+0x1d4>)
 8015a52:	f00b fdcf 	bl	80215f4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8015a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d102      	bne.n	8015a62 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8015a5c:	693b      	ldr	r3, [r7, #16]
 8015a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8015a60:	e002      	b.n	8015a68 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8015a62:	69fb      	ldr	r3, [r7, #28]
 8015a64:	693a      	ldr	r2, [r7, #16]
 8015a66:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8015a68:	693b      	ldr	r3, [r7, #16]
 8015a6a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8015a6c:	8b7a      	ldrh	r2, [r7, #26]
 8015a6e:	89fb      	ldrh	r3, [r7, #14]
 8015a70:	1ad3      	subs	r3, r2, r3
 8015a72:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8015a74:	2300      	movs	r3, #0
 8015a76:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8015a78:	8b7b      	ldrh	r3, [r7, #26]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d19e      	bne.n	80159bc <pbuf_alloc+0x50>
      break;
 8015a7e:	e055      	b.n	8015b2c <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8015a80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a82:	3303      	adds	r3, #3
 8015a84:	b29b      	uxth	r3, r3
 8015a86:	f023 0303 	bic.w	r3, r3, #3
 8015a8a:	b29a      	uxth	r2, r3
 8015a8c:	88bb      	ldrh	r3, [r7, #4]
 8015a8e:	3303      	adds	r3, #3
 8015a90:	b29b      	uxth	r3, r3
 8015a92:	f023 0303 	bic.w	r3, r3, #3
 8015a96:	b29b      	uxth	r3, r3
 8015a98:	4413      	add	r3, r2
 8015a9a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8015a9c:	8b3b      	ldrh	r3, [r7, #24]
 8015a9e:	3310      	adds	r3, #16
 8015aa0:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015aa2:	8b3a      	ldrh	r2, [r7, #24]
 8015aa4:	88bb      	ldrh	r3, [r7, #4]
 8015aa6:	3303      	adds	r3, #3
 8015aa8:	f023 0303 	bic.w	r3, r3, #3
 8015aac:	429a      	cmp	r2, r3
 8015aae:	d306      	bcc.n	8015abe <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8015ab0:	8afa      	ldrh	r2, [r7, #22]
 8015ab2:	88bb      	ldrh	r3, [r7, #4]
 8015ab4:	3303      	adds	r3, #3
 8015ab6:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015aba:	429a      	cmp	r2, r3
 8015abc:	d201      	bcs.n	8015ac2 <pbuf_alloc+0x156>
        return NULL;
 8015abe:	2300      	movs	r3, #0
 8015ac0:	e035      	b.n	8015b2e <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8015ac2:	8afb      	ldrh	r3, [r7, #22]
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	f7ff f997 	bl	8014df8 <mem_malloc>
 8015aca:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8015acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d101      	bne.n	8015ad6 <pbuf_alloc+0x16a>
        return NULL;
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	e02b      	b.n	8015b2e <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8015ad6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015ad8:	3310      	adds	r3, #16
 8015ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015adc:	4413      	add	r3, r2
 8015ade:	3303      	adds	r3, #3
 8015ae0:	f023 0303 	bic.w	r3, r3, #3
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	88b9      	ldrh	r1, [r7, #4]
 8015ae8:	88ba      	ldrh	r2, [r7, #4]
 8015aea:	2300      	movs	r3, #0
 8015aec:	9301      	str	r3, [sp, #4]
 8015aee:	887b      	ldrh	r3, [r7, #2]
 8015af0:	9300      	str	r3, [sp, #0]
 8015af2:	460b      	mov	r3, r1
 8015af4:	4601      	mov	r1, r0
 8015af6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015af8:	f7ff ff0e 	bl	8015918 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8015afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015afe:	685b      	ldr	r3, [r3, #4]
 8015b00:	f003 0303 	and.w	r3, r3, #3
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d010      	beq.n	8015b2a <pbuf_alloc+0x1be>
 8015b08:	4b0b      	ldr	r3, [pc, #44]	; (8015b38 <pbuf_alloc+0x1cc>)
 8015b0a:	f240 1223 	movw	r2, #291	; 0x123
 8015b0e:	490e      	ldr	r1, [pc, #56]	; (8015b48 <pbuf_alloc+0x1dc>)
 8015b10:	480b      	ldr	r0, [pc, #44]	; (8015b40 <pbuf_alloc+0x1d4>)
 8015b12:	f00b fd6f 	bl	80215f4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8015b16:	e008      	b.n	8015b2a <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8015b18:	4b07      	ldr	r3, [pc, #28]	; (8015b38 <pbuf_alloc+0x1cc>)
 8015b1a:	f240 1227 	movw	r2, #295	; 0x127
 8015b1e:	490b      	ldr	r1, [pc, #44]	; (8015b4c <pbuf_alloc+0x1e0>)
 8015b20:	4807      	ldr	r0, [pc, #28]	; (8015b40 <pbuf_alloc+0x1d4>)
 8015b22:	f00b fd67 	bl	80215f4 <iprintf>
      return NULL;
 8015b26:	2300      	movs	r3, #0
 8015b28:	e001      	b.n	8015b2e <pbuf_alloc+0x1c2>
      break;
 8015b2a:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8015b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015b2e:	4618      	mov	r0, r3
 8015b30:	3728      	adds	r7, #40	; 0x28
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}
 8015b36:	bf00      	nop
 8015b38:	08022c0c 	.word	0x08022c0c
 8015b3c:	08022c3c 	.word	0x08022c3c
 8015b40:	08022c6c 	.word	0x08022c6c
 8015b44:	08022c94 	.word	0x08022c94
 8015b48:	08022cc8 	.word	0x08022cc8
 8015b4c:	08022cf4 	.word	0x08022cf4

08015b50 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b086      	sub	sp, #24
 8015b54:	af02      	add	r7, sp, #8
 8015b56:	6078      	str	r0, [r7, #4]
 8015b58:	460b      	mov	r3, r1
 8015b5a:	807b      	strh	r3, [r7, #2]
 8015b5c:	4613      	mov	r3, r2
 8015b5e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8015b60:	883b      	ldrh	r3, [r7, #0]
 8015b62:	2b41      	cmp	r3, #65	; 0x41
 8015b64:	d009      	beq.n	8015b7a <pbuf_alloc_reference+0x2a>
 8015b66:	883b      	ldrh	r3, [r7, #0]
 8015b68:	2b01      	cmp	r3, #1
 8015b6a:	d006      	beq.n	8015b7a <pbuf_alloc_reference+0x2a>
 8015b6c:	4b0f      	ldr	r3, [pc, #60]	; (8015bac <pbuf_alloc_reference+0x5c>)
 8015b6e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8015b72:	490f      	ldr	r1, [pc, #60]	; (8015bb0 <pbuf_alloc_reference+0x60>)
 8015b74:	480f      	ldr	r0, [pc, #60]	; (8015bb4 <pbuf_alloc_reference+0x64>)
 8015b76:	f00b fd3d 	bl	80215f4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8015b7a:	200b      	movs	r0, #11
 8015b7c:	f7ff fabe 	bl	80150fc <memp_malloc>
 8015b80:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d101      	bne.n	8015b8c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8015b88:	2300      	movs	r3, #0
 8015b8a:	e00b      	b.n	8015ba4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8015b8c:	8879      	ldrh	r1, [r7, #2]
 8015b8e:	887a      	ldrh	r2, [r7, #2]
 8015b90:	2300      	movs	r3, #0
 8015b92:	9301      	str	r3, [sp, #4]
 8015b94:	883b      	ldrh	r3, [r7, #0]
 8015b96:	9300      	str	r3, [sp, #0]
 8015b98:	460b      	mov	r3, r1
 8015b9a:	6879      	ldr	r1, [r7, #4]
 8015b9c:	68f8      	ldr	r0, [r7, #12]
 8015b9e:	f7ff febb 	bl	8015918 <pbuf_init_alloced_pbuf>
  return p;
 8015ba2:	68fb      	ldr	r3, [r7, #12]
}
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	3710      	adds	r7, #16
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}
 8015bac:	08022c0c 	.word	0x08022c0c
 8015bb0:	08022d10 	.word	0x08022d10
 8015bb4:	08022c6c 	.word	0x08022c6c

08015bb8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b088      	sub	sp, #32
 8015bbc:	af02      	add	r7, sp, #8
 8015bbe:	607b      	str	r3, [r7, #4]
 8015bc0:	4603      	mov	r3, r0
 8015bc2:	73fb      	strb	r3, [r7, #15]
 8015bc4:	460b      	mov	r3, r1
 8015bc6:	81bb      	strh	r3, [r7, #12]
 8015bc8:	4613      	mov	r3, r2
 8015bca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8015bcc:	7bfb      	ldrb	r3, [r7, #15]
 8015bce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8015bd0:	8a7b      	ldrh	r3, [r7, #18]
 8015bd2:	3303      	adds	r3, #3
 8015bd4:	f023 0203 	bic.w	r2, r3, #3
 8015bd8:	89bb      	ldrh	r3, [r7, #12]
 8015bda:	441a      	add	r2, r3
 8015bdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015bde:	429a      	cmp	r2, r3
 8015be0:	d901      	bls.n	8015be6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8015be2:	2300      	movs	r3, #0
 8015be4:	e018      	b.n	8015c18 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8015be6:	6a3b      	ldr	r3, [r7, #32]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d007      	beq.n	8015bfc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8015bec:	8a7b      	ldrh	r3, [r7, #18]
 8015bee:	3303      	adds	r3, #3
 8015bf0:	f023 0303 	bic.w	r3, r3, #3
 8015bf4:	6a3a      	ldr	r2, [r7, #32]
 8015bf6:	4413      	add	r3, r2
 8015bf8:	617b      	str	r3, [r7, #20]
 8015bfa:	e001      	b.n	8015c00 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8015c00:	6878      	ldr	r0, [r7, #4]
 8015c02:	89b9      	ldrh	r1, [r7, #12]
 8015c04:	89ba      	ldrh	r2, [r7, #12]
 8015c06:	2302      	movs	r3, #2
 8015c08:	9301      	str	r3, [sp, #4]
 8015c0a:	897b      	ldrh	r3, [r7, #10]
 8015c0c:	9300      	str	r3, [sp, #0]
 8015c0e:	460b      	mov	r3, r1
 8015c10:	6979      	ldr	r1, [r7, #20]
 8015c12:	f7ff fe81 	bl	8015918 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8015c16:	687b      	ldr	r3, [r7, #4]
}
 8015c18:	4618      	mov	r0, r3
 8015c1a:	3718      	adds	r7, #24
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	bd80      	pop	{r7, pc}

08015c20 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b084      	sub	sp, #16
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
 8015c28:	460b      	mov	r3, r1
 8015c2a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d106      	bne.n	8015c40 <pbuf_realloc+0x20>
 8015c32:	4b3a      	ldr	r3, [pc, #232]	; (8015d1c <pbuf_realloc+0xfc>)
 8015c34:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8015c38:	4939      	ldr	r1, [pc, #228]	; (8015d20 <pbuf_realloc+0x100>)
 8015c3a:	483a      	ldr	r0, [pc, #232]	; (8015d24 <pbuf_realloc+0x104>)
 8015c3c:	f00b fcda 	bl	80215f4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	891b      	ldrh	r3, [r3, #8]
 8015c44:	887a      	ldrh	r2, [r7, #2]
 8015c46:	429a      	cmp	r2, r3
 8015c48:	d264      	bcs.n	8015d14 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	891a      	ldrh	r2, [r3, #8]
 8015c4e:	887b      	ldrh	r3, [r7, #2]
 8015c50:	1ad3      	subs	r3, r2, r3
 8015c52:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8015c54:	887b      	ldrh	r3, [r7, #2]
 8015c56:	817b      	strh	r3, [r7, #10]
  q = p;
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8015c5c:	e018      	b.n	8015c90 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	895b      	ldrh	r3, [r3, #10]
 8015c62:	897a      	ldrh	r2, [r7, #10]
 8015c64:	1ad3      	subs	r3, r2, r3
 8015c66:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	891a      	ldrh	r2, [r3, #8]
 8015c6c:	893b      	ldrh	r3, [r7, #8]
 8015c6e:	1ad3      	subs	r3, r2, r3
 8015c70:	b29a      	uxth	r2, r3
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d106      	bne.n	8015c90 <pbuf_realloc+0x70>
 8015c82:	4b26      	ldr	r3, [pc, #152]	; (8015d1c <pbuf_realloc+0xfc>)
 8015c84:	f240 12af 	movw	r2, #431	; 0x1af
 8015c88:	4927      	ldr	r1, [pc, #156]	; (8015d28 <pbuf_realloc+0x108>)
 8015c8a:	4826      	ldr	r0, [pc, #152]	; (8015d24 <pbuf_realloc+0x104>)
 8015c8c:	f00b fcb2 	bl	80215f4 <iprintf>
  while (rem_len > q->len) {
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	895b      	ldrh	r3, [r3, #10]
 8015c94:	897a      	ldrh	r2, [r7, #10]
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d8e1      	bhi.n	8015c5e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	7b1b      	ldrb	r3, [r3, #12]
 8015c9e:	f003 030f 	and.w	r3, r3, #15
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d122      	bne.n	8015cec <pbuf_realloc+0xcc>
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	895b      	ldrh	r3, [r3, #10]
 8015caa:	897a      	ldrh	r2, [r7, #10]
 8015cac:	429a      	cmp	r2, r3
 8015cae:	d01d      	beq.n	8015cec <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	7b5b      	ldrb	r3, [r3, #13]
 8015cb4:	f003 0302 	and.w	r3, r3, #2
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d117      	bne.n	8015cec <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	685b      	ldr	r3, [r3, #4]
 8015cc0:	461a      	mov	r2, r3
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	1ad3      	subs	r3, r2, r3
 8015cc6:	b29a      	uxth	r2, r3
 8015cc8:	897b      	ldrh	r3, [r7, #10]
 8015cca:	4413      	add	r3, r2
 8015ccc:	b29b      	uxth	r3, r3
 8015cce:	4619      	mov	r1, r3
 8015cd0:	68f8      	ldr	r0, [r7, #12]
 8015cd2:	f7fe ff87 	bl	8014be4 <mem_trim>
 8015cd6:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d106      	bne.n	8015cec <pbuf_realloc+0xcc>
 8015cde:	4b0f      	ldr	r3, [pc, #60]	; (8015d1c <pbuf_realloc+0xfc>)
 8015ce0:	f240 12bd 	movw	r2, #445	; 0x1bd
 8015ce4:	4911      	ldr	r1, [pc, #68]	; (8015d2c <pbuf_realloc+0x10c>)
 8015ce6:	480f      	ldr	r0, [pc, #60]	; (8015d24 <pbuf_realloc+0x104>)
 8015ce8:	f00b fc84 	bl	80215f4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	897a      	ldrh	r2, [r7, #10]
 8015cf0:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	895a      	ldrh	r2, [r3, #10]
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d004      	beq.n	8015d0c <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	4618      	mov	r0, r3
 8015d08:	f000 f910 	bl	8015f2c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	2200      	movs	r2, #0
 8015d10:	601a      	str	r2, [r3, #0]
 8015d12:	e000      	b.n	8015d16 <pbuf_realloc+0xf6>
    return;
 8015d14:	bf00      	nop

}
 8015d16:	3710      	adds	r7, #16
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}
 8015d1c:	08022c0c 	.word	0x08022c0c
 8015d20:	08022d24 	.word	0x08022d24
 8015d24:	08022c6c 	.word	0x08022c6c
 8015d28:	08022d3c 	.word	0x08022d3c
 8015d2c:	08022d54 	.word	0x08022d54

08015d30 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b086      	sub	sp, #24
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	60f8      	str	r0, [r7, #12]
 8015d38:	60b9      	str	r1, [r7, #8]
 8015d3a:	4613      	mov	r3, r2
 8015d3c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d106      	bne.n	8015d52 <pbuf_add_header_impl+0x22>
 8015d44:	4b2b      	ldr	r3, [pc, #172]	; (8015df4 <pbuf_add_header_impl+0xc4>)
 8015d46:	f240 12df 	movw	r2, #479	; 0x1df
 8015d4a:	492b      	ldr	r1, [pc, #172]	; (8015df8 <pbuf_add_header_impl+0xc8>)
 8015d4c:	482b      	ldr	r0, [pc, #172]	; (8015dfc <pbuf_add_header_impl+0xcc>)
 8015d4e:	f00b fc51 	bl	80215f4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d003      	beq.n	8015d60 <pbuf_add_header_impl+0x30>
 8015d58:	68bb      	ldr	r3, [r7, #8]
 8015d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d5e:	d301      	bcc.n	8015d64 <pbuf_add_header_impl+0x34>
    return 1;
 8015d60:	2301      	movs	r3, #1
 8015d62:	e043      	b.n	8015dec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8015d64:	68bb      	ldr	r3, [r7, #8]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d101      	bne.n	8015d6e <pbuf_add_header_impl+0x3e>
    return 0;
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	e03e      	b.n	8015dec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8015d6e:	68bb      	ldr	r3, [r7, #8]
 8015d70:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	891a      	ldrh	r2, [r3, #8]
 8015d76:	8a7b      	ldrh	r3, [r7, #18]
 8015d78:	4413      	add	r3, r2
 8015d7a:	b29b      	uxth	r3, r3
 8015d7c:	8a7a      	ldrh	r2, [r7, #18]
 8015d7e:	429a      	cmp	r2, r3
 8015d80:	d901      	bls.n	8015d86 <pbuf_add_header_impl+0x56>
    return 1;
 8015d82:	2301      	movs	r3, #1
 8015d84:	e032      	b.n	8015dec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	7b1b      	ldrb	r3, [r3, #12]
 8015d8a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8015d8c:	8a3b      	ldrh	r3, [r7, #16]
 8015d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d00c      	beq.n	8015db0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	685a      	ldr	r2, [r3, #4]
 8015d9a:	68bb      	ldr	r3, [r7, #8]
 8015d9c:	425b      	negs	r3, r3
 8015d9e:	4413      	add	r3, r2
 8015da0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	3310      	adds	r3, #16
 8015da6:	697a      	ldr	r2, [r7, #20]
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d20d      	bcs.n	8015dc8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8015dac:	2301      	movs	r3, #1
 8015dae:	e01d      	b.n	8015dec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8015db0:	79fb      	ldrb	r3, [r7, #7]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d006      	beq.n	8015dc4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	685a      	ldr	r2, [r3, #4]
 8015dba:	68bb      	ldr	r3, [r7, #8]
 8015dbc:	425b      	negs	r3, r3
 8015dbe:	4413      	add	r3, r2
 8015dc0:	617b      	str	r3, [r7, #20]
 8015dc2:	e001      	b.n	8015dc8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8015dc4:	2301      	movs	r3, #1
 8015dc6:	e011      	b.n	8015dec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	697a      	ldr	r2, [r7, #20]
 8015dcc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	895a      	ldrh	r2, [r3, #10]
 8015dd2:	8a7b      	ldrh	r3, [r7, #18]
 8015dd4:	4413      	add	r3, r2
 8015dd6:	b29a      	uxth	r2, r3
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	891a      	ldrh	r2, [r3, #8]
 8015de0:	8a7b      	ldrh	r3, [r7, #18]
 8015de2:	4413      	add	r3, r2
 8015de4:	b29a      	uxth	r2, r3
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	811a      	strh	r2, [r3, #8]


  return 0;
 8015dea:	2300      	movs	r3, #0
}
 8015dec:	4618      	mov	r0, r3
 8015dee:	3718      	adds	r7, #24
 8015df0:	46bd      	mov	sp, r7
 8015df2:	bd80      	pop	{r7, pc}
 8015df4:	08022c0c 	.word	0x08022c0c
 8015df8:	08022d70 	.word	0x08022d70
 8015dfc:	08022c6c 	.word	0x08022c6c

08015e00 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8015e00:	b580      	push	{r7, lr}
 8015e02:	b082      	sub	sp, #8
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
 8015e08:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	6839      	ldr	r1, [r7, #0]
 8015e0e:	6878      	ldr	r0, [r7, #4]
 8015e10:	f7ff ff8e 	bl	8015d30 <pbuf_add_header_impl>
 8015e14:	4603      	mov	r3, r0
}
 8015e16:	4618      	mov	r0, r3
 8015e18:	3708      	adds	r7, #8
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	bd80      	pop	{r7, pc}
	...

08015e20 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b084      	sub	sp, #16
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
 8015e28:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d106      	bne.n	8015e3e <pbuf_remove_header+0x1e>
 8015e30:	4b20      	ldr	r3, [pc, #128]	; (8015eb4 <pbuf_remove_header+0x94>)
 8015e32:	f240 224b 	movw	r2, #587	; 0x24b
 8015e36:	4920      	ldr	r1, [pc, #128]	; (8015eb8 <pbuf_remove_header+0x98>)
 8015e38:	4820      	ldr	r0, [pc, #128]	; (8015ebc <pbuf_remove_header+0x9c>)
 8015e3a:	f00b fbdb 	bl	80215f4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d003      	beq.n	8015e4c <pbuf_remove_header+0x2c>
 8015e44:	683b      	ldr	r3, [r7, #0]
 8015e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e4a:	d301      	bcc.n	8015e50 <pbuf_remove_header+0x30>
    return 1;
 8015e4c:	2301      	movs	r3, #1
 8015e4e:	e02c      	b.n	8015eaa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8015e50:	683b      	ldr	r3, [r7, #0]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d101      	bne.n	8015e5a <pbuf_remove_header+0x3a>
    return 0;
 8015e56:	2300      	movs	r3, #0
 8015e58:	e027      	b.n	8015eaa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8015e5a:	683b      	ldr	r3, [r7, #0]
 8015e5c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	895b      	ldrh	r3, [r3, #10]
 8015e62:	89fa      	ldrh	r2, [r7, #14]
 8015e64:	429a      	cmp	r2, r3
 8015e66:	d908      	bls.n	8015e7a <pbuf_remove_header+0x5a>
 8015e68:	4b12      	ldr	r3, [pc, #72]	; (8015eb4 <pbuf_remove_header+0x94>)
 8015e6a:	f240 2255 	movw	r2, #597	; 0x255
 8015e6e:	4914      	ldr	r1, [pc, #80]	; (8015ec0 <pbuf_remove_header+0xa0>)
 8015e70:	4812      	ldr	r0, [pc, #72]	; (8015ebc <pbuf_remove_header+0x9c>)
 8015e72:	f00b fbbf 	bl	80215f4 <iprintf>
 8015e76:	2301      	movs	r3, #1
 8015e78:	e017      	b.n	8015eaa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	685b      	ldr	r3, [r3, #4]
 8015e7e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	685a      	ldr	r2, [r3, #4]
 8015e84:	683b      	ldr	r3, [r7, #0]
 8015e86:	441a      	add	r2, r3
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	895a      	ldrh	r2, [r3, #10]
 8015e90:	89fb      	ldrh	r3, [r7, #14]
 8015e92:	1ad3      	subs	r3, r2, r3
 8015e94:	b29a      	uxth	r2, r3
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	891a      	ldrh	r2, [r3, #8]
 8015e9e:	89fb      	ldrh	r3, [r7, #14]
 8015ea0:	1ad3      	subs	r3, r2, r3
 8015ea2:	b29a      	uxth	r2, r3
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8015ea8:	2300      	movs	r3, #0
}
 8015eaa:	4618      	mov	r0, r3
 8015eac:	3710      	adds	r7, #16
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}
 8015eb2:	bf00      	nop
 8015eb4:	08022c0c 	.word	0x08022c0c
 8015eb8:	08022d70 	.word	0x08022d70
 8015ebc:	08022c6c 	.word	0x08022c6c
 8015ec0:	08022d7c 	.word	0x08022d7c

08015ec4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b082      	sub	sp, #8
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
 8015ecc:	460b      	mov	r3, r1
 8015ece:	807b      	strh	r3, [r7, #2]
 8015ed0:	4613      	mov	r3, r2
 8015ed2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8015ed4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	da08      	bge.n	8015eee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8015edc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015ee0:	425b      	negs	r3, r3
 8015ee2:	4619      	mov	r1, r3
 8015ee4:	6878      	ldr	r0, [r7, #4]
 8015ee6:	f7ff ff9b 	bl	8015e20 <pbuf_remove_header>
 8015eea:	4603      	mov	r3, r0
 8015eec:	e007      	b.n	8015efe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8015eee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015ef2:	787a      	ldrb	r2, [r7, #1]
 8015ef4:	4619      	mov	r1, r3
 8015ef6:	6878      	ldr	r0, [r7, #4]
 8015ef8:	f7ff ff1a 	bl	8015d30 <pbuf_add_header_impl>
 8015efc:	4603      	mov	r3, r0
  }
}
 8015efe:	4618      	mov	r0, r3
 8015f00:	3708      	adds	r7, #8
 8015f02:	46bd      	mov	sp, r7
 8015f04:	bd80      	pop	{r7, pc}

08015f06 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8015f06:	b580      	push	{r7, lr}
 8015f08:	b082      	sub	sp, #8
 8015f0a:	af00      	add	r7, sp, #0
 8015f0c:	6078      	str	r0, [r7, #4]
 8015f0e:	460b      	mov	r3, r1
 8015f10:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8015f12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f16:	2201      	movs	r2, #1
 8015f18:	4619      	mov	r1, r3
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	f7ff ffd2 	bl	8015ec4 <pbuf_header_impl>
 8015f20:	4603      	mov	r3, r0
}
 8015f22:	4618      	mov	r0, r3
 8015f24:	3708      	adds	r7, #8
 8015f26:	46bd      	mov	sp, r7
 8015f28:	bd80      	pop	{r7, pc}
	...

08015f2c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b088      	sub	sp, #32
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d10b      	bne.n	8015f52 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d106      	bne.n	8015f4e <pbuf_free+0x22>
 8015f40:	4b3b      	ldr	r3, [pc, #236]	; (8016030 <pbuf_free+0x104>)
 8015f42:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8015f46:	493b      	ldr	r1, [pc, #236]	; (8016034 <pbuf_free+0x108>)
 8015f48:	483b      	ldr	r0, [pc, #236]	; (8016038 <pbuf_free+0x10c>)
 8015f4a:	f00b fb53 	bl	80215f4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8015f4e:	2300      	movs	r3, #0
 8015f50:	e069      	b.n	8016026 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8015f52:	2300      	movs	r3, #0
 8015f54:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8015f56:	e062      	b.n	801601e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8015f58:	f00a fd08 	bl	802096c <sys_arch_protect>
 8015f5c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	7b9b      	ldrb	r3, [r3, #14]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d106      	bne.n	8015f74 <pbuf_free+0x48>
 8015f66:	4b32      	ldr	r3, [pc, #200]	; (8016030 <pbuf_free+0x104>)
 8015f68:	f240 22f1 	movw	r2, #753	; 0x2f1
 8015f6c:	4933      	ldr	r1, [pc, #204]	; (801603c <pbuf_free+0x110>)
 8015f6e:	4832      	ldr	r0, [pc, #200]	; (8016038 <pbuf_free+0x10c>)
 8015f70:	f00b fb40 	bl	80215f4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	7b9b      	ldrb	r3, [r3, #14]
 8015f78:	3b01      	subs	r3, #1
 8015f7a:	b2da      	uxtb	r2, r3
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	739a      	strb	r2, [r3, #14]
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	7b9b      	ldrb	r3, [r3, #14]
 8015f84:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8015f86:	69b8      	ldr	r0, [r7, #24]
 8015f88:	f00a fcfe 	bl	8020988 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8015f8c:	7dfb      	ldrb	r3, [r7, #23]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d143      	bne.n	801601a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	7b1b      	ldrb	r3, [r3, #12]
 8015f9c:	f003 030f 	and.w	r3, r3, #15
 8015fa0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	7b5b      	ldrb	r3, [r3, #13]
 8015fa6:	f003 0302 	and.w	r3, r3, #2
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d011      	beq.n	8015fd2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8015fb2:	68bb      	ldr	r3, [r7, #8]
 8015fb4:	691b      	ldr	r3, [r3, #16]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d106      	bne.n	8015fc8 <pbuf_free+0x9c>
 8015fba:	4b1d      	ldr	r3, [pc, #116]	; (8016030 <pbuf_free+0x104>)
 8015fbc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8015fc0:	491f      	ldr	r1, [pc, #124]	; (8016040 <pbuf_free+0x114>)
 8015fc2:	481d      	ldr	r0, [pc, #116]	; (8016038 <pbuf_free+0x10c>)
 8015fc4:	f00b fb16 	bl	80215f4 <iprintf>
        pc->custom_free_function(p);
 8015fc8:	68bb      	ldr	r3, [r7, #8]
 8015fca:	691b      	ldr	r3, [r3, #16]
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	4798      	blx	r3
 8015fd0:	e01d      	b.n	801600e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8015fd2:	7bfb      	ldrb	r3, [r7, #15]
 8015fd4:	2b02      	cmp	r3, #2
 8015fd6:	d104      	bne.n	8015fe2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8015fd8:	6879      	ldr	r1, [r7, #4]
 8015fda:	200c      	movs	r0, #12
 8015fdc:	f7ff f8e0 	bl	80151a0 <memp_free>
 8015fe0:	e015      	b.n	801600e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8015fe2:	7bfb      	ldrb	r3, [r7, #15]
 8015fe4:	2b01      	cmp	r3, #1
 8015fe6:	d104      	bne.n	8015ff2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8015fe8:	6879      	ldr	r1, [r7, #4]
 8015fea:	200b      	movs	r0, #11
 8015fec:	f7ff f8d8 	bl	80151a0 <memp_free>
 8015ff0:	e00d      	b.n	801600e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8015ff2:	7bfb      	ldrb	r3, [r7, #15]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d103      	bne.n	8016000 <pbuf_free+0xd4>
          mem_free(p);
 8015ff8:	6878      	ldr	r0, [r7, #4]
 8015ffa:	f7fe fd63 	bl	8014ac4 <mem_free>
 8015ffe:	e006      	b.n	801600e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8016000:	4b0b      	ldr	r3, [pc, #44]	; (8016030 <pbuf_free+0x104>)
 8016002:	f240 320f 	movw	r2, #783	; 0x30f
 8016006:	490f      	ldr	r1, [pc, #60]	; (8016044 <pbuf_free+0x118>)
 8016008:	480b      	ldr	r0, [pc, #44]	; (8016038 <pbuf_free+0x10c>)
 801600a:	f00b faf3 	bl	80215f4 <iprintf>
        }
      }
      count++;
 801600e:	7ffb      	ldrb	r3, [r7, #31]
 8016010:	3301      	adds	r3, #1
 8016012:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8016014:	693b      	ldr	r3, [r7, #16]
 8016016:	607b      	str	r3, [r7, #4]
 8016018:	e001      	b.n	801601e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801601a:	2300      	movs	r3, #0
 801601c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d199      	bne.n	8015f58 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8016024:	7ffb      	ldrb	r3, [r7, #31]
}
 8016026:	4618      	mov	r0, r3
 8016028:	3720      	adds	r7, #32
 801602a:	46bd      	mov	sp, r7
 801602c:	bd80      	pop	{r7, pc}
 801602e:	bf00      	nop
 8016030:	08022c0c 	.word	0x08022c0c
 8016034:	08022d70 	.word	0x08022d70
 8016038:	08022c6c 	.word	0x08022c6c
 801603c:	08022d9c 	.word	0x08022d9c
 8016040:	08022db4 	.word	0x08022db4
 8016044:	08022dd8 	.word	0x08022dd8

08016048 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8016048:	b480      	push	{r7}
 801604a:	b085      	sub	sp, #20
 801604c:	af00      	add	r7, sp, #0
 801604e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8016050:	2300      	movs	r3, #0
 8016052:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8016054:	e005      	b.n	8016062 <pbuf_clen+0x1a>
    ++len;
 8016056:	89fb      	ldrh	r3, [r7, #14]
 8016058:	3301      	adds	r3, #1
 801605a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d1f6      	bne.n	8016056 <pbuf_clen+0xe>
  }
  return len;
 8016068:	89fb      	ldrh	r3, [r7, #14]
}
 801606a:	4618      	mov	r0, r3
 801606c:	3714      	adds	r7, #20
 801606e:	46bd      	mov	sp, r7
 8016070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016074:	4770      	bx	lr
	...

08016078 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b084      	sub	sp, #16
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d016      	beq.n	80160b4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8016086:	f00a fc71 	bl	802096c <sys_arch_protect>
 801608a:	60f8      	str	r0, [r7, #12]
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	7b9b      	ldrb	r3, [r3, #14]
 8016090:	3301      	adds	r3, #1
 8016092:	b2da      	uxtb	r2, r3
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	739a      	strb	r2, [r3, #14]
 8016098:	68f8      	ldr	r0, [r7, #12]
 801609a:	f00a fc75 	bl	8020988 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	7b9b      	ldrb	r3, [r3, #14]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d106      	bne.n	80160b4 <pbuf_ref+0x3c>
 80160a6:	4b05      	ldr	r3, [pc, #20]	; (80160bc <pbuf_ref+0x44>)
 80160a8:	f240 3242 	movw	r2, #834	; 0x342
 80160ac:	4904      	ldr	r1, [pc, #16]	; (80160c0 <pbuf_ref+0x48>)
 80160ae:	4805      	ldr	r0, [pc, #20]	; (80160c4 <pbuf_ref+0x4c>)
 80160b0:	f00b faa0 	bl	80215f4 <iprintf>
  }
}
 80160b4:	bf00      	nop
 80160b6:	3710      	adds	r7, #16
 80160b8:	46bd      	mov	sp, r7
 80160ba:	bd80      	pop	{r7, pc}
 80160bc:	08022c0c 	.word	0x08022c0c
 80160c0:	08022dec 	.word	0x08022dec
 80160c4:	08022c6c 	.word	0x08022c6c

080160c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b084      	sub	sp, #16
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
 80160d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d002      	beq.n	80160de <pbuf_cat+0x16>
 80160d8:	683b      	ldr	r3, [r7, #0]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d107      	bne.n	80160ee <pbuf_cat+0x26>
 80160de:	4b20      	ldr	r3, [pc, #128]	; (8016160 <pbuf_cat+0x98>)
 80160e0:	f240 325a 	movw	r2, #858	; 0x35a
 80160e4:	491f      	ldr	r1, [pc, #124]	; (8016164 <pbuf_cat+0x9c>)
 80160e6:	4820      	ldr	r0, [pc, #128]	; (8016168 <pbuf_cat+0xa0>)
 80160e8:	f00b fa84 	bl	80215f4 <iprintf>
 80160ec:	e034      	b.n	8016158 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	60fb      	str	r3, [r7, #12]
 80160f2:	e00a      	b.n	801610a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	891a      	ldrh	r2, [r3, #8]
 80160f8:	683b      	ldr	r3, [r7, #0]
 80160fa:	891b      	ldrh	r3, [r3, #8]
 80160fc:	4413      	add	r3, r2
 80160fe:	b29a      	uxth	r2, r3
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	60fb      	str	r3, [r7, #12]
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d1f0      	bne.n	80160f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	891a      	ldrh	r2, [r3, #8]
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	895b      	ldrh	r3, [r3, #10]
 801611a:	429a      	cmp	r2, r3
 801611c:	d006      	beq.n	801612c <pbuf_cat+0x64>
 801611e:	4b10      	ldr	r3, [pc, #64]	; (8016160 <pbuf_cat+0x98>)
 8016120:	f240 3262 	movw	r2, #866	; 0x362
 8016124:	4911      	ldr	r1, [pc, #68]	; (801616c <pbuf_cat+0xa4>)
 8016126:	4810      	ldr	r0, [pc, #64]	; (8016168 <pbuf_cat+0xa0>)
 8016128:	f00b fa64 	bl	80215f4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d006      	beq.n	8016142 <pbuf_cat+0x7a>
 8016134:	4b0a      	ldr	r3, [pc, #40]	; (8016160 <pbuf_cat+0x98>)
 8016136:	f240 3263 	movw	r2, #867	; 0x363
 801613a:	490d      	ldr	r1, [pc, #52]	; (8016170 <pbuf_cat+0xa8>)
 801613c:	480a      	ldr	r0, [pc, #40]	; (8016168 <pbuf_cat+0xa0>)
 801613e:	f00b fa59 	bl	80215f4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	891a      	ldrh	r2, [r3, #8]
 8016146:	683b      	ldr	r3, [r7, #0]
 8016148:	891b      	ldrh	r3, [r3, #8]
 801614a:	4413      	add	r3, r2
 801614c:	b29a      	uxth	r2, r3
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	683a      	ldr	r2, [r7, #0]
 8016156:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8016158:	3710      	adds	r7, #16
 801615a:	46bd      	mov	sp, r7
 801615c:	bd80      	pop	{r7, pc}
 801615e:	bf00      	nop
 8016160:	08022c0c 	.word	0x08022c0c
 8016164:	08022e00 	.word	0x08022e00
 8016168:	08022c6c 	.word	0x08022c6c
 801616c:	08022e38 	.word	0x08022e38
 8016170:	08022e68 	.word	0x08022e68

08016174 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8016174:	b580      	push	{r7, lr}
 8016176:	b082      	sub	sp, #8
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
 801617c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801617e:	6839      	ldr	r1, [r7, #0]
 8016180:	6878      	ldr	r0, [r7, #4]
 8016182:	f7ff ffa1 	bl	80160c8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8016186:	6838      	ldr	r0, [r7, #0]
 8016188:	f7ff ff76 	bl	8016078 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801618c:	bf00      	nop
 801618e:	3708      	adds	r7, #8
 8016190:	46bd      	mov	sp, r7
 8016192:	bd80      	pop	{r7, pc}

08016194 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b086      	sub	sp, #24
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]
 801619c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801619e:	2300      	movs	r3, #0
 80161a0:	617b      	str	r3, [r7, #20]
 80161a2:	2300      	movs	r3, #0
 80161a4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d008      	beq.n	80161be <pbuf_copy+0x2a>
 80161ac:	683b      	ldr	r3, [r7, #0]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d005      	beq.n	80161be <pbuf_copy+0x2a>
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	891a      	ldrh	r2, [r3, #8]
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	891b      	ldrh	r3, [r3, #8]
 80161ba:	429a      	cmp	r2, r3
 80161bc:	d209      	bcs.n	80161d2 <pbuf_copy+0x3e>
 80161be:	4b57      	ldr	r3, [pc, #348]	; (801631c <pbuf_copy+0x188>)
 80161c0:	f240 32ca 	movw	r2, #970	; 0x3ca
 80161c4:	4956      	ldr	r1, [pc, #344]	; (8016320 <pbuf_copy+0x18c>)
 80161c6:	4857      	ldr	r0, [pc, #348]	; (8016324 <pbuf_copy+0x190>)
 80161c8:	f00b fa14 	bl	80215f4 <iprintf>
 80161cc:	f06f 030f 	mvn.w	r3, #15
 80161d0:	e09f      	b.n	8016312 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	895b      	ldrh	r3, [r3, #10]
 80161d6:	461a      	mov	r2, r3
 80161d8:	697b      	ldr	r3, [r7, #20]
 80161da:	1ad2      	subs	r2, r2, r3
 80161dc:	683b      	ldr	r3, [r7, #0]
 80161de:	895b      	ldrh	r3, [r3, #10]
 80161e0:	4619      	mov	r1, r3
 80161e2:	693b      	ldr	r3, [r7, #16]
 80161e4:	1acb      	subs	r3, r1, r3
 80161e6:	429a      	cmp	r2, r3
 80161e8:	d306      	bcc.n	80161f8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80161ea:	683b      	ldr	r3, [r7, #0]
 80161ec:	895b      	ldrh	r3, [r3, #10]
 80161ee:	461a      	mov	r2, r3
 80161f0:	693b      	ldr	r3, [r7, #16]
 80161f2:	1ad3      	subs	r3, r2, r3
 80161f4:	60fb      	str	r3, [r7, #12]
 80161f6:	e005      	b.n	8016204 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	895b      	ldrh	r3, [r3, #10]
 80161fc:	461a      	mov	r2, r3
 80161fe:	697b      	ldr	r3, [r7, #20]
 8016200:	1ad3      	subs	r3, r2, r3
 8016202:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	685a      	ldr	r2, [r3, #4]
 8016208:	697b      	ldr	r3, [r7, #20]
 801620a:	18d0      	adds	r0, r2, r3
 801620c:	683b      	ldr	r3, [r7, #0]
 801620e:	685a      	ldr	r2, [r3, #4]
 8016210:	693b      	ldr	r3, [r7, #16]
 8016212:	4413      	add	r3, r2
 8016214:	68fa      	ldr	r2, [r7, #12]
 8016216:	4619      	mov	r1, r3
 8016218:	f00b f931 	bl	802147e <memcpy>
    offset_to += len;
 801621c:	697a      	ldr	r2, [r7, #20]
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	4413      	add	r3, r2
 8016222:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8016224:	693a      	ldr	r2, [r7, #16]
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	4413      	add	r3, r2
 801622a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	895b      	ldrh	r3, [r3, #10]
 8016230:	461a      	mov	r2, r3
 8016232:	697b      	ldr	r3, [r7, #20]
 8016234:	4293      	cmp	r3, r2
 8016236:	d906      	bls.n	8016246 <pbuf_copy+0xb2>
 8016238:	4b38      	ldr	r3, [pc, #224]	; (801631c <pbuf_copy+0x188>)
 801623a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801623e:	493a      	ldr	r1, [pc, #232]	; (8016328 <pbuf_copy+0x194>)
 8016240:	4838      	ldr	r0, [pc, #224]	; (8016324 <pbuf_copy+0x190>)
 8016242:	f00b f9d7 	bl	80215f4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8016246:	683b      	ldr	r3, [r7, #0]
 8016248:	895b      	ldrh	r3, [r3, #10]
 801624a:	461a      	mov	r2, r3
 801624c:	693b      	ldr	r3, [r7, #16]
 801624e:	4293      	cmp	r3, r2
 8016250:	d906      	bls.n	8016260 <pbuf_copy+0xcc>
 8016252:	4b32      	ldr	r3, [pc, #200]	; (801631c <pbuf_copy+0x188>)
 8016254:	f240 32da 	movw	r2, #986	; 0x3da
 8016258:	4934      	ldr	r1, [pc, #208]	; (801632c <pbuf_copy+0x198>)
 801625a:	4832      	ldr	r0, [pc, #200]	; (8016324 <pbuf_copy+0x190>)
 801625c:	f00b f9ca 	bl	80215f4 <iprintf>
    if (offset_from >= p_from->len) {
 8016260:	683b      	ldr	r3, [r7, #0]
 8016262:	895b      	ldrh	r3, [r3, #10]
 8016264:	461a      	mov	r2, r3
 8016266:	693b      	ldr	r3, [r7, #16]
 8016268:	4293      	cmp	r3, r2
 801626a:	d304      	bcc.n	8016276 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801626c:	2300      	movs	r3, #0
 801626e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8016270:	683b      	ldr	r3, [r7, #0]
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	895b      	ldrh	r3, [r3, #10]
 801627a:	461a      	mov	r2, r3
 801627c:	697b      	ldr	r3, [r7, #20]
 801627e:	4293      	cmp	r3, r2
 8016280:	d114      	bne.n	80162ac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8016282:	2300      	movs	r3, #0
 8016284:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d10c      	bne.n	80162ac <pbuf_copy+0x118>
 8016292:	683b      	ldr	r3, [r7, #0]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d009      	beq.n	80162ac <pbuf_copy+0x118>
 8016298:	4b20      	ldr	r3, [pc, #128]	; (801631c <pbuf_copy+0x188>)
 801629a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801629e:	4924      	ldr	r1, [pc, #144]	; (8016330 <pbuf_copy+0x19c>)
 80162a0:	4820      	ldr	r0, [pc, #128]	; (8016324 <pbuf_copy+0x190>)
 80162a2:	f00b f9a7 	bl	80215f4 <iprintf>
 80162a6:	f06f 030f 	mvn.w	r3, #15
 80162aa:	e032      	b.n	8016312 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80162ac:	683b      	ldr	r3, [r7, #0]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d013      	beq.n	80162da <pbuf_copy+0x146>
 80162b2:	683b      	ldr	r3, [r7, #0]
 80162b4:	895a      	ldrh	r2, [r3, #10]
 80162b6:	683b      	ldr	r3, [r7, #0]
 80162b8:	891b      	ldrh	r3, [r3, #8]
 80162ba:	429a      	cmp	r2, r3
 80162bc:	d10d      	bne.n	80162da <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80162be:	683b      	ldr	r3, [r7, #0]
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d009      	beq.n	80162da <pbuf_copy+0x146>
 80162c6:	4b15      	ldr	r3, [pc, #84]	; (801631c <pbuf_copy+0x188>)
 80162c8:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80162cc:	4919      	ldr	r1, [pc, #100]	; (8016334 <pbuf_copy+0x1a0>)
 80162ce:	4815      	ldr	r0, [pc, #84]	; (8016324 <pbuf_copy+0x190>)
 80162d0:	f00b f990 	bl	80215f4 <iprintf>
 80162d4:	f06f 0305 	mvn.w	r3, #5
 80162d8:	e01b      	b.n	8016312 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d013      	beq.n	8016308 <pbuf_copy+0x174>
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	895a      	ldrh	r2, [r3, #10]
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	891b      	ldrh	r3, [r3, #8]
 80162e8:	429a      	cmp	r2, r3
 80162ea:	d10d      	bne.n	8016308 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d009      	beq.n	8016308 <pbuf_copy+0x174>
 80162f4:	4b09      	ldr	r3, [pc, #36]	; (801631c <pbuf_copy+0x188>)
 80162f6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80162fa:	490e      	ldr	r1, [pc, #56]	; (8016334 <pbuf_copy+0x1a0>)
 80162fc:	4809      	ldr	r0, [pc, #36]	; (8016324 <pbuf_copy+0x190>)
 80162fe:	f00b f979 	bl	80215f4 <iprintf>
 8016302:	f06f 0305 	mvn.w	r3, #5
 8016306:	e004      	b.n	8016312 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8016308:	683b      	ldr	r3, [r7, #0]
 801630a:	2b00      	cmp	r3, #0
 801630c:	f47f af61 	bne.w	80161d2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8016310:	2300      	movs	r3, #0
}
 8016312:	4618      	mov	r0, r3
 8016314:	3718      	adds	r7, #24
 8016316:	46bd      	mov	sp, r7
 8016318:	bd80      	pop	{r7, pc}
 801631a:	bf00      	nop
 801631c:	08022c0c 	.word	0x08022c0c
 8016320:	08022eb4 	.word	0x08022eb4
 8016324:	08022c6c 	.word	0x08022c6c
 8016328:	08022ee4 	.word	0x08022ee4
 801632c:	08022efc 	.word	0x08022efc
 8016330:	08022f18 	.word	0x08022f18
 8016334:	08022f28 	.word	0x08022f28

08016338 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8016338:	b580      	push	{r7, lr}
 801633a:	b088      	sub	sp, #32
 801633c:	af00      	add	r7, sp, #0
 801633e:	60f8      	str	r0, [r7, #12]
 8016340:	60b9      	str	r1, [r7, #8]
 8016342:	4611      	mov	r1, r2
 8016344:	461a      	mov	r2, r3
 8016346:	460b      	mov	r3, r1
 8016348:	80fb      	strh	r3, [r7, #6]
 801634a:	4613      	mov	r3, r2
 801634c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801634e:	2300      	movs	r3, #0
 8016350:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8016352:	2300      	movs	r3, #0
 8016354:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d108      	bne.n	801636e <pbuf_copy_partial+0x36>
 801635c:	4b2b      	ldr	r3, [pc, #172]	; (801640c <pbuf_copy_partial+0xd4>)
 801635e:	f240 420a 	movw	r2, #1034	; 0x40a
 8016362:	492b      	ldr	r1, [pc, #172]	; (8016410 <pbuf_copy_partial+0xd8>)
 8016364:	482b      	ldr	r0, [pc, #172]	; (8016414 <pbuf_copy_partial+0xdc>)
 8016366:	f00b f945 	bl	80215f4 <iprintf>
 801636a:	2300      	movs	r3, #0
 801636c:	e04a      	b.n	8016404 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801636e:	68bb      	ldr	r3, [r7, #8]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d108      	bne.n	8016386 <pbuf_copy_partial+0x4e>
 8016374:	4b25      	ldr	r3, [pc, #148]	; (801640c <pbuf_copy_partial+0xd4>)
 8016376:	f240 420b 	movw	r2, #1035	; 0x40b
 801637a:	4927      	ldr	r1, [pc, #156]	; (8016418 <pbuf_copy_partial+0xe0>)
 801637c:	4825      	ldr	r0, [pc, #148]	; (8016414 <pbuf_copy_partial+0xdc>)
 801637e:	f00b f939 	bl	80215f4 <iprintf>
 8016382:	2300      	movs	r3, #0
 8016384:	e03e      	b.n	8016404 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	61fb      	str	r3, [r7, #28]
 801638a:	e034      	b.n	80163f6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801638c:	88bb      	ldrh	r3, [r7, #4]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d00a      	beq.n	80163a8 <pbuf_copy_partial+0x70>
 8016392:	69fb      	ldr	r3, [r7, #28]
 8016394:	895b      	ldrh	r3, [r3, #10]
 8016396:	88ba      	ldrh	r2, [r7, #4]
 8016398:	429a      	cmp	r2, r3
 801639a:	d305      	bcc.n	80163a8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801639c:	69fb      	ldr	r3, [r7, #28]
 801639e:	895b      	ldrh	r3, [r3, #10]
 80163a0:	88ba      	ldrh	r2, [r7, #4]
 80163a2:	1ad3      	subs	r3, r2, r3
 80163a4:	80bb      	strh	r3, [r7, #4]
 80163a6:	e023      	b.n	80163f0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80163a8:	69fb      	ldr	r3, [r7, #28]
 80163aa:	895a      	ldrh	r2, [r3, #10]
 80163ac:	88bb      	ldrh	r3, [r7, #4]
 80163ae:	1ad3      	subs	r3, r2, r3
 80163b0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80163b2:	8b3a      	ldrh	r2, [r7, #24]
 80163b4:	88fb      	ldrh	r3, [r7, #6]
 80163b6:	429a      	cmp	r2, r3
 80163b8:	d901      	bls.n	80163be <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80163ba:	88fb      	ldrh	r3, [r7, #6]
 80163bc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80163be:	8b7b      	ldrh	r3, [r7, #26]
 80163c0:	68ba      	ldr	r2, [r7, #8]
 80163c2:	18d0      	adds	r0, r2, r3
 80163c4:	69fb      	ldr	r3, [r7, #28]
 80163c6:	685a      	ldr	r2, [r3, #4]
 80163c8:	88bb      	ldrh	r3, [r7, #4]
 80163ca:	4413      	add	r3, r2
 80163cc:	8b3a      	ldrh	r2, [r7, #24]
 80163ce:	4619      	mov	r1, r3
 80163d0:	f00b f855 	bl	802147e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80163d4:	8afa      	ldrh	r2, [r7, #22]
 80163d6:	8b3b      	ldrh	r3, [r7, #24]
 80163d8:	4413      	add	r3, r2
 80163da:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80163dc:	8b7a      	ldrh	r2, [r7, #26]
 80163de:	8b3b      	ldrh	r3, [r7, #24]
 80163e0:	4413      	add	r3, r2
 80163e2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80163e4:	88fa      	ldrh	r2, [r7, #6]
 80163e6:	8b3b      	ldrh	r3, [r7, #24]
 80163e8:	1ad3      	subs	r3, r2, r3
 80163ea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80163ec:	2300      	movs	r3, #0
 80163ee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80163f0:	69fb      	ldr	r3, [r7, #28]
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	61fb      	str	r3, [r7, #28]
 80163f6:	88fb      	ldrh	r3, [r7, #6]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d002      	beq.n	8016402 <pbuf_copy_partial+0xca>
 80163fc:	69fb      	ldr	r3, [r7, #28]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d1c4      	bne.n	801638c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8016402:	8afb      	ldrh	r3, [r7, #22]
}
 8016404:	4618      	mov	r0, r3
 8016406:	3720      	adds	r7, #32
 8016408:	46bd      	mov	sp, r7
 801640a:	bd80      	pop	{r7, pc}
 801640c:	08022c0c 	.word	0x08022c0c
 8016410:	08022f54 	.word	0x08022f54
 8016414:	08022c6c 	.word	0x08022c6c
 8016418:	08022f74 	.word	0x08022f74

0801641c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b084      	sub	sp, #16
 8016420:	af00      	add	r7, sp, #0
 8016422:	4603      	mov	r3, r0
 8016424:	603a      	str	r2, [r7, #0]
 8016426:	71fb      	strb	r3, [r7, #7]
 8016428:	460b      	mov	r3, r1
 801642a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	8919      	ldrh	r1, [r3, #8]
 8016430:	88ba      	ldrh	r2, [r7, #4]
 8016432:	79fb      	ldrb	r3, [r7, #7]
 8016434:	4618      	mov	r0, r3
 8016436:	f7ff fa99 	bl	801596c <pbuf_alloc>
 801643a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d101      	bne.n	8016446 <pbuf_clone+0x2a>
    return NULL;
 8016442:	2300      	movs	r3, #0
 8016444:	e011      	b.n	801646a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8016446:	6839      	ldr	r1, [r7, #0]
 8016448:	68f8      	ldr	r0, [r7, #12]
 801644a:	f7ff fea3 	bl	8016194 <pbuf_copy>
 801644e:	4603      	mov	r3, r0
 8016450:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8016452:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d006      	beq.n	8016468 <pbuf_clone+0x4c>
 801645a:	4b06      	ldr	r3, [pc, #24]	; (8016474 <pbuf_clone+0x58>)
 801645c:	f240 5224 	movw	r2, #1316	; 0x524
 8016460:	4905      	ldr	r1, [pc, #20]	; (8016478 <pbuf_clone+0x5c>)
 8016462:	4806      	ldr	r0, [pc, #24]	; (801647c <pbuf_clone+0x60>)
 8016464:	f00b f8c6 	bl	80215f4 <iprintf>
  return q;
 8016468:	68fb      	ldr	r3, [r7, #12]
}
 801646a:	4618      	mov	r0, r3
 801646c:	3710      	adds	r7, #16
 801646e:	46bd      	mov	sp, r7
 8016470:	bd80      	pop	{r7, pc}
 8016472:	bf00      	nop
 8016474:	08022c0c 	.word	0x08022c0c
 8016478:	08023080 	.word	0x08023080
 801647c:	08022c6c 	.word	0x08022c6c

08016480 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8016480:	b580      	push	{r7, lr}
 8016482:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016484:	f00b f932 	bl	80216ec <rand>
 8016488:	4603      	mov	r3, r0
 801648a:	b29b      	uxth	r3, r3
 801648c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016490:	b29b      	uxth	r3, r3
 8016492:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016496:	b29a      	uxth	r2, r3
 8016498:	4b01      	ldr	r3, [pc, #4]	; (80164a0 <tcp_init+0x20>)
 801649a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801649c:	bf00      	nop
 801649e:	bd80      	pop	{r7, pc}
 80164a0:	20000034 	.word	0x20000034

080164a4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b082      	sub	sp, #8
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	7d1b      	ldrb	r3, [r3, #20]
 80164b0:	2b01      	cmp	r3, #1
 80164b2:	d105      	bne.n	80164c0 <tcp_free+0x1c>
 80164b4:	4b06      	ldr	r3, [pc, #24]	; (80164d0 <tcp_free+0x2c>)
 80164b6:	22d4      	movs	r2, #212	; 0xd4
 80164b8:	4906      	ldr	r1, [pc, #24]	; (80164d4 <tcp_free+0x30>)
 80164ba:	4807      	ldr	r0, [pc, #28]	; (80164d8 <tcp_free+0x34>)
 80164bc:	f00b f89a 	bl	80215f4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80164c0:	6879      	ldr	r1, [r7, #4]
 80164c2:	2001      	movs	r0, #1
 80164c4:	f7fe fe6c 	bl	80151a0 <memp_free>
}
 80164c8:	bf00      	nop
 80164ca:	3708      	adds	r7, #8
 80164cc:	46bd      	mov	sp, r7
 80164ce:	bd80      	pop	{r7, pc}
 80164d0:	0802310c 	.word	0x0802310c
 80164d4:	0802313c 	.word	0x0802313c
 80164d8:	08023150 	.word	0x08023150

080164dc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	b082      	sub	sp, #8
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	7d1b      	ldrb	r3, [r3, #20]
 80164e8:	2b01      	cmp	r3, #1
 80164ea:	d105      	bne.n	80164f8 <tcp_free_listen+0x1c>
 80164ec:	4b06      	ldr	r3, [pc, #24]	; (8016508 <tcp_free_listen+0x2c>)
 80164ee:	22df      	movs	r2, #223	; 0xdf
 80164f0:	4906      	ldr	r1, [pc, #24]	; (801650c <tcp_free_listen+0x30>)
 80164f2:	4807      	ldr	r0, [pc, #28]	; (8016510 <tcp_free_listen+0x34>)
 80164f4:	f00b f87e 	bl	80215f4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80164f8:	6879      	ldr	r1, [r7, #4]
 80164fa:	2002      	movs	r0, #2
 80164fc:	f7fe fe50 	bl	80151a0 <memp_free>
}
 8016500:	bf00      	nop
 8016502:	3708      	adds	r7, #8
 8016504:	46bd      	mov	sp, r7
 8016506:	bd80      	pop	{r7, pc}
 8016508:	0802310c 	.word	0x0802310c
 801650c:	08023178 	.word	0x08023178
 8016510:	08023150 	.word	0x08023150

08016514 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8016518:	f000 fe98 	bl	801724c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801651c:	4b07      	ldr	r3, [pc, #28]	; (801653c <tcp_tmr+0x28>)
 801651e:	781b      	ldrb	r3, [r3, #0]
 8016520:	3301      	adds	r3, #1
 8016522:	b2da      	uxtb	r2, r3
 8016524:	4b05      	ldr	r3, [pc, #20]	; (801653c <tcp_tmr+0x28>)
 8016526:	701a      	strb	r2, [r3, #0]
 8016528:	4b04      	ldr	r3, [pc, #16]	; (801653c <tcp_tmr+0x28>)
 801652a:	781b      	ldrb	r3, [r3, #0]
 801652c:	f003 0301 	and.w	r3, r3, #1
 8016530:	2b00      	cmp	r3, #0
 8016532:	d001      	beq.n	8016538 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8016534:	f000 fb4c 	bl	8016bd0 <tcp_slowtmr>
  }
}
 8016538:	bf00      	nop
 801653a:	bd80      	pop	{r7, pc}
 801653c:	20008fbd 	.word	0x20008fbd

08016540 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b084      	sub	sp, #16
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
 8016548:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801654a:	683b      	ldr	r3, [r7, #0]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d105      	bne.n	801655c <tcp_remove_listener+0x1c>
 8016550:	4b0d      	ldr	r3, [pc, #52]	; (8016588 <tcp_remove_listener+0x48>)
 8016552:	22ff      	movs	r2, #255	; 0xff
 8016554:	490d      	ldr	r1, [pc, #52]	; (801658c <tcp_remove_listener+0x4c>)
 8016556:	480e      	ldr	r0, [pc, #56]	; (8016590 <tcp_remove_listener+0x50>)
 8016558:	f00b f84c 	bl	80215f4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	60fb      	str	r3, [r7, #12]
 8016560:	e00a      	b.n	8016578 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016566:	683a      	ldr	r2, [r7, #0]
 8016568:	429a      	cmp	r2, r3
 801656a:	d102      	bne.n	8016572 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	2200      	movs	r2, #0
 8016570:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	68db      	ldr	r3, [r3, #12]
 8016576:	60fb      	str	r3, [r7, #12]
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d1f1      	bne.n	8016562 <tcp_remove_listener+0x22>
    }
  }
}
 801657e:	bf00      	nop
 8016580:	3710      	adds	r7, #16
 8016582:	46bd      	mov	sp, r7
 8016584:	bd80      	pop	{r7, pc}
 8016586:	bf00      	nop
 8016588:	0802310c 	.word	0x0802310c
 801658c:	08023194 	.word	0x08023194
 8016590:	08023150 	.word	0x08023150

08016594 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b084      	sub	sp, #16
 8016598:	af00      	add	r7, sp, #0
 801659a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d106      	bne.n	80165b0 <tcp_listen_closed+0x1c>
 80165a2:	4b14      	ldr	r3, [pc, #80]	; (80165f4 <tcp_listen_closed+0x60>)
 80165a4:	f240 1211 	movw	r2, #273	; 0x111
 80165a8:	4913      	ldr	r1, [pc, #76]	; (80165f8 <tcp_listen_closed+0x64>)
 80165aa:	4814      	ldr	r0, [pc, #80]	; (80165fc <tcp_listen_closed+0x68>)
 80165ac:	f00b f822 	bl	80215f4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	7d1b      	ldrb	r3, [r3, #20]
 80165b4:	2b01      	cmp	r3, #1
 80165b6:	d006      	beq.n	80165c6 <tcp_listen_closed+0x32>
 80165b8:	4b0e      	ldr	r3, [pc, #56]	; (80165f4 <tcp_listen_closed+0x60>)
 80165ba:	f44f 7289 	mov.w	r2, #274	; 0x112
 80165be:	4910      	ldr	r1, [pc, #64]	; (8016600 <tcp_listen_closed+0x6c>)
 80165c0:	480e      	ldr	r0, [pc, #56]	; (80165fc <tcp_listen_closed+0x68>)
 80165c2:	f00b f817 	bl	80215f4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80165c6:	2301      	movs	r3, #1
 80165c8:	60fb      	str	r3, [r7, #12]
 80165ca:	e00b      	b.n	80165e4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80165cc:	4a0d      	ldr	r2, [pc, #52]	; (8016604 <tcp_listen_closed+0x70>)
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	6879      	ldr	r1, [r7, #4]
 80165d8:	4618      	mov	r0, r3
 80165da:	f7ff ffb1 	bl	8016540 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	3301      	adds	r3, #1
 80165e2:	60fb      	str	r3, [r7, #12]
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	2b03      	cmp	r3, #3
 80165e8:	d9f0      	bls.n	80165cc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80165ea:	bf00      	nop
 80165ec:	3710      	adds	r7, #16
 80165ee:	46bd      	mov	sp, r7
 80165f0:	bd80      	pop	{r7, pc}
 80165f2:	bf00      	nop
 80165f4:	0802310c 	.word	0x0802310c
 80165f8:	080231bc 	.word	0x080231bc
 80165fc:	08023150 	.word	0x08023150
 8016600:	080231c8 	.word	0x080231c8
 8016604:	08025510 	.word	0x08025510

08016608 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8016608:	b5b0      	push	{r4, r5, r7, lr}
 801660a:	b088      	sub	sp, #32
 801660c:	af04      	add	r7, sp, #16
 801660e:	6078      	str	r0, [r7, #4]
 8016610:	460b      	mov	r3, r1
 8016612:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d106      	bne.n	8016628 <tcp_close_shutdown+0x20>
 801661a:	4b61      	ldr	r3, [pc, #388]	; (80167a0 <tcp_close_shutdown+0x198>)
 801661c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8016620:	4960      	ldr	r1, [pc, #384]	; (80167a4 <tcp_close_shutdown+0x19c>)
 8016622:	4861      	ldr	r0, [pc, #388]	; (80167a8 <tcp_close_shutdown+0x1a0>)
 8016624:	f00a ffe6 	bl	80215f4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8016628:	78fb      	ldrb	r3, [r7, #3]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d066      	beq.n	80166fc <tcp_close_shutdown+0xf4>
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	7d1b      	ldrb	r3, [r3, #20]
 8016632:	2b04      	cmp	r3, #4
 8016634:	d003      	beq.n	801663e <tcp_close_shutdown+0x36>
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	7d1b      	ldrb	r3, [r3, #20]
 801663a:	2b07      	cmp	r3, #7
 801663c:	d15e      	bne.n	80166fc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016642:	2b00      	cmp	r3, #0
 8016644:	d104      	bne.n	8016650 <tcp_close_shutdown+0x48>
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801664a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801664e:	d055      	beq.n	80166fc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	8b5b      	ldrh	r3, [r3, #26]
 8016654:	f003 0310 	and.w	r3, r3, #16
 8016658:	2b00      	cmp	r3, #0
 801665a:	d106      	bne.n	801666a <tcp_close_shutdown+0x62>
 801665c:	4b50      	ldr	r3, [pc, #320]	; (80167a0 <tcp_close_shutdown+0x198>)
 801665e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8016662:	4952      	ldr	r1, [pc, #328]	; (80167ac <tcp_close_shutdown+0x1a4>)
 8016664:	4850      	ldr	r0, [pc, #320]	; (80167a8 <tcp_close_shutdown+0x1a0>)
 8016666:	f00a ffc5 	bl	80215f4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016672:	687d      	ldr	r5, [r7, #4]
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	3304      	adds	r3, #4
 8016678:	687a      	ldr	r2, [r7, #4]
 801667a:	8ad2      	ldrh	r2, [r2, #22]
 801667c:	6879      	ldr	r1, [r7, #4]
 801667e:	8b09      	ldrh	r1, [r1, #24]
 8016680:	9102      	str	r1, [sp, #8]
 8016682:	9201      	str	r2, [sp, #4]
 8016684:	9300      	str	r3, [sp, #0]
 8016686:	462b      	mov	r3, r5
 8016688:	4622      	mov	r2, r4
 801668a:	4601      	mov	r1, r0
 801668c:	6878      	ldr	r0, [r7, #4]
 801668e:	f004 fe91 	bl	801b3b4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8016692:	6878      	ldr	r0, [r7, #4]
 8016694:	f001 f8ba 	bl	801780c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8016698:	4b45      	ldr	r3, [pc, #276]	; (80167b0 <tcp_close_shutdown+0x1a8>)
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	687a      	ldr	r2, [r7, #4]
 801669e:	429a      	cmp	r2, r3
 80166a0:	d105      	bne.n	80166ae <tcp_close_shutdown+0xa6>
 80166a2:	4b43      	ldr	r3, [pc, #268]	; (80167b0 <tcp_close_shutdown+0x1a8>)
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	68db      	ldr	r3, [r3, #12]
 80166a8:	4a41      	ldr	r2, [pc, #260]	; (80167b0 <tcp_close_shutdown+0x1a8>)
 80166aa:	6013      	str	r3, [r2, #0]
 80166ac:	e013      	b.n	80166d6 <tcp_close_shutdown+0xce>
 80166ae:	4b40      	ldr	r3, [pc, #256]	; (80167b0 <tcp_close_shutdown+0x1a8>)
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	60fb      	str	r3, [r7, #12]
 80166b4:	e00c      	b.n	80166d0 <tcp_close_shutdown+0xc8>
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	68db      	ldr	r3, [r3, #12]
 80166ba:	687a      	ldr	r2, [r7, #4]
 80166bc:	429a      	cmp	r2, r3
 80166be:	d104      	bne.n	80166ca <tcp_close_shutdown+0xc2>
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	68da      	ldr	r2, [r3, #12]
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	60da      	str	r2, [r3, #12]
 80166c8:	e005      	b.n	80166d6 <tcp_close_shutdown+0xce>
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	68db      	ldr	r3, [r3, #12]
 80166ce:	60fb      	str	r3, [r7, #12]
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d1ef      	bne.n	80166b6 <tcp_close_shutdown+0xae>
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	2200      	movs	r2, #0
 80166da:	60da      	str	r2, [r3, #12]
 80166dc:	4b35      	ldr	r3, [pc, #212]	; (80167b4 <tcp_close_shutdown+0x1ac>)
 80166de:	2201      	movs	r2, #1
 80166e0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80166e2:	4b35      	ldr	r3, [pc, #212]	; (80167b8 <tcp_close_shutdown+0x1b0>)
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	687a      	ldr	r2, [r7, #4]
 80166e8:	429a      	cmp	r2, r3
 80166ea:	d102      	bne.n	80166f2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80166ec:	f003 fd4c 	bl	801a188 <tcp_trigger_input_pcb_close>
 80166f0:	e002      	b.n	80166f8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80166f2:	6878      	ldr	r0, [r7, #4]
 80166f4:	f7ff fed6 	bl	80164a4 <tcp_free>
      }
      return ERR_OK;
 80166f8:	2300      	movs	r3, #0
 80166fa:	e04d      	b.n	8016798 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	7d1b      	ldrb	r3, [r3, #20]
 8016700:	2b01      	cmp	r3, #1
 8016702:	d02d      	beq.n	8016760 <tcp_close_shutdown+0x158>
 8016704:	2b02      	cmp	r3, #2
 8016706:	d036      	beq.n	8016776 <tcp_close_shutdown+0x16e>
 8016708:	2b00      	cmp	r3, #0
 801670a:	d13f      	bne.n	801678c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	8adb      	ldrh	r3, [r3, #22]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d021      	beq.n	8016758 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016714:	4b29      	ldr	r3, [pc, #164]	; (80167bc <tcp_close_shutdown+0x1b4>)
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	687a      	ldr	r2, [r7, #4]
 801671a:	429a      	cmp	r2, r3
 801671c:	d105      	bne.n	801672a <tcp_close_shutdown+0x122>
 801671e:	4b27      	ldr	r3, [pc, #156]	; (80167bc <tcp_close_shutdown+0x1b4>)
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	68db      	ldr	r3, [r3, #12]
 8016724:	4a25      	ldr	r2, [pc, #148]	; (80167bc <tcp_close_shutdown+0x1b4>)
 8016726:	6013      	str	r3, [r2, #0]
 8016728:	e013      	b.n	8016752 <tcp_close_shutdown+0x14a>
 801672a:	4b24      	ldr	r3, [pc, #144]	; (80167bc <tcp_close_shutdown+0x1b4>)
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	60bb      	str	r3, [r7, #8]
 8016730:	e00c      	b.n	801674c <tcp_close_shutdown+0x144>
 8016732:	68bb      	ldr	r3, [r7, #8]
 8016734:	68db      	ldr	r3, [r3, #12]
 8016736:	687a      	ldr	r2, [r7, #4]
 8016738:	429a      	cmp	r2, r3
 801673a:	d104      	bne.n	8016746 <tcp_close_shutdown+0x13e>
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	68da      	ldr	r2, [r3, #12]
 8016740:	68bb      	ldr	r3, [r7, #8]
 8016742:	60da      	str	r2, [r3, #12]
 8016744:	e005      	b.n	8016752 <tcp_close_shutdown+0x14a>
 8016746:	68bb      	ldr	r3, [r7, #8]
 8016748:	68db      	ldr	r3, [r3, #12]
 801674a:	60bb      	str	r3, [r7, #8]
 801674c:	68bb      	ldr	r3, [r7, #8]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d1ef      	bne.n	8016732 <tcp_close_shutdown+0x12a>
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	2200      	movs	r2, #0
 8016756:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8016758:	6878      	ldr	r0, [r7, #4]
 801675a:	f7ff fea3 	bl	80164a4 <tcp_free>
      break;
 801675e:	e01a      	b.n	8016796 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8016760:	6878      	ldr	r0, [r7, #4]
 8016762:	f7ff ff17 	bl	8016594 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8016766:	6879      	ldr	r1, [r7, #4]
 8016768:	4815      	ldr	r0, [pc, #84]	; (80167c0 <tcp_close_shutdown+0x1b8>)
 801676a:	f001 f89f 	bl	80178ac <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801676e:	6878      	ldr	r0, [r7, #4]
 8016770:	f7ff feb4 	bl	80164dc <tcp_free_listen>
      break;
 8016774:	e00f      	b.n	8016796 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016776:	6879      	ldr	r1, [r7, #4]
 8016778:	480d      	ldr	r0, [pc, #52]	; (80167b0 <tcp_close_shutdown+0x1a8>)
 801677a:	f001 f897 	bl	80178ac <tcp_pcb_remove>
 801677e:	4b0d      	ldr	r3, [pc, #52]	; (80167b4 <tcp_close_shutdown+0x1ac>)
 8016780:	2201      	movs	r2, #1
 8016782:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8016784:	6878      	ldr	r0, [r7, #4]
 8016786:	f7ff fe8d 	bl	80164a4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801678a:	e004      	b.n	8016796 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 801678c:	6878      	ldr	r0, [r7, #4]
 801678e:	f000 f819 	bl	80167c4 <tcp_close_shutdown_fin>
 8016792:	4603      	mov	r3, r0
 8016794:	e000      	b.n	8016798 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8016796:	2300      	movs	r3, #0
}
 8016798:	4618      	mov	r0, r3
 801679a:	3710      	adds	r7, #16
 801679c:	46bd      	mov	sp, r7
 801679e:	bdb0      	pop	{r4, r5, r7, pc}
 80167a0:	0802310c 	.word	0x0802310c
 80167a4:	080231e0 	.word	0x080231e0
 80167a8:	08023150 	.word	0x08023150
 80167ac:	08023200 	.word	0x08023200
 80167b0:	20010358 	.word	0x20010358
 80167b4:	20010354 	.word	0x20010354
 80167b8:	2001036c 	.word	0x2001036c
 80167bc:	20010364 	.word	0x20010364
 80167c0:	20010360 	.word	0x20010360

080167c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b084      	sub	sp, #16
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d106      	bne.n	80167e0 <tcp_close_shutdown_fin+0x1c>
 80167d2:	4b2c      	ldr	r3, [pc, #176]	; (8016884 <tcp_close_shutdown_fin+0xc0>)
 80167d4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80167d8:	492b      	ldr	r1, [pc, #172]	; (8016888 <tcp_close_shutdown_fin+0xc4>)
 80167da:	482c      	ldr	r0, [pc, #176]	; (801688c <tcp_close_shutdown_fin+0xc8>)
 80167dc:	f00a ff0a 	bl	80215f4 <iprintf>

  switch (pcb->state) {
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	7d1b      	ldrb	r3, [r3, #20]
 80167e4:	2b04      	cmp	r3, #4
 80167e6:	d010      	beq.n	801680a <tcp_close_shutdown_fin+0x46>
 80167e8:	2b07      	cmp	r3, #7
 80167ea:	d01b      	beq.n	8016824 <tcp_close_shutdown_fin+0x60>
 80167ec:	2b03      	cmp	r3, #3
 80167ee:	d126      	bne.n	801683e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80167f0:	6878      	ldr	r0, [r7, #4]
 80167f2:	f003 fedb 	bl	801a5ac <tcp_send_fin>
 80167f6:	4603      	mov	r3, r0
 80167f8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80167fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d11f      	bne.n	8016842 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	2205      	movs	r2, #5
 8016806:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016808:	e01b      	b.n	8016842 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801680a:	6878      	ldr	r0, [r7, #4]
 801680c:	f003 fece 	bl	801a5ac <tcp_send_fin>
 8016810:	4603      	mov	r3, r0
 8016812:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d114      	bne.n	8016846 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	2205      	movs	r2, #5
 8016820:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016822:	e010      	b.n	8016846 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8016824:	6878      	ldr	r0, [r7, #4]
 8016826:	f003 fec1 	bl	801a5ac <tcp_send_fin>
 801682a:	4603      	mov	r3, r0
 801682c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801682e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d109      	bne.n	801684a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	2209      	movs	r2, #9
 801683a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801683c:	e005      	b.n	801684a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801683e:	2300      	movs	r3, #0
 8016840:	e01c      	b.n	801687c <tcp_close_shutdown_fin+0xb8>
      break;
 8016842:	bf00      	nop
 8016844:	e002      	b.n	801684c <tcp_close_shutdown_fin+0x88>
      break;
 8016846:	bf00      	nop
 8016848:	e000      	b.n	801684c <tcp_close_shutdown_fin+0x88>
      break;
 801684a:	bf00      	nop
  }

  if (err == ERR_OK) {
 801684c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d103      	bne.n	801685c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8016854:	6878      	ldr	r0, [r7, #4]
 8016856:	f003 ffe7 	bl	801a828 <tcp_output>
 801685a:	e00d      	b.n	8016878 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 801685c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016864:	d108      	bne.n	8016878 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	8b5b      	ldrh	r3, [r3, #26]
 801686a:	f043 0308 	orr.w	r3, r3, #8
 801686e:	b29a      	uxth	r2, r3
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8016874:	2300      	movs	r3, #0
 8016876:	e001      	b.n	801687c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8016878:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801687c:	4618      	mov	r0, r3
 801687e:	3710      	adds	r7, #16
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}
 8016884:	0802310c 	.word	0x0802310c
 8016888:	080231bc 	.word	0x080231bc
 801688c:	08023150 	.word	0x08023150

08016890 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b082      	sub	sp, #8
 8016894:	af00      	add	r7, sp, #0
 8016896:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d109      	bne.n	80168b2 <tcp_close+0x22>
 801689e:	4b0f      	ldr	r3, [pc, #60]	; (80168dc <tcp_close+0x4c>)
 80168a0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80168a4:	490e      	ldr	r1, [pc, #56]	; (80168e0 <tcp_close+0x50>)
 80168a6:	480f      	ldr	r0, [pc, #60]	; (80168e4 <tcp_close+0x54>)
 80168a8:	f00a fea4 	bl	80215f4 <iprintf>
 80168ac:	f06f 030f 	mvn.w	r3, #15
 80168b0:	e00f      	b.n	80168d2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	7d1b      	ldrb	r3, [r3, #20]
 80168b6:	2b01      	cmp	r3, #1
 80168b8:	d006      	beq.n	80168c8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	8b5b      	ldrh	r3, [r3, #26]
 80168be:	f043 0310 	orr.w	r3, r3, #16
 80168c2:	b29a      	uxth	r2, r3
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80168c8:	2101      	movs	r1, #1
 80168ca:	6878      	ldr	r0, [r7, #4]
 80168cc:	f7ff fe9c 	bl	8016608 <tcp_close_shutdown>
 80168d0:	4603      	mov	r3, r0
}
 80168d2:	4618      	mov	r0, r3
 80168d4:	3708      	adds	r7, #8
 80168d6:	46bd      	mov	sp, r7
 80168d8:	bd80      	pop	{r7, pc}
 80168da:	bf00      	nop
 80168dc:	0802310c 	.word	0x0802310c
 80168e0:	0802321c 	.word	0x0802321c
 80168e4:	08023150 	.word	0x08023150

080168e8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b08e      	sub	sp, #56	; 0x38
 80168ec:	af04      	add	r7, sp, #16
 80168ee:	6078      	str	r0, [r7, #4]
 80168f0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d107      	bne.n	8016908 <tcp_abandon+0x20>
 80168f8:	4b52      	ldr	r3, [pc, #328]	; (8016a44 <tcp_abandon+0x15c>)
 80168fa:	f240 223d 	movw	r2, #573	; 0x23d
 80168fe:	4952      	ldr	r1, [pc, #328]	; (8016a48 <tcp_abandon+0x160>)
 8016900:	4852      	ldr	r0, [pc, #328]	; (8016a4c <tcp_abandon+0x164>)
 8016902:	f00a fe77 	bl	80215f4 <iprintf>
 8016906:	e099      	b.n	8016a3c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	7d1b      	ldrb	r3, [r3, #20]
 801690c:	2b01      	cmp	r3, #1
 801690e:	d106      	bne.n	801691e <tcp_abandon+0x36>
 8016910:	4b4c      	ldr	r3, [pc, #304]	; (8016a44 <tcp_abandon+0x15c>)
 8016912:	f240 2241 	movw	r2, #577	; 0x241
 8016916:	494e      	ldr	r1, [pc, #312]	; (8016a50 <tcp_abandon+0x168>)
 8016918:	484c      	ldr	r0, [pc, #304]	; (8016a4c <tcp_abandon+0x164>)
 801691a:	f00a fe6b 	bl	80215f4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	7d1b      	ldrb	r3, [r3, #20]
 8016922:	2b0a      	cmp	r3, #10
 8016924:	d107      	bne.n	8016936 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8016926:	6879      	ldr	r1, [r7, #4]
 8016928:	484a      	ldr	r0, [pc, #296]	; (8016a54 <tcp_abandon+0x16c>)
 801692a:	f000 ffbf 	bl	80178ac <tcp_pcb_remove>
    tcp_free(pcb);
 801692e:	6878      	ldr	r0, [r7, #4]
 8016930:	f7ff fdb8 	bl	80164a4 <tcp_free>
 8016934:	e082      	b.n	8016a3c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8016936:	2300      	movs	r3, #0
 8016938:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801693a:	2300      	movs	r3, #0
 801693c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016942:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016948:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016950:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	691b      	ldr	r3, [r3, #16]
 8016956:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	7d1b      	ldrb	r3, [r3, #20]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d126      	bne.n	80169ae <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	8adb      	ldrh	r3, [r3, #22]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d02e      	beq.n	80169c6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016968:	4b3b      	ldr	r3, [pc, #236]	; (8016a58 <tcp_abandon+0x170>)
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	687a      	ldr	r2, [r7, #4]
 801696e:	429a      	cmp	r2, r3
 8016970:	d105      	bne.n	801697e <tcp_abandon+0x96>
 8016972:	4b39      	ldr	r3, [pc, #228]	; (8016a58 <tcp_abandon+0x170>)
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	68db      	ldr	r3, [r3, #12]
 8016978:	4a37      	ldr	r2, [pc, #220]	; (8016a58 <tcp_abandon+0x170>)
 801697a:	6013      	str	r3, [r2, #0]
 801697c:	e013      	b.n	80169a6 <tcp_abandon+0xbe>
 801697e:	4b36      	ldr	r3, [pc, #216]	; (8016a58 <tcp_abandon+0x170>)
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	61fb      	str	r3, [r7, #28]
 8016984:	e00c      	b.n	80169a0 <tcp_abandon+0xb8>
 8016986:	69fb      	ldr	r3, [r7, #28]
 8016988:	68db      	ldr	r3, [r3, #12]
 801698a:	687a      	ldr	r2, [r7, #4]
 801698c:	429a      	cmp	r2, r3
 801698e:	d104      	bne.n	801699a <tcp_abandon+0xb2>
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	68da      	ldr	r2, [r3, #12]
 8016994:	69fb      	ldr	r3, [r7, #28]
 8016996:	60da      	str	r2, [r3, #12]
 8016998:	e005      	b.n	80169a6 <tcp_abandon+0xbe>
 801699a:	69fb      	ldr	r3, [r7, #28]
 801699c:	68db      	ldr	r3, [r3, #12]
 801699e:	61fb      	str	r3, [r7, #28]
 80169a0:	69fb      	ldr	r3, [r7, #28]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d1ef      	bne.n	8016986 <tcp_abandon+0x9e>
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	2200      	movs	r2, #0
 80169aa:	60da      	str	r2, [r3, #12]
 80169ac:	e00b      	b.n	80169c6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80169ae:	683b      	ldr	r3, [r7, #0]
 80169b0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	8adb      	ldrh	r3, [r3, #22]
 80169b6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80169b8:	6879      	ldr	r1, [r7, #4]
 80169ba:	4828      	ldr	r0, [pc, #160]	; (8016a5c <tcp_abandon+0x174>)
 80169bc:	f000 ff76 	bl	80178ac <tcp_pcb_remove>
 80169c0:	4b27      	ldr	r3, [pc, #156]	; (8016a60 <tcp_abandon+0x178>)
 80169c2:	2201      	movs	r2, #1
 80169c4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d004      	beq.n	80169d8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169d2:	4618      	mov	r0, r3
 80169d4:	f000 fd1a 	bl	801740c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d004      	beq.n	80169ea <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169e4:	4618      	mov	r0, r3
 80169e6:	f000 fd11 	bl	801740c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d004      	beq.n	80169fc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80169f6:	4618      	mov	r0, r3
 80169f8:	f000 fd08 	bl	801740c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80169fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d00e      	beq.n	8016a20 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8016a02:	6879      	ldr	r1, [r7, #4]
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	3304      	adds	r3, #4
 8016a08:	687a      	ldr	r2, [r7, #4]
 8016a0a:	8b12      	ldrh	r2, [r2, #24]
 8016a0c:	9202      	str	r2, [sp, #8]
 8016a0e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016a10:	9201      	str	r2, [sp, #4]
 8016a12:	9300      	str	r3, [sp, #0]
 8016a14:	460b      	mov	r3, r1
 8016a16:	697a      	ldr	r2, [r7, #20]
 8016a18:	69b9      	ldr	r1, [r7, #24]
 8016a1a:	6878      	ldr	r0, [r7, #4]
 8016a1c:	f004 fcca 	bl	801b3b4 <tcp_rst>
    }
    last_state = pcb->state;
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	7d1b      	ldrb	r3, [r3, #20]
 8016a24:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8016a26:	6878      	ldr	r0, [r7, #4]
 8016a28:	f7ff fd3c 	bl	80164a4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8016a2c:	693b      	ldr	r3, [r7, #16]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d004      	beq.n	8016a3c <tcp_abandon+0x154>
 8016a32:	693b      	ldr	r3, [r7, #16]
 8016a34:	f06f 010c 	mvn.w	r1, #12
 8016a38:	68f8      	ldr	r0, [r7, #12]
 8016a3a:	4798      	blx	r3
  }
}
 8016a3c:	3728      	adds	r7, #40	; 0x28
 8016a3e:	46bd      	mov	sp, r7
 8016a40:	bd80      	pop	{r7, pc}
 8016a42:	bf00      	nop
 8016a44:	0802310c 	.word	0x0802310c
 8016a48:	08023250 	.word	0x08023250
 8016a4c:	08023150 	.word	0x08023150
 8016a50:	0802326c 	.word	0x0802326c
 8016a54:	20010368 	.word	0x20010368
 8016a58:	20010364 	.word	0x20010364
 8016a5c:	20010358 	.word	0x20010358
 8016a60:	20010354 	.word	0x20010354

08016a64 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b082      	sub	sp, #8
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8016a6c:	2101      	movs	r1, #1
 8016a6e:	6878      	ldr	r0, [r7, #4]
 8016a70:	f7ff ff3a 	bl	80168e8 <tcp_abandon>
}
 8016a74:	bf00      	nop
 8016a76:	3708      	adds	r7, #8
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bd80      	pop	{r7, pc}

08016a7c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8016a7c:	b580      	push	{r7, lr}
 8016a7e:	b084      	sub	sp, #16
 8016a80:	af00      	add	r7, sp, #0
 8016a82:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d106      	bne.n	8016a98 <tcp_update_rcv_ann_wnd+0x1c>
 8016a8a:	4b25      	ldr	r3, [pc, #148]	; (8016b20 <tcp_update_rcv_ann_wnd+0xa4>)
 8016a8c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8016a90:	4924      	ldr	r1, [pc, #144]	; (8016b24 <tcp_update_rcv_ann_wnd+0xa8>)
 8016a92:	4825      	ldr	r0, [pc, #148]	; (8016b28 <tcp_update_rcv_ann_wnd+0xac>)
 8016a94:	f00a fdae 	bl	80215f4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a9c:	687a      	ldr	r2, [r7, #4]
 8016a9e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8016aa0:	4413      	add	r3, r2
 8016aa2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016aa8:	687a      	ldr	r2, [r7, #4]
 8016aaa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8016aac:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8016ab0:	bf28      	it	cs
 8016ab2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8016ab6:	b292      	uxth	r2, r2
 8016ab8:	4413      	add	r3, r2
 8016aba:	68fa      	ldr	r2, [r7, #12]
 8016abc:	1ad3      	subs	r3, r2, r3
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	db08      	blt.n	8016ad4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ace:	68fa      	ldr	r2, [r7, #12]
 8016ad0:	1ad3      	subs	r3, r2, r3
 8016ad2:	e020      	b.n	8016b16 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016adc:	1ad3      	subs	r3, r2, r3
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	dd03      	ble.n	8016aea <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	2200      	movs	r2, #0
 8016ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016ae8:	e014      	b.n	8016b14 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016af2:	1ad3      	subs	r3, r2, r3
 8016af4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016af6:	68bb      	ldr	r3, [r7, #8]
 8016af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016afc:	d306      	bcc.n	8016b0c <tcp_update_rcv_ann_wnd+0x90>
 8016afe:	4b08      	ldr	r3, [pc, #32]	; (8016b20 <tcp_update_rcv_ann_wnd+0xa4>)
 8016b00:	f240 32b6 	movw	r2, #950	; 0x3b6
 8016b04:	4909      	ldr	r1, [pc, #36]	; (8016b2c <tcp_update_rcv_ann_wnd+0xb0>)
 8016b06:	4808      	ldr	r0, [pc, #32]	; (8016b28 <tcp_update_rcv_ann_wnd+0xac>)
 8016b08:	f00a fd74 	bl	80215f4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	b29a      	uxth	r2, r3
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8016b14:	2300      	movs	r3, #0
  }
}
 8016b16:	4618      	mov	r0, r3
 8016b18:	3710      	adds	r7, #16
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd80      	pop	{r7, pc}
 8016b1e:	bf00      	nop
 8016b20:	0802310c 	.word	0x0802310c
 8016b24:	08023368 	.word	0x08023368
 8016b28:	08023150 	.word	0x08023150
 8016b2c:	0802338c 	.word	0x0802338c

08016b30 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016b30:	b580      	push	{r7, lr}
 8016b32:	b084      	sub	sp, #16
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	6078      	str	r0, [r7, #4]
 8016b38:	460b      	mov	r3, r1
 8016b3a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d107      	bne.n	8016b52 <tcp_recved+0x22>
 8016b42:	4b1f      	ldr	r3, [pc, #124]	; (8016bc0 <tcp_recved+0x90>)
 8016b44:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016b48:	491e      	ldr	r1, [pc, #120]	; (8016bc4 <tcp_recved+0x94>)
 8016b4a:	481f      	ldr	r0, [pc, #124]	; (8016bc8 <tcp_recved+0x98>)
 8016b4c:	f00a fd52 	bl	80215f4 <iprintf>
 8016b50:	e032      	b.n	8016bb8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	7d1b      	ldrb	r3, [r3, #20]
 8016b56:	2b01      	cmp	r3, #1
 8016b58:	d106      	bne.n	8016b68 <tcp_recved+0x38>
 8016b5a:	4b19      	ldr	r3, [pc, #100]	; (8016bc0 <tcp_recved+0x90>)
 8016b5c:	f240 32d3 	movw	r2, #979	; 0x3d3
 8016b60:	491a      	ldr	r1, [pc, #104]	; (8016bcc <tcp_recved+0x9c>)
 8016b62:	4819      	ldr	r0, [pc, #100]	; (8016bc8 <tcp_recved+0x98>)
 8016b64:	f00a fd46 	bl	80215f4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016b6c:	887b      	ldrh	r3, [r7, #2]
 8016b6e:	4413      	add	r3, r2
 8016b70:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8016b72:	89fb      	ldrh	r3, [r7, #14]
 8016b74:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016b78:	d804      	bhi.n	8016b84 <tcp_recved+0x54>
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b7e:	89fa      	ldrh	r2, [r7, #14]
 8016b80:	429a      	cmp	r2, r3
 8016b82:	d204      	bcs.n	8016b8e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016b8a:	851a      	strh	r2, [r3, #40]	; 0x28
 8016b8c:	e002      	b.n	8016b94 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	89fa      	ldrh	r2, [r7, #14]
 8016b92:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016b94:	6878      	ldr	r0, [r7, #4]
 8016b96:	f7ff ff71 	bl	8016a7c <tcp_update_rcv_ann_wnd>
 8016b9a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016b9c:	68bb      	ldr	r3, [r7, #8]
 8016b9e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8016ba2:	d309      	bcc.n	8016bb8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	8b5b      	ldrh	r3, [r3, #26]
 8016ba8:	f043 0302 	orr.w	r3, r3, #2
 8016bac:	b29a      	uxth	r2, r3
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016bb2:	6878      	ldr	r0, [r7, #4]
 8016bb4:	f003 fe38 	bl	801a828 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016bb8:	3710      	adds	r7, #16
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	bd80      	pop	{r7, pc}
 8016bbe:	bf00      	nop
 8016bc0:	0802310c 	.word	0x0802310c
 8016bc4:	080233a8 	.word	0x080233a8
 8016bc8:	08023150 	.word	0x08023150
 8016bcc:	080233c0 	.word	0x080233c0

08016bd0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016bd0:	b5b0      	push	{r4, r5, r7, lr}
 8016bd2:	b090      	sub	sp, #64	; 0x40
 8016bd4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8016bdc:	4b94      	ldr	r3, [pc, #592]	; (8016e30 <tcp_slowtmr+0x260>)
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	3301      	adds	r3, #1
 8016be2:	4a93      	ldr	r2, [pc, #588]	; (8016e30 <tcp_slowtmr+0x260>)
 8016be4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8016be6:	4b93      	ldr	r3, [pc, #588]	; (8016e34 <tcp_slowtmr+0x264>)
 8016be8:	781b      	ldrb	r3, [r3, #0]
 8016bea:	3301      	adds	r3, #1
 8016bec:	b2da      	uxtb	r2, r3
 8016bee:	4b91      	ldr	r3, [pc, #580]	; (8016e34 <tcp_slowtmr+0x264>)
 8016bf0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8016bf6:	4b90      	ldr	r3, [pc, #576]	; (8016e38 <tcp_slowtmr+0x268>)
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8016bfc:	e29d      	b.n	801713a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8016bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c00:	7d1b      	ldrb	r3, [r3, #20]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d106      	bne.n	8016c14 <tcp_slowtmr+0x44>
 8016c06:	4b8d      	ldr	r3, [pc, #564]	; (8016e3c <tcp_slowtmr+0x26c>)
 8016c08:	f240 42be 	movw	r2, #1214	; 0x4be
 8016c0c:	498c      	ldr	r1, [pc, #560]	; (8016e40 <tcp_slowtmr+0x270>)
 8016c0e:	488d      	ldr	r0, [pc, #564]	; (8016e44 <tcp_slowtmr+0x274>)
 8016c10:	f00a fcf0 	bl	80215f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8016c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c16:	7d1b      	ldrb	r3, [r3, #20]
 8016c18:	2b01      	cmp	r3, #1
 8016c1a:	d106      	bne.n	8016c2a <tcp_slowtmr+0x5a>
 8016c1c:	4b87      	ldr	r3, [pc, #540]	; (8016e3c <tcp_slowtmr+0x26c>)
 8016c1e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8016c22:	4989      	ldr	r1, [pc, #548]	; (8016e48 <tcp_slowtmr+0x278>)
 8016c24:	4887      	ldr	r0, [pc, #540]	; (8016e44 <tcp_slowtmr+0x274>)
 8016c26:	f00a fce5 	bl	80215f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8016c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c2c:	7d1b      	ldrb	r3, [r3, #20]
 8016c2e:	2b0a      	cmp	r3, #10
 8016c30:	d106      	bne.n	8016c40 <tcp_slowtmr+0x70>
 8016c32:	4b82      	ldr	r3, [pc, #520]	; (8016e3c <tcp_slowtmr+0x26c>)
 8016c34:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8016c38:	4984      	ldr	r1, [pc, #528]	; (8016e4c <tcp_slowtmr+0x27c>)
 8016c3a:	4882      	ldr	r0, [pc, #520]	; (8016e44 <tcp_slowtmr+0x274>)
 8016c3c:	f00a fcda 	bl	80215f4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8016c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c42:	7f9a      	ldrb	r2, [r3, #30]
 8016c44:	4b7b      	ldr	r3, [pc, #492]	; (8016e34 <tcp_slowtmr+0x264>)
 8016c46:	781b      	ldrb	r3, [r3, #0]
 8016c48:	429a      	cmp	r2, r3
 8016c4a:	d105      	bne.n	8016c58 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8016c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c4e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c52:	68db      	ldr	r3, [r3, #12]
 8016c54:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8016c56:	e270      	b.n	801713a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8016c58:	4b76      	ldr	r3, [pc, #472]	; (8016e34 <tcp_slowtmr+0x264>)
 8016c5a:	781a      	ldrb	r2, [r3, #0]
 8016c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c5e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8016c60:	2300      	movs	r3, #0
 8016c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8016c66:	2300      	movs	r3, #0
 8016c68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c6e:	7d1b      	ldrb	r3, [r3, #20]
 8016c70:	2b02      	cmp	r3, #2
 8016c72:	d10a      	bne.n	8016c8a <tcp_slowtmr+0xba>
 8016c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016c7a:	2b05      	cmp	r3, #5
 8016c7c:	d905      	bls.n	8016c8a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8016c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c82:	3301      	adds	r3, #1
 8016c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016c88:	e11e      	b.n	8016ec8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8016c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016c90:	2b0b      	cmp	r3, #11
 8016c92:	d905      	bls.n	8016ca0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8016c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c98:	3301      	adds	r3, #1
 8016c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016c9e:	e113      	b.n	8016ec8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8016ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ca2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d075      	beq.n	8016d96 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8016caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d006      	beq.n	8016cc0 <tcp_slowtmr+0xf0>
 8016cb2:	4b62      	ldr	r3, [pc, #392]	; (8016e3c <tcp_slowtmr+0x26c>)
 8016cb4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8016cb8:	4965      	ldr	r1, [pc, #404]	; (8016e50 <tcp_slowtmr+0x280>)
 8016cba:	4862      	ldr	r0, [pc, #392]	; (8016e44 <tcp_slowtmr+0x274>)
 8016cbc:	f00a fc9a 	bl	80215f4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8016cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d106      	bne.n	8016cd6 <tcp_slowtmr+0x106>
 8016cc8:	4b5c      	ldr	r3, [pc, #368]	; (8016e3c <tcp_slowtmr+0x26c>)
 8016cca:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8016cce:	4961      	ldr	r1, [pc, #388]	; (8016e54 <tcp_slowtmr+0x284>)
 8016cd0:	485c      	ldr	r0, [pc, #368]	; (8016e44 <tcp_slowtmr+0x274>)
 8016cd2:	f00a fc8f 	bl	80215f4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8016cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cd8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016cdc:	2b0b      	cmp	r3, #11
 8016cde:	d905      	bls.n	8016cec <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8016ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ce4:	3301      	adds	r3, #1
 8016ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016cea:	e0ed      	b.n	8016ec8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8016cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016cf2:	3b01      	subs	r3, #1
 8016cf4:	4a58      	ldr	r2, [pc, #352]	; (8016e58 <tcp_slowtmr+0x288>)
 8016cf6:	5cd3      	ldrb	r3, [r2, r3]
 8016cf8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8016cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cfc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016d00:	7c7a      	ldrb	r2, [r7, #17]
 8016d02:	429a      	cmp	r2, r3
 8016d04:	d907      	bls.n	8016d16 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8016d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d08:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016d0c:	3301      	adds	r3, #1
 8016d0e:	b2da      	uxtb	r2, r3
 8016d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d12:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8016d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d18:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8016d1c:	7c7a      	ldrb	r2, [r7, #17]
 8016d1e:	429a      	cmp	r2, r3
 8016d20:	f200 80d2 	bhi.w	8016ec8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8016d24:	2301      	movs	r3, #1
 8016d26:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8016d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d108      	bne.n	8016d44 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8016d32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016d34:	f004 fc32 	bl	801b59c <tcp_zero_window_probe>
 8016d38:	4603      	mov	r3, r0
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d014      	beq.n	8016d68 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8016d3e:	2300      	movs	r3, #0
 8016d40:	623b      	str	r3, [r7, #32]
 8016d42:	e011      	b.n	8016d68 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8016d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016d4a:	4619      	mov	r1, r3
 8016d4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016d4e:	f003 fae5 	bl	801a31c <tcp_split_unsent_seg>
 8016d52:	4603      	mov	r3, r0
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d107      	bne.n	8016d68 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8016d58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016d5a:	f003 fd65 	bl	801a828 <tcp_output>
 8016d5e:	4603      	mov	r3, r0
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d101      	bne.n	8016d68 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8016d64:	2300      	movs	r3, #0
 8016d66:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8016d68:	6a3b      	ldr	r3, [r7, #32]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	f000 80ac 	beq.w	8016ec8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8016d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d72:	2200      	movs	r2, #0
 8016d74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8016d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016d7e:	2b06      	cmp	r3, #6
 8016d80:	f200 80a2 	bhi.w	8016ec8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8016d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d86:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016d8a:	3301      	adds	r3, #1
 8016d8c:	b2da      	uxtb	r2, r3
 8016d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d90:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8016d94:	e098      	b.n	8016ec8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8016d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	db0f      	blt.n	8016dc0 <tcp_slowtmr+0x1f0>
 8016da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016da2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016da6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016daa:	4293      	cmp	r3, r2
 8016dac:	d008      	beq.n	8016dc0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8016dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016db0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016db4:	b29b      	uxth	r3, r3
 8016db6:	3301      	adds	r3, #1
 8016db8:	b29b      	uxth	r3, r3
 8016dba:	b21a      	sxth	r2, r3
 8016dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dbe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8016dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dc2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8016dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dc8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8016dcc:	429a      	cmp	r2, r3
 8016dce:	db7b      	blt.n	8016ec8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8016dd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016dd2:	f004 f821 	bl	801ae18 <tcp_rexmit_rto_prepare>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d007      	beq.n	8016dec <tcp_slowtmr+0x21c>
 8016ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d171      	bne.n	8016ec8 <tcp_slowtmr+0x2f8>
 8016de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d06d      	beq.n	8016ec8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8016dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dee:	7d1b      	ldrb	r3, [r3, #20]
 8016df0:	2b02      	cmp	r3, #2
 8016df2:	d03a      	beq.n	8016e6a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8016df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016df6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016dfa:	2b0c      	cmp	r3, #12
 8016dfc:	bf28      	it	cs
 8016dfe:	230c      	movcs	r3, #12
 8016e00:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8016e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016e08:	10db      	asrs	r3, r3, #3
 8016e0a:	b21b      	sxth	r3, r3
 8016e0c:	461a      	mov	r2, r3
 8016e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e10:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016e14:	4413      	add	r3, r2
 8016e16:	7efa      	ldrb	r2, [r7, #27]
 8016e18:	4910      	ldr	r1, [pc, #64]	; (8016e5c <tcp_slowtmr+0x28c>)
 8016e1a:	5c8a      	ldrb	r2, [r1, r2]
 8016e1c:	4093      	lsls	r3, r2
 8016e1e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8016e20:	697b      	ldr	r3, [r7, #20]
 8016e22:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8016e26:	4293      	cmp	r3, r2
 8016e28:	dc1a      	bgt.n	8016e60 <tcp_slowtmr+0x290>
 8016e2a:	697b      	ldr	r3, [r7, #20]
 8016e2c:	b21a      	sxth	r2, r3
 8016e2e:	e019      	b.n	8016e64 <tcp_slowtmr+0x294>
 8016e30:	2001035c 	.word	0x2001035c
 8016e34:	20008fbe 	.word	0x20008fbe
 8016e38:	20010358 	.word	0x20010358
 8016e3c:	0802310c 	.word	0x0802310c
 8016e40:	08023450 	.word	0x08023450
 8016e44:	08023150 	.word	0x08023150
 8016e48:	0802347c 	.word	0x0802347c
 8016e4c:	080234a8 	.word	0x080234a8
 8016e50:	080234d8 	.word	0x080234d8
 8016e54:	0802350c 	.word	0x0802350c
 8016e58:	08025508 	.word	0x08025508
 8016e5c:	080254f8 	.word	0x080254f8
 8016e60:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8016e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e6c:	2200      	movs	r2, #0
 8016e6e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8016e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016e7c:	4293      	cmp	r3, r2
 8016e7e:	bf28      	it	cs
 8016e80:	4613      	movcs	r3, r2
 8016e82:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8016e84:	8a7b      	ldrh	r3, [r7, #18]
 8016e86:	085b      	lsrs	r3, r3, #1
 8016e88:	b29a      	uxth	r2, r3
 8016e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8016e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016e9a:	005b      	lsls	r3, r3, #1
 8016e9c:	b29b      	uxth	r3, r3
 8016e9e:	429a      	cmp	r2, r3
 8016ea0:	d206      	bcs.n	8016eb0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8016ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ea4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016ea6:	005b      	lsls	r3, r3, #1
 8016ea8:	b29a      	uxth	r2, r3
 8016eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8016eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eb2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8016eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8016eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ebc:	2200      	movs	r2, #0
 8016ebe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8016ec2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016ec4:	f004 f818 	bl	801aef8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8016ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eca:	7d1b      	ldrb	r3, [r3, #20]
 8016ecc:	2b06      	cmp	r3, #6
 8016ece:	d111      	bne.n	8016ef4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8016ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ed2:	8b5b      	ldrh	r3, [r3, #26]
 8016ed4:	f003 0310 	and.w	r3, r3, #16
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d00b      	beq.n	8016ef4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016edc:	4b9c      	ldr	r3, [pc, #624]	; (8017150 <tcp_slowtmr+0x580>)
 8016ede:	681a      	ldr	r2, [r3, #0]
 8016ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ee2:	6a1b      	ldr	r3, [r3, #32]
 8016ee4:	1ad3      	subs	r3, r2, r3
 8016ee6:	2b28      	cmp	r3, #40	; 0x28
 8016ee8:	d904      	bls.n	8016ef4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8016eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016eee:	3301      	adds	r3, #1
 8016ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ef6:	7a5b      	ldrb	r3, [r3, #9]
 8016ef8:	f003 0308 	and.w	r3, r3, #8
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d04a      	beq.n	8016f96 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8016f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f02:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016f04:	2b04      	cmp	r3, #4
 8016f06:	d003      	beq.n	8016f10 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8016f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f0a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8016f0c:	2b07      	cmp	r3, #7
 8016f0e:	d142      	bne.n	8016f96 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016f10:	4b8f      	ldr	r3, [pc, #572]	; (8017150 <tcp_slowtmr+0x580>)
 8016f12:	681a      	ldr	r2, [r3, #0]
 8016f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f16:	6a1b      	ldr	r3, [r3, #32]
 8016f18:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8016f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f1c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016f20:	4b8c      	ldr	r3, [pc, #560]	; (8017154 <tcp_slowtmr+0x584>)
 8016f22:	440b      	add	r3, r1
 8016f24:	498c      	ldr	r1, [pc, #560]	; (8017158 <tcp_slowtmr+0x588>)
 8016f26:	fba1 1303 	umull	r1, r3, r1, r3
 8016f2a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016f2c:	429a      	cmp	r2, r3
 8016f2e:	d90a      	bls.n	8016f46 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8016f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f34:	3301      	adds	r3, #1
 8016f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8016f3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f3e:	3301      	adds	r3, #1
 8016f40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016f44:	e027      	b.n	8016f96 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016f46:	4b82      	ldr	r3, [pc, #520]	; (8017150 <tcp_slowtmr+0x580>)
 8016f48:	681a      	ldr	r2, [r3, #0]
 8016f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f4c:	6a1b      	ldr	r3, [r3, #32]
 8016f4e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8016f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f52:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f58:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	4b7f      	ldr	r3, [pc, #508]	; (801715c <tcp_slowtmr+0x58c>)
 8016f60:	fb03 f300 	mul.w	r3, r3, r0
 8016f64:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8016f66:	497c      	ldr	r1, [pc, #496]	; (8017158 <tcp_slowtmr+0x588>)
 8016f68:	fba1 1303 	umull	r1, r3, r1, r3
 8016f6c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016f6e:	429a      	cmp	r2, r3
 8016f70:	d911      	bls.n	8016f96 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8016f72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016f74:	f004 fad2 	bl	801b51c <tcp_keepalive>
 8016f78:	4603      	mov	r3, r0
 8016f7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8016f7e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d107      	bne.n	8016f96 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8016f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f88:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016f8c:	3301      	adds	r3, #1
 8016f8e:	b2da      	uxtb	r2, r3
 8016f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f92:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8016f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d011      	beq.n	8016fc2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8016f9e:	4b6c      	ldr	r3, [pc, #432]	; (8017150 <tcp_slowtmr+0x580>)
 8016fa0:	681a      	ldr	r2, [r3, #0]
 8016fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fa4:	6a1b      	ldr	r3, [r3, #32]
 8016fa6:	1ad2      	subs	r2, r2, r3
 8016fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016faa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8016fae:	4619      	mov	r1, r3
 8016fb0:	460b      	mov	r3, r1
 8016fb2:	005b      	lsls	r3, r3, #1
 8016fb4:	440b      	add	r3, r1
 8016fb6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8016fb8:	429a      	cmp	r2, r3
 8016fba:	d302      	bcc.n	8016fc2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8016fbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016fbe:	f000 fdd9 	bl	8017b74 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8016fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fc4:	7d1b      	ldrb	r3, [r3, #20]
 8016fc6:	2b03      	cmp	r3, #3
 8016fc8:	d10b      	bne.n	8016fe2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016fca:	4b61      	ldr	r3, [pc, #388]	; (8017150 <tcp_slowtmr+0x580>)
 8016fcc:	681a      	ldr	r2, [r3, #0]
 8016fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fd0:	6a1b      	ldr	r3, [r3, #32]
 8016fd2:	1ad3      	subs	r3, r2, r3
 8016fd4:	2b28      	cmp	r3, #40	; 0x28
 8016fd6:	d904      	bls.n	8016fe2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8016fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fdc:	3301      	adds	r3, #1
 8016fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8016fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fe4:	7d1b      	ldrb	r3, [r3, #20]
 8016fe6:	2b09      	cmp	r3, #9
 8016fe8:	d10b      	bne.n	8017002 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016fea:	4b59      	ldr	r3, [pc, #356]	; (8017150 <tcp_slowtmr+0x580>)
 8016fec:	681a      	ldr	r2, [r3, #0]
 8016fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ff0:	6a1b      	ldr	r3, [r3, #32]
 8016ff2:	1ad3      	subs	r3, r2, r3
 8016ff4:	2bf0      	cmp	r3, #240	; 0xf0
 8016ff6:	d904      	bls.n	8017002 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8016ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ffc:	3301      	adds	r3, #1
 8016ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017006:	2b00      	cmp	r3, #0
 8017008:	d060      	beq.n	80170cc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801700a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801700c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017010:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8017012:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017014:	f000 fbfa 	bl	801780c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8017018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801701a:	2b00      	cmp	r3, #0
 801701c:	d010      	beq.n	8017040 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801701e:	4b50      	ldr	r3, [pc, #320]	; (8017160 <tcp_slowtmr+0x590>)
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017024:	429a      	cmp	r2, r3
 8017026:	d106      	bne.n	8017036 <tcp_slowtmr+0x466>
 8017028:	4b4e      	ldr	r3, [pc, #312]	; (8017164 <tcp_slowtmr+0x594>)
 801702a:	f240 526d 	movw	r2, #1389	; 0x56d
 801702e:	494e      	ldr	r1, [pc, #312]	; (8017168 <tcp_slowtmr+0x598>)
 8017030:	484e      	ldr	r0, [pc, #312]	; (801716c <tcp_slowtmr+0x59c>)
 8017032:	f00a fadf 	bl	80215f4 <iprintf>
        prev->next = pcb->next;
 8017036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017038:	68da      	ldr	r2, [r3, #12]
 801703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801703c:	60da      	str	r2, [r3, #12]
 801703e:	e00f      	b.n	8017060 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8017040:	4b47      	ldr	r3, [pc, #284]	; (8017160 <tcp_slowtmr+0x590>)
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017046:	429a      	cmp	r2, r3
 8017048:	d006      	beq.n	8017058 <tcp_slowtmr+0x488>
 801704a:	4b46      	ldr	r3, [pc, #280]	; (8017164 <tcp_slowtmr+0x594>)
 801704c:	f240 5271 	movw	r2, #1393	; 0x571
 8017050:	4947      	ldr	r1, [pc, #284]	; (8017170 <tcp_slowtmr+0x5a0>)
 8017052:	4846      	ldr	r0, [pc, #280]	; (801716c <tcp_slowtmr+0x59c>)
 8017054:	f00a face 	bl	80215f4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8017058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801705a:	68db      	ldr	r3, [r3, #12]
 801705c:	4a40      	ldr	r2, [pc, #256]	; (8017160 <tcp_slowtmr+0x590>)
 801705e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8017060:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017064:	2b00      	cmp	r3, #0
 8017066:	d013      	beq.n	8017090 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801706a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801706c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801706e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017070:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8017072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017074:	3304      	adds	r3, #4
 8017076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017078:	8ad2      	ldrh	r2, [r2, #22]
 801707a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801707c:	8b09      	ldrh	r1, [r1, #24]
 801707e:	9102      	str	r1, [sp, #8]
 8017080:	9201      	str	r2, [sp, #4]
 8017082:	9300      	str	r3, [sp, #0]
 8017084:	462b      	mov	r3, r5
 8017086:	4622      	mov	r2, r4
 8017088:	4601      	mov	r1, r0
 801708a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801708c:	f004 f992 	bl	801b3b4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8017090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017092:	691b      	ldr	r3, [r3, #16]
 8017094:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8017096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017098:	7d1b      	ldrb	r3, [r3, #20]
 801709a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801709e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80170a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170a2:	68db      	ldr	r3, [r3, #12]
 80170a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80170a6:	6838      	ldr	r0, [r7, #0]
 80170a8:	f7ff f9fc 	bl	80164a4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80170ac:	4b31      	ldr	r3, [pc, #196]	; (8017174 <tcp_slowtmr+0x5a4>)
 80170ae:	2200      	movs	r2, #0
 80170b0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d004      	beq.n	80170c2 <tcp_slowtmr+0x4f2>
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	f06f 010c 	mvn.w	r1, #12
 80170be:	68b8      	ldr	r0, [r7, #8]
 80170c0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80170c2:	4b2c      	ldr	r3, [pc, #176]	; (8017174 <tcp_slowtmr+0x5a4>)
 80170c4:	781b      	ldrb	r3, [r3, #0]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d037      	beq.n	801713a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80170ca:	e592      	b.n	8016bf2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80170cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80170d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170d2:	68db      	ldr	r3, [r3, #12]
 80170d4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80170d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170d8:	7f1b      	ldrb	r3, [r3, #28]
 80170da:	3301      	adds	r3, #1
 80170dc:	b2da      	uxtb	r2, r3
 80170de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80170e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e4:	7f1a      	ldrb	r2, [r3, #28]
 80170e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e8:	7f5b      	ldrb	r3, [r3, #29]
 80170ea:	429a      	cmp	r2, r3
 80170ec:	d325      	bcc.n	801713a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80170ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170f0:	2200      	movs	r2, #0
 80170f2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80170f4:	4b1f      	ldr	r3, [pc, #124]	; (8017174 <tcp_slowtmr+0x5a4>)
 80170f6:	2200      	movs	r2, #0
 80170f8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80170fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017100:	2b00      	cmp	r3, #0
 8017102:	d00b      	beq.n	801711c <tcp_slowtmr+0x54c>
 8017104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801710a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801710c:	6912      	ldr	r2, [r2, #16]
 801710e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017110:	4610      	mov	r0, r2
 8017112:	4798      	blx	r3
 8017114:	4603      	mov	r3, r0
 8017116:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801711a:	e002      	b.n	8017122 <tcp_slowtmr+0x552>
 801711c:	2300      	movs	r3, #0
 801711e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8017122:	4b14      	ldr	r3, [pc, #80]	; (8017174 <tcp_slowtmr+0x5a4>)
 8017124:	781b      	ldrb	r3, [r3, #0]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d000      	beq.n	801712c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801712a:	e562      	b.n	8016bf2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801712c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8017130:	2b00      	cmp	r3, #0
 8017132:	d102      	bne.n	801713a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8017134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017136:	f003 fb77 	bl	801a828 <tcp_output>
  while (pcb != NULL) {
 801713a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801713c:	2b00      	cmp	r3, #0
 801713e:	f47f ad5e 	bne.w	8016bfe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8017142:	2300      	movs	r3, #0
 8017144:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8017146:	4b0c      	ldr	r3, [pc, #48]	; (8017178 <tcp_slowtmr+0x5a8>)
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801714c:	e069      	b.n	8017222 <tcp_slowtmr+0x652>
 801714e:	bf00      	nop
 8017150:	2001035c 	.word	0x2001035c
 8017154:	000a4cb8 	.word	0x000a4cb8
 8017158:	10624dd3 	.word	0x10624dd3
 801715c:	000124f8 	.word	0x000124f8
 8017160:	20010358 	.word	0x20010358
 8017164:	0802310c 	.word	0x0802310c
 8017168:	08023544 	.word	0x08023544
 801716c:	08023150 	.word	0x08023150
 8017170:	08023570 	.word	0x08023570
 8017174:	20010354 	.word	0x20010354
 8017178:	20010368 	.word	0x20010368
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801717c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801717e:	7d1b      	ldrb	r3, [r3, #20]
 8017180:	2b0a      	cmp	r3, #10
 8017182:	d006      	beq.n	8017192 <tcp_slowtmr+0x5c2>
 8017184:	4b2a      	ldr	r3, [pc, #168]	; (8017230 <tcp_slowtmr+0x660>)
 8017186:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801718a:	492a      	ldr	r1, [pc, #168]	; (8017234 <tcp_slowtmr+0x664>)
 801718c:	482a      	ldr	r0, [pc, #168]	; (8017238 <tcp_slowtmr+0x668>)
 801718e:	f00a fa31 	bl	80215f4 <iprintf>
    pcb_remove = 0;
 8017192:	2300      	movs	r3, #0
 8017194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017198:	4b28      	ldr	r3, [pc, #160]	; (801723c <tcp_slowtmr+0x66c>)
 801719a:	681a      	ldr	r2, [r3, #0]
 801719c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801719e:	6a1b      	ldr	r3, [r3, #32]
 80171a0:	1ad3      	subs	r3, r2, r3
 80171a2:	2bf0      	cmp	r3, #240	; 0xf0
 80171a4:	d904      	bls.n	80171b0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80171a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171aa:	3301      	adds	r3, #1
 80171ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80171b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d02f      	beq.n	8017218 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80171b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171ba:	f000 fb27 	bl	801780c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80171be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d010      	beq.n	80171e6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80171c4:	4b1e      	ldr	r3, [pc, #120]	; (8017240 <tcp_slowtmr+0x670>)
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80171ca:	429a      	cmp	r2, r3
 80171cc:	d106      	bne.n	80171dc <tcp_slowtmr+0x60c>
 80171ce:	4b18      	ldr	r3, [pc, #96]	; (8017230 <tcp_slowtmr+0x660>)
 80171d0:	f240 52af 	movw	r2, #1455	; 0x5af
 80171d4:	491b      	ldr	r1, [pc, #108]	; (8017244 <tcp_slowtmr+0x674>)
 80171d6:	4818      	ldr	r0, [pc, #96]	; (8017238 <tcp_slowtmr+0x668>)
 80171d8:	f00a fa0c 	bl	80215f4 <iprintf>
        prev->next = pcb->next;
 80171dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171de:	68da      	ldr	r2, [r3, #12]
 80171e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171e2:	60da      	str	r2, [r3, #12]
 80171e4:	e00f      	b.n	8017206 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80171e6:	4b16      	ldr	r3, [pc, #88]	; (8017240 <tcp_slowtmr+0x670>)
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80171ec:	429a      	cmp	r2, r3
 80171ee:	d006      	beq.n	80171fe <tcp_slowtmr+0x62e>
 80171f0:	4b0f      	ldr	r3, [pc, #60]	; (8017230 <tcp_slowtmr+0x660>)
 80171f2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80171f6:	4914      	ldr	r1, [pc, #80]	; (8017248 <tcp_slowtmr+0x678>)
 80171f8:	480f      	ldr	r0, [pc, #60]	; (8017238 <tcp_slowtmr+0x668>)
 80171fa:	f00a f9fb 	bl	80215f4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80171fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017200:	68db      	ldr	r3, [r3, #12]
 8017202:	4a0f      	ldr	r2, [pc, #60]	; (8017240 <tcp_slowtmr+0x670>)
 8017204:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8017206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017208:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801720a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801720c:	68db      	ldr	r3, [r3, #12]
 801720e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8017210:	69f8      	ldr	r0, [r7, #28]
 8017212:	f7ff f947 	bl	80164a4 <tcp_free>
 8017216:	e004      	b.n	8017222 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8017218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801721a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801721e:	68db      	ldr	r3, [r3, #12]
 8017220:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017224:	2b00      	cmp	r3, #0
 8017226:	d1a9      	bne.n	801717c <tcp_slowtmr+0x5ac>
    }
  }
}
 8017228:	bf00      	nop
 801722a:	3730      	adds	r7, #48	; 0x30
 801722c:	46bd      	mov	sp, r7
 801722e:	bdb0      	pop	{r4, r5, r7, pc}
 8017230:	0802310c 	.word	0x0802310c
 8017234:	0802359c 	.word	0x0802359c
 8017238:	08023150 	.word	0x08023150
 801723c:	2001035c 	.word	0x2001035c
 8017240:	20010368 	.word	0x20010368
 8017244:	080235cc 	.word	0x080235cc
 8017248:	080235f4 	.word	0x080235f4

0801724c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b082      	sub	sp, #8
 8017250:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8017252:	4b2d      	ldr	r3, [pc, #180]	; (8017308 <tcp_fasttmr+0xbc>)
 8017254:	781b      	ldrb	r3, [r3, #0]
 8017256:	3301      	adds	r3, #1
 8017258:	b2da      	uxtb	r2, r3
 801725a:	4b2b      	ldr	r3, [pc, #172]	; (8017308 <tcp_fasttmr+0xbc>)
 801725c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801725e:	4b2b      	ldr	r3, [pc, #172]	; (801730c <tcp_fasttmr+0xc0>)
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017264:	e048      	b.n	80172f8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	7f9a      	ldrb	r2, [r3, #30]
 801726a:	4b27      	ldr	r3, [pc, #156]	; (8017308 <tcp_fasttmr+0xbc>)
 801726c:	781b      	ldrb	r3, [r3, #0]
 801726e:	429a      	cmp	r2, r3
 8017270:	d03f      	beq.n	80172f2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8017272:	4b25      	ldr	r3, [pc, #148]	; (8017308 <tcp_fasttmr+0xbc>)
 8017274:	781a      	ldrb	r2, [r3, #0]
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	8b5b      	ldrh	r3, [r3, #26]
 801727e:	f003 0301 	and.w	r3, r3, #1
 8017282:	2b00      	cmp	r3, #0
 8017284:	d010      	beq.n	80172a8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	8b5b      	ldrh	r3, [r3, #26]
 801728a:	f043 0302 	orr.w	r3, r3, #2
 801728e:	b29a      	uxth	r2, r3
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8017294:	6878      	ldr	r0, [r7, #4]
 8017296:	f003 fac7 	bl	801a828 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	8b5b      	ldrh	r3, [r3, #26]
 801729e:	f023 0303 	bic.w	r3, r3, #3
 80172a2:	b29a      	uxth	r2, r3
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	8b5b      	ldrh	r3, [r3, #26]
 80172ac:	f003 0308 	and.w	r3, r3, #8
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d009      	beq.n	80172c8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	8b5b      	ldrh	r3, [r3, #26]
 80172b8:	f023 0308 	bic.w	r3, r3, #8
 80172bc:	b29a      	uxth	r2, r3
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80172c2:	6878      	ldr	r0, [r7, #4]
 80172c4:	f7ff fa7e 	bl	80167c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	68db      	ldr	r3, [r3, #12]
 80172cc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d00a      	beq.n	80172ec <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80172d6:	4b0e      	ldr	r3, [pc, #56]	; (8017310 <tcp_fasttmr+0xc4>)
 80172d8:	2200      	movs	r2, #0
 80172da:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80172dc:	6878      	ldr	r0, [r7, #4]
 80172de:	f000 f819 	bl	8017314 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80172e2:	4b0b      	ldr	r3, [pc, #44]	; (8017310 <tcp_fasttmr+0xc4>)
 80172e4:	781b      	ldrb	r3, [r3, #0]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d000      	beq.n	80172ec <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80172ea:	e7b8      	b.n	801725e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80172ec:	683b      	ldr	r3, [r7, #0]
 80172ee:	607b      	str	r3, [r7, #4]
 80172f0:	e002      	b.n	80172f8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	68db      	ldr	r3, [r3, #12]
 80172f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d1b3      	bne.n	8017266 <tcp_fasttmr+0x1a>
    }
  }
}
 80172fe:	bf00      	nop
 8017300:	3708      	adds	r7, #8
 8017302:	46bd      	mov	sp, r7
 8017304:	bd80      	pop	{r7, pc}
 8017306:	bf00      	nop
 8017308:	20008fbe 	.word	0x20008fbe
 801730c:	20010358 	.word	0x20010358
 8017310:	20010354 	.word	0x20010354

08017314 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8017314:	b590      	push	{r4, r7, lr}
 8017316:	b085      	sub	sp, #20
 8017318:	af00      	add	r7, sp, #0
 801731a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d109      	bne.n	8017336 <tcp_process_refused_data+0x22>
 8017322:	4b37      	ldr	r3, [pc, #220]	; (8017400 <tcp_process_refused_data+0xec>)
 8017324:	f240 6209 	movw	r2, #1545	; 0x609
 8017328:	4936      	ldr	r1, [pc, #216]	; (8017404 <tcp_process_refused_data+0xf0>)
 801732a:	4837      	ldr	r0, [pc, #220]	; (8017408 <tcp_process_refused_data+0xf4>)
 801732c:	f00a f962 	bl	80215f4 <iprintf>
 8017330:	f06f 030f 	mvn.w	r3, #15
 8017334:	e060      	b.n	80173f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801733a:	7b5b      	ldrb	r3, [r3, #13]
 801733c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017342:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	2200      	movs	r2, #0
 8017348:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017350:	2b00      	cmp	r3, #0
 8017352:	d00b      	beq.n	801736c <tcp_process_refused_data+0x58>
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	6918      	ldr	r0, [r3, #16]
 801735e:	2300      	movs	r3, #0
 8017360:	68ba      	ldr	r2, [r7, #8]
 8017362:	6879      	ldr	r1, [r7, #4]
 8017364:	47a0      	blx	r4
 8017366:	4603      	mov	r3, r0
 8017368:	73fb      	strb	r3, [r7, #15]
 801736a:	e007      	b.n	801737c <tcp_process_refused_data+0x68>
 801736c:	2300      	movs	r3, #0
 801736e:	68ba      	ldr	r2, [r7, #8]
 8017370:	6879      	ldr	r1, [r7, #4]
 8017372:	2000      	movs	r0, #0
 8017374:	f000 f8a2 	bl	80174bc <tcp_recv_null>
 8017378:	4603      	mov	r3, r0
 801737a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801737c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d12a      	bne.n	80173da <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8017384:	7bbb      	ldrb	r3, [r7, #14]
 8017386:	f003 0320 	and.w	r3, r3, #32
 801738a:	2b00      	cmp	r3, #0
 801738c:	d033      	beq.n	80173f6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017392:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017396:	d005      	beq.n	80173a4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801739c:	3301      	adds	r3, #1
 801739e:	b29a      	uxth	r2, r3
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d00b      	beq.n	80173c6 <tcp_process_refused_data+0xb2>
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	6918      	ldr	r0, [r3, #16]
 80173b8:	2300      	movs	r3, #0
 80173ba:	2200      	movs	r2, #0
 80173bc:	6879      	ldr	r1, [r7, #4]
 80173be:	47a0      	blx	r4
 80173c0:	4603      	mov	r3, r0
 80173c2:	73fb      	strb	r3, [r7, #15]
 80173c4:	e001      	b.n	80173ca <tcp_process_refused_data+0xb6>
 80173c6:	2300      	movs	r3, #0
 80173c8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80173ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80173ce:	f113 0f0d 	cmn.w	r3, #13
 80173d2:	d110      	bne.n	80173f6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80173d4:	f06f 030c 	mvn.w	r3, #12
 80173d8:	e00e      	b.n	80173f8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80173da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80173de:	f113 0f0d 	cmn.w	r3, #13
 80173e2:	d102      	bne.n	80173ea <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80173e4:	f06f 030c 	mvn.w	r3, #12
 80173e8:	e006      	b.n	80173f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	68ba      	ldr	r2, [r7, #8]
 80173ee:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80173f0:	f06f 0304 	mvn.w	r3, #4
 80173f4:	e000      	b.n	80173f8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80173f6:	2300      	movs	r3, #0
}
 80173f8:	4618      	mov	r0, r3
 80173fa:	3714      	adds	r7, #20
 80173fc:	46bd      	mov	sp, r7
 80173fe:	bd90      	pop	{r4, r7, pc}
 8017400:	0802310c 	.word	0x0802310c
 8017404:	0802361c 	.word	0x0802361c
 8017408:	08023150 	.word	0x08023150

0801740c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801740c:	b580      	push	{r7, lr}
 801740e:	b084      	sub	sp, #16
 8017410:	af00      	add	r7, sp, #0
 8017412:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8017414:	e007      	b.n	8017426 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801741c:	6878      	ldr	r0, [r7, #4]
 801741e:	f000 f809 	bl	8017434 <tcp_seg_free>
    seg = next;
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d1f4      	bne.n	8017416 <tcp_segs_free+0xa>
  }
}
 801742c:	bf00      	nop
 801742e:	3710      	adds	r7, #16
 8017430:	46bd      	mov	sp, r7
 8017432:	bd80      	pop	{r7, pc}

08017434 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b082      	sub	sp, #8
 8017438:	af00      	add	r7, sp, #0
 801743a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d00c      	beq.n	801745c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	685b      	ldr	r3, [r3, #4]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d004      	beq.n	8017454 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	685b      	ldr	r3, [r3, #4]
 801744e:	4618      	mov	r0, r3
 8017450:	f7fe fd6c 	bl	8015f2c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8017454:	6879      	ldr	r1, [r7, #4]
 8017456:	2003      	movs	r0, #3
 8017458:	f7fd fea2 	bl	80151a0 <memp_free>
  }
}
 801745c:	bf00      	nop
 801745e:	3708      	adds	r7, #8
 8017460:	46bd      	mov	sp, r7
 8017462:	bd80      	pop	{r7, pc}

08017464 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8017464:	b580      	push	{r7, lr}
 8017466:	b084      	sub	sp, #16
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d106      	bne.n	8017480 <tcp_seg_copy+0x1c>
 8017472:	4b0f      	ldr	r3, [pc, #60]	; (80174b0 <tcp_seg_copy+0x4c>)
 8017474:	f240 6282 	movw	r2, #1666	; 0x682
 8017478:	490e      	ldr	r1, [pc, #56]	; (80174b4 <tcp_seg_copy+0x50>)
 801747a:	480f      	ldr	r0, [pc, #60]	; (80174b8 <tcp_seg_copy+0x54>)
 801747c:	f00a f8ba 	bl	80215f4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8017480:	2003      	movs	r0, #3
 8017482:	f7fd fe3b 	bl	80150fc <memp_malloc>
 8017486:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	2b00      	cmp	r3, #0
 801748c:	d101      	bne.n	8017492 <tcp_seg_copy+0x2e>
    return NULL;
 801748e:	2300      	movs	r3, #0
 8017490:	e00a      	b.n	80174a8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8017492:	2210      	movs	r2, #16
 8017494:	6879      	ldr	r1, [r7, #4]
 8017496:	68f8      	ldr	r0, [r7, #12]
 8017498:	f009 fff1 	bl	802147e <memcpy>
  pbuf_ref(cseg->p);
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	685b      	ldr	r3, [r3, #4]
 80174a0:	4618      	mov	r0, r3
 80174a2:	f7fe fde9 	bl	8016078 <pbuf_ref>
  return cseg;
 80174a6:	68fb      	ldr	r3, [r7, #12]
}
 80174a8:	4618      	mov	r0, r3
 80174aa:	3710      	adds	r7, #16
 80174ac:	46bd      	mov	sp, r7
 80174ae:	bd80      	pop	{r7, pc}
 80174b0:	0802310c 	.word	0x0802310c
 80174b4:	08023660 	.word	0x08023660
 80174b8:	08023150 	.word	0x08023150

080174bc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b084      	sub	sp, #16
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	60f8      	str	r0, [r7, #12]
 80174c4:	60b9      	str	r1, [r7, #8]
 80174c6:	607a      	str	r2, [r7, #4]
 80174c8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80174ca:	68bb      	ldr	r3, [r7, #8]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d109      	bne.n	80174e4 <tcp_recv_null+0x28>
 80174d0:	4b12      	ldr	r3, [pc, #72]	; (801751c <tcp_recv_null+0x60>)
 80174d2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80174d6:	4912      	ldr	r1, [pc, #72]	; (8017520 <tcp_recv_null+0x64>)
 80174d8:	4812      	ldr	r0, [pc, #72]	; (8017524 <tcp_recv_null+0x68>)
 80174da:	f00a f88b 	bl	80215f4 <iprintf>
 80174de:	f06f 030f 	mvn.w	r3, #15
 80174e2:	e016      	b.n	8017512 <tcp_recv_null+0x56>

  if (p != NULL) {
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d009      	beq.n	80174fe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	891b      	ldrh	r3, [r3, #8]
 80174ee:	4619      	mov	r1, r3
 80174f0:	68b8      	ldr	r0, [r7, #8]
 80174f2:	f7ff fb1d 	bl	8016b30 <tcp_recved>
    pbuf_free(p);
 80174f6:	6878      	ldr	r0, [r7, #4]
 80174f8:	f7fe fd18 	bl	8015f2c <pbuf_free>
 80174fc:	e008      	b.n	8017510 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80174fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d104      	bne.n	8017510 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8017506:	68b8      	ldr	r0, [r7, #8]
 8017508:	f7ff f9c2 	bl	8016890 <tcp_close>
 801750c:	4603      	mov	r3, r0
 801750e:	e000      	b.n	8017512 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8017510:	2300      	movs	r3, #0
}
 8017512:	4618      	mov	r0, r3
 8017514:	3710      	adds	r7, #16
 8017516:	46bd      	mov	sp, r7
 8017518:	bd80      	pop	{r7, pc}
 801751a:	bf00      	nop
 801751c:	0802310c 	.word	0x0802310c
 8017520:	0802367c 	.word	0x0802367c
 8017524:	08023150 	.word	0x08023150

08017528 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8017528:	b580      	push	{r7, lr}
 801752a:	b086      	sub	sp, #24
 801752c:	af00      	add	r7, sp, #0
 801752e:	4603      	mov	r3, r0
 8017530:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8017532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017536:	2b00      	cmp	r3, #0
 8017538:	db01      	blt.n	801753e <tcp_kill_prio+0x16>
 801753a:	79fb      	ldrb	r3, [r7, #7]
 801753c:	e000      	b.n	8017540 <tcp_kill_prio+0x18>
 801753e:	237f      	movs	r3, #127	; 0x7f
 8017540:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8017542:	7afb      	ldrb	r3, [r7, #11]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d034      	beq.n	80175b2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8017548:	7afb      	ldrb	r3, [r7, #11]
 801754a:	3b01      	subs	r3, #1
 801754c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801754e:	2300      	movs	r3, #0
 8017550:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017552:	2300      	movs	r3, #0
 8017554:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017556:	4b19      	ldr	r3, [pc, #100]	; (80175bc <tcp_kill_prio+0x94>)
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	617b      	str	r3, [r7, #20]
 801755c:	e01f      	b.n	801759e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801755e:	697b      	ldr	r3, [r7, #20]
 8017560:	7d5b      	ldrb	r3, [r3, #21]
 8017562:	7afa      	ldrb	r2, [r7, #11]
 8017564:	429a      	cmp	r2, r3
 8017566:	d80c      	bhi.n	8017582 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017568:	697b      	ldr	r3, [r7, #20]
 801756a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801756c:	7afa      	ldrb	r2, [r7, #11]
 801756e:	429a      	cmp	r2, r3
 8017570:	d112      	bne.n	8017598 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017572:	4b13      	ldr	r3, [pc, #76]	; (80175c0 <tcp_kill_prio+0x98>)
 8017574:	681a      	ldr	r2, [r3, #0]
 8017576:	697b      	ldr	r3, [r7, #20]
 8017578:	6a1b      	ldr	r3, [r3, #32]
 801757a:	1ad3      	subs	r3, r2, r3
 801757c:	68fa      	ldr	r2, [r7, #12]
 801757e:	429a      	cmp	r2, r3
 8017580:	d80a      	bhi.n	8017598 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8017582:	4b0f      	ldr	r3, [pc, #60]	; (80175c0 <tcp_kill_prio+0x98>)
 8017584:	681a      	ldr	r2, [r3, #0]
 8017586:	697b      	ldr	r3, [r7, #20]
 8017588:	6a1b      	ldr	r3, [r3, #32]
 801758a:	1ad3      	subs	r3, r2, r3
 801758c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801758e:	697b      	ldr	r3, [r7, #20]
 8017590:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8017592:	697b      	ldr	r3, [r7, #20]
 8017594:	7d5b      	ldrb	r3, [r3, #21]
 8017596:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017598:	697b      	ldr	r3, [r7, #20]
 801759a:	68db      	ldr	r3, [r3, #12]
 801759c:	617b      	str	r3, [r7, #20]
 801759e:	697b      	ldr	r3, [r7, #20]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d1dc      	bne.n	801755e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80175a4:	693b      	ldr	r3, [r7, #16]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d004      	beq.n	80175b4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80175aa:	6938      	ldr	r0, [r7, #16]
 80175ac:	f7ff fa5a 	bl	8016a64 <tcp_abort>
 80175b0:	e000      	b.n	80175b4 <tcp_kill_prio+0x8c>
    return;
 80175b2:	bf00      	nop
  }
}
 80175b4:	3718      	adds	r7, #24
 80175b6:	46bd      	mov	sp, r7
 80175b8:	bd80      	pop	{r7, pc}
 80175ba:	bf00      	nop
 80175bc:	20010358 	.word	0x20010358
 80175c0:	2001035c 	.word	0x2001035c

080175c4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80175c4:	b580      	push	{r7, lr}
 80175c6:	b086      	sub	sp, #24
 80175c8:	af00      	add	r7, sp, #0
 80175ca:	4603      	mov	r3, r0
 80175cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80175ce:	79fb      	ldrb	r3, [r7, #7]
 80175d0:	2b08      	cmp	r3, #8
 80175d2:	d009      	beq.n	80175e8 <tcp_kill_state+0x24>
 80175d4:	79fb      	ldrb	r3, [r7, #7]
 80175d6:	2b09      	cmp	r3, #9
 80175d8:	d006      	beq.n	80175e8 <tcp_kill_state+0x24>
 80175da:	4b1a      	ldr	r3, [pc, #104]	; (8017644 <tcp_kill_state+0x80>)
 80175dc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80175e0:	4919      	ldr	r1, [pc, #100]	; (8017648 <tcp_kill_state+0x84>)
 80175e2:	481a      	ldr	r0, [pc, #104]	; (801764c <tcp_kill_state+0x88>)
 80175e4:	f00a f806 	bl	80215f4 <iprintf>

  inactivity = 0;
 80175e8:	2300      	movs	r3, #0
 80175ea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80175ec:	2300      	movs	r3, #0
 80175ee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80175f0:	4b17      	ldr	r3, [pc, #92]	; (8017650 <tcp_kill_state+0x8c>)
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	617b      	str	r3, [r7, #20]
 80175f6:	e017      	b.n	8017628 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80175f8:	697b      	ldr	r3, [r7, #20]
 80175fa:	7d1b      	ldrb	r3, [r3, #20]
 80175fc:	79fa      	ldrb	r2, [r7, #7]
 80175fe:	429a      	cmp	r2, r3
 8017600:	d10f      	bne.n	8017622 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017602:	4b14      	ldr	r3, [pc, #80]	; (8017654 <tcp_kill_state+0x90>)
 8017604:	681a      	ldr	r2, [r3, #0]
 8017606:	697b      	ldr	r3, [r7, #20]
 8017608:	6a1b      	ldr	r3, [r3, #32]
 801760a:	1ad3      	subs	r3, r2, r3
 801760c:	68fa      	ldr	r2, [r7, #12]
 801760e:	429a      	cmp	r2, r3
 8017610:	d807      	bhi.n	8017622 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8017612:	4b10      	ldr	r3, [pc, #64]	; (8017654 <tcp_kill_state+0x90>)
 8017614:	681a      	ldr	r2, [r3, #0]
 8017616:	697b      	ldr	r3, [r7, #20]
 8017618:	6a1b      	ldr	r3, [r3, #32]
 801761a:	1ad3      	subs	r3, r2, r3
 801761c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801761e:	697b      	ldr	r3, [r7, #20]
 8017620:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017622:	697b      	ldr	r3, [r7, #20]
 8017624:	68db      	ldr	r3, [r3, #12]
 8017626:	617b      	str	r3, [r7, #20]
 8017628:	697b      	ldr	r3, [r7, #20]
 801762a:	2b00      	cmp	r3, #0
 801762c:	d1e4      	bne.n	80175f8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801762e:	693b      	ldr	r3, [r7, #16]
 8017630:	2b00      	cmp	r3, #0
 8017632:	d003      	beq.n	801763c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017634:	2100      	movs	r1, #0
 8017636:	6938      	ldr	r0, [r7, #16]
 8017638:	f7ff f956 	bl	80168e8 <tcp_abandon>
  }
}
 801763c:	bf00      	nop
 801763e:	3718      	adds	r7, #24
 8017640:	46bd      	mov	sp, r7
 8017642:	bd80      	pop	{r7, pc}
 8017644:	0802310c 	.word	0x0802310c
 8017648:	08023698 	.word	0x08023698
 801764c:	08023150 	.word	0x08023150
 8017650:	20010358 	.word	0x20010358
 8017654:	2001035c 	.word	0x2001035c

08017658 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8017658:	b580      	push	{r7, lr}
 801765a:	b084      	sub	sp, #16
 801765c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801765e:	2300      	movs	r3, #0
 8017660:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8017662:	2300      	movs	r3, #0
 8017664:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017666:	4b12      	ldr	r3, [pc, #72]	; (80176b0 <tcp_kill_timewait+0x58>)
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	60fb      	str	r3, [r7, #12]
 801766c:	e012      	b.n	8017694 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801766e:	4b11      	ldr	r3, [pc, #68]	; (80176b4 <tcp_kill_timewait+0x5c>)
 8017670:	681a      	ldr	r2, [r3, #0]
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	6a1b      	ldr	r3, [r3, #32]
 8017676:	1ad3      	subs	r3, r2, r3
 8017678:	687a      	ldr	r2, [r7, #4]
 801767a:	429a      	cmp	r2, r3
 801767c:	d807      	bhi.n	801768e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801767e:	4b0d      	ldr	r3, [pc, #52]	; (80176b4 <tcp_kill_timewait+0x5c>)
 8017680:	681a      	ldr	r2, [r3, #0]
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	6a1b      	ldr	r3, [r3, #32]
 8017686:	1ad3      	subs	r3, r2, r3
 8017688:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	68db      	ldr	r3, [r3, #12]
 8017692:	60fb      	str	r3, [r7, #12]
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d1e9      	bne.n	801766e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801769a:	68bb      	ldr	r3, [r7, #8]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d002      	beq.n	80176a6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80176a0:	68b8      	ldr	r0, [r7, #8]
 80176a2:	f7ff f9df 	bl	8016a64 <tcp_abort>
  }
}
 80176a6:	bf00      	nop
 80176a8:	3710      	adds	r7, #16
 80176aa:	46bd      	mov	sp, r7
 80176ac:	bd80      	pop	{r7, pc}
 80176ae:	bf00      	nop
 80176b0:	20010368 	.word	0x20010368
 80176b4:	2001035c 	.word	0x2001035c

080176b8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b082      	sub	sp, #8
 80176bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80176be:	4b10      	ldr	r3, [pc, #64]	; (8017700 <tcp_handle_closepend+0x48>)
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80176c4:	e014      	b.n	80176f0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	68db      	ldr	r3, [r3, #12]
 80176ca:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	8b5b      	ldrh	r3, [r3, #26]
 80176d0:	f003 0308 	and.w	r3, r3, #8
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d009      	beq.n	80176ec <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	8b5b      	ldrh	r3, [r3, #26]
 80176dc:	f023 0308 	bic.w	r3, r3, #8
 80176e0:	b29a      	uxth	r2, r3
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80176e6:	6878      	ldr	r0, [r7, #4]
 80176e8:	f7ff f86c 	bl	80167c4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80176ec:	683b      	ldr	r3, [r7, #0]
 80176ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d1e7      	bne.n	80176c6 <tcp_handle_closepend+0xe>
  }
}
 80176f6:	bf00      	nop
 80176f8:	3708      	adds	r7, #8
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd80      	pop	{r7, pc}
 80176fe:	bf00      	nop
 8017700:	20010358 	.word	0x20010358

08017704 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b084      	sub	sp, #16
 8017708:	af00      	add	r7, sp, #0
 801770a:	4603      	mov	r3, r0
 801770c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801770e:	2001      	movs	r0, #1
 8017710:	f7fd fcf4 	bl	80150fc <memp_malloc>
 8017714:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d126      	bne.n	801776a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801771c:	f7ff ffcc 	bl	80176b8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017720:	f7ff ff9a 	bl	8017658 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017724:	2001      	movs	r0, #1
 8017726:	f7fd fce9 	bl	80150fc <memp_malloc>
 801772a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d11b      	bne.n	801776a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017732:	2009      	movs	r0, #9
 8017734:	f7ff ff46 	bl	80175c4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017738:	2001      	movs	r0, #1
 801773a:	f7fd fcdf 	bl	80150fc <memp_malloc>
 801773e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d111      	bne.n	801776a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8017746:	2008      	movs	r0, #8
 8017748:	f7ff ff3c 	bl	80175c4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801774c:	2001      	movs	r0, #1
 801774e:	f7fd fcd5 	bl	80150fc <memp_malloc>
 8017752:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	2b00      	cmp	r3, #0
 8017758:	d107      	bne.n	801776a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801775a:	79fb      	ldrb	r3, [r7, #7]
 801775c:	4618      	mov	r0, r3
 801775e:	f7ff fee3 	bl	8017528 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017762:	2001      	movs	r0, #1
 8017764:	f7fd fcca 	bl	80150fc <memp_malloc>
 8017768:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d03f      	beq.n	80177f0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017770:	229c      	movs	r2, #156	; 0x9c
 8017772:	2100      	movs	r1, #0
 8017774:	68f8      	ldr	r0, [r7, #12]
 8017776:	f009 fe8d 	bl	8021494 <memset>
    pcb->prio = prio;
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	79fa      	ldrb	r2, [r7, #7]
 801777e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017786:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017790:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	22ff      	movs	r2, #255	; 0xff
 801779e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80177a6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	2206      	movs	r2, #6
 80177ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	2206      	movs	r2, #6
 80177b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80177bc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	2201      	movs	r2, #1
 80177c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80177c6:	4b0d      	ldr	r3, [pc, #52]	; (80177fc <tcp_alloc+0xf8>)
 80177c8:	681a      	ldr	r2, [r3, #0]
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80177ce:	4b0c      	ldr	r3, [pc, #48]	; (8017800 <tcp_alloc+0xfc>)
 80177d0:	781a      	ldrb	r2, [r3, #0]
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80177dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	4a08      	ldr	r2, [pc, #32]	; (8017804 <tcp_alloc+0x100>)
 80177e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	4a07      	ldr	r2, [pc, #28]	; (8017808 <tcp_alloc+0x104>)
 80177ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80177f0:	68fb      	ldr	r3, [r7, #12]
}
 80177f2:	4618      	mov	r0, r3
 80177f4:	3710      	adds	r7, #16
 80177f6:	46bd      	mov	sp, r7
 80177f8:	bd80      	pop	{r7, pc}
 80177fa:	bf00      	nop
 80177fc:	2001035c 	.word	0x2001035c
 8017800:	20008fbe 	.word	0x20008fbe
 8017804:	080174bd 	.word	0x080174bd
 8017808:	006ddd00 	.word	0x006ddd00

0801780c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801780c:	b580      	push	{r7, lr}
 801780e:	b082      	sub	sp, #8
 8017810:	af00      	add	r7, sp, #0
 8017812:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	2b00      	cmp	r3, #0
 8017818:	d107      	bne.n	801782a <tcp_pcb_purge+0x1e>
 801781a:	4b21      	ldr	r3, [pc, #132]	; (80178a0 <tcp_pcb_purge+0x94>)
 801781c:	f640 0251 	movw	r2, #2129	; 0x851
 8017820:	4920      	ldr	r1, [pc, #128]	; (80178a4 <tcp_pcb_purge+0x98>)
 8017822:	4821      	ldr	r0, [pc, #132]	; (80178a8 <tcp_pcb_purge+0x9c>)
 8017824:	f009 fee6 	bl	80215f4 <iprintf>
 8017828:	e037      	b.n	801789a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	7d1b      	ldrb	r3, [r3, #20]
 801782e:	2b00      	cmp	r3, #0
 8017830:	d033      	beq.n	801789a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017836:	2b0a      	cmp	r3, #10
 8017838:	d02f      	beq.n	801789a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801783e:	2b01      	cmp	r3, #1
 8017840:	d02b      	beq.n	801789a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017846:	2b00      	cmp	r3, #0
 8017848:	d007      	beq.n	801785a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801784e:	4618      	mov	r0, r3
 8017850:	f7fe fb6c 	bl	8015f2c <pbuf_free>
      pcb->refused_data = NULL;
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	2200      	movs	r2, #0
 8017858:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801785e:	2b00      	cmp	r3, #0
 8017860:	d002      	beq.n	8017868 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8017862:	6878      	ldr	r0, [r7, #4]
 8017864:	f000 f986 	bl	8017b74 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801786e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017874:	4618      	mov	r0, r3
 8017876:	f7ff fdc9 	bl	801740c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801787e:	4618      	mov	r0, r3
 8017880:	f7ff fdc4 	bl	801740c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	2200      	movs	r2, #0
 8017888:	66da      	str	r2, [r3, #108]	; 0x6c
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	2200      	movs	r2, #0
 8017896:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801789a:	3708      	adds	r7, #8
 801789c:	46bd      	mov	sp, r7
 801789e:	bd80      	pop	{r7, pc}
 80178a0:	0802310c 	.word	0x0802310c
 80178a4:	08023758 	.word	0x08023758
 80178a8:	08023150 	.word	0x08023150

080178ac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b084      	sub	sp, #16
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	6078      	str	r0, [r7, #4]
 80178b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80178b6:	683b      	ldr	r3, [r7, #0]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d106      	bne.n	80178ca <tcp_pcb_remove+0x1e>
 80178bc:	4b3e      	ldr	r3, [pc, #248]	; (80179b8 <tcp_pcb_remove+0x10c>)
 80178be:	f640 0283 	movw	r2, #2179	; 0x883
 80178c2:	493e      	ldr	r1, [pc, #248]	; (80179bc <tcp_pcb_remove+0x110>)
 80178c4:	483e      	ldr	r0, [pc, #248]	; (80179c0 <tcp_pcb_remove+0x114>)
 80178c6:	f009 fe95 	bl	80215f4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d106      	bne.n	80178de <tcp_pcb_remove+0x32>
 80178d0:	4b39      	ldr	r3, [pc, #228]	; (80179b8 <tcp_pcb_remove+0x10c>)
 80178d2:	f640 0284 	movw	r2, #2180	; 0x884
 80178d6:	493b      	ldr	r1, [pc, #236]	; (80179c4 <tcp_pcb_remove+0x118>)
 80178d8:	4839      	ldr	r0, [pc, #228]	; (80179c0 <tcp_pcb_remove+0x114>)
 80178da:	f009 fe8b 	bl	80215f4 <iprintf>

  TCP_RMV(pcblist, pcb);
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	683a      	ldr	r2, [r7, #0]
 80178e4:	429a      	cmp	r2, r3
 80178e6:	d105      	bne.n	80178f4 <tcp_pcb_remove+0x48>
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	68da      	ldr	r2, [r3, #12]
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	601a      	str	r2, [r3, #0]
 80178f2:	e013      	b.n	801791c <tcp_pcb_remove+0x70>
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	60fb      	str	r3, [r7, #12]
 80178fa:	e00c      	b.n	8017916 <tcp_pcb_remove+0x6a>
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	68db      	ldr	r3, [r3, #12]
 8017900:	683a      	ldr	r2, [r7, #0]
 8017902:	429a      	cmp	r2, r3
 8017904:	d104      	bne.n	8017910 <tcp_pcb_remove+0x64>
 8017906:	683b      	ldr	r3, [r7, #0]
 8017908:	68da      	ldr	r2, [r3, #12]
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	60da      	str	r2, [r3, #12]
 801790e:	e005      	b.n	801791c <tcp_pcb_remove+0x70>
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	68db      	ldr	r3, [r3, #12]
 8017914:	60fb      	str	r3, [r7, #12]
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	2b00      	cmp	r3, #0
 801791a:	d1ef      	bne.n	80178fc <tcp_pcb_remove+0x50>
 801791c:	683b      	ldr	r3, [r7, #0]
 801791e:	2200      	movs	r2, #0
 8017920:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8017922:	6838      	ldr	r0, [r7, #0]
 8017924:	f7ff ff72 	bl	801780c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8017928:	683b      	ldr	r3, [r7, #0]
 801792a:	7d1b      	ldrb	r3, [r3, #20]
 801792c:	2b0a      	cmp	r3, #10
 801792e:	d013      	beq.n	8017958 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8017930:	683b      	ldr	r3, [r7, #0]
 8017932:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017934:	2b01      	cmp	r3, #1
 8017936:	d00f      	beq.n	8017958 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8017938:	683b      	ldr	r3, [r7, #0]
 801793a:	8b5b      	ldrh	r3, [r3, #26]
 801793c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8017940:	2b00      	cmp	r3, #0
 8017942:	d009      	beq.n	8017958 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017944:	683b      	ldr	r3, [r7, #0]
 8017946:	8b5b      	ldrh	r3, [r3, #26]
 8017948:	f043 0302 	orr.w	r3, r3, #2
 801794c:	b29a      	uxth	r2, r3
 801794e:	683b      	ldr	r3, [r7, #0]
 8017950:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017952:	6838      	ldr	r0, [r7, #0]
 8017954:	f002 ff68 	bl	801a828 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017958:	683b      	ldr	r3, [r7, #0]
 801795a:	7d1b      	ldrb	r3, [r3, #20]
 801795c:	2b01      	cmp	r3, #1
 801795e:	d020      	beq.n	80179a2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017960:	683b      	ldr	r3, [r7, #0]
 8017962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017964:	2b00      	cmp	r3, #0
 8017966:	d006      	beq.n	8017976 <tcp_pcb_remove+0xca>
 8017968:	4b13      	ldr	r3, [pc, #76]	; (80179b8 <tcp_pcb_remove+0x10c>)
 801796a:	f640 0293 	movw	r2, #2195	; 0x893
 801796e:	4916      	ldr	r1, [pc, #88]	; (80179c8 <tcp_pcb_remove+0x11c>)
 8017970:	4813      	ldr	r0, [pc, #76]	; (80179c0 <tcp_pcb_remove+0x114>)
 8017972:	f009 fe3f 	bl	80215f4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017976:	683b      	ldr	r3, [r7, #0]
 8017978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801797a:	2b00      	cmp	r3, #0
 801797c:	d006      	beq.n	801798c <tcp_pcb_remove+0xe0>
 801797e:	4b0e      	ldr	r3, [pc, #56]	; (80179b8 <tcp_pcb_remove+0x10c>)
 8017980:	f640 0294 	movw	r2, #2196	; 0x894
 8017984:	4911      	ldr	r1, [pc, #68]	; (80179cc <tcp_pcb_remove+0x120>)
 8017986:	480e      	ldr	r0, [pc, #56]	; (80179c0 <tcp_pcb_remove+0x114>)
 8017988:	f009 fe34 	bl	80215f4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801798c:	683b      	ldr	r3, [r7, #0]
 801798e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017990:	2b00      	cmp	r3, #0
 8017992:	d006      	beq.n	80179a2 <tcp_pcb_remove+0xf6>
 8017994:	4b08      	ldr	r3, [pc, #32]	; (80179b8 <tcp_pcb_remove+0x10c>)
 8017996:	f640 0296 	movw	r2, #2198	; 0x896
 801799a:	490d      	ldr	r1, [pc, #52]	; (80179d0 <tcp_pcb_remove+0x124>)
 801799c:	4808      	ldr	r0, [pc, #32]	; (80179c0 <tcp_pcb_remove+0x114>)
 801799e:	f009 fe29 	bl	80215f4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80179a2:	683b      	ldr	r3, [r7, #0]
 80179a4:	2200      	movs	r2, #0
 80179a6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80179a8:	683b      	ldr	r3, [r7, #0]
 80179aa:	2200      	movs	r2, #0
 80179ac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80179ae:	bf00      	nop
 80179b0:	3710      	adds	r7, #16
 80179b2:	46bd      	mov	sp, r7
 80179b4:	bd80      	pop	{r7, pc}
 80179b6:	bf00      	nop
 80179b8:	0802310c 	.word	0x0802310c
 80179bc:	08023774 	.word	0x08023774
 80179c0:	08023150 	.word	0x08023150
 80179c4:	08023790 	.word	0x08023790
 80179c8:	080237b0 	.word	0x080237b0
 80179cc:	080237c8 	.word	0x080237c8
 80179d0:	080237e4 	.word	0x080237e4

080179d4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b082      	sub	sp, #8
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d106      	bne.n	80179f0 <tcp_next_iss+0x1c>
 80179e2:	4b0a      	ldr	r3, [pc, #40]	; (8017a0c <tcp_next_iss+0x38>)
 80179e4:	f640 02af 	movw	r2, #2223	; 0x8af
 80179e8:	4909      	ldr	r1, [pc, #36]	; (8017a10 <tcp_next_iss+0x3c>)
 80179ea:	480a      	ldr	r0, [pc, #40]	; (8017a14 <tcp_next_iss+0x40>)
 80179ec:	f009 fe02 	bl	80215f4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80179f0:	4b09      	ldr	r3, [pc, #36]	; (8017a18 <tcp_next_iss+0x44>)
 80179f2:	681a      	ldr	r2, [r3, #0]
 80179f4:	4b09      	ldr	r3, [pc, #36]	; (8017a1c <tcp_next_iss+0x48>)
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	4413      	add	r3, r2
 80179fa:	4a07      	ldr	r2, [pc, #28]	; (8017a18 <tcp_next_iss+0x44>)
 80179fc:	6013      	str	r3, [r2, #0]
  return iss;
 80179fe:	4b06      	ldr	r3, [pc, #24]	; (8017a18 <tcp_next_iss+0x44>)
 8017a00:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8017a02:	4618      	mov	r0, r3
 8017a04:	3708      	adds	r7, #8
 8017a06:	46bd      	mov	sp, r7
 8017a08:	bd80      	pop	{r7, pc}
 8017a0a:	bf00      	nop
 8017a0c:	0802310c 	.word	0x0802310c
 8017a10:	080237fc 	.word	0x080237fc
 8017a14:	08023150 	.word	0x08023150
 8017a18:	20000038 	.word	0x20000038
 8017a1c:	2001035c 	.word	0x2001035c

08017a20 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8017a20:	b580      	push	{r7, lr}
 8017a22:	b086      	sub	sp, #24
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	4603      	mov	r3, r0
 8017a28:	60b9      	str	r1, [r7, #8]
 8017a2a:	607a      	str	r2, [r7, #4]
 8017a2c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d106      	bne.n	8017a42 <tcp_eff_send_mss_netif+0x22>
 8017a34:	4b14      	ldr	r3, [pc, #80]	; (8017a88 <tcp_eff_send_mss_netif+0x68>)
 8017a36:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8017a3a:	4914      	ldr	r1, [pc, #80]	; (8017a8c <tcp_eff_send_mss_netif+0x6c>)
 8017a3c:	4814      	ldr	r0, [pc, #80]	; (8017a90 <tcp_eff_send_mss_netif+0x70>)
 8017a3e:	f009 fdd9 	bl	80215f4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8017a42:	68bb      	ldr	r3, [r7, #8]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d101      	bne.n	8017a4c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8017a48:	89fb      	ldrh	r3, [r7, #14]
 8017a4a:	e019      	b.n	8017a80 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8017a4c:	68bb      	ldr	r3, [r7, #8]
 8017a4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017a50:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8017a52:	8afb      	ldrh	r3, [r7, #22]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d012      	beq.n	8017a7e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8017a58:	2328      	movs	r3, #40	; 0x28
 8017a5a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8017a5c:	8afa      	ldrh	r2, [r7, #22]
 8017a5e:	8abb      	ldrh	r3, [r7, #20]
 8017a60:	429a      	cmp	r2, r3
 8017a62:	d904      	bls.n	8017a6e <tcp_eff_send_mss_netif+0x4e>
 8017a64:	8afa      	ldrh	r2, [r7, #22]
 8017a66:	8abb      	ldrh	r3, [r7, #20]
 8017a68:	1ad3      	subs	r3, r2, r3
 8017a6a:	b29b      	uxth	r3, r3
 8017a6c:	e000      	b.n	8017a70 <tcp_eff_send_mss_netif+0x50>
 8017a6e:	2300      	movs	r3, #0
 8017a70:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017a72:	8a7a      	ldrh	r2, [r7, #18]
 8017a74:	89fb      	ldrh	r3, [r7, #14]
 8017a76:	4293      	cmp	r3, r2
 8017a78:	bf28      	it	cs
 8017a7a:	4613      	movcs	r3, r2
 8017a7c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8017a7e:	89fb      	ldrh	r3, [r7, #14]
}
 8017a80:	4618      	mov	r0, r3
 8017a82:	3718      	adds	r7, #24
 8017a84:	46bd      	mov	sp, r7
 8017a86:	bd80      	pop	{r7, pc}
 8017a88:	0802310c 	.word	0x0802310c
 8017a8c:	08023818 	.word	0x08023818
 8017a90:	08023150 	.word	0x08023150

08017a94 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b084      	sub	sp, #16
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
 8017a9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8017a9e:	683b      	ldr	r3, [r7, #0]
 8017aa0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d119      	bne.n	8017adc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8017aa8:	4b10      	ldr	r3, [pc, #64]	; (8017aec <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8017aaa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8017aae:	4910      	ldr	r1, [pc, #64]	; (8017af0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8017ab0:	4810      	ldr	r0, [pc, #64]	; (8017af4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8017ab2:	f009 fd9f 	bl	80215f4 <iprintf>

  while (pcb != NULL) {
 8017ab6:	e011      	b.n	8017adc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	681a      	ldr	r2, [r3, #0]
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	429a      	cmp	r2, r3
 8017ac2:	d108      	bne.n	8017ad6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	68db      	ldr	r3, [r3, #12]
 8017ac8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8017aca:	68f8      	ldr	r0, [r7, #12]
 8017acc:	f7fe ffca 	bl	8016a64 <tcp_abort>
      pcb = next;
 8017ad0:	68bb      	ldr	r3, [r7, #8]
 8017ad2:	60fb      	str	r3, [r7, #12]
 8017ad4:	e002      	b.n	8017adc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	68db      	ldr	r3, [r3, #12]
 8017ada:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d1ea      	bne.n	8017ab8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8017ae2:	bf00      	nop
 8017ae4:	3710      	adds	r7, #16
 8017ae6:	46bd      	mov	sp, r7
 8017ae8:	bd80      	pop	{r7, pc}
 8017aea:	bf00      	nop
 8017aec:	0802310c 	.word	0x0802310c
 8017af0:	08023840 	.word	0x08023840
 8017af4:	08023150 	.word	0x08023150

08017af8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	b084      	sub	sp, #16
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	6078      	str	r0, [r7, #4]
 8017b00:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d02a      	beq.n	8017b5e <tcp_netif_ip_addr_changed+0x66>
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d026      	beq.n	8017b5e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017b10:	4b15      	ldr	r3, [pc, #84]	; (8017b68 <tcp_netif_ip_addr_changed+0x70>)
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	4619      	mov	r1, r3
 8017b16:	6878      	ldr	r0, [r7, #4]
 8017b18:	f7ff ffbc 	bl	8017a94 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017b1c:	4b13      	ldr	r3, [pc, #76]	; (8017b6c <tcp_netif_ip_addr_changed+0x74>)
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	4619      	mov	r1, r3
 8017b22:	6878      	ldr	r0, [r7, #4]
 8017b24:	f7ff ffb6 	bl	8017a94 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8017b28:	683b      	ldr	r3, [r7, #0]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d017      	beq.n	8017b5e <tcp_netif_ip_addr_changed+0x66>
 8017b2e:	683b      	ldr	r3, [r7, #0]
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d013      	beq.n	8017b5e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017b36:	4b0e      	ldr	r3, [pc, #56]	; (8017b70 <tcp_netif_ip_addr_changed+0x78>)
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	60fb      	str	r3, [r7, #12]
 8017b3c:	e00c      	b.n	8017b58 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	681a      	ldr	r2, [r3, #0]
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	681b      	ldr	r3, [r3, #0]
 8017b46:	429a      	cmp	r2, r3
 8017b48:	d103      	bne.n	8017b52 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8017b4a:	683b      	ldr	r3, [r7, #0]
 8017b4c:	681a      	ldr	r2, [r3, #0]
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	68db      	ldr	r3, [r3, #12]
 8017b56:	60fb      	str	r3, [r7, #12]
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d1ef      	bne.n	8017b3e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8017b5e:	bf00      	nop
 8017b60:	3710      	adds	r7, #16
 8017b62:	46bd      	mov	sp, r7
 8017b64:	bd80      	pop	{r7, pc}
 8017b66:	bf00      	nop
 8017b68:	20010358 	.word	0x20010358
 8017b6c:	20010364 	.word	0x20010364
 8017b70:	20010360 	.word	0x20010360

08017b74 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b082      	sub	sp, #8
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d007      	beq.n	8017b94 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017b88:	4618      	mov	r0, r3
 8017b8a:	f7ff fc3f 	bl	801740c <tcp_segs_free>
    pcb->ooseq = NULL;
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	2200      	movs	r2, #0
 8017b92:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8017b94:	bf00      	nop
 8017b96:	3708      	adds	r7, #8
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	bd80      	pop	{r7, pc}

08017b9c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8017b9c:	b590      	push	{r4, r7, lr}
 8017b9e:	b08d      	sub	sp, #52	; 0x34
 8017ba0:	af04      	add	r7, sp, #16
 8017ba2:	6078      	str	r0, [r7, #4]
 8017ba4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d105      	bne.n	8017bb8 <tcp_input+0x1c>
 8017bac:	4b9b      	ldr	r3, [pc, #620]	; (8017e1c <tcp_input+0x280>)
 8017bae:	2283      	movs	r2, #131	; 0x83
 8017bb0:	499b      	ldr	r1, [pc, #620]	; (8017e20 <tcp_input+0x284>)
 8017bb2:	489c      	ldr	r0, [pc, #624]	; (8017e24 <tcp_input+0x288>)
 8017bb4:	f009 fd1e 	bl	80215f4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	685b      	ldr	r3, [r3, #4]
 8017bbc:	4a9a      	ldr	r2, [pc, #616]	; (8017e28 <tcp_input+0x28c>)
 8017bbe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	895b      	ldrh	r3, [r3, #10]
 8017bc4:	2b13      	cmp	r3, #19
 8017bc6:	f240 83c4 	bls.w	8018352 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017bca:	4b98      	ldr	r3, [pc, #608]	; (8017e2c <tcp_input+0x290>)
 8017bcc:	695a      	ldr	r2, [r3, #20]
 8017bce:	4b97      	ldr	r3, [pc, #604]	; (8017e2c <tcp_input+0x290>)
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	4619      	mov	r1, r3
 8017bd4:	4610      	mov	r0, r2
 8017bd6:	f007 fe17 	bl	801f808 <ip4_addr_isbroadcast_u32>
 8017bda:	4603      	mov	r3, r0
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	f040 83ba 	bne.w	8018356 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8017be2:	4b92      	ldr	r3, [pc, #584]	; (8017e2c <tcp_input+0x290>)
 8017be4:	695b      	ldr	r3, [r3, #20]
 8017be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017bea:	2be0      	cmp	r3, #224	; 0xe0
 8017bec:	f000 83b3 	beq.w	8018356 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8017bf0:	4b8d      	ldr	r3, [pc, #564]	; (8017e28 <tcp_input+0x28c>)
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	899b      	ldrh	r3, [r3, #12]
 8017bf6:	b29b      	uxth	r3, r3
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	f7fc fdc9 	bl	8014790 <lwip_htons>
 8017bfe:	4603      	mov	r3, r0
 8017c00:	0b1b      	lsrs	r3, r3, #12
 8017c02:	b29b      	uxth	r3, r3
 8017c04:	b2db      	uxtb	r3, r3
 8017c06:	009b      	lsls	r3, r3, #2
 8017c08:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8017c0a:	7cbb      	ldrb	r3, [r7, #18]
 8017c0c:	2b13      	cmp	r3, #19
 8017c0e:	f240 83a2 	bls.w	8018356 <tcp_input+0x7ba>
 8017c12:	7cbb      	ldrb	r3, [r7, #18]
 8017c14:	b29a      	uxth	r2, r3
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	891b      	ldrh	r3, [r3, #8]
 8017c1a:	429a      	cmp	r2, r3
 8017c1c:	f200 839b 	bhi.w	8018356 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8017c20:	7cbb      	ldrb	r3, [r7, #18]
 8017c22:	b29b      	uxth	r3, r3
 8017c24:	3b14      	subs	r3, #20
 8017c26:	b29a      	uxth	r2, r3
 8017c28:	4b81      	ldr	r3, [pc, #516]	; (8017e30 <tcp_input+0x294>)
 8017c2a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8017c2c:	4b81      	ldr	r3, [pc, #516]	; (8017e34 <tcp_input+0x298>)
 8017c2e:	2200      	movs	r2, #0
 8017c30:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	895a      	ldrh	r2, [r3, #10]
 8017c36:	7cbb      	ldrb	r3, [r7, #18]
 8017c38:	b29b      	uxth	r3, r3
 8017c3a:	429a      	cmp	r2, r3
 8017c3c:	d309      	bcc.n	8017c52 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8017c3e:	4b7c      	ldr	r3, [pc, #496]	; (8017e30 <tcp_input+0x294>)
 8017c40:	881a      	ldrh	r2, [r3, #0]
 8017c42:	4b7d      	ldr	r3, [pc, #500]	; (8017e38 <tcp_input+0x29c>)
 8017c44:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8017c46:	7cbb      	ldrb	r3, [r7, #18]
 8017c48:	4619      	mov	r1, r3
 8017c4a:	6878      	ldr	r0, [r7, #4]
 8017c4c:	f7fe f8e8 	bl	8015e20 <pbuf_remove_header>
 8017c50:	e04e      	b.n	8017cf0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d105      	bne.n	8017c66 <tcp_input+0xca>
 8017c5a:	4b70      	ldr	r3, [pc, #448]	; (8017e1c <tcp_input+0x280>)
 8017c5c:	22c2      	movs	r2, #194	; 0xc2
 8017c5e:	4977      	ldr	r1, [pc, #476]	; (8017e3c <tcp_input+0x2a0>)
 8017c60:	4870      	ldr	r0, [pc, #448]	; (8017e24 <tcp_input+0x288>)
 8017c62:	f009 fcc7 	bl	80215f4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8017c66:	2114      	movs	r1, #20
 8017c68:	6878      	ldr	r0, [r7, #4]
 8017c6a:	f7fe f8d9 	bl	8015e20 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	895a      	ldrh	r2, [r3, #10]
 8017c72:	4b71      	ldr	r3, [pc, #452]	; (8017e38 <tcp_input+0x29c>)
 8017c74:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8017c76:	4b6e      	ldr	r3, [pc, #440]	; (8017e30 <tcp_input+0x294>)
 8017c78:	881a      	ldrh	r2, [r3, #0]
 8017c7a:	4b6f      	ldr	r3, [pc, #444]	; (8017e38 <tcp_input+0x29c>)
 8017c7c:	881b      	ldrh	r3, [r3, #0]
 8017c7e:	1ad3      	subs	r3, r2, r3
 8017c80:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8017c82:	4b6d      	ldr	r3, [pc, #436]	; (8017e38 <tcp_input+0x29c>)
 8017c84:	881b      	ldrh	r3, [r3, #0]
 8017c86:	4619      	mov	r1, r3
 8017c88:	6878      	ldr	r0, [r7, #4]
 8017c8a:	f7fe f8c9 	bl	8015e20 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	895b      	ldrh	r3, [r3, #10]
 8017c94:	8a3a      	ldrh	r2, [r7, #16]
 8017c96:	429a      	cmp	r2, r3
 8017c98:	f200 835f 	bhi.w	801835a <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	685b      	ldr	r3, [r3, #4]
 8017ca2:	4a64      	ldr	r2, [pc, #400]	; (8017e34 <tcp_input+0x298>)
 8017ca4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	8a3a      	ldrh	r2, [r7, #16]
 8017cac:	4611      	mov	r1, r2
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f7fe f8b6 	bl	8015e20 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	891a      	ldrh	r2, [r3, #8]
 8017cb8:	8a3b      	ldrh	r3, [r7, #16]
 8017cba:	1ad3      	subs	r3, r2, r3
 8017cbc:	b29a      	uxth	r2, r3
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	895b      	ldrh	r3, [r3, #10]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d005      	beq.n	8017cd6 <tcp_input+0x13a>
 8017cca:	4b54      	ldr	r3, [pc, #336]	; (8017e1c <tcp_input+0x280>)
 8017ccc:	22df      	movs	r2, #223	; 0xdf
 8017cce:	495c      	ldr	r1, [pc, #368]	; (8017e40 <tcp_input+0x2a4>)
 8017cd0:	4854      	ldr	r0, [pc, #336]	; (8017e24 <tcp_input+0x288>)
 8017cd2:	f009 fc8f 	bl	80215f4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	891a      	ldrh	r2, [r3, #8]
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	891b      	ldrh	r3, [r3, #8]
 8017ce0:	429a      	cmp	r2, r3
 8017ce2:	d005      	beq.n	8017cf0 <tcp_input+0x154>
 8017ce4:	4b4d      	ldr	r3, [pc, #308]	; (8017e1c <tcp_input+0x280>)
 8017ce6:	22e0      	movs	r2, #224	; 0xe0
 8017ce8:	4956      	ldr	r1, [pc, #344]	; (8017e44 <tcp_input+0x2a8>)
 8017cea:	484e      	ldr	r0, [pc, #312]	; (8017e24 <tcp_input+0x288>)
 8017cec:	f009 fc82 	bl	80215f4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8017cf0:	4b4d      	ldr	r3, [pc, #308]	; (8017e28 <tcp_input+0x28c>)
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	881b      	ldrh	r3, [r3, #0]
 8017cf6:	b29a      	uxth	r2, r3
 8017cf8:	4b4b      	ldr	r3, [pc, #300]	; (8017e28 <tcp_input+0x28c>)
 8017cfa:	681c      	ldr	r4, [r3, #0]
 8017cfc:	4610      	mov	r0, r2
 8017cfe:	f7fc fd47 	bl	8014790 <lwip_htons>
 8017d02:	4603      	mov	r3, r0
 8017d04:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017d06:	4b48      	ldr	r3, [pc, #288]	; (8017e28 <tcp_input+0x28c>)
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	885b      	ldrh	r3, [r3, #2]
 8017d0c:	b29a      	uxth	r2, r3
 8017d0e:	4b46      	ldr	r3, [pc, #280]	; (8017e28 <tcp_input+0x28c>)
 8017d10:	681c      	ldr	r4, [r3, #0]
 8017d12:	4610      	mov	r0, r2
 8017d14:	f7fc fd3c 	bl	8014790 <lwip_htons>
 8017d18:	4603      	mov	r3, r0
 8017d1a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017d1c:	4b42      	ldr	r3, [pc, #264]	; (8017e28 <tcp_input+0x28c>)
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	685a      	ldr	r2, [r3, #4]
 8017d22:	4b41      	ldr	r3, [pc, #260]	; (8017e28 <tcp_input+0x28c>)
 8017d24:	681c      	ldr	r4, [r3, #0]
 8017d26:	4610      	mov	r0, r2
 8017d28:	f7fc fd47 	bl	80147ba <lwip_htonl>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	6063      	str	r3, [r4, #4]
 8017d30:	6863      	ldr	r3, [r4, #4]
 8017d32:	4a45      	ldr	r2, [pc, #276]	; (8017e48 <tcp_input+0x2ac>)
 8017d34:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8017d36:	4b3c      	ldr	r3, [pc, #240]	; (8017e28 <tcp_input+0x28c>)
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	689a      	ldr	r2, [r3, #8]
 8017d3c:	4b3a      	ldr	r3, [pc, #232]	; (8017e28 <tcp_input+0x28c>)
 8017d3e:	681c      	ldr	r4, [r3, #0]
 8017d40:	4610      	mov	r0, r2
 8017d42:	f7fc fd3a 	bl	80147ba <lwip_htonl>
 8017d46:	4603      	mov	r3, r0
 8017d48:	60a3      	str	r3, [r4, #8]
 8017d4a:	68a3      	ldr	r3, [r4, #8]
 8017d4c:	4a3f      	ldr	r2, [pc, #252]	; (8017e4c <tcp_input+0x2b0>)
 8017d4e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017d50:	4b35      	ldr	r3, [pc, #212]	; (8017e28 <tcp_input+0x28c>)
 8017d52:	681b      	ldr	r3, [r3, #0]
 8017d54:	89db      	ldrh	r3, [r3, #14]
 8017d56:	b29a      	uxth	r2, r3
 8017d58:	4b33      	ldr	r3, [pc, #204]	; (8017e28 <tcp_input+0x28c>)
 8017d5a:	681c      	ldr	r4, [r3, #0]
 8017d5c:	4610      	mov	r0, r2
 8017d5e:	f7fc fd17 	bl	8014790 <lwip_htons>
 8017d62:	4603      	mov	r3, r0
 8017d64:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8017d66:	4b30      	ldr	r3, [pc, #192]	; (8017e28 <tcp_input+0x28c>)
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	899b      	ldrh	r3, [r3, #12]
 8017d6c:	b29b      	uxth	r3, r3
 8017d6e:	4618      	mov	r0, r3
 8017d70:	f7fc fd0e 	bl	8014790 <lwip_htons>
 8017d74:	4603      	mov	r3, r0
 8017d76:	b2db      	uxtb	r3, r3
 8017d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017d7c:	b2da      	uxtb	r2, r3
 8017d7e:	4b34      	ldr	r3, [pc, #208]	; (8017e50 <tcp_input+0x2b4>)
 8017d80:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	891a      	ldrh	r2, [r3, #8]
 8017d86:	4b33      	ldr	r3, [pc, #204]	; (8017e54 <tcp_input+0x2b8>)
 8017d88:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8017d8a:	4b31      	ldr	r3, [pc, #196]	; (8017e50 <tcp_input+0x2b4>)
 8017d8c:	781b      	ldrb	r3, [r3, #0]
 8017d8e:	f003 0303 	and.w	r3, r3, #3
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d00c      	beq.n	8017db0 <tcp_input+0x214>
    tcplen++;
 8017d96:	4b2f      	ldr	r3, [pc, #188]	; (8017e54 <tcp_input+0x2b8>)
 8017d98:	881b      	ldrh	r3, [r3, #0]
 8017d9a:	3301      	adds	r3, #1
 8017d9c:	b29a      	uxth	r2, r3
 8017d9e:	4b2d      	ldr	r3, [pc, #180]	; (8017e54 <tcp_input+0x2b8>)
 8017da0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	891a      	ldrh	r2, [r3, #8]
 8017da6:	4b2b      	ldr	r3, [pc, #172]	; (8017e54 <tcp_input+0x2b8>)
 8017da8:	881b      	ldrh	r3, [r3, #0]
 8017daa:	429a      	cmp	r2, r3
 8017dac:	f200 82d7 	bhi.w	801835e <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8017db0:	2300      	movs	r3, #0
 8017db2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017db4:	4b28      	ldr	r3, [pc, #160]	; (8017e58 <tcp_input+0x2bc>)
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	61fb      	str	r3, [r7, #28]
 8017dba:	e09d      	b.n	8017ef8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017dbc:	69fb      	ldr	r3, [r7, #28]
 8017dbe:	7d1b      	ldrb	r3, [r3, #20]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d105      	bne.n	8017dd0 <tcp_input+0x234>
 8017dc4:	4b15      	ldr	r3, [pc, #84]	; (8017e1c <tcp_input+0x280>)
 8017dc6:	22fb      	movs	r2, #251	; 0xfb
 8017dc8:	4924      	ldr	r1, [pc, #144]	; (8017e5c <tcp_input+0x2c0>)
 8017dca:	4816      	ldr	r0, [pc, #88]	; (8017e24 <tcp_input+0x288>)
 8017dcc:	f009 fc12 	bl	80215f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017dd0:	69fb      	ldr	r3, [r7, #28]
 8017dd2:	7d1b      	ldrb	r3, [r3, #20]
 8017dd4:	2b0a      	cmp	r3, #10
 8017dd6:	d105      	bne.n	8017de4 <tcp_input+0x248>
 8017dd8:	4b10      	ldr	r3, [pc, #64]	; (8017e1c <tcp_input+0x280>)
 8017dda:	22fc      	movs	r2, #252	; 0xfc
 8017ddc:	4920      	ldr	r1, [pc, #128]	; (8017e60 <tcp_input+0x2c4>)
 8017dde:	4811      	ldr	r0, [pc, #68]	; (8017e24 <tcp_input+0x288>)
 8017de0:	f009 fc08 	bl	80215f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017de4:	69fb      	ldr	r3, [r7, #28]
 8017de6:	7d1b      	ldrb	r3, [r3, #20]
 8017de8:	2b01      	cmp	r3, #1
 8017dea:	d105      	bne.n	8017df8 <tcp_input+0x25c>
 8017dec:	4b0b      	ldr	r3, [pc, #44]	; (8017e1c <tcp_input+0x280>)
 8017dee:	22fd      	movs	r2, #253	; 0xfd
 8017df0:	491c      	ldr	r1, [pc, #112]	; (8017e64 <tcp_input+0x2c8>)
 8017df2:	480c      	ldr	r0, [pc, #48]	; (8017e24 <tcp_input+0x288>)
 8017df4:	f009 fbfe 	bl	80215f4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017df8:	69fb      	ldr	r3, [r7, #28]
 8017dfa:	7a1b      	ldrb	r3, [r3, #8]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d033      	beq.n	8017e68 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017e00:	69fb      	ldr	r3, [r7, #28]
 8017e02:	7a1a      	ldrb	r2, [r3, #8]
 8017e04:	4b09      	ldr	r3, [pc, #36]	; (8017e2c <tcp_input+0x290>)
 8017e06:	685b      	ldr	r3, [r3, #4]
 8017e08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017e0c:	3301      	adds	r3, #1
 8017e0e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e10:	429a      	cmp	r2, r3
 8017e12:	d029      	beq.n	8017e68 <tcp_input+0x2cc>
      prev = pcb;
 8017e14:	69fb      	ldr	r3, [r7, #28]
 8017e16:	61bb      	str	r3, [r7, #24]
      continue;
 8017e18:	e06b      	b.n	8017ef2 <tcp_input+0x356>
 8017e1a:	bf00      	nop
 8017e1c:	08023874 	.word	0x08023874
 8017e20:	080238a8 	.word	0x080238a8
 8017e24:	080238c0 	.word	0x080238c0
 8017e28:	20008fd0 	.word	0x20008fd0
 8017e2c:	2000cc24 	.word	0x2000cc24
 8017e30:	20008fd4 	.word	0x20008fd4
 8017e34:	20008fd8 	.word	0x20008fd8
 8017e38:	20008fd6 	.word	0x20008fd6
 8017e3c:	080238e8 	.word	0x080238e8
 8017e40:	080238f8 	.word	0x080238f8
 8017e44:	08023904 	.word	0x08023904
 8017e48:	20008fe0 	.word	0x20008fe0
 8017e4c:	20008fe4 	.word	0x20008fe4
 8017e50:	20008fec 	.word	0x20008fec
 8017e54:	20008fea 	.word	0x20008fea
 8017e58:	20010358 	.word	0x20010358
 8017e5c:	08023924 	.word	0x08023924
 8017e60:	0802394c 	.word	0x0802394c
 8017e64:	08023978 	.word	0x08023978
    }

    if (pcb->remote_port == tcphdr->src &&
 8017e68:	69fb      	ldr	r3, [r7, #28]
 8017e6a:	8b1a      	ldrh	r2, [r3, #24]
 8017e6c:	4b94      	ldr	r3, [pc, #592]	; (80180c0 <tcp_input+0x524>)
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	881b      	ldrh	r3, [r3, #0]
 8017e72:	b29b      	uxth	r3, r3
 8017e74:	429a      	cmp	r2, r3
 8017e76:	d13a      	bne.n	8017eee <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8017e78:	69fb      	ldr	r3, [r7, #28]
 8017e7a:	8ada      	ldrh	r2, [r3, #22]
 8017e7c:	4b90      	ldr	r3, [pc, #576]	; (80180c0 <tcp_input+0x524>)
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	885b      	ldrh	r3, [r3, #2]
 8017e82:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017e84:	429a      	cmp	r2, r3
 8017e86:	d132      	bne.n	8017eee <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017e88:	69fb      	ldr	r3, [r7, #28]
 8017e8a:	685a      	ldr	r2, [r3, #4]
 8017e8c:	4b8d      	ldr	r3, [pc, #564]	; (80180c4 <tcp_input+0x528>)
 8017e8e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8017e90:	429a      	cmp	r2, r3
 8017e92:	d12c      	bne.n	8017eee <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017e94:	69fb      	ldr	r3, [r7, #28]
 8017e96:	681a      	ldr	r2, [r3, #0]
 8017e98:	4b8a      	ldr	r3, [pc, #552]	; (80180c4 <tcp_input+0x528>)
 8017e9a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017e9c:	429a      	cmp	r2, r3
 8017e9e:	d126      	bne.n	8017eee <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017ea0:	69fb      	ldr	r3, [r7, #28]
 8017ea2:	68db      	ldr	r3, [r3, #12]
 8017ea4:	69fa      	ldr	r2, [r7, #28]
 8017ea6:	429a      	cmp	r2, r3
 8017ea8:	d106      	bne.n	8017eb8 <tcp_input+0x31c>
 8017eaa:	4b87      	ldr	r3, [pc, #540]	; (80180c8 <tcp_input+0x52c>)
 8017eac:	f240 120d 	movw	r2, #269	; 0x10d
 8017eb0:	4986      	ldr	r1, [pc, #536]	; (80180cc <tcp_input+0x530>)
 8017eb2:	4887      	ldr	r0, [pc, #540]	; (80180d0 <tcp_input+0x534>)
 8017eb4:	f009 fb9e 	bl	80215f4 <iprintf>
      if (prev != NULL) {
 8017eb8:	69bb      	ldr	r3, [r7, #24]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d00a      	beq.n	8017ed4 <tcp_input+0x338>
        prev->next = pcb->next;
 8017ebe:	69fb      	ldr	r3, [r7, #28]
 8017ec0:	68da      	ldr	r2, [r3, #12]
 8017ec2:	69bb      	ldr	r3, [r7, #24]
 8017ec4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017ec6:	4b83      	ldr	r3, [pc, #524]	; (80180d4 <tcp_input+0x538>)
 8017ec8:	681a      	ldr	r2, [r3, #0]
 8017eca:	69fb      	ldr	r3, [r7, #28]
 8017ecc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8017ece:	4a81      	ldr	r2, [pc, #516]	; (80180d4 <tcp_input+0x538>)
 8017ed0:	69fb      	ldr	r3, [r7, #28]
 8017ed2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017ed4:	69fb      	ldr	r3, [r7, #28]
 8017ed6:	68db      	ldr	r3, [r3, #12]
 8017ed8:	69fa      	ldr	r2, [r7, #28]
 8017eda:	429a      	cmp	r2, r3
 8017edc:	d111      	bne.n	8017f02 <tcp_input+0x366>
 8017ede:	4b7a      	ldr	r3, [pc, #488]	; (80180c8 <tcp_input+0x52c>)
 8017ee0:	f240 1215 	movw	r2, #277	; 0x115
 8017ee4:	497c      	ldr	r1, [pc, #496]	; (80180d8 <tcp_input+0x53c>)
 8017ee6:	487a      	ldr	r0, [pc, #488]	; (80180d0 <tcp_input+0x534>)
 8017ee8:	f009 fb84 	bl	80215f4 <iprintf>
      break;
 8017eec:	e009      	b.n	8017f02 <tcp_input+0x366>
    }
    prev = pcb;
 8017eee:	69fb      	ldr	r3, [r7, #28]
 8017ef0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ef2:	69fb      	ldr	r3, [r7, #28]
 8017ef4:	68db      	ldr	r3, [r3, #12]
 8017ef6:	61fb      	str	r3, [r7, #28]
 8017ef8:	69fb      	ldr	r3, [r7, #28]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	f47f af5e 	bne.w	8017dbc <tcp_input+0x220>
 8017f00:	e000      	b.n	8017f04 <tcp_input+0x368>
      break;
 8017f02:	bf00      	nop
  }

  if (pcb == NULL) {
 8017f04:	69fb      	ldr	r3, [r7, #28]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	f040 8095 	bne.w	8018036 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f0c:	4b73      	ldr	r3, [pc, #460]	; (80180dc <tcp_input+0x540>)
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	61fb      	str	r3, [r7, #28]
 8017f12:	e03f      	b.n	8017f94 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017f14:	69fb      	ldr	r3, [r7, #28]
 8017f16:	7d1b      	ldrb	r3, [r3, #20]
 8017f18:	2b0a      	cmp	r3, #10
 8017f1a:	d006      	beq.n	8017f2a <tcp_input+0x38e>
 8017f1c:	4b6a      	ldr	r3, [pc, #424]	; (80180c8 <tcp_input+0x52c>)
 8017f1e:	f240 121f 	movw	r2, #287	; 0x11f
 8017f22:	496f      	ldr	r1, [pc, #444]	; (80180e0 <tcp_input+0x544>)
 8017f24:	486a      	ldr	r0, [pc, #424]	; (80180d0 <tcp_input+0x534>)
 8017f26:	f009 fb65 	bl	80215f4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017f2a:	69fb      	ldr	r3, [r7, #28]
 8017f2c:	7a1b      	ldrb	r3, [r3, #8]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d009      	beq.n	8017f46 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017f32:	69fb      	ldr	r3, [r7, #28]
 8017f34:	7a1a      	ldrb	r2, [r3, #8]
 8017f36:	4b63      	ldr	r3, [pc, #396]	; (80180c4 <tcp_input+0x528>)
 8017f38:	685b      	ldr	r3, [r3, #4]
 8017f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017f3e:	3301      	adds	r3, #1
 8017f40:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017f42:	429a      	cmp	r2, r3
 8017f44:	d122      	bne.n	8017f8c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8017f46:	69fb      	ldr	r3, [r7, #28]
 8017f48:	8b1a      	ldrh	r2, [r3, #24]
 8017f4a:	4b5d      	ldr	r3, [pc, #372]	; (80180c0 <tcp_input+0x524>)
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	881b      	ldrh	r3, [r3, #0]
 8017f50:	b29b      	uxth	r3, r3
 8017f52:	429a      	cmp	r2, r3
 8017f54:	d11b      	bne.n	8017f8e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8017f56:	69fb      	ldr	r3, [r7, #28]
 8017f58:	8ada      	ldrh	r2, [r3, #22]
 8017f5a:	4b59      	ldr	r3, [pc, #356]	; (80180c0 <tcp_input+0x524>)
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	885b      	ldrh	r3, [r3, #2]
 8017f60:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8017f62:	429a      	cmp	r2, r3
 8017f64:	d113      	bne.n	8017f8e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017f66:	69fb      	ldr	r3, [r7, #28]
 8017f68:	685a      	ldr	r2, [r3, #4]
 8017f6a:	4b56      	ldr	r3, [pc, #344]	; (80180c4 <tcp_input+0x528>)
 8017f6c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8017f6e:	429a      	cmp	r2, r3
 8017f70:	d10d      	bne.n	8017f8e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017f72:	69fb      	ldr	r3, [r7, #28]
 8017f74:	681a      	ldr	r2, [r3, #0]
 8017f76:	4b53      	ldr	r3, [pc, #332]	; (80180c4 <tcp_input+0x528>)
 8017f78:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017f7a:	429a      	cmp	r2, r3
 8017f7c:	d107      	bne.n	8017f8e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8017f7e:	69f8      	ldr	r0, [r7, #28]
 8017f80:	f000 fb52 	bl	8018628 <tcp_timewait_input>
        }
        pbuf_free(p);
 8017f84:	6878      	ldr	r0, [r7, #4]
 8017f86:	f7fd ffd1 	bl	8015f2c <pbuf_free>
        return;
 8017f8a:	e1ee      	b.n	801836a <tcp_input+0x7ce>
        continue;
 8017f8c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f8e:	69fb      	ldr	r3, [r7, #28]
 8017f90:	68db      	ldr	r3, [r3, #12]
 8017f92:	61fb      	str	r3, [r7, #28]
 8017f94:	69fb      	ldr	r3, [r7, #28]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d1bc      	bne.n	8017f14 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017f9e:	4b51      	ldr	r3, [pc, #324]	; (80180e4 <tcp_input+0x548>)
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	617b      	str	r3, [r7, #20]
 8017fa4:	e02a      	b.n	8017ffc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017fa6:	697b      	ldr	r3, [r7, #20]
 8017fa8:	7a1b      	ldrb	r3, [r3, #8]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d00c      	beq.n	8017fc8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017fae:	697b      	ldr	r3, [r7, #20]
 8017fb0:	7a1a      	ldrb	r2, [r3, #8]
 8017fb2:	4b44      	ldr	r3, [pc, #272]	; (80180c4 <tcp_input+0x528>)
 8017fb4:	685b      	ldr	r3, [r3, #4]
 8017fb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017fba:	3301      	adds	r3, #1
 8017fbc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017fbe:	429a      	cmp	r2, r3
 8017fc0:	d002      	beq.n	8017fc8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8017fc2:	697b      	ldr	r3, [r7, #20]
 8017fc4:	61bb      	str	r3, [r7, #24]
        continue;
 8017fc6:	e016      	b.n	8017ff6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8017fc8:	697b      	ldr	r3, [r7, #20]
 8017fca:	8ada      	ldrh	r2, [r3, #22]
 8017fcc:	4b3c      	ldr	r3, [pc, #240]	; (80180c0 <tcp_input+0x524>)
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	885b      	ldrh	r3, [r3, #2]
 8017fd2:	b29b      	uxth	r3, r3
 8017fd4:	429a      	cmp	r2, r3
 8017fd6:	d10c      	bne.n	8017ff2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017fd8:	697b      	ldr	r3, [r7, #20]
 8017fda:	681a      	ldr	r2, [r3, #0]
 8017fdc:	4b39      	ldr	r3, [pc, #228]	; (80180c4 <tcp_input+0x528>)
 8017fde:	695b      	ldr	r3, [r3, #20]
 8017fe0:	429a      	cmp	r2, r3
 8017fe2:	d00f      	beq.n	8018004 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8017fe4:	697b      	ldr	r3, [r7, #20]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d00d      	beq.n	8018006 <tcp_input+0x46a>
 8017fea:	697b      	ldr	r3, [r7, #20]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d009      	beq.n	8018006 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8017ff2:	697b      	ldr	r3, [r7, #20]
 8017ff4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017ff6:	697b      	ldr	r3, [r7, #20]
 8017ff8:	68db      	ldr	r3, [r3, #12]
 8017ffa:	617b      	str	r3, [r7, #20]
 8017ffc:	697b      	ldr	r3, [r7, #20]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d1d1      	bne.n	8017fa6 <tcp_input+0x40a>
 8018002:	e000      	b.n	8018006 <tcp_input+0x46a>
            break;
 8018004:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8018006:	697b      	ldr	r3, [r7, #20]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d014      	beq.n	8018036 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801800c:	69bb      	ldr	r3, [r7, #24]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d00a      	beq.n	8018028 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8018012:	697b      	ldr	r3, [r7, #20]
 8018014:	68da      	ldr	r2, [r3, #12]
 8018016:	69bb      	ldr	r3, [r7, #24]
 8018018:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801801a:	4b32      	ldr	r3, [pc, #200]	; (80180e4 <tcp_input+0x548>)
 801801c:	681a      	ldr	r2, [r3, #0]
 801801e:	697b      	ldr	r3, [r7, #20]
 8018020:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8018022:	4a30      	ldr	r2, [pc, #192]	; (80180e4 <tcp_input+0x548>)
 8018024:	697b      	ldr	r3, [r7, #20]
 8018026:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8018028:	6978      	ldr	r0, [r7, #20]
 801802a:	f000 f9ff 	bl	801842c <tcp_listen_input>
      }
      pbuf_free(p);
 801802e:	6878      	ldr	r0, [r7, #4]
 8018030:	f7fd ff7c 	bl	8015f2c <pbuf_free>
      return;
 8018034:	e199      	b.n	801836a <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8018036:	69fb      	ldr	r3, [r7, #28]
 8018038:	2b00      	cmp	r3, #0
 801803a:	f000 8160 	beq.w	80182fe <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801803e:	4b2a      	ldr	r3, [pc, #168]	; (80180e8 <tcp_input+0x54c>)
 8018040:	2200      	movs	r2, #0
 8018042:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	891a      	ldrh	r2, [r3, #8]
 8018048:	4b27      	ldr	r3, [pc, #156]	; (80180e8 <tcp_input+0x54c>)
 801804a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801804c:	4a26      	ldr	r2, [pc, #152]	; (80180e8 <tcp_input+0x54c>)
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8018052:	4b1b      	ldr	r3, [pc, #108]	; (80180c0 <tcp_input+0x524>)
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	4a24      	ldr	r2, [pc, #144]	; (80180e8 <tcp_input+0x54c>)
 8018058:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801805a:	4b24      	ldr	r3, [pc, #144]	; (80180ec <tcp_input+0x550>)
 801805c:	2200      	movs	r2, #0
 801805e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8018060:	4b23      	ldr	r3, [pc, #140]	; (80180f0 <tcp_input+0x554>)
 8018062:	2200      	movs	r2, #0
 8018064:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8018066:	4b23      	ldr	r3, [pc, #140]	; (80180f4 <tcp_input+0x558>)
 8018068:	2200      	movs	r2, #0
 801806a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801806c:	4b22      	ldr	r3, [pc, #136]	; (80180f8 <tcp_input+0x55c>)
 801806e:	781b      	ldrb	r3, [r3, #0]
 8018070:	f003 0308 	and.w	r3, r3, #8
 8018074:	2b00      	cmp	r3, #0
 8018076:	d006      	beq.n	8018086 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	7b5b      	ldrb	r3, [r3, #13]
 801807c:	f043 0301 	orr.w	r3, r3, #1
 8018080:	b2da      	uxtb	r2, r3
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8018086:	69fb      	ldr	r3, [r7, #28]
 8018088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801808a:	2b00      	cmp	r3, #0
 801808c:	d038      	beq.n	8018100 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801808e:	69f8      	ldr	r0, [r7, #28]
 8018090:	f7ff f940 	bl	8017314 <tcp_process_refused_data>
 8018094:	4603      	mov	r3, r0
 8018096:	f113 0f0d 	cmn.w	r3, #13
 801809a:	d007      	beq.n	80180ac <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801809c:	69fb      	ldr	r3, [r7, #28]
 801809e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d02d      	beq.n	8018100 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80180a4:	4b15      	ldr	r3, [pc, #84]	; (80180fc <tcp_input+0x560>)
 80180a6:	881b      	ldrh	r3, [r3, #0]
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d029      	beq.n	8018100 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80180ac:	69fb      	ldr	r3, [r7, #28]
 80180ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	f040 8104 	bne.w	80182be <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80180b6:	69f8      	ldr	r0, [r7, #28]
 80180b8:	f003 f9ce 	bl	801b458 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80180bc:	e0ff      	b.n	80182be <tcp_input+0x722>
 80180be:	bf00      	nop
 80180c0:	20008fd0 	.word	0x20008fd0
 80180c4:	2000cc24 	.word	0x2000cc24
 80180c8:	08023874 	.word	0x08023874
 80180cc:	080239a0 	.word	0x080239a0
 80180d0:	080238c0 	.word	0x080238c0
 80180d4:	20010358 	.word	0x20010358
 80180d8:	080239cc 	.word	0x080239cc
 80180dc:	20010368 	.word	0x20010368
 80180e0:	080239f8 	.word	0x080239f8
 80180e4:	20010360 	.word	0x20010360
 80180e8:	20008fc0 	.word	0x20008fc0
 80180ec:	20008ff0 	.word	0x20008ff0
 80180f0:	20008fed 	.word	0x20008fed
 80180f4:	20008fe8 	.word	0x20008fe8
 80180f8:	20008fec 	.word	0x20008fec
 80180fc:	20008fea 	.word	0x20008fea
      }
    }
    tcp_input_pcb = pcb;
 8018100:	4a9b      	ldr	r2, [pc, #620]	; (8018370 <tcp_input+0x7d4>)
 8018102:	69fb      	ldr	r3, [r7, #28]
 8018104:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8018106:	69f8      	ldr	r0, [r7, #28]
 8018108:	f000 fb0a 	bl	8018720 <tcp_process>
 801810c:	4603      	mov	r3, r0
 801810e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8018110:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018114:	f113 0f0d 	cmn.w	r3, #13
 8018118:	f000 80d3 	beq.w	80182c2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801811c:	4b95      	ldr	r3, [pc, #596]	; (8018374 <tcp_input+0x7d8>)
 801811e:	781b      	ldrb	r3, [r3, #0]
 8018120:	f003 0308 	and.w	r3, r3, #8
 8018124:	2b00      	cmp	r3, #0
 8018126:	d015      	beq.n	8018154 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8018128:	69fb      	ldr	r3, [r7, #28]
 801812a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801812e:	2b00      	cmp	r3, #0
 8018130:	d008      	beq.n	8018144 <tcp_input+0x5a8>
 8018132:	69fb      	ldr	r3, [r7, #28]
 8018134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018138:	69fa      	ldr	r2, [r7, #28]
 801813a:	6912      	ldr	r2, [r2, #16]
 801813c:	f06f 010d 	mvn.w	r1, #13
 8018140:	4610      	mov	r0, r2
 8018142:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018144:	69f9      	ldr	r1, [r7, #28]
 8018146:	488c      	ldr	r0, [pc, #560]	; (8018378 <tcp_input+0x7dc>)
 8018148:	f7ff fbb0 	bl	80178ac <tcp_pcb_remove>
        tcp_free(pcb);
 801814c:	69f8      	ldr	r0, [r7, #28]
 801814e:	f7fe f9a9 	bl	80164a4 <tcp_free>
 8018152:	e0c1      	b.n	80182d8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8018154:	2300      	movs	r3, #0
 8018156:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8018158:	4b88      	ldr	r3, [pc, #544]	; (801837c <tcp_input+0x7e0>)
 801815a:	881b      	ldrh	r3, [r3, #0]
 801815c:	2b00      	cmp	r3, #0
 801815e:	d01d      	beq.n	801819c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8018160:	4b86      	ldr	r3, [pc, #536]	; (801837c <tcp_input+0x7e0>)
 8018162:	881b      	ldrh	r3, [r3, #0]
 8018164:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8018166:	69fb      	ldr	r3, [r7, #28]
 8018168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801816c:	2b00      	cmp	r3, #0
 801816e:	d00a      	beq.n	8018186 <tcp_input+0x5ea>
 8018170:	69fb      	ldr	r3, [r7, #28]
 8018172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018176:	69fa      	ldr	r2, [r7, #28]
 8018178:	6910      	ldr	r0, [r2, #16]
 801817a:	89fa      	ldrh	r2, [r7, #14]
 801817c:	69f9      	ldr	r1, [r7, #28]
 801817e:	4798      	blx	r3
 8018180:	4603      	mov	r3, r0
 8018182:	74fb      	strb	r3, [r7, #19]
 8018184:	e001      	b.n	801818a <tcp_input+0x5ee>
 8018186:	2300      	movs	r3, #0
 8018188:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801818a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801818e:	f113 0f0d 	cmn.w	r3, #13
 8018192:	f000 8098 	beq.w	80182c6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8018196:	4b79      	ldr	r3, [pc, #484]	; (801837c <tcp_input+0x7e0>)
 8018198:	2200      	movs	r2, #0
 801819a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801819c:	69f8      	ldr	r0, [r7, #28]
 801819e:	f000 f905 	bl	80183ac <tcp_input_delayed_close>
 80181a2:	4603      	mov	r3, r0
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	f040 8090 	bne.w	80182ca <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80181aa:	4b75      	ldr	r3, [pc, #468]	; (8018380 <tcp_input+0x7e4>)
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d041      	beq.n	8018236 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80181b2:	69fb      	ldr	r3, [r7, #28]
 80181b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d006      	beq.n	80181c8 <tcp_input+0x62c>
 80181ba:	4b72      	ldr	r3, [pc, #456]	; (8018384 <tcp_input+0x7e8>)
 80181bc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80181c0:	4971      	ldr	r1, [pc, #452]	; (8018388 <tcp_input+0x7ec>)
 80181c2:	4872      	ldr	r0, [pc, #456]	; (801838c <tcp_input+0x7f0>)
 80181c4:	f009 fa16 	bl	80215f4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80181c8:	69fb      	ldr	r3, [r7, #28]
 80181ca:	8b5b      	ldrh	r3, [r3, #26]
 80181cc:	f003 0310 	and.w	r3, r3, #16
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d008      	beq.n	80181e6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80181d4:	4b6a      	ldr	r3, [pc, #424]	; (8018380 <tcp_input+0x7e4>)
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	4618      	mov	r0, r3
 80181da:	f7fd fea7 	bl	8015f2c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80181de:	69f8      	ldr	r0, [r7, #28]
 80181e0:	f7fe fc40 	bl	8016a64 <tcp_abort>
            goto aborted;
 80181e4:	e078      	b.n	80182d8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80181e6:	69fb      	ldr	r3, [r7, #28]
 80181e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d00c      	beq.n	801820a <tcp_input+0x66e>
 80181f0:	69fb      	ldr	r3, [r7, #28]
 80181f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80181f6:	69fb      	ldr	r3, [r7, #28]
 80181f8:	6918      	ldr	r0, [r3, #16]
 80181fa:	4b61      	ldr	r3, [pc, #388]	; (8018380 <tcp_input+0x7e4>)
 80181fc:	681a      	ldr	r2, [r3, #0]
 80181fe:	2300      	movs	r3, #0
 8018200:	69f9      	ldr	r1, [r7, #28]
 8018202:	47a0      	blx	r4
 8018204:	4603      	mov	r3, r0
 8018206:	74fb      	strb	r3, [r7, #19]
 8018208:	e008      	b.n	801821c <tcp_input+0x680>
 801820a:	4b5d      	ldr	r3, [pc, #372]	; (8018380 <tcp_input+0x7e4>)
 801820c:	681a      	ldr	r2, [r3, #0]
 801820e:	2300      	movs	r3, #0
 8018210:	69f9      	ldr	r1, [r7, #28]
 8018212:	2000      	movs	r0, #0
 8018214:	f7ff f952 	bl	80174bc <tcp_recv_null>
 8018218:	4603      	mov	r3, r0
 801821a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801821c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018220:	f113 0f0d 	cmn.w	r3, #13
 8018224:	d053      	beq.n	80182ce <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8018226:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801822a:	2b00      	cmp	r3, #0
 801822c:	d003      	beq.n	8018236 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801822e:	4b54      	ldr	r3, [pc, #336]	; (8018380 <tcp_input+0x7e4>)
 8018230:	681a      	ldr	r2, [r3, #0]
 8018232:	69fb      	ldr	r3, [r7, #28]
 8018234:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8018236:	4b4f      	ldr	r3, [pc, #316]	; (8018374 <tcp_input+0x7d8>)
 8018238:	781b      	ldrb	r3, [r3, #0]
 801823a:	f003 0320 	and.w	r3, r3, #32
 801823e:	2b00      	cmp	r3, #0
 8018240:	d030      	beq.n	80182a4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8018242:	69fb      	ldr	r3, [r7, #28]
 8018244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018246:	2b00      	cmp	r3, #0
 8018248:	d009      	beq.n	801825e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801824a:	69fb      	ldr	r3, [r7, #28]
 801824c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801824e:	7b5a      	ldrb	r2, [r3, #13]
 8018250:	69fb      	ldr	r3, [r7, #28]
 8018252:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018254:	f042 0220 	orr.w	r2, r2, #32
 8018258:	b2d2      	uxtb	r2, r2
 801825a:	735a      	strb	r2, [r3, #13]
 801825c:	e022      	b.n	80182a4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801825e:	69fb      	ldr	r3, [r7, #28]
 8018260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018262:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018266:	d005      	beq.n	8018274 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8018268:	69fb      	ldr	r3, [r7, #28]
 801826a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801826c:	3301      	adds	r3, #1
 801826e:	b29a      	uxth	r2, r3
 8018270:	69fb      	ldr	r3, [r7, #28]
 8018272:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8018274:	69fb      	ldr	r3, [r7, #28]
 8018276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801827a:	2b00      	cmp	r3, #0
 801827c:	d00b      	beq.n	8018296 <tcp_input+0x6fa>
 801827e:	69fb      	ldr	r3, [r7, #28]
 8018280:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018284:	69fb      	ldr	r3, [r7, #28]
 8018286:	6918      	ldr	r0, [r3, #16]
 8018288:	2300      	movs	r3, #0
 801828a:	2200      	movs	r2, #0
 801828c:	69f9      	ldr	r1, [r7, #28]
 801828e:	47a0      	blx	r4
 8018290:	4603      	mov	r3, r0
 8018292:	74fb      	strb	r3, [r7, #19]
 8018294:	e001      	b.n	801829a <tcp_input+0x6fe>
 8018296:	2300      	movs	r3, #0
 8018298:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801829a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801829e:	f113 0f0d 	cmn.w	r3, #13
 80182a2:	d016      	beq.n	80182d2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80182a4:	4b32      	ldr	r3, [pc, #200]	; (8018370 <tcp_input+0x7d4>)
 80182a6:	2200      	movs	r2, #0
 80182a8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80182aa:	69f8      	ldr	r0, [r7, #28]
 80182ac:	f000 f87e 	bl	80183ac <tcp_input_delayed_close>
 80182b0:	4603      	mov	r3, r0
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d10f      	bne.n	80182d6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80182b6:	69f8      	ldr	r0, [r7, #28]
 80182b8:	f002 fab6 	bl	801a828 <tcp_output>
 80182bc:	e00c      	b.n	80182d8 <tcp_input+0x73c>
        goto aborted;
 80182be:	bf00      	nop
 80182c0:	e00a      	b.n	80182d8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80182c2:	bf00      	nop
 80182c4:	e008      	b.n	80182d8 <tcp_input+0x73c>
              goto aborted;
 80182c6:	bf00      	nop
 80182c8:	e006      	b.n	80182d8 <tcp_input+0x73c>
          goto aborted;
 80182ca:	bf00      	nop
 80182cc:	e004      	b.n	80182d8 <tcp_input+0x73c>
            goto aborted;
 80182ce:	bf00      	nop
 80182d0:	e002      	b.n	80182d8 <tcp_input+0x73c>
              goto aborted;
 80182d2:	bf00      	nop
 80182d4:	e000      	b.n	80182d8 <tcp_input+0x73c>
          goto aborted;
 80182d6:	bf00      	nop
    tcp_input_pcb = NULL;
 80182d8:	4b25      	ldr	r3, [pc, #148]	; (8018370 <tcp_input+0x7d4>)
 80182da:	2200      	movs	r2, #0
 80182dc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80182de:	4b28      	ldr	r3, [pc, #160]	; (8018380 <tcp_input+0x7e4>)
 80182e0:	2200      	movs	r2, #0
 80182e2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80182e4:	4b2a      	ldr	r3, [pc, #168]	; (8018390 <tcp_input+0x7f4>)
 80182e6:	685b      	ldr	r3, [r3, #4]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d03d      	beq.n	8018368 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80182ec:	4b28      	ldr	r3, [pc, #160]	; (8018390 <tcp_input+0x7f4>)
 80182ee:	685b      	ldr	r3, [r3, #4]
 80182f0:	4618      	mov	r0, r3
 80182f2:	f7fd fe1b 	bl	8015f2c <pbuf_free>
      inseg.p = NULL;
 80182f6:	4b26      	ldr	r3, [pc, #152]	; (8018390 <tcp_input+0x7f4>)
 80182f8:	2200      	movs	r2, #0
 80182fa:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80182fc:	e034      	b.n	8018368 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80182fe:	4b25      	ldr	r3, [pc, #148]	; (8018394 <tcp_input+0x7f8>)
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	899b      	ldrh	r3, [r3, #12]
 8018304:	b29b      	uxth	r3, r3
 8018306:	4618      	mov	r0, r3
 8018308:	f7fc fa42 	bl	8014790 <lwip_htons>
 801830c:	4603      	mov	r3, r0
 801830e:	b2db      	uxtb	r3, r3
 8018310:	f003 0304 	and.w	r3, r3, #4
 8018314:	2b00      	cmp	r3, #0
 8018316:	d118      	bne.n	801834a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018318:	4b1f      	ldr	r3, [pc, #124]	; (8018398 <tcp_input+0x7fc>)
 801831a:	6819      	ldr	r1, [r3, #0]
 801831c:	4b1f      	ldr	r3, [pc, #124]	; (801839c <tcp_input+0x800>)
 801831e:	881b      	ldrh	r3, [r3, #0]
 8018320:	461a      	mov	r2, r3
 8018322:	4b1f      	ldr	r3, [pc, #124]	; (80183a0 <tcp_input+0x804>)
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018328:	4b1a      	ldr	r3, [pc, #104]	; (8018394 <tcp_input+0x7f8>)
 801832a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801832c:	885b      	ldrh	r3, [r3, #2]
 801832e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018330:	4a18      	ldr	r2, [pc, #96]	; (8018394 <tcp_input+0x7f8>)
 8018332:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018334:	8812      	ldrh	r2, [r2, #0]
 8018336:	b292      	uxth	r2, r2
 8018338:	9202      	str	r2, [sp, #8]
 801833a:	9301      	str	r3, [sp, #4]
 801833c:	4b19      	ldr	r3, [pc, #100]	; (80183a4 <tcp_input+0x808>)
 801833e:	9300      	str	r3, [sp, #0]
 8018340:	4b19      	ldr	r3, [pc, #100]	; (80183a8 <tcp_input+0x80c>)
 8018342:	4602      	mov	r2, r0
 8018344:	2000      	movs	r0, #0
 8018346:	f003 f835 	bl	801b3b4 <tcp_rst>
    pbuf_free(p);
 801834a:	6878      	ldr	r0, [r7, #4]
 801834c:	f7fd fdee 	bl	8015f2c <pbuf_free>
  return;
 8018350:	e00a      	b.n	8018368 <tcp_input+0x7cc>
    goto dropped;
 8018352:	bf00      	nop
 8018354:	e004      	b.n	8018360 <tcp_input+0x7c4>
dropped:
 8018356:	bf00      	nop
 8018358:	e002      	b.n	8018360 <tcp_input+0x7c4>
      goto dropped;
 801835a:	bf00      	nop
 801835c:	e000      	b.n	8018360 <tcp_input+0x7c4>
      goto dropped;
 801835e:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8018360:	6878      	ldr	r0, [r7, #4]
 8018362:	f7fd fde3 	bl	8015f2c <pbuf_free>
 8018366:	e000      	b.n	801836a <tcp_input+0x7ce>
  return;
 8018368:	bf00      	nop
}
 801836a:	3724      	adds	r7, #36	; 0x24
 801836c:	46bd      	mov	sp, r7
 801836e:	bd90      	pop	{r4, r7, pc}
 8018370:	2001036c 	.word	0x2001036c
 8018374:	20008fed 	.word	0x20008fed
 8018378:	20010358 	.word	0x20010358
 801837c:	20008fe8 	.word	0x20008fe8
 8018380:	20008ff0 	.word	0x20008ff0
 8018384:	08023874 	.word	0x08023874
 8018388:	08023a28 	.word	0x08023a28
 801838c:	080238c0 	.word	0x080238c0
 8018390:	20008fc0 	.word	0x20008fc0
 8018394:	20008fd0 	.word	0x20008fd0
 8018398:	20008fe4 	.word	0x20008fe4
 801839c:	20008fea 	.word	0x20008fea
 80183a0:	20008fe0 	.word	0x20008fe0
 80183a4:	2000cc34 	.word	0x2000cc34
 80183a8:	2000cc38 	.word	0x2000cc38

080183ac <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80183ac:	b580      	push	{r7, lr}
 80183ae:	b082      	sub	sp, #8
 80183b0:	af00      	add	r7, sp, #0
 80183b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d106      	bne.n	80183c8 <tcp_input_delayed_close+0x1c>
 80183ba:	4b17      	ldr	r3, [pc, #92]	; (8018418 <tcp_input_delayed_close+0x6c>)
 80183bc:	f240 225a 	movw	r2, #602	; 0x25a
 80183c0:	4916      	ldr	r1, [pc, #88]	; (801841c <tcp_input_delayed_close+0x70>)
 80183c2:	4817      	ldr	r0, [pc, #92]	; (8018420 <tcp_input_delayed_close+0x74>)
 80183c4:	f009 f916 	bl	80215f4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80183c8:	4b16      	ldr	r3, [pc, #88]	; (8018424 <tcp_input_delayed_close+0x78>)
 80183ca:	781b      	ldrb	r3, [r3, #0]
 80183cc:	f003 0310 	and.w	r3, r3, #16
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d01c      	beq.n	801840e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	8b5b      	ldrh	r3, [r3, #26]
 80183d8:	f003 0310 	and.w	r3, r3, #16
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d10d      	bne.n	80183fc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d008      	beq.n	80183fc <tcp_input_delayed_close+0x50>
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80183f0:	687a      	ldr	r2, [r7, #4]
 80183f2:	6912      	ldr	r2, [r2, #16]
 80183f4:	f06f 010e 	mvn.w	r1, #14
 80183f8:	4610      	mov	r0, r2
 80183fa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80183fc:	6879      	ldr	r1, [r7, #4]
 80183fe:	480a      	ldr	r0, [pc, #40]	; (8018428 <tcp_input_delayed_close+0x7c>)
 8018400:	f7ff fa54 	bl	80178ac <tcp_pcb_remove>
    tcp_free(pcb);
 8018404:	6878      	ldr	r0, [r7, #4]
 8018406:	f7fe f84d 	bl	80164a4 <tcp_free>
    return 1;
 801840a:	2301      	movs	r3, #1
 801840c:	e000      	b.n	8018410 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801840e:	2300      	movs	r3, #0
}
 8018410:	4618      	mov	r0, r3
 8018412:	3708      	adds	r7, #8
 8018414:	46bd      	mov	sp, r7
 8018416:	bd80      	pop	{r7, pc}
 8018418:	08023874 	.word	0x08023874
 801841c:	08023a44 	.word	0x08023a44
 8018420:	080238c0 	.word	0x080238c0
 8018424:	20008fed 	.word	0x20008fed
 8018428:	20010358 	.word	0x20010358

0801842c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801842c:	b590      	push	{r4, r7, lr}
 801842e:	b08b      	sub	sp, #44	; 0x2c
 8018430:	af04      	add	r7, sp, #16
 8018432:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8018434:	4b6f      	ldr	r3, [pc, #444]	; (80185f4 <tcp_listen_input+0x1c8>)
 8018436:	781b      	ldrb	r3, [r3, #0]
 8018438:	f003 0304 	and.w	r3, r3, #4
 801843c:	2b00      	cmp	r3, #0
 801843e:	f040 80d3 	bne.w	80185e8 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d106      	bne.n	8018456 <tcp_listen_input+0x2a>
 8018448:	4b6b      	ldr	r3, [pc, #428]	; (80185f8 <tcp_listen_input+0x1cc>)
 801844a:	f240 2281 	movw	r2, #641	; 0x281
 801844e:	496b      	ldr	r1, [pc, #428]	; (80185fc <tcp_listen_input+0x1d0>)
 8018450:	486b      	ldr	r0, [pc, #428]	; (8018600 <tcp_listen_input+0x1d4>)
 8018452:	f009 f8cf 	bl	80215f4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8018456:	4b67      	ldr	r3, [pc, #412]	; (80185f4 <tcp_listen_input+0x1c8>)
 8018458:	781b      	ldrb	r3, [r3, #0]
 801845a:	f003 0310 	and.w	r3, r3, #16
 801845e:	2b00      	cmp	r3, #0
 8018460:	d019      	beq.n	8018496 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018462:	4b68      	ldr	r3, [pc, #416]	; (8018604 <tcp_listen_input+0x1d8>)
 8018464:	6819      	ldr	r1, [r3, #0]
 8018466:	4b68      	ldr	r3, [pc, #416]	; (8018608 <tcp_listen_input+0x1dc>)
 8018468:	881b      	ldrh	r3, [r3, #0]
 801846a:	461a      	mov	r2, r3
 801846c:	4b67      	ldr	r3, [pc, #412]	; (801860c <tcp_listen_input+0x1e0>)
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018472:	4b67      	ldr	r3, [pc, #412]	; (8018610 <tcp_listen_input+0x1e4>)
 8018474:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018476:	885b      	ldrh	r3, [r3, #2]
 8018478:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801847a:	4a65      	ldr	r2, [pc, #404]	; (8018610 <tcp_listen_input+0x1e4>)
 801847c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801847e:	8812      	ldrh	r2, [r2, #0]
 8018480:	b292      	uxth	r2, r2
 8018482:	9202      	str	r2, [sp, #8]
 8018484:	9301      	str	r3, [sp, #4]
 8018486:	4b63      	ldr	r3, [pc, #396]	; (8018614 <tcp_listen_input+0x1e8>)
 8018488:	9300      	str	r3, [sp, #0]
 801848a:	4b63      	ldr	r3, [pc, #396]	; (8018618 <tcp_listen_input+0x1ec>)
 801848c:	4602      	mov	r2, r0
 801848e:	6878      	ldr	r0, [r7, #4]
 8018490:	f002 ff90 	bl	801b3b4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8018494:	e0aa      	b.n	80185ec <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8018496:	4b57      	ldr	r3, [pc, #348]	; (80185f4 <tcp_listen_input+0x1c8>)
 8018498:	781b      	ldrb	r3, [r3, #0]
 801849a:	f003 0302 	and.w	r3, r3, #2
 801849e:	2b00      	cmp	r3, #0
 80184a0:	f000 80a4 	beq.w	80185ec <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	7d5b      	ldrb	r3, [r3, #21]
 80184a8:	4618      	mov	r0, r3
 80184aa:	f7ff f92b 	bl	8017704 <tcp_alloc>
 80184ae:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80184b0:	697b      	ldr	r3, [r7, #20]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d111      	bne.n	80184da <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	699b      	ldr	r3, [r3, #24]
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d00a      	beq.n	80184d4 <tcp_listen_input+0xa8>
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	699b      	ldr	r3, [r3, #24]
 80184c2:	687a      	ldr	r2, [r7, #4]
 80184c4:	6910      	ldr	r0, [r2, #16]
 80184c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80184ca:	2100      	movs	r1, #0
 80184cc:	4798      	blx	r3
 80184ce:	4603      	mov	r3, r0
 80184d0:	73bb      	strb	r3, [r7, #14]
      return;
 80184d2:	e08c      	b.n	80185ee <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80184d4:	23f0      	movs	r3, #240	; 0xf0
 80184d6:	73bb      	strb	r3, [r7, #14]
      return;
 80184d8:	e089      	b.n	80185ee <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80184da:	4b50      	ldr	r3, [pc, #320]	; (801861c <tcp_listen_input+0x1f0>)
 80184dc:	695a      	ldr	r2, [r3, #20]
 80184de:	697b      	ldr	r3, [r7, #20]
 80184e0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80184e2:	4b4e      	ldr	r3, [pc, #312]	; (801861c <tcp_listen_input+0x1f0>)
 80184e4:	691a      	ldr	r2, [r3, #16]
 80184e6:	697b      	ldr	r3, [r7, #20]
 80184e8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	8ada      	ldrh	r2, [r3, #22]
 80184ee:	697b      	ldr	r3, [r7, #20]
 80184f0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80184f2:	4b47      	ldr	r3, [pc, #284]	; (8018610 <tcp_listen_input+0x1e4>)
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	881b      	ldrh	r3, [r3, #0]
 80184f8:	b29a      	uxth	r2, r3
 80184fa:	697b      	ldr	r3, [r7, #20]
 80184fc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80184fe:	697b      	ldr	r3, [r7, #20]
 8018500:	2203      	movs	r2, #3
 8018502:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8018504:	4b41      	ldr	r3, [pc, #260]	; (801860c <tcp_listen_input+0x1e0>)
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	1c5a      	adds	r2, r3, #1
 801850a:	697b      	ldr	r3, [r7, #20]
 801850c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801850e:	697b      	ldr	r3, [r7, #20]
 8018510:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018512:	697b      	ldr	r3, [r7, #20]
 8018514:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8018516:	6978      	ldr	r0, [r7, #20]
 8018518:	f7ff fa5c 	bl	80179d4 <tcp_next_iss>
 801851c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801851e:	697b      	ldr	r3, [r7, #20]
 8018520:	693a      	ldr	r2, [r7, #16]
 8018522:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8018524:	697b      	ldr	r3, [r7, #20]
 8018526:	693a      	ldr	r2, [r7, #16]
 8018528:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801852a:	697b      	ldr	r3, [r7, #20]
 801852c:	693a      	ldr	r2, [r7, #16]
 801852e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8018530:	697b      	ldr	r3, [r7, #20]
 8018532:	693a      	ldr	r2, [r7, #16]
 8018534:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8018536:	4b35      	ldr	r3, [pc, #212]	; (801860c <tcp_listen_input+0x1e0>)
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	1e5a      	subs	r2, r3, #1
 801853c:	697b      	ldr	r3, [r7, #20]
 801853e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	691a      	ldr	r2, [r3, #16]
 8018544:	697b      	ldr	r3, [r7, #20]
 8018546:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8018548:	697b      	ldr	r3, [r7, #20]
 801854a:	687a      	ldr	r2, [r7, #4]
 801854c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	7a5b      	ldrb	r3, [r3, #9]
 8018552:	f003 030c 	and.w	r3, r3, #12
 8018556:	b2da      	uxtb	r2, r3
 8018558:	697b      	ldr	r3, [r7, #20]
 801855a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	7a1a      	ldrb	r2, [r3, #8]
 8018560:	697b      	ldr	r3, [r7, #20]
 8018562:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8018564:	4b2e      	ldr	r3, [pc, #184]	; (8018620 <tcp_listen_input+0x1f4>)
 8018566:	681a      	ldr	r2, [r3, #0]
 8018568:	697b      	ldr	r3, [r7, #20]
 801856a:	60da      	str	r2, [r3, #12]
 801856c:	4a2c      	ldr	r2, [pc, #176]	; (8018620 <tcp_listen_input+0x1f4>)
 801856e:	697b      	ldr	r3, [r7, #20]
 8018570:	6013      	str	r3, [r2, #0]
 8018572:	f003 f8e1 	bl	801b738 <tcp_timer_needed>
 8018576:	4b2b      	ldr	r3, [pc, #172]	; (8018624 <tcp_listen_input+0x1f8>)
 8018578:	2201      	movs	r2, #1
 801857a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801857c:	6978      	ldr	r0, [r7, #20]
 801857e:	f001 fd8f 	bl	801a0a0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8018582:	4b23      	ldr	r3, [pc, #140]	; (8018610 <tcp_listen_input+0x1e4>)
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	89db      	ldrh	r3, [r3, #14]
 8018588:	b29a      	uxth	r2, r3
 801858a:	697b      	ldr	r3, [r7, #20]
 801858c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018590:	697b      	ldr	r3, [r7, #20]
 8018592:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018596:	697b      	ldr	r3, [r7, #20]
 8018598:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801859c:	697b      	ldr	r3, [r7, #20]
 801859e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80185a0:	697b      	ldr	r3, [r7, #20]
 80185a2:	3304      	adds	r3, #4
 80185a4:	4618      	mov	r0, r3
 80185a6:	f006 fe7d 	bl	801f2a4 <ip4_route>
 80185aa:	4601      	mov	r1, r0
 80185ac:	697b      	ldr	r3, [r7, #20]
 80185ae:	3304      	adds	r3, #4
 80185b0:	461a      	mov	r2, r3
 80185b2:	4620      	mov	r0, r4
 80185b4:	f7ff fa34 	bl	8017a20 <tcp_eff_send_mss_netif>
 80185b8:	4603      	mov	r3, r0
 80185ba:	461a      	mov	r2, r3
 80185bc:	697b      	ldr	r3, [r7, #20]
 80185be:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80185c0:	2112      	movs	r1, #18
 80185c2:	6978      	ldr	r0, [r7, #20]
 80185c4:	f002 f842 	bl	801a64c <tcp_enqueue_flags>
 80185c8:	4603      	mov	r3, r0
 80185ca:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80185cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d004      	beq.n	80185de <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80185d4:	2100      	movs	r1, #0
 80185d6:	6978      	ldr	r0, [r7, #20]
 80185d8:	f7fe f986 	bl	80168e8 <tcp_abandon>
      return;
 80185dc:	e007      	b.n	80185ee <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80185de:	6978      	ldr	r0, [r7, #20]
 80185e0:	f002 f922 	bl	801a828 <tcp_output>
  return;
 80185e4:	bf00      	nop
 80185e6:	e001      	b.n	80185ec <tcp_listen_input+0x1c0>
    return;
 80185e8:	bf00      	nop
 80185ea:	e000      	b.n	80185ee <tcp_listen_input+0x1c2>
  return;
 80185ec:	bf00      	nop
}
 80185ee:	371c      	adds	r7, #28
 80185f0:	46bd      	mov	sp, r7
 80185f2:	bd90      	pop	{r4, r7, pc}
 80185f4:	20008fec 	.word	0x20008fec
 80185f8:	08023874 	.word	0x08023874
 80185fc:	08023a6c 	.word	0x08023a6c
 8018600:	080238c0 	.word	0x080238c0
 8018604:	20008fe4 	.word	0x20008fe4
 8018608:	20008fea 	.word	0x20008fea
 801860c:	20008fe0 	.word	0x20008fe0
 8018610:	20008fd0 	.word	0x20008fd0
 8018614:	2000cc34 	.word	0x2000cc34
 8018618:	2000cc38 	.word	0x2000cc38
 801861c:	2000cc24 	.word	0x2000cc24
 8018620:	20010358 	.word	0x20010358
 8018624:	20010354 	.word	0x20010354

08018628 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8018628:	b580      	push	{r7, lr}
 801862a:	b086      	sub	sp, #24
 801862c:	af04      	add	r7, sp, #16
 801862e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018630:	4b30      	ldr	r3, [pc, #192]	; (80186f4 <tcp_timewait_input+0xcc>)
 8018632:	781b      	ldrb	r3, [r3, #0]
 8018634:	f003 0304 	and.w	r3, r3, #4
 8018638:	2b00      	cmp	r3, #0
 801863a:	d154      	bne.n	80186e6 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d106      	bne.n	8018650 <tcp_timewait_input+0x28>
 8018642:	4b2d      	ldr	r3, [pc, #180]	; (80186f8 <tcp_timewait_input+0xd0>)
 8018644:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018648:	492c      	ldr	r1, [pc, #176]	; (80186fc <tcp_timewait_input+0xd4>)
 801864a:	482d      	ldr	r0, [pc, #180]	; (8018700 <tcp_timewait_input+0xd8>)
 801864c:	f008 ffd2 	bl	80215f4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018650:	4b28      	ldr	r3, [pc, #160]	; (80186f4 <tcp_timewait_input+0xcc>)
 8018652:	781b      	ldrb	r3, [r3, #0]
 8018654:	f003 0302 	and.w	r3, r3, #2
 8018658:	2b00      	cmp	r3, #0
 801865a:	d02a      	beq.n	80186b2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801865c:	4b29      	ldr	r3, [pc, #164]	; (8018704 <tcp_timewait_input+0xdc>)
 801865e:	681a      	ldr	r2, [r3, #0]
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018664:	1ad3      	subs	r3, r2, r3
 8018666:	2b00      	cmp	r3, #0
 8018668:	db2d      	blt.n	80186c6 <tcp_timewait_input+0x9e>
 801866a:	4b26      	ldr	r3, [pc, #152]	; (8018704 <tcp_timewait_input+0xdc>)
 801866c:	681a      	ldr	r2, [r3, #0]
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018672:	6879      	ldr	r1, [r7, #4]
 8018674:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018676:	440b      	add	r3, r1
 8018678:	1ad3      	subs	r3, r2, r3
 801867a:	2b00      	cmp	r3, #0
 801867c:	dc23      	bgt.n	80186c6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801867e:	4b22      	ldr	r3, [pc, #136]	; (8018708 <tcp_timewait_input+0xe0>)
 8018680:	6819      	ldr	r1, [r3, #0]
 8018682:	4b22      	ldr	r3, [pc, #136]	; (801870c <tcp_timewait_input+0xe4>)
 8018684:	881b      	ldrh	r3, [r3, #0]
 8018686:	461a      	mov	r2, r3
 8018688:	4b1e      	ldr	r3, [pc, #120]	; (8018704 <tcp_timewait_input+0xdc>)
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801868e:	4b20      	ldr	r3, [pc, #128]	; (8018710 <tcp_timewait_input+0xe8>)
 8018690:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018692:	885b      	ldrh	r3, [r3, #2]
 8018694:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018696:	4a1e      	ldr	r2, [pc, #120]	; (8018710 <tcp_timewait_input+0xe8>)
 8018698:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801869a:	8812      	ldrh	r2, [r2, #0]
 801869c:	b292      	uxth	r2, r2
 801869e:	9202      	str	r2, [sp, #8]
 80186a0:	9301      	str	r3, [sp, #4]
 80186a2:	4b1c      	ldr	r3, [pc, #112]	; (8018714 <tcp_timewait_input+0xec>)
 80186a4:	9300      	str	r3, [sp, #0]
 80186a6:	4b1c      	ldr	r3, [pc, #112]	; (8018718 <tcp_timewait_input+0xf0>)
 80186a8:	4602      	mov	r2, r0
 80186aa:	6878      	ldr	r0, [r7, #4]
 80186ac:	f002 fe82 	bl	801b3b4 <tcp_rst>
      return;
 80186b0:	e01c      	b.n	80186ec <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 80186b2:	4b10      	ldr	r3, [pc, #64]	; (80186f4 <tcp_timewait_input+0xcc>)
 80186b4:	781b      	ldrb	r3, [r3, #0]
 80186b6:	f003 0301 	and.w	r3, r3, #1
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d003      	beq.n	80186c6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80186be:	4b17      	ldr	r3, [pc, #92]	; (801871c <tcp_timewait_input+0xf4>)
 80186c0:	681a      	ldr	r2, [r3, #0]
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80186c6:	4b11      	ldr	r3, [pc, #68]	; (801870c <tcp_timewait_input+0xe4>)
 80186c8:	881b      	ldrh	r3, [r3, #0]
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d00d      	beq.n	80186ea <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	8b5b      	ldrh	r3, [r3, #26]
 80186d2:	f043 0302 	orr.w	r3, r3, #2
 80186d6:	b29a      	uxth	r2, r3
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80186dc:	6878      	ldr	r0, [r7, #4]
 80186de:	f002 f8a3 	bl	801a828 <tcp_output>
  }
  return;
 80186e2:	bf00      	nop
 80186e4:	e001      	b.n	80186ea <tcp_timewait_input+0xc2>
    return;
 80186e6:	bf00      	nop
 80186e8:	e000      	b.n	80186ec <tcp_timewait_input+0xc4>
  return;
 80186ea:	bf00      	nop
}
 80186ec:	3708      	adds	r7, #8
 80186ee:	46bd      	mov	sp, r7
 80186f0:	bd80      	pop	{r7, pc}
 80186f2:	bf00      	nop
 80186f4:	20008fec 	.word	0x20008fec
 80186f8:	08023874 	.word	0x08023874
 80186fc:	08023a8c 	.word	0x08023a8c
 8018700:	080238c0 	.word	0x080238c0
 8018704:	20008fe0 	.word	0x20008fe0
 8018708:	20008fe4 	.word	0x20008fe4
 801870c:	20008fea 	.word	0x20008fea
 8018710:	20008fd0 	.word	0x20008fd0
 8018714:	2000cc34 	.word	0x2000cc34
 8018718:	2000cc38 	.word	0x2000cc38
 801871c:	2001035c 	.word	0x2001035c

08018720 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8018720:	b590      	push	{r4, r7, lr}
 8018722:	b08d      	sub	sp, #52	; 0x34
 8018724:	af04      	add	r7, sp, #16
 8018726:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018728:	2300      	movs	r3, #0
 801872a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801872c:	2300      	movs	r3, #0
 801872e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d106      	bne.n	8018744 <tcp_process+0x24>
 8018736:	4ba5      	ldr	r3, [pc, #660]	; (80189cc <tcp_process+0x2ac>)
 8018738:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801873c:	49a4      	ldr	r1, [pc, #656]	; (80189d0 <tcp_process+0x2b0>)
 801873e:	48a5      	ldr	r0, [pc, #660]	; (80189d4 <tcp_process+0x2b4>)
 8018740:	f008 ff58 	bl	80215f4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018744:	4ba4      	ldr	r3, [pc, #656]	; (80189d8 <tcp_process+0x2b8>)
 8018746:	781b      	ldrb	r3, [r3, #0]
 8018748:	f003 0304 	and.w	r3, r3, #4
 801874c:	2b00      	cmp	r3, #0
 801874e:	d04e      	beq.n	80187ee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	7d1b      	ldrb	r3, [r3, #20]
 8018754:	2b02      	cmp	r3, #2
 8018756:	d108      	bne.n	801876a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801875c:	4b9f      	ldr	r3, [pc, #636]	; (80189dc <tcp_process+0x2bc>)
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	429a      	cmp	r2, r3
 8018762:	d123      	bne.n	80187ac <tcp_process+0x8c>
        acceptable = 1;
 8018764:	2301      	movs	r3, #1
 8018766:	76fb      	strb	r3, [r7, #27]
 8018768:	e020      	b.n	80187ac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801876e:	4b9c      	ldr	r3, [pc, #624]	; (80189e0 <tcp_process+0x2c0>)
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	429a      	cmp	r2, r3
 8018774:	d102      	bne.n	801877c <tcp_process+0x5c>
        acceptable = 1;
 8018776:	2301      	movs	r3, #1
 8018778:	76fb      	strb	r3, [r7, #27]
 801877a:	e017      	b.n	80187ac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801877c:	4b98      	ldr	r3, [pc, #608]	; (80189e0 <tcp_process+0x2c0>)
 801877e:	681a      	ldr	r2, [r3, #0]
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018784:	1ad3      	subs	r3, r2, r3
 8018786:	2b00      	cmp	r3, #0
 8018788:	db10      	blt.n	80187ac <tcp_process+0x8c>
 801878a:	4b95      	ldr	r3, [pc, #596]	; (80189e0 <tcp_process+0x2c0>)
 801878c:	681a      	ldr	r2, [r3, #0]
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018792:	6879      	ldr	r1, [r7, #4]
 8018794:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018796:	440b      	add	r3, r1
 8018798:	1ad3      	subs	r3, r2, r3
 801879a:	2b00      	cmp	r3, #0
 801879c:	dc06      	bgt.n	80187ac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	8b5b      	ldrh	r3, [r3, #26]
 80187a2:	f043 0302 	orr.w	r3, r3, #2
 80187a6:	b29a      	uxth	r2, r3
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80187ac:	7efb      	ldrb	r3, [r7, #27]
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d01b      	beq.n	80187ea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	7d1b      	ldrb	r3, [r3, #20]
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d106      	bne.n	80187c8 <tcp_process+0xa8>
 80187ba:	4b84      	ldr	r3, [pc, #528]	; (80189cc <tcp_process+0x2ac>)
 80187bc:	f44f 724e 	mov.w	r2, #824	; 0x338
 80187c0:	4988      	ldr	r1, [pc, #544]	; (80189e4 <tcp_process+0x2c4>)
 80187c2:	4884      	ldr	r0, [pc, #528]	; (80189d4 <tcp_process+0x2b4>)
 80187c4:	f008 ff16 	bl	80215f4 <iprintf>
      recv_flags |= TF_RESET;
 80187c8:	4b87      	ldr	r3, [pc, #540]	; (80189e8 <tcp_process+0x2c8>)
 80187ca:	781b      	ldrb	r3, [r3, #0]
 80187cc:	f043 0308 	orr.w	r3, r3, #8
 80187d0:	b2da      	uxtb	r2, r3
 80187d2:	4b85      	ldr	r3, [pc, #532]	; (80189e8 <tcp_process+0x2c8>)
 80187d4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	8b5b      	ldrh	r3, [r3, #26]
 80187da:	f023 0301 	bic.w	r3, r3, #1
 80187de:	b29a      	uxth	r2, r3
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80187e4:	f06f 030d 	mvn.w	r3, #13
 80187e8:	e37a      	b.n	8018ee0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80187ea:	2300      	movs	r3, #0
 80187ec:	e378      	b.n	8018ee0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80187ee:	4b7a      	ldr	r3, [pc, #488]	; (80189d8 <tcp_process+0x2b8>)
 80187f0:	781b      	ldrb	r3, [r3, #0]
 80187f2:	f003 0302 	and.w	r3, r3, #2
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d010      	beq.n	801881c <tcp_process+0xfc>
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	7d1b      	ldrb	r3, [r3, #20]
 80187fe:	2b02      	cmp	r3, #2
 8018800:	d00c      	beq.n	801881c <tcp_process+0xfc>
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	7d1b      	ldrb	r3, [r3, #20]
 8018806:	2b03      	cmp	r3, #3
 8018808:	d008      	beq.n	801881c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	8b5b      	ldrh	r3, [r3, #26]
 801880e:	f043 0302 	orr.w	r3, r3, #2
 8018812:	b29a      	uxth	r2, r3
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8018818:	2300      	movs	r3, #0
 801881a:	e361      	b.n	8018ee0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	8b5b      	ldrh	r3, [r3, #26]
 8018820:	f003 0310 	and.w	r3, r3, #16
 8018824:	2b00      	cmp	r3, #0
 8018826:	d103      	bne.n	8018830 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018828:	4b70      	ldr	r3, [pc, #448]	; (80189ec <tcp_process+0x2cc>)
 801882a:	681a      	ldr	r2, [r3, #0]
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	2200      	movs	r2, #0
 8018834:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	2200      	movs	r2, #0
 801883c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8018840:	6878      	ldr	r0, [r7, #4]
 8018842:	f001 fc2d 	bl	801a0a0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	7d1b      	ldrb	r3, [r3, #20]
 801884a:	3b02      	subs	r3, #2
 801884c:	2b07      	cmp	r3, #7
 801884e:	f200 8337 	bhi.w	8018ec0 <tcp_process+0x7a0>
 8018852:	a201      	add	r2, pc, #4	; (adr r2, 8018858 <tcp_process+0x138>)
 8018854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018858:	08018879 	.word	0x08018879
 801885c:	08018aa9 	.word	0x08018aa9
 8018860:	08018c21 	.word	0x08018c21
 8018864:	08018c4b 	.word	0x08018c4b
 8018868:	08018d6f 	.word	0x08018d6f
 801886c:	08018c21 	.word	0x08018c21
 8018870:	08018dfb 	.word	0x08018dfb
 8018874:	08018e8b 	.word	0x08018e8b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018878:	4b57      	ldr	r3, [pc, #348]	; (80189d8 <tcp_process+0x2b8>)
 801887a:	781b      	ldrb	r3, [r3, #0]
 801887c:	f003 0310 	and.w	r3, r3, #16
 8018880:	2b00      	cmp	r3, #0
 8018882:	f000 80e4 	beq.w	8018a4e <tcp_process+0x32e>
 8018886:	4b54      	ldr	r3, [pc, #336]	; (80189d8 <tcp_process+0x2b8>)
 8018888:	781b      	ldrb	r3, [r3, #0]
 801888a:	f003 0302 	and.w	r3, r3, #2
 801888e:	2b00      	cmp	r3, #0
 8018890:	f000 80dd 	beq.w	8018a4e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018898:	1c5a      	adds	r2, r3, #1
 801889a:	4b50      	ldr	r3, [pc, #320]	; (80189dc <tcp_process+0x2bc>)
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	429a      	cmp	r2, r3
 80188a0:	f040 80d5 	bne.w	8018a4e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80188a4:	4b4e      	ldr	r3, [pc, #312]	; (80189e0 <tcp_process+0x2c0>)
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	1c5a      	adds	r2, r3, #1
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80188b6:	4b49      	ldr	r3, [pc, #292]	; (80189dc <tcp_process+0x2bc>)
 80188b8:	681a      	ldr	r2, [r3, #0]
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80188be:	4b4c      	ldr	r3, [pc, #304]	; (80189f0 <tcp_process+0x2d0>)
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	89db      	ldrh	r3, [r3, #14]
 80188c4:	b29a      	uxth	r2, r3
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80188d8:	4b41      	ldr	r3, [pc, #260]	; (80189e0 <tcp_process+0x2c0>)
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	1e5a      	subs	r2, r3, #1
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	2204      	movs	r2, #4
 80188e6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	3304      	adds	r3, #4
 80188f0:	4618      	mov	r0, r3
 80188f2:	f006 fcd7 	bl	801f2a4 <ip4_route>
 80188f6:	4601      	mov	r1, r0
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	3304      	adds	r3, #4
 80188fc:	461a      	mov	r2, r3
 80188fe:	4620      	mov	r0, r4
 8018900:	f7ff f88e 	bl	8017a20 <tcp_eff_send_mss_netif>
 8018904:	4603      	mov	r3, r0
 8018906:	461a      	mov	r2, r3
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018910:	009a      	lsls	r2, r3, #2
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018916:	005b      	lsls	r3, r3, #1
 8018918:	f241 111c 	movw	r1, #4380	; 0x111c
 801891c:	428b      	cmp	r3, r1
 801891e:	bf38      	it	cc
 8018920:	460b      	movcc	r3, r1
 8018922:	429a      	cmp	r2, r3
 8018924:	d204      	bcs.n	8018930 <tcp_process+0x210>
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801892a:	009b      	lsls	r3, r3, #2
 801892c:	b29b      	uxth	r3, r3
 801892e:	e00d      	b.n	801894c <tcp_process+0x22c>
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018934:	005b      	lsls	r3, r3, #1
 8018936:	f241 121c 	movw	r2, #4380	; 0x111c
 801893a:	4293      	cmp	r3, r2
 801893c:	d904      	bls.n	8018948 <tcp_process+0x228>
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018942:	005b      	lsls	r3, r3, #1
 8018944:	b29b      	uxth	r3, r3
 8018946:	e001      	b.n	801894c <tcp_process+0x22c>
 8018948:	f241 131c 	movw	r3, #4380	; 0x111c
 801894c:	687a      	ldr	r2, [r7, #4]
 801894e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018958:	2b00      	cmp	r3, #0
 801895a:	d106      	bne.n	801896a <tcp_process+0x24a>
 801895c:	4b1b      	ldr	r3, [pc, #108]	; (80189cc <tcp_process+0x2ac>)
 801895e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8018962:	4924      	ldr	r1, [pc, #144]	; (80189f4 <tcp_process+0x2d4>)
 8018964:	481b      	ldr	r0, [pc, #108]	; (80189d4 <tcp_process+0x2b4>)
 8018966:	f008 fe45 	bl	80215f4 <iprintf>
        --pcb->snd_queuelen;
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018970:	3b01      	subs	r3, #1
 8018972:	b29a      	uxth	r2, r3
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801897e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018980:	69fb      	ldr	r3, [r7, #28]
 8018982:	2b00      	cmp	r3, #0
 8018984:	d111      	bne.n	80189aa <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801898a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801898c:	69fb      	ldr	r3, [r7, #28]
 801898e:	2b00      	cmp	r3, #0
 8018990:	d106      	bne.n	80189a0 <tcp_process+0x280>
 8018992:	4b0e      	ldr	r3, [pc, #56]	; (80189cc <tcp_process+0x2ac>)
 8018994:	f44f 725d 	mov.w	r2, #884	; 0x374
 8018998:	4917      	ldr	r1, [pc, #92]	; (80189f8 <tcp_process+0x2d8>)
 801899a:	480e      	ldr	r0, [pc, #56]	; (80189d4 <tcp_process+0x2b4>)
 801899c:	f008 fe2a 	bl	80215f4 <iprintf>
          pcb->unsent = rseg->next;
 80189a0:	69fb      	ldr	r3, [r7, #28]
 80189a2:	681a      	ldr	r2, [r3, #0]
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	66da      	str	r2, [r3, #108]	; 0x6c
 80189a8:	e003      	b.n	80189b2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80189aa:	69fb      	ldr	r3, [r7, #28]
 80189ac:	681a      	ldr	r2, [r3, #0]
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80189b2:	69f8      	ldr	r0, [r7, #28]
 80189b4:	f7fe fd3e 	bl	8017434 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d11d      	bne.n	80189fc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80189c6:	861a      	strh	r2, [r3, #48]	; 0x30
 80189c8:	e01f      	b.n	8018a0a <tcp_process+0x2ea>
 80189ca:	bf00      	nop
 80189cc:	08023874 	.word	0x08023874
 80189d0:	08023aac 	.word	0x08023aac
 80189d4:	080238c0 	.word	0x080238c0
 80189d8:	20008fec 	.word	0x20008fec
 80189dc:	20008fe4 	.word	0x20008fe4
 80189e0:	20008fe0 	.word	0x20008fe0
 80189e4:	08023ac8 	.word	0x08023ac8
 80189e8:	20008fed 	.word	0x20008fed
 80189ec:	2001035c 	.word	0x2001035c
 80189f0:	20008fd0 	.word	0x20008fd0
 80189f4:	08023ae8 	.word	0x08023ae8
 80189f8:	08023b00 	.word	0x08023b00
        } else {
          pcb->rtime = 0;
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	2200      	movs	r2, #0
 8018a00:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	2200      	movs	r2, #0
 8018a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d00a      	beq.n	8018a2a <tcp_process+0x30a>
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018a1a:	687a      	ldr	r2, [r7, #4]
 8018a1c:	6910      	ldr	r0, [r2, #16]
 8018a1e:	2200      	movs	r2, #0
 8018a20:	6879      	ldr	r1, [r7, #4]
 8018a22:	4798      	blx	r3
 8018a24:	4603      	mov	r3, r0
 8018a26:	76bb      	strb	r3, [r7, #26]
 8018a28:	e001      	b.n	8018a2e <tcp_process+0x30e>
 8018a2a:	2300      	movs	r3, #0
 8018a2c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8018a2e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018a32:	f113 0f0d 	cmn.w	r3, #13
 8018a36:	d102      	bne.n	8018a3e <tcp_process+0x31e>
          return ERR_ABRT;
 8018a38:	f06f 030c 	mvn.w	r3, #12
 8018a3c:	e250      	b.n	8018ee0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	8b5b      	ldrh	r3, [r3, #26]
 8018a42:	f043 0302 	orr.w	r3, r3, #2
 8018a46:	b29a      	uxth	r2, r3
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8018a4c:	e23a      	b.n	8018ec4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8018a4e:	4b9d      	ldr	r3, [pc, #628]	; (8018cc4 <tcp_process+0x5a4>)
 8018a50:	781b      	ldrb	r3, [r3, #0]
 8018a52:	f003 0310 	and.w	r3, r3, #16
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	f000 8234 	beq.w	8018ec4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018a5c:	4b9a      	ldr	r3, [pc, #616]	; (8018cc8 <tcp_process+0x5a8>)
 8018a5e:	6819      	ldr	r1, [r3, #0]
 8018a60:	4b9a      	ldr	r3, [pc, #616]	; (8018ccc <tcp_process+0x5ac>)
 8018a62:	881b      	ldrh	r3, [r3, #0]
 8018a64:	461a      	mov	r2, r3
 8018a66:	4b9a      	ldr	r3, [pc, #616]	; (8018cd0 <tcp_process+0x5b0>)
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018a6c:	4b99      	ldr	r3, [pc, #612]	; (8018cd4 <tcp_process+0x5b4>)
 8018a6e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018a70:	885b      	ldrh	r3, [r3, #2]
 8018a72:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018a74:	4a97      	ldr	r2, [pc, #604]	; (8018cd4 <tcp_process+0x5b4>)
 8018a76:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018a78:	8812      	ldrh	r2, [r2, #0]
 8018a7a:	b292      	uxth	r2, r2
 8018a7c:	9202      	str	r2, [sp, #8]
 8018a7e:	9301      	str	r3, [sp, #4]
 8018a80:	4b95      	ldr	r3, [pc, #596]	; (8018cd8 <tcp_process+0x5b8>)
 8018a82:	9300      	str	r3, [sp, #0]
 8018a84:	4b95      	ldr	r3, [pc, #596]	; (8018cdc <tcp_process+0x5bc>)
 8018a86:	4602      	mov	r2, r0
 8018a88:	6878      	ldr	r0, [r7, #4]
 8018a8a:	f002 fc93 	bl	801b3b4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018a94:	2b05      	cmp	r3, #5
 8018a96:	f200 8215 	bhi.w	8018ec4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	2200      	movs	r2, #0
 8018a9e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8018aa0:	6878      	ldr	r0, [r7, #4]
 8018aa2:	f002 fa51 	bl	801af48 <tcp_rexmit_rto>
      break;
 8018aa6:	e20d      	b.n	8018ec4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8018aa8:	4b86      	ldr	r3, [pc, #536]	; (8018cc4 <tcp_process+0x5a4>)
 8018aaa:	781b      	ldrb	r3, [r3, #0]
 8018aac:	f003 0310 	and.w	r3, r3, #16
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	f000 80a1 	beq.w	8018bf8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018ab6:	4b84      	ldr	r3, [pc, #528]	; (8018cc8 <tcp_process+0x5a8>)
 8018ab8:	681a      	ldr	r2, [r3, #0]
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018abe:	1ad3      	subs	r3, r2, r3
 8018ac0:	3b01      	subs	r3, #1
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	db7e      	blt.n	8018bc4 <tcp_process+0x4a4>
 8018ac6:	4b80      	ldr	r3, [pc, #512]	; (8018cc8 <tcp_process+0x5a8>)
 8018ac8:	681a      	ldr	r2, [r3, #0]
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ace:	1ad3      	subs	r3, r2, r3
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	dc77      	bgt.n	8018bc4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	2204      	movs	r2, #4
 8018ad8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d102      	bne.n	8018ae8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8018ae2:	23fa      	movs	r3, #250	; 0xfa
 8018ae4:	76bb      	strb	r3, [r7, #26]
 8018ae6:	e01d      	b.n	8018b24 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018aec:	699b      	ldr	r3, [r3, #24]
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d106      	bne.n	8018b00 <tcp_process+0x3e0>
 8018af2:	4b7b      	ldr	r3, [pc, #492]	; (8018ce0 <tcp_process+0x5c0>)
 8018af4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8018af8:	497a      	ldr	r1, [pc, #488]	; (8018ce4 <tcp_process+0x5c4>)
 8018afa:	487b      	ldr	r0, [pc, #492]	; (8018ce8 <tcp_process+0x5c8>)
 8018afc:	f008 fd7a 	bl	80215f4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018b04:	699b      	ldr	r3, [r3, #24]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d00a      	beq.n	8018b20 <tcp_process+0x400>
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018b0e:	699b      	ldr	r3, [r3, #24]
 8018b10:	687a      	ldr	r2, [r7, #4]
 8018b12:	6910      	ldr	r0, [r2, #16]
 8018b14:	2200      	movs	r2, #0
 8018b16:	6879      	ldr	r1, [r7, #4]
 8018b18:	4798      	blx	r3
 8018b1a:	4603      	mov	r3, r0
 8018b1c:	76bb      	strb	r3, [r7, #26]
 8018b1e:	e001      	b.n	8018b24 <tcp_process+0x404>
 8018b20:	23f0      	movs	r3, #240	; 0xf0
 8018b22:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8018b24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d00a      	beq.n	8018b42 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8018b2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018b30:	f113 0f0d 	cmn.w	r3, #13
 8018b34:	d002      	beq.n	8018b3c <tcp_process+0x41c>
              tcp_abort(pcb);
 8018b36:	6878      	ldr	r0, [r7, #4]
 8018b38:	f7fd ff94 	bl	8016a64 <tcp_abort>
            }
            return ERR_ABRT;
 8018b3c:	f06f 030c 	mvn.w	r3, #12
 8018b40:	e1ce      	b.n	8018ee0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8018b42:	6878      	ldr	r0, [r7, #4]
 8018b44:	f000 fae0 	bl	8019108 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8018b48:	4b68      	ldr	r3, [pc, #416]	; (8018cec <tcp_process+0x5cc>)
 8018b4a:	881b      	ldrh	r3, [r3, #0]
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d005      	beq.n	8018b5c <tcp_process+0x43c>
            recv_acked--;
 8018b50:	4b66      	ldr	r3, [pc, #408]	; (8018cec <tcp_process+0x5cc>)
 8018b52:	881b      	ldrh	r3, [r3, #0]
 8018b54:	3b01      	subs	r3, #1
 8018b56:	b29a      	uxth	r2, r3
 8018b58:	4b64      	ldr	r3, [pc, #400]	; (8018cec <tcp_process+0x5cc>)
 8018b5a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018b60:	009a      	lsls	r2, r3, #2
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018b66:	005b      	lsls	r3, r3, #1
 8018b68:	f241 111c 	movw	r1, #4380	; 0x111c
 8018b6c:	428b      	cmp	r3, r1
 8018b6e:	bf38      	it	cc
 8018b70:	460b      	movcc	r3, r1
 8018b72:	429a      	cmp	r2, r3
 8018b74:	d204      	bcs.n	8018b80 <tcp_process+0x460>
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018b7a:	009b      	lsls	r3, r3, #2
 8018b7c:	b29b      	uxth	r3, r3
 8018b7e:	e00d      	b.n	8018b9c <tcp_process+0x47c>
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018b84:	005b      	lsls	r3, r3, #1
 8018b86:	f241 121c 	movw	r2, #4380	; 0x111c
 8018b8a:	4293      	cmp	r3, r2
 8018b8c:	d904      	bls.n	8018b98 <tcp_process+0x478>
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018b92:	005b      	lsls	r3, r3, #1
 8018b94:	b29b      	uxth	r3, r3
 8018b96:	e001      	b.n	8018b9c <tcp_process+0x47c>
 8018b98:	f241 131c 	movw	r3, #4380	; 0x111c
 8018b9c:	687a      	ldr	r2, [r7, #4]
 8018b9e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8018ba2:	4b53      	ldr	r3, [pc, #332]	; (8018cf0 <tcp_process+0x5d0>)
 8018ba4:	781b      	ldrb	r3, [r3, #0]
 8018ba6:	f003 0320 	and.w	r3, r3, #32
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d037      	beq.n	8018c1e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	8b5b      	ldrh	r3, [r3, #26]
 8018bb2:	f043 0302 	orr.w	r3, r3, #2
 8018bb6:	b29a      	uxth	r2, r3
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	2207      	movs	r2, #7
 8018bc0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8018bc2:	e02c      	b.n	8018c1e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018bc4:	4b40      	ldr	r3, [pc, #256]	; (8018cc8 <tcp_process+0x5a8>)
 8018bc6:	6819      	ldr	r1, [r3, #0]
 8018bc8:	4b40      	ldr	r3, [pc, #256]	; (8018ccc <tcp_process+0x5ac>)
 8018bca:	881b      	ldrh	r3, [r3, #0]
 8018bcc:	461a      	mov	r2, r3
 8018bce:	4b40      	ldr	r3, [pc, #256]	; (8018cd0 <tcp_process+0x5b0>)
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018bd4:	4b3f      	ldr	r3, [pc, #252]	; (8018cd4 <tcp_process+0x5b4>)
 8018bd6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018bd8:	885b      	ldrh	r3, [r3, #2]
 8018bda:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018bdc:	4a3d      	ldr	r2, [pc, #244]	; (8018cd4 <tcp_process+0x5b4>)
 8018bde:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018be0:	8812      	ldrh	r2, [r2, #0]
 8018be2:	b292      	uxth	r2, r2
 8018be4:	9202      	str	r2, [sp, #8]
 8018be6:	9301      	str	r3, [sp, #4]
 8018be8:	4b3b      	ldr	r3, [pc, #236]	; (8018cd8 <tcp_process+0x5b8>)
 8018bea:	9300      	str	r3, [sp, #0]
 8018bec:	4b3b      	ldr	r3, [pc, #236]	; (8018cdc <tcp_process+0x5bc>)
 8018bee:	4602      	mov	r2, r0
 8018bf0:	6878      	ldr	r0, [r7, #4]
 8018bf2:	f002 fbdf 	bl	801b3b4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8018bf6:	e167      	b.n	8018ec8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8018bf8:	4b32      	ldr	r3, [pc, #200]	; (8018cc4 <tcp_process+0x5a4>)
 8018bfa:	781b      	ldrb	r3, [r3, #0]
 8018bfc:	f003 0302 	and.w	r3, r3, #2
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	f000 8161 	beq.w	8018ec8 <tcp_process+0x7a8>
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c0a:	1e5a      	subs	r2, r3, #1
 8018c0c:	4b30      	ldr	r3, [pc, #192]	; (8018cd0 <tcp_process+0x5b0>)
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	429a      	cmp	r2, r3
 8018c12:	f040 8159 	bne.w	8018ec8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8018c16:	6878      	ldr	r0, [r7, #4]
 8018c18:	f002 f9b8 	bl	801af8c <tcp_rexmit>
      break;
 8018c1c:	e154      	b.n	8018ec8 <tcp_process+0x7a8>
 8018c1e:	e153      	b.n	8018ec8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8018c20:	6878      	ldr	r0, [r7, #4]
 8018c22:	f000 fa71 	bl	8019108 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8018c26:	4b32      	ldr	r3, [pc, #200]	; (8018cf0 <tcp_process+0x5d0>)
 8018c28:	781b      	ldrb	r3, [r3, #0]
 8018c2a:	f003 0320 	and.w	r3, r3, #32
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	f000 814c 	beq.w	8018ecc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	8b5b      	ldrh	r3, [r3, #26]
 8018c38:	f043 0302 	orr.w	r3, r3, #2
 8018c3c:	b29a      	uxth	r2, r3
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	2207      	movs	r2, #7
 8018c46:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018c48:	e140      	b.n	8018ecc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8018c4a:	6878      	ldr	r0, [r7, #4]
 8018c4c:	f000 fa5c 	bl	8019108 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018c50:	4b27      	ldr	r3, [pc, #156]	; (8018cf0 <tcp_process+0x5d0>)
 8018c52:	781b      	ldrb	r3, [r3, #0]
 8018c54:	f003 0320 	and.w	r3, r3, #32
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d071      	beq.n	8018d40 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018c5c:	4b19      	ldr	r3, [pc, #100]	; (8018cc4 <tcp_process+0x5a4>)
 8018c5e:	781b      	ldrb	r3, [r3, #0]
 8018c60:	f003 0310 	and.w	r3, r3, #16
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d060      	beq.n	8018d2a <tcp_process+0x60a>
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018c6c:	4b16      	ldr	r3, [pc, #88]	; (8018cc8 <tcp_process+0x5a8>)
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	429a      	cmp	r2, r3
 8018c72:	d15a      	bne.n	8018d2a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d156      	bne.n	8018d2a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	8b5b      	ldrh	r3, [r3, #26]
 8018c80:	f043 0302 	orr.w	r3, r3, #2
 8018c84:	b29a      	uxth	r2, r3
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8018c8a:	6878      	ldr	r0, [r7, #4]
 8018c8c:	f7fe fdbe 	bl	801780c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8018c90:	4b18      	ldr	r3, [pc, #96]	; (8018cf4 <tcp_process+0x5d4>)
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	687a      	ldr	r2, [r7, #4]
 8018c96:	429a      	cmp	r2, r3
 8018c98:	d105      	bne.n	8018ca6 <tcp_process+0x586>
 8018c9a:	4b16      	ldr	r3, [pc, #88]	; (8018cf4 <tcp_process+0x5d4>)
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	68db      	ldr	r3, [r3, #12]
 8018ca0:	4a14      	ldr	r2, [pc, #80]	; (8018cf4 <tcp_process+0x5d4>)
 8018ca2:	6013      	str	r3, [r2, #0]
 8018ca4:	e02e      	b.n	8018d04 <tcp_process+0x5e4>
 8018ca6:	4b13      	ldr	r3, [pc, #76]	; (8018cf4 <tcp_process+0x5d4>)
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	617b      	str	r3, [r7, #20]
 8018cac:	e027      	b.n	8018cfe <tcp_process+0x5de>
 8018cae:	697b      	ldr	r3, [r7, #20]
 8018cb0:	68db      	ldr	r3, [r3, #12]
 8018cb2:	687a      	ldr	r2, [r7, #4]
 8018cb4:	429a      	cmp	r2, r3
 8018cb6:	d11f      	bne.n	8018cf8 <tcp_process+0x5d8>
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	68da      	ldr	r2, [r3, #12]
 8018cbc:	697b      	ldr	r3, [r7, #20]
 8018cbe:	60da      	str	r2, [r3, #12]
 8018cc0:	e020      	b.n	8018d04 <tcp_process+0x5e4>
 8018cc2:	bf00      	nop
 8018cc4:	20008fec 	.word	0x20008fec
 8018cc8:	20008fe4 	.word	0x20008fe4
 8018ccc:	20008fea 	.word	0x20008fea
 8018cd0:	20008fe0 	.word	0x20008fe0
 8018cd4:	20008fd0 	.word	0x20008fd0
 8018cd8:	2000cc34 	.word	0x2000cc34
 8018cdc:	2000cc38 	.word	0x2000cc38
 8018ce0:	08023874 	.word	0x08023874
 8018ce4:	08023b14 	.word	0x08023b14
 8018ce8:	080238c0 	.word	0x080238c0
 8018cec:	20008fe8 	.word	0x20008fe8
 8018cf0:	20008fed 	.word	0x20008fed
 8018cf4:	20010358 	.word	0x20010358
 8018cf8:	697b      	ldr	r3, [r7, #20]
 8018cfa:	68db      	ldr	r3, [r3, #12]
 8018cfc:	617b      	str	r3, [r7, #20]
 8018cfe:	697b      	ldr	r3, [r7, #20]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d1d4      	bne.n	8018cae <tcp_process+0x58e>
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	2200      	movs	r2, #0
 8018d08:	60da      	str	r2, [r3, #12]
 8018d0a:	4b77      	ldr	r3, [pc, #476]	; (8018ee8 <tcp_process+0x7c8>)
 8018d0c:	2201      	movs	r2, #1
 8018d0e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	220a      	movs	r2, #10
 8018d14:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8018d16:	4b75      	ldr	r3, [pc, #468]	; (8018eec <tcp_process+0x7cc>)
 8018d18:	681a      	ldr	r2, [r3, #0]
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	60da      	str	r2, [r3, #12]
 8018d1e:	4a73      	ldr	r2, [pc, #460]	; (8018eec <tcp_process+0x7cc>)
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	6013      	str	r3, [r2, #0]
 8018d24:	f002 fd08 	bl	801b738 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8018d28:	e0d2      	b.n	8018ed0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	8b5b      	ldrh	r3, [r3, #26]
 8018d2e:	f043 0302 	orr.w	r3, r3, #2
 8018d32:	b29a      	uxth	r2, r3
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	2208      	movs	r2, #8
 8018d3c:	751a      	strb	r2, [r3, #20]
      break;
 8018d3e:	e0c7      	b.n	8018ed0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018d40:	4b6b      	ldr	r3, [pc, #428]	; (8018ef0 <tcp_process+0x7d0>)
 8018d42:	781b      	ldrb	r3, [r3, #0]
 8018d44:	f003 0310 	and.w	r3, r3, #16
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	f000 80c1 	beq.w	8018ed0 <tcp_process+0x7b0>
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018d52:	4b68      	ldr	r3, [pc, #416]	; (8018ef4 <tcp_process+0x7d4>)
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	429a      	cmp	r2, r3
 8018d58:	f040 80ba 	bne.w	8018ed0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	f040 80b5 	bne.w	8018ed0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	2206      	movs	r2, #6
 8018d6a:	751a      	strb	r2, [r3, #20]
      break;
 8018d6c:	e0b0      	b.n	8018ed0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8018d6e:	6878      	ldr	r0, [r7, #4]
 8018d70:	f000 f9ca 	bl	8019108 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018d74:	4b60      	ldr	r3, [pc, #384]	; (8018ef8 <tcp_process+0x7d8>)
 8018d76:	781b      	ldrb	r3, [r3, #0]
 8018d78:	f003 0320 	and.w	r3, r3, #32
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	f000 80a9 	beq.w	8018ed4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	8b5b      	ldrh	r3, [r3, #26]
 8018d86:	f043 0302 	orr.w	r3, r3, #2
 8018d8a:	b29a      	uxth	r2, r3
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8018d90:	6878      	ldr	r0, [r7, #4]
 8018d92:	f7fe fd3b 	bl	801780c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018d96:	4b59      	ldr	r3, [pc, #356]	; (8018efc <tcp_process+0x7dc>)
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	687a      	ldr	r2, [r7, #4]
 8018d9c:	429a      	cmp	r2, r3
 8018d9e:	d105      	bne.n	8018dac <tcp_process+0x68c>
 8018da0:	4b56      	ldr	r3, [pc, #344]	; (8018efc <tcp_process+0x7dc>)
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	68db      	ldr	r3, [r3, #12]
 8018da6:	4a55      	ldr	r2, [pc, #340]	; (8018efc <tcp_process+0x7dc>)
 8018da8:	6013      	str	r3, [r2, #0]
 8018daa:	e013      	b.n	8018dd4 <tcp_process+0x6b4>
 8018dac:	4b53      	ldr	r3, [pc, #332]	; (8018efc <tcp_process+0x7dc>)
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	613b      	str	r3, [r7, #16]
 8018db2:	e00c      	b.n	8018dce <tcp_process+0x6ae>
 8018db4:	693b      	ldr	r3, [r7, #16]
 8018db6:	68db      	ldr	r3, [r3, #12]
 8018db8:	687a      	ldr	r2, [r7, #4]
 8018dba:	429a      	cmp	r2, r3
 8018dbc:	d104      	bne.n	8018dc8 <tcp_process+0x6a8>
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	68da      	ldr	r2, [r3, #12]
 8018dc2:	693b      	ldr	r3, [r7, #16]
 8018dc4:	60da      	str	r2, [r3, #12]
 8018dc6:	e005      	b.n	8018dd4 <tcp_process+0x6b4>
 8018dc8:	693b      	ldr	r3, [r7, #16]
 8018dca:	68db      	ldr	r3, [r3, #12]
 8018dcc:	613b      	str	r3, [r7, #16]
 8018dce:	693b      	ldr	r3, [r7, #16]
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d1ef      	bne.n	8018db4 <tcp_process+0x694>
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	2200      	movs	r2, #0
 8018dd8:	60da      	str	r2, [r3, #12]
 8018dda:	4b43      	ldr	r3, [pc, #268]	; (8018ee8 <tcp_process+0x7c8>)
 8018ddc:	2201      	movs	r2, #1
 8018dde:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	220a      	movs	r2, #10
 8018de4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018de6:	4b41      	ldr	r3, [pc, #260]	; (8018eec <tcp_process+0x7cc>)
 8018de8:	681a      	ldr	r2, [r3, #0]
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	60da      	str	r2, [r3, #12]
 8018dee:	4a3f      	ldr	r2, [pc, #252]	; (8018eec <tcp_process+0x7cc>)
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	6013      	str	r3, [r2, #0]
 8018df4:	f002 fca0 	bl	801b738 <tcp_timer_needed>
      }
      break;
 8018df8:	e06c      	b.n	8018ed4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8018dfa:	6878      	ldr	r0, [r7, #4]
 8018dfc:	f000 f984 	bl	8019108 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018e00:	4b3b      	ldr	r3, [pc, #236]	; (8018ef0 <tcp_process+0x7d0>)
 8018e02:	781b      	ldrb	r3, [r3, #0]
 8018e04:	f003 0310 	and.w	r3, r3, #16
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d065      	beq.n	8018ed8 <tcp_process+0x7b8>
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018e10:	4b38      	ldr	r3, [pc, #224]	; (8018ef4 <tcp_process+0x7d4>)
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	429a      	cmp	r2, r3
 8018e16:	d15f      	bne.n	8018ed8 <tcp_process+0x7b8>
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d15b      	bne.n	8018ed8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8018e20:	6878      	ldr	r0, [r7, #4]
 8018e22:	f7fe fcf3 	bl	801780c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018e26:	4b35      	ldr	r3, [pc, #212]	; (8018efc <tcp_process+0x7dc>)
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	687a      	ldr	r2, [r7, #4]
 8018e2c:	429a      	cmp	r2, r3
 8018e2e:	d105      	bne.n	8018e3c <tcp_process+0x71c>
 8018e30:	4b32      	ldr	r3, [pc, #200]	; (8018efc <tcp_process+0x7dc>)
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	68db      	ldr	r3, [r3, #12]
 8018e36:	4a31      	ldr	r2, [pc, #196]	; (8018efc <tcp_process+0x7dc>)
 8018e38:	6013      	str	r3, [r2, #0]
 8018e3a:	e013      	b.n	8018e64 <tcp_process+0x744>
 8018e3c:	4b2f      	ldr	r3, [pc, #188]	; (8018efc <tcp_process+0x7dc>)
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	60fb      	str	r3, [r7, #12]
 8018e42:	e00c      	b.n	8018e5e <tcp_process+0x73e>
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	68db      	ldr	r3, [r3, #12]
 8018e48:	687a      	ldr	r2, [r7, #4]
 8018e4a:	429a      	cmp	r2, r3
 8018e4c:	d104      	bne.n	8018e58 <tcp_process+0x738>
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	68da      	ldr	r2, [r3, #12]
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	60da      	str	r2, [r3, #12]
 8018e56:	e005      	b.n	8018e64 <tcp_process+0x744>
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	68db      	ldr	r3, [r3, #12]
 8018e5c:	60fb      	str	r3, [r7, #12]
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d1ef      	bne.n	8018e44 <tcp_process+0x724>
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	2200      	movs	r2, #0
 8018e68:	60da      	str	r2, [r3, #12]
 8018e6a:	4b1f      	ldr	r3, [pc, #124]	; (8018ee8 <tcp_process+0x7c8>)
 8018e6c:	2201      	movs	r2, #1
 8018e6e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	220a      	movs	r2, #10
 8018e74:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018e76:	4b1d      	ldr	r3, [pc, #116]	; (8018eec <tcp_process+0x7cc>)
 8018e78:	681a      	ldr	r2, [r3, #0]
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	60da      	str	r2, [r3, #12]
 8018e7e:	4a1b      	ldr	r2, [pc, #108]	; (8018eec <tcp_process+0x7cc>)
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	6013      	str	r3, [r2, #0]
 8018e84:	f002 fc58 	bl	801b738 <tcp_timer_needed>
      }
      break;
 8018e88:	e026      	b.n	8018ed8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8018e8a:	6878      	ldr	r0, [r7, #4]
 8018e8c:	f000 f93c 	bl	8019108 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018e90:	4b17      	ldr	r3, [pc, #92]	; (8018ef0 <tcp_process+0x7d0>)
 8018e92:	781b      	ldrb	r3, [r3, #0]
 8018e94:	f003 0310 	and.w	r3, r3, #16
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d01f      	beq.n	8018edc <tcp_process+0x7bc>
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018ea0:	4b14      	ldr	r3, [pc, #80]	; (8018ef4 <tcp_process+0x7d4>)
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	429a      	cmp	r2, r3
 8018ea6:	d119      	bne.n	8018edc <tcp_process+0x7bc>
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d115      	bne.n	8018edc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8018eb0:	4b11      	ldr	r3, [pc, #68]	; (8018ef8 <tcp_process+0x7d8>)
 8018eb2:	781b      	ldrb	r3, [r3, #0]
 8018eb4:	f043 0310 	orr.w	r3, r3, #16
 8018eb8:	b2da      	uxtb	r2, r3
 8018eba:	4b0f      	ldr	r3, [pc, #60]	; (8018ef8 <tcp_process+0x7d8>)
 8018ebc:	701a      	strb	r2, [r3, #0]
      }
      break;
 8018ebe:	e00d      	b.n	8018edc <tcp_process+0x7bc>
    default:
      break;
 8018ec0:	bf00      	nop
 8018ec2:	e00c      	b.n	8018ede <tcp_process+0x7be>
      break;
 8018ec4:	bf00      	nop
 8018ec6:	e00a      	b.n	8018ede <tcp_process+0x7be>
      break;
 8018ec8:	bf00      	nop
 8018eca:	e008      	b.n	8018ede <tcp_process+0x7be>
      break;
 8018ecc:	bf00      	nop
 8018ece:	e006      	b.n	8018ede <tcp_process+0x7be>
      break;
 8018ed0:	bf00      	nop
 8018ed2:	e004      	b.n	8018ede <tcp_process+0x7be>
      break;
 8018ed4:	bf00      	nop
 8018ed6:	e002      	b.n	8018ede <tcp_process+0x7be>
      break;
 8018ed8:	bf00      	nop
 8018eda:	e000      	b.n	8018ede <tcp_process+0x7be>
      break;
 8018edc:	bf00      	nop
  }
  return ERR_OK;
 8018ede:	2300      	movs	r3, #0
}
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	3724      	adds	r7, #36	; 0x24
 8018ee4:	46bd      	mov	sp, r7
 8018ee6:	bd90      	pop	{r4, r7, pc}
 8018ee8:	20010354 	.word	0x20010354
 8018eec:	20010368 	.word	0x20010368
 8018ef0:	20008fec 	.word	0x20008fec
 8018ef4:	20008fe4 	.word	0x20008fe4
 8018ef8:	20008fed 	.word	0x20008fed
 8018efc:	20010358 	.word	0x20010358

08018f00 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8018f00:	b590      	push	{r4, r7, lr}
 8018f02:	b085      	sub	sp, #20
 8018f04:	af00      	add	r7, sp, #0
 8018f06:	6078      	str	r0, [r7, #4]
 8018f08:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d106      	bne.n	8018f1e <tcp_oos_insert_segment+0x1e>
 8018f10:	4b3b      	ldr	r3, [pc, #236]	; (8019000 <tcp_oos_insert_segment+0x100>)
 8018f12:	f240 421f 	movw	r2, #1055	; 0x41f
 8018f16:	493b      	ldr	r1, [pc, #236]	; (8019004 <tcp_oos_insert_segment+0x104>)
 8018f18:	483b      	ldr	r0, [pc, #236]	; (8019008 <tcp_oos_insert_segment+0x108>)
 8018f1a:	f008 fb6b 	bl	80215f4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	68db      	ldr	r3, [r3, #12]
 8018f22:	899b      	ldrh	r3, [r3, #12]
 8018f24:	b29b      	uxth	r3, r3
 8018f26:	4618      	mov	r0, r3
 8018f28:	f7fb fc32 	bl	8014790 <lwip_htons>
 8018f2c:	4603      	mov	r3, r0
 8018f2e:	b2db      	uxtb	r3, r3
 8018f30:	f003 0301 	and.w	r3, r3, #1
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d028      	beq.n	8018f8a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8018f38:	6838      	ldr	r0, [r7, #0]
 8018f3a:	f7fe fa67 	bl	801740c <tcp_segs_free>
    next = NULL;
 8018f3e:	2300      	movs	r3, #0
 8018f40:	603b      	str	r3, [r7, #0]
 8018f42:	e056      	b.n	8018ff2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018f44:	683b      	ldr	r3, [r7, #0]
 8018f46:	68db      	ldr	r3, [r3, #12]
 8018f48:	899b      	ldrh	r3, [r3, #12]
 8018f4a:	b29b      	uxth	r3, r3
 8018f4c:	4618      	mov	r0, r3
 8018f4e:	f7fb fc1f 	bl	8014790 <lwip_htons>
 8018f52:	4603      	mov	r3, r0
 8018f54:	b2db      	uxtb	r3, r3
 8018f56:	f003 0301 	and.w	r3, r3, #1
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d00d      	beq.n	8018f7a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	68db      	ldr	r3, [r3, #12]
 8018f62:	899b      	ldrh	r3, [r3, #12]
 8018f64:	b29c      	uxth	r4, r3
 8018f66:	2001      	movs	r0, #1
 8018f68:	f7fb fc12 	bl	8014790 <lwip_htons>
 8018f6c:	4603      	mov	r3, r0
 8018f6e:	461a      	mov	r2, r3
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	68db      	ldr	r3, [r3, #12]
 8018f74:	4322      	orrs	r2, r4
 8018f76:	b292      	uxth	r2, r2
 8018f78:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8018f7a:	683b      	ldr	r3, [r7, #0]
 8018f7c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8018f7e:	683b      	ldr	r3, [r7, #0]
 8018f80:	681b      	ldr	r3, [r3, #0]
 8018f82:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8018f84:	68f8      	ldr	r0, [r7, #12]
 8018f86:	f7fe fa55 	bl	8017434 <tcp_seg_free>
    while (next &&
 8018f8a:	683b      	ldr	r3, [r7, #0]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d00e      	beq.n	8018fae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	891b      	ldrh	r3, [r3, #8]
 8018f94:	461a      	mov	r2, r3
 8018f96:	4b1d      	ldr	r3, [pc, #116]	; (801900c <tcp_oos_insert_segment+0x10c>)
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	441a      	add	r2, r3
 8018f9c:	683b      	ldr	r3, [r7, #0]
 8018f9e:	68db      	ldr	r3, [r3, #12]
 8018fa0:	685b      	ldr	r3, [r3, #4]
 8018fa2:	6839      	ldr	r1, [r7, #0]
 8018fa4:	8909      	ldrh	r1, [r1, #8]
 8018fa6:	440b      	add	r3, r1
 8018fa8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	daca      	bge.n	8018f44 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8018fae:	683b      	ldr	r3, [r7, #0]
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d01e      	beq.n	8018ff2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	891b      	ldrh	r3, [r3, #8]
 8018fb8:	461a      	mov	r2, r3
 8018fba:	4b14      	ldr	r3, [pc, #80]	; (801900c <tcp_oos_insert_segment+0x10c>)
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	441a      	add	r2, r3
 8018fc0:	683b      	ldr	r3, [r7, #0]
 8018fc2:	68db      	ldr	r3, [r3, #12]
 8018fc4:	685b      	ldr	r3, [r3, #4]
 8018fc6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	dd12      	ble.n	8018ff2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8018fcc:	683b      	ldr	r3, [r7, #0]
 8018fce:	68db      	ldr	r3, [r3, #12]
 8018fd0:	685b      	ldr	r3, [r3, #4]
 8018fd2:	b29a      	uxth	r2, r3
 8018fd4:	4b0d      	ldr	r3, [pc, #52]	; (801900c <tcp_oos_insert_segment+0x10c>)
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	b29b      	uxth	r3, r3
 8018fda:	1ad3      	subs	r3, r2, r3
 8018fdc:	b29a      	uxth	r2, r3
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	685a      	ldr	r2, [r3, #4]
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	891b      	ldrh	r3, [r3, #8]
 8018fea:	4619      	mov	r1, r3
 8018fec:	4610      	mov	r0, r2
 8018fee:	f7fc fe17 	bl	8015c20 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	683a      	ldr	r2, [r7, #0]
 8018ff6:	601a      	str	r2, [r3, #0]
}
 8018ff8:	bf00      	nop
 8018ffa:	3714      	adds	r7, #20
 8018ffc:	46bd      	mov	sp, r7
 8018ffe:	bd90      	pop	{r4, r7, pc}
 8019000:	08023874 	.word	0x08023874
 8019004:	08023b34 	.word	0x08023b34
 8019008:	080238c0 	.word	0x080238c0
 801900c:	20008fe0 	.word	0x20008fe0

08019010 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8019010:	b5b0      	push	{r4, r5, r7, lr}
 8019012:	b086      	sub	sp, #24
 8019014:	af00      	add	r7, sp, #0
 8019016:	60f8      	str	r0, [r7, #12]
 8019018:	60b9      	str	r1, [r7, #8]
 801901a:	607a      	str	r2, [r7, #4]
 801901c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801901e:	e03e      	b.n	801909e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8019020:	68bb      	ldr	r3, [r7, #8]
 8019022:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8019024:	68bb      	ldr	r3, [r7, #8]
 8019026:	681b      	ldr	r3, [r3, #0]
 8019028:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801902a:	697b      	ldr	r3, [r7, #20]
 801902c:	685b      	ldr	r3, [r3, #4]
 801902e:	4618      	mov	r0, r3
 8019030:	f7fd f80a 	bl	8016048 <pbuf_clen>
 8019034:	4603      	mov	r3, r0
 8019036:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801903e:	8a7a      	ldrh	r2, [r7, #18]
 8019040:	429a      	cmp	r2, r3
 8019042:	d906      	bls.n	8019052 <tcp_free_acked_segments+0x42>
 8019044:	4b2a      	ldr	r3, [pc, #168]	; (80190f0 <tcp_free_acked_segments+0xe0>)
 8019046:	f240 4257 	movw	r2, #1111	; 0x457
 801904a:	492a      	ldr	r1, [pc, #168]	; (80190f4 <tcp_free_acked_segments+0xe4>)
 801904c:	482a      	ldr	r0, [pc, #168]	; (80190f8 <tcp_free_acked_segments+0xe8>)
 801904e:	f008 fad1 	bl	80215f4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8019052:	68fb      	ldr	r3, [r7, #12]
 8019054:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8019058:	8a7b      	ldrh	r3, [r7, #18]
 801905a:	1ad3      	subs	r3, r2, r3
 801905c:	b29a      	uxth	r2, r3
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8019064:	697b      	ldr	r3, [r7, #20]
 8019066:	891a      	ldrh	r2, [r3, #8]
 8019068:	4b24      	ldr	r3, [pc, #144]	; (80190fc <tcp_free_acked_segments+0xec>)
 801906a:	881b      	ldrh	r3, [r3, #0]
 801906c:	4413      	add	r3, r2
 801906e:	b29a      	uxth	r2, r3
 8019070:	4b22      	ldr	r3, [pc, #136]	; (80190fc <tcp_free_acked_segments+0xec>)
 8019072:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8019074:	6978      	ldr	r0, [r7, #20]
 8019076:	f7fe f9dd 	bl	8017434 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019080:	2b00      	cmp	r3, #0
 8019082:	d00c      	beq.n	801909e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8019084:	68bb      	ldr	r3, [r7, #8]
 8019086:	2b00      	cmp	r3, #0
 8019088:	d109      	bne.n	801909e <tcp_free_acked_segments+0x8e>
 801908a:	683b      	ldr	r3, [r7, #0]
 801908c:	2b00      	cmp	r3, #0
 801908e:	d106      	bne.n	801909e <tcp_free_acked_segments+0x8e>
 8019090:	4b17      	ldr	r3, [pc, #92]	; (80190f0 <tcp_free_acked_segments+0xe0>)
 8019092:	f240 4262 	movw	r2, #1122	; 0x462
 8019096:	491a      	ldr	r1, [pc, #104]	; (8019100 <tcp_free_acked_segments+0xf0>)
 8019098:	4817      	ldr	r0, [pc, #92]	; (80190f8 <tcp_free_acked_segments+0xe8>)
 801909a:	f008 faab 	bl	80215f4 <iprintf>
  while (seg_list != NULL &&
 801909e:	68bb      	ldr	r3, [r7, #8]
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d020      	beq.n	80190e6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80190a4:	68bb      	ldr	r3, [r7, #8]
 80190a6:	68db      	ldr	r3, [r3, #12]
 80190a8:	685b      	ldr	r3, [r3, #4]
 80190aa:	4618      	mov	r0, r3
 80190ac:	f7fb fb85 	bl	80147ba <lwip_htonl>
 80190b0:	4604      	mov	r4, r0
 80190b2:	68bb      	ldr	r3, [r7, #8]
 80190b4:	891b      	ldrh	r3, [r3, #8]
 80190b6:	461d      	mov	r5, r3
 80190b8:	68bb      	ldr	r3, [r7, #8]
 80190ba:	68db      	ldr	r3, [r3, #12]
 80190bc:	899b      	ldrh	r3, [r3, #12]
 80190be:	b29b      	uxth	r3, r3
 80190c0:	4618      	mov	r0, r3
 80190c2:	f7fb fb65 	bl	8014790 <lwip_htons>
 80190c6:	4603      	mov	r3, r0
 80190c8:	b2db      	uxtb	r3, r3
 80190ca:	f003 0303 	and.w	r3, r3, #3
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d001      	beq.n	80190d6 <tcp_free_acked_segments+0xc6>
 80190d2:	2301      	movs	r3, #1
 80190d4:	e000      	b.n	80190d8 <tcp_free_acked_segments+0xc8>
 80190d6:	2300      	movs	r3, #0
 80190d8:	442b      	add	r3, r5
 80190da:	18e2      	adds	r2, r4, r3
 80190dc:	4b09      	ldr	r3, [pc, #36]	; (8019104 <tcp_free_acked_segments+0xf4>)
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	dd9c      	ble.n	8019020 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80190e6:	68bb      	ldr	r3, [r7, #8]
}
 80190e8:	4618      	mov	r0, r3
 80190ea:	3718      	adds	r7, #24
 80190ec:	46bd      	mov	sp, r7
 80190ee:	bdb0      	pop	{r4, r5, r7, pc}
 80190f0:	08023874 	.word	0x08023874
 80190f4:	08023b5c 	.word	0x08023b5c
 80190f8:	080238c0 	.word	0x080238c0
 80190fc:	20008fe8 	.word	0x20008fe8
 8019100:	08023b84 	.word	0x08023b84
 8019104:	20008fe4 	.word	0x20008fe4

08019108 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8019108:	b5b0      	push	{r4, r5, r7, lr}
 801910a:	b094      	sub	sp, #80	; 0x50
 801910c:	af00      	add	r7, sp, #0
 801910e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8019110:	2300      	movs	r3, #0
 8019112:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	2b00      	cmp	r3, #0
 8019118:	d106      	bne.n	8019128 <tcp_receive+0x20>
 801911a:	4ba6      	ldr	r3, [pc, #664]	; (80193b4 <tcp_receive+0x2ac>)
 801911c:	f240 427b 	movw	r2, #1147	; 0x47b
 8019120:	49a5      	ldr	r1, [pc, #660]	; (80193b8 <tcp_receive+0x2b0>)
 8019122:	48a6      	ldr	r0, [pc, #664]	; (80193bc <tcp_receive+0x2b4>)
 8019124:	f008 fa66 	bl	80215f4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	7d1b      	ldrb	r3, [r3, #20]
 801912c:	2b03      	cmp	r3, #3
 801912e:	d806      	bhi.n	801913e <tcp_receive+0x36>
 8019130:	4ba0      	ldr	r3, [pc, #640]	; (80193b4 <tcp_receive+0x2ac>)
 8019132:	f240 427c 	movw	r2, #1148	; 0x47c
 8019136:	49a2      	ldr	r1, [pc, #648]	; (80193c0 <tcp_receive+0x2b8>)
 8019138:	48a0      	ldr	r0, [pc, #640]	; (80193bc <tcp_receive+0x2b4>)
 801913a:	f008 fa5b 	bl	80215f4 <iprintf>

  if (flags & TCP_ACK) {
 801913e:	4ba1      	ldr	r3, [pc, #644]	; (80193c4 <tcp_receive+0x2bc>)
 8019140:	781b      	ldrb	r3, [r3, #0]
 8019142:	f003 0310 	and.w	r3, r3, #16
 8019146:	2b00      	cmp	r3, #0
 8019148:	f000 8263 	beq.w	8019612 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019152:	461a      	mov	r2, r3
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019158:	4413      	add	r3, r2
 801915a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019160:	4b99      	ldr	r3, [pc, #612]	; (80193c8 <tcp_receive+0x2c0>)
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	1ad3      	subs	r3, r2, r3
 8019166:	2b00      	cmp	r3, #0
 8019168:	db1b      	blt.n	80191a2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801916e:	4b96      	ldr	r3, [pc, #600]	; (80193c8 <tcp_receive+0x2c0>)
 8019170:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019172:	429a      	cmp	r2, r3
 8019174:	d106      	bne.n	8019184 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801917a:	4b94      	ldr	r3, [pc, #592]	; (80193cc <tcp_receive+0x2c4>)
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	1ad3      	subs	r3, r2, r3
 8019180:	2b00      	cmp	r3, #0
 8019182:	db0e      	blt.n	80191a2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019188:	4b90      	ldr	r3, [pc, #576]	; (80193cc <tcp_receive+0x2c4>)
 801918a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801918c:	429a      	cmp	r2, r3
 801918e:	d125      	bne.n	80191dc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019190:	4b8f      	ldr	r3, [pc, #572]	; (80193d0 <tcp_receive+0x2c8>)
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	89db      	ldrh	r3, [r3, #14]
 8019196:	b29a      	uxth	r2, r3
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801919e:	429a      	cmp	r2, r3
 80191a0:	d91c      	bls.n	80191dc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80191a2:	4b8b      	ldr	r3, [pc, #556]	; (80193d0 <tcp_receive+0x2c8>)
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	89db      	ldrh	r3, [r3, #14]
 80191a8:	b29a      	uxth	r2, r3
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80191bc:	429a      	cmp	r2, r3
 80191be:	d205      	bcs.n	80191cc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80191cc:	4b7e      	ldr	r3, [pc, #504]	; (80193c8 <tcp_receive+0x2c0>)
 80191ce:	681a      	ldr	r2, [r3, #0]
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80191d4:	4b7d      	ldr	r3, [pc, #500]	; (80193cc <tcp_receive+0x2c4>)
 80191d6:	681a      	ldr	r2, [r3, #0]
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80191dc:	4b7b      	ldr	r3, [pc, #492]	; (80193cc <tcp_receive+0x2c4>)
 80191de:	681a      	ldr	r2, [r3, #0]
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80191e4:	1ad3      	subs	r3, r2, r3
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	dc58      	bgt.n	801929c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80191ea:	4b7a      	ldr	r3, [pc, #488]	; (80193d4 <tcp_receive+0x2cc>)
 80191ec:	881b      	ldrh	r3, [r3, #0]
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	d14b      	bne.n	801928a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80191f6:	687a      	ldr	r2, [r7, #4]
 80191f8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80191fc:	4413      	add	r3, r2
 80191fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019200:	429a      	cmp	r2, r3
 8019202:	d142      	bne.n	801928a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801920a:	2b00      	cmp	r3, #0
 801920c:	db3d      	blt.n	801928a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019212:	4b6e      	ldr	r3, [pc, #440]	; (80193cc <tcp_receive+0x2c4>)
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	429a      	cmp	r2, r3
 8019218:	d137      	bne.n	801928a <tcp_receive+0x182>
              found_dupack = 1;
 801921a:	2301      	movs	r3, #1
 801921c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019224:	2bff      	cmp	r3, #255	; 0xff
 8019226:	d007      	beq.n	8019238 <tcp_receive+0x130>
                ++pcb->dupacks;
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801922e:	3301      	adds	r3, #1
 8019230:	b2da      	uxtb	r2, r3
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801923e:	2b03      	cmp	r3, #3
 8019240:	d91b      	bls.n	801927a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801924c:	4413      	add	r3, r2
 801924e:	b29a      	uxth	r2, r3
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019256:	429a      	cmp	r2, r3
 8019258:	d30a      	bcc.n	8019270 <tcp_receive+0x168>
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019264:	4413      	add	r3, r2
 8019266:	b29a      	uxth	r2, r3
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801926e:	e004      	b.n	801927a <tcp_receive+0x172>
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019276:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019280:	2b02      	cmp	r3, #2
 8019282:	d902      	bls.n	801928a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8019284:	6878      	ldr	r0, [r7, #4]
 8019286:	f001 feed 	bl	801b064 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801928a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801928c:	2b00      	cmp	r3, #0
 801928e:	f040 8160 	bne.w	8019552 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	2200      	movs	r2, #0
 8019296:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801929a:	e15a      	b.n	8019552 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801929c:	4b4b      	ldr	r3, [pc, #300]	; (80193cc <tcp_receive+0x2c4>)
 801929e:	681a      	ldr	r2, [r3, #0]
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80192a4:	1ad3      	subs	r3, r2, r3
 80192a6:	3b01      	subs	r3, #1
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	f2c0 814d 	blt.w	8019548 <tcp_receive+0x440>
 80192ae:	4b47      	ldr	r3, [pc, #284]	; (80193cc <tcp_receive+0x2c4>)
 80192b0:	681a      	ldr	r2, [r3, #0]
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80192b6:	1ad3      	subs	r3, r2, r3
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	f300 8145 	bgt.w	8019548 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	8b5b      	ldrh	r3, [r3, #26]
 80192c2:	f003 0304 	and.w	r3, r3, #4
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d010      	beq.n	80192ec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	8b5b      	ldrh	r3, [r3, #26]
 80192ce:	f023 0304 	bic.w	r3, r3, #4
 80192d2:	b29a      	uxth	r2, r3
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	2200      	movs	r2, #0
 80192e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	2200      	movs	r2, #0
 80192f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80192fa:	10db      	asrs	r3, r3, #3
 80192fc:	b21b      	sxth	r3, r3
 80192fe:	b29a      	uxth	r2, r3
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019306:	b29b      	uxth	r3, r3
 8019308:	4413      	add	r3, r2
 801930a:	b29b      	uxth	r3, r3
 801930c:	b21a      	sxth	r2, r3
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8019314:	4b2d      	ldr	r3, [pc, #180]	; (80193cc <tcp_receive+0x2c4>)
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	b29a      	uxth	r2, r3
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801931e:	b29b      	uxth	r3, r3
 8019320:	1ad3      	subs	r3, r2, r3
 8019322:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	2200      	movs	r2, #0
 8019328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801932c:	4b27      	ldr	r3, [pc, #156]	; (80193cc <tcp_receive+0x2c4>)
 801932e:	681a      	ldr	r2, [r3, #0]
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	7d1b      	ldrb	r3, [r3, #20]
 8019338:	2b03      	cmp	r3, #3
 801933a:	f240 8096 	bls.w	801946a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801934a:	429a      	cmp	r2, r3
 801934c:	d244      	bcs.n	80193d8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	8b5b      	ldrh	r3, [r3, #26]
 8019352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019356:	2b00      	cmp	r3, #0
 8019358:	d001      	beq.n	801935e <tcp_receive+0x256>
 801935a:	2301      	movs	r3, #1
 801935c:	e000      	b.n	8019360 <tcp_receive+0x258>
 801935e:	2302      	movs	r3, #2
 8019360:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8019364:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8019368:	b29a      	uxth	r2, r3
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801936e:	fb12 f303 	smulbb	r3, r2, r3
 8019372:	b29b      	uxth	r3, r3
 8019374:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019376:	4293      	cmp	r3, r2
 8019378:	bf28      	it	cs
 801937a:	4613      	movcs	r3, r2
 801937c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019384:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019386:	4413      	add	r3, r2
 8019388:	b29a      	uxth	r2, r3
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019390:	429a      	cmp	r2, r3
 8019392:	d309      	bcc.n	80193a8 <tcp_receive+0x2a0>
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801939a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801939c:	4413      	add	r3, r2
 801939e:	b29a      	uxth	r2, r3
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80193a6:	e060      	b.n	801946a <tcp_receive+0x362>
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80193ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80193b2:	e05a      	b.n	801946a <tcp_receive+0x362>
 80193b4:	08023874 	.word	0x08023874
 80193b8:	08023ba4 	.word	0x08023ba4
 80193bc:	080238c0 	.word	0x080238c0
 80193c0:	08023bc0 	.word	0x08023bc0
 80193c4:	20008fec 	.word	0x20008fec
 80193c8:	20008fe0 	.word	0x20008fe0
 80193cc:	20008fe4 	.word	0x20008fe4
 80193d0:	20008fd0 	.word	0x20008fd0
 80193d4:	20008fea 	.word	0x20008fea
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80193de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80193e0:	4413      	add	r3, r2
 80193e2:	b29a      	uxth	r2, r3
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80193ea:	429a      	cmp	r2, r3
 80193ec:	d309      	bcc.n	8019402 <tcp_receive+0x2fa>
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80193f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80193f6:	4413      	add	r3, r2
 80193f8:	b29a      	uxth	r2, r3
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8019400:	e004      	b.n	801940c <tcp_receive+0x304>
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019408:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019418:	429a      	cmp	r2, r3
 801941a:	d326      	bcc.n	801946a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019428:	1ad3      	subs	r3, r2, r3
 801942a:	b29a      	uxth	r2, r3
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801943c:	4413      	add	r3, r2
 801943e:	b29a      	uxth	r2, r3
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019446:	429a      	cmp	r2, r3
 8019448:	d30a      	bcc.n	8019460 <tcp_receive+0x358>
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019454:	4413      	add	r3, r2
 8019456:	b29a      	uxth	r2, r3
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801945e:	e004      	b.n	801946a <tcp_receive+0x362>
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019466:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019472:	4a98      	ldr	r2, [pc, #608]	; (80196d4 <tcp_receive+0x5cc>)
 8019474:	6878      	ldr	r0, [r7, #4]
 8019476:	f7ff fdcb 	bl	8019010 <tcp_free_acked_segments>
 801947a:	4602      	mov	r2, r0
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019488:	4a93      	ldr	r2, [pc, #588]	; (80196d8 <tcp_receive+0x5d0>)
 801948a:	6878      	ldr	r0, [r7, #4]
 801948c:	f7ff fdc0 	bl	8019010 <tcp_free_acked_segments>
 8019490:	4602      	mov	r2, r0
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801949a:	2b00      	cmp	r3, #0
 801949c:	d104      	bne.n	80194a8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80194a4:	861a      	strh	r2, [r3, #48]	; 0x30
 80194a6:	e002      	b.n	80194ae <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	2200      	movs	r2, #0
 80194ac:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	2200      	movs	r2, #0
 80194b2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d103      	bne.n	80194c4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	2200      	movs	r2, #0
 80194c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80194ca:	4b84      	ldr	r3, [pc, #528]	; (80196dc <tcp_receive+0x5d4>)
 80194cc:	881b      	ldrh	r3, [r3, #0]
 80194ce:	4413      	add	r3, r2
 80194d0:	b29a      	uxth	r2, r3
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	8b5b      	ldrh	r3, [r3, #26]
 80194dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d035      	beq.n	8019550 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d118      	bne.n	801951e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d00c      	beq.n	801950e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80194fc:	68db      	ldr	r3, [r3, #12]
 80194fe:	685b      	ldr	r3, [r3, #4]
 8019500:	4618      	mov	r0, r3
 8019502:	f7fb f95a 	bl	80147ba <lwip_htonl>
 8019506:	4603      	mov	r3, r0
 8019508:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801950a:	2b00      	cmp	r3, #0
 801950c:	dc20      	bgt.n	8019550 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	8b5b      	ldrh	r3, [r3, #26]
 8019512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019516:	b29a      	uxth	r2, r3
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801951c:	e018      	b.n	8019550 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019526:	68db      	ldr	r3, [r3, #12]
 8019528:	685b      	ldr	r3, [r3, #4]
 801952a:	4618      	mov	r0, r3
 801952c:	f7fb f945 	bl	80147ba <lwip_htonl>
 8019530:	4603      	mov	r3, r0
 8019532:	1ae3      	subs	r3, r4, r3
 8019534:	2b00      	cmp	r3, #0
 8019536:	dc0b      	bgt.n	8019550 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	8b5b      	ldrh	r3, [r3, #26]
 801953c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019540:	b29a      	uxth	r2, r3
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019546:	e003      	b.n	8019550 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8019548:	6878      	ldr	r0, [r7, #4]
 801954a:	f001 ff85 	bl	801b458 <tcp_send_empty_ack>
 801954e:	e000      	b.n	8019552 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019550:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019556:	2b00      	cmp	r3, #0
 8019558:	d05b      	beq.n	8019612 <tcp_receive+0x50a>
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801955e:	4b60      	ldr	r3, [pc, #384]	; (80196e0 <tcp_receive+0x5d8>)
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	1ad3      	subs	r3, r2, r3
 8019564:	2b00      	cmp	r3, #0
 8019566:	da54      	bge.n	8019612 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019568:	4b5e      	ldr	r3, [pc, #376]	; (80196e4 <tcp_receive+0x5dc>)
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	b29a      	uxth	r2, r3
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019572:	b29b      	uxth	r3, r3
 8019574:	1ad3      	subs	r3, r2, r3
 8019576:	b29b      	uxth	r3, r3
 8019578:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801957c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019586:	10db      	asrs	r3, r3, #3
 8019588:	b21b      	sxth	r3, r3
 801958a:	b29b      	uxth	r3, r3
 801958c:	1ad3      	subs	r3, r2, r3
 801958e:	b29b      	uxth	r3, r3
 8019590:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801959a:	b29a      	uxth	r2, r3
 801959c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80195a0:	4413      	add	r3, r2
 80195a2:	b29b      	uxth	r3, r3
 80195a4:	b21a      	sxth	r2, r3
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80195aa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	da05      	bge.n	80195be <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80195b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80195b6:	425b      	negs	r3, r3
 80195b8:	b29b      	uxth	r3, r3
 80195ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80195be:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80195c8:	109b      	asrs	r3, r3, #2
 80195ca:	b21b      	sxth	r3, r3
 80195cc:	b29b      	uxth	r3, r3
 80195ce:	1ad3      	subs	r3, r2, r3
 80195d0:	b29b      	uxth	r3, r3
 80195d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80195dc:	b29a      	uxth	r2, r3
 80195de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80195e2:	4413      	add	r3, r2
 80195e4:	b29b      	uxth	r3, r3
 80195e6:	b21a      	sxth	r2, r3
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80195f2:	10db      	asrs	r3, r3, #3
 80195f4:	b21b      	sxth	r3, r3
 80195f6:	b29a      	uxth	r2, r3
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80195fe:	b29b      	uxth	r3, r3
 8019600:	4413      	add	r3, r2
 8019602:	b29b      	uxth	r3, r3
 8019604:	b21a      	sxth	r2, r3
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	2200      	movs	r2, #0
 8019610:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019612:	4b35      	ldr	r3, [pc, #212]	; (80196e8 <tcp_receive+0x5e0>)
 8019614:	881b      	ldrh	r3, [r3, #0]
 8019616:	2b00      	cmp	r3, #0
 8019618:	f000 84e1 	beq.w	8019fde <tcp_receive+0xed6>
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	7d1b      	ldrb	r3, [r3, #20]
 8019620:	2b06      	cmp	r3, #6
 8019622:	f200 84dc 	bhi.w	8019fde <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801962a:	4b30      	ldr	r3, [pc, #192]	; (80196ec <tcp_receive+0x5e4>)
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	1ad3      	subs	r3, r2, r3
 8019630:	3b01      	subs	r3, #1
 8019632:	2b00      	cmp	r3, #0
 8019634:	f2c0 808e 	blt.w	8019754 <tcp_receive+0x64c>
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801963c:	4b2a      	ldr	r3, [pc, #168]	; (80196e8 <tcp_receive+0x5e0>)
 801963e:	881b      	ldrh	r3, [r3, #0]
 8019640:	4619      	mov	r1, r3
 8019642:	4b2a      	ldr	r3, [pc, #168]	; (80196ec <tcp_receive+0x5e4>)
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	440b      	add	r3, r1
 8019648:	1ad3      	subs	r3, r2, r3
 801964a:	3301      	adds	r3, #1
 801964c:	2b00      	cmp	r3, #0
 801964e:	f300 8081 	bgt.w	8019754 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019652:	4b27      	ldr	r3, [pc, #156]	; (80196f0 <tcp_receive+0x5e8>)
 8019654:	685b      	ldr	r3, [r3, #4]
 8019656:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801965c:	4b23      	ldr	r3, [pc, #140]	; (80196ec <tcp_receive+0x5e4>)
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	1ad3      	subs	r3, r2, r3
 8019662:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019664:	4b22      	ldr	r3, [pc, #136]	; (80196f0 <tcp_receive+0x5e8>)
 8019666:	685b      	ldr	r3, [r3, #4]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d106      	bne.n	801967a <tcp_receive+0x572>
 801966c:	4b21      	ldr	r3, [pc, #132]	; (80196f4 <tcp_receive+0x5ec>)
 801966e:	f240 5294 	movw	r2, #1428	; 0x594
 8019672:	4921      	ldr	r1, [pc, #132]	; (80196f8 <tcp_receive+0x5f0>)
 8019674:	4821      	ldr	r0, [pc, #132]	; (80196fc <tcp_receive+0x5f4>)
 8019676:	f007 ffbd 	bl	80215f4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801967a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801967c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019680:	4293      	cmp	r3, r2
 8019682:	d906      	bls.n	8019692 <tcp_receive+0x58a>
 8019684:	4b1b      	ldr	r3, [pc, #108]	; (80196f4 <tcp_receive+0x5ec>)
 8019686:	f240 5295 	movw	r2, #1429	; 0x595
 801968a:	491d      	ldr	r1, [pc, #116]	; (8019700 <tcp_receive+0x5f8>)
 801968c:	481b      	ldr	r0, [pc, #108]	; (80196fc <tcp_receive+0x5f4>)
 801968e:	f007 ffb1 	bl	80215f4 <iprintf>
      off = (u16_t)off32;
 8019692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019694:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019698:	4b15      	ldr	r3, [pc, #84]	; (80196f0 <tcp_receive+0x5e8>)
 801969a:	685b      	ldr	r3, [r3, #4]
 801969c:	891b      	ldrh	r3, [r3, #8]
 801969e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80196a2:	429a      	cmp	r2, r3
 80196a4:	d906      	bls.n	80196b4 <tcp_receive+0x5ac>
 80196a6:	4b13      	ldr	r3, [pc, #76]	; (80196f4 <tcp_receive+0x5ec>)
 80196a8:	f240 5297 	movw	r2, #1431	; 0x597
 80196ac:	4915      	ldr	r1, [pc, #84]	; (8019704 <tcp_receive+0x5fc>)
 80196ae:	4813      	ldr	r0, [pc, #76]	; (80196fc <tcp_receive+0x5f4>)
 80196b0:	f007 ffa0 	bl	80215f4 <iprintf>
      inseg.len -= off;
 80196b4:	4b0e      	ldr	r3, [pc, #56]	; (80196f0 <tcp_receive+0x5e8>)
 80196b6:	891a      	ldrh	r2, [r3, #8]
 80196b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80196bc:	1ad3      	subs	r3, r2, r3
 80196be:	b29a      	uxth	r2, r3
 80196c0:	4b0b      	ldr	r3, [pc, #44]	; (80196f0 <tcp_receive+0x5e8>)
 80196c2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80196c4:	4b0a      	ldr	r3, [pc, #40]	; (80196f0 <tcp_receive+0x5e8>)
 80196c6:	685b      	ldr	r3, [r3, #4]
 80196c8:	891a      	ldrh	r2, [r3, #8]
 80196ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80196ce:	1ad3      	subs	r3, r2, r3
 80196d0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80196d2:	e029      	b.n	8019728 <tcp_receive+0x620>
 80196d4:	08023bdc 	.word	0x08023bdc
 80196d8:	08023be4 	.word	0x08023be4
 80196dc:	20008fe8 	.word	0x20008fe8
 80196e0:	20008fe4 	.word	0x20008fe4
 80196e4:	2001035c 	.word	0x2001035c
 80196e8:	20008fea 	.word	0x20008fea
 80196ec:	20008fe0 	.word	0x20008fe0
 80196f0:	20008fc0 	.word	0x20008fc0
 80196f4:	08023874 	.word	0x08023874
 80196f8:	08023bec 	.word	0x08023bec
 80196fc:	080238c0 	.word	0x080238c0
 8019700:	08023bfc 	.word	0x08023bfc
 8019704:	08023c0c 	.word	0x08023c0c
        off -= p->len;
 8019708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801970a:	895b      	ldrh	r3, [r3, #10]
 801970c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019710:	1ad3      	subs	r3, r2, r3
 8019712:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8019716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019718:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801971a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801971c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801971e:	2200      	movs	r2, #0
 8019720:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8019722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8019728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801972a:	895b      	ldrh	r3, [r3, #10]
 801972c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019730:	429a      	cmp	r2, r3
 8019732:	d8e9      	bhi.n	8019708 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8019734:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019738:	4619      	mov	r1, r3
 801973a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801973c:	f7fc fb70 	bl	8015e20 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019744:	4a91      	ldr	r2, [pc, #580]	; (801998c <tcp_receive+0x884>)
 8019746:	6013      	str	r3, [r2, #0]
 8019748:	4b91      	ldr	r3, [pc, #580]	; (8019990 <tcp_receive+0x888>)
 801974a:	68db      	ldr	r3, [r3, #12]
 801974c:	4a8f      	ldr	r2, [pc, #572]	; (801998c <tcp_receive+0x884>)
 801974e:	6812      	ldr	r2, [r2, #0]
 8019750:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019752:	e00d      	b.n	8019770 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019754:	4b8d      	ldr	r3, [pc, #564]	; (801998c <tcp_receive+0x884>)
 8019756:	681a      	ldr	r2, [r3, #0]
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801975c:	1ad3      	subs	r3, r2, r3
 801975e:	2b00      	cmp	r3, #0
 8019760:	da06      	bge.n	8019770 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	8b5b      	ldrh	r3, [r3, #26]
 8019766:	f043 0302 	orr.w	r3, r3, #2
 801976a:	b29a      	uxth	r2, r3
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019770:	4b86      	ldr	r3, [pc, #536]	; (801998c <tcp_receive+0x884>)
 8019772:	681a      	ldr	r2, [r3, #0]
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019778:	1ad3      	subs	r3, r2, r3
 801977a:	2b00      	cmp	r3, #0
 801977c:	f2c0 842a 	blt.w	8019fd4 <tcp_receive+0xecc>
 8019780:	4b82      	ldr	r3, [pc, #520]	; (801998c <tcp_receive+0x884>)
 8019782:	681a      	ldr	r2, [r3, #0]
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019788:	6879      	ldr	r1, [r7, #4]
 801978a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801978c:	440b      	add	r3, r1
 801978e:	1ad3      	subs	r3, r2, r3
 8019790:	3301      	adds	r3, #1
 8019792:	2b00      	cmp	r3, #0
 8019794:	f300 841e 	bgt.w	8019fd4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801979c:	4b7b      	ldr	r3, [pc, #492]	; (801998c <tcp_receive+0x884>)
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	429a      	cmp	r2, r3
 80197a2:	f040 829a 	bne.w	8019cda <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80197a6:	4b7a      	ldr	r3, [pc, #488]	; (8019990 <tcp_receive+0x888>)
 80197a8:	891c      	ldrh	r4, [r3, #8]
 80197aa:	4b79      	ldr	r3, [pc, #484]	; (8019990 <tcp_receive+0x888>)
 80197ac:	68db      	ldr	r3, [r3, #12]
 80197ae:	899b      	ldrh	r3, [r3, #12]
 80197b0:	b29b      	uxth	r3, r3
 80197b2:	4618      	mov	r0, r3
 80197b4:	f7fa ffec 	bl	8014790 <lwip_htons>
 80197b8:	4603      	mov	r3, r0
 80197ba:	b2db      	uxtb	r3, r3
 80197bc:	f003 0303 	and.w	r3, r3, #3
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d001      	beq.n	80197c8 <tcp_receive+0x6c0>
 80197c4:	2301      	movs	r3, #1
 80197c6:	e000      	b.n	80197ca <tcp_receive+0x6c2>
 80197c8:	2300      	movs	r3, #0
 80197ca:	4423      	add	r3, r4
 80197cc:	b29a      	uxth	r2, r3
 80197ce:	4b71      	ldr	r3, [pc, #452]	; (8019994 <tcp_receive+0x88c>)
 80197d0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80197d6:	4b6f      	ldr	r3, [pc, #444]	; (8019994 <tcp_receive+0x88c>)
 80197d8:	881b      	ldrh	r3, [r3, #0]
 80197da:	429a      	cmp	r2, r3
 80197dc:	d275      	bcs.n	80198ca <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80197de:	4b6c      	ldr	r3, [pc, #432]	; (8019990 <tcp_receive+0x888>)
 80197e0:	68db      	ldr	r3, [r3, #12]
 80197e2:	899b      	ldrh	r3, [r3, #12]
 80197e4:	b29b      	uxth	r3, r3
 80197e6:	4618      	mov	r0, r3
 80197e8:	f7fa ffd2 	bl	8014790 <lwip_htons>
 80197ec:	4603      	mov	r3, r0
 80197ee:	b2db      	uxtb	r3, r3
 80197f0:	f003 0301 	and.w	r3, r3, #1
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d01f      	beq.n	8019838 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80197f8:	4b65      	ldr	r3, [pc, #404]	; (8019990 <tcp_receive+0x888>)
 80197fa:	68db      	ldr	r3, [r3, #12]
 80197fc:	899b      	ldrh	r3, [r3, #12]
 80197fe:	b29b      	uxth	r3, r3
 8019800:	b21b      	sxth	r3, r3
 8019802:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019806:	b21c      	sxth	r4, r3
 8019808:	4b61      	ldr	r3, [pc, #388]	; (8019990 <tcp_receive+0x888>)
 801980a:	68db      	ldr	r3, [r3, #12]
 801980c:	899b      	ldrh	r3, [r3, #12]
 801980e:	b29b      	uxth	r3, r3
 8019810:	4618      	mov	r0, r3
 8019812:	f7fa ffbd 	bl	8014790 <lwip_htons>
 8019816:	4603      	mov	r3, r0
 8019818:	b2db      	uxtb	r3, r3
 801981a:	b29b      	uxth	r3, r3
 801981c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019820:	b29b      	uxth	r3, r3
 8019822:	4618      	mov	r0, r3
 8019824:	f7fa ffb4 	bl	8014790 <lwip_htons>
 8019828:	4603      	mov	r3, r0
 801982a:	b21b      	sxth	r3, r3
 801982c:	4323      	orrs	r3, r4
 801982e:	b21a      	sxth	r2, r3
 8019830:	4b57      	ldr	r3, [pc, #348]	; (8019990 <tcp_receive+0x888>)
 8019832:	68db      	ldr	r3, [r3, #12]
 8019834:	b292      	uxth	r2, r2
 8019836:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801983c:	4b54      	ldr	r3, [pc, #336]	; (8019990 <tcp_receive+0x888>)
 801983e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019840:	4b53      	ldr	r3, [pc, #332]	; (8019990 <tcp_receive+0x888>)
 8019842:	68db      	ldr	r3, [r3, #12]
 8019844:	899b      	ldrh	r3, [r3, #12]
 8019846:	b29b      	uxth	r3, r3
 8019848:	4618      	mov	r0, r3
 801984a:	f7fa ffa1 	bl	8014790 <lwip_htons>
 801984e:	4603      	mov	r3, r0
 8019850:	b2db      	uxtb	r3, r3
 8019852:	f003 0302 	and.w	r3, r3, #2
 8019856:	2b00      	cmp	r3, #0
 8019858:	d005      	beq.n	8019866 <tcp_receive+0x75e>
            inseg.len -= 1;
 801985a:	4b4d      	ldr	r3, [pc, #308]	; (8019990 <tcp_receive+0x888>)
 801985c:	891b      	ldrh	r3, [r3, #8]
 801985e:	3b01      	subs	r3, #1
 8019860:	b29a      	uxth	r2, r3
 8019862:	4b4b      	ldr	r3, [pc, #300]	; (8019990 <tcp_receive+0x888>)
 8019864:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019866:	4b4a      	ldr	r3, [pc, #296]	; (8019990 <tcp_receive+0x888>)
 8019868:	685a      	ldr	r2, [r3, #4]
 801986a:	4b49      	ldr	r3, [pc, #292]	; (8019990 <tcp_receive+0x888>)
 801986c:	891b      	ldrh	r3, [r3, #8]
 801986e:	4619      	mov	r1, r3
 8019870:	4610      	mov	r0, r2
 8019872:	f7fc f9d5 	bl	8015c20 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019876:	4b46      	ldr	r3, [pc, #280]	; (8019990 <tcp_receive+0x888>)
 8019878:	891c      	ldrh	r4, [r3, #8]
 801987a:	4b45      	ldr	r3, [pc, #276]	; (8019990 <tcp_receive+0x888>)
 801987c:	68db      	ldr	r3, [r3, #12]
 801987e:	899b      	ldrh	r3, [r3, #12]
 8019880:	b29b      	uxth	r3, r3
 8019882:	4618      	mov	r0, r3
 8019884:	f7fa ff84 	bl	8014790 <lwip_htons>
 8019888:	4603      	mov	r3, r0
 801988a:	b2db      	uxtb	r3, r3
 801988c:	f003 0303 	and.w	r3, r3, #3
 8019890:	2b00      	cmp	r3, #0
 8019892:	d001      	beq.n	8019898 <tcp_receive+0x790>
 8019894:	2301      	movs	r3, #1
 8019896:	e000      	b.n	801989a <tcp_receive+0x792>
 8019898:	2300      	movs	r3, #0
 801989a:	4423      	add	r3, r4
 801989c:	b29a      	uxth	r2, r3
 801989e:	4b3d      	ldr	r3, [pc, #244]	; (8019994 <tcp_receive+0x88c>)
 80198a0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80198a2:	4b3c      	ldr	r3, [pc, #240]	; (8019994 <tcp_receive+0x88c>)
 80198a4:	881b      	ldrh	r3, [r3, #0]
 80198a6:	461a      	mov	r2, r3
 80198a8:	4b38      	ldr	r3, [pc, #224]	; (801998c <tcp_receive+0x884>)
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	441a      	add	r2, r3
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198b2:	6879      	ldr	r1, [r7, #4]
 80198b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80198b6:	440b      	add	r3, r1
 80198b8:	429a      	cmp	r2, r3
 80198ba:	d006      	beq.n	80198ca <tcp_receive+0x7c2>
 80198bc:	4b36      	ldr	r3, [pc, #216]	; (8019998 <tcp_receive+0x890>)
 80198be:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80198c2:	4936      	ldr	r1, [pc, #216]	; (801999c <tcp_receive+0x894>)
 80198c4:	4836      	ldr	r0, [pc, #216]	; (80199a0 <tcp_receive+0x898>)
 80198c6:	f007 fe95 	bl	80215f4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	f000 80e7 	beq.w	8019aa2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80198d4:	4b2e      	ldr	r3, [pc, #184]	; (8019990 <tcp_receive+0x888>)
 80198d6:	68db      	ldr	r3, [r3, #12]
 80198d8:	899b      	ldrh	r3, [r3, #12]
 80198da:	b29b      	uxth	r3, r3
 80198dc:	4618      	mov	r0, r3
 80198de:	f7fa ff57 	bl	8014790 <lwip_htons>
 80198e2:	4603      	mov	r3, r0
 80198e4:	b2db      	uxtb	r3, r3
 80198e6:	f003 0301 	and.w	r3, r3, #1
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d010      	beq.n	8019910 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80198ee:	e00a      	b.n	8019906 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80198f4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80198fa:	681a      	ldr	r2, [r3, #0]
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8019900:	68f8      	ldr	r0, [r7, #12]
 8019902:	f7fd fd97 	bl	8017434 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801990a:	2b00      	cmp	r3, #0
 801990c:	d1f0      	bne.n	80198f0 <tcp_receive+0x7e8>
 801990e:	e0c8      	b.n	8019aa2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019914:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019916:	e052      	b.n	80199be <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801991a:	68db      	ldr	r3, [r3, #12]
 801991c:	899b      	ldrh	r3, [r3, #12]
 801991e:	b29b      	uxth	r3, r3
 8019920:	4618      	mov	r0, r3
 8019922:	f7fa ff35 	bl	8014790 <lwip_htons>
 8019926:	4603      	mov	r3, r0
 8019928:	b2db      	uxtb	r3, r3
 801992a:	f003 0301 	and.w	r3, r3, #1
 801992e:	2b00      	cmp	r3, #0
 8019930:	d03d      	beq.n	80199ae <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019932:	4b17      	ldr	r3, [pc, #92]	; (8019990 <tcp_receive+0x888>)
 8019934:	68db      	ldr	r3, [r3, #12]
 8019936:	899b      	ldrh	r3, [r3, #12]
 8019938:	b29b      	uxth	r3, r3
 801993a:	4618      	mov	r0, r3
 801993c:	f7fa ff28 	bl	8014790 <lwip_htons>
 8019940:	4603      	mov	r3, r0
 8019942:	b2db      	uxtb	r3, r3
 8019944:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019948:	2b00      	cmp	r3, #0
 801994a:	d130      	bne.n	80199ae <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801994c:	4b10      	ldr	r3, [pc, #64]	; (8019990 <tcp_receive+0x888>)
 801994e:	68db      	ldr	r3, [r3, #12]
 8019950:	899b      	ldrh	r3, [r3, #12]
 8019952:	b29c      	uxth	r4, r3
 8019954:	2001      	movs	r0, #1
 8019956:	f7fa ff1b 	bl	8014790 <lwip_htons>
 801995a:	4603      	mov	r3, r0
 801995c:	461a      	mov	r2, r3
 801995e:	4b0c      	ldr	r3, [pc, #48]	; (8019990 <tcp_receive+0x888>)
 8019960:	68db      	ldr	r3, [r3, #12]
 8019962:	4322      	orrs	r2, r4
 8019964:	b292      	uxth	r2, r2
 8019966:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019968:	4b09      	ldr	r3, [pc, #36]	; (8019990 <tcp_receive+0x888>)
 801996a:	891c      	ldrh	r4, [r3, #8]
 801996c:	4b08      	ldr	r3, [pc, #32]	; (8019990 <tcp_receive+0x888>)
 801996e:	68db      	ldr	r3, [r3, #12]
 8019970:	899b      	ldrh	r3, [r3, #12]
 8019972:	b29b      	uxth	r3, r3
 8019974:	4618      	mov	r0, r3
 8019976:	f7fa ff0b 	bl	8014790 <lwip_htons>
 801997a:	4603      	mov	r3, r0
 801997c:	b2db      	uxtb	r3, r3
 801997e:	f003 0303 	and.w	r3, r3, #3
 8019982:	2b00      	cmp	r3, #0
 8019984:	d00e      	beq.n	80199a4 <tcp_receive+0x89c>
 8019986:	2301      	movs	r3, #1
 8019988:	e00d      	b.n	80199a6 <tcp_receive+0x89e>
 801998a:	bf00      	nop
 801998c:	20008fe0 	.word	0x20008fe0
 8019990:	20008fc0 	.word	0x20008fc0
 8019994:	20008fea 	.word	0x20008fea
 8019998:	08023874 	.word	0x08023874
 801999c:	08023c1c 	.word	0x08023c1c
 80199a0:	080238c0 	.word	0x080238c0
 80199a4:	2300      	movs	r3, #0
 80199a6:	4423      	add	r3, r4
 80199a8:	b29a      	uxth	r2, r3
 80199aa:	4b98      	ldr	r3, [pc, #608]	; (8019c0c <tcp_receive+0xb04>)
 80199ac:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80199ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199b0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80199b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80199b8:	6938      	ldr	r0, [r7, #16]
 80199ba:	f7fd fd3b 	bl	8017434 <tcp_seg_free>
            while (next &&
 80199be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d00e      	beq.n	80199e2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80199c4:	4b91      	ldr	r3, [pc, #580]	; (8019c0c <tcp_receive+0xb04>)
 80199c6:	881b      	ldrh	r3, [r3, #0]
 80199c8:	461a      	mov	r2, r3
 80199ca:	4b91      	ldr	r3, [pc, #580]	; (8019c10 <tcp_receive+0xb08>)
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	441a      	add	r2, r3
 80199d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199d2:	68db      	ldr	r3, [r3, #12]
 80199d4:	685b      	ldr	r3, [r3, #4]
 80199d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80199d8:	8909      	ldrh	r1, [r1, #8]
 80199da:	440b      	add	r3, r1
 80199dc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80199de:	2b00      	cmp	r3, #0
 80199e0:	da9a      	bge.n	8019918 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80199e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d059      	beq.n	8019a9c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80199e8:	4b88      	ldr	r3, [pc, #544]	; (8019c0c <tcp_receive+0xb04>)
 80199ea:	881b      	ldrh	r3, [r3, #0]
 80199ec:	461a      	mov	r2, r3
 80199ee:	4b88      	ldr	r3, [pc, #544]	; (8019c10 <tcp_receive+0xb08>)
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	441a      	add	r2, r3
 80199f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80199f6:	68db      	ldr	r3, [r3, #12]
 80199f8:	685b      	ldr	r3, [r3, #4]
 80199fa:	1ad3      	subs	r3, r2, r3
            if (next &&
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	dd4d      	ble.n	8019a9c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a02:	68db      	ldr	r3, [r3, #12]
 8019a04:	685b      	ldr	r3, [r3, #4]
 8019a06:	b29a      	uxth	r2, r3
 8019a08:	4b81      	ldr	r3, [pc, #516]	; (8019c10 <tcp_receive+0xb08>)
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	b29b      	uxth	r3, r3
 8019a0e:	1ad3      	subs	r3, r2, r3
 8019a10:	b29a      	uxth	r2, r3
 8019a12:	4b80      	ldr	r3, [pc, #512]	; (8019c14 <tcp_receive+0xb0c>)
 8019a14:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019a16:	4b7f      	ldr	r3, [pc, #508]	; (8019c14 <tcp_receive+0xb0c>)
 8019a18:	68db      	ldr	r3, [r3, #12]
 8019a1a:	899b      	ldrh	r3, [r3, #12]
 8019a1c:	b29b      	uxth	r3, r3
 8019a1e:	4618      	mov	r0, r3
 8019a20:	f7fa feb6 	bl	8014790 <lwip_htons>
 8019a24:	4603      	mov	r3, r0
 8019a26:	b2db      	uxtb	r3, r3
 8019a28:	f003 0302 	and.w	r3, r3, #2
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d005      	beq.n	8019a3c <tcp_receive+0x934>
                inseg.len -= 1;
 8019a30:	4b78      	ldr	r3, [pc, #480]	; (8019c14 <tcp_receive+0xb0c>)
 8019a32:	891b      	ldrh	r3, [r3, #8]
 8019a34:	3b01      	subs	r3, #1
 8019a36:	b29a      	uxth	r2, r3
 8019a38:	4b76      	ldr	r3, [pc, #472]	; (8019c14 <tcp_receive+0xb0c>)
 8019a3a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019a3c:	4b75      	ldr	r3, [pc, #468]	; (8019c14 <tcp_receive+0xb0c>)
 8019a3e:	685a      	ldr	r2, [r3, #4]
 8019a40:	4b74      	ldr	r3, [pc, #464]	; (8019c14 <tcp_receive+0xb0c>)
 8019a42:	891b      	ldrh	r3, [r3, #8]
 8019a44:	4619      	mov	r1, r3
 8019a46:	4610      	mov	r0, r2
 8019a48:	f7fc f8ea 	bl	8015c20 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019a4c:	4b71      	ldr	r3, [pc, #452]	; (8019c14 <tcp_receive+0xb0c>)
 8019a4e:	891c      	ldrh	r4, [r3, #8]
 8019a50:	4b70      	ldr	r3, [pc, #448]	; (8019c14 <tcp_receive+0xb0c>)
 8019a52:	68db      	ldr	r3, [r3, #12]
 8019a54:	899b      	ldrh	r3, [r3, #12]
 8019a56:	b29b      	uxth	r3, r3
 8019a58:	4618      	mov	r0, r3
 8019a5a:	f7fa fe99 	bl	8014790 <lwip_htons>
 8019a5e:	4603      	mov	r3, r0
 8019a60:	b2db      	uxtb	r3, r3
 8019a62:	f003 0303 	and.w	r3, r3, #3
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d001      	beq.n	8019a6e <tcp_receive+0x966>
 8019a6a:	2301      	movs	r3, #1
 8019a6c:	e000      	b.n	8019a70 <tcp_receive+0x968>
 8019a6e:	2300      	movs	r3, #0
 8019a70:	4423      	add	r3, r4
 8019a72:	b29a      	uxth	r2, r3
 8019a74:	4b65      	ldr	r3, [pc, #404]	; (8019c0c <tcp_receive+0xb04>)
 8019a76:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019a78:	4b64      	ldr	r3, [pc, #400]	; (8019c0c <tcp_receive+0xb04>)
 8019a7a:	881b      	ldrh	r3, [r3, #0]
 8019a7c:	461a      	mov	r2, r3
 8019a7e:	4b64      	ldr	r3, [pc, #400]	; (8019c10 <tcp_receive+0xb08>)
 8019a80:	681b      	ldr	r3, [r3, #0]
 8019a82:	441a      	add	r2, r3
 8019a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a86:	68db      	ldr	r3, [r3, #12]
 8019a88:	685b      	ldr	r3, [r3, #4]
 8019a8a:	429a      	cmp	r2, r3
 8019a8c:	d006      	beq.n	8019a9c <tcp_receive+0x994>
 8019a8e:	4b62      	ldr	r3, [pc, #392]	; (8019c18 <tcp_receive+0xb10>)
 8019a90:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8019a94:	4961      	ldr	r1, [pc, #388]	; (8019c1c <tcp_receive+0xb14>)
 8019a96:	4862      	ldr	r0, [pc, #392]	; (8019c20 <tcp_receive+0xb18>)
 8019a98:	f007 fdac 	bl	80215f4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019aa0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8019aa2:	4b5a      	ldr	r3, [pc, #360]	; (8019c0c <tcp_receive+0xb04>)
 8019aa4:	881b      	ldrh	r3, [r3, #0]
 8019aa6:	461a      	mov	r2, r3
 8019aa8:	4b59      	ldr	r3, [pc, #356]	; (8019c10 <tcp_receive+0xb08>)
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	441a      	add	r2, r3
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019ab6:	4b55      	ldr	r3, [pc, #340]	; (8019c0c <tcp_receive+0xb04>)
 8019ab8:	881b      	ldrh	r3, [r3, #0]
 8019aba:	429a      	cmp	r2, r3
 8019abc:	d206      	bcs.n	8019acc <tcp_receive+0x9c4>
 8019abe:	4b56      	ldr	r3, [pc, #344]	; (8019c18 <tcp_receive+0xb10>)
 8019ac0:	f240 6207 	movw	r2, #1543	; 0x607
 8019ac4:	4957      	ldr	r1, [pc, #348]	; (8019c24 <tcp_receive+0xb1c>)
 8019ac6:	4856      	ldr	r0, [pc, #344]	; (8019c20 <tcp_receive+0xb18>)
 8019ac8:	f007 fd94 	bl	80215f4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019ad0:	4b4e      	ldr	r3, [pc, #312]	; (8019c0c <tcp_receive+0xb04>)
 8019ad2:	881b      	ldrh	r3, [r3, #0]
 8019ad4:	1ad3      	subs	r3, r2, r3
 8019ad6:	b29a      	uxth	r2, r3
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8019adc:	6878      	ldr	r0, [r7, #4]
 8019ade:	f7fc ffcd 	bl	8016a7c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8019ae2:	4b4c      	ldr	r3, [pc, #304]	; (8019c14 <tcp_receive+0xb0c>)
 8019ae4:	685b      	ldr	r3, [r3, #4]
 8019ae6:	891b      	ldrh	r3, [r3, #8]
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d006      	beq.n	8019afa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8019aec:	4b49      	ldr	r3, [pc, #292]	; (8019c14 <tcp_receive+0xb0c>)
 8019aee:	685b      	ldr	r3, [r3, #4]
 8019af0:	4a4d      	ldr	r2, [pc, #308]	; (8019c28 <tcp_receive+0xb20>)
 8019af2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8019af4:	4b47      	ldr	r3, [pc, #284]	; (8019c14 <tcp_receive+0xb0c>)
 8019af6:	2200      	movs	r2, #0
 8019af8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019afa:	4b46      	ldr	r3, [pc, #280]	; (8019c14 <tcp_receive+0xb0c>)
 8019afc:	68db      	ldr	r3, [r3, #12]
 8019afe:	899b      	ldrh	r3, [r3, #12]
 8019b00:	b29b      	uxth	r3, r3
 8019b02:	4618      	mov	r0, r3
 8019b04:	f7fa fe44 	bl	8014790 <lwip_htons>
 8019b08:	4603      	mov	r3, r0
 8019b0a:	b2db      	uxtb	r3, r3
 8019b0c:	f003 0301 	and.w	r3, r3, #1
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	f000 80b8 	beq.w	8019c86 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8019b16:	4b45      	ldr	r3, [pc, #276]	; (8019c2c <tcp_receive+0xb24>)
 8019b18:	781b      	ldrb	r3, [r3, #0]
 8019b1a:	f043 0320 	orr.w	r3, r3, #32
 8019b1e:	b2da      	uxtb	r2, r3
 8019b20:	4b42      	ldr	r3, [pc, #264]	; (8019c2c <tcp_receive+0xb24>)
 8019b22:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8019b24:	e0af      	b.n	8019c86 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019b2a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019b30:	68db      	ldr	r3, [r3, #12]
 8019b32:	685b      	ldr	r3, [r3, #4]
 8019b34:	4a36      	ldr	r2, [pc, #216]	; (8019c10 <tcp_receive+0xb08>)
 8019b36:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019b38:	68bb      	ldr	r3, [r7, #8]
 8019b3a:	891b      	ldrh	r3, [r3, #8]
 8019b3c:	461c      	mov	r4, r3
 8019b3e:	68bb      	ldr	r3, [r7, #8]
 8019b40:	68db      	ldr	r3, [r3, #12]
 8019b42:	899b      	ldrh	r3, [r3, #12]
 8019b44:	b29b      	uxth	r3, r3
 8019b46:	4618      	mov	r0, r3
 8019b48:	f7fa fe22 	bl	8014790 <lwip_htons>
 8019b4c:	4603      	mov	r3, r0
 8019b4e:	b2db      	uxtb	r3, r3
 8019b50:	f003 0303 	and.w	r3, r3, #3
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d001      	beq.n	8019b5c <tcp_receive+0xa54>
 8019b58:	2301      	movs	r3, #1
 8019b5a:	e000      	b.n	8019b5e <tcp_receive+0xa56>
 8019b5c:	2300      	movs	r3, #0
 8019b5e:	191a      	adds	r2, r3, r4
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b64:	441a      	add	r2, r3
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019b6e:	461c      	mov	r4, r3
 8019b70:	68bb      	ldr	r3, [r7, #8]
 8019b72:	891b      	ldrh	r3, [r3, #8]
 8019b74:	461d      	mov	r5, r3
 8019b76:	68bb      	ldr	r3, [r7, #8]
 8019b78:	68db      	ldr	r3, [r3, #12]
 8019b7a:	899b      	ldrh	r3, [r3, #12]
 8019b7c:	b29b      	uxth	r3, r3
 8019b7e:	4618      	mov	r0, r3
 8019b80:	f7fa fe06 	bl	8014790 <lwip_htons>
 8019b84:	4603      	mov	r3, r0
 8019b86:	b2db      	uxtb	r3, r3
 8019b88:	f003 0303 	and.w	r3, r3, #3
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d001      	beq.n	8019b94 <tcp_receive+0xa8c>
 8019b90:	2301      	movs	r3, #1
 8019b92:	e000      	b.n	8019b96 <tcp_receive+0xa8e>
 8019b94:	2300      	movs	r3, #0
 8019b96:	442b      	add	r3, r5
 8019b98:	429c      	cmp	r4, r3
 8019b9a:	d206      	bcs.n	8019baa <tcp_receive+0xaa2>
 8019b9c:	4b1e      	ldr	r3, [pc, #120]	; (8019c18 <tcp_receive+0xb10>)
 8019b9e:	f240 622c 	movw	r2, #1580	; 0x62c
 8019ba2:	4923      	ldr	r1, [pc, #140]	; (8019c30 <tcp_receive+0xb28>)
 8019ba4:	481e      	ldr	r0, [pc, #120]	; (8019c20 <tcp_receive+0xb18>)
 8019ba6:	f007 fd25 	bl	80215f4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8019baa:	68bb      	ldr	r3, [r7, #8]
 8019bac:	891b      	ldrh	r3, [r3, #8]
 8019bae:	461c      	mov	r4, r3
 8019bb0:	68bb      	ldr	r3, [r7, #8]
 8019bb2:	68db      	ldr	r3, [r3, #12]
 8019bb4:	899b      	ldrh	r3, [r3, #12]
 8019bb6:	b29b      	uxth	r3, r3
 8019bb8:	4618      	mov	r0, r3
 8019bba:	f7fa fde9 	bl	8014790 <lwip_htons>
 8019bbe:	4603      	mov	r3, r0
 8019bc0:	b2db      	uxtb	r3, r3
 8019bc2:	f003 0303 	and.w	r3, r3, #3
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d001      	beq.n	8019bce <tcp_receive+0xac6>
 8019bca:	2301      	movs	r3, #1
 8019bcc:	e000      	b.n	8019bd0 <tcp_receive+0xac8>
 8019bce:	2300      	movs	r3, #0
 8019bd0:	1919      	adds	r1, r3, r4
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019bd6:	b28b      	uxth	r3, r1
 8019bd8:	1ad3      	subs	r3, r2, r3
 8019bda:	b29a      	uxth	r2, r3
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8019be0:	6878      	ldr	r0, [r7, #4]
 8019be2:	f7fc ff4b 	bl	8016a7c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8019be6:	68bb      	ldr	r3, [r7, #8]
 8019be8:	685b      	ldr	r3, [r3, #4]
 8019bea:	891b      	ldrh	r3, [r3, #8]
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d028      	beq.n	8019c42 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8019bf0:	4b0d      	ldr	r3, [pc, #52]	; (8019c28 <tcp_receive+0xb20>)
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d01d      	beq.n	8019c34 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8019bf8:	4b0b      	ldr	r3, [pc, #44]	; (8019c28 <tcp_receive+0xb20>)
 8019bfa:	681a      	ldr	r2, [r3, #0]
 8019bfc:	68bb      	ldr	r3, [r7, #8]
 8019bfe:	685b      	ldr	r3, [r3, #4]
 8019c00:	4619      	mov	r1, r3
 8019c02:	4610      	mov	r0, r2
 8019c04:	f7fc fa60 	bl	80160c8 <pbuf_cat>
 8019c08:	e018      	b.n	8019c3c <tcp_receive+0xb34>
 8019c0a:	bf00      	nop
 8019c0c:	20008fea 	.word	0x20008fea
 8019c10:	20008fe0 	.word	0x20008fe0
 8019c14:	20008fc0 	.word	0x20008fc0
 8019c18:	08023874 	.word	0x08023874
 8019c1c:	08023c54 	.word	0x08023c54
 8019c20:	080238c0 	.word	0x080238c0
 8019c24:	08023c90 	.word	0x08023c90
 8019c28:	20008ff0 	.word	0x20008ff0
 8019c2c:	20008fed 	.word	0x20008fed
 8019c30:	08023cb0 	.word	0x08023cb0
            } else {
              recv_data = cseg->p;
 8019c34:	68bb      	ldr	r3, [r7, #8]
 8019c36:	685b      	ldr	r3, [r3, #4]
 8019c38:	4a70      	ldr	r2, [pc, #448]	; (8019dfc <tcp_receive+0xcf4>)
 8019c3a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8019c3c:	68bb      	ldr	r3, [r7, #8]
 8019c3e:	2200      	movs	r2, #0
 8019c40:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019c42:	68bb      	ldr	r3, [r7, #8]
 8019c44:	68db      	ldr	r3, [r3, #12]
 8019c46:	899b      	ldrh	r3, [r3, #12]
 8019c48:	b29b      	uxth	r3, r3
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	f7fa fda0 	bl	8014790 <lwip_htons>
 8019c50:	4603      	mov	r3, r0
 8019c52:	b2db      	uxtb	r3, r3
 8019c54:	f003 0301 	and.w	r3, r3, #1
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d00d      	beq.n	8019c78 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8019c5c:	4b68      	ldr	r3, [pc, #416]	; (8019e00 <tcp_receive+0xcf8>)
 8019c5e:	781b      	ldrb	r3, [r3, #0]
 8019c60:	f043 0320 	orr.w	r3, r3, #32
 8019c64:	b2da      	uxtb	r2, r3
 8019c66:	4b66      	ldr	r3, [pc, #408]	; (8019e00 <tcp_receive+0xcf8>)
 8019c68:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	7d1b      	ldrb	r3, [r3, #20]
 8019c6e:	2b04      	cmp	r3, #4
 8019c70:	d102      	bne.n	8019c78 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	2207      	movs	r2, #7
 8019c76:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8019c78:	68bb      	ldr	r3, [r7, #8]
 8019c7a:	681a      	ldr	r2, [r3, #0]
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8019c80:	68b8      	ldr	r0, [r7, #8]
 8019c82:	f7fd fbd7 	bl	8017434 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d008      	beq.n	8019ca0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019c92:	68db      	ldr	r3, [r3, #12]
 8019c94:	685a      	ldr	r2, [r3, #4]
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8019c9a:	429a      	cmp	r2, r3
 8019c9c:	f43f af43 	beq.w	8019b26 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	8b5b      	ldrh	r3, [r3, #26]
 8019ca4:	f003 0301 	and.w	r3, r3, #1
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d00e      	beq.n	8019cca <tcp_receive+0xbc2>
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	8b5b      	ldrh	r3, [r3, #26]
 8019cb0:	f023 0301 	bic.w	r3, r3, #1
 8019cb4:	b29a      	uxth	r2, r3
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	835a      	strh	r2, [r3, #26]
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	8b5b      	ldrh	r3, [r3, #26]
 8019cbe:	f043 0302 	orr.w	r3, r3, #2
 8019cc2:	b29a      	uxth	r2, r3
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019cc8:	e188      	b.n	8019fdc <tcp_receive+0xed4>
        tcp_ack(pcb);
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	8b5b      	ldrh	r3, [r3, #26]
 8019cce:	f043 0301 	orr.w	r3, r3, #1
 8019cd2:	b29a      	uxth	r2, r3
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019cd8:	e180      	b.n	8019fdc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d106      	bne.n	8019cf0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8019ce2:	4848      	ldr	r0, [pc, #288]	; (8019e04 <tcp_receive+0xcfc>)
 8019ce4:	f7fd fbbe 	bl	8017464 <tcp_seg_copy>
 8019ce8:	4602      	mov	r2, r0
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	675a      	str	r2, [r3, #116]	; 0x74
 8019cee:	e16d      	b.n	8019fcc <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8019cf0:	2300      	movs	r3, #0
 8019cf2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019cf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8019cfa:	e157      	b.n	8019fac <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8019cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019cfe:	68db      	ldr	r3, [r3, #12]
 8019d00:	685a      	ldr	r2, [r3, #4]
 8019d02:	4b41      	ldr	r3, [pc, #260]	; (8019e08 <tcp_receive+0xd00>)
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	429a      	cmp	r2, r3
 8019d08:	d11d      	bne.n	8019d46 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8019d0a:	4b3e      	ldr	r3, [pc, #248]	; (8019e04 <tcp_receive+0xcfc>)
 8019d0c:	891a      	ldrh	r2, [r3, #8]
 8019d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d10:	891b      	ldrh	r3, [r3, #8]
 8019d12:	429a      	cmp	r2, r3
 8019d14:	f240 814f 	bls.w	8019fb6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019d18:	483a      	ldr	r0, [pc, #232]	; (8019e04 <tcp_receive+0xcfc>)
 8019d1a:	f7fd fba3 	bl	8017464 <tcp_seg_copy>
 8019d1e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8019d20:	697b      	ldr	r3, [r7, #20]
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	f000 8149 	beq.w	8019fba <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8019d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	d003      	beq.n	8019d36 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8019d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d30:	697a      	ldr	r2, [r7, #20]
 8019d32:	601a      	str	r2, [r3, #0]
 8019d34:	e002      	b.n	8019d3c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	697a      	ldr	r2, [r7, #20]
 8019d3a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8019d3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019d3e:	6978      	ldr	r0, [r7, #20]
 8019d40:	f7ff f8de 	bl	8018f00 <tcp_oos_insert_segment>
                }
                break;
 8019d44:	e139      	b.n	8019fba <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8019d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d117      	bne.n	8019d7c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8019d4c:	4b2e      	ldr	r3, [pc, #184]	; (8019e08 <tcp_receive+0xd00>)
 8019d4e:	681a      	ldr	r2, [r3, #0]
 8019d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d52:	68db      	ldr	r3, [r3, #12]
 8019d54:	685b      	ldr	r3, [r3, #4]
 8019d56:	1ad3      	subs	r3, r2, r3
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	da57      	bge.n	8019e0c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019d5c:	4829      	ldr	r0, [pc, #164]	; (8019e04 <tcp_receive+0xcfc>)
 8019d5e:	f7fd fb81 	bl	8017464 <tcp_seg_copy>
 8019d62:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8019d64:	69bb      	ldr	r3, [r7, #24]
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	f000 8129 	beq.w	8019fbe <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	69ba      	ldr	r2, [r7, #24]
 8019d70:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8019d72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019d74:	69b8      	ldr	r0, [r7, #24]
 8019d76:	f7ff f8c3 	bl	8018f00 <tcp_oos_insert_segment>
                  }
                  break;
 8019d7a:	e120      	b.n	8019fbe <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019d7c:	4b22      	ldr	r3, [pc, #136]	; (8019e08 <tcp_receive+0xd00>)
 8019d7e:	681a      	ldr	r2, [r3, #0]
 8019d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d82:	68db      	ldr	r3, [r3, #12]
 8019d84:	685b      	ldr	r3, [r3, #4]
 8019d86:	1ad3      	subs	r3, r2, r3
 8019d88:	3b01      	subs	r3, #1
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	db3e      	blt.n	8019e0c <tcp_receive+0xd04>
 8019d8e:	4b1e      	ldr	r3, [pc, #120]	; (8019e08 <tcp_receive+0xd00>)
 8019d90:	681a      	ldr	r2, [r3, #0]
 8019d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d94:	68db      	ldr	r3, [r3, #12]
 8019d96:	685b      	ldr	r3, [r3, #4]
 8019d98:	1ad3      	subs	r3, r2, r3
 8019d9a:	3301      	adds	r3, #1
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	dc35      	bgt.n	8019e0c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019da0:	4818      	ldr	r0, [pc, #96]	; (8019e04 <tcp_receive+0xcfc>)
 8019da2:	f7fd fb5f 	bl	8017464 <tcp_seg_copy>
 8019da6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8019da8:	69fb      	ldr	r3, [r7, #28]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	f000 8109 	beq.w	8019fc2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8019db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019db2:	68db      	ldr	r3, [r3, #12]
 8019db4:	685b      	ldr	r3, [r3, #4]
 8019db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019db8:	8912      	ldrh	r2, [r2, #8]
 8019dba:	441a      	add	r2, r3
 8019dbc:	4b12      	ldr	r3, [pc, #72]	; (8019e08 <tcp_receive+0xd00>)
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	1ad3      	subs	r3, r2, r3
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	dd12      	ble.n	8019dec <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8019dc6:	4b10      	ldr	r3, [pc, #64]	; (8019e08 <tcp_receive+0xd00>)
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	b29a      	uxth	r2, r3
 8019dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019dce:	68db      	ldr	r3, [r3, #12]
 8019dd0:	685b      	ldr	r3, [r3, #4]
 8019dd2:	b29b      	uxth	r3, r3
 8019dd4:	1ad3      	subs	r3, r2, r3
 8019dd6:	b29a      	uxth	r2, r3
 8019dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019dda:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019dde:	685a      	ldr	r2, [r3, #4]
 8019de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019de2:	891b      	ldrh	r3, [r3, #8]
 8019de4:	4619      	mov	r1, r3
 8019de6:	4610      	mov	r0, r2
 8019de8:	f7fb ff1a 	bl	8015c20 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019dee:	69fa      	ldr	r2, [r7, #28]
 8019df0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8019df2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019df4:	69f8      	ldr	r0, [r7, #28]
 8019df6:	f7ff f883 	bl	8018f00 <tcp_oos_insert_segment>
                  }
                  break;
 8019dfa:	e0e2      	b.n	8019fc2 <tcp_receive+0xeba>
 8019dfc:	20008ff0 	.word	0x20008ff0
 8019e00:	20008fed 	.word	0x20008fed
 8019e04:	20008fc0 	.word	0x20008fc0
 8019e08:	20008fe0 	.word	0x20008fe0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8019e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e0e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8019e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	f040 80c6 	bne.w	8019fa6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8019e1a:	4b80      	ldr	r3, [pc, #512]	; (801a01c <tcp_receive+0xf14>)
 8019e1c:	681a      	ldr	r2, [r3, #0]
 8019e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e20:	68db      	ldr	r3, [r3, #12]
 8019e22:	685b      	ldr	r3, [r3, #4]
 8019e24:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	f340 80bd 	ble.w	8019fa6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e2e:	68db      	ldr	r3, [r3, #12]
 8019e30:	899b      	ldrh	r3, [r3, #12]
 8019e32:	b29b      	uxth	r3, r3
 8019e34:	4618      	mov	r0, r3
 8019e36:	f7fa fcab 	bl	8014790 <lwip_htons>
 8019e3a:	4603      	mov	r3, r0
 8019e3c:	b2db      	uxtb	r3, r3
 8019e3e:	f003 0301 	and.w	r3, r3, #1
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	f040 80bf 	bne.w	8019fc6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8019e48:	4875      	ldr	r0, [pc, #468]	; (801a020 <tcp_receive+0xf18>)
 8019e4a:	f7fd fb0b 	bl	8017464 <tcp_seg_copy>
 8019e4e:	4602      	mov	r2, r0
 8019e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e52:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8019e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	f000 80b6 	beq.w	8019fca <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8019e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e60:	68db      	ldr	r3, [r3, #12]
 8019e62:	685b      	ldr	r3, [r3, #4]
 8019e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019e66:	8912      	ldrh	r2, [r2, #8]
 8019e68:	441a      	add	r2, r3
 8019e6a:	4b6c      	ldr	r3, [pc, #432]	; (801a01c <tcp_receive+0xf14>)
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	1ad3      	subs	r3, r2, r3
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	dd12      	ble.n	8019e9a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019e74:	4b69      	ldr	r3, [pc, #420]	; (801a01c <tcp_receive+0xf14>)
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	b29a      	uxth	r2, r3
 8019e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e7c:	68db      	ldr	r3, [r3, #12]
 8019e7e:	685b      	ldr	r3, [r3, #4]
 8019e80:	b29b      	uxth	r3, r3
 8019e82:	1ad3      	subs	r3, r2, r3
 8019e84:	b29a      	uxth	r2, r3
 8019e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e88:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8019e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e8c:	685a      	ldr	r2, [r3, #4]
 8019e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e90:	891b      	ldrh	r3, [r3, #8]
 8019e92:	4619      	mov	r1, r3
 8019e94:	4610      	mov	r0, r2
 8019e96:	f7fb fec3 	bl	8015c20 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019e9a:	4b62      	ldr	r3, [pc, #392]	; (801a024 <tcp_receive+0xf1c>)
 8019e9c:	881b      	ldrh	r3, [r3, #0]
 8019e9e:	461a      	mov	r2, r3
 8019ea0:	4b5e      	ldr	r3, [pc, #376]	; (801a01c <tcp_receive+0xf14>)
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	441a      	add	r2, r3
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019eaa:	6879      	ldr	r1, [r7, #4]
 8019eac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019eae:	440b      	add	r3, r1
 8019eb0:	1ad3      	subs	r3, r2, r3
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	f340 8089 	ble.w	8019fca <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	68db      	ldr	r3, [r3, #12]
 8019ebe:	899b      	ldrh	r3, [r3, #12]
 8019ec0:	b29b      	uxth	r3, r3
 8019ec2:	4618      	mov	r0, r3
 8019ec4:	f7fa fc64 	bl	8014790 <lwip_htons>
 8019ec8:	4603      	mov	r3, r0
 8019eca:	b2db      	uxtb	r3, r3
 8019ecc:	f003 0301 	and.w	r3, r3, #1
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d022      	beq.n	8019f1a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	68db      	ldr	r3, [r3, #12]
 8019eda:	899b      	ldrh	r3, [r3, #12]
 8019edc:	b29b      	uxth	r3, r3
 8019ede:	b21b      	sxth	r3, r3
 8019ee0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019ee4:	b21c      	sxth	r4, r3
 8019ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	68db      	ldr	r3, [r3, #12]
 8019eec:	899b      	ldrh	r3, [r3, #12]
 8019eee:	b29b      	uxth	r3, r3
 8019ef0:	4618      	mov	r0, r3
 8019ef2:	f7fa fc4d 	bl	8014790 <lwip_htons>
 8019ef6:	4603      	mov	r3, r0
 8019ef8:	b2db      	uxtb	r3, r3
 8019efa:	b29b      	uxth	r3, r3
 8019efc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019f00:	b29b      	uxth	r3, r3
 8019f02:	4618      	mov	r0, r3
 8019f04:	f7fa fc44 	bl	8014790 <lwip_htons>
 8019f08:	4603      	mov	r3, r0
 8019f0a:	b21b      	sxth	r3, r3
 8019f0c:	4323      	orrs	r3, r4
 8019f0e:	b21a      	sxth	r2, r3
 8019f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	68db      	ldr	r3, [r3, #12]
 8019f16:	b292      	uxth	r2, r2
 8019f18:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f1e:	b29a      	uxth	r2, r3
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019f24:	4413      	add	r3, r2
 8019f26:	b299      	uxth	r1, r3
 8019f28:	4b3c      	ldr	r3, [pc, #240]	; (801a01c <tcp_receive+0xf14>)
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	b29a      	uxth	r2, r3
 8019f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	1a8a      	subs	r2, r1, r2
 8019f34:	b292      	uxth	r2, r2
 8019f36:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8019f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	685a      	ldr	r2, [r3, #4]
 8019f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	891b      	ldrh	r3, [r3, #8]
 8019f44:	4619      	mov	r1, r3
 8019f46:	4610      	mov	r0, r2
 8019f48:	f7fb fe6a 	bl	8015c20 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	891c      	ldrh	r4, [r3, #8]
 8019f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	68db      	ldr	r3, [r3, #12]
 8019f58:	899b      	ldrh	r3, [r3, #12]
 8019f5a:	b29b      	uxth	r3, r3
 8019f5c:	4618      	mov	r0, r3
 8019f5e:	f7fa fc17 	bl	8014790 <lwip_htons>
 8019f62:	4603      	mov	r3, r0
 8019f64:	b2db      	uxtb	r3, r3
 8019f66:	f003 0303 	and.w	r3, r3, #3
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d001      	beq.n	8019f72 <tcp_receive+0xe6a>
 8019f6e:	2301      	movs	r3, #1
 8019f70:	e000      	b.n	8019f74 <tcp_receive+0xe6c>
 8019f72:	2300      	movs	r3, #0
 8019f74:	4423      	add	r3, r4
 8019f76:	b29a      	uxth	r2, r3
 8019f78:	4b2a      	ldr	r3, [pc, #168]	; (801a024 <tcp_receive+0xf1c>)
 8019f7a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019f7c:	4b29      	ldr	r3, [pc, #164]	; (801a024 <tcp_receive+0xf1c>)
 8019f7e:	881b      	ldrh	r3, [r3, #0]
 8019f80:	461a      	mov	r2, r3
 8019f82:	4b26      	ldr	r3, [pc, #152]	; (801a01c <tcp_receive+0xf14>)
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	441a      	add	r2, r3
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f8c:	6879      	ldr	r1, [r7, #4]
 8019f8e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019f90:	440b      	add	r3, r1
 8019f92:	429a      	cmp	r2, r3
 8019f94:	d019      	beq.n	8019fca <tcp_receive+0xec2>
 8019f96:	4b24      	ldr	r3, [pc, #144]	; (801a028 <tcp_receive+0xf20>)
 8019f98:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8019f9c:	4923      	ldr	r1, [pc, #140]	; (801a02c <tcp_receive+0xf24>)
 8019f9e:	4824      	ldr	r0, [pc, #144]	; (801a030 <tcp_receive+0xf28>)
 8019fa0:	f007 fb28 	bl	80215f4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8019fa4:	e011      	b.n	8019fca <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	63bb      	str	r3, [r7, #56]	; 0x38
 8019fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	f47f aea4 	bne.w	8019cfc <tcp_receive+0xbf4>
 8019fb4:	e00a      	b.n	8019fcc <tcp_receive+0xec4>
                break;
 8019fb6:	bf00      	nop
 8019fb8:	e008      	b.n	8019fcc <tcp_receive+0xec4>
                break;
 8019fba:	bf00      	nop
 8019fbc:	e006      	b.n	8019fcc <tcp_receive+0xec4>
                  break;
 8019fbe:	bf00      	nop
 8019fc0:	e004      	b.n	8019fcc <tcp_receive+0xec4>
                  break;
 8019fc2:	bf00      	nop
 8019fc4:	e002      	b.n	8019fcc <tcp_receive+0xec4>
                  break;
 8019fc6:	bf00      	nop
 8019fc8:	e000      	b.n	8019fcc <tcp_receive+0xec4>
                break;
 8019fca:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8019fcc:	6878      	ldr	r0, [r7, #4]
 8019fce:	f001 fa43 	bl	801b458 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8019fd2:	e003      	b.n	8019fdc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8019fd4:	6878      	ldr	r0, [r7, #4]
 8019fd6:	f001 fa3f 	bl	801b458 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019fda:	e01a      	b.n	801a012 <tcp_receive+0xf0a>
 8019fdc:	e019      	b.n	801a012 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8019fde:	4b0f      	ldr	r3, [pc, #60]	; (801a01c <tcp_receive+0xf14>)
 8019fe0:	681a      	ldr	r2, [r3, #0]
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fe6:	1ad3      	subs	r3, r2, r3
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	db0a      	blt.n	801a002 <tcp_receive+0xefa>
 8019fec:	4b0b      	ldr	r3, [pc, #44]	; (801a01c <tcp_receive+0xf14>)
 8019fee:	681a      	ldr	r2, [r3, #0]
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ff4:	6879      	ldr	r1, [r7, #4]
 8019ff6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019ff8:	440b      	add	r3, r1
 8019ffa:	1ad3      	subs	r3, r2, r3
 8019ffc:	3301      	adds	r3, #1
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	dd07      	ble.n	801a012 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	8b5b      	ldrh	r3, [r3, #26]
 801a006:	f043 0302 	orr.w	r3, r3, #2
 801a00a:	b29a      	uxth	r2, r3
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801a010:	e7ff      	b.n	801a012 <tcp_receive+0xf0a>
 801a012:	bf00      	nop
 801a014:	3750      	adds	r7, #80	; 0x50
 801a016:	46bd      	mov	sp, r7
 801a018:	bdb0      	pop	{r4, r5, r7, pc}
 801a01a:	bf00      	nop
 801a01c:	20008fe0 	.word	0x20008fe0
 801a020:	20008fc0 	.word	0x20008fc0
 801a024:	20008fea 	.word	0x20008fea
 801a028:	08023874 	.word	0x08023874
 801a02c:	08023c1c 	.word	0x08023c1c
 801a030:	080238c0 	.word	0x080238c0

0801a034 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801a034:	b480      	push	{r7}
 801a036:	b083      	sub	sp, #12
 801a038:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801a03a:	4b15      	ldr	r3, [pc, #84]	; (801a090 <tcp_get_next_optbyte+0x5c>)
 801a03c:	881b      	ldrh	r3, [r3, #0]
 801a03e:	1c5a      	adds	r2, r3, #1
 801a040:	b291      	uxth	r1, r2
 801a042:	4a13      	ldr	r2, [pc, #76]	; (801a090 <tcp_get_next_optbyte+0x5c>)
 801a044:	8011      	strh	r1, [r2, #0]
 801a046:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a048:	4b12      	ldr	r3, [pc, #72]	; (801a094 <tcp_get_next_optbyte+0x60>)
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d004      	beq.n	801a05a <tcp_get_next_optbyte+0x26>
 801a050:	4b11      	ldr	r3, [pc, #68]	; (801a098 <tcp_get_next_optbyte+0x64>)
 801a052:	881b      	ldrh	r3, [r3, #0]
 801a054:	88fa      	ldrh	r2, [r7, #6]
 801a056:	429a      	cmp	r2, r3
 801a058:	d208      	bcs.n	801a06c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a05a:	4b10      	ldr	r3, [pc, #64]	; (801a09c <tcp_get_next_optbyte+0x68>)
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	3314      	adds	r3, #20
 801a060:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801a062:	88fb      	ldrh	r3, [r7, #6]
 801a064:	683a      	ldr	r2, [r7, #0]
 801a066:	4413      	add	r3, r2
 801a068:	781b      	ldrb	r3, [r3, #0]
 801a06a:	e00b      	b.n	801a084 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a06c:	88fb      	ldrh	r3, [r7, #6]
 801a06e:	b2da      	uxtb	r2, r3
 801a070:	4b09      	ldr	r3, [pc, #36]	; (801a098 <tcp_get_next_optbyte+0x64>)
 801a072:	881b      	ldrh	r3, [r3, #0]
 801a074:	b2db      	uxtb	r3, r3
 801a076:	1ad3      	subs	r3, r2, r3
 801a078:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801a07a:	4b06      	ldr	r3, [pc, #24]	; (801a094 <tcp_get_next_optbyte+0x60>)
 801a07c:	681a      	ldr	r2, [r3, #0]
 801a07e:	797b      	ldrb	r3, [r7, #5]
 801a080:	4413      	add	r3, r2
 801a082:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a084:	4618      	mov	r0, r3
 801a086:	370c      	adds	r7, #12
 801a088:	46bd      	mov	sp, r7
 801a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a08e:	4770      	bx	lr
 801a090:	20008fdc 	.word	0x20008fdc
 801a094:	20008fd8 	.word	0x20008fd8
 801a098:	20008fd6 	.word	0x20008fd6
 801a09c:	20008fd0 	.word	0x20008fd0

0801a0a0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b084      	sub	sp, #16
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d106      	bne.n	801a0bc <tcp_parseopt+0x1c>
 801a0ae:	4b31      	ldr	r3, [pc, #196]	; (801a174 <tcp_parseopt+0xd4>)
 801a0b0:	f240 727d 	movw	r2, #1917	; 0x77d
 801a0b4:	4930      	ldr	r1, [pc, #192]	; (801a178 <tcp_parseopt+0xd8>)
 801a0b6:	4831      	ldr	r0, [pc, #196]	; (801a17c <tcp_parseopt+0xdc>)
 801a0b8:	f007 fa9c 	bl	80215f4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a0bc:	4b30      	ldr	r3, [pc, #192]	; (801a180 <tcp_parseopt+0xe0>)
 801a0be:	881b      	ldrh	r3, [r3, #0]
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d053      	beq.n	801a16c <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a0c4:	4b2f      	ldr	r3, [pc, #188]	; (801a184 <tcp_parseopt+0xe4>)
 801a0c6:	2200      	movs	r2, #0
 801a0c8:	801a      	strh	r2, [r3, #0]
 801a0ca:	e043      	b.n	801a154 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 801a0cc:	f7ff ffb2 	bl	801a034 <tcp_get_next_optbyte>
 801a0d0:	4603      	mov	r3, r0
 801a0d2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a0d4:	7bfb      	ldrb	r3, [r7, #15]
 801a0d6:	2b01      	cmp	r3, #1
 801a0d8:	d03c      	beq.n	801a154 <tcp_parseopt+0xb4>
 801a0da:	2b02      	cmp	r3, #2
 801a0dc:	d002      	beq.n	801a0e4 <tcp_parseopt+0x44>
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d03f      	beq.n	801a162 <tcp_parseopt+0xc2>
 801a0e2:	e026      	b.n	801a132 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a0e4:	f7ff ffa6 	bl	801a034 <tcp_get_next_optbyte>
 801a0e8:	4603      	mov	r3, r0
 801a0ea:	2b04      	cmp	r3, #4
 801a0ec:	d13b      	bne.n	801a166 <tcp_parseopt+0xc6>
 801a0ee:	4b25      	ldr	r3, [pc, #148]	; (801a184 <tcp_parseopt+0xe4>)
 801a0f0:	881b      	ldrh	r3, [r3, #0]
 801a0f2:	3302      	adds	r3, #2
 801a0f4:	4a22      	ldr	r2, [pc, #136]	; (801a180 <tcp_parseopt+0xe0>)
 801a0f6:	8812      	ldrh	r2, [r2, #0]
 801a0f8:	4293      	cmp	r3, r2
 801a0fa:	dc34      	bgt.n	801a166 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a0fc:	f7ff ff9a 	bl	801a034 <tcp_get_next_optbyte>
 801a100:	4603      	mov	r3, r0
 801a102:	b29b      	uxth	r3, r3
 801a104:	021b      	lsls	r3, r3, #8
 801a106:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801a108:	f7ff ff94 	bl	801a034 <tcp_get_next_optbyte>
 801a10c:	4603      	mov	r3, r0
 801a10e:	b29a      	uxth	r2, r3
 801a110:	89bb      	ldrh	r3, [r7, #12]
 801a112:	4313      	orrs	r3, r2
 801a114:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a116:	89bb      	ldrh	r3, [r7, #12]
 801a118:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a11c:	d804      	bhi.n	801a128 <tcp_parseopt+0x88>
 801a11e:	89bb      	ldrh	r3, [r7, #12]
 801a120:	2b00      	cmp	r3, #0
 801a122:	d001      	beq.n	801a128 <tcp_parseopt+0x88>
 801a124:	89ba      	ldrh	r2, [r7, #12]
 801a126:	e001      	b.n	801a12c <tcp_parseopt+0x8c>
 801a128:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801a130:	e010      	b.n	801a154 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801a132:	f7ff ff7f 	bl	801a034 <tcp_get_next_optbyte>
 801a136:	4603      	mov	r3, r0
 801a138:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801a13a:	7afb      	ldrb	r3, [r7, #11]
 801a13c:	2b01      	cmp	r3, #1
 801a13e:	d914      	bls.n	801a16a <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801a140:	7afb      	ldrb	r3, [r7, #11]
 801a142:	b29a      	uxth	r2, r3
 801a144:	4b0f      	ldr	r3, [pc, #60]	; (801a184 <tcp_parseopt+0xe4>)
 801a146:	881b      	ldrh	r3, [r3, #0]
 801a148:	4413      	add	r3, r2
 801a14a:	b29b      	uxth	r3, r3
 801a14c:	3b02      	subs	r3, #2
 801a14e:	b29a      	uxth	r2, r3
 801a150:	4b0c      	ldr	r3, [pc, #48]	; (801a184 <tcp_parseopt+0xe4>)
 801a152:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a154:	4b0b      	ldr	r3, [pc, #44]	; (801a184 <tcp_parseopt+0xe4>)
 801a156:	881a      	ldrh	r2, [r3, #0]
 801a158:	4b09      	ldr	r3, [pc, #36]	; (801a180 <tcp_parseopt+0xe0>)
 801a15a:	881b      	ldrh	r3, [r3, #0]
 801a15c:	429a      	cmp	r2, r3
 801a15e:	d3b5      	bcc.n	801a0cc <tcp_parseopt+0x2c>
 801a160:	e004      	b.n	801a16c <tcp_parseopt+0xcc>
          return;
 801a162:	bf00      	nop
 801a164:	e002      	b.n	801a16c <tcp_parseopt+0xcc>
            return;
 801a166:	bf00      	nop
 801a168:	e000      	b.n	801a16c <tcp_parseopt+0xcc>
            return;
 801a16a:	bf00      	nop
      }
    }
  }
}
 801a16c:	3710      	adds	r7, #16
 801a16e:	46bd      	mov	sp, r7
 801a170:	bd80      	pop	{r7, pc}
 801a172:	bf00      	nop
 801a174:	08023874 	.word	0x08023874
 801a178:	08023cd8 	.word	0x08023cd8
 801a17c:	080238c0 	.word	0x080238c0
 801a180:	20008fd4 	.word	0x20008fd4
 801a184:	20008fdc 	.word	0x20008fdc

0801a188 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a188:	b480      	push	{r7}
 801a18a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a18c:	4b05      	ldr	r3, [pc, #20]	; (801a1a4 <tcp_trigger_input_pcb_close+0x1c>)
 801a18e:	781b      	ldrb	r3, [r3, #0]
 801a190:	f043 0310 	orr.w	r3, r3, #16
 801a194:	b2da      	uxtb	r2, r3
 801a196:	4b03      	ldr	r3, [pc, #12]	; (801a1a4 <tcp_trigger_input_pcb_close+0x1c>)
 801a198:	701a      	strb	r2, [r3, #0]
}
 801a19a:	bf00      	nop
 801a19c:	46bd      	mov	sp, r7
 801a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1a2:	4770      	bx	lr
 801a1a4:	20008fed 	.word	0x20008fed

0801a1a8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b084      	sub	sp, #16
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	60f8      	str	r0, [r7, #12]
 801a1b0:	60b9      	str	r1, [r7, #8]
 801a1b2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d00a      	beq.n	801a1d0 <tcp_route+0x28>
 801a1ba:	68fb      	ldr	r3, [r7, #12]
 801a1bc:	7a1b      	ldrb	r3, [r3, #8]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d006      	beq.n	801a1d0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801a1c2:	68fb      	ldr	r3, [r7, #12]
 801a1c4:	7a1b      	ldrb	r3, [r3, #8]
 801a1c6:	4618      	mov	r0, r3
 801a1c8:	f7fb fb26 	bl	8015818 <netif_get_by_index>
 801a1cc:	4603      	mov	r3, r0
 801a1ce:	e003      	b.n	801a1d8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801a1d0:	6878      	ldr	r0, [r7, #4]
 801a1d2:	f005 f867 	bl	801f2a4 <ip4_route>
 801a1d6:	4603      	mov	r3, r0
  }
}
 801a1d8:	4618      	mov	r0, r3
 801a1da:	3710      	adds	r7, #16
 801a1dc:	46bd      	mov	sp, r7
 801a1de:	bd80      	pop	{r7, pc}

0801a1e0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801a1e0:	b590      	push	{r4, r7, lr}
 801a1e2:	b087      	sub	sp, #28
 801a1e4:	af00      	add	r7, sp, #0
 801a1e6:	60f8      	str	r0, [r7, #12]
 801a1e8:	60b9      	str	r1, [r7, #8]
 801a1ea:	603b      	str	r3, [r7, #0]
 801a1ec:	4613      	mov	r3, r2
 801a1ee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d105      	bne.n	801a202 <tcp_create_segment+0x22>
 801a1f6:	4b44      	ldr	r3, [pc, #272]	; (801a308 <tcp_create_segment+0x128>)
 801a1f8:	22a3      	movs	r2, #163	; 0xa3
 801a1fa:	4944      	ldr	r1, [pc, #272]	; (801a30c <tcp_create_segment+0x12c>)
 801a1fc:	4844      	ldr	r0, [pc, #272]	; (801a310 <tcp_create_segment+0x130>)
 801a1fe:	f007 f9f9 	bl	80215f4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a202:	68bb      	ldr	r3, [r7, #8]
 801a204:	2b00      	cmp	r3, #0
 801a206:	d105      	bne.n	801a214 <tcp_create_segment+0x34>
 801a208:	4b3f      	ldr	r3, [pc, #252]	; (801a308 <tcp_create_segment+0x128>)
 801a20a:	22a4      	movs	r2, #164	; 0xa4
 801a20c:	4941      	ldr	r1, [pc, #260]	; (801a314 <tcp_create_segment+0x134>)
 801a20e:	4840      	ldr	r0, [pc, #256]	; (801a310 <tcp_create_segment+0x130>)
 801a210:	f007 f9f0 	bl	80215f4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a214:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a218:	009b      	lsls	r3, r3, #2
 801a21a:	b2db      	uxtb	r3, r3
 801a21c:	f003 0304 	and.w	r3, r3, #4
 801a220:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a222:	2003      	movs	r0, #3
 801a224:	f7fa ff6a 	bl	80150fc <memp_malloc>
 801a228:	6138      	str	r0, [r7, #16]
 801a22a:	693b      	ldr	r3, [r7, #16]
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	d104      	bne.n	801a23a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a230:	68b8      	ldr	r0, [r7, #8]
 801a232:	f7fb fe7b 	bl	8015f2c <pbuf_free>
    return NULL;
 801a236:	2300      	movs	r3, #0
 801a238:	e061      	b.n	801a2fe <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801a23a:	693b      	ldr	r3, [r7, #16]
 801a23c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a240:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a242:	693b      	ldr	r3, [r7, #16]
 801a244:	2200      	movs	r2, #0
 801a246:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a248:	693b      	ldr	r3, [r7, #16]
 801a24a:	68ba      	ldr	r2, [r7, #8]
 801a24c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a24e:	68bb      	ldr	r3, [r7, #8]
 801a250:	891a      	ldrh	r2, [r3, #8]
 801a252:	7dfb      	ldrb	r3, [r7, #23]
 801a254:	b29b      	uxth	r3, r3
 801a256:	429a      	cmp	r2, r3
 801a258:	d205      	bcs.n	801a266 <tcp_create_segment+0x86>
 801a25a:	4b2b      	ldr	r3, [pc, #172]	; (801a308 <tcp_create_segment+0x128>)
 801a25c:	22b0      	movs	r2, #176	; 0xb0
 801a25e:	492e      	ldr	r1, [pc, #184]	; (801a318 <tcp_create_segment+0x138>)
 801a260:	482b      	ldr	r0, [pc, #172]	; (801a310 <tcp_create_segment+0x130>)
 801a262:	f007 f9c7 	bl	80215f4 <iprintf>
  seg->len = p->tot_len - optlen;
 801a266:	68bb      	ldr	r3, [r7, #8]
 801a268:	891a      	ldrh	r2, [r3, #8]
 801a26a:	7dfb      	ldrb	r3, [r7, #23]
 801a26c:	b29b      	uxth	r3, r3
 801a26e:	1ad3      	subs	r3, r2, r3
 801a270:	b29a      	uxth	r2, r3
 801a272:	693b      	ldr	r3, [r7, #16]
 801a274:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a276:	2114      	movs	r1, #20
 801a278:	68b8      	ldr	r0, [r7, #8]
 801a27a:	f7fb fdc1 	bl	8015e00 <pbuf_add_header>
 801a27e:	4603      	mov	r3, r0
 801a280:	2b00      	cmp	r3, #0
 801a282:	d004      	beq.n	801a28e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801a284:	6938      	ldr	r0, [r7, #16]
 801a286:	f7fd f8d5 	bl	8017434 <tcp_seg_free>
    return NULL;
 801a28a:	2300      	movs	r3, #0
 801a28c:	e037      	b.n	801a2fe <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a28e:	693b      	ldr	r3, [r7, #16]
 801a290:	685b      	ldr	r3, [r3, #4]
 801a292:	685a      	ldr	r2, [r3, #4]
 801a294:	693b      	ldr	r3, [r7, #16]
 801a296:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a298:	68fb      	ldr	r3, [r7, #12]
 801a29a:	8ada      	ldrh	r2, [r3, #22]
 801a29c:	693b      	ldr	r3, [r7, #16]
 801a29e:	68dc      	ldr	r4, [r3, #12]
 801a2a0:	4610      	mov	r0, r2
 801a2a2:	f7fa fa75 	bl	8014790 <lwip_htons>
 801a2a6:	4603      	mov	r3, r0
 801a2a8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	8b1a      	ldrh	r2, [r3, #24]
 801a2ae:	693b      	ldr	r3, [r7, #16]
 801a2b0:	68dc      	ldr	r4, [r3, #12]
 801a2b2:	4610      	mov	r0, r2
 801a2b4:	f7fa fa6c 	bl	8014790 <lwip_htons>
 801a2b8:	4603      	mov	r3, r0
 801a2ba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a2bc:	693b      	ldr	r3, [r7, #16]
 801a2be:	68dc      	ldr	r4, [r3, #12]
 801a2c0:	6838      	ldr	r0, [r7, #0]
 801a2c2:	f7fa fa7a 	bl	80147ba <lwip_htonl>
 801a2c6:	4603      	mov	r3, r0
 801a2c8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a2ca:	7dfb      	ldrb	r3, [r7, #23]
 801a2cc:	089b      	lsrs	r3, r3, #2
 801a2ce:	b2db      	uxtb	r3, r3
 801a2d0:	b29b      	uxth	r3, r3
 801a2d2:	3305      	adds	r3, #5
 801a2d4:	b29b      	uxth	r3, r3
 801a2d6:	031b      	lsls	r3, r3, #12
 801a2d8:	b29a      	uxth	r2, r3
 801a2da:	79fb      	ldrb	r3, [r7, #7]
 801a2dc:	b29b      	uxth	r3, r3
 801a2de:	4313      	orrs	r3, r2
 801a2e0:	b29a      	uxth	r2, r3
 801a2e2:	693b      	ldr	r3, [r7, #16]
 801a2e4:	68dc      	ldr	r4, [r3, #12]
 801a2e6:	4610      	mov	r0, r2
 801a2e8:	f7fa fa52 	bl	8014790 <lwip_htons>
 801a2ec:	4603      	mov	r3, r0
 801a2ee:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a2f0:	693b      	ldr	r3, [r7, #16]
 801a2f2:	68db      	ldr	r3, [r3, #12]
 801a2f4:	2200      	movs	r2, #0
 801a2f6:	749a      	strb	r2, [r3, #18]
 801a2f8:	2200      	movs	r2, #0
 801a2fa:	74da      	strb	r2, [r3, #19]
  return seg;
 801a2fc:	693b      	ldr	r3, [r7, #16]
}
 801a2fe:	4618      	mov	r0, r3
 801a300:	371c      	adds	r7, #28
 801a302:	46bd      	mov	sp, r7
 801a304:	bd90      	pop	{r4, r7, pc}
 801a306:	bf00      	nop
 801a308:	08023cf4 	.word	0x08023cf4
 801a30c:	08023d28 	.word	0x08023d28
 801a310:	08023d48 	.word	0x08023d48
 801a314:	08023d70 	.word	0x08023d70
 801a318:	08023d94 	.word	0x08023d94

0801a31c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801a31c:	b590      	push	{r4, r7, lr}
 801a31e:	b08b      	sub	sp, #44	; 0x2c
 801a320:	af02      	add	r7, sp, #8
 801a322:	6078      	str	r0, [r7, #4]
 801a324:	460b      	mov	r3, r1
 801a326:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801a328:	2300      	movs	r3, #0
 801a32a:	61fb      	str	r3, [r7, #28]
 801a32c:	2300      	movs	r3, #0
 801a32e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801a330:	2300      	movs	r3, #0
 801a332:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	2b00      	cmp	r3, #0
 801a338:	d106      	bne.n	801a348 <tcp_split_unsent_seg+0x2c>
 801a33a:	4b95      	ldr	r3, [pc, #596]	; (801a590 <tcp_split_unsent_seg+0x274>)
 801a33c:	f240 324b 	movw	r2, #843	; 0x34b
 801a340:	4994      	ldr	r1, [pc, #592]	; (801a594 <tcp_split_unsent_seg+0x278>)
 801a342:	4895      	ldr	r0, [pc, #596]	; (801a598 <tcp_split_unsent_seg+0x27c>)
 801a344:	f007 f956 	bl	80215f4 <iprintf>

  useg = pcb->unsent;
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a34c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801a34e:	697b      	ldr	r3, [r7, #20]
 801a350:	2b00      	cmp	r3, #0
 801a352:	d102      	bne.n	801a35a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801a354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a358:	e116      	b.n	801a588 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801a35a:	887b      	ldrh	r3, [r7, #2]
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	d109      	bne.n	801a374 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801a360:	4b8b      	ldr	r3, [pc, #556]	; (801a590 <tcp_split_unsent_seg+0x274>)
 801a362:	f240 3253 	movw	r2, #851	; 0x353
 801a366:	498d      	ldr	r1, [pc, #564]	; (801a59c <tcp_split_unsent_seg+0x280>)
 801a368:	488b      	ldr	r0, [pc, #556]	; (801a598 <tcp_split_unsent_seg+0x27c>)
 801a36a:	f007 f943 	bl	80215f4 <iprintf>
    return ERR_VAL;
 801a36e:	f06f 0305 	mvn.w	r3, #5
 801a372:	e109      	b.n	801a588 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801a374:	697b      	ldr	r3, [r7, #20]
 801a376:	891b      	ldrh	r3, [r3, #8]
 801a378:	887a      	ldrh	r2, [r7, #2]
 801a37a:	429a      	cmp	r2, r3
 801a37c:	d301      	bcc.n	801a382 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801a37e:	2300      	movs	r3, #0
 801a380:	e102      	b.n	801a588 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a386:	887a      	ldrh	r2, [r7, #2]
 801a388:	429a      	cmp	r2, r3
 801a38a:	d906      	bls.n	801a39a <tcp_split_unsent_seg+0x7e>
 801a38c:	4b80      	ldr	r3, [pc, #512]	; (801a590 <tcp_split_unsent_seg+0x274>)
 801a38e:	f240 325b 	movw	r2, #859	; 0x35b
 801a392:	4983      	ldr	r1, [pc, #524]	; (801a5a0 <tcp_split_unsent_seg+0x284>)
 801a394:	4880      	ldr	r0, [pc, #512]	; (801a598 <tcp_split_unsent_seg+0x27c>)
 801a396:	f007 f92d 	bl	80215f4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a39a:	697b      	ldr	r3, [r7, #20]
 801a39c:	891b      	ldrh	r3, [r3, #8]
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d106      	bne.n	801a3b0 <tcp_split_unsent_seg+0x94>
 801a3a2:	4b7b      	ldr	r3, [pc, #492]	; (801a590 <tcp_split_unsent_seg+0x274>)
 801a3a4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801a3a8:	497e      	ldr	r1, [pc, #504]	; (801a5a4 <tcp_split_unsent_seg+0x288>)
 801a3aa:	487b      	ldr	r0, [pc, #492]	; (801a598 <tcp_split_unsent_seg+0x27c>)
 801a3ac:	f007 f922 	bl	80215f4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801a3b0:	697b      	ldr	r3, [r7, #20]
 801a3b2:	7a9b      	ldrb	r3, [r3, #10]
 801a3b4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a3b6:	7bfb      	ldrb	r3, [r7, #15]
 801a3b8:	009b      	lsls	r3, r3, #2
 801a3ba:	b2db      	uxtb	r3, r3
 801a3bc:	f003 0304 	and.w	r3, r3, #4
 801a3c0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801a3c2:	697b      	ldr	r3, [r7, #20]
 801a3c4:	891a      	ldrh	r2, [r3, #8]
 801a3c6:	887b      	ldrh	r3, [r7, #2]
 801a3c8:	1ad3      	subs	r3, r2, r3
 801a3ca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a3cc:	7bbb      	ldrb	r3, [r7, #14]
 801a3ce:	b29a      	uxth	r2, r3
 801a3d0:	89bb      	ldrh	r3, [r7, #12]
 801a3d2:	4413      	add	r3, r2
 801a3d4:	b29b      	uxth	r3, r3
 801a3d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a3da:	4619      	mov	r1, r3
 801a3dc:	2036      	movs	r0, #54	; 0x36
 801a3de:	f7fb fac5 	bl	801596c <pbuf_alloc>
 801a3e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a3e4:	693b      	ldr	r3, [r7, #16]
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	f000 80b7 	beq.w	801a55a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801a3ec:	697b      	ldr	r3, [r7, #20]
 801a3ee:	685b      	ldr	r3, [r3, #4]
 801a3f0:	891a      	ldrh	r2, [r3, #8]
 801a3f2:	697b      	ldr	r3, [r7, #20]
 801a3f4:	891b      	ldrh	r3, [r3, #8]
 801a3f6:	1ad3      	subs	r3, r2, r3
 801a3f8:	b29a      	uxth	r2, r3
 801a3fa:	887b      	ldrh	r3, [r7, #2]
 801a3fc:	4413      	add	r3, r2
 801a3fe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a400:	697b      	ldr	r3, [r7, #20]
 801a402:	6858      	ldr	r0, [r3, #4]
 801a404:	693b      	ldr	r3, [r7, #16]
 801a406:	685a      	ldr	r2, [r3, #4]
 801a408:	7bbb      	ldrb	r3, [r7, #14]
 801a40a:	18d1      	adds	r1, r2, r3
 801a40c:	897b      	ldrh	r3, [r7, #10]
 801a40e:	89ba      	ldrh	r2, [r7, #12]
 801a410:	f7fb ff92 	bl	8016338 <pbuf_copy_partial>
 801a414:	4603      	mov	r3, r0
 801a416:	461a      	mov	r2, r3
 801a418:	89bb      	ldrh	r3, [r7, #12]
 801a41a:	4293      	cmp	r3, r2
 801a41c:	f040 809f 	bne.w	801a55e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a420:	697b      	ldr	r3, [r7, #20]
 801a422:	68db      	ldr	r3, [r3, #12]
 801a424:	899b      	ldrh	r3, [r3, #12]
 801a426:	b29b      	uxth	r3, r3
 801a428:	4618      	mov	r0, r3
 801a42a:	f7fa f9b1 	bl	8014790 <lwip_htons>
 801a42e:	4603      	mov	r3, r0
 801a430:	b2db      	uxtb	r3, r3
 801a432:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a436:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801a438:	2300      	movs	r3, #0
 801a43a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801a43c:	7efb      	ldrb	r3, [r7, #27]
 801a43e:	f003 0308 	and.w	r3, r3, #8
 801a442:	2b00      	cmp	r3, #0
 801a444:	d007      	beq.n	801a456 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801a446:	7efb      	ldrb	r3, [r7, #27]
 801a448:	f023 0308 	bic.w	r3, r3, #8
 801a44c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801a44e:	7ebb      	ldrb	r3, [r7, #26]
 801a450:	f043 0308 	orr.w	r3, r3, #8
 801a454:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801a456:	7efb      	ldrb	r3, [r7, #27]
 801a458:	f003 0301 	and.w	r3, r3, #1
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d007      	beq.n	801a470 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801a460:	7efb      	ldrb	r3, [r7, #27]
 801a462:	f023 0301 	bic.w	r3, r3, #1
 801a466:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801a468:	7ebb      	ldrb	r3, [r7, #26]
 801a46a:	f043 0301 	orr.w	r3, r3, #1
 801a46e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a470:	697b      	ldr	r3, [r7, #20]
 801a472:	68db      	ldr	r3, [r3, #12]
 801a474:	685b      	ldr	r3, [r3, #4]
 801a476:	4618      	mov	r0, r3
 801a478:	f7fa f99f 	bl	80147ba <lwip_htonl>
 801a47c:	4602      	mov	r2, r0
 801a47e:	887b      	ldrh	r3, [r7, #2]
 801a480:	18d1      	adds	r1, r2, r3
 801a482:	7eba      	ldrb	r2, [r7, #26]
 801a484:	7bfb      	ldrb	r3, [r7, #15]
 801a486:	9300      	str	r3, [sp, #0]
 801a488:	460b      	mov	r3, r1
 801a48a:	6939      	ldr	r1, [r7, #16]
 801a48c:	6878      	ldr	r0, [r7, #4]
 801a48e:	f7ff fea7 	bl	801a1e0 <tcp_create_segment>
 801a492:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801a494:	69fb      	ldr	r3, [r7, #28]
 801a496:	2b00      	cmp	r3, #0
 801a498:	d063      	beq.n	801a562 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a49a:	697b      	ldr	r3, [r7, #20]
 801a49c:	685b      	ldr	r3, [r3, #4]
 801a49e:	4618      	mov	r0, r3
 801a4a0:	f7fb fdd2 	bl	8016048 <pbuf_clen>
 801a4a4:	4603      	mov	r3, r0
 801a4a6:	461a      	mov	r2, r3
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a4ae:	1a9b      	subs	r3, r3, r2
 801a4b0:	b29a      	uxth	r2, r3
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a4b8:	697b      	ldr	r3, [r7, #20]
 801a4ba:	6858      	ldr	r0, [r3, #4]
 801a4bc:	697b      	ldr	r3, [r7, #20]
 801a4be:	685b      	ldr	r3, [r3, #4]
 801a4c0:	891a      	ldrh	r2, [r3, #8]
 801a4c2:	89bb      	ldrh	r3, [r7, #12]
 801a4c4:	1ad3      	subs	r3, r2, r3
 801a4c6:	b29b      	uxth	r3, r3
 801a4c8:	4619      	mov	r1, r3
 801a4ca:	f7fb fba9 	bl	8015c20 <pbuf_realloc>
  useg->len -= remainder;
 801a4ce:	697b      	ldr	r3, [r7, #20]
 801a4d0:	891a      	ldrh	r2, [r3, #8]
 801a4d2:	89bb      	ldrh	r3, [r7, #12]
 801a4d4:	1ad3      	subs	r3, r2, r3
 801a4d6:	b29a      	uxth	r2, r3
 801a4d8:	697b      	ldr	r3, [r7, #20]
 801a4da:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a4dc:	697b      	ldr	r3, [r7, #20]
 801a4de:	68db      	ldr	r3, [r3, #12]
 801a4e0:	899b      	ldrh	r3, [r3, #12]
 801a4e2:	b29c      	uxth	r4, r3
 801a4e4:	7efb      	ldrb	r3, [r7, #27]
 801a4e6:	b29b      	uxth	r3, r3
 801a4e8:	4618      	mov	r0, r3
 801a4ea:	f7fa f951 	bl	8014790 <lwip_htons>
 801a4ee:	4603      	mov	r3, r0
 801a4f0:	461a      	mov	r2, r3
 801a4f2:	697b      	ldr	r3, [r7, #20]
 801a4f4:	68db      	ldr	r3, [r3, #12]
 801a4f6:	4322      	orrs	r2, r4
 801a4f8:	b292      	uxth	r2, r2
 801a4fa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a4fc:	697b      	ldr	r3, [r7, #20]
 801a4fe:	685b      	ldr	r3, [r3, #4]
 801a500:	4618      	mov	r0, r3
 801a502:	f7fb fda1 	bl	8016048 <pbuf_clen>
 801a506:	4603      	mov	r3, r0
 801a508:	461a      	mov	r2, r3
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a510:	4413      	add	r3, r2
 801a512:	b29a      	uxth	r2, r3
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a51a:	69fb      	ldr	r3, [r7, #28]
 801a51c:	685b      	ldr	r3, [r3, #4]
 801a51e:	4618      	mov	r0, r3
 801a520:	f7fb fd92 	bl	8016048 <pbuf_clen>
 801a524:	4603      	mov	r3, r0
 801a526:	461a      	mov	r2, r3
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a52e:	4413      	add	r3, r2
 801a530:	b29a      	uxth	r2, r3
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a538:	697b      	ldr	r3, [r7, #20]
 801a53a:	681a      	ldr	r2, [r3, #0]
 801a53c:	69fb      	ldr	r3, [r7, #28]
 801a53e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a540:	697b      	ldr	r3, [r7, #20]
 801a542:	69fa      	ldr	r2, [r7, #28]
 801a544:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a546:	69fb      	ldr	r3, [r7, #28]
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d103      	bne.n	801a556 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	2200      	movs	r2, #0
 801a552:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a556:	2300      	movs	r3, #0
 801a558:	e016      	b.n	801a588 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801a55a:	bf00      	nop
 801a55c:	e002      	b.n	801a564 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a55e:	bf00      	nop
 801a560:	e000      	b.n	801a564 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a562:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a564:	69fb      	ldr	r3, [r7, #28]
 801a566:	2b00      	cmp	r3, #0
 801a568:	d006      	beq.n	801a578 <tcp_split_unsent_seg+0x25c>
 801a56a:	4b09      	ldr	r3, [pc, #36]	; (801a590 <tcp_split_unsent_seg+0x274>)
 801a56c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801a570:	490d      	ldr	r1, [pc, #52]	; (801a5a8 <tcp_split_unsent_seg+0x28c>)
 801a572:	4809      	ldr	r0, [pc, #36]	; (801a598 <tcp_split_unsent_seg+0x27c>)
 801a574:	f007 f83e 	bl	80215f4 <iprintf>
  if (p != NULL) {
 801a578:	693b      	ldr	r3, [r7, #16]
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d002      	beq.n	801a584 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801a57e:	6938      	ldr	r0, [r7, #16]
 801a580:	f7fb fcd4 	bl	8015f2c <pbuf_free>
  }

  return ERR_MEM;
 801a584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a588:	4618      	mov	r0, r3
 801a58a:	3724      	adds	r7, #36	; 0x24
 801a58c:	46bd      	mov	sp, r7
 801a58e:	bd90      	pop	{r4, r7, pc}
 801a590:	08023cf4 	.word	0x08023cf4
 801a594:	08024088 	.word	0x08024088
 801a598:	08023d48 	.word	0x08023d48
 801a59c:	080240ac 	.word	0x080240ac
 801a5a0:	080240d0 	.word	0x080240d0
 801a5a4:	080240e0 	.word	0x080240e0
 801a5a8:	080240f0 	.word	0x080240f0

0801a5ac <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a5ac:	b590      	push	{r4, r7, lr}
 801a5ae:	b085      	sub	sp, #20
 801a5b0:	af00      	add	r7, sp, #0
 801a5b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d106      	bne.n	801a5c8 <tcp_send_fin+0x1c>
 801a5ba:	4b21      	ldr	r3, [pc, #132]	; (801a640 <tcp_send_fin+0x94>)
 801a5bc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801a5c0:	4920      	ldr	r1, [pc, #128]	; (801a644 <tcp_send_fin+0x98>)
 801a5c2:	4821      	ldr	r0, [pc, #132]	; (801a648 <tcp_send_fin+0x9c>)
 801a5c4:	f007 f816 	bl	80215f4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d02e      	beq.n	801a62e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a5d4:	60fb      	str	r3, [r7, #12]
 801a5d6:	e002      	b.n	801a5de <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	681b      	ldr	r3, [r3, #0]
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d1f8      	bne.n	801a5d8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a5e6:	68fb      	ldr	r3, [r7, #12]
 801a5e8:	68db      	ldr	r3, [r3, #12]
 801a5ea:	899b      	ldrh	r3, [r3, #12]
 801a5ec:	b29b      	uxth	r3, r3
 801a5ee:	4618      	mov	r0, r3
 801a5f0:	f7fa f8ce 	bl	8014790 <lwip_htons>
 801a5f4:	4603      	mov	r3, r0
 801a5f6:	b2db      	uxtb	r3, r3
 801a5f8:	f003 0307 	and.w	r3, r3, #7
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d116      	bne.n	801a62e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a600:	68fb      	ldr	r3, [r7, #12]
 801a602:	68db      	ldr	r3, [r3, #12]
 801a604:	899b      	ldrh	r3, [r3, #12]
 801a606:	b29c      	uxth	r4, r3
 801a608:	2001      	movs	r0, #1
 801a60a:	f7fa f8c1 	bl	8014790 <lwip_htons>
 801a60e:	4603      	mov	r3, r0
 801a610:	461a      	mov	r2, r3
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	68db      	ldr	r3, [r3, #12]
 801a616:	4322      	orrs	r2, r4
 801a618:	b292      	uxth	r2, r2
 801a61a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	8b5b      	ldrh	r3, [r3, #26]
 801a620:	f043 0320 	orr.w	r3, r3, #32
 801a624:	b29a      	uxth	r2, r3
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a62a:	2300      	movs	r3, #0
 801a62c:	e004      	b.n	801a638 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a62e:	2101      	movs	r1, #1
 801a630:	6878      	ldr	r0, [r7, #4]
 801a632:	f000 f80b 	bl	801a64c <tcp_enqueue_flags>
 801a636:	4603      	mov	r3, r0
}
 801a638:	4618      	mov	r0, r3
 801a63a:	3714      	adds	r7, #20
 801a63c:	46bd      	mov	sp, r7
 801a63e:	bd90      	pop	{r4, r7, pc}
 801a640:	08023cf4 	.word	0x08023cf4
 801a644:	080240fc 	.word	0x080240fc
 801a648:	08023d48 	.word	0x08023d48

0801a64c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a64c:	b580      	push	{r7, lr}
 801a64e:	b08a      	sub	sp, #40	; 0x28
 801a650:	af02      	add	r7, sp, #8
 801a652:	6078      	str	r0, [r7, #4]
 801a654:	460b      	mov	r3, r1
 801a656:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a658:	2300      	movs	r3, #0
 801a65a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801a65c:	2300      	movs	r3, #0
 801a65e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a660:	78fb      	ldrb	r3, [r7, #3]
 801a662:	f003 0303 	and.w	r3, r3, #3
 801a666:	2b00      	cmp	r3, #0
 801a668:	d106      	bne.n	801a678 <tcp_enqueue_flags+0x2c>
 801a66a:	4b67      	ldr	r3, [pc, #412]	; (801a808 <tcp_enqueue_flags+0x1bc>)
 801a66c:	f240 4212 	movw	r2, #1042	; 0x412
 801a670:	4966      	ldr	r1, [pc, #408]	; (801a80c <tcp_enqueue_flags+0x1c0>)
 801a672:	4867      	ldr	r0, [pc, #412]	; (801a810 <tcp_enqueue_flags+0x1c4>)
 801a674:	f006 ffbe 	bl	80215f4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d106      	bne.n	801a68c <tcp_enqueue_flags+0x40>
 801a67e:	4b62      	ldr	r3, [pc, #392]	; (801a808 <tcp_enqueue_flags+0x1bc>)
 801a680:	f240 4213 	movw	r2, #1043	; 0x413
 801a684:	4963      	ldr	r1, [pc, #396]	; (801a814 <tcp_enqueue_flags+0x1c8>)
 801a686:	4862      	ldr	r0, [pc, #392]	; (801a810 <tcp_enqueue_flags+0x1c4>)
 801a688:	f006 ffb4 	bl	80215f4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a68c:	78fb      	ldrb	r3, [r7, #3]
 801a68e:	f003 0302 	and.w	r3, r3, #2
 801a692:	2b00      	cmp	r3, #0
 801a694:	d001      	beq.n	801a69a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a696:	2301      	movs	r3, #1
 801a698:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a69a:	7ffb      	ldrb	r3, [r7, #31]
 801a69c:	009b      	lsls	r3, r3, #2
 801a69e:	b2db      	uxtb	r3, r3
 801a6a0:	f003 0304 	and.w	r3, r3, #4
 801a6a4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a6a6:	7dfb      	ldrb	r3, [r7, #23]
 801a6a8:	b29b      	uxth	r3, r3
 801a6aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a6ae:	4619      	mov	r1, r3
 801a6b0:	2036      	movs	r0, #54	; 0x36
 801a6b2:	f7fb f95b 	bl	801596c <pbuf_alloc>
 801a6b6:	6138      	str	r0, [r7, #16]
 801a6b8:	693b      	ldr	r3, [r7, #16]
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d109      	bne.n	801a6d2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	8b5b      	ldrh	r3, [r3, #26]
 801a6c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a6c6:	b29a      	uxth	r2, r3
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a6cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a6d0:	e095      	b.n	801a7fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a6d2:	693b      	ldr	r3, [r7, #16]
 801a6d4:	895a      	ldrh	r2, [r3, #10]
 801a6d6:	7dfb      	ldrb	r3, [r7, #23]
 801a6d8:	b29b      	uxth	r3, r3
 801a6da:	429a      	cmp	r2, r3
 801a6dc:	d206      	bcs.n	801a6ec <tcp_enqueue_flags+0xa0>
 801a6de:	4b4a      	ldr	r3, [pc, #296]	; (801a808 <tcp_enqueue_flags+0x1bc>)
 801a6e0:	f240 423a 	movw	r2, #1082	; 0x43a
 801a6e4:	494c      	ldr	r1, [pc, #304]	; (801a818 <tcp_enqueue_flags+0x1cc>)
 801a6e6:	484a      	ldr	r0, [pc, #296]	; (801a810 <tcp_enqueue_flags+0x1c4>)
 801a6e8:	f006 ff84 	bl	80215f4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801a6f0:	78fa      	ldrb	r2, [r7, #3]
 801a6f2:	7ffb      	ldrb	r3, [r7, #31]
 801a6f4:	9300      	str	r3, [sp, #0]
 801a6f6:	460b      	mov	r3, r1
 801a6f8:	6939      	ldr	r1, [r7, #16]
 801a6fa:	6878      	ldr	r0, [r7, #4]
 801a6fc:	f7ff fd70 	bl	801a1e0 <tcp_create_segment>
 801a700:	60f8      	str	r0, [r7, #12]
 801a702:	68fb      	ldr	r3, [r7, #12]
 801a704:	2b00      	cmp	r3, #0
 801a706:	d109      	bne.n	801a71c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	8b5b      	ldrh	r3, [r3, #26]
 801a70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a710:	b29a      	uxth	r2, r3
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801a716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a71a:	e070      	b.n	801a7fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	68db      	ldr	r3, [r3, #12]
 801a720:	f003 0303 	and.w	r3, r3, #3
 801a724:	2b00      	cmp	r3, #0
 801a726:	d006      	beq.n	801a736 <tcp_enqueue_flags+0xea>
 801a728:	4b37      	ldr	r3, [pc, #220]	; (801a808 <tcp_enqueue_flags+0x1bc>)
 801a72a:	f240 4242 	movw	r2, #1090	; 0x442
 801a72e:	493b      	ldr	r1, [pc, #236]	; (801a81c <tcp_enqueue_flags+0x1d0>)
 801a730:	4837      	ldr	r0, [pc, #220]	; (801a810 <tcp_enqueue_flags+0x1c4>)
 801a732:	f006 ff5f 	bl	80215f4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a736:	68fb      	ldr	r3, [r7, #12]
 801a738:	891b      	ldrh	r3, [r3, #8]
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d006      	beq.n	801a74c <tcp_enqueue_flags+0x100>
 801a73e:	4b32      	ldr	r3, [pc, #200]	; (801a808 <tcp_enqueue_flags+0x1bc>)
 801a740:	f240 4243 	movw	r2, #1091	; 0x443
 801a744:	4936      	ldr	r1, [pc, #216]	; (801a820 <tcp_enqueue_flags+0x1d4>)
 801a746:	4832      	ldr	r0, [pc, #200]	; (801a810 <tcp_enqueue_flags+0x1c4>)
 801a748:	f006 ff54 	bl	80215f4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a750:	2b00      	cmp	r3, #0
 801a752:	d103      	bne.n	801a75c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	68fa      	ldr	r2, [r7, #12]
 801a758:	66da      	str	r2, [r3, #108]	; 0x6c
 801a75a:	e00d      	b.n	801a778 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a760:	61bb      	str	r3, [r7, #24]
 801a762:	e002      	b.n	801a76a <tcp_enqueue_flags+0x11e>
 801a764:	69bb      	ldr	r3, [r7, #24]
 801a766:	681b      	ldr	r3, [r3, #0]
 801a768:	61bb      	str	r3, [r7, #24]
 801a76a:	69bb      	ldr	r3, [r7, #24]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d1f8      	bne.n	801a764 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801a772:	69bb      	ldr	r3, [r7, #24]
 801a774:	68fa      	ldr	r2, [r7, #12]
 801a776:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	2200      	movs	r2, #0
 801a77c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a780:	78fb      	ldrb	r3, [r7, #3]
 801a782:	f003 0302 	and.w	r3, r3, #2
 801a786:	2b00      	cmp	r3, #0
 801a788:	d104      	bne.n	801a794 <tcp_enqueue_flags+0x148>
 801a78a:	78fb      	ldrb	r3, [r7, #3]
 801a78c:	f003 0301 	and.w	r3, r3, #1
 801a790:	2b00      	cmp	r3, #0
 801a792:	d004      	beq.n	801a79e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a798:	1c5a      	adds	r2, r3, #1
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801a79e:	78fb      	ldrb	r3, [r7, #3]
 801a7a0:	f003 0301 	and.w	r3, r3, #1
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d006      	beq.n	801a7b6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	8b5b      	ldrh	r3, [r3, #26]
 801a7ac:	f043 0320 	orr.w	r3, r3, #32
 801a7b0:	b29a      	uxth	r2, r3
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a7b6:	68fb      	ldr	r3, [r7, #12]
 801a7b8:	685b      	ldr	r3, [r3, #4]
 801a7ba:	4618      	mov	r0, r3
 801a7bc:	f7fb fc44 	bl	8016048 <pbuf_clen>
 801a7c0:	4603      	mov	r3, r0
 801a7c2:	461a      	mov	r2, r3
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a7ca:	4413      	add	r3, r2
 801a7cc:	b29a      	uxth	r2, r3
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d00e      	beq.n	801a7fc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d10a      	bne.n	801a7fc <tcp_enqueue_flags+0x1b0>
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	d106      	bne.n	801a7fc <tcp_enqueue_flags+0x1b0>
 801a7ee:	4b06      	ldr	r3, [pc, #24]	; (801a808 <tcp_enqueue_flags+0x1bc>)
 801a7f0:	f240 4266 	movw	r2, #1126	; 0x466
 801a7f4:	490b      	ldr	r1, [pc, #44]	; (801a824 <tcp_enqueue_flags+0x1d8>)
 801a7f6:	4806      	ldr	r0, [pc, #24]	; (801a810 <tcp_enqueue_flags+0x1c4>)
 801a7f8:	f006 fefc 	bl	80215f4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801a7fc:	2300      	movs	r3, #0
}
 801a7fe:	4618      	mov	r0, r3
 801a800:	3720      	adds	r7, #32
 801a802:	46bd      	mov	sp, r7
 801a804:	bd80      	pop	{r7, pc}
 801a806:	bf00      	nop
 801a808:	08023cf4 	.word	0x08023cf4
 801a80c:	08024118 	.word	0x08024118
 801a810:	08023d48 	.word	0x08023d48
 801a814:	08024170 	.word	0x08024170
 801a818:	08024190 	.word	0x08024190
 801a81c:	080241cc 	.word	0x080241cc
 801a820:	080241e4 	.word	0x080241e4
 801a824:	08024210 	.word	0x08024210

0801a828 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801a828:	b5b0      	push	{r4, r5, r7, lr}
 801a82a:	b08a      	sub	sp, #40	; 0x28
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	2b00      	cmp	r3, #0
 801a834:	d106      	bne.n	801a844 <tcp_output+0x1c>
 801a836:	4ba0      	ldr	r3, [pc, #640]	; (801aab8 <tcp_output+0x290>)
 801a838:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801a83c:	499f      	ldr	r1, [pc, #636]	; (801aabc <tcp_output+0x294>)
 801a83e:	48a0      	ldr	r0, [pc, #640]	; (801aac0 <tcp_output+0x298>)
 801a840:	f006 fed8 	bl	80215f4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	7d1b      	ldrb	r3, [r3, #20]
 801a848:	2b01      	cmp	r3, #1
 801a84a:	d106      	bne.n	801a85a <tcp_output+0x32>
 801a84c:	4b9a      	ldr	r3, [pc, #616]	; (801aab8 <tcp_output+0x290>)
 801a84e:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801a852:	499c      	ldr	r1, [pc, #624]	; (801aac4 <tcp_output+0x29c>)
 801a854:	489a      	ldr	r0, [pc, #616]	; (801aac0 <tcp_output+0x298>)
 801a856:	f006 fecd 	bl	80215f4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801a85a:	4b9b      	ldr	r3, [pc, #620]	; (801aac8 <tcp_output+0x2a0>)
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	687a      	ldr	r2, [r7, #4]
 801a860:	429a      	cmp	r2, r3
 801a862:	d101      	bne.n	801a868 <tcp_output+0x40>
    return ERR_OK;
 801a864:	2300      	movs	r3, #0
 801a866:	e1d2      	b.n	801ac0e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a874:	429a      	cmp	r2, r3
 801a876:	d203      	bcs.n	801a880 <tcp_output+0x58>
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a87e:	e002      	b.n	801a886 <tcp_output+0x5e>
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a886:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a88c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801a88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a890:	2b00      	cmp	r3, #0
 801a892:	d10b      	bne.n	801a8ac <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	8b5b      	ldrh	r3, [r3, #26]
 801a898:	f003 0302 	and.w	r3, r3, #2
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	f000 81a9 	beq.w	801abf4 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801a8a2:	6878      	ldr	r0, [r7, #4]
 801a8a4:	f000 fdd8 	bl	801b458 <tcp_send_empty_ack>
 801a8a8:	4603      	mov	r3, r0
 801a8aa:	e1b0      	b.n	801ac0e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801a8ac:	6879      	ldr	r1, [r7, #4]
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	3304      	adds	r3, #4
 801a8b2:	461a      	mov	r2, r3
 801a8b4:	6878      	ldr	r0, [r7, #4]
 801a8b6:	f7ff fc77 	bl	801a1a8 <tcp_route>
 801a8ba:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801a8bc:	697b      	ldr	r3, [r7, #20]
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	d102      	bne.n	801a8c8 <tcp_output+0xa0>
    return ERR_RTE;
 801a8c2:	f06f 0303 	mvn.w	r3, #3
 801a8c6:	e1a2      	b.n	801ac0e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	d003      	beq.n	801a8d6 <tcp_output+0xae>
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d111      	bne.n	801a8fa <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801a8d6:	697b      	ldr	r3, [r7, #20]
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	d002      	beq.n	801a8e2 <tcp_output+0xba>
 801a8dc:	697b      	ldr	r3, [r7, #20]
 801a8de:	3304      	adds	r3, #4
 801a8e0:	e000      	b.n	801a8e4 <tcp_output+0xbc>
 801a8e2:	2300      	movs	r3, #0
 801a8e4:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801a8e6:	693b      	ldr	r3, [r7, #16]
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	d102      	bne.n	801a8f2 <tcp_output+0xca>
      return ERR_RTE;
 801a8ec:	f06f 0303 	mvn.w	r3, #3
 801a8f0:	e18d      	b.n	801ac0e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a8f2:	693b      	ldr	r3, [r7, #16]
 801a8f4:	681a      	ldr	r2, [r3, #0]
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801a8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8fc:	68db      	ldr	r3, [r3, #12]
 801a8fe:	685b      	ldr	r3, [r3, #4]
 801a900:	4618      	mov	r0, r3
 801a902:	f7f9 ff5a 	bl	80147ba <lwip_htonl>
 801a906:	4602      	mov	r2, r0
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a90c:	1ad3      	subs	r3, r2, r3
 801a90e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a910:	8912      	ldrh	r2, [r2, #8]
 801a912:	4413      	add	r3, r2
 801a914:	69ba      	ldr	r2, [r7, #24]
 801a916:	429a      	cmp	r2, r3
 801a918:	d227      	bcs.n	801a96a <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a920:	461a      	mov	r2, r3
 801a922:	69bb      	ldr	r3, [r7, #24]
 801a924:	4293      	cmp	r3, r2
 801a926:	d114      	bne.n	801a952 <tcp_output+0x12a>
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d110      	bne.n	801a952 <tcp_output+0x12a>
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a936:	2b00      	cmp	r3, #0
 801a938:	d10b      	bne.n	801a952 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	2200      	movs	r2, #0
 801a93e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	2201      	movs	r2, #1
 801a946:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	2200      	movs	r2, #0
 801a94e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	8b5b      	ldrh	r3, [r3, #26]
 801a956:	f003 0302 	and.w	r3, r3, #2
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	f000 814c 	beq.w	801abf8 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801a960:	6878      	ldr	r0, [r7, #4]
 801a962:	f000 fd79 	bl	801b458 <tcp_send_empty_ack>
 801a966:	4603      	mov	r3, r0
 801a968:	e151      	b.n	801ac0e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	2200      	movs	r2, #0
 801a96e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a976:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801a978:	6a3b      	ldr	r3, [r7, #32]
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	f000 811b 	beq.w	801abb6 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801a980:	e002      	b.n	801a988 <tcp_output+0x160>
 801a982:	6a3b      	ldr	r3, [r7, #32]
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	623b      	str	r3, [r7, #32]
 801a988:	6a3b      	ldr	r3, [r7, #32]
 801a98a:	681b      	ldr	r3, [r3, #0]
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	d1f8      	bne.n	801a982 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801a990:	e111      	b.n	801abb6 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801a992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a994:	68db      	ldr	r3, [r3, #12]
 801a996:	899b      	ldrh	r3, [r3, #12]
 801a998:	b29b      	uxth	r3, r3
 801a99a:	4618      	mov	r0, r3
 801a99c:	f7f9 fef8 	bl	8014790 <lwip_htons>
 801a9a0:	4603      	mov	r3, r0
 801a9a2:	b2db      	uxtb	r3, r3
 801a9a4:	f003 0304 	and.w	r3, r3, #4
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d006      	beq.n	801a9ba <tcp_output+0x192>
 801a9ac:	4b42      	ldr	r3, [pc, #264]	; (801aab8 <tcp_output+0x290>)
 801a9ae:	f240 5237 	movw	r2, #1335	; 0x537
 801a9b2:	4946      	ldr	r1, [pc, #280]	; (801aacc <tcp_output+0x2a4>)
 801a9b4:	4842      	ldr	r0, [pc, #264]	; (801aac0 <tcp_output+0x298>)
 801a9b6:	f006 fe1d 	bl	80215f4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	d01f      	beq.n	801aa02 <tcp_output+0x1da>
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	8b5b      	ldrh	r3, [r3, #26]
 801a9c6:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d119      	bne.n	801aa02 <tcp_output+0x1da>
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d00b      	beq.n	801a9ee <tcp_output+0x1c6>
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d110      	bne.n	801aa02 <tcp_output+0x1da>
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9e4:	891a      	ldrh	r2, [r3, #8]
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a9ea:	429a      	cmp	r2, r3
 801a9ec:	d209      	bcs.n	801aa02 <tcp_output+0x1da>
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d004      	beq.n	801aa02 <tcp_output+0x1da>
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a9fe:	2b08      	cmp	r3, #8
 801aa00:	d901      	bls.n	801aa06 <tcp_output+0x1de>
 801aa02:	2301      	movs	r3, #1
 801aa04:	e000      	b.n	801aa08 <tcp_output+0x1e0>
 801aa06:	2300      	movs	r3, #0
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d106      	bne.n	801aa1a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	8b5b      	ldrh	r3, [r3, #26]
 801aa10:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	f000 80e3 	beq.w	801abe0 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	7d1b      	ldrb	r3, [r3, #20]
 801aa1e:	2b02      	cmp	r3, #2
 801aa20:	d00d      	beq.n	801aa3e <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa24:	68db      	ldr	r3, [r3, #12]
 801aa26:	899b      	ldrh	r3, [r3, #12]
 801aa28:	b29c      	uxth	r4, r3
 801aa2a:	2010      	movs	r0, #16
 801aa2c:	f7f9 feb0 	bl	8014790 <lwip_htons>
 801aa30:	4603      	mov	r3, r0
 801aa32:	461a      	mov	r2, r3
 801aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa36:	68db      	ldr	r3, [r3, #12]
 801aa38:	4322      	orrs	r2, r4
 801aa3a:	b292      	uxth	r2, r2
 801aa3c:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801aa3e:	697a      	ldr	r2, [r7, #20]
 801aa40:	6879      	ldr	r1, [r7, #4]
 801aa42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aa44:	f000 f908 	bl	801ac58 <tcp_output_segment>
 801aa48:	4603      	mov	r3, r0
 801aa4a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801aa4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d009      	beq.n	801aa68 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	8b5b      	ldrh	r3, [r3, #26]
 801aa58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aa5c:	b29a      	uxth	r2, r3
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	835a      	strh	r2, [r3, #26]
      return err;
 801aa62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa66:	e0d2      	b.n	801ac0e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801aa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa6a:	681a      	ldr	r2, [r3, #0]
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	7d1b      	ldrb	r3, [r3, #20]
 801aa74:	2b02      	cmp	r3, #2
 801aa76:	d006      	beq.n	801aa86 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	8b5b      	ldrh	r3, [r3, #26]
 801aa7c:	f023 0303 	bic.w	r3, r3, #3
 801aa80:	b29a      	uxth	r2, r3
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801aa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa88:	68db      	ldr	r3, [r3, #12]
 801aa8a:	685b      	ldr	r3, [r3, #4]
 801aa8c:	4618      	mov	r0, r3
 801aa8e:	f7f9 fe94 	bl	80147ba <lwip_htonl>
 801aa92:	4604      	mov	r4, r0
 801aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa96:	891b      	ldrh	r3, [r3, #8]
 801aa98:	461d      	mov	r5, r3
 801aa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa9c:	68db      	ldr	r3, [r3, #12]
 801aa9e:	899b      	ldrh	r3, [r3, #12]
 801aaa0:	b29b      	uxth	r3, r3
 801aaa2:	4618      	mov	r0, r3
 801aaa4:	f7f9 fe74 	bl	8014790 <lwip_htons>
 801aaa8:	4603      	mov	r3, r0
 801aaaa:	b2db      	uxtb	r3, r3
 801aaac:	f003 0303 	and.w	r3, r3, #3
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d00d      	beq.n	801aad0 <tcp_output+0x2a8>
 801aab4:	2301      	movs	r3, #1
 801aab6:	e00c      	b.n	801aad2 <tcp_output+0x2aa>
 801aab8:	08023cf4 	.word	0x08023cf4
 801aabc:	08024238 	.word	0x08024238
 801aac0:	08023d48 	.word	0x08023d48
 801aac4:	08024250 	.word	0x08024250
 801aac8:	2001036c 	.word	0x2001036c
 801aacc:	08024278 	.word	0x08024278
 801aad0:	2300      	movs	r3, #0
 801aad2:	442b      	add	r3, r5
 801aad4:	4423      	add	r3, r4
 801aad6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801aadc:	68bb      	ldr	r3, [r7, #8]
 801aade:	1ad3      	subs	r3, r2, r3
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	da02      	bge.n	801aaea <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	68ba      	ldr	r2, [r7, #8]
 801aae8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801aaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaec:	891b      	ldrh	r3, [r3, #8]
 801aaee:	461c      	mov	r4, r3
 801aaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaf2:	68db      	ldr	r3, [r3, #12]
 801aaf4:	899b      	ldrh	r3, [r3, #12]
 801aaf6:	b29b      	uxth	r3, r3
 801aaf8:	4618      	mov	r0, r3
 801aafa:	f7f9 fe49 	bl	8014790 <lwip_htons>
 801aafe:	4603      	mov	r3, r0
 801ab00:	b2db      	uxtb	r3, r3
 801ab02:	f003 0303 	and.w	r3, r3, #3
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d001      	beq.n	801ab0e <tcp_output+0x2e6>
 801ab0a:	2301      	movs	r3, #1
 801ab0c:	e000      	b.n	801ab10 <tcp_output+0x2e8>
 801ab0e:	2300      	movs	r3, #0
 801ab10:	4423      	add	r3, r4
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	d049      	beq.n	801abaa <tcp_output+0x382>
      seg->next = NULL;
 801ab16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab18:	2200      	movs	r2, #0
 801ab1a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab20:	2b00      	cmp	r3, #0
 801ab22:	d105      	bne.n	801ab30 <tcp_output+0x308>
        pcb->unacked = seg;
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab28:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801ab2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab2c:	623b      	str	r3, [r7, #32]
 801ab2e:	e03f      	b.n	801abb0 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab32:	68db      	ldr	r3, [r3, #12]
 801ab34:	685b      	ldr	r3, [r3, #4]
 801ab36:	4618      	mov	r0, r3
 801ab38:	f7f9 fe3f 	bl	80147ba <lwip_htonl>
 801ab3c:	4604      	mov	r4, r0
 801ab3e:	6a3b      	ldr	r3, [r7, #32]
 801ab40:	68db      	ldr	r3, [r3, #12]
 801ab42:	685b      	ldr	r3, [r3, #4]
 801ab44:	4618      	mov	r0, r3
 801ab46:	f7f9 fe38 	bl	80147ba <lwip_htonl>
 801ab4a:	4603      	mov	r3, r0
 801ab4c:	1ae3      	subs	r3, r4, r3
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	da24      	bge.n	801ab9c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	3370      	adds	r3, #112	; 0x70
 801ab56:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ab58:	e002      	b.n	801ab60 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801ab5a:	69fb      	ldr	r3, [r7, #28]
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ab60:	69fb      	ldr	r3, [r7, #28]
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d011      	beq.n	801ab8c <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ab68:	69fb      	ldr	r3, [r7, #28]
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	68db      	ldr	r3, [r3, #12]
 801ab6e:	685b      	ldr	r3, [r3, #4]
 801ab70:	4618      	mov	r0, r3
 801ab72:	f7f9 fe22 	bl	80147ba <lwip_htonl>
 801ab76:	4604      	mov	r4, r0
 801ab78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab7a:	68db      	ldr	r3, [r3, #12]
 801ab7c:	685b      	ldr	r3, [r3, #4]
 801ab7e:	4618      	mov	r0, r3
 801ab80:	f7f9 fe1b 	bl	80147ba <lwip_htonl>
 801ab84:	4603      	mov	r3, r0
 801ab86:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	dbe6      	blt.n	801ab5a <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 801ab8c:	69fb      	ldr	r3, [r7, #28]
 801ab8e:	681a      	ldr	r2, [r3, #0]
 801ab90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab92:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801ab94:	69fb      	ldr	r3, [r7, #28]
 801ab96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab98:	601a      	str	r2, [r3, #0]
 801ab9a:	e009      	b.n	801abb0 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801ab9c:	6a3b      	ldr	r3, [r7, #32]
 801ab9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aba0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801aba2:	6a3b      	ldr	r3, [r7, #32]
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	623b      	str	r3, [r7, #32]
 801aba8:	e002      	b.n	801abb0 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801abaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801abac:	f7fc fc42 	bl	8017434 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801abb4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801abb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abb8:	2b00      	cmp	r3, #0
 801abba:	d012      	beq.n	801abe2 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801abbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abbe:	68db      	ldr	r3, [r3, #12]
 801abc0:	685b      	ldr	r3, [r3, #4]
 801abc2:	4618      	mov	r0, r3
 801abc4:	f7f9 fdf9 	bl	80147ba <lwip_htonl>
 801abc8:	4602      	mov	r2, r0
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801abce:	1ad3      	subs	r3, r2, r3
 801abd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801abd2:	8912      	ldrh	r2, [r2, #8]
 801abd4:	4413      	add	r3, r2
  while (seg != NULL &&
 801abd6:	69ba      	ldr	r2, [r7, #24]
 801abd8:	429a      	cmp	r2, r3
 801abda:	f4bf aeda 	bcs.w	801a992 <tcp_output+0x16a>
 801abde:	e000      	b.n	801abe2 <tcp_output+0x3ba>
      break;
 801abe0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d108      	bne.n	801abfc <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	2200      	movs	r2, #0
 801abee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801abf2:	e004      	b.n	801abfe <tcp_output+0x3d6>
    goto output_done;
 801abf4:	bf00      	nop
 801abf6:	e002      	b.n	801abfe <tcp_output+0x3d6>
    goto output_done;
 801abf8:	bf00      	nop
 801abfa:	e000      	b.n	801abfe <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801abfc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	8b5b      	ldrh	r3, [r3, #26]
 801ac02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ac06:	b29a      	uxth	r2, r3
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801ac0c:	2300      	movs	r3, #0
}
 801ac0e:	4618      	mov	r0, r3
 801ac10:	3728      	adds	r7, #40	; 0x28
 801ac12:	46bd      	mov	sp, r7
 801ac14:	bdb0      	pop	{r4, r5, r7, pc}
 801ac16:	bf00      	nop

0801ac18 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801ac18:	b580      	push	{r7, lr}
 801ac1a:	b082      	sub	sp, #8
 801ac1c:	af00      	add	r7, sp, #0
 801ac1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d106      	bne.n	801ac34 <tcp_output_segment_busy+0x1c>
 801ac26:	4b09      	ldr	r3, [pc, #36]	; (801ac4c <tcp_output_segment_busy+0x34>)
 801ac28:	f240 529a 	movw	r2, #1434	; 0x59a
 801ac2c:	4908      	ldr	r1, [pc, #32]	; (801ac50 <tcp_output_segment_busy+0x38>)
 801ac2e:	4809      	ldr	r0, [pc, #36]	; (801ac54 <tcp_output_segment_busy+0x3c>)
 801ac30:	f006 fce0 	bl	80215f4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	685b      	ldr	r3, [r3, #4]
 801ac38:	7b9b      	ldrb	r3, [r3, #14]
 801ac3a:	2b01      	cmp	r3, #1
 801ac3c:	d001      	beq.n	801ac42 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801ac3e:	2301      	movs	r3, #1
 801ac40:	e000      	b.n	801ac44 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801ac42:	2300      	movs	r3, #0
}
 801ac44:	4618      	mov	r0, r3
 801ac46:	3708      	adds	r7, #8
 801ac48:	46bd      	mov	sp, r7
 801ac4a:	bd80      	pop	{r7, pc}
 801ac4c:	08023cf4 	.word	0x08023cf4
 801ac50:	08024290 	.word	0x08024290
 801ac54:	08023d48 	.word	0x08023d48

0801ac58 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801ac58:	b5b0      	push	{r4, r5, r7, lr}
 801ac5a:	b08c      	sub	sp, #48	; 0x30
 801ac5c:	af04      	add	r7, sp, #16
 801ac5e:	60f8      	str	r0, [r7, #12]
 801ac60:	60b9      	str	r1, [r7, #8]
 801ac62:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	d106      	bne.n	801ac78 <tcp_output_segment+0x20>
 801ac6a:	4b64      	ldr	r3, [pc, #400]	; (801adfc <tcp_output_segment+0x1a4>)
 801ac6c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801ac70:	4963      	ldr	r1, [pc, #396]	; (801ae00 <tcp_output_segment+0x1a8>)
 801ac72:	4864      	ldr	r0, [pc, #400]	; (801ae04 <tcp_output_segment+0x1ac>)
 801ac74:	f006 fcbe 	bl	80215f4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801ac78:	68bb      	ldr	r3, [r7, #8]
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d106      	bne.n	801ac8c <tcp_output_segment+0x34>
 801ac7e:	4b5f      	ldr	r3, [pc, #380]	; (801adfc <tcp_output_segment+0x1a4>)
 801ac80:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801ac84:	4960      	ldr	r1, [pc, #384]	; (801ae08 <tcp_output_segment+0x1b0>)
 801ac86:	485f      	ldr	r0, [pc, #380]	; (801ae04 <tcp_output_segment+0x1ac>)
 801ac88:	f006 fcb4 	bl	80215f4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d106      	bne.n	801aca0 <tcp_output_segment+0x48>
 801ac92:	4b5a      	ldr	r3, [pc, #360]	; (801adfc <tcp_output_segment+0x1a4>)
 801ac94:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801ac98:	495c      	ldr	r1, [pc, #368]	; (801ae0c <tcp_output_segment+0x1b4>)
 801ac9a:	485a      	ldr	r0, [pc, #360]	; (801ae04 <tcp_output_segment+0x1ac>)
 801ac9c:	f006 fcaa 	bl	80215f4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801aca0:	68f8      	ldr	r0, [r7, #12]
 801aca2:	f7ff ffb9 	bl	801ac18 <tcp_output_segment_busy>
 801aca6:	4603      	mov	r3, r0
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d001      	beq.n	801acb0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801acac:	2300      	movs	r3, #0
 801acae:	e0a0      	b.n	801adf2 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801acb0:	68bb      	ldr	r3, [r7, #8]
 801acb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801acb4:	68fb      	ldr	r3, [r7, #12]
 801acb6:	68dc      	ldr	r4, [r3, #12]
 801acb8:	4610      	mov	r0, r2
 801acba:	f7f9 fd7e 	bl	80147ba <lwip_htonl>
 801acbe:	4603      	mov	r3, r0
 801acc0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801acc2:	68bb      	ldr	r3, [r7, #8]
 801acc4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801acc6:	68fb      	ldr	r3, [r7, #12]
 801acc8:	68dc      	ldr	r4, [r3, #12]
 801acca:	4610      	mov	r0, r2
 801accc:	f7f9 fd60 	bl	8014790 <lwip_htons>
 801acd0:	4603      	mov	r3, r0
 801acd2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801acd4:	68bb      	ldr	r3, [r7, #8]
 801acd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acd8:	68ba      	ldr	r2, [r7, #8]
 801acda:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801acdc:	441a      	add	r2, r3
 801acde:	68bb      	ldr	r3, [r7, #8]
 801ace0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801ace2:	68fb      	ldr	r3, [r7, #12]
 801ace4:	68db      	ldr	r3, [r3, #12]
 801ace6:	3314      	adds	r3, #20
 801ace8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801acea:	68fb      	ldr	r3, [r7, #12]
 801acec:	7a9b      	ldrb	r3, [r3, #10]
 801acee:	f003 0301 	and.w	r3, r3, #1
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d015      	beq.n	801ad22 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801acf6:	68bb      	ldr	r3, [r7, #8]
 801acf8:	3304      	adds	r3, #4
 801acfa:	461a      	mov	r2, r3
 801acfc:	6879      	ldr	r1, [r7, #4]
 801acfe:	f44f 7006 	mov.w	r0, #536	; 0x218
 801ad02:	f7fc fe8d 	bl	8017a20 <tcp_eff_send_mss_netif>
 801ad06:	4603      	mov	r3, r0
 801ad08:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801ad0a:	8b7b      	ldrh	r3, [r7, #26]
 801ad0c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801ad10:	4618      	mov	r0, r3
 801ad12:	f7f9 fd52 	bl	80147ba <lwip_htonl>
 801ad16:	4602      	mov	r2, r0
 801ad18:	69fb      	ldr	r3, [r7, #28]
 801ad1a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801ad1c:	69fb      	ldr	r3, [r7, #28]
 801ad1e:	3304      	adds	r3, #4
 801ad20:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801ad22:	68bb      	ldr	r3, [r7, #8]
 801ad24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	da02      	bge.n	801ad32 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801ad2c:	68bb      	ldr	r3, [r7, #8]
 801ad2e:	2200      	movs	r2, #0
 801ad30:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801ad32:	68bb      	ldr	r3, [r7, #8]
 801ad34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d10c      	bne.n	801ad54 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801ad3a:	4b35      	ldr	r3, [pc, #212]	; (801ae10 <tcp_output_segment+0x1b8>)
 801ad3c:	681a      	ldr	r2, [r3, #0]
 801ad3e:	68bb      	ldr	r3, [r7, #8]
 801ad40:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801ad42:	68fb      	ldr	r3, [r7, #12]
 801ad44:	68db      	ldr	r3, [r3, #12]
 801ad46:	685b      	ldr	r3, [r3, #4]
 801ad48:	4618      	mov	r0, r3
 801ad4a:	f7f9 fd36 	bl	80147ba <lwip_htonl>
 801ad4e:	4602      	mov	r2, r0
 801ad50:	68bb      	ldr	r3, [r7, #8]
 801ad52:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801ad54:	68fb      	ldr	r3, [r7, #12]
 801ad56:	68db      	ldr	r3, [r3, #12]
 801ad58:	461a      	mov	r2, r3
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	685b      	ldr	r3, [r3, #4]
 801ad5e:	685b      	ldr	r3, [r3, #4]
 801ad60:	1ad3      	subs	r3, r2, r3
 801ad62:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	685b      	ldr	r3, [r3, #4]
 801ad68:	8959      	ldrh	r1, [r3, #10]
 801ad6a:	68fb      	ldr	r3, [r7, #12]
 801ad6c:	685b      	ldr	r3, [r3, #4]
 801ad6e:	8b3a      	ldrh	r2, [r7, #24]
 801ad70:	1a8a      	subs	r2, r1, r2
 801ad72:	b292      	uxth	r2, r2
 801ad74:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	685b      	ldr	r3, [r3, #4]
 801ad7a:	8919      	ldrh	r1, [r3, #8]
 801ad7c:	68fb      	ldr	r3, [r7, #12]
 801ad7e:	685b      	ldr	r3, [r3, #4]
 801ad80:	8b3a      	ldrh	r2, [r7, #24]
 801ad82:	1a8a      	subs	r2, r1, r2
 801ad84:	b292      	uxth	r2, r2
 801ad86:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801ad88:	68fb      	ldr	r3, [r7, #12]
 801ad8a:	685b      	ldr	r3, [r3, #4]
 801ad8c:	68fa      	ldr	r2, [r7, #12]
 801ad8e:	68d2      	ldr	r2, [r2, #12]
 801ad90:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801ad92:	68fb      	ldr	r3, [r7, #12]
 801ad94:	68db      	ldr	r3, [r3, #12]
 801ad96:	2200      	movs	r2, #0
 801ad98:	741a      	strb	r2, [r3, #16]
 801ad9a:	2200      	movs	r2, #0
 801ad9c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801ad9e:	68fb      	ldr	r3, [r7, #12]
 801ada0:	68db      	ldr	r3, [r3, #12]
 801ada2:	f103 0214 	add.w	r2, r3, #20
 801ada6:	68fb      	ldr	r3, [r7, #12]
 801ada8:	7a9b      	ldrb	r3, [r3, #10]
 801adaa:	009b      	lsls	r3, r3, #2
 801adac:	f003 0304 	and.w	r3, r3, #4
 801adb0:	4413      	add	r3, r2
 801adb2:	69fa      	ldr	r2, [r7, #28]
 801adb4:	429a      	cmp	r2, r3
 801adb6:	d006      	beq.n	801adc6 <tcp_output_segment+0x16e>
 801adb8:	4b10      	ldr	r3, [pc, #64]	; (801adfc <tcp_output_segment+0x1a4>)
 801adba:	f240 621c 	movw	r2, #1564	; 0x61c
 801adbe:	4915      	ldr	r1, [pc, #84]	; (801ae14 <tcp_output_segment+0x1bc>)
 801adc0:	4810      	ldr	r0, [pc, #64]	; (801ae04 <tcp_output_segment+0x1ac>)
 801adc2:	f006 fc17 	bl	80215f4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801adc6:	68fb      	ldr	r3, [r7, #12]
 801adc8:	6858      	ldr	r0, [r3, #4]
 801adca:	68b9      	ldr	r1, [r7, #8]
 801adcc:	68bb      	ldr	r3, [r7, #8]
 801adce:	1d1c      	adds	r4, r3, #4
 801add0:	68bb      	ldr	r3, [r7, #8]
 801add2:	7add      	ldrb	r5, [r3, #11]
 801add4:	68bb      	ldr	r3, [r7, #8]
 801add6:	7a9b      	ldrb	r3, [r3, #10]
 801add8:	687a      	ldr	r2, [r7, #4]
 801adda:	9202      	str	r2, [sp, #8]
 801addc:	2206      	movs	r2, #6
 801adde:	9201      	str	r2, [sp, #4]
 801ade0:	9300      	str	r3, [sp, #0]
 801ade2:	462b      	mov	r3, r5
 801ade4:	4622      	mov	r2, r4
 801ade6:	f004 fc37 	bl	801f658 <ip4_output_if>
 801adea:	4603      	mov	r3, r0
 801adec:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801adee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801adf2:	4618      	mov	r0, r3
 801adf4:	3720      	adds	r7, #32
 801adf6:	46bd      	mov	sp, r7
 801adf8:	bdb0      	pop	{r4, r5, r7, pc}
 801adfa:	bf00      	nop
 801adfc:	08023cf4 	.word	0x08023cf4
 801ae00:	080242b8 	.word	0x080242b8
 801ae04:	08023d48 	.word	0x08023d48
 801ae08:	080242d8 	.word	0x080242d8
 801ae0c:	080242f8 	.word	0x080242f8
 801ae10:	2001035c 	.word	0x2001035c
 801ae14:	0802431c 	.word	0x0802431c

0801ae18 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801ae18:	b5b0      	push	{r4, r5, r7, lr}
 801ae1a:	b084      	sub	sp, #16
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d106      	bne.n	801ae34 <tcp_rexmit_rto_prepare+0x1c>
 801ae26:	4b31      	ldr	r3, [pc, #196]	; (801aeec <tcp_rexmit_rto_prepare+0xd4>)
 801ae28:	f240 6263 	movw	r2, #1635	; 0x663
 801ae2c:	4930      	ldr	r1, [pc, #192]	; (801aef0 <tcp_rexmit_rto_prepare+0xd8>)
 801ae2e:	4831      	ldr	r0, [pc, #196]	; (801aef4 <tcp_rexmit_rto_prepare+0xdc>)
 801ae30:	f006 fbe0 	bl	80215f4 <iprintf>

  if (pcb->unacked == NULL) {
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d102      	bne.n	801ae42 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801ae3c:	f06f 0305 	mvn.w	r3, #5
 801ae40:	e050      	b.n	801aee4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ae42:	687b      	ldr	r3, [r7, #4]
 801ae44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ae46:	60fb      	str	r3, [r7, #12]
 801ae48:	e00b      	b.n	801ae62 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801ae4a:	68f8      	ldr	r0, [r7, #12]
 801ae4c:	f7ff fee4 	bl	801ac18 <tcp_output_segment_busy>
 801ae50:	4603      	mov	r3, r0
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	d002      	beq.n	801ae5c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801ae56:	f06f 0305 	mvn.w	r3, #5
 801ae5a:	e043      	b.n	801aee4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	60fb      	str	r3, [r7, #12]
 801ae62:	68fb      	ldr	r3, [r7, #12]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d1ef      	bne.n	801ae4a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801ae6a:	68f8      	ldr	r0, [r7, #12]
 801ae6c:	f7ff fed4 	bl	801ac18 <tcp_output_segment_busy>
 801ae70:	4603      	mov	r3, r0
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d002      	beq.n	801ae7c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801ae76:	f06f 0305 	mvn.w	r3, #5
 801ae7a:	e033      	b.n	801aee4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	2200      	movs	r2, #0
 801ae90:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	8b5b      	ldrh	r3, [r3, #26]
 801ae96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801ae9a:	b29a      	uxth	r2, r3
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801aea0:	68fb      	ldr	r3, [r7, #12]
 801aea2:	68db      	ldr	r3, [r3, #12]
 801aea4:	685b      	ldr	r3, [r3, #4]
 801aea6:	4618      	mov	r0, r3
 801aea8:	f7f9 fc87 	bl	80147ba <lwip_htonl>
 801aeac:	4604      	mov	r4, r0
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	891b      	ldrh	r3, [r3, #8]
 801aeb2:	461d      	mov	r5, r3
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	68db      	ldr	r3, [r3, #12]
 801aeb8:	899b      	ldrh	r3, [r3, #12]
 801aeba:	b29b      	uxth	r3, r3
 801aebc:	4618      	mov	r0, r3
 801aebe:	f7f9 fc67 	bl	8014790 <lwip_htons>
 801aec2:	4603      	mov	r3, r0
 801aec4:	b2db      	uxtb	r3, r3
 801aec6:	f003 0303 	and.w	r3, r3, #3
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d001      	beq.n	801aed2 <tcp_rexmit_rto_prepare+0xba>
 801aece:	2301      	movs	r3, #1
 801aed0:	e000      	b.n	801aed4 <tcp_rexmit_rto_prepare+0xbc>
 801aed2:	2300      	movs	r3, #0
 801aed4:	442b      	add	r3, r5
 801aed6:	18e2      	adds	r2, r4, r3
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	2200      	movs	r2, #0
 801aee0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801aee2:	2300      	movs	r3, #0
}
 801aee4:	4618      	mov	r0, r3
 801aee6:	3710      	adds	r7, #16
 801aee8:	46bd      	mov	sp, r7
 801aeea:	bdb0      	pop	{r4, r5, r7, pc}
 801aeec:	08023cf4 	.word	0x08023cf4
 801aef0:	08024330 	.word	0x08024330
 801aef4:	08023d48 	.word	0x08023d48

0801aef8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801aef8:	b580      	push	{r7, lr}
 801aefa:	b082      	sub	sp, #8
 801aefc:	af00      	add	r7, sp, #0
 801aefe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	2b00      	cmp	r3, #0
 801af04:	d106      	bne.n	801af14 <tcp_rexmit_rto_commit+0x1c>
 801af06:	4b0d      	ldr	r3, [pc, #52]	; (801af3c <tcp_rexmit_rto_commit+0x44>)
 801af08:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801af0c:	490c      	ldr	r1, [pc, #48]	; (801af40 <tcp_rexmit_rto_commit+0x48>)
 801af0e:	480d      	ldr	r0, [pc, #52]	; (801af44 <tcp_rexmit_rto_commit+0x4c>)
 801af10:	f006 fb70 	bl	80215f4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801af1a:	2bff      	cmp	r3, #255	; 0xff
 801af1c:	d007      	beq.n	801af2e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801af24:	3301      	adds	r3, #1
 801af26:	b2da      	uxtb	r2, r3
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801af2e:	6878      	ldr	r0, [r7, #4]
 801af30:	f7ff fc7a 	bl	801a828 <tcp_output>
}
 801af34:	bf00      	nop
 801af36:	3708      	adds	r7, #8
 801af38:	46bd      	mov	sp, r7
 801af3a:	bd80      	pop	{r7, pc}
 801af3c:	08023cf4 	.word	0x08023cf4
 801af40:	08024354 	.word	0x08024354
 801af44:	08023d48 	.word	0x08023d48

0801af48 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801af48:	b580      	push	{r7, lr}
 801af4a:	b082      	sub	sp, #8
 801af4c:	af00      	add	r7, sp, #0
 801af4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	2b00      	cmp	r3, #0
 801af54:	d106      	bne.n	801af64 <tcp_rexmit_rto+0x1c>
 801af56:	4b0a      	ldr	r3, [pc, #40]	; (801af80 <tcp_rexmit_rto+0x38>)
 801af58:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801af5c:	4909      	ldr	r1, [pc, #36]	; (801af84 <tcp_rexmit_rto+0x3c>)
 801af5e:	480a      	ldr	r0, [pc, #40]	; (801af88 <tcp_rexmit_rto+0x40>)
 801af60:	f006 fb48 	bl	80215f4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801af64:	6878      	ldr	r0, [r7, #4]
 801af66:	f7ff ff57 	bl	801ae18 <tcp_rexmit_rto_prepare>
 801af6a:	4603      	mov	r3, r0
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d102      	bne.n	801af76 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801af70:	6878      	ldr	r0, [r7, #4]
 801af72:	f7ff ffc1 	bl	801aef8 <tcp_rexmit_rto_commit>
  }
}
 801af76:	bf00      	nop
 801af78:	3708      	adds	r7, #8
 801af7a:	46bd      	mov	sp, r7
 801af7c:	bd80      	pop	{r7, pc}
 801af7e:	bf00      	nop
 801af80:	08023cf4 	.word	0x08023cf4
 801af84:	08024378 	.word	0x08024378
 801af88:	08023d48 	.word	0x08023d48

0801af8c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801af8c:	b590      	push	{r4, r7, lr}
 801af8e:	b085      	sub	sp, #20
 801af90:	af00      	add	r7, sp, #0
 801af92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	2b00      	cmp	r3, #0
 801af98:	d106      	bne.n	801afa8 <tcp_rexmit+0x1c>
 801af9a:	4b2f      	ldr	r3, [pc, #188]	; (801b058 <tcp_rexmit+0xcc>)
 801af9c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801afa0:	492e      	ldr	r1, [pc, #184]	; (801b05c <tcp_rexmit+0xd0>)
 801afa2:	482f      	ldr	r0, [pc, #188]	; (801b060 <tcp_rexmit+0xd4>)
 801afa4:	f006 fb26 	bl	80215f4 <iprintf>

  if (pcb->unacked == NULL) {
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801afac:	2b00      	cmp	r3, #0
 801afae:	d102      	bne.n	801afb6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801afb0:	f06f 0305 	mvn.w	r3, #5
 801afb4:	e04c      	b.n	801b050 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801afba:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801afbc:	68b8      	ldr	r0, [r7, #8]
 801afbe:	f7ff fe2b 	bl	801ac18 <tcp_output_segment_busy>
 801afc2:	4603      	mov	r3, r0
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	d002      	beq.n	801afce <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801afc8:	f06f 0305 	mvn.w	r3, #5
 801afcc:	e040      	b.n	801b050 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801afce:	68bb      	ldr	r3, [r7, #8]
 801afd0:	681a      	ldr	r2, [r3, #0]
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	336c      	adds	r3, #108	; 0x6c
 801afda:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801afdc:	e002      	b.n	801afe4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801afde:	68fb      	ldr	r3, [r7, #12]
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801afe4:	68fb      	ldr	r3, [r7, #12]
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d011      	beq.n	801b010 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801afec:	68fb      	ldr	r3, [r7, #12]
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	68db      	ldr	r3, [r3, #12]
 801aff2:	685b      	ldr	r3, [r3, #4]
 801aff4:	4618      	mov	r0, r3
 801aff6:	f7f9 fbe0 	bl	80147ba <lwip_htonl>
 801affa:	4604      	mov	r4, r0
 801affc:	68bb      	ldr	r3, [r7, #8]
 801affe:	68db      	ldr	r3, [r3, #12]
 801b000:	685b      	ldr	r3, [r3, #4]
 801b002:	4618      	mov	r0, r3
 801b004:	f7f9 fbd9 	bl	80147ba <lwip_htonl>
 801b008:	4603      	mov	r3, r0
 801b00a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	dbe6      	blt.n	801afde <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801b010:	68fb      	ldr	r3, [r7, #12]
 801b012:	681a      	ldr	r2, [r3, #0]
 801b014:	68bb      	ldr	r3, [r7, #8]
 801b016:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b018:	68fb      	ldr	r3, [r7, #12]
 801b01a:	68ba      	ldr	r2, [r7, #8]
 801b01c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b01e:	68bb      	ldr	r3, [r7, #8]
 801b020:	681b      	ldr	r3, [r3, #0]
 801b022:	2b00      	cmp	r3, #0
 801b024:	d103      	bne.n	801b02e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	2200      	movs	r2, #0
 801b02a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b034:	2bff      	cmp	r3, #255	; 0xff
 801b036:	d007      	beq.n	801b048 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b03e:	3301      	adds	r3, #1
 801b040:	b2da      	uxtb	r2, r3
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	2200      	movs	r2, #0
 801b04c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801b04e:	2300      	movs	r3, #0
}
 801b050:	4618      	mov	r0, r3
 801b052:	3714      	adds	r7, #20
 801b054:	46bd      	mov	sp, r7
 801b056:	bd90      	pop	{r4, r7, pc}
 801b058:	08023cf4 	.word	0x08023cf4
 801b05c:	08024394 	.word	0x08024394
 801b060:	08023d48 	.word	0x08023d48

0801b064 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b064:	b580      	push	{r7, lr}
 801b066:	b082      	sub	sp, #8
 801b068:	af00      	add	r7, sp, #0
 801b06a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d106      	bne.n	801b080 <tcp_rexmit_fast+0x1c>
 801b072:	4b2f      	ldr	r3, [pc, #188]	; (801b130 <tcp_rexmit_fast+0xcc>)
 801b074:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801b078:	492e      	ldr	r1, [pc, #184]	; (801b134 <tcp_rexmit_fast+0xd0>)
 801b07a:	482f      	ldr	r0, [pc, #188]	; (801b138 <tcp_rexmit_fast+0xd4>)
 801b07c:	f006 faba 	bl	80215f4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b084:	2b00      	cmp	r3, #0
 801b086:	d04f      	beq.n	801b128 <tcp_rexmit_fast+0xc4>
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	8b5b      	ldrh	r3, [r3, #26]
 801b08c:	f003 0304 	and.w	r3, r3, #4
 801b090:	2b00      	cmp	r3, #0
 801b092:	d149      	bne.n	801b128 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801b094:	6878      	ldr	r0, [r7, #4]
 801b096:	f7ff ff79 	bl	801af8c <tcp_rexmit>
 801b09a:	4603      	mov	r3, r0
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d143      	bne.n	801b128 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b0a0:	687b      	ldr	r3, [r7, #4]
 801b0a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b0ac:	429a      	cmp	r2, r3
 801b0ae:	d208      	bcs.n	801b0c2 <tcp_rexmit_fast+0x5e>
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	da00      	bge.n	801b0bc <tcp_rexmit_fast+0x58>
 801b0ba:	3301      	adds	r3, #1
 801b0bc:	105b      	asrs	r3, r3, #1
 801b0be:	b29b      	uxth	r3, r3
 801b0c0:	e007      	b.n	801b0d2 <tcp_rexmit_fast+0x6e>
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	da00      	bge.n	801b0ce <tcp_rexmit_fast+0x6a>
 801b0cc:	3301      	adds	r3, #1
 801b0ce:	105b      	asrs	r3, r3, #1
 801b0d0:	b29b      	uxth	r3, r3
 801b0d2:	687a      	ldr	r2, [r7, #4]
 801b0d4:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801b0de:	461a      	mov	r2, r3
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b0e4:	005b      	lsls	r3, r3, #1
 801b0e6:	429a      	cmp	r2, r3
 801b0e8:	d206      	bcs.n	801b0f8 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b0ee:	005b      	lsls	r3, r3, #1
 801b0f0:	b29a      	uxth	r2, r3
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b102:	4619      	mov	r1, r3
 801b104:	0049      	lsls	r1, r1, #1
 801b106:	440b      	add	r3, r1
 801b108:	b29b      	uxth	r3, r3
 801b10a:	4413      	add	r3, r2
 801b10c:	b29a      	uxth	r2, r3
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	8b5b      	ldrh	r3, [r3, #26]
 801b118:	f043 0304 	orr.w	r3, r3, #4
 801b11c:	b29a      	uxth	r2, r3
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	2200      	movs	r2, #0
 801b126:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801b128:	bf00      	nop
 801b12a:	3708      	adds	r7, #8
 801b12c:	46bd      	mov	sp, r7
 801b12e:	bd80      	pop	{r7, pc}
 801b130:	08023cf4 	.word	0x08023cf4
 801b134:	080243ac 	.word	0x080243ac
 801b138:	08023d48 	.word	0x08023d48

0801b13c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801b13c:	b580      	push	{r7, lr}
 801b13e:	b086      	sub	sp, #24
 801b140:	af00      	add	r7, sp, #0
 801b142:	60f8      	str	r0, [r7, #12]
 801b144:	607b      	str	r3, [r7, #4]
 801b146:	460b      	mov	r3, r1
 801b148:	817b      	strh	r3, [r7, #10]
 801b14a:	4613      	mov	r3, r2
 801b14c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b14e:	897a      	ldrh	r2, [r7, #10]
 801b150:	893b      	ldrh	r3, [r7, #8]
 801b152:	4413      	add	r3, r2
 801b154:	b29b      	uxth	r3, r3
 801b156:	3314      	adds	r3, #20
 801b158:	b29b      	uxth	r3, r3
 801b15a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b15e:	4619      	mov	r1, r3
 801b160:	2022      	movs	r0, #34	; 0x22
 801b162:	f7fa fc03 	bl	801596c <pbuf_alloc>
 801b166:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801b168:	697b      	ldr	r3, [r7, #20]
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d04e      	beq.n	801b20c <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b16e:	697b      	ldr	r3, [r7, #20]
 801b170:	895b      	ldrh	r3, [r3, #10]
 801b172:	461a      	mov	r2, r3
 801b174:	897b      	ldrh	r3, [r7, #10]
 801b176:	3314      	adds	r3, #20
 801b178:	429a      	cmp	r2, r3
 801b17a:	da06      	bge.n	801b18a <tcp_output_alloc_header_common+0x4e>
 801b17c:	4b26      	ldr	r3, [pc, #152]	; (801b218 <tcp_output_alloc_header_common+0xdc>)
 801b17e:	f240 7224 	movw	r2, #1828	; 0x724
 801b182:	4926      	ldr	r1, [pc, #152]	; (801b21c <tcp_output_alloc_header_common+0xe0>)
 801b184:	4826      	ldr	r0, [pc, #152]	; (801b220 <tcp_output_alloc_header_common+0xe4>)
 801b186:	f006 fa35 	bl	80215f4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801b18a:	697b      	ldr	r3, [r7, #20]
 801b18c:	685b      	ldr	r3, [r3, #4]
 801b18e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801b190:	8c3b      	ldrh	r3, [r7, #32]
 801b192:	4618      	mov	r0, r3
 801b194:	f7f9 fafc 	bl	8014790 <lwip_htons>
 801b198:	4603      	mov	r3, r0
 801b19a:	461a      	mov	r2, r3
 801b19c:	693b      	ldr	r3, [r7, #16]
 801b19e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801b1a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b1a2:	4618      	mov	r0, r3
 801b1a4:	f7f9 faf4 	bl	8014790 <lwip_htons>
 801b1a8:	4603      	mov	r3, r0
 801b1aa:	461a      	mov	r2, r3
 801b1ac:	693b      	ldr	r3, [r7, #16]
 801b1ae:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801b1b0:	693b      	ldr	r3, [r7, #16]
 801b1b2:	687a      	ldr	r2, [r7, #4]
 801b1b4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801b1b6:	68f8      	ldr	r0, [r7, #12]
 801b1b8:	f7f9 faff 	bl	80147ba <lwip_htonl>
 801b1bc:	4602      	mov	r2, r0
 801b1be:	693b      	ldr	r3, [r7, #16]
 801b1c0:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801b1c2:	897b      	ldrh	r3, [r7, #10]
 801b1c4:	089b      	lsrs	r3, r3, #2
 801b1c6:	b29b      	uxth	r3, r3
 801b1c8:	3305      	adds	r3, #5
 801b1ca:	b29b      	uxth	r3, r3
 801b1cc:	031b      	lsls	r3, r3, #12
 801b1ce:	b29a      	uxth	r2, r3
 801b1d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b1d4:	b29b      	uxth	r3, r3
 801b1d6:	4313      	orrs	r3, r2
 801b1d8:	b29b      	uxth	r3, r3
 801b1da:	4618      	mov	r0, r3
 801b1dc:	f7f9 fad8 	bl	8014790 <lwip_htons>
 801b1e0:	4603      	mov	r3, r0
 801b1e2:	461a      	mov	r2, r3
 801b1e4:	693b      	ldr	r3, [r7, #16]
 801b1e6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801b1e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b1ea:	4618      	mov	r0, r3
 801b1ec:	f7f9 fad0 	bl	8014790 <lwip_htons>
 801b1f0:	4603      	mov	r3, r0
 801b1f2:	461a      	mov	r2, r3
 801b1f4:	693b      	ldr	r3, [r7, #16]
 801b1f6:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801b1f8:	693b      	ldr	r3, [r7, #16]
 801b1fa:	2200      	movs	r2, #0
 801b1fc:	741a      	strb	r2, [r3, #16]
 801b1fe:	2200      	movs	r2, #0
 801b200:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801b202:	693b      	ldr	r3, [r7, #16]
 801b204:	2200      	movs	r2, #0
 801b206:	749a      	strb	r2, [r3, #18]
 801b208:	2200      	movs	r2, #0
 801b20a:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801b20c:	697b      	ldr	r3, [r7, #20]
}
 801b20e:	4618      	mov	r0, r3
 801b210:	3718      	adds	r7, #24
 801b212:	46bd      	mov	sp, r7
 801b214:	bd80      	pop	{r7, pc}
 801b216:	bf00      	nop
 801b218:	08023cf4 	.word	0x08023cf4
 801b21c:	080243cc 	.word	0x080243cc
 801b220:	08023d48 	.word	0x08023d48

0801b224 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801b224:	b5b0      	push	{r4, r5, r7, lr}
 801b226:	b08a      	sub	sp, #40	; 0x28
 801b228:	af04      	add	r7, sp, #16
 801b22a:	60f8      	str	r0, [r7, #12]
 801b22c:	607b      	str	r3, [r7, #4]
 801b22e:	460b      	mov	r3, r1
 801b230:	817b      	strh	r3, [r7, #10]
 801b232:	4613      	mov	r3, r2
 801b234:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801b236:	68fb      	ldr	r3, [r7, #12]
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d106      	bne.n	801b24a <tcp_output_alloc_header+0x26>
 801b23c:	4b15      	ldr	r3, [pc, #84]	; (801b294 <tcp_output_alloc_header+0x70>)
 801b23e:	f240 7242 	movw	r2, #1858	; 0x742
 801b242:	4915      	ldr	r1, [pc, #84]	; (801b298 <tcp_output_alloc_header+0x74>)
 801b244:	4815      	ldr	r0, [pc, #84]	; (801b29c <tcp_output_alloc_header+0x78>)
 801b246:	f006 f9d5 	bl	80215f4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801b24a:	68fb      	ldr	r3, [r7, #12]
 801b24c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801b24e:	68fb      	ldr	r3, [r7, #12]
 801b250:	8adb      	ldrh	r3, [r3, #22]
 801b252:	68fa      	ldr	r2, [r7, #12]
 801b254:	8b12      	ldrh	r2, [r2, #24]
 801b256:	68f9      	ldr	r1, [r7, #12]
 801b258:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801b25a:	893d      	ldrh	r5, [r7, #8]
 801b25c:	897c      	ldrh	r4, [r7, #10]
 801b25e:	9103      	str	r1, [sp, #12]
 801b260:	2110      	movs	r1, #16
 801b262:	9102      	str	r1, [sp, #8]
 801b264:	9201      	str	r2, [sp, #4]
 801b266:	9300      	str	r3, [sp, #0]
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	462a      	mov	r2, r5
 801b26c:	4621      	mov	r1, r4
 801b26e:	f7ff ff65 	bl	801b13c <tcp_output_alloc_header_common>
 801b272:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801b274:	697b      	ldr	r3, [r7, #20]
 801b276:	2b00      	cmp	r3, #0
 801b278:	d006      	beq.n	801b288 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b27a:	68fb      	ldr	r3, [r7, #12]
 801b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b27e:	68fa      	ldr	r2, [r7, #12]
 801b280:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b282:	441a      	add	r2, r3
 801b284:	68fb      	ldr	r3, [r7, #12]
 801b286:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801b288:	697b      	ldr	r3, [r7, #20]
}
 801b28a:	4618      	mov	r0, r3
 801b28c:	3718      	adds	r7, #24
 801b28e:	46bd      	mov	sp, r7
 801b290:	bdb0      	pop	{r4, r5, r7, pc}
 801b292:	bf00      	nop
 801b294:	08023cf4 	.word	0x08023cf4
 801b298:	080243fc 	.word	0x080243fc
 801b29c:	08023d48 	.word	0x08023d48

0801b2a0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801b2a0:	b580      	push	{r7, lr}
 801b2a2:	b088      	sub	sp, #32
 801b2a4:	af00      	add	r7, sp, #0
 801b2a6:	60f8      	str	r0, [r7, #12]
 801b2a8:	60b9      	str	r1, [r7, #8]
 801b2aa:	4611      	mov	r1, r2
 801b2ac:	461a      	mov	r2, r3
 801b2ae:	460b      	mov	r3, r1
 801b2b0:	71fb      	strb	r3, [r7, #7]
 801b2b2:	4613      	mov	r3, r2
 801b2b4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801b2b6:	2300      	movs	r3, #0
 801b2b8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801b2ba:	68bb      	ldr	r3, [r7, #8]
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d106      	bne.n	801b2ce <tcp_output_fill_options+0x2e>
 801b2c0:	4b13      	ldr	r3, [pc, #76]	; (801b310 <tcp_output_fill_options+0x70>)
 801b2c2:	f240 7256 	movw	r2, #1878	; 0x756
 801b2c6:	4913      	ldr	r1, [pc, #76]	; (801b314 <tcp_output_fill_options+0x74>)
 801b2c8:	4813      	ldr	r0, [pc, #76]	; (801b318 <tcp_output_fill_options+0x78>)
 801b2ca:	f006 f993 	bl	80215f4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801b2ce:	68bb      	ldr	r3, [r7, #8]
 801b2d0:	685b      	ldr	r3, [r3, #4]
 801b2d2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801b2d4:	69bb      	ldr	r3, [r7, #24]
 801b2d6:	3314      	adds	r3, #20
 801b2d8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801b2da:	69bb      	ldr	r3, [r7, #24]
 801b2dc:	f103 0214 	add.w	r2, r3, #20
 801b2e0:	8bfb      	ldrh	r3, [r7, #30]
 801b2e2:	009b      	lsls	r3, r3, #2
 801b2e4:	4619      	mov	r1, r3
 801b2e6:	79fb      	ldrb	r3, [r7, #7]
 801b2e8:	009b      	lsls	r3, r3, #2
 801b2ea:	f003 0304 	and.w	r3, r3, #4
 801b2ee:	440b      	add	r3, r1
 801b2f0:	4413      	add	r3, r2
 801b2f2:	697a      	ldr	r2, [r7, #20]
 801b2f4:	429a      	cmp	r2, r3
 801b2f6:	d006      	beq.n	801b306 <tcp_output_fill_options+0x66>
 801b2f8:	4b05      	ldr	r3, [pc, #20]	; (801b310 <tcp_output_fill_options+0x70>)
 801b2fa:	f240 7275 	movw	r2, #1909	; 0x775
 801b2fe:	4907      	ldr	r1, [pc, #28]	; (801b31c <tcp_output_fill_options+0x7c>)
 801b300:	4805      	ldr	r0, [pc, #20]	; (801b318 <tcp_output_fill_options+0x78>)
 801b302:	f006 f977 	bl	80215f4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801b306:	bf00      	nop
 801b308:	3720      	adds	r7, #32
 801b30a:	46bd      	mov	sp, r7
 801b30c:	bd80      	pop	{r7, pc}
 801b30e:	bf00      	nop
 801b310:	08023cf4 	.word	0x08023cf4
 801b314:	08024424 	.word	0x08024424
 801b318:	08023d48 	.word	0x08023d48
 801b31c:	0802431c 	.word	0x0802431c

0801b320 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801b320:	b580      	push	{r7, lr}
 801b322:	b08a      	sub	sp, #40	; 0x28
 801b324:	af04      	add	r7, sp, #16
 801b326:	60f8      	str	r0, [r7, #12]
 801b328:	60b9      	str	r1, [r7, #8]
 801b32a:	607a      	str	r2, [r7, #4]
 801b32c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801b32e:	68bb      	ldr	r3, [r7, #8]
 801b330:	2b00      	cmp	r3, #0
 801b332:	d106      	bne.n	801b342 <tcp_output_control_segment+0x22>
 801b334:	4b1c      	ldr	r3, [pc, #112]	; (801b3a8 <tcp_output_control_segment+0x88>)
 801b336:	f240 7287 	movw	r2, #1927	; 0x787
 801b33a:	491c      	ldr	r1, [pc, #112]	; (801b3ac <tcp_output_control_segment+0x8c>)
 801b33c:	481c      	ldr	r0, [pc, #112]	; (801b3b0 <tcp_output_control_segment+0x90>)
 801b33e:	f006 f959 	bl	80215f4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801b342:	683a      	ldr	r2, [r7, #0]
 801b344:	6879      	ldr	r1, [r7, #4]
 801b346:	68f8      	ldr	r0, [r7, #12]
 801b348:	f7fe ff2e 	bl	801a1a8 <tcp_route>
 801b34c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801b34e:	693b      	ldr	r3, [r7, #16]
 801b350:	2b00      	cmp	r3, #0
 801b352:	d102      	bne.n	801b35a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801b354:	23fc      	movs	r3, #252	; 0xfc
 801b356:	75fb      	strb	r3, [r7, #23]
 801b358:	e01c      	b.n	801b394 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801b35a:	68fb      	ldr	r3, [r7, #12]
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d006      	beq.n	801b36e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801b360:	68fb      	ldr	r3, [r7, #12]
 801b362:	7adb      	ldrb	r3, [r3, #11]
 801b364:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801b366:	68fb      	ldr	r3, [r7, #12]
 801b368:	7a9b      	ldrb	r3, [r3, #10]
 801b36a:	757b      	strb	r3, [r7, #21]
 801b36c:	e003      	b.n	801b376 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801b36e:	23ff      	movs	r3, #255	; 0xff
 801b370:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801b372:	2300      	movs	r3, #0
 801b374:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801b376:	7dba      	ldrb	r2, [r7, #22]
 801b378:	693b      	ldr	r3, [r7, #16]
 801b37a:	9302      	str	r3, [sp, #8]
 801b37c:	2306      	movs	r3, #6
 801b37e:	9301      	str	r3, [sp, #4]
 801b380:	7d7b      	ldrb	r3, [r7, #21]
 801b382:	9300      	str	r3, [sp, #0]
 801b384:	4613      	mov	r3, r2
 801b386:	683a      	ldr	r2, [r7, #0]
 801b388:	6879      	ldr	r1, [r7, #4]
 801b38a:	68b8      	ldr	r0, [r7, #8]
 801b38c:	f004 f964 	bl	801f658 <ip4_output_if>
 801b390:	4603      	mov	r3, r0
 801b392:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801b394:	68b8      	ldr	r0, [r7, #8]
 801b396:	f7fa fdc9 	bl	8015f2c <pbuf_free>
  return err;
 801b39a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b39e:	4618      	mov	r0, r3
 801b3a0:	3718      	adds	r7, #24
 801b3a2:	46bd      	mov	sp, r7
 801b3a4:	bd80      	pop	{r7, pc}
 801b3a6:	bf00      	nop
 801b3a8:	08023cf4 	.word	0x08023cf4
 801b3ac:	0802444c 	.word	0x0802444c
 801b3b0:	08023d48 	.word	0x08023d48

0801b3b4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801b3b4:	b590      	push	{r4, r7, lr}
 801b3b6:	b08b      	sub	sp, #44	; 0x2c
 801b3b8:	af04      	add	r7, sp, #16
 801b3ba:	60f8      	str	r0, [r7, #12]
 801b3bc:	60b9      	str	r1, [r7, #8]
 801b3be:	607a      	str	r2, [r7, #4]
 801b3c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801b3c2:	683b      	ldr	r3, [r7, #0]
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d106      	bne.n	801b3d6 <tcp_rst+0x22>
 801b3c8:	4b1f      	ldr	r3, [pc, #124]	; (801b448 <tcp_rst+0x94>)
 801b3ca:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801b3ce:	491f      	ldr	r1, [pc, #124]	; (801b44c <tcp_rst+0x98>)
 801b3d0:	481f      	ldr	r0, [pc, #124]	; (801b450 <tcp_rst+0x9c>)
 801b3d2:	f006 f90f 	bl	80215f4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801b3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d106      	bne.n	801b3ea <tcp_rst+0x36>
 801b3dc:	4b1a      	ldr	r3, [pc, #104]	; (801b448 <tcp_rst+0x94>)
 801b3de:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801b3e2:	491c      	ldr	r1, [pc, #112]	; (801b454 <tcp_rst+0xa0>)
 801b3e4:	481a      	ldr	r0, [pc, #104]	; (801b450 <tcp_rst+0x9c>)
 801b3e6:	f006 f905 	bl	80215f4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b3ea:	2300      	movs	r3, #0
 801b3ec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801b3ee:	f246 0308 	movw	r3, #24584	; 0x6008
 801b3f2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801b3f4:	7dfb      	ldrb	r3, [r7, #23]
 801b3f6:	b29c      	uxth	r4, r3
 801b3f8:	68b8      	ldr	r0, [r7, #8]
 801b3fa:	f7f9 f9de 	bl	80147ba <lwip_htonl>
 801b3fe:	4602      	mov	r2, r0
 801b400:	8abb      	ldrh	r3, [r7, #20]
 801b402:	9303      	str	r3, [sp, #12]
 801b404:	2314      	movs	r3, #20
 801b406:	9302      	str	r3, [sp, #8]
 801b408:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801b40a:	9301      	str	r3, [sp, #4]
 801b40c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b40e:	9300      	str	r3, [sp, #0]
 801b410:	4613      	mov	r3, r2
 801b412:	2200      	movs	r2, #0
 801b414:	4621      	mov	r1, r4
 801b416:	6878      	ldr	r0, [r7, #4]
 801b418:	f7ff fe90 	bl	801b13c <tcp_output_alloc_header_common>
 801b41c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801b41e:	693b      	ldr	r3, [r7, #16]
 801b420:	2b00      	cmp	r3, #0
 801b422:	d00c      	beq.n	801b43e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b424:	7dfb      	ldrb	r3, [r7, #23]
 801b426:	2200      	movs	r2, #0
 801b428:	6939      	ldr	r1, [r7, #16]
 801b42a:	68f8      	ldr	r0, [r7, #12]
 801b42c:	f7ff ff38 	bl	801b2a0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b432:	683a      	ldr	r2, [r7, #0]
 801b434:	6939      	ldr	r1, [r7, #16]
 801b436:	68f8      	ldr	r0, [r7, #12]
 801b438:	f7ff ff72 	bl	801b320 <tcp_output_control_segment>
 801b43c:	e000      	b.n	801b440 <tcp_rst+0x8c>
    return;
 801b43e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b440:	371c      	adds	r7, #28
 801b442:	46bd      	mov	sp, r7
 801b444:	bd90      	pop	{r4, r7, pc}
 801b446:	bf00      	nop
 801b448:	08023cf4 	.word	0x08023cf4
 801b44c:	08024478 	.word	0x08024478
 801b450:	08023d48 	.word	0x08023d48
 801b454:	08024494 	.word	0x08024494

0801b458 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b458:	b590      	push	{r4, r7, lr}
 801b45a:	b087      	sub	sp, #28
 801b45c:	af00      	add	r7, sp, #0
 801b45e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801b460:	2300      	movs	r3, #0
 801b462:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801b464:	2300      	movs	r3, #0
 801b466:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d106      	bne.n	801b47c <tcp_send_empty_ack+0x24>
 801b46e:	4b28      	ldr	r3, [pc, #160]	; (801b510 <tcp_send_empty_ack+0xb8>)
 801b470:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801b474:	4927      	ldr	r1, [pc, #156]	; (801b514 <tcp_send_empty_ack+0xbc>)
 801b476:	4828      	ldr	r0, [pc, #160]	; (801b518 <tcp_send_empty_ack+0xc0>)
 801b478:	f006 f8bc 	bl	80215f4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b47c:	7dfb      	ldrb	r3, [r7, #23]
 801b47e:	009b      	lsls	r3, r3, #2
 801b480:	b2db      	uxtb	r3, r3
 801b482:	f003 0304 	and.w	r3, r3, #4
 801b486:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b488:	7d7b      	ldrb	r3, [r7, #21]
 801b48a:	b29c      	uxth	r4, r3
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b490:	4618      	mov	r0, r3
 801b492:	f7f9 f992 	bl	80147ba <lwip_htonl>
 801b496:	4603      	mov	r3, r0
 801b498:	2200      	movs	r2, #0
 801b49a:	4621      	mov	r1, r4
 801b49c:	6878      	ldr	r0, [r7, #4]
 801b49e:	f7ff fec1 	bl	801b224 <tcp_output_alloc_header>
 801b4a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b4a4:	693b      	ldr	r3, [r7, #16]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d109      	bne.n	801b4be <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	8b5b      	ldrh	r3, [r3, #26]
 801b4ae:	f043 0303 	orr.w	r3, r3, #3
 801b4b2:	b29a      	uxth	r2, r3
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b4b8:	f06f 0301 	mvn.w	r3, #1
 801b4bc:	e023      	b.n	801b506 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801b4be:	7dbb      	ldrb	r3, [r7, #22]
 801b4c0:	7dfa      	ldrb	r2, [r7, #23]
 801b4c2:	6939      	ldr	r1, [r7, #16]
 801b4c4:	6878      	ldr	r0, [r7, #4]
 801b4c6:	f7ff feeb 	bl	801b2a0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b4ca:	687a      	ldr	r2, [r7, #4]
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	3304      	adds	r3, #4
 801b4d0:	6939      	ldr	r1, [r7, #16]
 801b4d2:	6878      	ldr	r0, [r7, #4]
 801b4d4:	f7ff ff24 	bl	801b320 <tcp_output_control_segment>
 801b4d8:	4603      	mov	r3, r0
 801b4da:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801b4dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d007      	beq.n	801b4f4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	8b5b      	ldrh	r3, [r3, #26]
 801b4e8:	f043 0303 	orr.w	r3, r3, #3
 801b4ec:	b29a      	uxth	r2, r3
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	835a      	strh	r2, [r3, #26]
 801b4f2:	e006      	b.n	801b502 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	8b5b      	ldrh	r3, [r3, #26]
 801b4f8:	f023 0303 	bic.w	r3, r3, #3
 801b4fc:	b29a      	uxth	r2, r3
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801b502:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b506:	4618      	mov	r0, r3
 801b508:	371c      	adds	r7, #28
 801b50a:	46bd      	mov	sp, r7
 801b50c:	bd90      	pop	{r4, r7, pc}
 801b50e:	bf00      	nop
 801b510:	08023cf4 	.word	0x08023cf4
 801b514:	080244b0 	.word	0x080244b0
 801b518:	08023d48 	.word	0x08023d48

0801b51c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b51c:	b590      	push	{r4, r7, lr}
 801b51e:	b087      	sub	sp, #28
 801b520:	af00      	add	r7, sp, #0
 801b522:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b524:	2300      	movs	r3, #0
 801b526:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d106      	bne.n	801b53c <tcp_keepalive+0x20>
 801b52e:	4b18      	ldr	r3, [pc, #96]	; (801b590 <tcp_keepalive+0x74>)
 801b530:	f640 0224 	movw	r2, #2084	; 0x824
 801b534:	4917      	ldr	r1, [pc, #92]	; (801b594 <tcp_keepalive+0x78>)
 801b536:	4818      	ldr	r0, [pc, #96]	; (801b598 <tcp_keepalive+0x7c>)
 801b538:	f006 f85c 	bl	80215f4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b53c:	7dfb      	ldrb	r3, [r7, #23]
 801b53e:	b29c      	uxth	r4, r3
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b544:	3b01      	subs	r3, #1
 801b546:	4618      	mov	r0, r3
 801b548:	f7f9 f937 	bl	80147ba <lwip_htonl>
 801b54c:	4603      	mov	r3, r0
 801b54e:	2200      	movs	r2, #0
 801b550:	4621      	mov	r1, r4
 801b552:	6878      	ldr	r0, [r7, #4]
 801b554:	f7ff fe66 	bl	801b224 <tcp_output_alloc_header>
 801b558:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b55a:	693b      	ldr	r3, [r7, #16]
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d102      	bne.n	801b566 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b564:	e010      	b.n	801b588 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b566:	7dfb      	ldrb	r3, [r7, #23]
 801b568:	2200      	movs	r2, #0
 801b56a:	6939      	ldr	r1, [r7, #16]
 801b56c:	6878      	ldr	r0, [r7, #4]
 801b56e:	f7ff fe97 	bl	801b2a0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b572:	687a      	ldr	r2, [r7, #4]
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	3304      	adds	r3, #4
 801b578:	6939      	ldr	r1, [r7, #16]
 801b57a:	6878      	ldr	r0, [r7, #4]
 801b57c:	f7ff fed0 	bl	801b320 <tcp_output_control_segment>
 801b580:	4603      	mov	r3, r0
 801b582:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b584:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b588:	4618      	mov	r0, r3
 801b58a:	371c      	adds	r7, #28
 801b58c:	46bd      	mov	sp, r7
 801b58e:	bd90      	pop	{r4, r7, pc}
 801b590:	08023cf4 	.word	0x08023cf4
 801b594:	080244d0 	.word	0x080244d0
 801b598:	08023d48 	.word	0x08023d48

0801b59c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b59c:	b590      	push	{r4, r7, lr}
 801b59e:	b08b      	sub	sp, #44	; 0x2c
 801b5a0:	af00      	add	r7, sp, #0
 801b5a2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b5a4:	2300      	movs	r3, #0
 801b5a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d106      	bne.n	801b5be <tcp_zero_window_probe+0x22>
 801b5b0:	4b4c      	ldr	r3, [pc, #304]	; (801b6e4 <tcp_zero_window_probe+0x148>)
 801b5b2:	f640 024f 	movw	r2, #2127	; 0x84f
 801b5b6:	494c      	ldr	r1, [pc, #304]	; (801b6e8 <tcp_zero_window_probe+0x14c>)
 801b5b8:	484c      	ldr	r0, [pc, #304]	; (801b6ec <tcp_zero_window_probe+0x150>)
 801b5ba:	f006 f81b 	bl	80215f4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b5c2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801b5c4:	6a3b      	ldr	r3, [r7, #32]
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d101      	bne.n	801b5ce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b5ca:	2300      	movs	r3, #0
 801b5cc:	e086      	b.n	801b6dc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b5d4:	2bff      	cmp	r3, #255	; 0xff
 801b5d6:	d007      	beq.n	801b5e8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b5de:	3301      	adds	r3, #1
 801b5e0:	b2da      	uxtb	r2, r3
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b5e8:	6a3b      	ldr	r3, [r7, #32]
 801b5ea:	68db      	ldr	r3, [r3, #12]
 801b5ec:	899b      	ldrh	r3, [r3, #12]
 801b5ee:	b29b      	uxth	r3, r3
 801b5f0:	4618      	mov	r0, r3
 801b5f2:	f7f9 f8cd 	bl	8014790 <lwip_htons>
 801b5f6:	4603      	mov	r3, r0
 801b5f8:	b2db      	uxtb	r3, r3
 801b5fa:	f003 0301 	and.w	r3, r3, #1
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d005      	beq.n	801b60e <tcp_zero_window_probe+0x72>
 801b602:	6a3b      	ldr	r3, [r7, #32]
 801b604:	891b      	ldrh	r3, [r3, #8]
 801b606:	2b00      	cmp	r3, #0
 801b608:	d101      	bne.n	801b60e <tcp_zero_window_probe+0x72>
 801b60a:	2301      	movs	r3, #1
 801b60c:	e000      	b.n	801b610 <tcp_zero_window_probe+0x74>
 801b60e:	2300      	movs	r3, #0
 801b610:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b612:	7ffb      	ldrb	r3, [r7, #31]
 801b614:	2b00      	cmp	r3, #0
 801b616:	bf0c      	ite	eq
 801b618:	2301      	moveq	r3, #1
 801b61a:	2300      	movne	r3, #0
 801b61c:	b2db      	uxtb	r3, r3
 801b61e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b624:	b299      	uxth	r1, r3
 801b626:	6a3b      	ldr	r3, [r7, #32]
 801b628:	68db      	ldr	r3, [r3, #12]
 801b62a:	685b      	ldr	r3, [r3, #4]
 801b62c:	8bba      	ldrh	r2, [r7, #28]
 801b62e:	6878      	ldr	r0, [r7, #4]
 801b630:	f7ff fdf8 	bl	801b224 <tcp_output_alloc_header>
 801b634:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801b636:	69bb      	ldr	r3, [r7, #24]
 801b638:	2b00      	cmp	r3, #0
 801b63a:	d102      	bne.n	801b642 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b63c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b640:	e04c      	b.n	801b6dc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b642:	69bb      	ldr	r3, [r7, #24]
 801b644:	685b      	ldr	r3, [r3, #4]
 801b646:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801b648:	7ffb      	ldrb	r3, [r7, #31]
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d011      	beq.n	801b672 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b64e:	697b      	ldr	r3, [r7, #20]
 801b650:	899b      	ldrh	r3, [r3, #12]
 801b652:	b29b      	uxth	r3, r3
 801b654:	b21b      	sxth	r3, r3
 801b656:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b65a:	b21c      	sxth	r4, r3
 801b65c:	2011      	movs	r0, #17
 801b65e:	f7f9 f897 	bl	8014790 <lwip_htons>
 801b662:	4603      	mov	r3, r0
 801b664:	b21b      	sxth	r3, r3
 801b666:	4323      	orrs	r3, r4
 801b668:	b21b      	sxth	r3, r3
 801b66a:	b29a      	uxth	r2, r3
 801b66c:	697b      	ldr	r3, [r7, #20]
 801b66e:	819a      	strh	r2, [r3, #12]
 801b670:	e010      	b.n	801b694 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b672:	69bb      	ldr	r3, [r7, #24]
 801b674:	685b      	ldr	r3, [r3, #4]
 801b676:	3314      	adds	r3, #20
 801b678:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b67a:	6a3b      	ldr	r3, [r7, #32]
 801b67c:	6858      	ldr	r0, [r3, #4]
 801b67e:	6a3b      	ldr	r3, [r7, #32]
 801b680:	685b      	ldr	r3, [r3, #4]
 801b682:	891a      	ldrh	r2, [r3, #8]
 801b684:	6a3b      	ldr	r3, [r7, #32]
 801b686:	891b      	ldrh	r3, [r3, #8]
 801b688:	1ad3      	subs	r3, r2, r3
 801b68a:	b29b      	uxth	r3, r3
 801b68c:	2201      	movs	r2, #1
 801b68e:	6939      	ldr	r1, [r7, #16]
 801b690:	f7fa fe52 	bl	8016338 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b694:	6a3b      	ldr	r3, [r7, #32]
 801b696:	68db      	ldr	r3, [r3, #12]
 801b698:	685b      	ldr	r3, [r3, #4]
 801b69a:	4618      	mov	r0, r3
 801b69c:	f7f9 f88d 	bl	80147ba <lwip_htonl>
 801b6a0:	4603      	mov	r3, r0
 801b6a2:	3301      	adds	r3, #1
 801b6a4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b6aa:	68fb      	ldr	r3, [r7, #12]
 801b6ac:	1ad3      	subs	r3, r2, r3
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	da02      	bge.n	801b6b8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	68fa      	ldr	r2, [r7, #12]
 801b6b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b6bc:	2200      	movs	r2, #0
 801b6be:	69b9      	ldr	r1, [r7, #24]
 801b6c0:	6878      	ldr	r0, [r7, #4]
 801b6c2:	f7ff fded 	bl	801b2a0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b6c6:	687a      	ldr	r2, [r7, #4]
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	3304      	adds	r3, #4
 801b6cc:	69b9      	ldr	r1, [r7, #24]
 801b6ce:	6878      	ldr	r0, [r7, #4]
 801b6d0:	f7ff fe26 	bl	801b320 <tcp_output_control_segment>
 801b6d4:	4603      	mov	r3, r0
 801b6d6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b6d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b6dc:	4618      	mov	r0, r3
 801b6de:	372c      	adds	r7, #44	; 0x2c
 801b6e0:	46bd      	mov	sp, r7
 801b6e2:	bd90      	pop	{r4, r7, pc}
 801b6e4:	08023cf4 	.word	0x08023cf4
 801b6e8:	080244ec 	.word	0x080244ec
 801b6ec:	08023d48 	.word	0x08023d48

0801b6f0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b6f0:	b580      	push	{r7, lr}
 801b6f2:	b082      	sub	sp, #8
 801b6f4:	af00      	add	r7, sp, #0
 801b6f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b6f8:	f7fa ff0c 	bl	8016514 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b6fc:	4b0a      	ldr	r3, [pc, #40]	; (801b728 <tcpip_tcp_timer+0x38>)
 801b6fe:	681b      	ldr	r3, [r3, #0]
 801b700:	2b00      	cmp	r3, #0
 801b702:	d103      	bne.n	801b70c <tcpip_tcp_timer+0x1c>
 801b704:	4b09      	ldr	r3, [pc, #36]	; (801b72c <tcpip_tcp_timer+0x3c>)
 801b706:	681b      	ldr	r3, [r3, #0]
 801b708:	2b00      	cmp	r3, #0
 801b70a:	d005      	beq.n	801b718 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b70c:	2200      	movs	r2, #0
 801b70e:	4908      	ldr	r1, [pc, #32]	; (801b730 <tcpip_tcp_timer+0x40>)
 801b710:	20fa      	movs	r0, #250	; 0xfa
 801b712:	f000 f8f1 	bl	801b8f8 <sys_timeout>
 801b716:	e002      	b.n	801b71e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b718:	4b06      	ldr	r3, [pc, #24]	; (801b734 <tcpip_tcp_timer+0x44>)
 801b71a:	2200      	movs	r2, #0
 801b71c:	601a      	str	r2, [r3, #0]
  }
}
 801b71e:	bf00      	nop
 801b720:	3708      	adds	r7, #8
 801b722:	46bd      	mov	sp, r7
 801b724:	bd80      	pop	{r7, pc}
 801b726:	bf00      	nop
 801b728:	20010358 	.word	0x20010358
 801b72c:	20010368 	.word	0x20010368
 801b730:	0801b6f1 	.word	0x0801b6f1
 801b734:	20008ffc 	.word	0x20008ffc

0801b738 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801b738:	b580      	push	{r7, lr}
 801b73a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b73c:	4b0a      	ldr	r3, [pc, #40]	; (801b768 <tcp_timer_needed+0x30>)
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	2b00      	cmp	r3, #0
 801b742:	d10f      	bne.n	801b764 <tcp_timer_needed+0x2c>
 801b744:	4b09      	ldr	r3, [pc, #36]	; (801b76c <tcp_timer_needed+0x34>)
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	2b00      	cmp	r3, #0
 801b74a:	d103      	bne.n	801b754 <tcp_timer_needed+0x1c>
 801b74c:	4b08      	ldr	r3, [pc, #32]	; (801b770 <tcp_timer_needed+0x38>)
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	2b00      	cmp	r3, #0
 801b752:	d007      	beq.n	801b764 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801b754:	4b04      	ldr	r3, [pc, #16]	; (801b768 <tcp_timer_needed+0x30>)
 801b756:	2201      	movs	r2, #1
 801b758:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b75a:	2200      	movs	r2, #0
 801b75c:	4905      	ldr	r1, [pc, #20]	; (801b774 <tcp_timer_needed+0x3c>)
 801b75e:	20fa      	movs	r0, #250	; 0xfa
 801b760:	f000 f8ca 	bl	801b8f8 <sys_timeout>
  }
}
 801b764:	bf00      	nop
 801b766:	bd80      	pop	{r7, pc}
 801b768:	20008ffc 	.word	0x20008ffc
 801b76c:	20010358 	.word	0x20010358
 801b770:	20010368 	.word	0x20010368
 801b774:	0801b6f1 	.word	0x0801b6f1

0801b778 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b778:	b580      	push	{r7, lr}
 801b77a:	b086      	sub	sp, #24
 801b77c:	af00      	add	r7, sp, #0
 801b77e:	60f8      	str	r0, [r7, #12]
 801b780:	60b9      	str	r1, [r7, #8]
 801b782:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b784:	200a      	movs	r0, #10
 801b786:	f7f9 fcb9 	bl	80150fc <memp_malloc>
 801b78a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801b78c:	693b      	ldr	r3, [r7, #16]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d109      	bne.n	801b7a6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b792:	693b      	ldr	r3, [r7, #16]
 801b794:	2b00      	cmp	r3, #0
 801b796:	d151      	bne.n	801b83c <sys_timeout_abs+0xc4>
 801b798:	4b2a      	ldr	r3, [pc, #168]	; (801b844 <sys_timeout_abs+0xcc>)
 801b79a:	22be      	movs	r2, #190	; 0xbe
 801b79c:	492a      	ldr	r1, [pc, #168]	; (801b848 <sys_timeout_abs+0xd0>)
 801b79e:	482b      	ldr	r0, [pc, #172]	; (801b84c <sys_timeout_abs+0xd4>)
 801b7a0:	f005 ff28 	bl	80215f4 <iprintf>
    return;
 801b7a4:	e04a      	b.n	801b83c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801b7a6:	693b      	ldr	r3, [r7, #16]
 801b7a8:	2200      	movs	r2, #0
 801b7aa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801b7ac:	693b      	ldr	r3, [r7, #16]
 801b7ae:	68ba      	ldr	r2, [r7, #8]
 801b7b0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801b7b2:	693b      	ldr	r3, [r7, #16]
 801b7b4:	687a      	ldr	r2, [r7, #4]
 801b7b6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801b7b8:	693b      	ldr	r3, [r7, #16]
 801b7ba:	68fa      	ldr	r2, [r7, #12]
 801b7bc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b7be:	4b24      	ldr	r3, [pc, #144]	; (801b850 <sys_timeout_abs+0xd8>)
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d103      	bne.n	801b7ce <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801b7c6:	4a22      	ldr	r2, [pc, #136]	; (801b850 <sys_timeout_abs+0xd8>)
 801b7c8:	693b      	ldr	r3, [r7, #16]
 801b7ca:	6013      	str	r3, [r2, #0]
    return;
 801b7cc:	e037      	b.n	801b83e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801b7ce:	693b      	ldr	r3, [r7, #16]
 801b7d0:	685a      	ldr	r2, [r3, #4]
 801b7d2:	4b1f      	ldr	r3, [pc, #124]	; (801b850 <sys_timeout_abs+0xd8>)
 801b7d4:	681b      	ldr	r3, [r3, #0]
 801b7d6:	685b      	ldr	r3, [r3, #4]
 801b7d8:	1ad3      	subs	r3, r2, r3
 801b7da:	0fdb      	lsrs	r3, r3, #31
 801b7dc:	f003 0301 	and.w	r3, r3, #1
 801b7e0:	b2db      	uxtb	r3, r3
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d007      	beq.n	801b7f6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801b7e6:	4b1a      	ldr	r3, [pc, #104]	; (801b850 <sys_timeout_abs+0xd8>)
 801b7e8:	681a      	ldr	r2, [r3, #0]
 801b7ea:	693b      	ldr	r3, [r7, #16]
 801b7ec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801b7ee:	4a18      	ldr	r2, [pc, #96]	; (801b850 <sys_timeout_abs+0xd8>)
 801b7f0:	693b      	ldr	r3, [r7, #16]
 801b7f2:	6013      	str	r3, [r2, #0]
 801b7f4:	e023      	b.n	801b83e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801b7f6:	4b16      	ldr	r3, [pc, #88]	; (801b850 <sys_timeout_abs+0xd8>)
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	617b      	str	r3, [r7, #20]
 801b7fc:	e01a      	b.n	801b834 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801b7fe:	697b      	ldr	r3, [r7, #20]
 801b800:	681b      	ldr	r3, [r3, #0]
 801b802:	2b00      	cmp	r3, #0
 801b804:	d00b      	beq.n	801b81e <sys_timeout_abs+0xa6>
 801b806:	693b      	ldr	r3, [r7, #16]
 801b808:	685a      	ldr	r2, [r3, #4]
 801b80a:	697b      	ldr	r3, [r7, #20]
 801b80c:	681b      	ldr	r3, [r3, #0]
 801b80e:	685b      	ldr	r3, [r3, #4]
 801b810:	1ad3      	subs	r3, r2, r3
 801b812:	0fdb      	lsrs	r3, r3, #31
 801b814:	f003 0301 	and.w	r3, r3, #1
 801b818:	b2db      	uxtb	r3, r3
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d007      	beq.n	801b82e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801b81e:	697b      	ldr	r3, [r7, #20]
 801b820:	681a      	ldr	r2, [r3, #0]
 801b822:	693b      	ldr	r3, [r7, #16]
 801b824:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801b826:	697b      	ldr	r3, [r7, #20]
 801b828:	693a      	ldr	r2, [r7, #16]
 801b82a:	601a      	str	r2, [r3, #0]
        break;
 801b82c:	e007      	b.n	801b83e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801b82e:	697b      	ldr	r3, [r7, #20]
 801b830:	681b      	ldr	r3, [r3, #0]
 801b832:	617b      	str	r3, [r7, #20]
 801b834:	697b      	ldr	r3, [r7, #20]
 801b836:	2b00      	cmp	r3, #0
 801b838:	d1e1      	bne.n	801b7fe <sys_timeout_abs+0x86>
 801b83a:	e000      	b.n	801b83e <sys_timeout_abs+0xc6>
    return;
 801b83c:	bf00      	nop
      }
    }
  }
}
 801b83e:	3718      	adds	r7, #24
 801b840:	46bd      	mov	sp, r7
 801b842:	bd80      	pop	{r7, pc}
 801b844:	08024510 	.word	0x08024510
 801b848:	08024544 	.word	0x08024544
 801b84c:	08024584 	.word	0x08024584
 801b850:	20008ff4 	.word	0x20008ff4

0801b854 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801b854:	b580      	push	{r7, lr}
 801b856:	b086      	sub	sp, #24
 801b858:	af00      	add	r7, sp, #0
 801b85a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b860:	697b      	ldr	r3, [r7, #20]
 801b862:	685b      	ldr	r3, [r3, #4]
 801b864:	4798      	blx	r3

  now = sys_now();
 801b866:	f7f2 fba5 	bl	800dfb4 <sys_now>
 801b86a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801b86c:	697b      	ldr	r3, [r7, #20]
 801b86e:	681a      	ldr	r2, [r3, #0]
 801b870:	4b0f      	ldr	r3, [pc, #60]	; (801b8b0 <lwip_cyclic_timer+0x5c>)
 801b872:	681b      	ldr	r3, [r3, #0]
 801b874:	4413      	add	r3, r2
 801b876:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b878:	68fa      	ldr	r2, [r7, #12]
 801b87a:	693b      	ldr	r3, [r7, #16]
 801b87c:	1ad3      	subs	r3, r2, r3
 801b87e:	0fdb      	lsrs	r3, r3, #31
 801b880:	f003 0301 	and.w	r3, r3, #1
 801b884:	b2db      	uxtb	r3, r3
 801b886:	2b00      	cmp	r3, #0
 801b888:	d009      	beq.n	801b89e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b88a:	697b      	ldr	r3, [r7, #20]
 801b88c:	681a      	ldr	r2, [r3, #0]
 801b88e:	693b      	ldr	r3, [r7, #16]
 801b890:	4413      	add	r3, r2
 801b892:	687a      	ldr	r2, [r7, #4]
 801b894:	4907      	ldr	r1, [pc, #28]	; (801b8b4 <lwip_cyclic_timer+0x60>)
 801b896:	4618      	mov	r0, r3
 801b898:	f7ff ff6e 	bl	801b778 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801b89c:	e004      	b.n	801b8a8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b89e:	687a      	ldr	r2, [r7, #4]
 801b8a0:	4904      	ldr	r1, [pc, #16]	; (801b8b4 <lwip_cyclic_timer+0x60>)
 801b8a2:	68f8      	ldr	r0, [r7, #12]
 801b8a4:	f7ff ff68 	bl	801b778 <sys_timeout_abs>
}
 801b8a8:	bf00      	nop
 801b8aa:	3718      	adds	r7, #24
 801b8ac:	46bd      	mov	sp, r7
 801b8ae:	bd80      	pop	{r7, pc}
 801b8b0:	20008ff8 	.word	0x20008ff8
 801b8b4:	0801b855 	.word	0x0801b855

0801b8b8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801b8b8:	b580      	push	{r7, lr}
 801b8ba:	b082      	sub	sp, #8
 801b8bc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b8be:	2301      	movs	r3, #1
 801b8c0:	607b      	str	r3, [r7, #4]
 801b8c2:	e00e      	b.n	801b8e2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b8c4:	4a0a      	ldr	r2, [pc, #40]	; (801b8f0 <sys_timeouts_init+0x38>)
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	00db      	lsls	r3, r3, #3
 801b8d0:	4a07      	ldr	r2, [pc, #28]	; (801b8f0 <sys_timeouts_init+0x38>)
 801b8d2:	4413      	add	r3, r2
 801b8d4:	461a      	mov	r2, r3
 801b8d6:	4907      	ldr	r1, [pc, #28]	; (801b8f4 <sys_timeouts_init+0x3c>)
 801b8d8:	f000 f80e 	bl	801b8f8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	3301      	adds	r3, #1
 801b8e0:	607b      	str	r3, [r7, #4]
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	2b04      	cmp	r3, #4
 801b8e6:	d9ed      	bls.n	801b8c4 <sys_timeouts_init+0xc>
  }
}
 801b8e8:	bf00      	nop
 801b8ea:	3708      	adds	r7, #8
 801b8ec:	46bd      	mov	sp, r7
 801b8ee:	bd80      	pop	{r7, pc}
 801b8f0:	08025520 	.word	0x08025520
 801b8f4:	0801b855 	.word	0x0801b855

0801b8f8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801b8f8:	b580      	push	{r7, lr}
 801b8fa:	b086      	sub	sp, #24
 801b8fc:	af00      	add	r7, sp, #0
 801b8fe:	60f8      	str	r0, [r7, #12]
 801b900:	60b9      	str	r1, [r7, #8]
 801b902:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b904:	68fb      	ldr	r3, [r7, #12]
 801b906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b90a:	d306      	bcc.n	801b91a <sys_timeout+0x22>
 801b90c:	4b0a      	ldr	r3, [pc, #40]	; (801b938 <sys_timeout+0x40>)
 801b90e:	f240 1229 	movw	r2, #297	; 0x129
 801b912:	490a      	ldr	r1, [pc, #40]	; (801b93c <sys_timeout+0x44>)
 801b914:	480a      	ldr	r0, [pc, #40]	; (801b940 <sys_timeout+0x48>)
 801b916:	f005 fe6d 	bl	80215f4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b91a:	f7f2 fb4b 	bl	800dfb4 <sys_now>
 801b91e:	4602      	mov	r2, r0
 801b920:	68fb      	ldr	r3, [r7, #12]
 801b922:	4413      	add	r3, r2
 801b924:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b926:	687a      	ldr	r2, [r7, #4]
 801b928:	68b9      	ldr	r1, [r7, #8]
 801b92a:	6978      	ldr	r0, [r7, #20]
 801b92c:	f7ff ff24 	bl	801b778 <sys_timeout_abs>
#endif
}
 801b930:	bf00      	nop
 801b932:	3718      	adds	r7, #24
 801b934:	46bd      	mov	sp, r7
 801b936:	bd80      	pop	{r7, pc}
 801b938:	08024510 	.word	0x08024510
 801b93c:	080245ac 	.word	0x080245ac
 801b940:	08024584 	.word	0x08024584

0801b944 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b944:	b580      	push	{r7, lr}
 801b946:	b084      	sub	sp, #16
 801b948:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b94a:	f7f2 fb33 	bl	800dfb4 <sys_now>
 801b94e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801b950:	4b17      	ldr	r3, [pc, #92]	; (801b9b0 <sys_check_timeouts+0x6c>)
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801b956:	68bb      	ldr	r3, [r7, #8]
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d022      	beq.n	801b9a2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b95c:	68bb      	ldr	r3, [r7, #8]
 801b95e:	685b      	ldr	r3, [r3, #4]
 801b960:	68fa      	ldr	r2, [r7, #12]
 801b962:	1ad3      	subs	r3, r2, r3
 801b964:	0fdb      	lsrs	r3, r3, #31
 801b966:	f003 0301 	and.w	r3, r3, #1
 801b96a:	b2db      	uxtb	r3, r3
 801b96c:	2b00      	cmp	r3, #0
 801b96e:	d11a      	bne.n	801b9a6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801b970:	68bb      	ldr	r3, [r7, #8]
 801b972:	681b      	ldr	r3, [r3, #0]
 801b974:	4a0e      	ldr	r2, [pc, #56]	; (801b9b0 <sys_check_timeouts+0x6c>)
 801b976:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801b978:	68bb      	ldr	r3, [r7, #8]
 801b97a:	689b      	ldr	r3, [r3, #8]
 801b97c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801b97e:	68bb      	ldr	r3, [r7, #8]
 801b980:	68db      	ldr	r3, [r3, #12]
 801b982:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801b984:	68bb      	ldr	r3, [r7, #8]
 801b986:	685b      	ldr	r3, [r3, #4]
 801b988:	4a0a      	ldr	r2, [pc, #40]	; (801b9b4 <sys_check_timeouts+0x70>)
 801b98a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b98c:	68b9      	ldr	r1, [r7, #8]
 801b98e:	200a      	movs	r0, #10
 801b990:	f7f9 fc06 	bl	80151a0 <memp_free>
    if (handler != NULL) {
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	2b00      	cmp	r3, #0
 801b998:	d0da      	beq.n	801b950 <sys_check_timeouts+0xc>
      handler(arg);
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	6838      	ldr	r0, [r7, #0]
 801b99e:	4798      	blx	r3
  do {
 801b9a0:	e7d6      	b.n	801b950 <sys_check_timeouts+0xc>
      return;
 801b9a2:	bf00      	nop
 801b9a4:	e000      	b.n	801b9a8 <sys_check_timeouts+0x64>
      return;
 801b9a6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b9a8:	3710      	adds	r7, #16
 801b9aa:	46bd      	mov	sp, r7
 801b9ac:	bd80      	pop	{r7, pc}
 801b9ae:	bf00      	nop
 801b9b0:	20008ff4 	.word	0x20008ff4
 801b9b4:	20008ff8 	.word	0x20008ff8

0801b9b8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801b9b8:	b580      	push	{r7, lr}
 801b9ba:	b082      	sub	sp, #8
 801b9bc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b9be:	4b16      	ldr	r3, [pc, #88]	; (801ba18 <sys_timeouts_sleeptime+0x60>)
 801b9c0:	681b      	ldr	r3, [r3, #0]
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d102      	bne.n	801b9cc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801b9c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b9ca:	e020      	b.n	801ba0e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801b9cc:	f7f2 faf2 	bl	800dfb4 <sys_now>
 801b9d0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801b9d2:	4b11      	ldr	r3, [pc, #68]	; (801ba18 <sys_timeouts_sleeptime+0x60>)
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	685a      	ldr	r2, [r3, #4]
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	1ad3      	subs	r3, r2, r3
 801b9dc:	0fdb      	lsrs	r3, r3, #31
 801b9de:	f003 0301 	and.w	r3, r3, #1
 801b9e2:	b2db      	uxtb	r3, r3
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	d001      	beq.n	801b9ec <sys_timeouts_sleeptime+0x34>
    return 0;
 801b9e8:	2300      	movs	r3, #0
 801b9ea:	e010      	b.n	801ba0e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801b9ec:	4b0a      	ldr	r3, [pc, #40]	; (801ba18 <sys_timeouts_sleeptime+0x60>)
 801b9ee:	681b      	ldr	r3, [r3, #0]
 801b9f0:	685a      	ldr	r2, [r3, #4]
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	1ad3      	subs	r3, r2, r3
 801b9f6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801b9f8:	683b      	ldr	r3, [r7, #0]
 801b9fa:	2b00      	cmp	r3, #0
 801b9fc:	da06      	bge.n	801ba0c <sys_timeouts_sleeptime+0x54>
 801b9fe:	4b07      	ldr	r3, [pc, #28]	; (801ba1c <sys_timeouts_sleeptime+0x64>)
 801ba00:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801ba04:	4906      	ldr	r1, [pc, #24]	; (801ba20 <sys_timeouts_sleeptime+0x68>)
 801ba06:	4807      	ldr	r0, [pc, #28]	; (801ba24 <sys_timeouts_sleeptime+0x6c>)
 801ba08:	f005 fdf4 	bl	80215f4 <iprintf>
    return ret;
 801ba0c:	683b      	ldr	r3, [r7, #0]
  }
}
 801ba0e:	4618      	mov	r0, r3
 801ba10:	3708      	adds	r7, #8
 801ba12:	46bd      	mov	sp, r7
 801ba14:	bd80      	pop	{r7, pc}
 801ba16:	bf00      	nop
 801ba18:	20008ff4 	.word	0x20008ff4
 801ba1c:	08024510 	.word	0x08024510
 801ba20:	080245e4 	.word	0x080245e4
 801ba24:	08024584 	.word	0x08024584

0801ba28 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ba28:	b580      	push	{r7, lr}
 801ba2a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ba2c:	f005 fe5e 	bl	80216ec <rand>
 801ba30:	4603      	mov	r3, r0
 801ba32:	b29b      	uxth	r3, r3
 801ba34:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ba38:	b29b      	uxth	r3, r3
 801ba3a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ba3e:	b29a      	uxth	r2, r3
 801ba40:	4b01      	ldr	r3, [pc, #4]	; (801ba48 <udp_init+0x20>)
 801ba42:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ba44:	bf00      	nop
 801ba46:	bd80      	pop	{r7, pc}
 801ba48:	2000003c 	.word	0x2000003c

0801ba4c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801ba4c:	b480      	push	{r7}
 801ba4e:	b083      	sub	sp, #12
 801ba50:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801ba52:	2300      	movs	r3, #0
 801ba54:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ba56:	4b17      	ldr	r3, [pc, #92]	; (801bab4 <udp_new_port+0x68>)
 801ba58:	881b      	ldrh	r3, [r3, #0]
 801ba5a:	1c5a      	adds	r2, r3, #1
 801ba5c:	b291      	uxth	r1, r2
 801ba5e:	4a15      	ldr	r2, [pc, #84]	; (801bab4 <udp_new_port+0x68>)
 801ba60:	8011      	strh	r1, [r2, #0]
 801ba62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ba66:	4293      	cmp	r3, r2
 801ba68:	d103      	bne.n	801ba72 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801ba6a:	4b12      	ldr	r3, [pc, #72]	; (801bab4 <udp_new_port+0x68>)
 801ba6c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801ba70:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ba72:	4b11      	ldr	r3, [pc, #68]	; (801bab8 <udp_new_port+0x6c>)
 801ba74:	681b      	ldr	r3, [r3, #0]
 801ba76:	603b      	str	r3, [r7, #0]
 801ba78:	e011      	b.n	801ba9e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801ba7a:	683b      	ldr	r3, [r7, #0]
 801ba7c:	8a5a      	ldrh	r2, [r3, #18]
 801ba7e:	4b0d      	ldr	r3, [pc, #52]	; (801bab4 <udp_new_port+0x68>)
 801ba80:	881b      	ldrh	r3, [r3, #0]
 801ba82:	429a      	cmp	r2, r3
 801ba84:	d108      	bne.n	801ba98 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801ba86:	88fb      	ldrh	r3, [r7, #6]
 801ba88:	3301      	adds	r3, #1
 801ba8a:	80fb      	strh	r3, [r7, #6]
 801ba8c:	88fb      	ldrh	r3, [r7, #6]
 801ba8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801ba92:	d3e0      	bcc.n	801ba56 <udp_new_port+0xa>
        return 0;
 801ba94:	2300      	movs	r3, #0
 801ba96:	e007      	b.n	801baa8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ba98:	683b      	ldr	r3, [r7, #0]
 801ba9a:	68db      	ldr	r3, [r3, #12]
 801ba9c:	603b      	str	r3, [r7, #0]
 801ba9e:	683b      	ldr	r3, [r7, #0]
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d1ea      	bne.n	801ba7a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801baa4:	4b03      	ldr	r3, [pc, #12]	; (801bab4 <udp_new_port+0x68>)
 801baa6:	881b      	ldrh	r3, [r3, #0]
}
 801baa8:	4618      	mov	r0, r3
 801baaa:	370c      	adds	r7, #12
 801baac:	46bd      	mov	sp, r7
 801baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bab2:	4770      	bx	lr
 801bab4:	2000003c 	.word	0x2000003c
 801bab8:	20010370 	.word	0x20010370

0801babc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801babc:	b580      	push	{r7, lr}
 801babe:	b084      	sub	sp, #16
 801bac0:	af00      	add	r7, sp, #0
 801bac2:	60f8      	str	r0, [r7, #12]
 801bac4:	60b9      	str	r1, [r7, #8]
 801bac6:	4613      	mov	r3, r2
 801bac8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801baca:	68fb      	ldr	r3, [r7, #12]
 801bacc:	2b00      	cmp	r3, #0
 801bace:	d105      	bne.n	801badc <udp_input_local_match+0x20>
 801bad0:	4b27      	ldr	r3, [pc, #156]	; (801bb70 <udp_input_local_match+0xb4>)
 801bad2:	2287      	movs	r2, #135	; 0x87
 801bad4:	4927      	ldr	r1, [pc, #156]	; (801bb74 <udp_input_local_match+0xb8>)
 801bad6:	4828      	ldr	r0, [pc, #160]	; (801bb78 <udp_input_local_match+0xbc>)
 801bad8:	f005 fd8c 	bl	80215f4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801badc:	68bb      	ldr	r3, [r7, #8]
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d105      	bne.n	801baee <udp_input_local_match+0x32>
 801bae2:	4b23      	ldr	r3, [pc, #140]	; (801bb70 <udp_input_local_match+0xb4>)
 801bae4:	2288      	movs	r2, #136	; 0x88
 801bae6:	4925      	ldr	r1, [pc, #148]	; (801bb7c <udp_input_local_match+0xc0>)
 801bae8:	4823      	ldr	r0, [pc, #140]	; (801bb78 <udp_input_local_match+0xbc>)
 801baea:	f005 fd83 	bl	80215f4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801baee:	68fb      	ldr	r3, [r7, #12]
 801baf0:	7a1b      	ldrb	r3, [r3, #8]
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	d00b      	beq.n	801bb0e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	7a1a      	ldrb	r2, [r3, #8]
 801bafa:	4b21      	ldr	r3, [pc, #132]	; (801bb80 <udp_input_local_match+0xc4>)
 801bafc:	685b      	ldr	r3, [r3, #4]
 801bafe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bb02:	3301      	adds	r3, #1
 801bb04:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bb06:	429a      	cmp	r2, r3
 801bb08:	d001      	beq.n	801bb0e <udp_input_local_match+0x52>
    return 0;
 801bb0a:	2300      	movs	r3, #0
 801bb0c:	e02b      	b.n	801bb66 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801bb0e:	79fb      	ldrb	r3, [r7, #7]
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	d018      	beq.n	801bb46 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bb14:	68fb      	ldr	r3, [r7, #12]
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d013      	beq.n	801bb42 <udp_input_local_match+0x86>
 801bb1a:	68fb      	ldr	r3, [r7, #12]
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d00f      	beq.n	801bb42 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801bb22:	4b17      	ldr	r3, [pc, #92]	; (801bb80 <udp_input_local_match+0xc4>)
 801bb24:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bb26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801bb2a:	d00a      	beq.n	801bb42 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	681a      	ldr	r2, [r3, #0]
 801bb30:	4b13      	ldr	r3, [pc, #76]	; (801bb80 <udp_input_local_match+0xc4>)
 801bb32:	695b      	ldr	r3, [r3, #20]
 801bb34:	405a      	eors	r2, r3
 801bb36:	68bb      	ldr	r3, [r7, #8]
 801bb38:	3308      	adds	r3, #8
 801bb3a:	681b      	ldr	r3, [r3, #0]
 801bb3c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	d110      	bne.n	801bb64 <udp_input_local_match+0xa8>
          return 1;
 801bb42:	2301      	movs	r3, #1
 801bb44:	e00f      	b.n	801bb66 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801bb46:	68fb      	ldr	r3, [r7, #12]
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	d009      	beq.n	801bb60 <udp_input_local_match+0xa4>
 801bb4c:	68fb      	ldr	r3, [r7, #12]
 801bb4e:	681b      	ldr	r3, [r3, #0]
 801bb50:	2b00      	cmp	r3, #0
 801bb52:	d005      	beq.n	801bb60 <udp_input_local_match+0xa4>
 801bb54:	68fb      	ldr	r3, [r7, #12]
 801bb56:	681a      	ldr	r2, [r3, #0]
 801bb58:	4b09      	ldr	r3, [pc, #36]	; (801bb80 <udp_input_local_match+0xc4>)
 801bb5a:	695b      	ldr	r3, [r3, #20]
 801bb5c:	429a      	cmp	r2, r3
 801bb5e:	d101      	bne.n	801bb64 <udp_input_local_match+0xa8>
        return 1;
 801bb60:	2301      	movs	r3, #1
 801bb62:	e000      	b.n	801bb66 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801bb64:	2300      	movs	r3, #0
}
 801bb66:	4618      	mov	r0, r3
 801bb68:	3710      	adds	r7, #16
 801bb6a:	46bd      	mov	sp, r7
 801bb6c:	bd80      	pop	{r7, pc}
 801bb6e:	bf00      	nop
 801bb70:	080245f8 	.word	0x080245f8
 801bb74:	08024628 	.word	0x08024628
 801bb78:	0802464c 	.word	0x0802464c
 801bb7c:	08024674 	.word	0x08024674
 801bb80:	2000cc24 	.word	0x2000cc24

0801bb84 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801bb84:	b590      	push	{r4, r7, lr}
 801bb86:	b08d      	sub	sp, #52	; 0x34
 801bb88:	af02      	add	r7, sp, #8
 801bb8a:	6078      	str	r0, [r7, #4]
 801bb8c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801bb8e:	2300      	movs	r3, #0
 801bb90:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	2b00      	cmp	r3, #0
 801bb96:	d105      	bne.n	801bba4 <udp_input+0x20>
 801bb98:	4b7c      	ldr	r3, [pc, #496]	; (801bd8c <udp_input+0x208>)
 801bb9a:	22cf      	movs	r2, #207	; 0xcf
 801bb9c:	497c      	ldr	r1, [pc, #496]	; (801bd90 <udp_input+0x20c>)
 801bb9e:	487d      	ldr	r0, [pc, #500]	; (801bd94 <udp_input+0x210>)
 801bba0:	f005 fd28 	bl	80215f4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801bba4:	683b      	ldr	r3, [r7, #0]
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d105      	bne.n	801bbb6 <udp_input+0x32>
 801bbaa:	4b78      	ldr	r3, [pc, #480]	; (801bd8c <udp_input+0x208>)
 801bbac:	22d0      	movs	r2, #208	; 0xd0
 801bbae:	497a      	ldr	r1, [pc, #488]	; (801bd98 <udp_input+0x214>)
 801bbb0:	4878      	ldr	r0, [pc, #480]	; (801bd94 <udp_input+0x210>)
 801bbb2:	f005 fd1f 	bl	80215f4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	895b      	ldrh	r3, [r3, #10]
 801bbba:	2b07      	cmp	r3, #7
 801bbbc:	d803      	bhi.n	801bbc6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801bbbe:	6878      	ldr	r0, [r7, #4]
 801bbc0:	f7fa f9b4 	bl	8015f2c <pbuf_free>
    goto end;
 801bbc4:	e0de      	b.n	801bd84 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	685b      	ldr	r3, [r3, #4]
 801bbca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801bbcc:	4b73      	ldr	r3, [pc, #460]	; (801bd9c <udp_input+0x218>)
 801bbce:	695a      	ldr	r2, [r3, #20]
 801bbd0:	4b72      	ldr	r3, [pc, #456]	; (801bd9c <udp_input+0x218>)
 801bbd2:	681b      	ldr	r3, [r3, #0]
 801bbd4:	4619      	mov	r1, r3
 801bbd6:	4610      	mov	r0, r2
 801bbd8:	f003 fe16 	bl	801f808 <ip4_addr_isbroadcast_u32>
 801bbdc:	4603      	mov	r3, r0
 801bbde:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801bbe0:	697b      	ldr	r3, [r7, #20]
 801bbe2:	881b      	ldrh	r3, [r3, #0]
 801bbe4:	b29b      	uxth	r3, r3
 801bbe6:	4618      	mov	r0, r3
 801bbe8:	f7f8 fdd2 	bl	8014790 <lwip_htons>
 801bbec:	4603      	mov	r3, r0
 801bbee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801bbf0:	697b      	ldr	r3, [r7, #20]
 801bbf2:	885b      	ldrh	r3, [r3, #2]
 801bbf4:	b29b      	uxth	r3, r3
 801bbf6:	4618      	mov	r0, r3
 801bbf8:	f7f8 fdca 	bl	8014790 <lwip_htons>
 801bbfc:	4603      	mov	r3, r0
 801bbfe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801bc00:	2300      	movs	r3, #0
 801bc02:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801bc04:	2300      	movs	r3, #0
 801bc06:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801bc08:	2300      	movs	r3, #0
 801bc0a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bc0c:	4b64      	ldr	r3, [pc, #400]	; (801bda0 <udp_input+0x21c>)
 801bc0e:	681b      	ldr	r3, [r3, #0]
 801bc10:	627b      	str	r3, [r7, #36]	; 0x24
 801bc12:	e054      	b.n	801bcbe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801bc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc16:	8a5b      	ldrh	r3, [r3, #18]
 801bc18:	89fa      	ldrh	r2, [r7, #14]
 801bc1a:	429a      	cmp	r2, r3
 801bc1c:	d14a      	bne.n	801bcb4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801bc1e:	7cfb      	ldrb	r3, [r7, #19]
 801bc20:	461a      	mov	r2, r3
 801bc22:	6839      	ldr	r1, [r7, #0]
 801bc24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bc26:	f7ff ff49 	bl	801babc <udp_input_local_match>
 801bc2a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	d041      	beq.n	801bcb4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801bc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc32:	7c1b      	ldrb	r3, [r3, #16]
 801bc34:	f003 0304 	and.w	r3, r3, #4
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d11d      	bne.n	801bc78 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801bc3c:	69fb      	ldr	r3, [r7, #28]
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d102      	bne.n	801bc48 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801bc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc44:	61fb      	str	r3, [r7, #28]
 801bc46:	e017      	b.n	801bc78 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801bc48:	7cfb      	ldrb	r3, [r7, #19]
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	d014      	beq.n	801bc78 <udp_input+0xf4>
 801bc4e:	4b53      	ldr	r3, [pc, #332]	; (801bd9c <udp_input+0x218>)
 801bc50:	695b      	ldr	r3, [r3, #20]
 801bc52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801bc56:	d10f      	bne.n	801bc78 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801bc58:	69fb      	ldr	r3, [r7, #28]
 801bc5a:	681a      	ldr	r2, [r3, #0]
 801bc5c:	683b      	ldr	r3, [r7, #0]
 801bc5e:	3304      	adds	r3, #4
 801bc60:	681b      	ldr	r3, [r3, #0]
 801bc62:	429a      	cmp	r2, r3
 801bc64:	d008      	beq.n	801bc78 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc68:	681a      	ldr	r2, [r3, #0]
 801bc6a:	683b      	ldr	r3, [r7, #0]
 801bc6c:	3304      	adds	r3, #4
 801bc6e:	681b      	ldr	r3, [r3, #0]
 801bc70:	429a      	cmp	r2, r3
 801bc72:	d101      	bne.n	801bc78 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc76:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801bc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc7a:	8a9b      	ldrh	r3, [r3, #20]
 801bc7c:	8a3a      	ldrh	r2, [r7, #16]
 801bc7e:	429a      	cmp	r2, r3
 801bc80:	d118      	bne.n	801bcb4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801bc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc84:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d005      	beq.n	801bc96 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801bc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc8c:	685a      	ldr	r2, [r3, #4]
 801bc8e:	4b43      	ldr	r3, [pc, #268]	; (801bd9c <udp_input+0x218>)
 801bc90:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801bc92:	429a      	cmp	r2, r3
 801bc94:	d10e      	bne.n	801bcb4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801bc96:	6a3b      	ldr	r3, [r7, #32]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d014      	beq.n	801bcc6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801bc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc9e:	68da      	ldr	r2, [r3, #12]
 801bca0:	6a3b      	ldr	r3, [r7, #32]
 801bca2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801bca4:	4b3e      	ldr	r3, [pc, #248]	; (801bda0 <udp_input+0x21c>)
 801bca6:	681a      	ldr	r2, [r3, #0]
 801bca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcaa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801bcac:	4a3c      	ldr	r2, [pc, #240]	; (801bda0 <udp_input+0x21c>)
 801bcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcb0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801bcb2:	e008      	b.n	801bcc6 <udp_input+0x142>
      }
    }

    prev = pcb;
 801bcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcb6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcba:	68db      	ldr	r3, [r3, #12]
 801bcbc:	627b      	str	r3, [r7, #36]	; 0x24
 801bcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d1a7      	bne.n	801bc14 <udp_input+0x90>
 801bcc4:	e000      	b.n	801bcc8 <udp_input+0x144>
        break;
 801bcc6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801bcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	d101      	bne.n	801bcd2 <udp_input+0x14e>
    pcb = uncon_pcb;
 801bcce:	69fb      	ldr	r3, [r7, #28]
 801bcd0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	d002      	beq.n	801bcde <udp_input+0x15a>
    for_us = 1;
 801bcd8:	2301      	movs	r3, #1
 801bcda:	76fb      	strb	r3, [r7, #27]
 801bcdc:	e00a      	b.n	801bcf4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801bcde:	683b      	ldr	r3, [r7, #0]
 801bce0:	3304      	adds	r3, #4
 801bce2:	681a      	ldr	r2, [r3, #0]
 801bce4:	4b2d      	ldr	r3, [pc, #180]	; (801bd9c <udp_input+0x218>)
 801bce6:	695b      	ldr	r3, [r3, #20]
 801bce8:	429a      	cmp	r2, r3
 801bcea:	bf0c      	ite	eq
 801bcec:	2301      	moveq	r3, #1
 801bcee:	2300      	movne	r3, #0
 801bcf0:	b2db      	uxtb	r3, r3
 801bcf2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801bcf4:	7efb      	ldrb	r3, [r7, #27]
 801bcf6:	2b00      	cmp	r3, #0
 801bcf8:	d041      	beq.n	801bd7e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801bcfa:	2108      	movs	r1, #8
 801bcfc:	6878      	ldr	r0, [r7, #4]
 801bcfe:	f7fa f88f 	bl	8015e20 <pbuf_remove_header>
 801bd02:	4603      	mov	r3, r0
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	d00a      	beq.n	801bd1e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801bd08:	4b20      	ldr	r3, [pc, #128]	; (801bd8c <udp_input+0x208>)
 801bd0a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801bd0e:	4925      	ldr	r1, [pc, #148]	; (801bda4 <udp_input+0x220>)
 801bd10:	4820      	ldr	r0, [pc, #128]	; (801bd94 <udp_input+0x210>)
 801bd12:	f005 fc6f 	bl	80215f4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801bd16:	6878      	ldr	r0, [r7, #4]
 801bd18:	f7fa f908 	bl	8015f2c <pbuf_free>
      goto end;
 801bd1c:	e032      	b.n	801bd84 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801bd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d012      	beq.n	801bd4a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801bd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd26:	699b      	ldr	r3, [r3, #24]
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d00a      	beq.n	801bd42 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801bd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd2e:	699c      	ldr	r4, [r3, #24]
 801bd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd32:	69d8      	ldr	r0, [r3, #28]
 801bd34:	8a3b      	ldrh	r3, [r7, #16]
 801bd36:	9300      	str	r3, [sp, #0]
 801bd38:	4b1b      	ldr	r3, [pc, #108]	; (801bda8 <udp_input+0x224>)
 801bd3a:	687a      	ldr	r2, [r7, #4]
 801bd3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801bd3e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801bd40:	e021      	b.n	801bd86 <udp_input+0x202>
        pbuf_free(p);
 801bd42:	6878      	ldr	r0, [r7, #4]
 801bd44:	f7fa f8f2 	bl	8015f2c <pbuf_free>
        goto end;
 801bd48:	e01c      	b.n	801bd84 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801bd4a:	7cfb      	ldrb	r3, [r7, #19]
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	d112      	bne.n	801bd76 <udp_input+0x1f2>
 801bd50:	4b12      	ldr	r3, [pc, #72]	; (801bd9c <udp_input+0x218>)
 801bd52:	695b      	ldr	r3, [r3, #20]
 801bd54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801bd58:	2be0      	cmp	r3, #224	; 0xe0
 801bd5a:	d00c      	beq.n	801bd76 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801bd5c:	4b0f      	ldr	r3, [pc, #60]	; (801bd9c <udp_input+0x218>)
 801bd5e:	899b      	ldrh	r3, [r3, #12]
 801bd60:	3308      	adds	r3, #8
 801bd62:	b29b      	uxth	r3, r3
 801bd64:	b21b      	sxth	r3, r3
 801bd66:	4619      	mov	r1, r3
 801bd68:	6878      	ldr	r0, [r7, #4]
 801bd6a:	f7fa f8cc 	bl	8015f06 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801bd6e:	2103      	movs	r1, #3
 801bd70:	6878      	ldr	r0, [r7, #4]
 801bd72:	f003 fa0d 	bl	801f190 <icmp_dest_unreach>
      pbuf_free(p);
 801bd76:	6878      	ldr	r0, [r7, #4]
 801bd78:	f7fa f8d8 	bl	8015f2c <pbuf_free>
  return;
 801bd7c:	e003      	b.n	801bd86 <udp_input+0x202>
    pbuf_free(p);
 801bd7e:	6878      	ldr	r0, [r7, #4]
 801bd80:	f7fa f8d4 	bl	8015f2c <pbuf_free>
  return;
 801bd84:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801bd86:	372c      	adds	r7, #44	; 0x2c
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	bd90      	pop	{r4, r7, pc}
 801bd8c:	080245f8 	.word	0x080245f8
 801bd90:	0802469c 	.word	0x0802469c
 801bd94:	0802464c 	.word	0x0802464c
 801bd98:	080246b4 	.word	0x080246b4
 801bd9c:	2000cc24 	.word	0x2000cc24
 801bda0:	20010370 	.word	0x20010370
 801bda4:	080246d0 	.word	0x080246d0
 801bda8:	2000cc34 	.word	0x2000cc34

0801bdac <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801bdac:	b580      	push	{r7, lr}
 801bdae:	b088      	sub	sp, #32
 801bdb0:	af02      	add	r7, sp, #8
 801bdb2:	60f8      	str	r0, [r7, #12]
 801bdb4:	60b9      	str	r1, [r7, #8]
 801bdb6:	607a      	str	r2, [r7, #4]
 801bdb8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801bdba:	68fb      	ldr	r3, [r7, #12]
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d109      	bne.n	801bdd4 <udp_sendto_if+0x28>
 801bdc0:	4b2e      	ldr	r3, [pc, #184]	; (801be7c <udp_sendto_if+0xd0>)
 801bdc2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bdc6:	492e      	ldr	r1, [pc, #184]	; (801be80 <udp_sendto_if+0xd4>)
 801bdc8:	482e      	ldr	r0, [pc, #184]	; (801be84 <udp_sendto_if+0xd8>)
 801bdca:	f005 fc13 	bl	80215f4 <iprintf>
 801bdce:	f06f 030f 	mvn.w	r3, #15
 801bdd2:	e04f      	b.n	801be74 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801bdd4:	68bb      	ldr	r3, [r7, #8]
 801bdd6:	2b00      	cmp	r3, #0
 801bdd8:	d109      	bne.n	801bdee <udp_sendto_if+0x42>
 801bdda:	4b28      	ldr	r3, [pc, #160]	; (801be7c <udp_sendto_if+0xd0>)
 801bddc:	f240 2281 	movw	r2, #641	; 0x281
 801bde0:	4929      	ldr	r1, [pc, #164]	; (801be88 <udp_sendto_if+0xdc>)
 801bde2:	4828      	ldr	r0, [pc, #160]	; (801be84 <udp_sendto_if+0xd8>)
 801bde4:	f005 fc06 	bl	80215f4 <iprintf>
 801bde8:	f06f 030f 	mvn.w	r3, #15
 801bdec:	e042      	b.n	801be74 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d109      	bne.n	801be08 <udp_sendto_if+0x5c>
 801bdf4:	4b21      	ldr	r3, [pc, #132]	; (801be7c <udp_sendto_if+0xd0>)
 801bdf6:	f240 2282 	movw	r2, #642	; 0x282
 801bdfa:	4924      	ldr	r1, [pc, #144]	; (801be8c <udp_sendto_if+0xe0>)
 801bdfc:	4821      	ldr	r0, [pc, #132]	; (801be84 <udp_sendto_if+0xd8>)
 801bdfe:	f005 fbf9 	bl	80215f4 <iprintf>
 801be02:	f06f 030f 	mvn.w	r3, #15
 801be06:	e035      	b.n	801be74 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801be08:	6a3b      	ldr	r3, [r7, #32]
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d109      	bne.n	801be22 <udp_sendto_if+0x76>
 801be0e:	4b1b      	ldr	r3, [pc, #108]	; (801be7c <udp_sendto_if+0xd0>)
 801be10:	f240 2283 	movw	r2, #643	; 0x283
 801be14:	491e      	ldr	r1, [pc, #120]	; (801be90 <udp_sendto_if+0xe4>)
 801be16:	481b      	ldr	r0, [pc, #108]	; (801be84 <udp_sendto_if+0xd8>)
 801be18:	f005 fbec 	bl	80215f4 <iprintf>
 801be1c:	f06f 030f 	mvn.w	r3, #15
 801be20:	e028      	b.n	801be74 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801be22:	68fb      	ldr	r3, [r7, #12]
 801be24:	2b00      	cmp	r3, #0
 801be26:	d009      	beq.n	801be3c <udp_sendto_if+0x90>
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	681b      	ldr	r3, [r3, #0]
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d005      	beq.n	801be3c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801be30:	68fb      	ldr	r3, [r7, #12]
 801be32:	681b      	ldr	r3, [r3, #0]
 801be34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801be38:	2be0      	cmp	r3, #224	; 0xe0
 801be3a:	d103      	bne.n	801be44 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801be3c:	6a3b      	ldr	r3, [r7, #32]
 801be3e:	3304      	adds	r3, #4
 801be40:	617b      	str	r3, [r7, #20]
 801be42:	e00b      	b.n	801be5c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801be44:	68fb      	ldr	r3, [r7, #12]
 801be46:	681a      	ldr	r2, [r3, #0]
 801be48:	6a3b      	ldr	r3, [r7, #32]
 801be4a:	3304      	adds	r3, #4
 801be4c:	681b      	ldr	r3, [r3, #0]
 801be4e:	429a      	cmp	r2, r3
 801be50:	d002      	beq.n	801be58 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801be52:	f06f 0303 	mvn.w	r3, #3
 801be56:	e00d      	b.n	801be74 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801be5c:	887a      	ldrh	r2, [r7, #2]
 801be5e:	697b      	ldr	r3, [r7, #20]
 801be60:	9301      	str	r3, [sp, #4]
 801be62:	6a3b      	ldr	r3, [r7, #32]
 801be64:	9300      	str	r3, [sp, #0]
 801be66:	4613      	mov	r3, r2
 801be68:	687a      	ldr	r2, [r7, #4]
 801be6a:	68b9      	ldr	r1, [r7, #8]
 801be6c:	68f8      	ldr	r0, [r7, #12]
 801be6e:	f000 f811 	bl	801be94 <udp_sendto_if_src>
 801be72:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801be74:	4618      	mov	r0, r3
 801be76:	3718      	adds	r7, #24
 801be78:	46bd      	mov	sp, r7
 801be7a:	bd80      	pop	{r7, pc}
 801be7c:	080245f8 	.word	0x080245f8
 801be80:	0802476c 	.word	0x0802476c
 801be84:	0802464c 	.word	0x0802464c
 801be88:	08024788 	.word	0x08024788
 801be8c:	080247a4 	.word	0x080247a4
 801be90:	080247c4 	.word	0x080247c4

0801be94 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801be94:	b580      	push	{r7, lr}
 801be96:	b08c      	sub	sp, #48	; 0x30
 801be98:	af04      	add	r7, sp, #16
 801be9a:	60f8      	str	r0, [r7, #12]
 801be9c:	60b9      	str	r1, [r7, #8]
 801be9e:	607a      	str	r2, [r7, #4]
 801bea0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801bea2:	68fb      	ldr	r3, [r7, #12]
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d109      	bne.n	801bebc <udp_sendto_if_src+0x28>
 801bea8:	4b65      	ldr	r3, [pc, #404]	; (801c040 <udp_sendto_if_src+0x1ac>)
 801beaa:	f240 22d1 	movw	r2, #721	; 0x2d1
 801beae:	4965      	ldr	r1, [pc, #404]	; (801c044 <udp_sendto_if_src+0x1b0>)
 801beb0:	4865      	ldr	r0, [pc, #404]	; (801c048 <udp_sendto_if_src+0x1b4>)
 801beb2:	f005 fb9f 	bl	80215f4 <iprintf>
 801beb6:	f06f 030f 	mvn.w	r3, #15
 801beba:	e0bc      	b.n	801c036 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801bebc:	68bb      	ldr	r3, [r7, #8]
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	d109      	bne.n	801bed6 <udp_sendto_if_src+0x42>
 801bec2:	4b5f      	ldr	r3, [pc, #380]	; (801c040 <udp_sendto_if_src+0x1ac>)
 801bec4:	f240 22d2 	movw	r2, #722	; 0x2d2
 801bec8:	4960      	ldr	r1, [pc, #384]	; (801c04c <udp_sendto_if_src+0x1b8>)
 801beca:	485f      	ldr	r0, [pc, #380]	; (801c048 <udp_sendto_if_src+0x1b4>)
 801becc:	f005 fb92 	bl	80215f4 <iprintf>
 801bed0:	f06f 030f 	mvn.w	r3, #15
 801bed4:	e0af      	b.n	801c036 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	2b00      	cmp	r3, #0
 801beda:	d109      	bne.n	801bef0 <udp_sendto_if_src+0x5c>
 801bedc:	4b58      	ldr	r3, [pc, #352]	; (801c040 <udp_sendto_if_src+0x1ac>)
 801bede:	f240 22d3 	movw	r2, #723	; 0x2d3
 801bee2:	495b      	ldr	r1, [pc, #364]	; (801c050 <udp_sendto_if_src+0x1bc>)
 801bee4:	4858      	ldr	r0, [pc, #352]	; (801c048 <udp_sendto_if_src+0x1b4>)
 801bee6:	f005 fb85 	bl	80215f4 <iprintf>
 801beea:	f06f 030f 	mvn.w	r3, #15
 801beee:	e0a2      	b.n	801c036 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801bef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d109      	bne.n	801bf0a <udp_sendto_if_src+0x76>
 801bef6:	4b52      	ldr	r3, [pc, #328]	; (801c040 <udp_sendto_if_src+0x1ac>)
 801bef8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801befc:	4955      	ldr	r1, [pc, #340]	; (801c054 <udp_sendto_if_src+0x1c0>)
 801befe:	4852      	ldr	r0, [pc, #328]	; (801c048 <udp_sendto_if_src+0x1b4>)
 801bf00:	f005 fb78 	bl	80215f4 <iprintf>
 801bf04:	f06f 030f 	mvn.w	r3, #15
 801bf08:	e095      	b.n	801c036 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801bf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	d109      	bne.n	801bf24 <udp_sendto_if_src+0x90>
 801bf10:	4b4b      	ldr	r3, [pc, #300]	; (801c040 <udp_sendto_if_src+0x1ac>)
 801bf12:	f240 22d5 	movw	r2, #725	; 0x2d5
 801bf16:	4950      	ldr	r1, [pc, #320]	; (801c058 <udp_sendto_if_src+0x1c4>)
 801bf18:	484b      	ldr	r0, [pc, #300]	; (801c048 <udp_sendto_if_src+0x1b4>)
 801bf1a:	f005 fb6b 	bl	80215f4 <iprintf>
 801bf1e:	f06f 030f 	mvn.w	r3, #15
 801bf22:	e088      	b.n	801c036 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801bf24:	68fb      	ldr	r3, [r7, #12]
 801bf26:	8a5b      	ldrh	r3, [r3, #18]
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	d10f      	bne.n	801bf4c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801bf2c:	68f9      	ldr	r1, [r7, #12]
 801bf2e:	68fb      	ldr	r3, [r7, #12]
 801bf30:	8a5b      	ldrh	r3, [r3, #18]
 801bf32:	461a      	mov	r2, r3
 801bf34:	68f8      	ldr	r0, [r7, #12]
 801bf36:	f000 f893 	bl	801c060 <udp_bind>
 801bf3a:	4603      	mov	r3, r0
 801bf3c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801bf3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d002      	beq.n	801bf4c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801bf46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bf4a:	e074      	b.n	801c036 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801bf4c:	68bb      	ldr	r3, [r7, #8]
 801bf4e:	891b      	ldrh	r3, [r3, #8]
 801bf50:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801bf54:	4293      	cmp	r3, r2
 801bf56:	d902      	bls.n	801bf5e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801bf58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bf5c:	e06b      	b.n	801c036 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801bf5e:	2108      	movs	r1, #8
 801bf60:	68b8      	ldr	r0, [r7, #8]
 801bf62:	f7f9 ff4d 	bl	8015e00 <pbuf_add_header>
 801bf66:	4603      	mov	r3, r0
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	d015      	beq.n	801bf98 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801bf6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bf70:	2108      	movs	r1, #8
 801bf72:	2022      	movs	r0, #34	; 0x22
 801bf74:	f7f9 fcfa 	bl	801596c <pbuf_alloc>
 801bf78:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801bf7a:	69fb      	ldr	r3, [r7, #28]
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d102      	bne.n	801bf86 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801bf80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bf84:	e057      	b.n	801c036 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801bf86:	68bb      	ldr	r3, [r7, #8]
 801bf88:	891b      	ldrh	r3, [r3, #8]
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	d006      	beq.n	801bf9c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801bf8e:	68b9      	ldr	r1, [r7, #8]
 801bf90:	69f8      	ldr	r0, [r7, #28]
 801bf92:	f7fa f8ef 	bl	8016174 <pbuf_chain>
 801bf96:	e001      	b.n	801bf9c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801bf98:	68bb      	ldr	r3, [r7, #8]
 801bf9a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801bf9c:	69fb      	ldr	r3, [r7, #28]
 801bf9e:	895b      	ldrh	r3, [r3, #10]
 801bfa0:	2b07      	cmp	r3, #7
 801bfa2:	d806      	bhi.n	801bfb2 <udp_sendto_if_src+0x11e>
 801bfa4:	4b26      	ldr	r3, [pc, #152]	; (801c040 <udp_sendto_if_src+0x1ac>)
 801bfa6:	f240 320e 	movw	r2, #782	; 0x30e
 801bfaa:	492c      	ldr	r1, [pc, #176]	; (801c05c <udp_sendto_if_src+0x1c8>)
 801bfac:	4826      	ldr	r0, [pc, #152]	; (801c048 <udp_sendto_if_src+0x1b4>)
 801bfae:	f005 fb21 	bl	80215f4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801bfb2:	69fb      	ldr	r3, [r7, #28]
 801bfb4:	685b      	ldr	r3, [r3, #4]
 801bfb6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801bfb8:	68fb      	ldr	r3, [r7, #12]
 801bfba:	8a5b      	ldrh	r3, [r3, #18]
 801bfbc:	4618      	mov	r0, r3
 801bfbe:	f7f8 fbe7 	bl	8014790 <lwip_htons>
 801bfc2:	4603      	mov	r3, r0
 801bfc4:	461a      	mov	r2, r3
 801bfc6:	697b      	ldr	r3, [r7, #20]
 801bfc8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801bfca:	887b      	ldrh	r3, [r7, #2]
 801bfcc:	4618      	mov	r0, r3
 801bfce:	f7f8 fbdf 	bl	8014790 <lwip_htons>
 801bfd2:	4603      	mov	r3, r0
 801bfd4:	461a      	mov	r2, r3
 801bfd6:	697b      	ldr	r3, [r7, #20]
 801bfd8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801bfda:	697b      	ldr	r3, [r7, #20]
 801bfdc:	2200      	movs	r2, #0
 801bfde:	719a      	strb	r2, [r3, #6]
 801bfe0:	2200      	movs	r2, #0
 801bfe2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801bfe4:	69fb      	ldr	r3, [r7, #28]
 801bfe6:	891b      	ldrh	r3, [r3, #8]
 801bfe8:	4618      	mov	r0, r3
 801bfea:	f7f8 fbd1 	bl	8014790 <lwip_htons>
 801bfee:	4603      	mov	r3, r0
 801bff0:	461a      	mov	r2, r3
 801bff2:	697b      	ldr	r3, [r7, #20]
 801bff4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801bff6:	2311      	movs	r3, #17
 801bff8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801bffa:	68fb      	ldr	r3, [r7, #12]
 801bffc:	7adb      	ldrb	r3, [r3, #11]
 801bffe:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c000:	68fb      	ldr	r3, [r7, #12]
 801c002:	7a9b      	ldrb	r3, [r3, #10]
 801c004:	7cb9      	ldrb	r1, [r7, #18]
 801c006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c008:	9202      	str	r2, [sp, #8]
 801c00a:	7cfa      	ldrb	r2, [r7, #19]
 801c00c:	9201      	str	r2, [sp, #4]
 801c00e:	9300      	str	r3, [sp, #0]
 801c010:	460b      	mov	r3, r1
 801c012:	687a      	ldr	r2, [r7, #4]
 801c014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c016:	69f8      	ldr	r0, [r7, #28]
 801c018:	f003 fb48 	bl	801f6ac <ip4_output_if_src>
 801c01c:	4603      	mov	r3, r0
 801c01e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801c020:	69fa      	ldr	r2, [r7, #28]
 801c022:	68bb      	ldr	r3, [r7, #8]
 801c024:	429a      	cmp	r2, r3
 801c026:	d004      	beq.n	801c032 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801c028:	69f8      	ldr	r0, [r7, #28]
 801c02a:	f7f9 ff7f 	bl	8015f2c <pbuf_free>
    q = NULL;
 801c02e:	2300      	movs	r3, #0
 801c030:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801c032:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801c036:	4618      	mov	r0, r3
 801c038:	3720      	adds	r7, #32
 801c03a:	46bd      	mov	sp, r7
 801c03c:	bd80      	pop	{r7, pc}
 801c03e:	bf00      	nop
 801c040:	080245f8 	.word	0x080245f8
 801c044:	080247e4 	.word	0x080247e4
 801c048:	0802464c 	.word	0x0802464c
 801c04c:	08024804 	.word	0x08024804
 801c050:	08024824 	.word	0x08024824
 801c054:	08024848 	.word	0x08024848
 801c058:	0802486c 	.word	0x0802486c
 801c05c:	08024890 	.word	0x08024890

0801c060 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c060:	b580      	push	{r7, lr}
 801c062:	b086      	sub	sp, #24
 801c064:	af00      	add	r7, sp, #0
 801c066:	60f8      	str	r0, [r7, #12]
 801c068:	60b9      	str	r1, [r7, #8]
 801c06a:	4613      	mov	r3, r2
 801c06c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c06e:	68bb      	ldr	r3, [r7, #8]
 801c070:	2b00      	cmp	r3, #0
 801c072:	d101      	bne.n	801c078 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801c074:	4b39      	ldr	r3, [pc, #228]	; (801c15c <udp_bind+0xfc>)
 801c076:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c078:	68fb      	ldr	r3, [r7, #12]
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d109      	bne.n	801c092 <udp_bind+0x32>
 801c07e:	4b38      	ldr	r3, [pc, #224]	; (801c160 <udp_bind+0x100>)
 801c080:	f240 32b7 	movw	r2, #951	; 0x3b7
 801c084:	4937      	ldr	r1, [pc, #220]	; (801c164 <udp_bind+0x104>)
 801c086:	4838      	ldr	r0, [pc, #224]	; (801c168 <udp_bind+0x108>)
 801c088:	f005 fab4 	bl	80215f4 <iprintf>
 801c08c:	f06f 030f 	mvn.w	r3, #15
 801c090:	e060      	b.n	801c154 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801c092:	2300      	movs	r3, #0
 801c094:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c096:	4b35      	ldr	r3, [pc, #212]	; (801c16c <udp_bind+0x10c>)
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	617b      	str	r3, [r7, #20]
 801c09c:	e009      	b.n	801c0b2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c09e:	68fa      	ldr	r2, [r7, #12]
 801c0a0:	697b      	ldr	r3, [r7, #20]
 801c0a2:	429a      	cmp	r2, r3
 801c0a4:	d102      	bne.n	801c0ac <udp_bind+0x4c>
      rebind = 1;
 801c0a6:	2301      	movs	r3, #1
 801c0a8:	74fb      	strb	r3, [r7, #19]
      break;
 801c0aa:	e005      	b.n	801c0b8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c0ac:	697b      	ldr	r3, [r7, #20]
 801c0ae:	68db      	ldr	r3, [r3, #12]
 801c0b0:	617b      	str	r3, [r7, #20]
 801c0b2:	697b      	ldr	r3, [r7, #20]
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d1f2      	bne.n	801c09e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801c0b8:	88fb      	ldrh	r3, [r7, #6]
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d109      	bne.n	801c0d2 <udp_bind+0x72>
    port = udp_new_port();
 801c0be:	f7ff fcc5 	bl	801ba4c <udp_new_port>
 801c0c2:	4603      	mov	r3, r0
 801c0c4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c0c6:	88fb      	ldrh	r3, [r7, #6]
 801c0c8:	2b00      	cmp	r3, #0
 801c0ca:	d12c      	bne.n	801c126 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801c0cc:	f06f 0307 	mvn.w	r3, #7
 801c0d0:	e040      	b.n	801c154 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c0d2:	4b26      	ldr	r3, [pc, #152]	; (801c16c <udp_bind+0x10c>)
 801c0d4:	681b      	ldr	r3, [r3, #0]
 801c0d6:	617b      	str	r3, [r7, #20]
 801c0d8:	e022      	b.n	801c120 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801c0da:	68fa      	ldr	r2, [r7, #12]
 801c0dc:	697b      	ldr	r3, [r7, #20]
 801c0de:	429a      	cmp	r2, r3
 801c0e0:	d01b      	beq.n	801c11a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c0e2:	697b      	ldr	r3, [r7, #20]
 801c0e4:	8a5b      	ldrh	r3, [r3, #18]
 801c0e6:	88fa      	ldrh	r2, [r7, #6]
 801c0e8:	429a      	cmp	r2, r3
 801c0ea:	d116      	bne.n	801c11a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c0ec:	697b      	ldr	r3, [r7, #20]
 801c0ee:	681a      	ldr	r2, [r3, #0]
 801c0f0:	68bb      	ldr	r3, [r7, #8]
 801c0f2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c0f4:	429a      	cmp	r2, r3
 801c0f6:	d00d      	beq.n	801c114 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c0f8:	68bb      	ldr	r3, [r7, #8]
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d00a      	beq.n	801c114 <udp_bind+0xb4>
 801c0fe:	68bb      	ldr	r3, [r7, #8]
 801c100:	681b      	ldr	r3, [r3, #0]
 801c102:	2b00      	cmp	r3, #0
 801c104:	d006      	beq.n	801c114 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c106:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c108:	2b00      	cmp	r3, #0
 801c10a:	d003      	beq.n	801c114 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c10c:	697b      	ldr	r3, [r7, #20]
 801c10e:	681b      	ldr	r3, [r3, #0]
 801c110:	2b00      	cmp	r3, #0
 801c112:	d102      	bne.n	801c11a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c114:	f06f 0307 	mvn.w	r3, #7
 801c118:	e01c      	b.n	801c154 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c11a:	697b      	ldr	r3, [r7, #20]
 801c11c:	68db      	ldr	r3, [r3, #12]
 801c11e:	617b      	str	r3, [r7, #20]
 801c120:	697b      	ldr	r3, [r7, #20]
 801c122:	2b00      	cmp	r3, #0
 801c124:	d1d9      	bne.n	801c0da <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c126:	68bb      	ldr	r3, [r7, #8]
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d002      	beq.n	801c132 <udp_bind+0xd2>
 801c12c:	68bb      	ldr	r3, [r7, #8]
 801c12e:	681b      	ldr	r3, [r3, #0]
 801c130:	e000      	b.n	801c134 <udp_bind+0xd4>
 801c132:	2300      	movs	r3, #0
 801c134:	68fa      	ldr	r2, [r7, #12]
 801c136:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c138:	68fb      	ldr	r3, [r7, #12]
 801c13a:	88fa      	ldrh	r2, [r7, #6]
 801c13c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c13e:	7cfb      	ldrb	r3, [r7, #19]
 801c140:	2b00      	cmp	r3, #0
 801c142:	d106      	bne.n	801c152 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c144:	4b09      	ldr	r3, [pc, #36]	; (801c16c <udp_bind+0x10c>)
 801c146:	681a      	ldr	r2, [r3, #0]
 801c148:	68fb      	ldr	r3, [r7, #12]
 801c14a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c14c:	4a07      	ldr	r2, [pc, #28]	; (801c16c <udp_bind+0x10c>)
 801c14e:	68fb      	ldr	r3, [r7, #12]
 801c150:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801c152:	2300      	movs	r3, #0
}
 801c154:	4618      	mov	r0, r3
 801c156:	3718      	adds	r7, #24
 801c158:	46bd      	mov	sp, r7
 801c15a:	bd80      	pop	{r7, pc}
 801c15c:	08025548 	.word	0x08025548
 801c160:	080245f8 	.word	0x080245f8
 801c164:	080248c0 	.word	0x080248c0
 801c168:	0802464c 	.word	0x0802464c
 801c16c:	20010370 	.word	0x20010370

0801c170 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c170:	b580      	push	{r7, lr}
 801c172:	b086      	sub	sp, #24
 801c174:	af00      	add	r7, sp, #0
 801c176:	60f8      	str	r0, [r7, #12]
 801c178:	60b9      	str	r1, [r7, #8]
 801c17a:	4613      	mov	r3, r2
 801c17c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801c17e:	68fb      	ldr	r3, [r7, #12]
 801c180:	2b00      	cmp	r3, #0
 801c182:	d109      	bne.n	801c198 <udp_connect+0x28>
 801c184:	4b2c      	ldr	r3, [pc, #176]	; (801c238 <udp_connect+0xc8>)
 801c186:	f240 4235 	movw	r2, #1077	; 0x435
 801c18a:	492c      	ldr	r1, [pc, #176]	; (801c23c <udp_connect+0xcc>)
 801c18c:	482c      	ldr	r0, [pc, #176]	; (801c240 <udp_connect+0xd0>)
 801c18e:	f005 fa31 	bl	80215f4 <iprintf>
 801c192:	f06f 030f 	mvn.w	r3, #15
 801c196:	e04b      	b.n	801c230 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801c198:	68bb      	ldr	r3, [r7, #8]
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	d109      	bne.n	801c1b2 <udp_connect+0x42>
 801c19e:	4b26      	ldr	r3, [pc, #152]	; (801c238 <udp_connect+0xc8>)
 801c1a0:	f240 4236 	movw	r2, #1078	; 0x436
 801c1a4:	4927      	ldr	r1, [pc, #156]	; (801c244 <udp_connect+0xd4>)
 801c1a6:	4826      	ldr	r0, [pc, #152]	; (801c240 <udp_connect+0xd0>)
 801c1a8:	f005 fa24 	bl	80215f4 <iprintf>
 801c1ac:	f06f 030f 	mvn.w	r3, #15
 801c1b0:	e03e      	b.n	801c230 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801c1b2:	68fb      	ldr	r3, [r7, #12]
 801c1b4:	8a5b      	ldrh	r3, [r3, #18]
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	d10f      	bne.n	801c1da <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c1ba:	68f9      	ldr	r1, [r7, #12]
 801c1bc:	68fb      	ldr	r3, [r7, #12]
 801c1be:	8a5b      	ldrh	r3, [r3, #18]
 801c1c0:	461a      	mov	r2, r3
 801c1c2:	68f8      	ldr	r0, [r7, #12]
 801c1c4:	f7ff ff4c 	bl	801c060 <udp_bind>
 801c1c8:	4603      	mov	r3, r0
 801c1ca:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801c1cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	d002      	beq.n	801c1da <udp_connect+0x6a>
      return err;
 801c1d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c1d8:	e02a      	b.n	801c230 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801c1da:	68bb      	ldr	r3, [r7, #8]
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	d002      	beq.n	801c1e6 <udp_connect+0x76>
 801c1e0:	68bb      	ldr	r3, [r7, #8]
 801c1e2:	681b      	ldr	r3, [r3, #0]
 801c1e4:	e000      	b.n	801c1e8 <udp_connect+0x78>
 801c1e6:	2300      	movs	r3, #0
 801c1e8:	68fa      	ldr	r2, [r7, #12]
 801c1ea:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801c1ec:	68fb      	ldr	r3, [r7, #12]
 801c1ee:	88fa      	ldrh	r2, [r7, #6]
 801c1f0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801c1f2:	68fb      	ldr	r3, [r7, #12]
 801c1f4:	7c1b      	ldrb	r3, [r3, #16]
 801c1f6:	f043 0304 	orr.w	r3, r3, #4
 801c1fa:	b2da      	uxtb	r2, r3
 801c1fc:	68fb      	ldr	r3, [r7, #12]
 801c1fe:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c200:	4b11      	ldr	r3, [pc, #68]	; (801c248 <udp_connect+0xd8>)
 801c202:	681b      	ldr	r3, [r3, #0]
 801c204:	617b      	str	r3, [r7, #20]
 801c206:	e008      	b.n	801c21a <udp_connect+0xaa>
    if (pcb == ipcb) {
 801c208:	68fa      	ldr	r2, [r7, #12]
 801c20a:	697b      	ldr	r3, [r7, #20]
 801c20c:	429a      	cmp	r2, r3
 801c20e:	d101      	bne.n	801c214 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801c210:	2300      	movs	r3, #0
 801c212:	e00d      	b.n	801c230 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c214:	697b      	ldr	r3, [r7, #20]
 801c216:	68db      	ldr	r3, [r3, #12]
 801c218:	617b      	str	r3, [r7, #20]
 801c21a:	697b      	ldr	r3, [r7, #20]
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d1f3      	bne.n	801c208 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801c220:	4b09      	ldr	r3, [pc, #36]	; (801c248 <udp_connect+0xd8>)
 801c222:	681a      	ldr	r2, [r3, #0]
 801c224:	68fb      	ldr	r3, [r7, #12]
 801c226:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801c228:	4a07      	ldr	r2, [pc, #28]	; (801c248 <udp_connect+0xd8>)
 801c22a:	68fb      	ldr	r3, [r7, #12]
 801c22c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801c22e:	2300      	movs	r3, #0
}
 801c230:	4618      	mov	r0, r3
 801c232:	3718      	adds	r7, #24
 801c234:	46bd      	mov	sp, r7
 801c236:	bd80      	pop	{r7, pc}
 801c238:	080245f8 	.word	0x080245f8
 801c23c:	080248d8 	.word	0x080248d8
 801c240:	0802464c 	.word	0x0802464c
 801c244:	080248f4 	.word	0x080248f4
 801c248:	20010370 	.word	0x20010370

0801c24c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801c24c:	b580      	push	{r7, lr}
 801c24e:	b084      	sub	sp, #16
 801c250:	af00      	add	r7, sp, #0
 801c252:	60f8      	str	r0, [r7, #12]
 801c254:	60b9      	str	r1, [r7, #8]
 801c256:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801c258:	68fb      	ldr	r3, [r7, #12]
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	d107      	bne.n	801c26e <udp_recv+0x22>
 801c25e:	4b08      	ldr	r3, [pc, #32]	; (801c280 <udp_recv+0x34>)
 801c260:	f240 428a 	movw	r2, #1162	; 0x48a
 801c264:	4907      	ldr	r1, [pc, #28]	; (801c284 <udp_recv+0x38>)
 801c266:	4808      	ldr	r0, [pc, #32]	; (801c288 <udp_recv+0x3c>)
 801c268:	f005 f9c4 	bl	80215f4 <iprintf>
 801c26c:	e005      	b.n	801c27a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c26e:	68fb      	ldr	r3, [r7, #12]
 801c270:	68ba      	ldr	r2, [r7, #8]
 801c272:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801c274:	68fb      	ldr	r3, [r7, #12]
 801c276:	687a      	ldr	r2, [r7, #4]
 801c278:	61da      	str	r2, [r3, #28]
}
 801c27a:	3710      	adds	r7, #16
 801c27c:	46bd      	mov	sp, r7
 801c27e:	bd80      	pop	{r7, pc}
 801c280:	080245f8 	.word	0x080245f8
 801c284:	0802492c 	.word	0x0802492c
 801c288:	0802464c 	.word	0x0802464c

0801c28c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c28c:	b580      	push	{r7, lr}
 801c28e:	b084      	sub	sp, #16
 801c290:	af00      	add	r7, sp, #0
 801c292:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	2b00      	cmp	r3, #0
 801c298:	d107      	bne.n	801c2aa <udp_remove+0x1e>
 801c29a:	4b19      	ldr	r3, [pc, #100]	; (801c300 <udp_remove+0x74>)
 801c29c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801c2a0:	4918      	ldr	r1, [pc, #96]	; (801c304 <udp_remove+0x78>)
 801c2a2:	4819      	ldr	r0, [pc, #100]	; (801c308 <udp_remove+0x7c>)
 801c2a4:	f005 f9a6 	bl	80215f4 <iprintf>
 801c2a8:	e026      	b.n	801c2f8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c2aa:	4b18      	ldr	r3, [pc, #96]	; (801c30c <udp_remove+0x80>)
 801c2ac:	681b      	ldr	r3, [r3, #0]
 801c2ae:	687a      	ldr	r2, [r7, #4]
 801c2b0:	429a      	cmp	r2, r3
 801c2b2:	d105      	bne.n	801c2c0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c2b4:	4b15      	ldr	r3, [pc, #84]	; (801c30c <udp_remove+0x80>)
 801c2b6:	681b      	ldr	r3, [r3, #0]
 801c2b8:	68db      	ldr	r3, [r3, #12]
 801c2ba:	4a14      	ldr	r2, [pc, #80]	; (801c30c <udp_remove+0x80>)
 801c2bc:	6013      	str	r3, [r2, #0]
 801c2be:	e017      	b.n	801c2f0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c2c0:	4b12      	ldr	r3, [pc, #72]	; (801c30c <udp_remove+0x80>)
 801c2c2:	681b      	ldr	r3, [r3, #0]
 801c2c4:	60fb      	str	r3, [r7, #12]
 801c2c6:	e010      	b.n	801c2ea <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	68db      	ldr	r3, [r3, #12]
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d009      	beq.n	801c2e4 <udp_remove+0x58>
 801c2d0:	68fb      	ldr	r3, [r7, #12]
 801c2d2:	68db      	ldr	r3, [r3, #12]
 801c2d4:	687a      	ldr	r2, [r7, #4]
 801c2d6:	429a      	cmp	r2, r3
 801c2d8:	d104      	bne.n	801c2e4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	68da      	ldr	r2, [r3, #12]
 801c2de:	68fb      	ldr	r3, [r7, #12]
 801c2e0:	60da      	str	r2, [r3, #12]
        break;
 801c2e2:	e005      	b.n	801c2f0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c2e4:	68fb      	ldr	r3, [r7, #12]
 801c2e6:	68db      	ldr	r3, [r3, #12]
 801c2e8:	60fb      	str	r3, [r7, #12]
 801c2ea:	68fb      	ldr	r3, [r7, #12]
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	d1eb      	bne.n	801c2c8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c2f0:	6879      	ldr	r1, [r7, #4]
 801c2f2:	2000      	movs	r0, #0
 801c2f4:	f7f8 ff54 	bl	80151a0 <memp_free>
}
 801c2f8:	3710      	adds	r7, #16
 801c2fa:	46bd      	mov	sp, r7
 801c2fc:	bd80      	pop	{r7, pc}
 801c2fe:	bf00      	nop
 801c300:	080245f8 	.word	0x080245f8
 801c304:	08024944 	.word	0x08024944
 801c308:	0802464c 	.word	0x0802464c
 801c30c:	20010370 	.word	0x20010370

0801c310 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c310:	b580      	push	{r7, lr}
 801c312:	b082      	sub	sp, #8
 801c314:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c316:	2000      	movs	r0, #0
 801c318:	f7f8 fef0 	bl	80150fc <memp_malloc>
 801c31c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	2b00      	cmp	r3, #0
 801c322:	d007      	beq.n	801c334 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c324:	2220      	movs	r2, #32
 801c326:	2100      	movs	r1, #0
 801c328:	6878      	ldr	r0, [r7, #4]
 801c32a:	f005 f8b3 	bl	8021494 <memset>
    pcb->ttl = UDP_TTL;
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	22ff      	movs	r2, #255	; 0xff
 801c332:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801c334:	687b      	ldr	r3, [r7, #4]
}
 801c336:	4618      	mov	r0, r3
 801c338:	3708      	adds	r7, #8
 801c33a:	46bd      	mov	sp, r7
 801c33c:	bd80      	pop	{r7, pc}
	...

0801c340 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c340:	b480      	push	{r7}
 801c342:	b085      	sub	sp, #20
 801c344:	af00      	add	r7, sp, #0
 801c346:	6078      	str	r0, [r7, #4]
 801c348:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c34a:	687b      	ldr	r3, [r7, #4]
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	d01e      	beq.n	801c38e <udp_netif_ip_addr_changed+0x4e>
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	2b00      	cmp	r3, #0
 801c356:	d01a      	beq.n	801c38e <udp_netif_ip_addr_changed+0x4e>
 801c358:	683b      	ldr	r3, [r7, #0]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d017      	beq.n	801c38e <udp_netif_ip_addr_changed+0x4e>
 801c35e:	683b      	ldr	r3, [r7, #0]
 801c360:	681b      	ldr	r3, [r3, #0]
 801c362:	2b00      	cmp	r3, #0
 801c364:	d013      	beq.n	801c38e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c366:	4b0d      	ldr	r3, [pc, #52]	; (801c39c <udp_netif_ip_addr_changed+0x5c>)
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	60fb      	str	r3, [r7, #12]
 801c36c:	e00c      	b.n	801c388 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c36e:	68fb      	ldr	r3, [r7, #12]
 801c370:	681a      	ldr	r2, [r3, #0]
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	429a      	cmp	r2, r3
 801c378:	d103      	bne.n	801c382 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c37a:	683b      	ldr	r3, [r7, #0]
 801c37c:	681a      	ldr	r2, [r3, #0]
 801c37e:	68fb      	ldr	r3, [r7, #12]
 801c380:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c382:	68fb      	ldr	r3, [r7, #12]
 801c384:	68db      	ldr	r3, [r3, #12]
 801c386:	60fb      	str	r3, [r7, #12]
 801c388:	68fb      	ldr	r3, [r7, #12]
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d1ef      	bne.n	801c36e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c38e:	bf00      	nop
 801c390:	3714      	adds	r7, #20
 801c392:	46bd      	mov	sp, r7
 801c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c398:	4770      	bx	lr
 801c39a:	bf00      	nop
 801c39c:	20010370 	.word	0x20010370

0801c3a0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801c3a0:	b580      	push	{r7, lr}
 801c3a2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801c3a4:	4b20      	ldr	r3, [pc, #128]	; (801c428 <dhcp_inc_pcb_refcount+0x88>)
 801c3a6:	781b      	ldrb	r3, [r3, #0]
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	d133      	bne.n	801c414 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801c3ac:	4b1f      	ldr	r3, [pc, #124]	; (801c42c <dhcp_inc_pcb_refcount+0x8c>)
 801c3ae:	681b      	ldr	r3, [r3, #0]
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d005      	beq.n	801c3c0 <dhcp_inc_pcb_refcount+0x20>
 801c3b4:	4b1e      	ldr	r3, [pc, #120]	; (801c430 <dhcp_inc_pcb_refcount+0x90>)
 801c3b6:	22e5      	movs	r2, #229	; 0xe5
 801c3b8:	491e      	ldr	r1, [pc, #120]	; (801c434 <dhcp_inc_pcb_refcount+0x94>)
 801c3ba:	481f      	ldr	r0, [pc, #124]	; (801c438 <dhcp_inc_pcb_refcount+0x98>)
 801c3bc:	f005 f91a 	bl	80215f4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801c3c0:	f7ff ffa6 	bl	801c310 <udp_new>
 801c3c4:	4602      	mov	r2, r0
 801c3c6:	4b19      	ldr	r3, [pc, #100]	; (801c42c <dhcp_inc_pcb_refcount+0x8c>)
 801c3c8:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 801c3ca:	4b18      	ldr	r3, [pc, #96]	; (801c42c <dhcp_inc_pcb_refcount+0x8c>)
 801c3cc:	681b      	ldr	r3, [r3, #0]
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	d102      	bne.n	801c3d8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801c3d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c3d6:	e024      	b.n	801c422 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801c3d8:	4b14      	ldr	r3, [pc, #80]	; (801c42c <dhcp_inc_pcb_refcount+0x8c>)
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	7a5a      	ldrb	r2, [r3, #9]
 801c3de:	4b13      	ldr	r3, [pc, #76]	; (801c42c <dhcp_inc_pcb_refcount+0x8c>)
 801c3e0:	681b      	ldr	r3, [r3, #0]
 801c3e2:	f042 0220 	orr.w	r2, r2, #32
 801c3e6:	b2d2      	uxtb	r2, r2
 801c3e8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801c3ea:	4b10      	ldr	r3, [pc, #64]	; (801c42c <dhcp_inc_pcb_refcount+0x8c>)
 801c3ec:	681b      	ldr	r3, [r3, #0]
 801c3ee:	2244      	movs	r2, #68	; 0x44
 801c3f0:	4912      	ldr	r1, [pc, #72]	; (801c43c <dhcp_inc_pcb_refcount+0x9c>)
 801c3f2:	4618      	mov	r0, r3
 801c3f4:	f7ff fe34 	bl	801c060 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801c3f8:	4b0c      	ldr	r3, [pc, #48]	; (801c42c <dhcp_inc_pcb_refcount+0x8c>)
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	2243      	movs	r2, #67	; 0x43
 801c3fe:	490f      	ldr	r1, [pc, #60]	; (801c43c <dhcp_inc_pcb_refcount+0x9c>)
 801c400:	4618      	mov	r0, r3
 801c402:	f7ff feb5 	bl	801c170 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801c406:	4b09      	ldr	r3, [pc, #36]	; (801c42c <dhcp_inc_pcb_refcount+0x8c>)
 801c408:	681b      	ldr	r3, [r3, #0]
 801c40a:	2200      	movs	r2, #0
 801c40c:	490c      	ldr	r1, [pc, #48]	; (801c440 <dhcp_inc_pcb_refcount+0xa0>)
 801c40e:	4618      	mov	r0, r3
 801c410:	f7ff ff1c 	bl	801c24c <udp_recv>
  }

  dhcp_pcb_refcount++;
 801c414:	4b04      	ldr	r3, [pc, #16]	; (801c428 <dhcp_inc_pcb_refcount+0x88>)
 801c416:	781b      	ldrb	r3, [r3, #0]
 801c418:	3301      	adds	r3, #1
 801c41a:	b2da      	uxtb	r2, r3
 801c41c:	4b02      	ldr	r3, [pc, #8]	; (801c428 <dhcp_inc_pcb_refcount+0x88>)
 801c41e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801c420:	2300      	movs	r3, #0
}
 801c422:	4618      	mov	r0, r3
 801c424:	bd80      	pop	{r7, pc}
 801c426:	bf00      	nop
 801c428:	20009004 	.word	0x20009004
 801c42c:	20009000 	.word	0x20009000
 801c430:	0802495c 	.word	0x0802495c
 801c434:	08024994 	.word	0x08024994
 801c438:	080249bc 	.word	0x080249bc
 801c43c:	08025548 	.word	0x08025548
 801c440:	0801dcfd 	.word	0x0801dcfd

0801c444 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801c444:	b580      	push	{r7, lr}
 801c446:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801c448:	4b0e      	ldr	r3, [pc, #56]	; (801c484 <dhcp_dec_pcb_refcount+0x40>)
 801c44a:	781b      	ldrb	r3, [r3, #0]
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d105      	bne.n	801c45c <dhcp_dec_pcb_refcount+0x18>
 801c450:	4b0d      	ldr	r3, [pc, #52]	; (801c488 <dhcp_dec_pcb_refcount+0x44>)
 801c452:	22ff      	movs	r2, #255	; 0xff
 801c454:	490d      	ldr	r1, [pc, #52]	; (801c48c <dhcp_dec_pcb_refcount+0x48>)
 801c456:	480e      	ldr	r0, [pc, #56]	; (801c490 <dhcp_dec_pcb_refcount+0x4c>)
 801c458:	f005 f8cc 	bl	80215f4 <iprintf>
  dhcp_pcb_refcount--;
 801c45c:	4b09      	ldr	r3, [pc, #36]	; (801c484 <dhcp_dec_pcb_refcount+0x40>)
 801c45e:	781b      	ldrb	r3, [r3, #0]
 801c460:	3b01      	subs	r3, #1
 801c462:	b2da      	uxtb	r2, r3
 801c464:	4b07      	ldr	r3, [pc, #28]	; (801c484 <dhcp_dec_pcb_refcount+0x40>)
 801c466:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801c468:	4b06      	ldr	r3, [pc, #24]	; (801c484 <dhcp_dec_pcb_refcount+0x40>)
 801c46a:	781b      	ldrb	r3, [r3, #0]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d107      	bne.n	801c480 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801c470:	4b08      	ldr	r3, [pc, #32]	; (801c494 <dhcp_dec_pcb_refcount+0x50>)
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	4618      	mov	r0, r3
 801c476:	f7ff ff09 	bl	801c28c <udp_remove>
    dhcp_pcb = NULL;
 801c47a:	4b06      	ldr	r3, [pc, #24]	; (801c494 <dhcp_dec_pcb_refcount+0x50>)
 801c47c:	2200      	movs	r2, #0
 801c47e:	601a      	str	r2, [r3, #0]
  }
}
 801c480:	bf00      	nop
 801c482:	bd80      	pop	{r7, pc}
 801c484:	20009004 	.word	0x20009004
 801c488:	0802495c 	.word	0x0802495c
 801c48c:	080249e4 	.word	0x080249e4
 801c490:	080249bc 	.word	0x080249bc
 801c494:	20009000 	.word	0x20009000

0801c498 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801c498:	b580      	push	{r7, lr}
 801c49a:	b084      	sub	sp, #16
 801c49c:	af00      	add	r7, sp, #0
 801c49e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c4a4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801c4a6:	210c      	movs	r1, #12
 801c4a8:	68f8      	ldr	r0, [r7, #12]
 801c4aa:	f001 f869 	bl	801d580 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801c4ae:	4b06      	ldr	r3, [pc, #24]	; (801c4c8 <dhcp_handle_nak+0x30>)
 801c4b0:	4a05      	ldr	r2, [pc, #20]	; (801c4c8 <dhcp_handle_nak+0x30>)
 801c4b2:	4905      	ldr	r1, [pc, #20]	; (801c4c8 <dhcp_handle_nak+0x30>)
 801c4b4:	6878      	ldr	r0, [r7, #4]
 801c4b6:	f7f9 f81f 	bl	80154f8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801c4ba:	6878      	ldr	r0, [r7, #4]
 801c4bc:	f000 fc5c 	bl	801cd78 <dhcp_discover>
}
 801c4c0:	bf00      	nop
 801c4c2:	3710      	adds	r7, #16
 801c4c4:	46bd      	mov	sp, r7
 801c4c6:	bd80      	pop	{r7, pc}
 801c4c8:	08025548 	.word	0x08025548

0801c4cc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801c4cc:	b580      	push	{r7, lr}
 801c4ce:	b084      	sub	sp, #16
 801c4d0:	af00      	add	r7, sp, #0
 801c4d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c4d8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801c4da:	2108      	movs	r1, #8
 801c4dc:	68f8      	ldr	r0, [r7, #12]
 801c4de:	f001 f84f 	bl	801d580 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801c4e2:	68fb      	ldr	r3, [r7, #12]
 801c4e4:	331c      	adds	r3, #28
 801c4e6:	2200      	movs	r2, #0
 801c4e8:	4619      	mov	r1, r3
 801c4ea:	6878      	ldr	r0, [r7, #4]
 801c4ec:	f002 fb4e 	bl	801eb8c <etharp_query>
 801c4f0:	4603      	mov	r3, r0
 801c4f2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801c4f4:	68fb      	ldr	r3, [r7, #12]
 801c4f6:	799b      	ldrb	r3, [r3, #6]
 801c4f8:	2bff      	cmp	r3, #255	; 0xff
 801c4fa:	d005      	beq.n	801c508 <dhcp_check+0x3c>
    dhcp->tries++;
 801c4fc:	68fb      	ldr	r3, [r7, #12]
 801c4fe:	799b      	ldrb	r3, [r3, #6]
 801c500:	3301      	adds	r3, #1
 801c502:	b2da      	uxtb	r2, r3
 801c504:	68fb      	ldr	r3, [r7, #12]
 801c506:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801c508:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801c50c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c50e:	893b      	ldrh	r3, [r7, #8]
 801c510:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c514:	4a06      	ldr	r2, [pc, #24]	; (801c530 <dhcp_check+0x64>)
 801c516:	fb82 1203 	smull	r1, r2, r2, r3
 801c51a:	1152      	asrs	r2, r2, #5
 801c51c:	17db      	asrs	r3, r3, #31
 801c51e:	1ad3      	subs	r3, r2, r3
 801c520:	b29a      	uxth	r2, r3
 801c522:	68fb      	ldr	r3, [r7, #12]
 801c524:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801c526:	bf00      	nop
 801c528:	3710      	adds	r7, #16
 801c52a:	46bd      	mov	sp, r7
 801c52c:	bd80      	pop	{r7, pc}
 801c52e:	bf00      	nop
 801c530:	10624dd3 	.word	0x10624dd3

0801c534 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801c534:	b580      	push	{r7, lr}
 801c536:	b084      	sub	sp, #16
 801c538:	af00      	add	r7, sp, #0
 801c53a:	6078      	str	r0, [r7, #4]
 801c53c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c542:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801c544:	4b0c      	ldr	r3, [pc, #48]	; (801c578 <dhcp_handle_offer+0x44>)
 801c546:	789b      	ldrb	r3, [r3, #2]
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d011      	beq.n	801c570 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	2200      	movs	r2, #0
 801c550:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801c552:	4b0a      	ldr	r3, [pc, #40]	; (801c57c <dhcp_handle_offer+0x48>)
 801c554:	689b      	ldr	r3, [r3, #8]
 801c556:	4618      	mov	r0, r3
 801c558:	f7f8 f92f 	bl	80147ba <lwip_htonl>
 801c55c:	4602      	mov	r2, r0
 801c55e:	68fb      	ldr	r3, [r7, #12]
 801c560:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801c562:	683b      	ldr	r3, [r7, #0]
 801c564:	691a      	ldr	r2, [r3, #16]
 801c566:	68fb      	ldr	r3, [r7, #12]
 801c568:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801c56a:	6878      	ldr	r0, [r7, #4]
 801c56c:	f000 f808 	bl	801c580 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801c570:	bf00      	nop
 801c572:	3710      	adds	r7, #16
 801c574:	46bd      	mov	sp, r7
 801c576:	bd80      	pop	{r7, pc}
 801c578:	20010374 	.word	0x20010374
 801c57c:	2001037c 	.word	0x2001037c

0801c580 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801c580:	b5b0      	push	{r4, r5, r7, lr}
 801c582:	b08a      	sub	sp, #40	; 0x28
 801c584:	af02      	add	r7, sp, #8
 801c586:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	d109      	bne.n	801c5a2 <dhcp_select+0x22>
 801c58e:	4b71      	ldr	r3, [pc, #452]	; (801c754 <dhcp_select+0x1d4>)
 801c590:	f240 1277 	movw	r2, #375	; 0x177
 801c594:	4970      	ldr	r1, [pc, #448]	; (801c758 <dhcp_select+0x1d8>)
 801c596:	4871      	ldr	r0, [pc, #452]	; (801c75c <dhcp_select+0x1dc>)
 801c598:	f005 f82c 	bl	80215f4 <iprintf>
 801c59c:	f06f 030f 	mvn.w	r3, #15
 801c5a0:	e0d3      	b.n	801c74a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5a6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801c5a8:	69bb      	ldr	r3, [r7, #24]
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d109      	bne.n	801c5c2 <dhcp_select+0x42>
 801c5ae:	4b69      	ldr	r3, [pc, #420]	; (801c754 <dhcp_select+0x1d4>)
 801c5b0:	f240 1279 	movw	r2, #377	; 0x179
 801c5b4:	496a      	ldr	r1, [pc, #424]	; (801c760 <dhcp_select+0x1e0>)
 801c5b6:	4869      	ldr	r0, [pc, #420]	; (801c75c <dhcp_select+0x1dc>)
 801c5b8:	f005 f81c 	bl	80215f4 <iprintf>
 801c5bc:	f06f 0305 	mvn.w	r3, #5
 801c5c0:	e0c3      	b.n	801c74a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801c5c2:	2101      	movs	r1, #1
 801c5c4:	69b8      	ldr	r0, [r7, #24]
 801c5c6:	f000 ffdb 	bl	801d580 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c5ca:	f107 030c 	add.w	r3, r7, #12
 801c5ce:	2203      	movs	r2, #3
 801c5d0:	69b9      	ldr	r1, [r7, #24]
 801c5d2:	6878      	ldr	r0, [r7, #4]
 801c5d4:	f001 fc5e 	bl	801de94 <dhcp_create_msg>
 801c5d8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c5da:	697b      	ldr	r3, [r7, #20]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	f000 8085 	beq.w	801c6ec <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c5e2:	697b      	ldr	r3, [r7, #20]
 801c5e4:	685b      	ldr	r3, [r3, #4]
 801c5e6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c5e8:	89b8      	ldrh	r0, [r7, #12]
 801c5ea:	693b      	ldr	r3, [r7, #16]
 801c5ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c5f0:	2302      	movs	r3, #2
 801c5f2:	2239      	movs	r2, #57	; 0x39
 801c5f4:	f000 ffde 	bl	801d5b4 <dhcp_option>
 801c5f8:	4603      	mov	r3, r0
 801c5fa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c5fc:	89b8      	ldrh	r0, [r7, #12]
 801c5fe:	693b      	ldr	r3, [r7, #16]
 801c600:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c608:	461a      	mov	r2, r3
 801c60a:	f001 f82d 	bl	801d668 <dhcp_option_short>
 801c60e:	4603      	mov	r3, r0
 801c610:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c612:	89b8      	ldrh	r0, [r7, #12]
 801c614:	693b      	ldr	r3, [r7, #16]
 801c616:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c61a:	2304      	movs	r3, #4
 801c61c:	2232      	movs	r2, #50	; 0x32
 801c61e:	f000 ffc9 	bl	801d5b4 <dhcp_option>
 801c622:	4603      	mov	r3, r0
 801c624:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c626:	89bc      	ldrh	r4, [r7, #12]
 801c628:	693b      	ldr	r3, [r7, #16]
 801c62a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c62e:	69bb      	ldr	r3, [r7, #24]
 801c630:	69db      	ldr	r3, [r3, #28]
 801c632:	4618      	mov	r0, r3
 801c634:	f7f8 f8c1 	bl	80147ba <lwip_htonl>
 801c638:	4603      	mov	r3, r0
 801c63a:	461a      	mov	r2, r3
 801c63c:	4629      	mov	r1, r5
 801c63e:	4620      	mov	r0, r4
 801c640:	f001 f844 	bl	801d6cc <dhcp_option_long>
 801c644:	4603      	mov	r3, r0
 801c646:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801c648:	89b8      	ldrh	r0, [r7, #12]
 801c64a:	693b      	ldr	r3, [r7, #16]
 801c64c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c650:	2304      	movs	r3, #4
 801c652:	2236      	movs	r2, #54	; 0x36
 801c654:	f000 ffae 	bl	801d5b4 <dhcp_option>
 801c658:	4603      	mov	r3, r0
 801c65a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801c65c:	89bc      	ldrh	r4, [r7, #12]
 801c65e:	693b      	ldr	r3, [r7, #16]
 801c660:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c664:	69bb      	ldr	r3, [r7, #24]
 801c666:	699b      	ldr	r3, [r3, #24]
 801c668:	4618      	mov	r0, r3
 801c66a:	f7f8 f8a6 	bl	80147ba <lwip_htonl>
 801c66e:	4603      	mov	r3, r0
 801c670:	461a      	mov	r2, r3
 801c672:	4629      	mov	r1, r5
 801c674:	4620      	mov	r0, r4
 801c676:	f001 f829 	bl	801d6cc <dhcp_option_long>
 801c67a:	4603      	mov	r3, r0
 801c67c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c67e:	89b8      	ldrh	r0, [r7, #12]
 801c680:	693b      	ldr	r3, [r7, #16]
 801c682:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c686:	2303      	movs	r3, #3
 801c688:	2237      	movs	r2, #55	; 0x37
 801c68a:	f000 ff93 	bl	801d5b4 <dhcp_option>
 801c68e:	4603      	mov	r3, r0
 801c690:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c692:	2300      	movs	r3, #0
 801c694:	77bb      	strb	r3, [r7, #30]
 801c696:	e00e      	b.n	801c6b6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c698:	89b8      	ldrh	r0, [r7, #12]
 801c69a:	693b      	ldr	r3, [r7, #16]
 801c69c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c6a0:	7fbb      	ldrb	r3, [r7, #30]
 801c6a2:	4a30      	ldr	r2, [pc, #192]	; (801c764 <dhcp_select+0x1e4>)
 801c6a4:	5cd3      	ldrb	r3, [r2, r3]
 801c6a6:	461a      	mov	r2, r3
 801c6a8:	f000 ffb8 	bl	801d61c <dhcp_option_byte>
 801c6ac:	4603      	mov	r3, r0
 801c6ae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c6b0:	7fbb      	ldrb	r3, [r7, #30]
 801c6b2:	3301      	adds	r3, #1
 801c6b4:	77bb      	strb	r3, [r7, #30]
 801c6b6:	7fbb      	ldrb	r3, [r7, #30]
 801c6b8:	2b02      	cmp	r3, #2
 801c6ba:	d9ed      	bls.n	801c698 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c6bc:	89b8      	ldrh	r0, [r7, #12]
 801c6be:	693b      	ldr	r3, [r7, #16]
 801c6c0:	33f0      	adds	r3, #240	; 0xf0
 801c6c2:	697a      	ldr	r2, [r7, #20]
 801c6c4:	4619      	mov	r1, r3
 801c6c6:	f001 fcbb 	bl	801e040 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801c6ca:	4b27      	ldr	r3, [pc, #156]	; (801c768 <dhcp_select+0x1e8>)
 801c6cc:	6818      	ldr	r0, [r3, #0]
 801c6ce:	4b27      	ldr	r3, [pc, #156]	; (801c76c <dhcp_select+0x1ec>)
 801c6d0:	9301      	str	r3, [sp, #4]
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	9300      	str	r3, [sp, #0]
 801c6d6:	2343      	movs	r3, #67	; 0x43
 801c6d8:	4a25      	ldr	r2, [pc, #148]	; (801c770 <dhcp_select+0x1f0>)
 801c6da:	6979      	ldr	r1, [r7, #20]
 801c6dc:	f7ff fbda 	bl	801be94 <udp_sendto_if_src>
 801c6e0:	4603      	mov	r3, r0
 801c6e2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c6e4:	6978      	ldr	r0, [r7, #20]
 801c6e6:	f7f9 fc21 	bl	8015f2c <pbuf_free>
 801c6ea:	e001      	b.n	801c6f0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c6ec:	23ff      	movs	r3, #255	; 0xff
 801c6ee:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c6f0:	69bb      	ldr	r3, [r7, #24]
 801c6f2:	799b      	ldrb	r3, [r3, #6]
 801c6f4:	2bff      	cmp	r3, #255	; 0xff
 801c6f6:	d005      	beq.n	801c704 <dhcp_select+0x184>
    dhcp->tries++;
 801c6f8:	69bb      	ldr	r3, [r7, #24]
 801c6fa:	799b      	ldrb	r3, [r3, #6]
 801c6fc:	3301      	adds	r3, #1
 801c6fe:	b2da      	uxtb	r2, r3
 801c700:	69bb      	ldr	r3, [r7, #24]
 801c702:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c704:	69bb      	ldr	r3, [r7, #24]
 801c706:	799b      	ldrb	r3, [r3, #6]
 801c708:	2b05      	cmp	r3, #5
 801c70a:	d80d      	bhi.n	801c728 <dhcp_select+0x1a8>
 801c70c:	69bb      	ldr	r3, [r7, #24]
 801c70e:	799b      	ldrb	r3, [r3, #6]
 801c710:	461a      	mov	r2, r3
 801c712:	2301      	movs	r3, #1
 801c714:	4093      	lsls	r3, r2
 801c716:	b29b      	uxth	r3, r3
 801c718:	461a      	mov	r2, r3
 801c71a:	0152      	lsls	r2, r2, #5
 801c71c:	1ad2      	subs	r2, r2, r3
 801c71e:	0092      	lsls	r2, r2, #2
 801c720:	4413      	add	r3, r2
 801c722:	00db      	lsls	r3, r3, #3
 801c724:	b29b      	uxth	r3, r3
 801c726:	e001      	b.n	801c72c <dhcp_select+0x1ac>
 801c728:	f64e 2360 	movw	r3, #60000	; 0xea60
 801c72c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c72e:	89fb      	ldrh	r3, [r7, #14]
 801c730:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c734:	4a0f      	ldr	r2, [pc, #60]	; (801c774 <dhcp_select+0x1f4>)
 801c736:	fb82 1203 	smull	r1, r2, r2, r3
 801c73a:	1152      	asrs	r2, r2, #5
 801c73c:	17db      	asrs	r3, r3, #31
 801c73e:	1ad3      	subs	r3, r2, r3
 801c740:	b29a      	uxth	r2, r3
 801c742:	69bb      	ldr	r3, [r7, #24]
 801c744:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c746:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c74a:	4618      	mov	r0, r3
 801c74c:	3720      	adds	r7, #32
 801c74e:	46bd      	mov	sp, r7
 801c750:	bdb0      	pop	{r4, r5, r7, pc}
 801c752:	bf00      	nop
 801c754:	0802495c 	.word	0x0802495c
 801c758:	08024a08 	.word	0x08024a08
 801c75c:	080249bc 	.word	0x080249bc
 801c760:	08024a24 	.word	0x08024a24
 801c764:	20000040 	.word	0x20000040
 801c768:	20009000 	.word	0x20009000
 801c76c:	08025548 	.word	0x08025548
 801c770:	0802554c 	.word	0x0802554c
 801c774:	10624dd3 	.word	0x10624dd3

0801c778 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801c778:	b580      	push	{r7, lr}
 801c77a:	b082      	sub	sp, #8
 801c77c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801c77e:	4b27      	ldr	r3, [pc, #156]	; (801c81c <dhcp_coarse_tmr+0xa4>)
 801c780:	681b      	ldr	r3, [r3, #0]
 801c782:	607b      	str	r3, [r7, #4]
 801c784:	e042      	b.n	801c80c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801c786:	687b      	ldr	r3, [r7, #4]
 801c788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c78a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801c78c:	683b      	ldr	r3, [r7, #0]
 801c78e:	2b00      	cmp	r3, #0
 801c790:	d039      	beq.n	801c806 <dhcp_coarse_tmr+0x8e>
 801c792:	683b      	ldr	r3, [r7, #0]
 801c794:	795b      	ldrb	r3, [r3, #5]
 801c796:	2b00      	cmp	r3, #0
 801c798:	d035      	beq.n	801c806 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801c79a:	683b      	ldr	r3, [r7, #0]
 801c79c:	8a9b      	ldrh	r3, [r3, #20]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d012      	beq.n	801c7c8 <dhcp_coarse_tmr+0x50>
 801c7a2:	683b      	ldr	r3, [r7, #0]
 801c7a4:	8a5b      	ldrh	r3, [r3, #18]
 801c7a6:	3301      	adds	r3, #1
 801c7a8:	b29a      	uxth	r2, r3
 801c7aa:	683b      	ldr	r3, [r7, #0]
 801c7ac:	825a      	strh	r2, [r3, #18]
 801c7ae:	683b      	ldr	r3, [r7, #0]
 801c7b0:	8a5a      	ldrh	r2, [r3, #18]
 801c7b2:	683b      	ldr	r3, [r7, #0]
 801c7b4:	8a9b      	ldrh	r3, [r3, #20]
 801c7b6:	429a      	cmp	r2, r3
 801c7b8:	d106      	bne.n	801c7c8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801c7ba:	6878      	ldr	r0, [r7, #4]
 801c7bc:	f000 fe46 	bl	801d44c <dhcp_release_and_stop>
        dhcp_start(netif);
 801c7c0:	6878      	ldr	r0, [r7, #4]
 801c7c2:	f000 f96b 	bl	801ca9c <dhcp_start>
 801c7c6:	e01e      	b.n	801c806 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801c7c8:	683b      	ldr	r3, [r7, #0]
 801c7ca:	8a1b      	ldrh	r3, [r3, #16]
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d00b      	beq.n	801c7e8 <dhcp_coarse_tmr+0x70>
 801c7d0:	683b      	ldr	r3, [r7, #0]
 801c7d2:	8a1b      	ldrh	r3, [r3, #16]
 801c7d4:	1e5a      	subs	r2, r3, #1
 801c7d6:	b291      	uxth	r1, r2
 801c7d8:	683a      	ldr	r2, [r7, #0]
 801c7da:	8211      	strh	r1, [r2, #16]
 801c7dc:	2b01      	cmp	r3, #1
 801c7de:	d103      	bne.n	801c7e8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801c7e0:	6878      	ldr	r0, [r7, #4]
 801c7e2:	f000 f8c7 	bl	801c974 <dhcp_t2_timeout>
 801c7e6:	e00e      	b.n	801c806 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801c7e8:	683b      	ldr	r3, [r7, #0]
 801c7ea:	89db      	ldrh	r3, [r3, #14]
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d00a      	beq.n	801c806 <dhcp_coarse_tmr+0x8e>
 801c7f0:	683b      	ldr	r3, [r7, #0]
 801c7f2:	89db      	ldrh	r3, [r3, #14]
 801c7f4:	1e5a      	subs	r2, r3, #1
 801c7f6:	b291      	uxth	r1, r2
 801c7f8:	683a      	ldr	r2, [r7, #0]
 801c7fa:	81d1      	strh	r1, [r2, #14]
 801c7fc:	2b01      	cmp	r3, #1
 801c7fe:	d102      	bne.n	801c806 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801c800:	6878      	ldr	r0, [r7, #4]
 801c802:	f000 f888 	bl	801c916 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	681b      	ldr	r3, [r3, #0]
 801c80a:	607b      	str	r3, [r7, #4]
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	2b00      	cmp	r3, #0
 801c810:	d1b9      	bne.n	801c786 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801c812:	bf00      	nop
 801c814:	3708      	adds	r7, #8
 801c816:	46bd      	mov	sp, r7
 801c818:	bd80      	pop	{r7, pc}
 801c81a:	bf00      	nop
 801c81c:	20010348 	.word	0x20010348

0801c820 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801c820:	b580      	push	{r7, lr}
 801c822:	b082      	sub	sp, #8
 801c824:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801c826:	4b16      	ldr	r3, [pc, #88]	; (801c880 <dhcp_fine_tmr+0x60>)
 801c828:	681b      	ldr	r3, [r3, #0]
 801c82a:	607b      	str	r3, [r7, #4]
 801c82c:	e020      	b.n	801c870 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801c82e:	687b      	ldr	r3, [r7, #4]
 801c830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c832:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801c834:	683b      	ldr	r3, [r7, #0]
 801c836:	2b00      	cmp	r3, #0
 801c838:	d017      	beq.n	801c86a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801c83a:	683b      	ldr	r3, [r7, #0]
 801c83c:	891b      	ldrh	r3, [r3, #8]
 801c83e:	2b01      	cmp	r3, #1
 801c840:	d906      	bls.n	801c850 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801c842:	683b      	ldr	r3, [r7, #0]
 801c844:	891b      	ldrh	r3, [r3, #8]
 801c846:	3b01      	subs	r3, #1
 801c848:	b29a      	uxth	r2, r3
 801c84a:	683b      	ldr	r3, [r7, #0]
 801c84c:	811a      	strh	r2, [r3, #8]
 801c84e:	e00c      	b.n	801c86a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801c850:	683b      	ldr	r3, [r7, #0]
 801c852:	891b      	ldrh	r3, [r3, #8]
 801c854:	2b01      	cmp	r3, #1
 801c856:	d108      	bne.n	801c86a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801c858:	683b      	ldr	r3, [r7, #0]
 801c85a:	891b      	ldrh	r3, [r3, #8]
 801c85c:	3b01      	subs	r3, #1
 801c85e:	b29a      	uxth	r2, r3
 801c860:	683b      	ldr	r3, [r7, #0]
 801c862:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801c864:	6878      	ldr	r0, [r7, #4]
 801c866:	f000 f80d 	bl	801c884 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	681b      	ldr	r3, [r3, #0]
 801c86e:	607b      	str	r3, [r7, #4]
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	2b00      	cmp	r3, #0
 801c874:	d1db      	bne.n	801c82e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801c876:	bf00      	nop
 801c878:	3708      	adds	r7, #8
 801c87a:	46bd      	mov	sp, r7
 801c87c:	bd80      	pop	{r7, pc}
 801c87e:	bf00      	nop
 801c880:	20010348 	.word	0x20010348

0801c884 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801c884:	b580      	push	{r7, lr}
 801c886:	b084      	sub	sp, #16
 801c888:	af00      	add	r7, sp, #0
 801c88a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c890:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801c892:	68fb      	ldr	r3, [r7, #12]
 801c894:	795b      	ldrb	r3, [r3, #5]
 801c896:	2b0c      	cmp	r3, #12
 801c898:	d003      	beq.n	801c8a2 <dhcp_timeout+0x1e>
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	795b      	ldrb	r3, [r3, #5]
 801c89e:	2b06      	cmp	r3, #6
 801c8a0:	d103      	bne.n	801c8aa <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801c8a2:	6878      	ldr	r0, [r7, #4]
 801c8a4:	f000 fa68 	bl	801cd78 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801c8a8:	e031      	b.n	801c90e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801c8aa:	68fb      	ldr	r3, [r7, #12]
 801c8ac:	795b      	ldrb	r3, [r3, #5]
 801c8ae:	2b01      	cmp	r3, #1
 801c8b0:	d10e      	bne.n	801c8d0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801c8b2:	68fb      	ldr	r3, [r7, #12]
 801c8b4:	799b      	ldrb	r3, [r3, #6]
 801c8b6:	2b05      	cmp	r3, #5
 801c8b8:	d803      	bhi.n	801c8c2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801c8ba:	6878      	ldr	r0, [r7, #4]
 801c8bc:	f7ff fe60 	bl	801c580 <dhcp_select>
}
 801c8c0:	e025      	b.n	801c90e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801c8c2:	6878      	ldr	r0, [r7, #4]
 801c8c4:	f000 fdc2 	bl	801d44c <dhcp_release_and_stop>
      dhcp_start(netif);
 801c8c8:	6878      	ldr	r0, [r7, #4]
 801c8ca:	f000 f8e7 	bl	801ca9c <dhcp_start>
}
 801c8ce:	e01e      	b.n	801c90e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	795b      	ldrb	r3, [r3, #5]
 801c8d4:	2b08      	cmp	r3, #8
 801c8d6:	d10b      	bne.n	801c8f0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801c8d8:	68fb      	ldr	r3, [r7, #12]
 801c8da:	799b      	ldrb	r3, [r3, #6]
 801c8dc:	2b01      	cmp	r3, #1
 801c8de:	d803      	bhi.n	801c8e8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801c8e0:	6878      	ldr	r0, [r7, #4]
 801c8e2:	f7ff fdf3 	bl	801c4cc <dhcp_check>
}
 801c8e6:	e012      	b.n	801c90e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801c8e8:	6878      	ldr	r0, [r7, #4]
 801c8ea:	f000 fae7 	bl	801cebc <dhcp_bind>
}
 801c8ee:	e00e      	b.n	801c90e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	795b      	ldrb	r3, [r3, #5]
 801c8f4:	2b03      	cmp	r3, #3
 801c8f6:	d10a      	bne.n	801c90e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801c8f8:	68fb      	ldr	r3, [r7, #12]
 801c8fa:	799b      	ldrb	r3, [r3, #6]
 801c8fc:	2b01      	cmp	r3, #1
 801c8fe:	d803      	bhi.n	801c908 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801c900:	6878      	ldr	r0, [r7, #4]
 801c902:	f000 fced 	bl	801d2e0 <dhcp_reboot>
}
 801c906:	e002      	b.n	801c90e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801c908:	6878      	ldr	r0, [r7, #4]
 801c90a:	f000 fa35 	bl	801cd78 <dhcp_discover>
}
 801c90e:	bf00      	nop
 801c910:	3710      	adds	r7, #16
 801c912:	46bd      	mov	sp, r7
 801c914:	bd80      	pop	{r7, pc}

0801c916 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801c916:	b580      	push	{r7, lr}
 801c918:	b084      	sub	sp, #16
 801c91a:	af00      	add	r7, sp, #0
 801c91c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c922:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801c924:	68fb      	ldr	r3, [r7, #12]
 801c926:	795b      	ldrb	r3, [r3, #5]
 801c928:	2b01      	cmp	r3, #1
 801c92a:	d007      	beq.n	801c93c <dhcp_t1_timeout+0x26>
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	795b      	ldrb	r3, [r3, #5]
 801c930:	2b0a      	cmp	r3, #10
 801c932:	d003      	beq.n	801c93c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801c934:	68fb      	ldr	r3, [r7, #12]
 801c936:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801c938:	2b05      	cmp	r3, #5
 801c93a:	d117      	bne.n	801c96c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801c93c:	6878      	ldr	r0, [r7, #4]
 801c93e:	f000 fb97 	bl	801d070 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	899b      	ldrh	r3, [r3, #12]
 801c946:	461a      	mov	r2, r3
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	8a5b      	ldrh	r3, [r3, #18]
 801c94c:	1ad3      	subs	r3, r2, r3
 801c94e:	2b01      	cmp	r3, #1
 801c950:	dd0c      	ble.n	801c96c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	899b      	ldrh	r3, [r3, #12]
 801c956:	461a      	mov	r2, r3
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	8a5b      	ldrh	r3, [r3, #18]
 801c95c:	1ad3      	subs	r3, r2, r3
 801c95e:	2b00      	cmp	r3, #0
 801c960:	da00      	bge.n	801c964 <dhcp_t1_timeout+0x4e>
 801c962:	3301      	adds	r3, #1
 801c964:	105b      	asrs	r3, r3, #1
 801c966:	b29a      	uxth	r2, r3
 801c968:	68fb      	ldr	r3, [r7, #12]
 801c96a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801c96c:	bf00      	nop
 801c96e:	3710      	adds	r7, #16
 801c970:	46bd      	mov	sp, r7
 801c972:	bd80      	pop	{r7, pc}

0801c974 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801c974:	b580      	push	{r7, lr}
 801c976:	b084      	sub	sp, #16
 801c978:	af00      	add	r7, sp, #0
 801c97a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c980:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801c982:	68fb      	ldr	r3, [r7, #12]
 801c984:	795b      	ldrb	r3, [r3, #5]
 801c986:	2b01      	cmp	r3, #1
 801c988:	d00b      	beq.n	801c9a2 <dhcp_t2_timeout+0x2e>
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	795b      	ldrb	r3, [r3, #5]
 801c98e:	2b0a      	cmp	r3, #10
 801c990:	d007      	beq.n	801c9a2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801c992:	68fb      	ldr	r3, [r7, #12]
 801c994:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801c996:	2b05      	cmp	r3, #5
 801c998:	d003      	beq.n	801c9a2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801c99a:	68fb      	ldr	r3, [r7, #12]
 801c99c:	795b      	ldrb	r3, [r3, #5]
 801c99e:	2b04      	cmp	r3, #4
 801c9a0:	d117      	bne.n	801c9d2 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801c9a2:	6878      	ldr	r0, [r7, #4]
 801c9a4:	f000 fc00 	bl	801d1a8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801c9a8:	68fb      	ldr	r3, [r7, #12]
 801c9aa:	8a9b      	ldrh	r3, [r3, #20]
 801c9ac:	461a      	mov	r2, r3
 801c9ae:	68fb      	ldr	r3, [r7, #12]
 801c9b0:	8a5b      	ldrh	r3, [r3, #18]
 801c9b2:	1ad3      	subs	r3, r2, r3
 801c9b4:	2b01      	cmp	r3, #1
 801c9b6:	dd0c      	ble.n	801c9d2 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	8a9b      	ldrh	r3, [r3, #20]
 801c9bc:	461a      	mov	r2, r3
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	8a5b      	ldrh	r3, [r3, #18]
 801c9c2:	1ad3      	subs	r3, r2, r3
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	da00      	bge.n	801c9ca <dhcp_t2_timeout+0x56>
 801c9c8:	3301      	adds	r3, #1
 801c9ca:	105b      	asrs	r3, r3, #1
 801c9cc:	b29a      	uxth	r2, r3
 801c9ce:	68fb      	ldr	r3, [r7, #12]
 801c9d0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801c9d2:	bf00      	nop
 801c9d4:	3710      	adds	r7, #16
 801c9d6:	46bd      	mov	sp, r7
 801c9d8:	bd80      	pop	{r7, pc}
	...

0801c9dc <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801c9dc:	b580      	push	{r7, lr}
 801c9de:	b084      	sub	sp, #16
 801c9e0:	af00      	add	r7, sp, #0
 801c9e2:	6078      	str	r0, [r7, #4]
 801c9e4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c9ea:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801c9ec:	68fb      	ldr	r3, [r7, #12]
 801c9ee:	2200      	movs	r2, #0
 801c9f0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801c9f2:	68fb      	ldr	r3, [r7, #12]
 801c9f4:	2200      	movs	r2, #0
 801c9f6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801c9f8:	4b26      	ldr	r3, [pc, #152]	; (801ca94 <dhcp_handle_ack+0xb8>)
 801c9fa:	78db      	ldrb	r3, [r3, #3]
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	d003      	beq.n	801ca08 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801ca00:	4b25      	ldr	r3, [pc, #148]	; (801ca98 <dhcp_handle_ack+0xbc>)
 801ca02:	68da      	ldr	r2, [r3, #12]
 801ca04:	68fb      	ldr	r3, [r7, #12]
 801ca06:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801ca08:	4b22      	ldr	r3, [pc, #136]	; (801ca94 <dhcp_handle_ack+0xb8>)
 801ca0a:	791b      	ldrb	r3, [r3, #4]
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	d004      	beq.n	801ca1a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801ca10:	4b21      	ldr	r3, [pc, #132]	; (801ca98 <dhcp_handle_ack+0xbc>)
 801ca12:	691a      	ldr	r2, [r3, #16]
 801ca14:	68fb      	ldr	r3, [r7, #12]
 801ca16:	62da      	str	r2, [r3, #44]	; 0x2c
 801ca18:	e004      	b.n	801ca24 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801ca1a:	68fb      	ldr	r3, [r7, #12]
 801ca1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca1e:	085a      	lsrs	r2, r3, #1
 801ca20:	68fb      	ldr	r3, [r7, #12]
 801ca22:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801ca24:	4b1b      	ldr	r3, [pc, #108]	; (801ca94 <dhcp_handle_ack+0xb8>)
 801ca26:	795b      	ldrb	r3, [r3, #5]
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	d004      	beq.n	801ca36 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801ca2c:	4b1a      	ldr	r3, [pc, #104]	; (801ca98 <dhcp_handle_ack+0xbc>)
 801ca2e:	695a      	ldr	r2, [r3, #20]
 801ca30:	68fb      	ldr	r3, [r7, #12]
 801ca32:	631a      	str	r2, [r3, #48]	; 0x30
 801ca34:	e007      	b.n	801ca46 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801ca36:	68fb      	ldr	r3, [r7, #12]
 801ca38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ca3a:	4613      	mov	r3, r2
 801ca3c:	00db      	lsls	r3, r3, #3
 801ca3e:	1a9b      	subs	r3, r3, r2
 801ca40:	08da      	lsrs	r2, r3, #3
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801ca46:	683b      	ldr	r3, [r7, #0]
 801ca48:	691a      	ldr	r2, [r3, #16]
 801ca4a:	68fb      	ldr	r3, [r7, #12]
 801ca4c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801ca4e:	4b11      	ldr	r3, [pc, #68]	; (801ca94 <dhcp_handle_ack+0xb8>)
 801ca50:	799b      	ldrb	r3, [r3, #6]
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d00b      	beq.n	801ca6e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801ca56:	4b10      	ldr	r3, [pc, #64]	; (801ca98 <dhcp_handle_ack+0xbc>)
 801ca58:	699b      	ldr	r3, [r3, #24]
 801ca5a:	4618      	mov	r0, r3
 801ca5c:	f7f7 fead 	bl	80147ba <lwip_htonl>
 801ca60:	4602      	mov	r2, r0
 801ca62:	68fb      	ldr	r3, [r7, #12]
 801ca64:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801ca66:	68fb      	ldr	r3, [r7, #12]
 801ca68:	2201      	movs	r2, #1
 801ca6a:	71da      	strb	r2, [r3, #7]
 801ca6c:	e002      	b.n	801ca74 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801ca6e:	68fb      	ldr	r3, [r7, #12]
 801ca70:	2200      	movs	r2, #0
 801ca72:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801ca74:	4b07      	ldr	r3, [pc, #28]	; (801ca94 <dhcp_handle_ack+0xb8>)
 801ca76:	79db      	ldrb	r3, [r3, #7]
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	d007      	beq.n	801ca8c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801ca7c:	4b06      	ldr	r3, [pc, #24]	; (801ca98 <dhcp_handle_ack+0xbc>)
 801ca7e:	69db      	ldr	r3, [r3, #28]
 801ca80:	4618      	mov	r0, r3
 801ca82:	f7f7 fe9a 	bl	80147ba <lwip_htonl>
 801ca86:	4602      	mov	r2, r0
 801ca88:	68fb      	ldr	r3, [r7, #12]
 801ca8a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801ca8c:	bf00      	nop
 801ca8e:	3710      	adds	r7, #16
 801ca90:	46bd      	mov	sp, r7
 801ca92:	bd80      	pop	{r7, pc}
 801ca94:	20010374 	.word	0x20010374
 801ca98:	2001037c 	.word	0x2001037c

0801ca9c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801ca9c:	b580      	push	{r7, lr}
 801ca9e:	b084      	sub	sp, #16
 801caa0:	af00      	add	r7, sp, #0
 801caa2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	d109      	bne.n	801cabe <dhcp_start+0x22>
 801caaa:	4b37      	ldr	r3, [pc, #220]	; (801cb88 <dhcp_start+0xec>)
 801caac:	f240 22e7 	movw	r2, #743	; 0x2e7
 801cab0:	4936      	ldr	r1, [pc, #216]	; (801cb8c <dhcp_start+0xf0>)
 801cab2:	4837      	ldr	r0, [pc, #220]	; (801cb90 <dhcp_start+0xf4>)
 801cab4:	f004 fd9e 	bl	80215f4 <iprintf>
 801cab8:	f06f 030f 	mvn.w	r3, #15
 801cabc:	e060      	b.n	801cb80 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801cac4:	f003 0301 	and.w	r3, r3, #1
 801cac8:	2b00      	cmp	r3, #0
 801caca:	d109      	bne.n	801cae0 <dhcp_start+0x44>
 801cacc:	4b2e      	ldr	r3, [pc, #184]	; (801cb88 <dhcp_start+0xec>)
 801cace:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801cad2:	4930      	ldr	r1, [pc, #192]	; (801cb94 <dhcp_start+0xf8>)
 801cad4:	482e      	ldr	r0, [pc, #184]	; (801cb90 <dhcp_start+0xf4>)
 801cad6:	f004 fd8d 	bl	80215f4 <iprintf>
 801cada:	f06f 030f 	mvn.w	r3, #15
 801cade:	e04f      	b.n	801cb80 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cae4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801caea:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801caee:	d202      	bcs.n	801caf6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801caf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801caf4:	e044      	b.n	801cb80 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801caf6:	68fb      	ldr	r3, [r7, #12]
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d10d      	bne.n	801cb18 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801cafc:	2034      	movs	r0, #52	; 0x34
 801cafe:	f7f8 f97b 	bl	8014df8 <mem_malloc>
 801cb02:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801cb04:	68fb      	ldr	r3, [r7, #12]
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d102      	bne.n	801cb10 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801cb0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cb0e:	e037      	b.n	801cb80 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801cb10:	687b      	ldr	r3, [r7, #4]
 801cb12:	68fa      	ldr	r2, [r7, #12]
 801cb14:	629a      	str	r2, [r3, #40]	; 0x28
 801cb16:	e005      	b.n	801cb24 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801cb18:	68fb      	ldr	r3, [r7, #12]
 801cb1a:	791b      	ldrb	r3, [r3, #4]
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d001      	beq.n	801cb24 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801cb20:	f7ff fc90 	bl	801c444 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801cb24:	2234      	movs	r2, #52	; 0x34
 801cb26:	2100      	movs	r1, #0
 801cb28:	68f8      	ldr	r0, [r7, #12]
 801cb2a:	f004 fcb3 	bl	8021494 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801cb2e:	f7ff fc37 	bl	801c3a0 <dhcp_inc_pcb_refcount>
 801cb32:	4603      	mov	r3, r0
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	d002      	beq.n	801cb3e <dhcp_start+0xa2>
    return ERR_MEM;
 801cb38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cb3c:	e020      	b.n	801cb80 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801cb3e:	68fb      	ldr	r3, [r7, #12]
 801cb40:	2201      	movs	r2, #1
 801cb42:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801cb44:	687b      	ldr	r3, [r7, #4]
 801cb46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801cb4a:	f003 0304 	and.w	r3, r3, #4
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d105      	bne.n	801cb5e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801cb52:	2102      	movs	r1, #2
 801cb54:	68f8      	ldr	r0, [r7, #12]
 801cb56:	f000 fd13 	bl	801d580 <dhcp_set_state>
    return ERR_OK;
 801cb5a:	2300      	movs	r3, #0
 801cb5c:	e010      	b.n	801cb80 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801cb5e:	6878      	ldr	r0, [r7, #4]
 801cb60:	f000 f90a 	bl	801cd78 <dhcp_discover>
 801cb64:	4603      	mov	r3, r0
 801cb66:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801cb68:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	d005      	beq.n	801cb7c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801cb70:	6878      	ldr	r0, [r7, #4]
 801cb72:	f000 fc6b 	bl	801d44c <dhcp_release_and_stop>
    return ERR_MEM;
 801cb76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cb7a:	e001      	b.n	801cb80 <dhcp_start+0xe4>
  }
  return result;
 801cb7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801cb80:	4618      	mov	r0, r3
 801cb82:	3710      	adds	r7, #16
 801cb84:	46bd      	mov	sp, r7
 801cb86:	bd80      	pop	{r7, pc}
 801cb88:	0802495c 	.word	0x0802495c
 801cb8c:	08024a40 	.word	0x08024a40
 801cb90:	080249bc 	.word	0x080249bc
 801cb94:	08024a84 	.word	0x08024a84

0801cb98 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801cb98:	b580      	push	{r7, lr}
 801cb9a:	b084      	sub	sp, #16
 801cb9c:	af00      	add	r7, sp, #0
 801cb9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cba0:	687b      	ldr	r3, [r7, #4]
 801cba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cba4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801cba6:	68fb      	ldr	r3, [r7, #12]
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	d037      	beq.n	801cc1c <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 801cbac:	68fb      	ldr	r3, [r7, #12]
 801cbae:	795b      	ldrb	r3, [r3, #5]
 801cbb0:	2b0a      	cmp	r3, #10
 801cbb2:	d820      	bhi.n	801cbf6 <dhcp_network_changed+0x5e>
 801cbb4:	a201      	add	r2, pc, #4	; (adr r2, 801cbbc <dhcp_network_changed+0x24>)
 801cbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cbba:	bf00      	nop
 801cbbc:	0801cc21 	.word	0x0801cc21
 801cbc0:	0801cbf7 	.word	0x0801cbf7
 801cbc4:	0801cbf7 	.word	0x0801cbf7
 801cbc8:	0801cbe9 	.word	0x0801cbe9
 801cbcc:	0801cbe9 	.word	0x0801cbe9
 801cbd0:	0801cbe9 	.word	0x0801cbe9
 801cbd4:	0801cbf7 	.word	0x0801cbf7
 801cbd8:	0801cbf7 	.word	0x0801cbf7
 801cbdc:	0801cbf7 	.word	0x0801cbf7
 801cbe0:	0801cbf7 	.word	0x0801cbf7
 801cbe4:	0801cbe9 	.word	0x0801cbe9
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801cbe8:	68fb      	ldr	r3, [r7, #12]
 801cbea:	2200      	movs	r2, #0
 801cbec:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801cbee:	6878      	ldr	r0, [r7, #4]
 801cbf0:	f000 fb76 	bl	801d2e0 <dhcp_reboot>
      break;
 801cbf4:	e015      	b.n	801cc22 <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801cbf6:	68fb      	ldr	r3, [r7, #12]
 801cbf8:	795b      	ldrb	r3, [r3, #5]
 801cbfa:	2b0c      	cmp	r3, #12
 801cbfc:	d906      	bls.n	801cc0c <dhcp_network_changed+0x74>
 801cbfe:	4b0a      	ldr	r3, [pc, #40]	; (801cc28 <dhcp_network_changed+0x90>)
 801cc00:	f240 326d 	movw	r2, #877	; 0x36d
 801cc04:	4909      	ldr	r1, [pc, #36]	; (801cc2c <dhcp_network_changed+0x94>)
 801cc06:	480a      	ldr	r0, [pc, #40]	; (801cc30 <dhcp_network_changed+0x98>)
 801cc08:	f004 fcf4 	bl	80215f4 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801cc0c:	68fb      	ldr	r3, [r7, #12]
 801cc0e:	2200      	movs	r2, #0
 801cc10:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801cc12:	6878      	ldr	r0, [r7, #4]
 801cc14:	f000 f8b0 	bl	801cd78 <dhcp_discover>
      break;
 801cc18:	bf00      	nop
 801cc1a:	e002      	b.n	801cc22 <dhcp_network_changed+0x8a>
    return;
 801cc1c:	bf00      	nop
 801cc1e:	e000      	b.n	801cc22 <dhcp_network_changed+0x8a>
      break;
 801cc20:	bf00      	nop
  }
}
 801cc22:	3710      	adds	r7, #16
 801cc24:	46bd      	mov	sp, r7
 801cc26:	bd80      	pop	{r7, pc}
 801cc28:	0802495c 	.word	0x0802495c
 801cc2c:	08024aa8 	.word	0x08024aa8
 801cc30:	080249bc 	.word	0x080249bc

0801cc34 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801cc34:	b580      	push	{r7, lr}
 801cc36:	b084      	sub	sp, #16
 801cc38:	af00      	add	r7, sp, #0
 801cc3a:	6078      	str	r0, [r7, #4]
 801cc3c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801cc3e:	687b      	ldr	r3, [r7, #4]
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	d107      	bne.n	801cc54 <dhcp_arp_reply+0x20>
 801cc44:	4b0e      	ldr	r3, [pc, #56]	; (801cc80 <dhcp_arp_reply+0x4c>)
 801cc46:	f240 328b 	movw	r2, #907	; 0x38b
 801cc4a:	490e      	ldr	r1, [pc, #56]	; (801cc84 <dhcp_arp_reply+0x50>)
 801cc4c:	480e      	ldr	r0, [pc, #56]	; (801cc88 <dhcp_arp_reply+0x54>)
 801cc4e:	f004 fcd1 	bl	80215f4 <iprintf>
 801cc52:	e012      	b.n	801cc7a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc58:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801cc5a:	68fb      	ldr	r3, [r7, #12]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d00c      	beq.n	801cc7a <dhcp_arp_reply+0x46>
 801cc60:	68fb      	ldr	r3, [r7, #12]
 801cc62:	795b      	ldrb	r3, [r3, #5]
 801cc64:	2b08      	cmp	r3, #8
 801cc66:	d108      	bne.n	801cc7a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801cc68:	683b      	ldr	r3, [r7, #0]
 801cc6a:	681a      	ldr	r2, [r3, #0]
 801cc6c:	68fb      	ldr	r3, [r7, #12]
 801cc6e:	69db      	ldr	r3, [r3, #28]
 801cc70:	429a      	cmp	r2, r3
 801cc72:	d102      	bne.n	801cc7a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801cc74:	6878      	ldr	r0, [r7, #4]
 801cc76:	f000 f809 	bl	801cc8c <dhcp_decline>
    }
  }
}
 801cc7a:	3710      	adds	r7, #16
 801cc7c:	46bd      	mov	sp, r7
 801cc7e:	bd80      	pop	{r7, pc}
 801cc80:	0802495c 	.word	0x0802495c
 801cc84:	08024a40 	.word	0x08024a40
 801cc88:	080249bc 	.word	0x080249bc

0801cc8c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801cc8c:	b5b0      	push	{r4, r5, r7, lr}
 801cc8e:	b08a      	sub	sp, #40	; 0x28
 801cc90:	af02      	add	r7, sp, #8
 801cc92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cc94:	687b      	ldr	r3, [r7, #4]
 801cc96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc98:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801cc9a:	210c      	movs	r1, #12
 801cc9c:	69b8      	ldr	r0, [r7, #24]
 801cc9e:	f000 fc6f 	bl	801d580 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801cca2:	f107 030c 	add.w	r3, r7, #12
 801cca6:	2204      	movs	r2, #4
 801cca8:	69b9      	ldr	r1, [r7, #24]
 801ccaa:	6878      	ldr	r0, [r7, #4]
 801ccac:	f001 f8f2 	bl	801de94 <dhcp_create_msg>
 801ccb0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801ccb2:	697b      	ldr	r3, [r7, #20]
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d035      	beq.n	801cd24 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ccb8:	697b      	ldr	r3, [r7, #20]
 801ccba:	685b      	ldr	r3, [r3, #4]
 801ccbc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801ccbe:	89b8      	ldrh	r0, [r7, #12]
 801ccc0:	693b      	ldr	r3, [r7, #16]
 801ccc2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ccc6:	2304      	movs	r3, #4
 801ccc8:	2232      	movs	r2, #50	; 0x32
 801ccca:	f000 fc73 	bl	801d5b4 <dhcp_option>
 801ccce:	4603      	mov	r3, r0
 801ccd0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801ccd2:	89bc      	ldrh	r4, [r7, #12]
 801ccd4:	693b      	ldr	r3, [r7, #16]
 801ccd6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801ccda:	69bb      	ldr	r3, [r7, #24]
 801ccdc:	69db      	ldr	r3, [r3, #28]
 801ccde:	4618      	mov	r0, r3
 801cce0:	f7f7 fd6b 	bl	80147ba <lwip_htonl>
 801cce4:	4603      	mov	r3, r0
 801cce6:	461a      	mov	r2, r3
 801cce8:	4629      	mov	r1, r5
 801ccea:	4620      	mov	r0, r4
 801ccec:	f000 fcee 	bl	801d6cc <dhcp_option_long>
 801ccf0:	4603      	mov	r3, r0
 801ccf2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ccf4:	89b8      	ldrh	r0, [r7, #12]
 801ccf6:	693b      	ldr	r3, [r7, #16]
 801ccf8:	33f0      	adds	r3, #240	; 0xf0
 801ccfa:	697a      	ldr	r2, [r7, #20]
 801ccfc:	4619      	mov	r1, r3
 801ccfe:	f001 f99f 	bl	801e040 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801cd02:	4b19      	ldr	r3, [pc, #100]	; (801cd68 <dhcp_decline+0xdc>)
 801cd04:	6818      	ldr	r0, [r3, #0]
 801cd06:	4b19      	ldr	r3, [pc, #100]	; (801cd6c <dhcp_decline+0xe0>)
 801cd08:	9301      	str	r3, [sp, #4]
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	9300      	str	r3, [sp, #0]
 801cd0e:	2343      	movs	r3, #67	; 0x43
 801cd10:	4a17      	ldr	r2, [pc, #92]	; (801cd70 <dhcp_decline+0xe4>)
 801cd12:	6979      	ldr	r1, [r7, #20]
 801cd14:	f7ff f8be 	bl	801be94 <udp_sendto_if_src>
 801cd18:	4603      	mov	r3, r0
 801cd1a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801cd1c:	6978      	ldr	r0, [r7, #20]
 801cd1e:	f7f9 f905 	bl	8015f2c <pbuf_free>
 801cd22:	e001      	b.n	801cd28 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801cd24:	23ff      	movs	r3, #255	; 0xff
 801cd26:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801cd28:	69bb      	ldr	r3, [r7, #24]
 801cd2a:	799b      	ldrb	r3, [r3, #6]
 801cd2c:	2bff      	cmp	r3, #255	; 0xff
 801cd2e:	d005      	beq.n	801cd3c <dhcp_decline+0xb0>
    dhcp->tries++;
 801cd30:	69bb      	ldr	r3, [r7, #24]
 801cd32:	799b      	ldrb	r3, [r3, #6]
 801cd34:	3301      	adds	r3, #1
 801cd36:	b2da      	uxtb	r2, r3
 801cd38:	69bb      	ldr	r3, [r7, #24]
 801cd3a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801cd3c:	f242 7310 	movw	r3, #10000	; 0x2710
 801cd40:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801cd42:	89fb      	ldrh	r3, [r7, #14]
 801cd44:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801cd48:	4a0a      	ldr	r2, [pc, #40]	; (801cd74 <dhcp_decline+0xe8>)
 801cd4a:	fb82 1203 	smull	r1, r2, r2, r3
 801cd4e:	1152      	asrs	r2, r2, #5
 801cd50:	17db      	asrs	r3, r3, #31
 801cd52:	1ad3      	subs	r3, r2, r3
 801cd54:	b29a      	uxth	r2, r3
 801cd56:	69bb      	ldr	r3, [r7, #24]
 801cd58:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801cd5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801cd5e:	4618      	mov	r0, r3
 801cd60:	3720      	adds	r7, #32
 801cd62:	46bd      	mov	sp, r7
 801cd64:	bdb0      	pop	{r4, r5, r7, pc}
 801cd66:	bf00      	nop
 801cd68:	20009000 	.word	0x20009000
 801cd6c:	08025548 	.word	0x08025548
 801cd70:	0802554c 	.word	0x0802554c
 801cd74:	10624dd3 	.word	0x10624dd3

0801cd78 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801cd78:	b580      	push	{r7, lr}
 801cd7a:	b08a      	sub	sp, #40	; 0x28
 801cd7c:	af02      	add	r7, sp, #8
 801cd7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd84:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801cd86:	2300      	movs	r3, #0
 801cd88:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801cd8a:	69bb      	ldr	r3, [r7, #24]
 801cd8c:	2200      	movs	r2, #0
 801cd8e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801cd90:	2106      	movs	r1, #6
 801cd92:	69b8      	ldr	r0, [r7, #24]
 801cd94:	f000 fbf4 	bl	801d580 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801cd98:	f107 0308 	add.w	r3, r7, #8
 801cd9c:	2201      	movs	r2, #1
 801cd9e:	69b9      	ldr	r1, [r7, #24]
 801cda0:	6878      	ldr	r0, [r7, #4]
 801cda2:	f001 f877 	bl	801de94 <dhcp_create_msg>
 801cda6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801cda8:	693b      	ldr	r3, [r7, #16]
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d04b      	beq.n	801ce46 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801cdae:	693b      	ldr	r3, [r7, #16]
 801cdb0:	685b      	ldr	r3, [r3, #4]
 801cdb2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cdb4:	8938      	ldrh	r0, [r7, #8]
 801cdb6:	68fb      	ldr	r3, [r7, #12]
 801cdb8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cdbc:	2302      	movs	r3, #2
 801cdbe:	2239      	movs	r2, #57	; 0x39
 801cdc0:	f000 fbf8 	bl	801d5b4 <dhcp_option>
 801cdc4:	4603      	mov	r3, r0
 801cdc6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801cdc8:	8938      	ldrh	r0, [r7, #8]
 801cdca:	68fb      	ldr	r3, [r7, #12]
 801cdcc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801cdd4:	461a      	mov	r2, r3
 801cdd6:	f000 fc47 	bl	801d668 <dhcp_option_short>
 801cdda:	4603      	mov	r3, r0
 801cddc:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cdde:	8938      	ldrh	r0, [r7, #8]
 801cde0:	68fb      	ldr	r3, [r7, #12]
 801cde2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801cde6:	2303      	movs	r3, #3
 801cde8:	2237      	movs	r2, #55	; 0x37
 801cdea:	f000 fbe3 	bl	801d5b4 <dhcp_option>
 801cdee:	4603      	mov	r3, r0
 801cdf0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cdf2:	2300      	movs	r3, #0
 801cdf4:	77fb      	strb	r3, [r7, #31]
 801cdf6:	e00e      	b.n	801ce16 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801cdf8:	8938      	ldrh	r0, [r7, #8]
 801cdfa:	68fb      	ldr	r3, [r7, #12]
 801cdfc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ce00:	7ffb      	ldrb	r3, [r7, #31]
 801ce02:	4a29      	ldr	r2, [pc, #164]	; (801cea8 <dhcp_discover+0x130>)
 801ce04:	5cd3      	ldrb	r3, [r2, r3]
 801ce06:	461a      	mov	r2, r3
 801ce08:	f000 fc08 	bl	801d61c <dhcp_option_byte>
 801ce0c:	4603      	mov	r3, r0
 801ce0e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ce10:	7ffb      	ldrb	r3, [r7, #31]
 801ce12:	3301      	adds	r3, #1
 801ce14:	77fb      	strb	r3, [r7, #31]
 801ce16:	7ffb      	ldrb	r3, [r7, #31]
 801ce18:	2b02      	cmp	r3, #2
 801ce1a:	d9ed      	bls.n	801cdf8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ce1c:	8938      	ldrh	r0, [r7, #8]
 801ce1e:	68fb      	ldr	r3, [r7, #12]
 801ce20:	33f0      	adds	r3, #240	; 0xf0
 801ce22:	693a      	ldr	r2, [r7, #16]
 801ce24:	4619      	mov	r1, r3
 801ce26:	f001 f90b 	bl	801e040 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801ce2a:	4b20      	ldr	r3, [pc, #128]	; (801ceac <dhcp_discover+0x134>)
 801ce2c:	6818      	ldr	r0, [r3, #0]
 801ce2e:	4b20      	ldr	r3, [pc, #128]	; (801ceb0 <dhcp_discover+0x138>)
 801ce30:	9301      	str	r3, [sp, #4]
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	9300      	str	r3, [sp, #0]
 801ce36:	2343      	movs	r3, #67	; 0x43
 801ce38:	4a1e      	ldr	r2, [pc, #120]	; (801ceb4 <dhcp_discover+0x13c>)
 801ce3a:	6939      	ldr	r1, [r7, #16]
 801ce3c:	f7ff f82a 	bl	801be94 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801ce40:	6938      	ldr	r0, [r7, #16]
 801ce42:	f7f9 f873 	bl	8015f2c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801ce46:	69bb      	ldr	r3, [r7, #24]
 801ce48:	799b      	ldrb	r3, [r3, #6]
 801ce4a:	2bff      	cmp	r3, #255	; 0xff
 801ce4c:	d005      	beq.n	801ce5a <dhcp_discover+0xe2>
    dhcp->tries++;
 801ce4e:	69bb      	ldr	r3, [r7, #24]
 801ce50:	799b      	ldrb	r3, [r3, #6]
 801ce52:	3301      	adds	r3, #1
 801ce54:	b2da      	uxtb	r2, r3
 801ce56:	69bb      	ldr	r3, [r7, #24]
 801ce58:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801ce5a:	69bb      	ldr	r3, [r7, #24]
 801ce5c:	799b      	ldrb	r3, [r3, #6]
 801ce5e:	2b05      	cmp	r3, #5
 801ce60:	d80d      	bhi.n	801ce7e <dhcp_discover+0x106>
 801ce62:	69bb      	ldr	r3, [r7, #24]
 801ce64:	799b      	ldrb	r3, [r3, #6]
 801ce66:	461a      	mov	r2, r3
 801ce68:	2301      	movs	r3, #1
 801ce6a:	4093      	lsls	r3, r2
 801ce6c:	b29b      	uxth	r3, r3
 801ce6e:	461a      	mov	r2, r3
 801ce70:	0152      	lsls	r2, r2, #5
 801ce72:	1ad2      	subs	r2, r2, r3
 801ce74:	0092      	lsls	r2, r2, #2
 801ce76:	4413      	add	r3, r2
 801ce78:	00db      	lsls	r3, r3, #3
 801ce7a:	b29b      	uxth	r3, r3
 801ce7c:	e001      	b.n	801ce82 <dhcp_discover+0x10a>
 801ce7e:	f64e 2360 	movw	r3, #60000	; 0xea60
 801ce82:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ce84:	897b      	ldrh	r3, [r7, #10]
 801ce86:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ce8a:	4a0b      	ldr	r2, [pc, #44]	; (801ceb8 <dhcp_discover+0x140>)
 801ce8c:	fb82 1203 	smull	r1, r2, r2, r3
 801ce90:	1152      	asrs	r2, r2, #5
 801ce92:	17db      	asrs	r3, r3, #31
 801ce94:	1ad3      	subs	r3, r2, r3
 801ce96:	b29a      	uxth	r2, r3
 801ce98:	69bb      	ldr	r3, [r7, #24]
 801ce9a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ce9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801cea0:	4618      	mov	r0, r3
 801cea2:	3720      	adds	r7, #32
 801cea4:	46bd      	mov	sp, r7
 801cea6:	bd80      	pop	{r7, pc}
 801cea8:	20000040 	.word	0x20000040
 801ceac:	20009000 	.word	0x20009000
 801ceb0:	08025548 	.word	0x08025548
 801ceb4:	0802554c 	.word	0x0802554c
 801ceb8:	10624dd3 	.word	0x10624dd3

0801cebc <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801cebc:	b580      	push	{r7, lr}
 801cebe:	b088      	sub	sp, #32
 801cec0:	af00      	add	r7, sp, #0
 801cec2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d107      	bne.n	801ceda <dhcp_bind+0x1e>
 801ceca:	4b64      	ldr	r3, [pc, #400]	; (801d05c <dhcp_bind+0x1a0>)
 801cecc:	f240 4215 	movw	r2, #1045	; 0x415
 801ced0:	4963      	ldr	r1, [pc, #396]	; (801d060 <dhcp_bind+0x1a4>)
 801ced2:	4864      	ldr	r0, [pc, #400]	; (801d064 <dhcp_bind+0x1a8>)
 801ced4:	f004 fb8e 	bl	80215f4 <iprintf>
 801ced8:	e0bc      	b.n	801d054 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cede:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801cee0:	69bb      	ldr	r3, [r7, #24]
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d107      	bne.n	801cef6 <dhcp_bind+0x3a>
 801cee6:	4b5d      	ldr	r3, [pc, #372]	; (801d05c <dhcp_bind+0x1a0>)
 801cee8:	f240 4217 	movw	r2, #1047	; 0x417
 801ceec:	495e      	ldr	r1, [pc, #376]	; (801d068 <dhcp_bind+0x1ac>)
 801ceee:	485d      	ldr	r0, [pc, #372]	; (801d064 <dhcp_bind+0x1a8>)
 801cef0:	f004 fb80 	bl	80215f4 <iprintf>
 801cef4:	e0ae      	b.n	801d054 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801cef6:	69bb      	ldr	r3, [r7, #24]
 801cef8:	2200      	movs	r2, #0
 801cefa:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801cefc:	69bb      	ldr	r3, [r7, #24]
 801cefe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801cf04:	d019      	beq.n	801cf3a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801cf06:	69bb      	ldr	r3, [r7, #24]
 801cf08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf0a:	331e      	adds	r3, #30
 801cf0c:	4a57      	ldr	r2, [pc, #348]	; (801d06c <dhcp_bind+0x1b0>)
 801cf0e:	fba2 2303 	umull	r2, r3, r2, r3
 801cf12:	095b      	lsrs	r3, r3, #5
 801cf14:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801cf16:	69fb      	ldr	r3, [r7, #28]
 801cf18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cf1c:	d302      	bcc.n	801cf24 <dhcp_bind+0x68>
      timeout = 0xffff;
 801cf1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cf22:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801cf24:	69fb      	ldr	r3, [r7, #28]
 801cf26:	b29a      	uxth	r2, r3
 801cf28:	69bb      	ldr	r3, [r7, #24]
 801cf2a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801cf2c:	69bb      	ldr	r3, [r7, #24]
 801cf2e:	8a9b      	ldrh	r3, [r3, #20]
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d102      	bne.n	801cf3a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801cf34:	69bb      	ldr	r3, [r7, #24]
 801cf36:	2201      	movs	r2, #1
 801cf38:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801cf3a:	69bb      	ldr	r3, [r7, #24]
 801cf3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801cf42:	d01d      	beq.n	801cf80 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801cf44:	69bb      	ldr	r3, [r7, #24]
 801cf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf48:	331e      	adds	r3, #30
 801cf4a:	4a48      	ldr	r2, [pc, #288]	; (801d06c <dhcp_bind+0x1b0>)
 801cf4c:	fba2 2303 	umull	r2, r3, r2, r3
 801cf50:	095b      	lsrs	r3, r3, #5
 801cf52:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801cf54:	69fb      	ldr	r3, [r7, #28]
 801cf56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cf5a:	d302      	bcc.n	801cf62 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801cf5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cf60:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801cf62:	69fb      	ldr	r3, [r7, #28]
 801cf64:	b29a      	uxth	r2, r3
 801cf66:	69bb      	ldr	r3, [r7, #24]
 801cf68:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801cf6a:	69bb      	ldr	r3, [r7, #24]
 801cf6c:	895b      	ldrh	r3, [r3, #10]
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	d102      	bne.n	801cf78 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801cf72:	69bb      	ldr	r3, [r7, #24]
 801cf74:	2201      	movs	r2, #1
 801cf76:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801cf78:	69bb      	ldr	r3, [r7, #24]
 801cf7a:	895a      	ldrh	r2, [r3, #10]
 801cf7c:	69bb      	ldr	r3, [r7, #24]
 801cf7e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801cf80:	69bb      	ldr	r3, [r7, #24]
 801cf82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801cf88:	d01d      	beq.n	801cfc6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801cf8a:	69bb      	ldr	r3, [r7, #24]
 801cf8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf8e:	331e      	adds	r3, #30
 801cf90:	4a36      	ldr	r2, [pc, #216]	; (801d06c <dhcp_bind+0x1b0>)
 801cf92:	fba2 2303 	umull	r2, r3, r2, r3
 801cf96:	095b      	lsrs	r3, r3, #5
 801cf98:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801cf9a:	69fb      	ldr	r3, [r7, #28]
 801cf9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cfa0:	d302      	bcc.n	801cfa8 <dhcp_bind+0xec>
      timeout = 0xffff;
 801cfa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cfa6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801cfa8:	69fb      	ldr	r3, [r7, #28]
 801cfaa:	b29a      	uxth	r2, r3
 801cfac:	69bb      	ldr	r3, [r7, #24]
 801cfae:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801cfb0:	69bb      	ldr	r3, [r7, #24]
 801cfb2:	899b      	ldrh	r3, [r3, #12]
 801cfb4:	2b00      	cmp	r3, #0
 801cfb6:	d102      	bne.n	801cfbe <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801cfb8:	69bb      	ldr	r3, [r7, #24]
 801cfba:	2201      	movs	r2, #1
 801cfbc:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801cfbe:	69bb      	ldr	r3, [r7, #24]
 801cfc0:	899a      	ldrh	r2, [r3, #12]
 801cfc2:	69bb      	ldr	r3, [r7, #24]
 801cfc4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801cfc6:	69bb      	ldr	r3, [r7, #24]
 801cfc8:	895a      	ldrh	r2, [r3, #10]
 801cfca:	69bb      	ldr	r3, [r7, #24]
 801cfcc:	899b      	ldrh	r3, [r3, #12]
 801cfce:	429a      	cmp	r2, r3
 801cfd0:	d306      	bcc.n	801cfe0 <dhcp_bind+0x124>
 801cfd2:	69bb      	ldr	r3, [r7, #24]
 801cfd4:	899b      	ldrh	r3, [r3, #12]
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d002      	beq.n	801cfe0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801cfda:	69bb      	ldr	r3, [r7, #24]
 801cfdc:	2200      	movs	r2, #0
 801cfde:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801cfe0:	69bb      	ldr	r3, [r7, #24]
 801cfe2:	79db      	ldrb	r3, [r3, #7]
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	d003      	beq.n	801cff0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801cfe8:	69bb      	ldr	r3, [r7, #24]
 801cfea:	6a1b      	ldr	r3, [r3, #32]
 801cfec:	613b      	str	r3, [r7, #16]
 801cfee:	e014      	b.n	801d01a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801cff0:	69bb      	ldr	r3, [r7, #24]
 801cff2:	331c      	adds	r3, #28
 801cff4:	781b      	ldrb	r3, [r3, #0]
 801cff6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801cff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	db02      	blt.n	801d006 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801d000:	23ff      	movs	r3, #255	; 0xff
 801d002:	613b      	str	r3, [r7, #16]
 801d004:	e009      	b.n	801d01a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801d006:	7dfb      	ldrb	r3, [r7, #23]
 801d008:	2bbf      	cmp	r3, #191	; 0xbf
 801d00a:	d903      	bls.n	801d014 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801d00c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801d010:	613b      	str	r3, [r7, #16]
 801d012:	e002      	b.n	801d01a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801d014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d018:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801d01a:	69bb      	ldr	r3, [r7, #24]
 801d01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d01e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801d020:	68fb      	ldr	r3, [r7, #12]
 801d022:	2b00      	cmp	r3, #0
 801d024:	d108      	bne.n	801d038 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801d026:	69bb      	ldr	r3, [r7, #24]
 801d028:	69da      	ldr	r2, [r3, #28]
 801d02a:	693b      	ldr	r3, [r7, #16]
 801d02c:	4013      	ands	r3, r2
 801d02e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801d030:	68fb      	ldr	r3, [r7, #12]
 801d032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d036:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801d038:	210a      	movs	r1, #10
 801d03a:	69b8      	ldr	r0, [r7, #24]
 801d03c:	f000 faa0 	bl	801d580 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801d040:	69bb      	ldr	r3, [r7, #24]
 801d042:	f103 011c 	add.w	r1, r3, #28
 801d046:	f107 030c 	add.w	r3, r7, #12
 801d04a:	f107 0210 	add.w	r2, r7, #16
 801d04e:	6878      	ldr	r0, [r7, #4]
 801d050:	f7f8 fa52 	bl	80154f8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801d054:	3720      	adds	r7, #32
 801d056:	46bd      	mov	sp, r7
 801d058:	bd80      	pop	{r7, pc}
 801d05a:	bf00      	nop
 801d05c:	0802495c 	.word	0x0802495c
 801d060:	08024abc 	.word	0x08024abc
 801d064:	080249bc 	.word	0x080249bc
 801d068:	08024ad8 	.word	0x08024ad8
 801d06c:	88888889 	.word	0x88888889

0801d070 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801d070:	b580      	push	{r7, lr}
 801d072:	b08a      	sub	sp, #40	; 0x28
 801d074:	af02      	add	r7, sp, #8
 801d076:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d07c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801d07e:	2105      	movs	r1, #5
 801d080:	69b8      	ldr	r0, [r7, #24]
 801d082:	f000 fa7d 	bl	801d580 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d086:	f107 030c 	add.w	r3, r7, #12
 801d08a:	2203      	movs	r2, #3
 801d08c:	69b9      	ldr	r1, [r7, #24]
 801d08e:	6878      	ldr	r0, [r7, #4]
 801d090:	f000 ff00 	bl	801de94 <dhcp_create_msg>
 801d094:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801d096:	697b      	ldr	r3, [r7, #20]
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d04e      	beq.n	801d13a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d09c:	697b      	ldr	r3, [r7, #20]
 801d09e:	685b      	ldr	r3, [r3, #4]
 801d0a0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d0a2:	89b8      	ldrh	r0, [r7, #12]
 801d0a4:	693b      	ldr	r3, [r7, #16]
 801d0a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d0aa:	2302      	movs	r3, #2
 801d0ac:	2239      	movs	r2, #57	; 0x39
 801d0ae:	f000 fa81 	bl	801d5b4 <dhcp_option>
 801d0b2:	4603      	mov	r3, r0
 801d0b4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d0b6:	89b8      	ldrh	r0, [r7, #12]
 801d0b8:	693b      	ldr	r3, [r7, #16]
 801d0ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d0be:	687b      	ldr	r3, [r7, #4]
 801d0c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801d0c2:	461a      	mov	r2, r3
 801d0c4:	f000 fad0 	bl	801d668 <dhcp_option_short>
 801d0c8:	4603      	mov	r3, r0
 801d0ca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d0cc:	89b8      	ldrh	r0, [r7, #12]
 801d0ce:	693b      	ldr	r3, [r7, #16]
 801d0d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d0d4:	2303      	movs	r3, #3
 801d0d6:	2237      	movs	r2, #55	; 0x37
 801d0d8:	f000 fa6c 	bl	801d5b4 <dhcp_option>
 801d0dc:	4603      	mov	r3, r0
 801d0de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d0e0:	2300      	movs	r3, #0
 801d0e2:	77bb      	strb	r3, [r7, #30]
 801d0e4:	e00e      	b.n	801d104 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d0e6:	89b8      	ldrh	r0, [r7, #12]
 801d0e8:	693b      	ldr	r3, [r7, #16]
 801d0ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d0ee:	7fbb      	ldrb	r3, [r7, #30]
 801d0f0:	4a2a      	ldr	r2, [pc, #168]	; (801d19c <dhcp_renew+0x12c>)
 801d0f2:	5cd3      	ldrb	r3, [r2, r3]
 801d0f4:	461a      	mov	r2, r3
 801d0f6:	f000 fa91 	bl	801d61c <dhcp_option_byte>
 801d0fa:	4603      	mov	r3, r0
 801d0fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d0fe:	7fbb      	ldrb	r3, [r7, #30]
 801d100:	3301      	adds	r3, #1
 801d102:	77bb      	strb	r3, [r7, #30]
 801d104:	7fbb      	ldrb	r3, [r7, #30]
 801d106:	2b02      	cmp	r3, #2
 801d108:	d9ed      	bls.n	801d0e6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d10a:	89b8      	ldrh	r0, [r7, #12]
 801d10c:	693b      	ldr	r3, [r7, #16]
 801d10e:	33f0      	adds	r3, #240	; 0xf0
 801d110:	697a      	ldr	r2, [r7, #20]
 801d112:	4619      	mov	r1, r3
 801d114:	f000 ff94 	bl	801e040 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d118:	4b21      	ldr	r3, [pc, #132]	; (801d1a0 <dhcp_renew+0x130>)
 801d11a:	6818      	ldr	r0, [r3, #0]
 801d11c:	69bb      	ldr	r3, [r7, #24]
 801d11e:	f103 0218 	add.w	r2, r3, #24
 801d122:	687b      	ldr	r3, [r7, #4]
 801d124:	9300      	str	r3, [sp, #0]
 801d126:	2343      	movs	r3, #67	; 0x43
 801d128:	6979      	ldr	r1, [r7, #20]
 801d12a:	f7fe fe3f 	bl	801bdac <udp_sendto_if>
 801d12e:	4603      	mov	r3, r0
 801d130:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d132:	6978      	ldr	r0, [r7, #20]
 801d134:	f7f8 fefa 	bl	8015f2c <pbuf_free>
 801d138:	e001      	b.n	801d13e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d13a:	23ff      	movs	r3, #255	; 0xff
 801d13c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d13e:	69bb      	ldr	r3, [r7, #24]
 801d140:	799b      	ldrb	r3, [r3, #6]
 801d142:	2bff      	cmp	r3, #255	; 0xff
 801d144:	d005      	beq.n	801d152 <dhcp_renew+0xe2>
    dhcp->tries++;
 801d146:	69bb      	ldr	r3, [r7, #24]
 801d148:	799b      	ldrb	r3, [r3, #6]
 801d14a:	3301      	adds	r3, #1
 801d14c:	b2da      	uxtb	r2, r3
 801d14e:	69bb      	ldr	r3, [r7, #24]
 801d150:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801d152:	69bb      	ldr	r3, [r7, #24]
 801d154:	799b      	ldrb	r3, [r3, #6]
 801d156:	2b09      	cmp	r3, #9
 801d158:	d80a      	bhi.n	801d170 <dhcp_renew+0x100>
 801d15a:	69bb      	ldr	r3, [r7, #24]
 801d15c:	799b      	ldrb	r3, [r3, #6]
 801d15e:	b29b      	uxth	r3, r3
 801d160:	461a      	mov	r2, r3
 801d162:	0152      	lsls	r2, r2, #5
 801d164:	1ad2      	subs	r2, r2, r3
 801d166:	0092      	lsls	r2, r2, #2
 801d168:	4413      	add	r3, r2
 801d16a:	011b      	lsls	r3, r3, #4
 801d16c:	b29b      	uxth	r3, r3
 801d16e:	e001      	b.n	801d174 <dhcp_renew+0x104>
 801d170:	f644 6320 	movw	r3, #20000	; 0x4e20
 801d174:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d176:	89fb      	ldrh	r3, [r7, #14]
 801d178:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d17c:	4a09      	ldr	r2, [pc, #36]	; (801d1a4 <dhcp_renew+0x134>)
 801d17e:	fb82 1203 	smull	r1, r2, r2, r3
 801d182:	1152      	asrs	r2, r2, #5
 801d184:	17db      	asrs	r3, r3, #31
 801d186:	1ad3      	subs	r3, r2, r3
 801d188:	b29a      	uxth	r2, r3
 801d18a:	69bb      	ldr	r3, [r7, #24]
 801d18c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d18e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d192:	4618      	mov	r0, r3
 801d194:	3720      	adds	r7, #32
 801d196:	46bd      	mov	sp, r7
 801d198:	bd80      	pop	{r7, pc}
 801d19a:	bf00      	nop
 801d19c:	20000040 	.word	0x20000040
 801d1a0:	20009000 	.word	0x20009000
 801d1a4:	10624dd3 	.word	0x10624dd3

0801d1a8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801d1a8:	b580      	push	{r7, lr}
 801d1aa:	b08a      	sub	sp, #40	; 0x28
 801d1ac:	af02      	add	r7, sp, #8
 801d1ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d1b0:	687b      	ldr	r3, [r7, #4]
 801d1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d1b4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801d1b6:	2104      	movs	r1, #4
 801d1b8:	69b8      	ldr	r0, [r7, #24]
 801d1ba:	f000 f9e1 	bl	801d580 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d1be:	f107 030c 	add.w	r3, r7, #12
 801d1c2:	2203      	movs	r2, #3
 801d1c4:	69b9      	ldr	r1, [r7, #24]
 801d1c6:	6878      	ldr	r0, [r7, #4]
 801d1c8:	f000 fe64 	bl	801de94 <dhcp_create_msg>
 801d1cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801d1ce:	697b      	ldr	r3, [r7, #20]
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	d04c      	beq.n	801d26e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d1d4:	697b      	ldr	r3, [r7, #20]
 801d1d6:	685b      	ldr	r3, [r3, #4]
 801d1d8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d1da:	89b8      	ldrh	r0, [r7, #12]
 801d1dc:	693b      	ldr	r3, [r7, #16]
 801d1de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d1e2:	2302      	movs	r3, #2
 801d1e4:	2239      	movs	r2, #57	; 0x39
 801d1e6:	f000 f9e5 	bl	801d5b4 <dhcp_option>
 801d1ea:	4603      	mov	r3, r0
 801d1ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d1ee:	89b8      	ldrh	r0, [r7, #12]
 801d1f0:	693b      	ldr	r3, [r7, #16]
 801d1f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d1f6:	687b      	ldr	r3, [r7, #4]
 801d1f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801d1fa:	461a      	mov	r2, r3
 801d1fc:	f000 fa34 	bl	801d668 <dhcp_option_short>
 801d200:	4603      	mov	r3, r0
 801d202:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d204:	89b8      	ldrh	r0, [r7, #12]
 801d206:	693b      	ldr	r3, [r7, #16]
 801d208:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d20c:	2303      	movs	r3, #3
 801d20e:	2237      	movs	r2, #55	; 0x37
 801d210:	f000 f9d0 	bl	801d5b4 <dhcp_option>
 801d214:	4603      	mov	r3, r0
 801d216:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d218:	2300      	movs	r3, #0
 801d21a:	77bb      	strb	r3, [r7, #30]
 801d21c:	e00e      	b.n	801d23c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d21e:	89b8      	ldrh	r0, [r7, #12]
 801d220:	693b      	ldr	r3, [r7, #16]
 801d222:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d226:	7fbb      	ldrb	r3, [r7, #30]
 801d228:	4a29      	ldr	r2, [pc, #164]	; (801d2d0 <dhcp_rebind+0x128>)
 801d22a:	5cd3      	ldrb	r3, [r2, r3]
 801d22c:	461a      	mov	r2, r3
 801d22e:	f000 f9f5 	bl	801d61c <dhcp_option_byte>
 801d232:	4603      	mov	r3, r0
 801d234:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d236:	7fbb      	ldrb	r3, [r7, #30]
 801d238:	3301      	adds	r3, #1
 801d23a:	77bb      	strb	r3, [r7, #30]
 801d23c:	7fbb      	ldrb	r3, [r7, #30]
 801d23e:	2b02      	cmp	r3, #2
 801d240:	d9ed      	bls.n	801d21e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d242:	89b8      	ldrh	r0, [r7, #12]
 801d244:	693b      	ldr	r3, [r7, #16]
 801d246:	33f0      	adds	r3, #240	; 0xf0
 801d248:	697a      	ldr	r2, [r7, #20]
 801d24a:	4619      	mov	r1, r3
 801d24c:	f000 fef8 	bl	801e040 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d250:	4b20      	ldr	r3, [pc, #128]	; (801d2d4 <dhcp_rebind+0x12c>)
 801d252:	6818      	ldr	r0, [r3, #0]
 801d254:	687b      	ldr	r3, [r7, #4]
 801d256:	9300      	str	r3, [sp, #0]
 801d258:	2343      	movs	r3, #67	; 0x43
 801d25a:	4a1f      	ldr	r2, [pc, #124]	; (801d2d8 <dhcp_rebind+0x130>)
 801d25c:	6979      	ldr	r1, [r7, #20]
 801d25e:	f7fe fda5 	bl	801bdac <udp_sendto_if>
 801d262:	4603      	mov	r3, r0
 801d264:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d266:	6978      	ldr	r0, [r7, #20]
 801d268:	f7f8 fe60 	bl	8015f2c <pbuf_free>
 801d26c:	e001      	b.n	801d272 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d26e:	23ff      	movs	r3, #255	; 0xff
 801d270:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d272:	69bb      	ldr	r3, [r7, #24]
 801d274:	799b      	ldrb	r3, [r3, #6]
 801d276:	2bff      	cmp	r3, #255	; 0xff
 801d278:	d005      	beq.n	801d286 <dhcp_rebind+0xde>
    dhcp->tries++;
 801d27a:	69bb      	ldr	r3, [r7, #24]
 801d27c:	799b      	ldrb	r3, [r3, #6]
 801d27e:	3301      	adds	r3, #1
 801d280:	b2da      	uxtb	r2, r3
 801d282:	69bb      	ldr	r3, [r7, #24]
 801d284:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801d286:	69bb      	ldr	r3, [r7, #24]
 801d288:	799b      	ldrb	r3, [r3, #6]
 801d28a:	2b09      	cmp	r3, #9
 801d28c:	d80a      	bhi.n	801d2a4 <dhcp_rebind+0xfc>
 801d28e:	69bb      	ldr	r3, [r7, #24]
 801d290:	799b      	ldrb	r3, [r3, #6]
 801d292:	b29b      	uxth	r3, r3
 801d294:	461a      	mov	r2, r3
 801d296:	0152      	lsls	r2, r2, #5
 801d298:	1ad2      	subs	r2, r2, r3
 801d29a:	0092      	lsls	r2, r2, #2
 801d29c:	4413      	add	r3, r2
 801d29e:	00db      	lsls	r3, r3, #3
 801d2a0:	b29b      	uxth	r3, r3
 801d2a2:	e001      	b.n	801d2a8 <dhcp_rebind+0x100>
 801d2a4:	f242 7310 	movw	r3, #10000	; 0x2710
 801d2a8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d2aa:	89fb      	ldrh	r3, [r7, #14]
 801d2ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d2b0:	4a0a      	ldr	r2, [pc, #40]	; (801d2dc <dhcp_rebind+0x134>)
 801d2b2:	fb82 1203 	smull	r1, r2, r2, r3
 801d2b6:	1152      	asrs	r2, r2, #5
 801d2b8:	17db      	asrs	r3, r3, #31
 801d2ba:	1ad3      	subs	r3, r2, r3
 801d2bc:	b29a      	uxth	r2, r3
 801d2be:	69bb      	ldr	r3, [r7, #24]
 801d2c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d2c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d2c6:	4618      	mov	r0, r3
 801d2c8:	3720      	adds	r7, #32
 801d2ca:	46bd      	mov	sp, r7
 801d2cc:	bd80      	pop	{r7, pc}
 801d2ce:	bf00      	nop
 801d2d0:	20000040 	.word	0x20000040
 801d2d4:	20009000 	.word	0x20009000
 801d2d8:	0802554c 	.word	0x0802554c
 801d2dc:	10624dd3 	.word	0x10624dd3

0801d2e0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801d2e0:	b5b0      	push	{r4, r5, r7, lr}
 801d2e2:	b08a      	sub	sp, #40	; 0x28
 801d2e4:	af02      	add	r7, sp, #8
 801d2e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d2ec:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801d2ee:	2103      	movs	r1, #3
 801d2f0:	69b8      	ldr	r0, [r7, #24]
 801d2f2:	f000 f945 	bl	801d580 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801d2f6:	f107 030c 	add.w	r3, r7, #12
 801d2fa:	2203      	movs	r2, #3
 801d2fc:	69b9      	ldr	r1, [r7, #24]
 801d2fe:	6878      	ldr	r0, [r7, #4]
 801d300:	f000 fdc8 	bl	801de94 <dhcp_create_msg>
 801d304:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801d306:	697b      	ldr	r3, [r7, #20]
 801d308:	2b00      	cmp	r3, #0
 801d30a:	d066      	beq.n	801d3da <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d30c:	697b      	ldr	r3, [r7, #20]
 801d30e:	685b      	ldr	r3, [r3, #4]
 801d310:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d312:	89b8      	ldrh	r0, [r7, #12]
 801d314:	693b      	ldr	r3, [r7, #16]
 801d316:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d31a:	2302      	movs	r3, #2
 801d31c:	2239      	movs	r2, #57	; 0x39
 801d31e:	f000 f949 	bl	801d5b4 <dhcp_option>
 801d322:	4603      	mov	r3, r0
 801d324:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801d326:	89b8      	ldrh	r0, [r7, #12]
 801d328:	693b      	ldr	r3, [r7, #16]
 801d32a:	33f0      	adds	r3, #240	; 0xf0
 801d32c:	f44f 7210 	mov.w	r2, #576	; 0x240
 801d330:	4619      	mov	r1, r3
 801d332:	f000 f999 	bl	801d668 <dhcp_option_short>
 801d336:	4603      	mov	r3, r0
 801d338:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801d33a:	89b8      	ldrh	r0, [r7, #12]
 801d33c:	693b      	ldr	r3, [r7, #16]
 801d33e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d342:	2304      	movs	r3, #4
 801d344:	2232      	movs	r2, #50	; 0x32
 801d346:	f000 f935 	bl	801d5b4 <dhcp_option>
 801d34a:	4603      	mov	r3, r0
 801d34c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d34e:	89bc      	ldrh	r4, [r7, #12]
 801d350:	693b      	ldr	r3, [r7, #16]
 801d352:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801d356:	69bb      	ldr	r3, [r7, #24]
 801d358:	69db      	ldr	r3, [r3, #28]
 801d35a:	4618      	mov	r0, r3
 801d35c:	f7f7 fa2d 	bl	80147ba <lwip_htonl>
 801d360:	4603      	mov	r3, r0
 801d362:	461a      	mov	r2, r3
 801d364:	4629      	mov	r1, r5
 801d366:	4620      	mov	r0, r4
 801d368:	f000 f9b0 	bl	801d6cc <dhcp_option_long>
 801d36c:	4603      	mov	r3, r0
 801d36e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d370:	89b8      	ldrh	r0, [r7, #12]
 801d372:	693b      	ldr	r3, [r7, #16]
 801d374:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d378:	2303      	movs	r3, #3
 801d37a:	2237      	movs	r2, #55	; 0x37
 801d37c:	f000 f91a 	bl	801d5b4 <dhcp_option>
 801d380:	4603      	mov	r3, r0
 801d382:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d384:	2300      	movs	r3, #0
 801d386:	77bb      	strb	r3, [r7, #30]
 801d388:	e00e      	b.n	801d3a8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d38a:	89b8      	ldrh	r0, [r7, #12]
 801d38c:	693b      	ldr	r3, [r7, #16]
 801d38e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d392:	7fbb      	ldrb	r3, [r7, #30]
 801d394:	4a29      	ldr	r2, [pc, #164]	; (801d43c <dhcp_reboot+0x15c>)
 801d396:	5cd3      	ldrb	r3, [r2, r3]
 801d398:	461a      	mov	r2, r3
 801d39a:	f000 f93f 	bl	801d61c <dhcp_option_byte>
 801d39e:	4603      	mov	r3, r0
 801d3a0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d3a2:	7fbb      	ldrb	r3, [r7, #30]
 801d3a4:	3301      	adds	r3, #1
 801d3a6:	77bb      	strb	r3, [r7, #30]
 801d3a8:	7fbb      	ldrb	r3, [r7, #30]
 801d3aa:	2b02      	cmp	r3, #2
 801d3ac:	d9ed      	bls.n	801d38a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d3ae:	89b8      	ldrh	r0, [r7, #12]
 801d3b0:	693b      	ldr	r3, [r7, #16]
 801d3b2:	33f0      	adds	r3, #240	; 0xf0
 801d3b4:	697a      	ldr	r2, [r7, #20]
 801d3b6:	4619      	mov	r1, r3
 801d3b8:	f000 fe42 	bl	801e040 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d3bc:	4b20      	ldr	r3, [pc, #128]	; (801d440 <dhcp_reboot+0x160>)
 801d3be:	6818      	ldr	r0, [r3, #0]
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	9300      	str	r3, [sp, #0]
 801d3c4:	2343      	movs	r3, #67	; 0x43
 801d3c6:	4a1f      	ldr	r2, [pc, #124]	; (801d444 <dhcp_reboot+0x164>)
 801d3c8:	6979      	ldr	r1, [r7, #20]
 801d3ca:	f7fe fcef 	bl	801bdac <udp_sendto_if>
 801d3ce:	4603      	mov	r3, r0
 801d3d0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801d3d2:	6978      	ldr	r0, [r7, #20]
 801d3d4:	f7f8 fdaa 	bl	8015f2c <pbuf_free>
 801d3d8:	e001      	b.n	801d3de <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801d3da:	23ff      	movs	r3, #255	; 0xff
 801d3dc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801d3de:	69bb      	ldr	r3, [r7, #24]
 801d3e0:	799b      	ldrb	r3, [r3, #6]
 801d3e2:	2bff      	cmp	r3, #255	; 0xff
 801d3e4:	d005      	beq.n	801d3f2 <dhcp_reboot+0x112>
    dhcp->tries++;
 801d3e6:	69bb      	ldr	r3, [r7, #24]
 801d3e8:	799b      	ldrb	r3, [r3, #6]
 801d3ea:	3301      	adds	r3, #1
 801d3ec:	b2da      	uxtb	r2, r3
 801d3ee:	69bb      	ldr	r3, [r7, #24]
 801d3f0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801d3f2:	69bb      	ldr	r3, [r7, #24]
 801d3f4:	799b      	ldrb	r3, [r3, #6]
 801d3f6:	2b09      	cmp	r3, #9
 801d3f8:	d80a      	bhi.n	801d410 <dhcp_reboot+0x130>
 801d3fa:	69bb      	ldr	r3, [r7, #24]
 801d3fc:	799b      	ldrb	r3, [r3, #6]
 801d3fe:	b29b      	uxth	r3, r3
 801d400:	461a      	mov	r2, r3
 801d402:	0152      	lsls	r2, r2, #5
 801d404:	1ad2      	subs	r2, r2, r3
 801d406:	0092      	lsls	r2, r2, #2
 801d408:	4413      	add	r3, r2
 801d40a:	00db      	lsls	r3, r3, #3
 801d40c:	b29b      	uxth	r3, r3
 801d40e:	e001      	b.n	801d414 <dhcp_reboot+0x134>
 801d410:	f242 7310 	movw	r3, #10000	; 0x2710
 801d414:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d416:	89fb      	ldrh	r3, [r7, #14]
 801d418:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d41c:	4a0a      	ldr	r2, [pc, #40]	; (801d448 <dhcp_reboot+0x168>)
 801d41e:	fb82 1203 	smull	r1, r2, r2, r3
 801d422:	1152      	asrs	r2, r2, #5
 801d424:	17db      	asrs	r3, r3, #31
 801d426:	1ad3      	subs	r3, r2, r3
 801d428:	b29a      	uxth	r2, r3
 801d42a:	69bb      	ldr	r3, [r7, #24]
 801d42c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d42e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d432:	4618      	mov	r0, r3
 801d434:	3720      	adds	r7, #32
 801d436:	46bd      	mov	sp, r7
 801d438:	bdb0      	pop	{r4, r5, r7, pc}
 801d43a:	bf00      	nop
 801d43c:	20000040 	.word	0x20000040
 801d440:	20009000 	.word	0x20009000
 801d444:	0802554c 	.word	0x0802554c
 801d448:	10624dd3 	.word	0x10624dd3

0801d44c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801d44c:	b5b0      	push	{r4, r5, r7, lr}
 801d44e:	b08a      	sub	sp, #40	; 0x28
 801d450:	af02      	add	r7, sp, #8
 801d452:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d458:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801d45a:	69fb      	ldr	r3, [r7, #28]
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	f000 8084 	beq.w	801d56a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801d462:	69fb      	ldr	r3, [r7, #28]
 801d464:	795b      	ldrb	r3, [r3, #5]
 801d466:	2b00      	cmp	r3, #0
 801d468:	f000 8081 	beq.w	801d56e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801d46c:	69fb      	ldr	r3, [r7, #28]
 801d46e:	699b      	ldr	r3, [r3, #24]
 801d470:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801d472:	69fb      	ldr	r3, [r7, #28]
 801d474:	2200      	movs	r2, #0
 801d476:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801d478:	69fb      	ldr	r3, [r7, #28]
 801d47a:	2200      	movs	r2, #0
 801d47c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801d47e:	69fb      	ldr	r3, [r7, #28]
 801d480:	2200      	movs	r2, #0
 801d482:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801d484:	69fb      	ldr	r3, [r7, #28]
 801d486:	2200      	movs	r2, #0
 801d488:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801d48a:	69fb      	ldr	r3, [r7, #28]
 801d48c:	2200      	movs	r2, #0
 801d48e:	631a      	str	r2, [r3, #48]	; 0x30
 801d490:	69fb      	ldr	r3, [r7, #28]
 801d492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d494:	69fb      	ldr	r3, [r7, #28]
 801d496:	62da      	str	r2, [r3, #44]	; 0x2c
 801d498:	69fb      	ldr	r3, [r7, #28]
 801d49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d49c:	69fb      	ldr	r3, [r7, #28]
 801d49e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801d4a0:	69fb      	ldr	r3, [r7, #28]
 801d4a2:	2200      	movs	r2, #0
 801d4a4:	829a      	strh	r2, [r3, #20]
 801d4a6:	69fb      	ldr	r3, [r7, #28]
 801d4a8:	8a9a      	ldrh	r2, [r3, #20]
 801d4aa:	69fb      	ldr	r3, [r7, #28]
 801d4ac:	825a      	strh	r2, [r3, #18]
 801d4ae:	69fb      	ldr	r3, [r7, #28]
 801d4b0:	8a5a      	ldrh	r2, [r3, #18]
 801d4b2:	69fb      	ldr	r3, [r7, #28]
 801d4b4:	821a      	strh	r2, [r3, #16]
 801d4b6:	69fb      	ldr	r3, [r7, #28]
 801d4b8:	8a1a      	ldrh	r2, [r3, #16]
 801d4ba:	69fb      	ldr	r3, [r7, #28]
 801d4bc:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801d4be:	6878      	ldr	r0, [r7, #4]
 801d4c0:	f000 fdec 	bl	801e09c <dhcp_supplied_address>
 801d4c4:	4603      	mov	r3, r0
 801d4c6:	2b00      	cmp	r3, #0
 801d4c8:	d03b      	beq.n	801d542 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801d4ca:	f107 030e 	add.w	r3, r7, #14
 801d4ce:	2207      	movs	r2, #7
 801d4d0:	69f9      	ldr	r1, [r7, #28]
 801d4d2:	6878      	ldr	r0, [r7, #4]
 801d4d4:	f000 fcde 	bl	801de94 <dhcp_create_msg>
 801d4d8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801d4da:	69bb      	ldr	r3, [r7, #24]
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	d030      	beq.n	801d542 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801d4e0:	69bb      	ldr	r3, [r7, #24]
 801d4e2:	685b      	ldr	r3, [r3, #4]
 801d4e4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801d4e6:	89f8      	ldrh	r0, [r7, #14]
 801d4e8:	697b      	ldr	r3, [r7, #20]
 801d4ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d4ee:	2304      	movs	r3, #4
 801d4f0:	2236      	movs	r2, #54	; 0x36
 801d4f2:	f000 f85f 	bl	801d5b4 <dhcp_option>
 801d4f6:	4603      	mov	r3, r0
 801d4f8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801d4fa:	89fc      	ldrh	r4, [r7, #14]
 801d4fc:	697b      	ldr	r3, [r7, #20]
 801d4fe:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801d502:	693b      	ldr	r3, [r7, #16]
 801d504:	4618      	mov	r0, r3
 801d506:	f7f7 f958 	bl	80147ba <lwip_htonl>
 801d50a:	4603      	mov	r3, r0
 801d50c:	461a      	mov	r2, r3
 801d50e:	4629      	mov	r1, r5
 801d510:	4620      	mov	r0, r4
 801d512:	f000 f8db 	bl	801d6cc <dhcp_option_long>
 801d516:	4603      	mov	r3, r0
 801d518:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d51a:	89f8      	ldrh	r0, [r7, #14]
 801d51c:	697b      	ldr	r3, [r7, #20]
 801d51e:	33f0      	adds	r3, #240	; 0xf0
 801d520:	69ba      	ldr	r2, [r7, #24]
 801d522:	4619      	mov	r1, r3
 801d524:	f000 fd8c 	bl	801e040 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801d528:	4b13      	ldr	r3, [pc, #76]	; (801d578 <dhcp_release_and_stop+0x12c>)
 801d52a:	6818      	ldr	r0, [r3, #0]
 801d52c:	f107 0210 	add.w	r2, r7, #16
 801d530:	687b      	ldr	r3, [r7, #4]
 801d532:	9300      	str	r3, [sp, #0]
 801d534:	2343      	movs	r3, #67	; 0x43
 801d536:	69b9      	ldr	r1, [r7, #24]
 801d538:	f7fe fc38 	bl	801bdac <udp_sendto_if>
      pbuf_free(p_out);
 801d53c:	69b8      	ldr	r0, [r7, #24]
 801d53e:	f7f8 fcf5 	bl	8015f2c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801d542:	4b0e      	ldr	r3, [pc, #56]	; (801d57c <dhcp_release_and_stop+0x130>)
 801d544:	4a0d      	ldr	r2, [pc, #52]	; (801d57c <dhcp_release_and_stop+0x130>)
 801d546:	490d      	ldr	r1, [pc, #52]	; (801d57c <dhcp_release_and_stop+0x130>)
 801d548:	6878      	ldr	r0, [r7, #4]
 801d54a:	f7f7 ffd5 	bl	80154f8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801d54e:	2100      	movs	r1, #0
 801d550:	69f8      	ldr	r0, [r7, #28]
 801d552:	f000 f815 	bl	801d580 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801d556:	69fb      	ldr	r3, [r7, #28]
 801d558:	791b      	ldrb	r3, [r3, #4]
 801d55a:	2b00      	cmp	r3, #0
 801d55c:	d008      	beq.n	801d570 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801d55e:	f7fe ff71 	bl	801c444 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801d562:	69fb      	ldr	r3, [r7, #28]
 801d564:	2200      	movs	r2, #0
 801d566:	711a      	strb	r2, [r3, #4]
 801d568:	e002      	b.n	801d570 <dhcp_release_and_stop+0x124>
    return;
 801d56a:	bf00      	nop
 801d56c:	e000      	b.n	801d570 <dhcp_release_and_stop+0x124>
    return;
 801d56e:	bf00      	nop
  }
}
 801d570:	3720      	adds	r7, #32
 801d572:	46bd      	mov	sp, r7
 801d574:	bdb0      	pop	{r4, r5, r7, pc}
 801d576:	bf00      	nop
 801d578:	20009000 	.word	0x20009000
 801d57c:	08025548 	.word	0x08025548

0801d580 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801d580:	b480      	push	{r7}
 801d582:	b083      	sub	sp, #12
 801d584:	af00      	add	r7, sp, #0
 801d586:	6078      	str	r0, [r7, #4]
 801d588:	460b      	mov	r3, r1
 801d58a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801d58c:	687b      	ldr	r3, [r7, #4]
 801d58e:	795b      	ldrb	r3, [r3, #5]
 801d590:	78fa      	ldrb	r2, [r7, #3]
 801d592:	429a      	cmp	r2, r3
 801d594:	d008      	beq.n	801d5a8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801d596:	687b      	ldr	r3, [r7, #4]
 801d598:	78fa      	ldrb	r2, [r7, #3]
 801d59a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	2200      	movs	r2, #0
 801d5a0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	2200      	movs	r2, #0
 801d5a6:	811a      	strh	r2, [r3, #8]
  }
}
 801d5a8:	bf00      	nop
 801d5aa:	370c      	adds	r7, #12
 801d5ac:	46bd      	mov	sp, r7
 801d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5b2:	4770      	bx	lr

0801d5b4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801d5b4:	b580      	push	{r7, lr}
 801d5b6:	b082      	sub	sp, #8
 801d5b8:	af00      	add	r7, sp, #0
 801d5ba:	6039      	str	r1, [r7, #0]
 801d5bc:	4611      	mov	r1, r2
 801d5be:	461a      	mov	r2, r3
 801d5c0:	4603      	mov	r3, r0
 801d5c2:	80fb      	strh	r3, [r7, #6]
 801d5c4:	460b      	mov	r3, r1
 801d5c6:	717b      	strb	r3, [r7, #5]
 801d5c8:	4613      	mov	r3, r2
 801d5ca:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801d5cc:	88fa      	ldrh	r2, [r7, #6]
 801d5ce:	793b      	ldrb	r3, [r7, #4]
 801d5d0:	4413      	add	r3, r2
 801d5d2:	3302      	adds	r3, #2
 801d5d4:	2b44      	cmp	r3, #68	; 0x44
 801d5d6:	d906      	bls.n	801d5e6 <dhcp_option+0x32>
 801d5d8:	4b0d      	ldr	r3, [pc, #52]	; (801d610 <dhcp_option+0x5c>)
 801d5da:	f240 529a 	movw	r2, #1434	; 0x59a
 801d5de:	490d      	ldr	r1, [pc, #52]	; (801d614 <dhcp_option+0x60>)
 801d5e0:	480d      	ldr	r0, [pc, #52]	; (801d618 <dhcp_option+0x64>)
 801d5e2:	f004 f807 	bl	80215f4 <iprintf>
  options[options_out_len++] = option_type;
 801d5e6:	88fb      	ldrh	r3, [r7, #6]
 801d5e8:	1c5a      	adds	r2, r3, #1
 801d5ea:	80fa      	strh	r2, [r7, #6]
 801d5ec:	461a      	mov	r2, r3
 801d5ee:	683b      	ldr	r3, [r7, #0]
 801d5f0:	4413      	add	r3, r2
 801d5f2:	797a      	ldrb	r2, [r7, #5]
 801d5f4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801d5f6:	88fb      	ldrh	r3, [r7, #6]
 801d5f8:	1c5a      	adds	r2, r3, #1
 801d5fa:	80fa      	strh	r2, [r7, #6]
 801d5fc:	461a      	mov	r2, r3
 801d5fe:	683b      	ldr	r3, [r7, #0]
 801d600:	4413      	add	r3, r2
 801d602:	793a      	ldrb	r2, [r7, #4]
 801d604:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d606:	88fb      	ldrh	r3, [r7, #6]
}
 801d608:	4618      	mov	r0, r3
 801d60a:	3708      	adds	r7, #8
 801d60c:	46bd      	mov	sp, r7
 801d60e:	bd80      	pop	{r7, pc}
 801d610:	0802495c 	.word	0x0802495c
 801d614:	08024af0 	.word	0x08024af0
 801d618:	080249bc 	.word	0x080249bc

0801d61c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801d61c:	b580      	push	{r7, lr}
 801d61e:	b082      	sub	sp, #8
 801d620:	af00      	add	r7, sp, #0
 801d622:	4603      	mov	r3, r0
 801d624:	6039      	str	r1, [r7, #0]
 801d626:	80fb      	strh	r3, [r7, #6]
 801d628:	4613      	mov	r3, r2
 801d62a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801d62c:	88fb      	ldrh	r3, [r7, #6]
 801d62e:	2b43      	cmp	r3, #67	; 0x43
 801d630:	d906      	bls.n	801d640 <dhcp_option_byte+0x24>
 801d632:	4b0a      	ldr	r3, [pc, #40]	; (801d65c <dhcp_option_byte+0x40>)
 801d634:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801d638:	4909      	ldr	r1, [pc, #36]	; (801d660 <dhcp_option_byte+0x44>)
 801d63a:	480a      	ldr	r0, [pc, #40]	; (801d664 <dhcp_option_byte+0x48>)
 801d63c:	f003 ffda 	bl	80215f4 <iprintf>
  options[options_out_len++] = value;
 801d640:	88fb      	ldrh	r3, [r7, #6]
 801d642:	1c5a      	adds	r2, r3, #1
 801d644:	80fa      	strh	r2, [r7, #6]
 801d646:	461a      	mov	r2, r3
 801d648:	683b      	ldr	r3, [r7, #0]
 801d64a:	4413      	add	r3, r2
 801d64c:	797a      	ldrb	r2, [r7, #5]
 801d64e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d650:	88fb      	ldrh	r3, [r7, #6]
}
 801d652:	4618      	mov	r0, r3
 801d654:	3708      	adds	r7, #8
 801d656:	46bd      	mov	sp, r7
 801d658:	bd80      	pop	{r7, pc}
 801d65a:	bf00      	nop
 801d65c:	0802495c 	.word	0x0802495c
 801d660:	08024b34 	.word	0x08024b34
 801d664:	080249bc 	.word	0x080249bc

0801d668 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801d668:	b580      	push	{r7, lr}
 801d66a:	b082      	sub	sp, #8
 801d66c:	af00      	add	r7, sp, #0
 801d66e:	4603      	mov	r3, r0
 801d670:	6039      	str	r1, [r7, #0]
 801d672:	80fb      	strh	r3, [r7, #6]
 801d674:	4613      	mov	r3, r2
 801d676:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801d678:	88fb      	ldrh	r3, [r7, #6]
 801d67a:	3302      	adds	r3, #2
 801d67c:	2b44      	cmp	r3, #68	; 0x44
 801d67e:	d906      	bls.n	801d68e <dhcp_option_short+0x26>
 801d680:	4b0f      	ldr	r3, [pc, #60]	; (801d6c0 <dhcp_option_short+0x58>)
 801d682:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801d686:	490f      	ldr	r1, [pc, #60]	; (801d6c4 <dhcp_option_short+0x5c>)
 801d688:	480f      	ldr	r0, [pc, #60]	; (801d6c8 <dhcp_option_short+0x60>)
 801d68a:	f003 ffb3 	bl	80215f4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801d68e:	88bb      	ldrh	r3, [r7, #4]
 801d690:	0a1b      	lsrs	r3, r3, #8
 801d692:	b29a      	uxth	r2, r3
 801d694:	88fb      	ldrh	r3, [r7, #6]
 801d696:	1c59      	adds	r1, r3, #1
 801d698:	80f9      	strh	r1, [r7, #6]
 801d69a:	4619      	mov	r1, r3
 801d69c:	683b      	ldr	r3, [r7, #0]
 801d69e:	440b      	add	r3, r1
 801d6a0:	b2d2      	uxtb	r2, r2
 801d6a2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801d6a4:	88fb      	ldrh	r3, [r7, #6]
 801d6a6:	1c5a      	adds	r2, r3, #1
 801d6a8:	80fa      	strh	r2, [r7, #6]
 801d6aa:	461a      	mov	r2, r3
 801d6ac:	683b      	ldr	r3, [r7, #0]
 801d6ae:	4413      	add	r3, r2
 801d6b0:	88ba      	ldrh	r2, [r7, #4]
 801d6b2:	b2d2      	uxtb	r2, r2
 801d6b4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d6b6:	88fb      	ldrh	r3, [r7, #6]
}
 801d6b8:	4618      	mov	r0, r3
 801d6ba:	3708      	adds	r7, #8
 801d6bc:	46bd      	mov	sp, r7
 801d6be:	bd80      	pop	{r7, pc}
 801d6c0:	0802495c 	.word	0x0802495c
 801d6c4:	08024b6c 	.word	0x08024b6c
 801d6c8:	080249bc 	.word	0x080249bc

0801d6cc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801d6cc:	b580      	push	{r7, lr}
 801d6ce:	b084      	sub	sp, #16
 801d6d0:	af00      	add	r7, sp, #0
 801d6d2:	4603      	mov	r3, r0
 801d6d4:	60b9      	str	r1, [r7, #8]
 801d6d6:	607a      	str	r2, [r7, #4]
 801d6d8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801d6da:	89fb      	ldrh	r3, [r7, #14]
 801d6dc:	3304      	adds	r3, #4
 801d6de:	2b44      	cmp	r3, #68	; 0x44
 801d6e0:	d906      	bls.n	801d6f0 <dhcp_option_long+0x24>
 801d6e2:	4b19      	ldr	r3, [pc, #100]	; (801d748 <dhcp_option_long+0x7c>)
 801d6e4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801d6e8:	4918      	ldr	r1, [pc, #96]	; (801d74c <dhcp_option_long+0x80>)
 801d6ea:	4819      	ldr	r0, [pc, #100]	; (801d750 <dhcp_option_long+0x84>)
 801d6ec:	f003 ff82 	bl	80215f4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	0e1a      	lsrs	r2, r3, #24
 801d6f4:	89fb      	ldrh	r3, [r7, #14]
 801d6f6:	1c59      	adds	r1, r3, #1
 801d6f8:	81f9      	strh	r1, [r7, #14]
 801d6fa:	4619      	mov	r1, r3
 801d6fc:	68bb      	ldr	r3, [r7, #8]
 801d6fe:	440b      	add	r3, r1
 801d700:	b2d2      	uxtb	r2, r2
 801d702:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	0c1a      	lsrs	r2, r3, #16
 801d708:	89fb      	ldrh	r3, [r7, #14]
 801d70a:	1c59      	adds	r1, r3, #1
 801d70c:	81f9      	strh	r1, [r7, #14]
 801d70e:	4619      	mov	r1, r3
 801d710:	68bb      	ldr	r3, [r7, #8]
 801d712:	440b      	add	r3, r1
 801d714:	b2d2      	uxtb	r2, r2
 801d716:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	0a1a      	lsrs	r2, r3, #8
 801d71c:	89fb      	ldrh	r3, [r7, #14]
 801d71e:	1c59      	adds	r1, r3, #1
 801d720:	81f9      	strh	r1, [r7, #14]
 801d722:	4619      	mov	r1, r3
 801d724:	68bb      	ldr	r3, [r7, #8]
 801d726:	440b      	add	r3, r1
 801d728:	b2d2      	uxtb	r2, r2
 801d72a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801d72c:	89fb      	ldrh	r3, [r7, #14]
 801d72e:	1c5a      	adds	r2, r3, #1
 801d730:	81fa      	strh	r2, [r7, #14]
 801d732:	461a      	mov	r2, r3
 801d734:	68bb      	ldr	r3, [r7, #8]
 801d736:	4413      	add	r3, r2
 801d738:	687a      	ldr	r2, [r7, #4]
 801d73a:	b2d2      	uxtb	r2, r2
 801d73c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801d73e:	89fb      	ldrh	r3, [r7, #14]
}
 801d740:	4618      	mov	r0, r3
 801d742:	3710      	adds	r7, #16
 801d744:	46bd      	mov	sp, r7
 801d746:	bd80      	pop	{r7, pc}
 801d748:	0802495c 	.word	0x0802495c
 801d74c:	08024ba8 	.word	0x08024ba8
 801d750:	080249bc 	.word	0x080249bc

0801d754 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801d754:	b580      	push	{r7, lr}
 801d756:	b090      	sub	sp, #64	; 0x40
 801d758:	af00      	add	r7, sp, #0
 801d75a:	6078      	str	r0, [r7, #4]
 801d75c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801d75e:	2300      	movs	r3, #0
 801d760:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801d762:	2300      	movs	r3, #0
 801d764:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801d766:	2208      	movs	r2, #8
 801d768:	2100      	movs	r1, #0
 801d76a:	48be      	ldr	r0, [pc, #760]	; (801da64 <dhcp_parse_reply+0x310>)
 801d76c:	f003 fe92 	bl	8021494 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	895b      	ldrh	r3, [r3, #10]
 801d774:	2b2b      	cmp	r3, #43	; 0x2b
 801d776:	d802      	bhi.n	801d77e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801d778:	f06f 0301 	mvn.w	r3, #1
 801d77c:	e2a8      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	685b      	ldr	r3, [r3, #4]
 801d782:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801d784:	23f0      	movs	r3, #240	; 0xf0
 801d786:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	891b      	ldrh	r3, [r3, #8]
 801d78c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801d78e:	687b      	ldr	r3, [r7, #4]
 801d790:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801d792:	e00c      	b.n	801d7ae <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801d794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d796:	895b      	ldrh	r3, [r3, #10]
 801d798:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d79a:	1ad3      	subs	r3, r2, r3
 801d79c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801d79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7a0:	895b      	ldrh	r3, [r3, #10]
 801d7a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801d7a4:	1ad3      	subs	r3, r2, r3
 801d7a6:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801d7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7aa:	681b      	ldr	r3, [r3, #0]
 801d7ac:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801d7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7b0:	2b00      	cmp	r3, #0
 801d7b2:	d004      	beq.n	801d7be <dhcp_parse_reply+0x6a>
 801d7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7b6:	895b      	ldrh	r3, [r3, #10]
 801d7b8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801d7ba:	429a      	cmp	r2, r3
 801d7bc:	d2ea      	bcs.n	801d794 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801d7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	d102      	bne.n	801d7ca <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801d7c4:	f06f 0301 	mvn.w	r3, #1
 801d7c8:	e282      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 801d7ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801d7cc:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801d7ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801d7d0:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801d7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7d4:	685b      	ldr	r3, [r3, #4]
 801d7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801d7d8:	e23a      	b.n	801dc50 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 801d7da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d7dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d7de:	4413      	add	r3, r2
 801d7e0:	781b      	ldrb	r3, [r3, #0]
 801d7e2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801d7e4:	2300      	movs	r3, #0
 801d7e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801d7ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d7ee:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801d7f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d7f2:	3302      	adds	r3, #2
 801d7f4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801d7f6:	8bfa      	ldrh	r2, [r7, #30]
 801d7f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d7fa:	429a      	cmp	r2, r3
 801d7fc:	d202      	bcs.n	801d804 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801d7fe:	f06f 0301 	mvn.w	r3, #1
 801d802:	e265      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801d804:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d806:	3301      	adds	r3, #1
 801d808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d80a:	8952      	ldrh	r2, [r2, #10]
 801d80c:	4293      	cmp	r3, r2
 801d80e:	da07      	bge.n	801d820 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801d810:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d812:	3301      	adds	r3, #1
 801d814:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d816:	4413      	add	r3, r2
 801d818:	781b      	ldrb	r3, [r3, #0]
 801d81a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d81e:	e00b      	b.n	801d838 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801d820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d822:	681b      	ldr	r3, [r3, #0]
 801d824:	2b00      	cmp	r3, #0
 801d826:	d004      	beq.n	801d832 <dhcp_parse_reply+0xde>
 801d828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d82a:	681b      	ldr	r3, [r3, #0]
 801d82c:	685b      	ldr	r3, [r3, #4]
 801d82e:	781b      	ldrb	r3, [r3, #0]
 801d830:	e000      	b.n	801d834 <dhcp_parse_reply+0xe0>
 801d832:	2300      	movs	r3, #0
 801d834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801d838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d83c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801d840:	7dfb      	ldrb	r3, [r7, #23]
 801d842:	2b3b      	cmp	r3, #59	; 0x3b
 801d844:	f200 812d 	bhi.w	801daa2 <dhcp_parse_reply+0x34e>
 801d848:	a201      	add	r2, pc, #4	; (adr r2, 801d850 <dhcp_parse_reply+0xfc>)
 801d84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d84e:	bf00      	nop
 801d850:	0801d941 	.word	0x0801d941
 801d854:	0801d951 	.word	0x0801d951
 801d858:	0801daa3 	.word	0x0801daa3
 801d85c:	0801d973 	.word	0x0801d973
 801d860:	0801daa3 	.word	0x0801daa3
 801d864:	0801daa3 	.word	0x0801daa3
 801d868:	0801daa3 	.word	0x0801daa3
 801d86c:	0801daa3 	.word	0x0801daa3
 801d870:	0801daa3 	.word	0x0801daa3
 801d874:	0801daa3 	.word	0x0801daa3
 801d878:	0801daa3 	.word	0x0801daa3
 801d87c:	0801daa3 	.word	0x0801daa3
 801d880:	0801daa3 	.word	0x0801daa3
 801d884:	0801daa3 	.word	0x0801daa3
 801d888:	0801daa3 	.word	0x0801daa3
 801d88c:	0801daa3 	.word	0x0801daa3
 801d890:	0801daa3 	.word	0x0801daa3
 801d894:	0801daa3 	.word	0x0801daa3
 801d898:	0801daa3 	.word	0x0801daa3
 801d89c:	0801daa3 	.word	0x0801daa3
 801d8a0:	0801daa3 	.word	0x0801daa3
 801d8a4:	0801daa3 	.word	0x0801daa3
 801d8a8:	0801daa3 	.word	0x0801daa3
 801d8ac:	0801daa3 	.word	0x0801daa3
 801d8b0:	0801daa3 	.word	0x0801daa3
 801d8b4:	0801daa3 	.word	0x0801daa3
 801d8b8:	0801daa3 	.word	0x0801daa3
 801d8bc:	0801daa3 	.word	0x0801daa3
 801d8c0:	0801daa3 	.word	0x0801daa3
 801d8c4:	0801daa3 	.word	0x0801daa3
 801d8c8:	0801daa3 	.word	0x0801daa3
 801d8cc:	0801daa3 	.word	0x0801daa3
 801d8d0:	0801daa3 	.word	0x0801daa3
 801d8d4:	0801daa3 	.word	0x0801daa3
 801d8d8:	0801daa3 	.word	0x0801daa3
 801d8dc:	0801daa3 	.word	0x0801daa3
 801d8e0:	0801daa3 	.word	0x0801daa3
 801d8e4:	0801daa3 	.word	0x0801daa3
 801d8e8:	0801daa3 	.word	0x0801daa3
 801d8ec:	0801daa3 	.word	0x0801daa3
 801d8f0:	0801daa3 	.word	0x0801daa3
 801d8f4:	0801daa3 	.word	0x0801daa3
 801d8f8:	0801daa3 	.word	0x0801daa3
 801d8fc:	0801daa3 	.word	0x0801daa3
 801d900:	0801daa3 	.word	0x0801daa3
 801d904:	0801daa3 	.word	0x0801daa3
 801d908:	0801daa3 	.word	0x0801daa3
 801d90c:	0801daa3 	.word	0x0801daa3
 801d910:	0801daa3 	.word	0x0801daa3
 801d914:	0801daa3 	.word	0x0801daa3
 801d918:	0801daa3 	.word	0x0801daa3
 801d91c:	0801d99f 	.word	0x0801d99f
 801d920:	0801d9c1 	.word	0x0801d9c1
 801d924:	0801d9fd 	.word	0x0801d9fd
 801d928:	0801da1f 	.word	0x0801da1f
 801d92c:	0801daa3 	.word	0x0801daa3
 801d930:	0801daa3 	.word	0x0801daa3
 801d934:	0801daa3 	.word	0x0801daa3
 801d938:	0801da41 	.word	0x0801da41
 801d93c:	0801da81 	.word	0x0801da81
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801d940:	2300      	movs	r3, #0
 801d942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d946:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d94a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801d94e:	e0ac      	b.n	801daaa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d954:	2b04      	cmp	r3, #4
 801d956:	d009      	beq.n	801d96c <dhcp_parse_reply+0x218>
 801d958:	4b43      	ldr	r3, [pc, #268]	; (801da68 <dhcp_parse_reply+0x314>)
 801d95a:	f240 622e 	movw	r2, #1582	; 0x62e
 801d95e:	4943      	ldr	r1, [pc, #268]	; (801da6c <dhcp_parse_reply+0x318>)
 801d960:	4843      	ldr	r0, [pc, #268]	; (801da70 <dhcp_parse_reply+0x31c>)
 801d962:	f003 fe47 	bl	80215f4 <iprintf>
 801d966:	f06f 0305 	mvn.w	r3, #5
 801d96a:	e1b1      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801d96c:	2306      	movs	r3, #6
 801d96e:	623b      	str	r3, [r7, #32]
        break;
 801d970:	e09b      	b.n	801daaa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801d972:	2304      	movs	r3, #4
 801d974:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801d978:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801d97c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801d980:	429a      	cmp	r2, r3
 801d982:	d209      	bcs.n	801d998 <dhcp_parse_reply+0x244>
 801d984:	4b38      	ldr	r3, [pc, #224]	; (801da68 <dhcp_parse_reply+0x314>)
 801d986:	f240 6233 	movw	r2, #1587	; 0x633
 801d98a:	493a      	ldr	r1, [pc, #232]	; (801da74 <dhcp_parse_reply+0x320>)
 801d98c:	4838      	ldr	r0, [pc, #224]	; (801da70 <dhcp_parse_reply+0x31c>)
 801d98e:	f003 fe31 	bl	80215f4 <iprintf>
 801d992:	f06f 0305 	mvn.w	r3, #5
 801d996:	e19b      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801d998:	2307      	movs	r3, #7
 801d99a:	623b      	str	r3, [r7, #32]
        break;
 801d99c:	e085      	b.n	801daaa <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d99e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d9a2:	2b04      	cmp	r3, #4
 801d9a4:	d009      	beq.n	801d9ba <dhcp_parse_reply+0x266>
 801d9a6:	4b30      	ldr	r3, [pc, #192]	; (801da68 <dhcp_parse_reply+0x314>)
 801d9a8:	f240 6241 	movw	r2, #1601	; 0x641
 801d9ac:	492f      	ldr	r1, [pc, #188]	; (801da6c <dhcp_parse_reply+0x318>)
 801d9ae:	4830      	ldr	r0, [pc, #192]	; (801da70 <dhcp_parse_reply+0x31c>)
 801d9b0:	f003 fe20 	bl	80215f4 <iprintf>
 801d9b4:	f06f 0305 	mvn.w	r3, #5
 801d9b8:	e18a      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801d9ba:	2303      	movs	r3, #3
 801d9bc:	623b      	str	r3, [r7, #32]
        break;
 801d9be:	e074      	b.n	801daaa <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801d9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d9c4:	2b01      	cmp	r3, #1
 801d9c6:	d009      	beq.n	801d9dc <dhcp_parse_reply+0x288>
 801d9c8:	4b27      	ldr	r3, [pc, #156]	; (801da68 <dhcp_parse_reply+0x314>)
 801d9ca:	f240 624f 	movw	r2, #1615	; 0x64f
 801d9ce:	492a      	ldr	r1, [pc, #168]	; (801da78 <dhcp_parse_reply+0x324>)
 801d9d0:	4827      	ldr	r0, [pc, #156]	; (801da70 <dhcp_parse_reply+0x31c>)
 801d9d2:	f003 fe0f 	bl	80215f4 <iprintf>
 801d9d6:	f06f 0305 	mvn.w	r3, #5
 801d9da:	e179      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801d9dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801d9de:	2bf0      	cmp	r3, #240	; 0xf0
 801d9e0:	d009      	beq.n	801d9f6 <dhcp_parse_reply+0x2a2>
 801d9e2:	4b21      	ldr	r3, [pc, #132]	; (801da68 <dhcp_parse_reply+0x314>)
 801d9e4:	f240 6251 	movw	r2, #1617	; 0x651
 801d9e8:	4924      	ldr	r1, [pc, #144]	; (801da7c <dhcp_parse_reply+0x328>)
 801d9ea:	4821      	ldr	r0, [pc, #132]	; (801da70 <dhcp_parse_reply+0x31c>)
 801d9ec:	f003 fe02 	bl	80215f4 <iprintf>
 801d9f0:	f06f 0305 	mvn.w	r3, #5
 801d9f4:	e16c      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801d9f6:	2300      	movs	r3, #0
 801d9f8:	623b      	str	r3, [r7, #32]
        break;
 801d9fa:	e056      	b.n	801daaa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801d9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801da00:	2b01      	cmp	r3, #1
 801da02:	d009      	beq.n	801da18 <dhcp_parse_reply+0x2c4>
 801da04:	4b18      	ldr	r3, [pc, #96]	; (801da68 <dhcp_parse_reply+0x314>)
 801da06:	f240 6255 	movw	r2, #1621	; 0x655
 801da0a:	491b      	ldr	r1, [pc, #108]	; (801da78 <dhcp_parse_reply+0x324>)
 801da0c:	4818      	ldr	r0, [pc, #96]	; (801da70 <dhcp_parse_reply+0x31c>)
 801da0e:	f003 fdf1 	bl	80215f4 <iprintf>
 801da12:	f06f 0305 	mvn.w	r3, #5
 801da16:	e15b      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801da18:	2301      	movs	r3, #1
 801da1a:	623b      	str	r3, [r7, #32]
        break;
 801da1c:	e045      	b.n	801daaa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801da1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801da22:	2b04      	cmp	r3, #4
 801da24:	d009      	beq.n	801da3a <dhcp_parse_reply+0x2e6>
 801da26:	4b10      	ldr	r3, [pc, #64]	; (801da68 <dhcp_parse_reply+0x314>)
 801da28:	f240 6259 	movw	r2, #1625	; 0x659
 801da2c:	490f      	ldr	r1, [pc, #60]	; (801da6c <dhcp_parse_reply+0x318>)
 801da2e:	4810      	ldr	r0, [pc, #64]	; (801da70 <dhcp_parse_reply+0x31c>)
 801da30:	f003 fde0 	bl	80215f4 <iprintf>
 801da34:	f06f 0305 	mvn.w	r3, #5
 801da38:	e14a      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801da3a:	2302      	movs	r3, #2
 801da3c:	623b      	str	r3, [r7, #32]
        break;
 801da3e:	e034      	b.n	801daaa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801da40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801da44:	2b04      	cmp	r3, #4
 801da46:	d009      	beq.n	801da5c <dhcp_parse_reply+0x308>
 801da48:	4b07      	ldr	r3, [pc, #28]	; (801da68 <dhcp_parse_reply+0x314>)
 801da4a:	f240 625d 	movw	r2, #1629	; 0x65d
 801da4e:	4907      	ldr	r1, [pc, #28]	; (801da6c <dhcp_parse_reply+0x318>)
 801da50:	4807      	ldr	r0, [pc, #28]	; (801da70 <dhcp_parse_reply+0x31c>)
 801da52:	f003 fdcf 	bl	80215f4 <iprintf>
 801da56:	f06f 0305 	mvn.w	r3, #5
 801da5a:	e139      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 801da5c:	2304      	movs	r3, #4
 801da5e:	623b      	str	r3, [r7, #32]
        break;
 801da60:	e023      	b.n	801daaa <dhcp_parse_reply+0x356>
 801da62:	bf00      	nop
 801da64:	20010374 	.word	0x20010374
 801da68:	0802495c 	.word	0x0802495c
 801da6c:	08024be4 	.word	0x08024be4
 801da70:	080249bc 	.word	0x080249bc
 801da74:	08024bf0 	.word	0x08024bf0
 801da78:	08024c04 	.word	0x08024c04
 801da7c:	08024c10 	.word	0x08024c10
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801da80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801da84:	2b04      	cmp	r3, #4
 801da86:	d009      	beq.n	801da9c <dhcp_parse_reply+0x348>
 801da88:	4b93      	ldr	r3, [pc, #588]	; (801dcd8 <dhcp_parse_reply+0x584>)
 801da8a:	f240 6261 	movw	r2, #1633	; 0x661
 801da8e:	4993      	ldr	r1, [pc, #588]	; (801dcdc <dhcp_parse_reply+0x588>)
 801da90:	4893      	ldr	r0, [pc, #588]	; (801dce0 <dhcp_parse_reply+0x58c>)
 801da92:	f003 fdaf 	bl	80215f4 <iprintf>
 801da96:	f06f 0305 	mvn.w	r3, #5
 801da9a:	e119      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 801da9c:	2305      	movs	r3, #5
 801da9e:	623b      	str	r3, [r7, #32]
        break;
 801daa0:	e003      	b.n	801daaa <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 801daa2:	2300      	movs	r3, #0
 801daa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801daa8:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801daaa:	7dfb      	ldrb	r3, [r7, #23]
 801daac:	2b00      	cmp	r3, #0
 801daae:	d103      	bne.n	801dab8 <dhcp_parse_reply+0x364>
      offset++;
 801dab0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801dab2:	3301      	adds	r3, #1
 801dab4:	877b      	strh	r3, [r7, #58]	; 0x3a
 801dab6:	e0a1      	b.n	801dbfc <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801dab8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801daba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dabe:	4413      	add	r3, r2
 801dac0:	3302      	adds	r3, #2
 801dac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801dac6:	db02      	blt.n	801dace <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 801dac8:	f06f 0301 	mvn.w	r3, #1
 801dacc:	e100      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801dace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dad2:	b29a      	uxth	r2, r3
 801dad4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801dad6:	4413      	add	r3, r2
 801dad8:	b29b      	uxth	r3, r3
 801dada:	3302      	adds	r3, #2
 801dadc:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801dade:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	f000 808a 	beq.w	801dbfc <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 801dae8:	2300      	movs	r3, #0
 801daea:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801daec:	6a3b      	ldr	r3, [r7, #32]
 801daee:	2b00      	cmp	r3, #0
 801daf0:	db02      	blt.n	801daf8 <dhcp_parse_reply+0x3a4>
 801daf2:	6a3b      	ldr	r3, [r7, #32]
 801daf4:	2b07      	cmp	r3, #7
 801daf6:	dd06      	ble.n	801db06 <dhcp_parse_reply+0x3b2>
 801daf8:	4b77      	ldr	r3, [pc, #476]	; (801dcd8 <dhcp_parse_reply+0x584>)
 801dafa:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801dafe:	4979      	ldr	r1, [pc, #484]	; (801dce4 <dhcp_parse_reply+0x590>)
 801db00:	4877      	ldr	r0, [pc, #476]	; (801dce0 <dhcp_parse_reply+0x58c>)
 801db02:	f003 fd77 	bl	80215f4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801db06:	4a78      	ldr	r2, [pc, #480]	; (801dce8 <dhcp_parse_reply+0x594>)
 801db08:	6a3b      	ldr	r3, [r7, #32]
 801db0a:	4413      	add	r3, r2
 801db0c:	781b      	ldrb	r3, [r3, #0]
 801db0e:	2b00      	cmp	r3, #0
 801db10:	d174      	bne.n	801dbfc <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801db12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801db16:	2b04      	cmp	r3, #4
 801db18:	bf28      	it	cs
 801db1a:	2304      	movcs	r3, #4
 801db1c:	b2db      	uxtb	r3, r3
 801db1e:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801db20:	8bfb      	ldrh	r3, [r7, #30]
 801db22:	8aba      	ldrh	r2, [r7, #20]
 801db24:	f107 0108 	add.w	r1, r7, #8
 801db28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801db2a:	f7f8 fc05 	bl	8016338 <pbuf_copy_partial>
 801db2e:	4603      	mov	r3, r0
 801db30:	461a      	mov	r2, r3
 801db32:	8abb      	ldrh	r3, [r7, #20]
 801db34:	4293      	cmp	r3, r2
 801db36:	d002      	beq.n	801db3e <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 801db38:	f06f 0301 	mvn.w	r3, #1
 801db3c:	e0c8      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 801db3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801db42:	2b04      	cmp	r3, #4
 801db44:	d933      	bls.n	801dbae <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801db46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801db4a:	f003 0303 	and.w	r3, r3, #3
 801db4e:	b2db      	uxtb	r3, r3
 801db50:	2b00      	cmp	r3, #0
 801db52:	d009      	beq.n	801db68 <dhcp_parse_reply+0x414>
 801db54:	4b60      	ldr	r3, [pc, #384]	; (801dcd8 <dhcp_parse_reply+0x584>)
 801db56:	f240 6281 	movw	r2, #1665	; 0x681
 801db5a:	4964      	ldr	r1, [pc, #400]	; (801dcec <dhcp_parse_reply+0x598>)
 801db5c:	4860      	ldr	r0, [pc, #384]	; (801dce0 <dhcp_parse_reply+0x58c>)
 801db5e:	f003 fd49 	bl	80215f4 <iprintf>
 801db62:	f06f 0305 	mvn.w	r3, #5
 801db66:	e0b3      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 801db68:	4a5f      	ldr	r2, [pc, #380]	; (801dce8 <dhcp_parse_reply+0x594>)
 801db6a:	6a3b      	ldr	r3, [r7, #32]
 801db6c:	4413      	add	r3, r2
 801db6e:	2201      	movs	r2, #1
 801db70:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801db72:	68bb      	ldr	r3, [r7, #8]
 801db74:	4618      	mov	r0, r3
 801db76:	f7f6 fe20 	bl	80147ba <lwip_htonl>
 801db7a:	4601      	mov	r1, r0
 801db7c:	4a5c      	ldr	r2, [pc, #368]	; (801dcf0 <dhcp_parse_reply+0x59c>)
 801db7e:	6a3b      	ldr	r3, [r7, #32]
 801db80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801db84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801db88:	3b04      	subs	r3, #4
 801db8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801db8e:	8bfb      	ldrh	r3, [r7, #30]
 801db90:	3304      	adds	r3, #4
 801db92:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801db94:	8a7a      	ldrh	r2, [r7, #18]
 801db96:	8bfb      	ldrh	r3, [r7, #30]
 801db98:	429a      	cmp	r2, r3
 801db9a:	d202      	bcs.n	801dba2 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 801db9c:	f06f 0301 	mvn.w	r3, #1
 801dba0:	e096      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 801dba2:	8a7b      	ldrh	r3, [r7, #18]
 801dba4:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801dba6:	6a3b      	ldr	r3, [r7, #32]
 801dba8:	3301      	adds	r3, #1
 801dbaa:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801dbac:	e79e      	b.n	801daec <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 801dbae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801dbb2:	2b04      	cmp	r3, #4
 801dbb4:	d106      	bne.n	801dbc4 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 801dbb6:	68bb      	ldr	r3, [r7, #8]
 801dbb8:	4618      	mov	r0, r3
 801dbba:	f7f6 fdfe 	bl	80147ba <lwip_htonl>
 801dbbe:	4603      	mov	r3, r0
 801dbc0:	60bb      	str	r3, [r7, #8]
 801dbc2:	e011      	b.n	801dbe8 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801dbc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801dbc8:	2b01      	cmp	r3, #1
 801dbca:	d009      	beq.n	801dbe0 <dhcp_parse_reply+0x48c>
 801dbcc:	4b42      	ldr	r3, [pc, #264]	; (801dcd8 <dhcp_parse_reply+0x584>)
 801dbce:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801dbd2:	4948      	ldr	r1, [pc, #288]	; (801dcf4 <dhcp_parse_reply+0x5a0>)
 801dbd4:	4842      	ldr	r0, [pc, #264]	; (801dce0 <dhcp_parse_reply+0x58c>)
 801dbd6:	f003 fd0d 	bl	80215f4 <iprintf>
 801dbda:	f06f 0305 	mvn.w	r3, #5
 801dbde:	e077      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 801dbe0:	f107 0308 	add.w	r3, r7, #8
 801dbe4:	781b      	ldrb	r3, [r3, #0]
 801dbe6:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801dbe8:	4a3f      	ldr	r2, [pc, #252]	; (801dce8 <dhcp_parse_reply+0x594>)
 801dbea:	6a3b      	ldr	r3, [r7, #32]
 801dbec:	4413      	add	r3, r2
 801dbee:	2201      	movs	r2, #1
 801dbf0:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801dbf2:	68ba      	ldr	r2, [r7, #8]
 801dbf4:	493e      	ldr	r1, [pc, #248]	; (801dcf0 <dhcp_parse_reply+0x59c>)
 801dbf6:	6a3b      	ldr	r3, [r7, #32]
 801dbf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801dbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbfe:	895b      	ldrh	r3, [r3, #10]
 801dc00:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801dc02:	429a      	cmp	r2, r3
 801dc04:	d324      	bcc.n	801dc50 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 801dc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc08:	895b      	ldrh	r3, [r3, #10]
 801dc0a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801dc0c:	1ad3      	subs	r3, r2, r3
 801dc0e:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801dc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc12:	895b      	ldrh	r3, [r3, #10]
 801dc14:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801dc16:	1ad3      	subs	r3, r2, r3
 801dc18:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801dc1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801dc1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801dc1e:	429a      	cmp	r2, r3
 801dc20:	d213      	bcs.n	801dc4a <dhcp_parse_reply+0x4f6>
        q = q->next;
 801dc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc24:	681b      	ldr	r3, [r3, #0]
 801dc26:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801dc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc2a:	2b00      	cmp	r3, #0
 801dc2c:	d109      	bne.n	801dc42 <dhcp_parse_reply+0x4ee>
 801dc2e:	4b2a      	ldr	r3, [pc, #168]	; (801dcd8 <dhcp_parse_reply+0x584>)
 801dc30:	f240 629d 	movw	r2, #1693	; 0x69d
 801dc34:	4930      	ldr	r1, [pc, #192]	; (801dcf8 <dhcp_parse_reply+0x5a4>)
 801dc36:	482a      	ldr	r0, [pc, #168]	; (801dce0 <dhcp_parse_reply+0x58c>)
 801dc38:	f003 fcdc 	bl	80215f4 <iprintf>
 801dc3c:	f06f 0305 	mvn.w	r3, #5
 801dc40:	e046      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801dc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc44:	685b      	ldr	r3, [r3, #4]
 801dc46:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dc48:	e002      	b.n	801dc50 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801dc4a:	f06f 0301 	mvn.w	r3, #1
 801dc4e:	e03f      	b.n	801dcd0 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801dc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc52:	2b00      	cmp	r3, #0
 801dc54:	d00a      	beq.n	801dc6c <dhcp_parse_reply+0x518>
 801dc56:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801dc58:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801dc5a:	429a      	cmp	r2, r3
 801dc5c:	d206      	bcs.n	801dc6c <dhcp_parse_reply+0x518>
 801dc5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801dc60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dc62:	4413      	add	r3, r2
 801dc64:	781b      	ldrb	r3, [r3, #0]
 801dc66:	2bff      	cmp	r3, #255	; 0xff
 801dc68:	f47f adb7 	bne.w	801d7da <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801dc6c:	4b1e      	ldr	r3, [pc, #120]	; (801dce8 <dhcp_parse_reply+0x594>)
 801dc6e:	781b      	ldrb	r3, [r3, #0]
 801dc70:	2b00      	cmp	r3, #0
 801dc72:	d018      	beq.n	801dca6 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801dc74:	4b1e      	ldr	r3, [pc, #120]	; (801dcf0 <dhcp_parse_reply+0x59c>)
 801dc76:	681b      	ldr	r3, [r3, #0]
 801dc78:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801dc7a:	4b1b      	ldr	r3, [pc, #108]	; (801dce8 <dhcp_parse_reply+0x594>)
 801dc7c:	2200      	movs	r2, #0
 801dc7e:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801dc80:	68fb      	ldr	r3, [r7, #12]
 801dc82:	2b01      	cmp	r3, #1
 801dc84:	d102      	bne.n	801dc8c <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801dc86:	2301      	movs	r3, #1
 801dc88:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dc8a:	e00c      	b.n	801dca6 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801dc8c:	68fb      	ldr	r3, [r7, #12]
 801dc8e:	2b02      	cmp	r3, #2
 801dc90:	d102      	bne.n	801dc98 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801dc92:	2301      	movs	r3, #1
 801dc94:	62bb      	str	r3, [r7, #40]	; 0x28
 801dc96:	e006      	b.n	801dca6 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801dc98:	68fb      	ldr	r3, [r7, #12]
 801dc9a:	2b03      	cmp	r3, #3
 801dc9c:	d103      	bne.n	801dca6 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 801dc9e:	2301      	movs	r3, #1
 801dca0:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801dca2:	2301      	movs	r3, #1
 801dca4:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801dca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	d006      	beq.n	801dcba <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801dcac:	2300      	movs	r3, #0
 801dcae:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801dcb0:	236c      	movs	r3, #108	; 0x6c
 801dcb2:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801dcb4:	23ec      	movs	r3, #236	; 0xec
 801dcb6:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801dcb8:	e569      	b.n	801d78e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801dcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dcbc:	2b00      	cmp	r3, #0
 801dcbe:	d006      	beq.n	801dcce <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 801dcc0:	2300      	movs	r3, #0
 801dcc2:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801dcc4:	232c      	movs	r3, #44	; 0x2c
 801dcc6:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801dcc8:	236c      	movs	r3, #108	; 0x6c
 801dcca:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801dccc:	e55f      	b.n	801d78e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801dcce:	2300      	movs	r3, #0
}
 801dcd0:	4618      	mov	r0, r3
 801dcd2:	3740      	adds	r7, #64	; 0x40
 801dcd4:	46bd      	mov	sp, r7
 801dcd6:	bd80      	pop	{r7, pc}
 801dcd8:	0802495c 	.word	0x0802495c
 801dcdc:	08024be4 	.word	0x08024be4
 801dce0:	080249bc 	.word	0x080249bc
 801dce4:	08024c28 	.word	0x08024c28
 801dce8:	20010374 	.word	0x20010374
 801dcec:	08024c3c 	.word	0x08024c3c
 801dcf0:	2001037c 	.word	0x2001037c
 801dcf4:	08024c54 	.word	0x08024c54
 801dcf8:	08024c68 	.word	0x08024c68

0801dcfc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801dcfc:	b580      	push	{r7, lr}
 801dcfe:	b08a      	sub	sp, #40	; 0x28
 801dd00:	af00      	add	r7, sp, #0
 801dd02:	60f8      	str	r0, [r7, #12]
 801dd04:	60b9      	str	r1, [r7, #8]
 801dd06:	607a      	str	r2, [r7, #4]
 801dd08:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801dd0a:	4b5f      	ldr	r3, [pc, #380]	; (801de88 <dhcp_recv+0x18c>)
 801dd0c:	685b      	ldr	r3, [r3, #4]
 801dd0e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801dd10:	6a3b      	ldr	r3, [r7, #32]
 801dd12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd14:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801dd16:	687b      	ldr	r3, [r7, #4]
 801dd18:	685b      	ldr	r3, [r3, #4]
 801dd1a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801dd1c:	69fb      	ldr	r3, [r7, #28]
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	f000 809d 	beq.w	801de5e <dhcp_recv+0x162>
 801dd24:	69fb      	ldr	r3, [r7, #28]
 801dd26:	791b      	ldrb	r3, [r3, #4]
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	f000 8098 	beq.w	801de5e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	895b      	ldrh	r3, [r3, #10]
 801dd32:	2b2b      	cmp	r3, #43	; 0x2b
 801dd34:	f240 8095 	bls.w	801de62 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801dd38:	69bb      	ldr	r3, [r7, #24]
 801dd3a:	781b      	ldrb	r3, [r3, #0]
 801dd3c:	2b02      	cmp	r3, #2
 801dd3e:	f040 8092 	bne.w	801de66 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801dd42:	2300      	movs	r3, #0
 801dd44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801dd48:	e012      	b.n	801dd70 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801dd4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dd4e:	6a3a      	ldr	r2, [r7, #32]
 801dd50:	4413      	add	r3, r2
 801dd52:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801dd56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dd5a:	69b9      	ldr	r1, [r7, #24]
 801dd5c:	440b      	add	r3, r1
 801dd5e:	7f1b      	ldrb	r3, [r3, #28]
 801dd60:	429a      	cmp	r2, r3
 801dd62:	f040 8082 	bne.w	801de6a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801dd66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dd6a:	3301      	adds	r3, #1
 801dd6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801dd70:	6a3b      	ldr	r3, [r7, #32]
 801dd72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801dd76:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801dd7a:	429a      	cmp	r2, r3
 801dd7c:	d203      	bcs.n	801dd86 <dhcp_recv+0x8a>
 801dd7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dd82:	2b05      	cmp	r3, #5
 801dd84:	d9e1      	bls.n	801dd4a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801dd86:	69bb      	ldr	r3, [r7, #24]
 801dd88:	685b      	ldr	r3, [r3, #4]
 801dd8a:	4618      	mov	r0, r3
 801dd8c:	f7f6 fd15 	bl	80147ba <lwip_htonl>
 801dd90:	4602      	mov	r2, r0
 801dd92:	69fb      	ldr	r3, [r7, #28]
 801dd94:	681b      	ldr	r3, [r3, #0]
 801dd96:	429a      	cmp	r2, r3
 801dd98:	d169      	bne.n	801de6e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801dd9a:	69f9      	ldr	r1, [r7, #28]
 801dd9c:	6878      	ldr	r0, [r7, #4]
 801dd9e:	f7ff fcd9 	bl	801d754 <dhcp_parse_reply>
 801dda2:	4603      	mov	r3, r0
 801dda4:	2b00      	cmp	r3, #0
 801dda6:	d164      	bne.n	801de72 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801dda8:	4b38      	ldr	r3, [pc, #224]	; (801de8c <dhcp_recv+0x190>)
 801ddaa:	785b      	ldrb	r3, [r3, #1]
 801ddac:	2b00      	cmp	r3, #0
 801ddae:	d062      	beq.n	801de76 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801ddb0:	687b      	ldr	r3, [r7, #4]
 801ddb2:	685b      	ldr	r3, [r3, #4]
 801ddb4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801ddb6:	4b36      	ldr	r3, [pc, #216]	; (801de90 <dhcp_recv+0x194>)
 801ddb8:	685b      	ldr	r3, [r3, #4]
 801ddba:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801ddbc:	7cfb      	ldrb	r3, [r7, #19]
 801ddbe:	2b05      	cmp	r3, #5
 801ddc0:	d12a      	bne.n	801de18 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801ddc2:	69fb      	ldr	r3, [r7, #28]
 801ddc4:	795b      	ldrb	r3, [r3, #5]
 801ddc6:	2b01      	cmp	r3, #1
 801ddc8:	d112      	bne.n	801ddf0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801ddca:	6979      	ldr	r1, [r7, #20]
 801ddcc:	6a38      	ldr	r0, [r7, #32]
 801ddce:	f7fe fe05 	bl	801c9dc <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801ddd2:	6a3b      	ldr	r3, [r7, #32]
 801ddd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801ddd8:	f003 0308 	and.w	r3, r3, #8
 801dddc:	2b00      	cmp	r3, #0
 801ddde:	d003      	beq.n	801dde8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801dde0:	6a38      	ldr	r0, [r7, #32]
 801dde2:	f7fe fb73 	bl	801c4cc <dhcp_check>
 801dde6:	e047      	b.n	801de78 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801dde8:	6a38      	ldr	r0, [r7, #32]
 801ddea:	f7ff f867 	bl	801cebc <dhcp_bind>
 801ddee:	e043      	b.n	801de78 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801ddf0:	69fb      	ldr	r3, [r7, #28]
 801ddf2:	795b      	ldrb	r3, [r3, #5]
 801ddf4:	2b03      	cmp	r3, #3
 801ddf6:	d007      	beq.n	801de08 <dhcp_recv+0x10c>
 801ddf8:	69fb      	ldr	r3, [r7, #28]
 801ddfa:	795b      	ldrb	r3, [r3, #5]
 801ddfc:	2b04      	cmp	r3, #4
 801ddfe:	d003      	beq.n	801de08 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801de00:	69fb      	ldr	r3, [r7, #28]
 801de02:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801de04:	2b05      	cmp	r3, #5
 801de06:	d137      	bne.n	801de78 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 801de08:	6979      	ldr	r1, [r7, #20]
 801de0a:	6a38      	ldr	r0, [r7, #32]
 801de0c:	f7fe fde6 	bl	801c9dc <dhcp_handle_ack>
      dhcp_bind(netif);
 801de10:	6a38      	ldr	r0, [r7, #32]
 801de12:	f7ff f853 	bl	801cebc <dhcp_bind>
 801de16:	e02f      	b.n	801de78 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801de18:	7cfb      	ldrb	r3, [r7, #19]
 801de1a:	2b06      	cmp	r3, #6
 801de1c:	d113      	bne.n	801de46 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801de1e:	69fb      	ldr	r3, [r7, #28]
 801de20:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801de22:	2b03      	cmp	r3, #3
 801de24:	d00b      	beq.n	801de3e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801de26:	69fb      	ldr	r3, [r7, #28]
 801de28:	795b      	ldrb	r3, [r3, #5]
 801de2a:	2b01      	cmp	r3, #1
 801de2c:	d007      	beq.n	801de3e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801de2e:	69fb      	ldr	r3, [r7, #28]
 801de30:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801de32:	2b04      	cmp	r3, #4
 801de34:	d003      	beq.n	801de3e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801de36:	69fb      	ldr	r3, [r7, #28]
 801de38:	795b      	ldrb	r3, [r3, #5]
 801de3a:	2b05      	cmp	r3, #5
 801de3c:	d103      	bne.n	801de46 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801de3e:	6a38      	ldr	r0, [r7, #32]
 801de40:	f7fe fb2a 	bl	801c498 <dhcp_handle_nak>
 801de44:	e018      	b.n	801de78 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801de46:	7cfb      	ldrb	r3, [r7, #19]
 801de48:	2b02      	cmp	r3, #2
 801de4a:	d108      	bne.n	801de5e <dhcp_recv+0x162>
 801de4c:	69fb      	ldr	r3, [r7, #28]
 801de4e:	795b      	ldrb	r3, [r3, #5]
 801de50:	2b06      	cmp	r3, #6
 801de52:	d104      	bne.n	801de5e <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801de54:	6979      	ldr	r1, [r7, #20]
 801de56:	6a38      	ldr	r0, [r7, #32]
 801de58:	f7fe fb6c 	bl	801c534 <dhcp_handle_offer>
 801de5c:	e00c      	b.n	801de78 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 801de5e:	bf00      	nop
 801de60:	e00a      	b.n	801de78 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801de62:	bf00      	nop
 801de64:	e008      	b.n	801de78 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801de66:	bf00      	nop
 801de68:	e006      	b.n	801de78 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 801de6a:	bf00      	nop
 801de6c:	e004      	b.n	801de78 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801de6e:	bf00      	nop
 801de70:	e002      	b.n	801de78 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801de72:	bf00      	nop
 801de74:	e000      	b.n	801de78 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801de76:	bf00      	nop
  pbuf_free(p);
 801de78:	6878      	ldr	r0, [r7, #4]
 801de7a:	f7f8 f857 	bl	8015f2c <pbuf_free>
}
 801de7e:	bf00      	nop
 801de80:	3728      	adds	r7, #40	; 0x28
 801de82:	46bd      	mov	sp, r7
 801de84:	bd80      	pop	{r7, pc}
 801de86:	bf00      	nop
 801de88:	2000cc24 	.word	0x2000cc24
 801de8c:	20010374 	.word	0x20010374
 801de90:	2001037c 	.word	0x2001037c

0801de94 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801de94:	b580      	push	{r7, lr}
 801de96:	b088      	sub	sp, #32
 801de98:	af00      	add	r7, sp, #0
 801de9a:	60f8      	str	r0, [r7, #12]
 801de9c:	60b9      	str	r1, [r7, #8]
 801de9e:	603b      	str	r3, [r7, #0]
 801dea0:	4613      	mov	r3, r2
 801dea2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801dea4:	68fb      	ldr	r3, [r7, #12]
 801dea6:	2b00      	cmp	r3, #0
 801dea8:	d108      	bne.n	801debc <dhcp_create_msg+0x28>
 801deaa:	4b5f      	ldr	r3, [pc, #380]	; (801e028 <dhcp_create_msg+0x194>)
 801deac:	f240 7269 	movw	r2, #1897	; 0x769
 801deb0:	495e      	ldr	r1, [pc, #376]	; (801e02c <dhcp_create_msg+0x198>)
 801deb2:	485f      	ldr	r0, [pc, #380]	; (801e030 <dhcp_create_msg+0x19c>)
 801deb4:	f003 fb9e 	bl	80215f4 <iprintf>
 801deb8:	2300      	movs	r3, #0
 801deba:	e0b1      	b.n	801e020 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801debc:	68bb      	ldr	r3, [r7, #8]
 801debe:	2b00      	cmp	r3, #0
 801dec0:	d108      	bne.n	801ded4 <dhcp_create_msg+0x40>
 801dec2:	4b59      	ldr	r3, [pc, #356]	; (801e028 <dhcp_create_msg+0x194>)
 801dec4:	f240 726a 	movw	r2, #1898	; 0x76a
 801dec8:	495a      	ldr	r1, [pc, #360]	; (801e034 <dhcp_create_msg+0x1a0>)
 801deca:	4859      	ldr	r0, [pc, #356]	; (801e030 <dhcp_create_msg+0x19c>)
 801decc:	f003 fb92 	bl	80215f4 <iprintf>
 801ded0:	2300      	movs	r3, #0
 801ded2:	e0a5      	b.n	801e020 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801ded4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ded8:	f44f 719a 	mov.w	r1, #308	; 0x134
 801dedc:	2036      	movs	r0, #54	; 0x36
 801dede:	f7f7 fd45 	bl	801596c <pbuf_alloc>
 801dee2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801dee4:	69bb      	ldr	r3, [r7, #24]
 801dee6:	2b00      	cmp	r3, #0
 801dee8:	d101      	bne.n	801deee <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801deea:	2300      	movs	r3, #0
 801deec:	e098      	b.n	801e020 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801deee:	69bb      	ldr	r3, [r7, #24]
 801def0:	895b      	ldrh	r3, [r3, #10]
 801def2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801def6:	d206      	bcs.n	801df06 <dhcp_create_msg+0x72>
 801def8:	4b4b      	ldr	r3, [pc, #300]	; (801e028 <dhcp_create_msg+0x194>)
 801defa:	f240 7272 	movw	r2, #1906	; 0x772
 801defe:	494e      	ldr	r1, [pc, #312]	; (801e038 <dhcp_create_msg+0x1a4>)
 801df00:	484b      	ldr	r0, [pc, #300]	; (801e030 <dhcp_create_msg+0x19c>)
 801df02:	f003 fb77 	bl	80215f4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801df06:	79fb      	ldrb	r3, [r7, #7]
 801df08:	2b03      	cmp	r3, #3
 801df0a:	d103      	bne.n	801df14 <dhcp_create_msg+0x80>
 801df0c:	68bb      	ldr	r3, [r7, #8]
 801df0e:	795b      	ldrb	r3, [r3, #5]
 801df10:	2b03      	cmp	r3, #3
 801df12:	d10d      	bne.n	801df30 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801df14:	68bb      	ldr	r3, [r7, #8]
 801df16:	799b      	ldrb	r3, [r3, #6]
 801df18:	2b00      	cmp	r3, #0
 801df1a:	d105      	bne.n	801df28 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801df1c:	f003 fbe6 	bl	80216ec <rand>
 801df20:	4603      	mov	r3, r0
 801df22:	461a      	mov	r2, r3
 801df24:	4b45      	ldr	r3, [pc, #276]	; (801e03c <dhcp_create_msg+0x1a8>)
 801df26:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801df28:	4b44      	ldr	r3, [pc, #272]	; (801e03c <dhcp_create_msg+0x1a8>)
 801df2a:	681a      	ldr	r2, [r3, #0]
 801df2c:	68bb      	ldr	r3, [r7, #8]
 801df2e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801df30:	69bb      	ldr	r3, [r7, #24]
 801df32:	685b      	ldr	r3, [r3, #4]
 801df34:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801df36:	f44f 729a 	mov.w	r2, #308	; 0x134
 801df3a:	2100      	movs	r1, #0
 801df3c:	6978      	ldr	r0, [r7, #20]
 801df3e:	f003 faa9 	bl	8021494 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801df42:	697b      	ldr	r3, [r7, #20]
 801df44:	2201      	movs	r2, #1
 801df46:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801df48:	697b      	ldr	r3, [r7, #20]
 801df4a:	2201      	movs	r2, #1
 801df4c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801df4e:	68fb      	ldr	r3, [r7, #12]
 801df50:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801df54:	697b      	ldr	r3, [r7, #20]
 801df56:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801df58:	68bb      	ldr	r3, [r7, #8]
 801df5a:	681b      	ldr	r3, [r3, #0]
 801df5c:	4618      	mov	r0, r3
 801df5e:	f7f6 fc2c 	bl	80147ba <lwip_htonl>
 801df62:	4602      	mov	r2, r0
 801df64:	697b      	ldr	r3, [r7, #20]
 801df66:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801df68:	79fb      	ldrb	r3, [r7, #7]
 801df6a:	2b08      	cmp	r3, #8
 801df6c:	d010      	beq.n	801df90 <dhcp_create_msg+0xfc>
 801df6e:	79fb      	ldrb	r3, [r7, #7]
 801df70:	2b04      	cmp	r3, #4
 801df72:	d00d      	beq.n	801df90 <dhcp_create_msg+0xfc>
 801df74:	79fb      	ldrb	r3, [r7, #7]
 801df76:	2b07      	cmp	r3, #7
 801df78:	d00a      	beq.n	801df90 <dhcp_create_msg+0xfc>
 801df7a:	79fb      	ldrb	r3, [r7, #7]
 801df7c:	2b03      	cmp	r3, #3
 801df7e:	d10c      	bne.n	801df9a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801df80:	68bb      	ldr	r3, [r7, #8]
 801df82:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801df84:	2b05      	cmp	r3, #5
 801df86:	d003      	beq.n	801df90 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801df88:	68bb      	ldr	r3, [r7, #8]
 801df8a:	795b      	ldrb	r3, [r3, #5]
 801df8c:	2b04      	cmp	r3, #4
 801df8e:	d104      	bne.n	801df9a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801df90:	68fb      	ldr	r3, [r7, #12]
 801df92:	3304      	adds	r3, #4
 801df94:	681a      	ldr	r2, [r3, #0]
 801df96:	697b      	ldr	r3, [r7, #20]
 801df98:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801df9a:	2300      	movs	r3, #0
 801df9c:	83fb      	strh	r3, [r7, #30]
 801df9e:	e00c      	b.n	801dfba <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801dfa0:	8bfa      	ldrh	r2, [r7, #30]
 801dfa2:	8bfb      	ldrh	r3, [r7, #30]
 801dfa4:	68f9      	ldr	r1, [r7, #12]
 801dfa6:	440a      	add	r2, r1
 801dfa8:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
 801dfac:	697a      	ldr	r2, [r7, #20]
 801dfae:	4413      	add	r3, r2
 801dfb0:	460a      	mov	r2, r1
 801dfb2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801dfb4:	8bfb      	ldrh	r3, [r7, #30]
 801dfb6:	3301      	adds	r3, #1
 801dfb8:	83fb      	strh	r3, [r7, #30]
 801dfba:	8bfb      	ldrh	r3, [r7, #30]
 801dfbc:	2b05      	cmp	r3, #5
 801dfbe:	d9ef      	bls.n	801dfa0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801dfc0:	697b      	ldr	r3, [r7, #20]
 801dfc2:	2200      	movs	r2, #0
 801dfc4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801dfc8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801dfcc:	2200      	movs	r2, #0
 801dfce:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801dfd2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801dfd6:	2200      	movs	r2, #0
 801dfd8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801dfdc:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801dfe0:	2200      	movs	r2, #0
 801dfe2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801dfe6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801dfea:	697b      	ldr	r3, [r7, #20]
 801dfec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801dff0:	2301      	movs	r3, #1
 801dff2:	2235      	movs	r2, #53	; 0x35
 801dff4:	2000      	movs	r0, #0
 801dff6:	f7ff fadd 	bl	801d5b4 <dhcp_option>
 801dffa:	4603      	mov	r3, r0
 801dffc:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801dffe:	697b      	ldr	r3, [r7, #20]
 801e000:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801e004:	79fa      	ldrb	r2, [r7, #7]
 801e006:	8a7b      	ldrh	r3, [r7, #18]
 801e008:	4618      	mov	r0, r3
 801e00a:	f7ff fb07 	bl	801d61c <dhcp_option_byte>
 801e00e:	4603      	mov	r3, r0
 801e010:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801e012:	683b      	ldr	r3, [r7, #0]
 801e014:	2b00      	cmp	r3, #0
 801e016:	d002      	beq.n	801e01e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801e018:	683b      	ldr	r3, [r7, #0]
 801e01a:	8a7a      	ldrh	r2, [r7, #18]
 801e01c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801e01e:	69bb      	ldr	r3, [r7, #24]
}
 801e020:	4618      	mov	r0, r3
 801e022:	3720      	adds	r7, #32
 801e024:	46bd      	mov	sp, r7
 801e026:	bd80      	pop	{r7, pc}
 801e028:	0802495c 	.word	0x0802495c
 801e02c:	08024c7c 	.word	0x08024c7c
 801e030:	080249bc 	.word	0x080249bc
 801e034:	08024c9c 	.word	0x08024c9c
 801e038:	08024cbc 	.word	0x08024cbc
 801e03c:	20009008 	.word	0x20009008

0801e040 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801e040:	b580      	push	{r7, lr}
 801e042:	b084      	sub	sp, #16
 801e044:	af00      	add	r7, sp, #0
 801e046:	4603      	mov	r3, r0
 801e048:	60b9      	str	r1, [r7, #8]
 801e04a:	607a      	str	r2, [r7, #4]
 801e04c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801e04e:	89fb      	ldrh	r3, [r7, #14]
 801e050:	1c5a      	adds	r2, r3, #1
 801e052:	81fa      	strh	r2, [r7, #14]
 801e054:	461a      	mov	r2, r3
 801e056:	68bb      	ldr	r3, [r7, #8]
 801e058:	4413      	add	r3, r2
 801e05a:	22ff      	movs	r2, #255	; 0xff
 801e05c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801e05e:	e007      	b.n	801e070 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801e060:	89fb      	ldrh	r3, [r7, #14]
 801e062:	1c5a      	adds	r2, r3, #1
 801e064:	81fa      	strh	r2, [r7, #14]
 801e066:	461a      	mov	r2, r3
 801e068:	68bb      	ldr	r3, [r7, #8]
 801e06a:	4413      	add	r3, r2
 801e06c:	2200      	movs	r2, #0
 801e06e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801e070:	89fb      	ldrh	r3, [r7, #14]
 801e072:	2b43      	cmp	r3, #67	; 0x43
 801e074:	d904      	bls.n	801e080 <dhcp_option_trailer+0x40>
 801e076:	89fb      	ldrh	r3, [r7, #14]
 801e078:	f003 0303 	and.w	r3, r3, #3
 801e07c:	2b00      	cmp	r3, #0
 801e07e:	d002      	beq.n	801e086 <dhcp_option_trailer+0x46>
 801e080:	89fb      	ldrh	r3, [r7, #14]
 801e082:	2b43      	cmp	r3, #67	; 0x43
 801e084:	d9ec      	bls.n	801e060 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801e086:	89fb      	ldrh	r3, [r7, #14]
 801e088:	33f0      	adds	r3, #240	; 0xf0
 801e08a:	b29b      	uxth	r3, r3
 801e08c:	4619      	mov	r1, r3
 801e08e:	6878      	ldr	r0, [r7, #4]
 801e090:	f7f7 fdc6 	bl	8015c20 <pbuf_realloc>
}
 801e094:	bf00      	nop
 801e096:	3710      	adds	r7, #16
 801e098:	46bd      	mov	sp, r7
 801e09a:	bd80      	pop	{r7, pc}

0801e09c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801e09c:	b480      	push	{r7}
 801e09e:	b085      	sub	sp, #20
 801e0a0:	af00      	add	r7, sp, #0
 801e0a2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	2b00      	cmp	r3, #0
 801e0a8:	d017      	beq.n	801e0da <dhcp_supplied_address+0x3e>
 801e0aa:	687b      	ldr	r3, [r7, #4]
 801e0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0ae:	2b00      	cmp	r3, #0
 801e0b0:	d013      	beq.n	801e0da <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801e0b2:	687b      	ldr	r3, [r7, #4]
 801e0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0b6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801e0b8:	68fb      	ldr	r3, [r7, #12]
 801e0ba:	795b      	ldrb	r3, [r3, #5]
 801e0bc:	2b0a      	cmp	r3, #10
 801e0be:	d007      	beq.n	801e0d0 <dhcp_supplied_address+0x34>
 801e0c0:	68fb      	ldr	r3, [r7, #12]
 801e0c2:	795b      	ldrb	r3, [r3, #5]
 801e0c4:	2b05      	cmp	r3, #5
 801e0c6:	d003      	beq.n	801e0d0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801e0c8:	68fb      	ldr	r3, [r7, #12]
 801e0ca:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801e0cc:	2b04      	cmp	r3, #4
 801e0ce:	d101      	bne.n	801e0d4 <dhcp_supplied_address+0x38>
 801e0d0:	2301      	movs	r3, #1
 801e0d2:	e000      	b.n	801e0d6 <dhcp_supplied_address+0x3a>
 801e0d4:	2300      	movs	r3, #0
 801e0d6:	b2db      	uxtb	r3, r3
 801e0d8:	e000      	b.n	801e0dc <dhcp_supplied_address+0x40>
  }
  return 0;
 801e0da:	2300      	movs	r3, #0
}
 801e0dc:	4618      	mov	r0, r3
 801e0de:	3714      	adds	r7, #20
 801e0e0:	46bd      	mov	sp, r7
 801e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0e6:	4770      	bx	lr

0801e0e8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801e0e8:	b580      	push	{r7, lr}
 801e0ea:	b082      	sub	sp, #8
 801e0ec:	af00      	add	r7, sp, #0
 801e0ee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801e0f0:	4915      	ldr	r1, [pc, #84]	; (801e148 <etharp_free_entry+0x60>)
 801e0f2:	687a      	ldr	r2, [r7, #4]
 801e0f4:	4613      	mov	r3, r2
 801e0f6:	005b      	lsls	r3, r3, #1
 801e0f8:	4413      	add	r3, r2
 801e0fa:	00db      	lsls	r3, r3, #3
 801e0fc:	440b      	add	r3, r1
 801e0fe:	681b      	ldr	r3, [r3, #0]
 801e100:	2b00      	cmp	r3, #0
 801e102:	d013      	beq.n	801e12c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801e104:	4910      	ldr	r1, [pc, #64]	; (801e148 <etharp_free_entry+0x60>)
 801e106:	687a      	ldr	r2, [r7, #4]
 801e108:	4613      	mov	r3, r2
 801e10a:	005b      	lsls	r3, r3, #1
 801e10c:	4413      	add	r3, r2
 801e10e:	00db      	lsls	r3, r3, #3
 801e110:	440b      	add	r3, r1
 801e112:	681b      	ldr	r3, [r3, #0]
 801e114:	4618      	mov	r0, r3
 801e116:	f7f7 ff09 	bl	8015f2c <pbuf_free>
    arp_table[i].q = NULL;
 801e11a:	490b      	ldr	r1, [pc, #44]	; (801e148 <etharp_free_entry+0x60>)
 801e11c:	687a      	ldr	r2, [r7, #4]
 801e11e:	4613      	mov	r3, r2
 801e120:	005b      	lsls	r3, r3, #1
 801e122:	4413      	add	r3, r2
 801e124:	00db      	lsls	r3, r3, #3
 801e126:	440b      	add	r3, r1
 801e128:	2200      	movs	r2, #0
 801e12a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801e12c:	4906      	ldr	r1, [pc, #24]	; (801e148 <etharp_free_entry+0x60>)
 801e12e:	687a      	ldr	r2, [r7, #4]
 801e130:	4613      	mov	r3, r2
 801e132:	005b      	lsls	r3, r3, #1
 801e134:	4413      	add	r3, r2
 801e136:	00db      	lsls	r3, r3, #3
 801e138:	440b      	add	r3, r1
 801e13a:	3314      	adds	r3, #20
 801e13c:	2200      	movs	r2, #0
 801e13e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801e140:	bf00      	nop
 801e142:	3708      	adds	r7, #8
 801e144:	46bd      	mov	sp, r7
 801e146:	bd80      	pop	{r7, pc}
 801e148:	2000900c 	.word	0x2000900c

0801e14c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801e14c:	b580      	push	{r7, lr}
 801e14e:	b082      	sub	sp, #8
 801e150:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e152:	2300      	movs	r3, #0
 801e154:	607b      	str	r3, [r7, #4]
 801e156:	e096      	b.n	801e286 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801e158:	494f      	ldr	r1, [pc, #316]	; (801e298 <etharp_tmr+0x14c>)
 801e15a:	687a      	ldr	r2, [r7, #4]
 801e15c:	4613      	mov	r3, r2
 801e15e:	005b      	lsls	r3, r3, #1
 801e160:	4413      	add	r3, r2
 801e162:	00db      	lsls	r3, r3, #3
 801e164:	440b      	add	r3, r1
 801e166:	3314      	adds	r3, #20
 801e168:	781b      	ldrb	r3, [r3, #0]
 801e16a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801e16c:	78fb      	ldrb	r3, [r7, #3]
 801e16e:	2b00      	cmp	r3, #0
 801e170:	f000 8086 	beq.w	801e280 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801e174:	4948      	ldr	r1, [pc, #288]	; (801e298 <etharp_tmr+0x14c>)
 801e176:	687a      	ldr	r2, [r7, #4]
 801e178:	4613      	mov	r3, r2
 801e17a:	005b      	lsls	r3, r3, #1
 801e17c:	4413      	add	r3, r2
 801e17e:	00db      	lsls	r3, r3, #3
 801e180:	440b      	add	r3, r1
 801e182:	3312      	adds	r3, #18
 801e184:	881b      	ldrh	r3, [r3, #0]
 801e186:	3301      	adds	r3, #1
 801e188:	b298      	uxth	r0, r3
 801e18a:	4943      	ldr	r1, [pc, #268]	; (801e298 <etharp_tmr+0x14c>)
 801e18c:	687a      	ldr	r2, [r7, #4]
 801e18e:	4613      	mov	r3, r2
 801e190:	005b      	lsls	r3, r3, #1
 801e192:	4413      	add	r3, r2
 801e194:	00db      	lsls	r3, r3, #3
 801e196:	440b      	add	r3, r1
 801e198:	3312      	adds	r3, #18
 801e19a:	4602      	mov	r2, r0
 801e19c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e19e:	493e      	ldr	r1, [pc, #248]	; (801e298 <etharp_tmr+0x14c>)
 801e1a0:	687a      	ldr	r2, [r7, #4]
 801e1a2:	4613      	mov	r3, r2
 801e1a4:	005b      	lsls	r3, r3, #1
 801e1a6:	4413      	add	r3, r2
 801e1a8:	00db      	lsls	r3, r3, #3
 801e1aa:	440b      	add	r3, r1
 801e1ac:	3312      	adds	r3, #18
 801e1ae:	881b      	ldrh	r3, [r3, #0]
 801e1b0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801e1b4:	d215      	bcs.n	801e1e2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e1b6:	4938      	ldr	r1, [pc, #224]	; (801e298 <etharp_tmr+0x14c>)
 801e1b8:	687a      	ldr	r2, [r7, #4]
 801e1ba:	4613      	mov	r3, r2
 801e1bc:	005b      	lsls	r3, r3, #1
 801e1be:	4413      	add	r3, r2
 801e1c0:	00db      	lsls	r3, r3, #3
 801e1c2:	440b      	add	r3, r1
 801e1c4:	3314      	adds	r3, #20
 801e1c6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e1c8:	2b01      	cmp	r3, #1
 801e1ca:	d10e      	bne.n	801e1ea <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801e1cc:	4932      	ldr	r1, [pc, #200]	; (801e298 <etharp_tmr+0x14c>)
 801e1ce:	687a      	ldr	r2, [r7, #4]
 801e1d0:	4613      	mov	r3, r2
 801e1d2:	005b      	lsls	r3, r3, #1
 801e1d4:	4413      	add	r3, r2
 801e1d6:	00db      	lsls	r3, r3, #3
 801e1d8:	440b      	add	r3, r1
 801e1da:	3312      	adds	r3, #18
 801e1dc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e1de:	2b04      	cmp	r3, #4
 801e1e0:	d903      	bls.n	801e1ea <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801e1e2:	6878      	ldr	r0, [r7, #4]
 801e1e4:	f7ff ff80 	bl	801e0e8 <etharp_free_entry>
 801e1e8:	e04a      	b.n	801e280 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801e1ea:	492b      	ldr	r1, [pc, #172]	; (801e298 <etharp_tmr+0x14c>)
 801e1ec:	687a      	ldr	r2, [r7, #4]
 801e1ee:	4613      	mov	r3, r2
 801e1f0:	005b      	lsls	r3, r3, #1
 801e1f2:	4413      	add	r3, r2
 801e1f4:	00db      	lsls	r3, r3, #3
 801e1f6:	440b      	add	r3, r1
 801e1f8:	3314      	adds	r3, #20
 801e1fa:	781b      	ldrb	r3, [r3, #0]
 801e1fc:	2b03      	cmp	r3, #3
 801e1fe:	d10a      	bne.n	801e216 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801e200:	4925      	ldr	r1, [pc, #148]	; (801e298 <etharp_tmr+0x14c>)
 801e202:	687a      	ldr	r2, [r7, #4]
 801e204:	4613      	mov	r3, r2
 801e206:	005b      	lsls	r3, r3, #1
 801e208:	4413      	add	r3, r2
 801e20a:	00db      	lsls	r3, r3, #3
 801e20c:	440b      	add	r3, r1
 801e20e:	3314      	adds	r3, #20
 801e210:	2204      	movs	r2, #4
 801e212:	701a      	strb	r2, [r3, #0]
 801e214:	e034      	b.n	801e280 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801e216:	4920      	ldr	r1, [pc, #128]	; (801e298 <etharp_tmr+0x14c>)
 801e218:	687a      	ldr	r2, [r7, #4]
 801e21a:	4613      	mov	r3, r2
 801e21c:	005b      	lsls	r3, r3, #1
 801e21e:	4413      	add	r3, r2
 801e220:	00db      	lsls	r3, r3, #3
 801e222:	440b      	add	r3, r1
 801e224:	3314      	adds	r3, #20
 801e226:	781b      	ldrb	r3, [r3, #0]
 801e228:	2b04      	cmp	r3, #4
 801e22a:	d10a      	bne.n	801e242 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801e22c:	491a      	ldr	r1, [pc, #104]	; (801e298 <etharp_tmr+0x14c>)
 801e22e:	687a      	ldr	r2, [r7, #4]
 801e230:	4613      	mov	r3, r2
 801e232:	005b      	lsls	r3, r3, #1
 801e234:	4413      	add	r3, r2
 801e236:	00db      	lsls	r3, r3, #3
 801e238:	440b      	add	r3, r1
 801e23a:	3314      	adds	r3, #20
 801e23c:	2202      	movs	r2, #2
 801e23e:	701a      	strb	r2, [r3, #0]
 801e240:	e01e      	b.n	801e280 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e242:	4915      	ldr	r1, [pc, #84]	; (801e298 <etharp_tmr+0x14c>)
 801e244:	687a      	ldr	r2, [r7, #4]
 801e246:	4613      	mov	r3, r2
 801e248:	005b      	lsls	r3, r3, #1
 801e24a:	4413      	add	r3, r2
 801e24c:	00db      	lsls	r3, r3, #3
 801e24e:	440b      	add	r3, r1
 801e250:	3314      	adds	r3, #20
 801e252:	781b      	ldrb	r3, [r3, #0]
 801e254:	2b01      	cmp	r3, #1
 801e256:	d113      	bne.n	801e280 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801e258:	490f      	ldr	r1, [pc, #60]	; (801e298 <etharp_tmr+0x14c>)
 801e25a:	687a      	ldr	r2, [r7, #4]
 801e25c:	4613      	mov	r3, r2
 801e25e:	005b      	lsls	r3, r3, #1
 801e260:	4413      	add	r3, r2
 801e262:	00db      	lsls	r3, r3, #3
 801e264:	440b      	add	r3, r1
 801e266:	3308      	adds	r3, #8
 801e268:	6818      	ldr	r0, [r3, #0]
 801e26a:	687a      	ldr	r2, [r7, #4]
 801e26c:	4613      	mov	r3, r2
 801e26e:	005b      	lsls	r3, r3, #1
 801e270:	4413      	add	r3, r2
 801e272:	00db      	lsls	r3, r3, #3
 801e274:	4a08      	ldr	r2, [pc, #32]	; (801e298 <etharp_tmr+0x14c>)
 801e276:	4413      	add	r3, r2
 801e278:	3304      	adds	r3, #4
 801e27a:	4619      	mov	r1, r3
 801e27c:	f000 fe72 	bl	801ef64 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e280:	687b      	ldr	r3, [r7, #4]
 801e282:	3301      	adds	r3, #1
 801e284:	607b      	str	r3, [r7, #4]
 801e286:	687b      	ldr	r3, [r7, #4]
 801e288:	2b09      	cmp	r3, #9
 801e28a:	f77f af65 	ble.w	801e158 <etharp_tmr+0xc>
      }
    }
  }
}
 801e28e:	bf00      	nop
 801e290:	3708      	adds	r7, #8
 801e292:	46bd      	mov	sp, r7
 801e294:	bd80      	pop	{r7, pc}
 801e296:	bf00      	nop
 801e298:	2000900c 	.word	0x2000900c

0801e29c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801e29c:	b580      	push	{r7, lr}
 801e29e:	b08a      	sub	sp, #40	; 0x28
 801e2a0:	af00      	add	r7, sp, #0
 801e2a2:	60f8      	str	r0, [r7, #12]
 801e2a4:	460b      	mov	r3, r1
 801e2a6:	607a      	str	r2, [r7, #4]
 801e2a8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801e2aa:	230a      	movs	r3, #10
 801e2ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 801e2ae:	230a      	movs	r3, #10
 801e2b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801e2b2:	230a      	movs	r3, #10
 801e2b4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801e2b6:	2300      	movs	r3, #0
 801e2b8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801e2ba:	230a      	movs	r3, #10
 801e2bc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801e2be:	2300      	movs	r3, #0
 801e2c0:	83bb      	strh	r3, [r7, #28]
 801e2c2:	2300      	movs	r3, #0
 801e2c4:	837b      	strh	r3, [r7, #26]
 801e2c6:	2300      	movs	r3, #0
 801e2c8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e2ca:	2300      	movs	r3, #0
 801e2cc:	843b      	strh	r3, [r7, #32]
 801e2ce:	e0ae      	b.n	801e42e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801e2d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e2d4:	49a6      	ldr	r1, [pc, #664]	; (801e570 <etharp_find_entry+0x2d4>)
 801e2d6:	4613      	mov	r3, r2
 801e2d8:	005b      	lsls	r3, r3, #1
 801e2da:	4413      	add	r3, r2
 801e2dc:	00db      	lsls	r3, r3, #3
 801e2de:	440b      	add	r3, r1
 801e2e0:	3314      	adds	r3, #20
 801e2e2:	781b      	ldrb	r3, [r3, #0]
 801e2e4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801e2e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e2ea:	2b0a      	cmp	r3, #10
 801e2ec:	d105      	bne.n	801e2fa <etharp_find_entry+0x5e>
 801e2ee:	7dfb      	ldrb	r3, [r7, #23]
 801e2f0:	2b00      	cmp	r3, #0
 801e2f2:	d102      	bne.n	801e2fa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801e2f4:	8c3b      	ldrh	r3, [r7, #32]
 801e2f6:	847b      	strh	r3, [r7, #34]	; 0x22
 801e2f8:	e095      	b.n	801e426 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801e2fa:	7dfb      	ldrb	r3, [r7, #23]
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	f000 8092 	beq.w	801e426 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801e302:	7dfb      	ldrb	r3, [r7, #23]
 801e304:	2b01      	cmp	r3, #1
 801e306:	d009      	beq.n	801e31c <etharp_find_entry+0x80>
 801e308:	7dfb      	ldrb	r3, [r7, #23]
 801e30a:	2b01      	cmp	r3, #1
 801e30c:	d806      	bhi.n	801e31c <etharp_find_entry+0x80>
 801e30e:	4b99      	ldr	r3, [pc, #612]	; (801e574 <etharp_find_entry+0x2d8>)
 801e310:	f44f 7292 	mov.w	r2, #292	; 0x124
 801e314:	4998      	ldr	r1, [pc, #608]	; (801e578 <etharp_find_entry+0x2dc>)
 801e316:	4899      	ldr	r0, [pc, #612]	; (801e57c <etharp_find_entry+0x2e0>)
 801e318:	f003 f96c 	bl	80215f4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801e31c:	68fb      	ldr	r3, [r7, #12]
 801e31e:	2b00      	cmp	r3, #0
 801e320:	d020      	beq.n	801e364 <etharp_find_entry+0xc8>
 801e322:	68fb      	ldr	r3, [r7, #12]
 801e324:	6819      	ldr	r1, [r3, #0]
 801e326:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e32a:	4891      	ldr	r0, [pc, #580]	; (801e570 <etharp_find_entry+0x2d4>)
 801e32c:	4613      	mov	r3, r2
 801e32e:	005b      	lsls	r3, r3, #1
 801e330:	4413      	add	r3, r2
 801e332:	00db      	lsls	r3, r3, #3
 801e334:	4403      	add	r3, r0
 801e336:	3304      	adds	r3, #4
 801e338:	681b      	ldr	r3, [r3, #0]
 801e33a:	4299      	cmp	r1, r3
 801e33c:	d112      	bne.n	801e364 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801e33e:	687b      	ldr	r3, [r7, #4]
 801e340:	2b00      	cmp	r3, #0
 801e342:	d00c      	beq.n	801e35e <etharp_find_entry+0xc2>
 801e344:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e348:	4989      	ldr	r1, [pc, #548]	; (801e570 <etharp_find_entry+0x2d4>)
 801e34a:	4613      	mov	r3, r2
 801e34c:	005b      	lsls	r3, r3, #1
 801e34e:	4413      	add	r3, r2
 801e350:	00db      	lsls	r3, r3, #3
 801e352:	440b      	add	r3, r1
 801e354:	3308      	adds	r3, #8
 801e356:	681b      	ldr	r3, [r3, #0]
 801e358:	687a      	ldr	r2, [r7, #4]
 801e35a:	429a      	cmp	r2, r3
 801e35c:	d102      	bne.n	801e364 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801e35e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e362:	e100      	b.n	801e566 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801e364:	7dfb      	ldrb	r3, [r7, #23]
 801e366:	2b01      	cmp	r3, #1
 801e368:	d140      	bne.n	801e3ec <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801e36a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e36e:	4980      	ldr	r1, [pc, #512]	; (801e570 <etharp_find_entry+0x2d4>)
 801e370:	4613      	mov	r3, r2
 801e372:	005b      	lsls	r3, r3, #1
 801e374:	4413      	add	r3, r2
 801e376:	00db      	lsls	r3, r3, #3
 801e378:	440b      	add	r3, r1
 801e37a:	681b      	ldr	r3, [r3, #0]
 801e37c:	2b00      	cmp	r3, #0
 801e37e:	d01a      	beq.n	801e3b6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801e380:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e384:	497a      	ldr	r1, [pc, #488]	; (801e570 <etharp_find_entry+0x2d4>)
 801e386:	4613      	mov	r3, r2
 801e388:	005b      	lsls	r3, r3, #1
 801e38a:	4413      	add	r3, r2
 801e38c:	00db      	lsls	r3, r3, #3
 801e38e:	440b      	add	r3, r1
 801e390:	3312      	adds	r3, #18
 801e392:	881b      	ldrh	r3, [r3, #0]
 801e394:	8bba      	ldrh	r2, [r7, #28]
 801e396:	429a      	cmp	r2, r3
 801e398:	d845      	bhi.n	801e426 <etharp_find_entry+0x18a>
            old_queue = i;
 801e39a:	8c3b      	ldrh	r3, [r7, #32]
 801e39c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801e39e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e3a2:	4973      	ldr	r1, [pc, #460]	; (801e570 <etharp_find_entry+0x2d4>)
 801e3a4:	4613      	mov	r3, r2
 801e3a6:	005b      	lsls	r3, r3, #1
 801e3a8:	4413      	add	r3, r2
 801e3aa:	00db      	lsls	r3, r3, #3
 801e3ac:	440b      	add	r3, r1
 801e3ae:	3312      	adds	r3, #18
 801e3b0:	881b      	ldrh	r3, [r3, #0]
 801e3b2:	83bb      	strh	r3, [r7, #28]
 801e3b4:	e037      	b.n	801e426 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801e3b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e3ba:	496d      	ldr	r1, [pc, #436]	; (801e570 <etharp_find_entry+0x2d4>)
 801e3bc:	4613      	mov	r3, r2
 801e3be:	005b      	lsls	r3, r3, #1
 801e3c0:	4413      	add	r3, r2
 801e3c2:	00db      	lsls	r3, r3, #3
 801e3c4:	440b      	add	r3, r1
 801e3c6:	3312      	adds	r3, #18
 801e3c8:	881b      	ldrh	r3, [r3, #0]
 801e3ca:	8b7a      	ldrh	r2, [r7, #26]
 801e3cc:	429a      	cmp	r2, r3
 801e3ce:	d82a      	bhi.n	801e426 <etharp_find_entry+0x18a>
            old_pending = i;
 801e3d0:	8c3b      	ldrh	r3, [r7, #32]
 801e3d2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801e3d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e3d8:	4965      	ldr	r1, [pc, #404]	; (801e570 <etharp_find_entry+0x2d4>)
 801e3da:	4613      	mov	r3, r2
 801e3dc:	005b      	lsls	r3, r3, #1
 801e3de:	4413      	add	r3, r2
 801e3e0:	00db      	lsls	r3, r3, #3
 801e3e2:	440b      	add	r3, r1
 801e3e4:	3312      	adds	r3, #18
 801e3e6:	881b      	ldrh	r3, [r3, #0]
 801e3e8:	837b      	strh	r3, [r7, #26]
 801e3ea:	e01c      	b.n	801e426 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801e3ec:	7dfb      	ldrb	r3, [r7, #23]
 801e3ee:	2b01      	cmp	r3, #1
 801e3f0:	d919      	bls.n	801e426 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801e3f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e3f6:	495e      	ldr	r1, [pc, #376]	; (801e570 <etharp_find_entry+0x2d4>)
 801e3f8:	4613      	mov	r3, r2
 801e3fa:	005b      	lsls	r3, r3, #1
 801e3fc:	4413      	add	r3, r2
 801e3fe:	00db      	lsls	r3, r3, #3
 801e400:	440b      	add	r3, r1
 801e402:	3312      	adds	r3, #18
 801e404:	881b      	ldrh	r3, [r3, #0]
 801e406:	8b3a      	ldrh	r2, [r7, #24]
 801e408:	429a      	cmp	r2, r3
 801e40a:	d80c      	bhi.n	801e426 <etharp_find_entry+0x18a>
            old_stable = i;
 801e40c:	8c3b      	ldrh	r3, [r7, #32]
 801e40e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801e410:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e414:	4956      	ldr	r1, [pc, #344]	; (801e570 <etharp_find_entry+0x2d4>)
 801e416:	4613      	mov	r3, r2
 801e418:	005b      	lsls	r3, r3, #1
 801e41a:	4413      	add	r3, r2
 801e41c:	00db      	lsls	r3, r3, #3
 801e41e:	440b      	add	r3, r1
 801e420:	3312      	adds	r3, #18
 801e422:	881b      	ldrh	r3, [r3, #0]
 801e424:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e426:	8c3b      	ldrh	r3, [r7, #32]
 801e428:	3301      	adds	r3, #1
 801e42a:	b29b      	uxth	r3, r3
 801e42c:	843b      	strh	r3, [r7, #32]
 801e42e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e432:	2b09      	cmp	r3, #9
 801e434:	f77f af4c 	ble.w	801e2d0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801e438:	7afb      	ldrb	r3, [r7, #11]
 801e43a:	f003 0302 	and.w	r3, r3, #2
 801e43e:	2b00      	cmp	r3, #0
 801e440:	d108      	bne.n	801e454 <etharp_find_entry+0x1b8>
 801e442:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e446:	2b0a      	cmp	r3, #10
 801e448:	d107      	bne.n	801e45a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801e44a:	7afb      	ldrb	r3, [r7, #11]
 801e44c:	f003 0301 	and.w	r3, r3, #1
 801e450:	2b00      	cmp	r3, #0
 801e452:	d102      	bne.n	801e45a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801e454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e458:	e085      	b.n	801e566 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801e45a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e45e:	2b09      	cmp	r3, #9
 801e460:	dc02      	bgt.n	801e468 <etharp_find_entry+0x1cc>
    i = empty;
 801e462:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e464:	843b      	strh	r3, [r7, #32]
 801e466:	e039      	b.n	801e4dc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801e468:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801e46c:	2b09      	cmp	r3, #9
 801e46e:	dc14      	bgt.n	801e49a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801e470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e472:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801e474:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e478:	493d      	ldr	r1, [pc, #244]	; (801e570 <etharp_find_entry+0x2d4>)
 801e47a:	4613      	mov	r3, r2
 801e47c:	005b      	lsls	r3, r3, #1
 801e47e:	4413      	add	r3, r2
 801e480:	00db      	lsls	r3, r3, #3
 801e482:	440b      	add	r3, r1
 801e484:	681b      	ldr	r3, [r3, #0]
 801e486:	2b00      	cmp	r3, #0
 801e488:	d018      	beq.n	801e4bc <etharp_find_entry+0x220>
 801e48a:	4b3a      	ldr	r3, [pc, #232]	; (801e574 <etharp_find_entry+0x2d8>)
 801e48c:	f240 126d 	movw	r2, #365	; 0x16d
 801e490:	493b      	ldr	r1, [pc, #236]	; (801e580 <etharp_find_entry+0x2e4>)
 801e492:	483a      	ldr	r0, [pc, #232]	; (801e57c <etharp_find_entry+0x2e0>)
 801e494:	f003 f8ae 	bl	80215f4 <iprintf>
 801e498:	e010      	b.n	801e4bc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801e49a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801e49e:	2b09      	cmp	r3, #9
 801e4a0:	dc02      	bgt.n	801e4a8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801e4a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e4a4:	843b      	strh	r3, [r7, #32]
 801e4a6:	e009      	b.n	801e4bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801e4a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801e4ac:	2b09      	cmp	r3, #9
 801e4ae:	dc02      	bgt.n	801e4b6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801e4b0:	8bfb      	ldrh	r3, [r7, #30]
 801e4b2:	843b      	strh	r3, [r7, #32]
 801e4b4:	e002      	b.n	801e4bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801e4b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e4ba:	e054      	b.n	801e566 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e4bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e4c0:	2b09      	cmp	r3, #9
 801e4c2:	dd06      	ble.n	801e4d2 <etharp_find_entry+0x236>
 801e4c4:	4b2b      	ldr	r3, [pc, #172]	; (801e574 <etharp_find_entry+0x2d8>)
 801e4c6:	f240 127f 	movw	r2, #383	; 0x17f
 801e4ca:	492e      	ldr	r1, [pc, #184]	; (801e584 <etharp_find_entry+0x2e8>)
 801e4cc:	482b      	ldr	r0, [pc, #172]	; (801e57c <etharp_find_entry+0x2e0>)
 801e4ce:	f003 f891 	bl	80215f4 <iprintf>
    etharp_free_entry(i);
 801e4d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e4d6:	4618      	mov	r0, r3
 801e4d8:	f7ff fe06 	bl	801e0e8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e4dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e4e0:	2b09      	cmp	r3, #9
 801e4e2:	dd06      	ble.n	801e4f2 <etharp_find_entry+0x256>
 801e4e4:	4b23      	ldr	r3, [pc, #140]	; (801e574 <etharp_find_entry+0x2d8>)
 801e4e6:	f240 1283 	movw	r2, #387	; 0x183
 801e4ea:	4926      	ldr	r1, [pc, #152]	; (801e584 <etharp_find_entry+0x2e8>)
 801e4ec:	4823      	ldr	r0, [pc, #140]	; (801e57c <etharp_find_entry+0x2e0>)
 801e4ee:	f003 f881 	bl	80215f4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801e4f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e4f6:	491e      	ldr	r1, [pc, #120]	; (801e570 <etharp_find_entry+0x2d4>)
 801e4f8:	4613      	mov	r3, r2
 801e4fa:	005b      	lsls	r3, r3, #1
 801e4fc:	4413      	add	r3, r2
 801e4fe:	00db      	lsls	r3, r3, #3
 801e500:	440b      	add	r3, r1
 801e502:	3314      	adds	r3, #20
 801e504:	781b      	ldrb	r3, [r3, #0]
 801e506:	2b00      	cmp	r3, #0
 801e508:	d006      	beq.n	801e518 <etharp_find_entry+0x27c>
 801e50a:	4b1a      	ldr	r3, [pc, #104]	; (801e574 <etharp_find_entry+0x2d8>)
 801e50c:	f240 1285 	movw	r2, #389	; 0x185
 801e510:	491d      	ldr	r1, [pc, #116]	; (801e588 <etharp_find_entry+0x2ec>)
 801e512:	481a      	ldr	r0, [pc, #104]	; (801e57c <etharp_find_entry+0x2e0>)
 801e514:	f003 f86e 	bl	80215f4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801e518:	68fb      	ldr	r3, [r7, #12]
 801e51a:	2b00      	cmp	r3, #0
 801e51c:	d00b      	beq.n	801e536 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801e51e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e522:	68fb      	ldr	r3, [r7, #12]
 801e524:	6819      	ldr	r1, [r3, #0]
 801e526:	4812      	ldr	r0, [pc, #72]	; (801e570 <etharp_find_entry+0x2d4>)
 801e528:	4613      	mov	r3, r2
 801e52a:	005b      	lsls	r3, r3, #1
 801e52c:	4413      	add	r3, r2
 801e52e:	00db      	lsls	r3, r3, #3
 801e530:	4403      	add	r3, r0
 801e532:	3304      	adds	r3, #4
 801e534:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801e536:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e53a:	490d      	ldr	r1, [pc, #52]	; (801e570 <etharp_find_entry+0x2d4>)
 801e53c:	4613      	mov	r3, r2
 801e53e:	005b      	lsls	r3, r3, #1
 801e540:	4413      	add	r3, r2
 801e542:	00db      	lsls	r3, r3, #3
 801e544:	440b      	add	r3, r1
 801e546:	3312      	adds	r3, #18
 801e548:	2200      	movs	r2, #0
 801e54a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801e54c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e550:	4907      	ldr	r1, [pc, #28]	; (801e570 <etharp_find_entry+0x2d4>)
 801e552:	4613      	mov	r3, r2
 801e554:	005b      	lsls	r3, r3, #1
 801e556:	4413      	add	r3, r2
 801e558:	00db      	lsls	r3, r3, #3
 801e55a:	440b      	add	r3, r1
 801e55c:	3308      	adds	r3, #8
 801e55e:	687a      	ldr	r2, [r7, #4]
 801e560:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801e562:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801e566:	4618      	mov	r0, r3
 801e568:	3728      	adds	r7, #40	; 0x28
 801e56a:	46bd      	mov	sp, r7
 801e56c:	bd80      	pop	{r7, pc}
 801e56e:	bf00      	nop
 801e570:	2000900c 	.word	0x2000900c
 801e574:	08024cfc 	.word	0x08024cfc
 801e578:	08024d34 	.word	0x08024d34
 801e57c:	08024d74 	.word	0x08024d74
 801e580:	08024d9c 	.word	0x08024d9c
 801e584:	08024db4 	.word	0x08024db4
 801e588:	08024dc8 	.word	0x08024dc8

0801e58c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801e58c:	b580      	push	{r7, lr}
 801e58e:	b088      	sub	sp, #32
 801e590:	af02      	add	r7, sp, #8
 801e592:	60f8      	str	r0, [r7, #12]
 801e594:	60b9      	str	r1, [r7, #8]
 801e596:	607a      	str	r2, [r7, #4]
 801e598:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801e59a:	68fb      	ldr	r3, [r7, #12]
 801e59c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e5a0:	2b06      	cmp	r3, #6
 801e5a2:	d006      	beq.n	801e5b2 <etharp_update_arp_entry+0x26>
 801e5a4:	4b48      	ldr	r3, [pc, #288]	; (801e6c8 <etharp_update_arp_entry+0x13c>)
 801e5a6:	f240 12a9 	movw	r2, #425	; 0x1a9
 801e5aa:	4948      	ldr	r1, [pc, #288]	; (801e6cc <etharp_update_arp_entry+0x140>)
 801e5ac:	4848      	ldr	r0, [pc, #288]	; (801e6d0 <etharp_update_arp_entry+0x144>)
 801e5ae:	f003 f821 	bl	80215f4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801e5b2:	68bb      	ldr	r3, [r7, #8]
 801e5b4:	2b00      	cmp	r3, #0
 801e5b6:	d012      	beq.n	801e5de <etharp_update_arp_entry+0x52>
 801e5b8:	68bb      	ldr	r3, [r7, #8]
 801e5ba:	681b      	ldr	r3, [r3, #0]
 801e5bc:	2b00      	cmp	r3, #0
 801e5be:	d00e      	beq.n	801e5de <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e5c0:	68bb      	ldr	r3, [r7, #8]
 801e5c2:	681b      	ldr	r3, [r3, #0]
 801e5c4:	68f9      	ldr	r1, [r7, #12]
 801e5c6:	4618      	mov	r0, r3
 801e5c8:	f001 f91e 	bl	801f808 <ip4_addr_isbroadcast_u32>
 801e5cc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d105      	bne.n	801e5de <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801e5d2:	68bb      	ldr	r3, [r7, #8]
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e5da:	2be0      	cmp	r3, #224	; 0xe0
 801e5dc:	d102      	bne.n	801e5e4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801e5de:	f06f 030f 	mvn.w	r3, #15
 801e5e2:	e06c      	b.n	801e6be <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801e5e4:	78fb      	ldrb	r3, [r7, #3]
 801e5e6:	68fa      	ldr	r2, [r7, #12]
 801e5e8:	4619      	mov	r1, r3
 801e5ea:	68b8      	ldr	r0, [r7, #8]
 801e5ec:	f7ff fe56 	bl	801e29c <etharp_find_entry>
 801e5f0:	4603      	mov	r3, r0
 801e5f2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801e5f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	da02      	bge.n	801e602 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801e5fc:	8afb      	ldrh	r3, [r7, #22]
 801e5fe:	b25b      	sxtb	r3, r3
 801e600:	e05d      	b.n	801e6be <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801e602:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e606:	4933      	ldr	r1, [pc, #204]	; (801e6d4 <etharp_update_arp_entry+0x148>)
 801e608:	4613      	mov	r3, r2
 801e60a:	005b      	lsls	r3, r3, #1
 801e60c:	4413      	add	r3, r2
 801e60e:	00db      	lsls	r3, r3, #3
 801e610:	440b      	add	r3, r1
 801e612:	3314      	adds	r3, #20
 801e614:	2202      	movs	r2, #2
 801e616:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801e618:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e61c:	492d      	ldr	r1, [pc, #180]	; (801e6d4 <etharp_update_arp_entry+0x148>)
 801e61e:	4613      	mov	r3, r2
 801e620:	005b      	lsls	r3, r3, #1
 801e622:	4413      	add	r3, r2
 801e624:	00db      	lsls	r3, r3, #3
 801e626:	440b      	add	r3, r1
 801e628:	3308      	adds	r3, #8
 801e62a:	68fa      	ldr	r2, [r7, #12]
 801e62c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801e62e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e632:	4613      	mov	r3, r2
 801e634:	005b      	lsls	r3, r3, #1
 801e636:	4413      	add	r3, r2
 801e638:	00db      	lsls	r3, r3, #3
 801e63a:	3308      	adds	r3, #8
 801e63c:	4a25      	ldr	r2, [pc, #148]	; (801e6d4 <etharp_update_arp_entry+0x148>)
 801e63e:	4413      	add	r3, r2
 801e640:	3304      	adds	r3, #4
 801e642:	2206      	movs	r2, #6
 801e644:	6879      	ldr	r1, [r7, #4]
 801e646:	4618      	mov	r0, r3
 801e648:	f002 ff19 	bl	802147e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801e64c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e650:	4920      	ldr	r1, [pc, #128]	; (801e6d4 <etharp_update_arp_entry+0x148>)
 801e652:	4613      	mov	r3, r2
 801e654:	005b      	lsls	r3, r3, #1
 801e656:	4413      	add	r3, r2
 801e658:	00db      	lsls	r3, r3, #3
 801e65a:	440b      	add	r3, r1
 801e65c:	3312      	adds	r3, #18
 801e65e:	2200      	movs	r2, #0
 801e660:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801e662:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e666:	491b      	ldr	r1, [pc, #108]	; (801e6d4 <etharp_update_arp_entry+0x148>)
 801e668:	4613      	mov	r3, r2
 801e66a:	005b      	lsls	r3, r3, #1
 801e66c:	4413      	add	r3, r2
 801e66e:	00db      	lsls	r3, r3, #3
 801e670:	440b      	add	r3, r1
 801e672:	681b      	ldr	r3, [r3, #0]
 801e674:	2b00      	cmp	r3, #0
 801e676:	d021      	beq.n	801e6bc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801e678:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e67c:	4915      	ldr	r1, [pc, #84]	; (801e6d4 <etharp_update_arp_entry+0x148>)
 801e67e:	4613      	mov	r3, r2
 801e680:	005b      	lsls	r3, r3, #1
 801e682:	4413      	add	r3, r2
 801e684:	00db      	lsls	r3, r3, #3
 801e686:	440b      	add	r3, r1
 801e688:	681b      	ldr	r3, [r3, #0]
 801e68a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801e68c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e690:	4910      	ldr	r1, [pc, #64]	; (801e6d4 <etharp_update_arp_entry+0x148>)
 801e692:	4613      	mov	r3, r2
 801e694:	005b      	lsls	r3, r3, #1
 801e696:	4413      	add	r3, r2
 801e698:	00db      	lsls	r3, r3, #3
 801e69a:	440b      	add	r3, r1
 801e69c:	2200      	movs	r2, #0
 801e69e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801e6a0:	68fb      	ldr	r3, [r7, #12]
 801e6a2:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 801e6a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e6aa:	9300      	str	r3, [sp, #0]
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	6939      	ldr	r1, [r7, #16]
 801e6b0:	68f8      	ldr	r0, [r7, #12]
 801e6b2:	f002 f83f 	bl	8020734 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801e6b6:	6938      	ldr	r0, [r7, #16]
 801e6b8:	f7f7 fc38 	bl	8015f2c <pbuf_free>
  }
  return ERR_OK;
 801e6bc:	2300      	movs	r3, #0
}
 801e6be:	4618      	mov	r0, r3
 801e6c0:	3718      	adds	r7, #24
 801e6c2:	46bd      	mov	sp, r7
 801e6c4:	bd80      	pop	{r7, pc}
 801e6c6:	bf00      	nop
 801e6c8:	08024cfc 	.word	0x08024cfc
 801e6cc:	08024df4 	.word	0x08024df4
 801e6d0:	08024d74 	.word	0x08024d74
 801e6d4:	2000900c 	.word	0x2000900c

0801e6d8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801e6d8:	b580      	push	{r7, lr}
 801e6da:	b084      	sub	sp, #16
 801e6dc:	af00      	add	r7, sp, #0
 801e6de:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e6e0:	2300      	movs	r3, #0
 801e6e2:	60fb      	str	r3, [r7, #12]
 801e6e4:	e01e      	b.n	801e724 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801e6e6:	4913      	ldr	r1, [pc, #76]	; (801e734 <etharp_cleanup_netif+0x5c>)
 801e6e8:	68fa      	ldr	r2, [r7, #12]
 801e6ea:	4613      	mov	r3, r2
 801e6ec:	005b      	lsls	r3, r3, #1
 801e6ee:	4413      	add	r3, r2
 801e6f0:	00db      	lsls	r3, r3, #3
 801e6f2:	440b      	add	r3, r1
 801e6f4:	3314      	adds	r3, #20
 801e6f6:	781b      	ldrb	r3, [r3, #0]
 801e6f8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801e6fa:	7afb      	ldrb	r3, [r7, #11]
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	d00e      	beq.n	801e71e <etharp_cleanup_netif+0x46>
 801e700:	490c      	ldr	r1, [pc, #48]	; (801e734 <etharp_cleanup_netif+0x5c>)
 801e702:	68fa      	ldr	r2, [r7, #12]
 801e704:	4613      	mov	r3, r2
 801e706:	005b      	lsls	r3, r3, #1
 801e708:	4413      	add	r3, r2
 801e70a:	00db      	lsls	r3, r3, #3
 801e70c:	440b      	add	r3, r1
 801e70e:	3308      	adds	r3, #8
 801e710:	681b      	ldr	r3, [r3, #0]
 801e712:	687a      	ldr	r2, [r7, #4]
 801e714:	429a      	cmp	r2, r3
 801e716:	d102      	bne.n	801e71e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801e718:	68f8      	ldr	r0, [r7, #12]
 801e71a:	f7ff fce5 	bl	801e0e8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e71e:	68fb      	ldr	r3, [r7, #12]
 801e720:	3301      	adds	r3, #1
 801e722:	60fb      	str	r3, [r7, #12]
 801e724:	68fb      	ldr	r3, [r7, #12]
 801e726:	2b09      	cmp	r3, #9
 801e728:	dddd      	ble.n	801e6e6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801e72a:	bf00      	nop
 801e72c:	3710      	adds	r7, #16
 801e72e:	46bd      	mov	sp, r7
 801e730:	bd80      	pop	{r7, pc}
 801e732:	bf00      	nop
 801e734:	2000900c 	.word	0x2000900c

0801e738 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801e738:	b5b0      	push	{r4, r5, r7, lr}
 801e73a:	b08a      	sub	sp, #40	; 0x28
 801e73c:	af04      	add	r7, sp, #16
 801e73e:	6078      	str	r0, [r7, #4]
 801e740:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801e742:	683b      	ldr	r3, [r7, #0]
 801e744:	2b00      	cmp	r3, #0
 801e746:	d107      	bne.n	801e758 <etharp_input+0x20>
 801e748:	4b3f      	ldr	r3, [pc, #252]	; (801e848 <etharp_input+0x110>)
 801e74a:	f240 228a 	movw	r2, #650	; 0x28a
 801e74e:	493f      	ldr	r1, [pc, #252]	; (801e84c <etharp_input+0x114>)
 801e750:	483f      	ldr	r0, [pc, #252]	; (801e850 <etharp_input+0x118>)
 801e752:	f002 ff4f 	bl	80215f4 <iprintf>
 801e756:	e074      	b.n	801e842 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801e758:	687b      	ldr	r3, [r7, #4]
 801e75a:	685b      	ldr	r3, [r3, #4]
 801e75c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801e75e:	693b      	ldr	r3, [r7, #16]
 801e760:	881b      	ldrh	r3, [r3, #0]
 801e762:	b29b      	uxth	r3, r3
 801e764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e768:	d10c      	bne.n	801e784 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801e76a:	693b      	ldr	r3, [r7, #16]
 801e76c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801e76e:	2b06      	cmp	r3, #6
 801e770:	d108      	bne.n	801e784 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801e772:	693b      	ldr	r3, [r7, #16]
 801e774:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801e776:	2b04      	cmp	r3, #4
 801e778:	d104      	bne.n	801e784 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801e77a:	693b      	ldr	r3, [r7, #16]
 801e77c:	885b      	ldrh	r3, [r3, #2]
 801e77e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801e780:	2b08      	cmp	r3, #8
 801e782:	d003      	beq.n	801e78c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801e784:	6878      	ldr	r0, [r7, #4]
 801e786:	f7f7 fbd1 	bl	8015f2c <pbuf_free>
    return;
 801e78a:	e05a      	b.n	801e842 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801e78c:	693b      	ldr	r3, [r7, #16]
 801e78e:	330e      	adds	r3, #14
 801e790:	681b      	ldr	r3, [r3, #0]
 801e792:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801e794:	693b      	ldr	r3, [r7, #16]
 801e796:	3318      	adds	r3, #24
 801e798:	681b      	ldr	r3, [r3, #0]
 801e79a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e79c:	683b      	ldr	r3, [r7, #0]
 801e79e:	3304      	adds	r3, #4
 801e7a0:	681b      	ldr	r3, [r3, #0]
 801e7a2:	2b00      	cmp	r3, #0
 801e7a4:	d102      	bne.n	801e7ac <etharp_input+0x74>
    for_us = 0;
 801e7a6:	2300      	movs	r3, #0
 801e7a8:	75fb      	strb	r3, [r7, #23]
 801e7aa:	e009      	b.n	801e7c0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801e7ac:	68ba      	ldr	r2, [r7, #8]
 801e7ae:	683b      	ldr	r3, [r7, #0]
 801e7b0:	3304      	adds	r3, #4
 801e7b2:	681b      	ldr	r3, [r3, #0]
 801e7b4:	429a      	cmp	r2, r3
 801e7b6:	bf0c      	ite	eq
 801e7b8:	2301      	moveq	r3, #1
 801e7ba:	2300      	movne	r3, #0
 801e7bc:	b2db      	uxtb	r3, r3
 801e7be:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801e7c0:	693b      	ldr	r3, [r7, #16]
 801e7c2:	f103 0208 	add.w	r2, r3, #8
 801e7c6:	7dfb      	ldrb	r3, [r7, #23]
 801e7c8:	2b00      	cmp	r3, #0
 801e7ca:	d001      	beq.n	801e7d0 <etharp_input+0x98>
 801e7cc:	2301      	movs	r3, #1
 801e7ce:	e000      	b.n	801e7d2 <etharp_input+0x9a>
 801e7d0:	2302      	movs	r3, #2
 801e7d2:	f107 010c 	add.w	r1, r7, #12
 801e7d6:	6838      	ldr	r0, [r7, #0]
 801e7d8:	f7ff fed8 	bl	801e58c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801e7dc:	693b      	ldr	r3, [r7, #16]
 801e7de:	88db      	ldrh	r3, [r3, #6]
 801e7e0:	b29b      	uxth	r3, r3
 801e7e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e7e6:	d003      	beq.n	801e7f0 <etharp_input+0xb8>
 801e7e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e7ec:	d01e      	beq.n	801e82c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801e7ee:	e025      	b.n	801e83c <etharp_input+0x104>
      if (for_us) {
 801e7f0:	7dfb      	ldrb	r3, [r7, #23]
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d021      	beq.n	801e83a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801e7f6:	683b      	ldr	r3, [r7, #0]
 801e7f8:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 801e7fc:	693b      	ldr	r3, [r7, #16]
 801e7fe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801e802:	683b      	ldr	r3, [r7, #0]
 801e804:	f103 052e 	add.w	r5, r3, #46	; 0x2e
 801e808:	683b      	ldr	r3, [r7, #0]
 801e80a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801e80c:	693a      	ldr	r2, [r7, #16]
 801e80e:	3208      	adds	r2, #8
        etharp_raw(netif,
 801e810:	2102      	movs	r1, #2
 801e812:	9103      	str	r1, [sp, #12]
 801e814:	f107 010c 	add.w	r1, r7, #12
 801e818:	9102      	str	r1, [sp, #8]
 801e81a:	9201      	str	r2, [sp, #4]
 801e81c:	9300      	str	r3, [sp, #0]
 801e81e:	462b      	mov	r3, r5
 801e820:	4622      	mov	r2, r4
 801e822:	4601      	mov	r1, r0
 801e824:	6838      	ldr	r0, [r7, #0]
 801e826:	f000 faef 	bl	801ee08 <etharp_raw>
      break;
 801e82a:	e006      	b.n	801e83a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801e82c:	f107 030c 	add.w	r3, r7, #12
 801e830:	4619      	mov	r1, r3
 801e832:	6838      	ldr	r0, [r7, #0]
 801e834:	f7fe f9fe 	bl	801cc34 <dhcp_arp_reply>
      break;
 801e838:	e000      	b.n	801e83c <etharp_input+0x104>
      break;
 801e83a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801e83c:	6878      	ldr	r0, [r7, #4]
 801e83e:	f7f7 fb75 	bl	8015f2c <pbuf_free>
}
 801e842:	3718      	adds	r7, #24
 801e844:	46bd      	mov	sp, r7
 801e846:	bdb0      	pop	{r4, r5, r7, pc}
 801e848:	08024cfc 	.word	0x08024cfc
 801e84c:	08024e4c 	.word	0x08024e4c
 801e850:	08024d74 	.word	0x08024d74

0801e854 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801e854:	b580      	push	{r7, lr}
 801e856:	b086      	sub	sp, #24
 801e858:	af02      	add	r7, sp, #8
 801e85a:	60f8      	str	r0, [r7, #12]
 801e85c:	60b9      	str	r1, [r7, #8]
 801e85e:	4613      	mov	r3, r2
 801e860:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801e862:	79fa      	ldrb	r2, [r7, #7]
 801e864:	4944      	ldr	r1, [pc, #272]	; (801e978 <etharp_output_to_arp_index+0x124>)
 801e866:	4613      	mov	r3, r2
 801e868:	005b      	lsls	r3, r3, #1
 801e86a:	4413      	add	r3, r2
 801e86c:	00db      	lsls	r3, r3, #3
 801e86e:	440b      	add	r3, r1
 801e870:	3314      	adds	r3, #20
 801e872:	781b      	ldrb	r3, [r3, #0]
 801e874:	2b01      	cmp	r3, #1
 801e876:	d806      	bhi.n	801e886 <etharp_output_to_arp_index+0x32>
 801e878:	4b40      	ldr	r3, [pc, #256]	; (801e97c <etharp_output_to_arp_index+0x128>)
 801e87a:	f240 22ef 	movw	r2, #751	; 0x2ef
 801e87e:	4940      	ldr	r1, [pc, #256]	; (801e980 <etharp_output_to_arp_index+0x12c>)
 801e880:	4840      	ldr	r0, [pc, #256]	; (801e984 <etharp_output_to_arp_index+0x130>)
 801e882:	f002 feb7 	bl	80215f4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801e886:	79fa      	ldrb	r2, [r7, #7]
 801e888:	493b      	ldr	r1, [pc, #236]	; (801e978 <etharp_output_to_arp_index+0x124>)
 801e88a:	4613      	mov	r3, r2
 801e88c:	005b      	lsls	r3, r3, #1
 801e88e:	4413      	add	r3, r2
 801e890:	00db      	lsls	r3, r3, #3
 801e892:	440b      	add	r3, r1
 801e894:	3314      	adds	r3, #20
 801e896:	781b      	ldrb	r3, [r3, #0]
 801e898:	2b02      	cmp	r3, #2
 801e89a:	d153      	bne.n	801e944 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801e89c:	79fa      	ldrb	r2, [r7, #7]
 801e89e:	4936      	ldr	r1, [pc, #216]	; (801e978 <etharp_output_to_arp_index+0x124>)
 801e8a0:	4613      	mov	r3, r2
 801e8a2:	005b      	lsls	r3, r3, #1
 801e8a4:	4413      	add	r3, r2
 801e8a6:	00db      	lsls	r3, r3, #3
 801e8a8:	440b      	add	r3, r1
 801e8aa:	3312      	adds	r3, #18
 801e8ac:	881b      	ldrh	r3, [r3, #0]
 801e8ae:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801e8b2:	d919      	bls.n	801e8e8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801e8b4:	79fa      	ldrb	r2, [r7, #7]
 801e8b6:	4613      	mov	r3, r2
 801e8b8:	005b      	lsls	r3, r3, #1
 801e8ba:	4413      	add	r3, r2
 801e8bc:	00db      	lsls	r3, r3, #3
 801e8be:	4a2e      	ldr	r2, [pc, #184]	; (801e978 <etharp_output_to_arp_index+0x124>)
 801e8c0:	4413      	add	r3, r2
 801e8c2:	3304      	adds	r3, #4
 801e8c4:	4619      	mov	r1, r3
 801e8c6:	68f8      	ldr	r0, [r7, #12]
 801e8c8:	f000 fb4c 	bl	801ef64 <etharp_request>
 801e8cc:	4603      	mov	r3, r0
 801e8ce:	2b00      	cmp	r3, #0
 801e8d0:	d138      	bne.n	801e944 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801e8d2:	79fa      	ldrb	r2, [r7, #7]
 801e8d4:	4928      	ldr	r1, [pc, #160]	; (801e978 <etharp_output_to_arp_index+0x124>)
 801e8d6:	4613      	mov	r3, r2
 801e8d8:	005b      	lsls	r3, r3, #1
 801e8da:	4413      	add	r3, r2
 801e8dc:	00db      	lsls	r3, r3, #3
 801e8de:	440b      	add	r3, r1
 801e8e0:	3314      	adds	r3, #20
 801e8e2:	2203      	movs	r2, #3
 801e8e4:	701a      	strb	r2, [r3, #0]
 801e8e6:	e02d      	b.n	801e944 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801e8e8:	79fa      	ldrb	r2, [r7, #7]
 801e8ea:	4923      	ldr	r1, [pc, #140]	; (801e978 <etharp_output_to_arp_index+0x124>)
 801e8ec:	4613      	mov	r3, r2
 801e8ee:	005b      	lsls	r3, r3, #1
 801e8f0:	4413      	add	r3, r2
 801e8f2:	00db      	lsls	r3, r3, #3
 801e8f4:	440b      	add	r3, r1
 801e8f6:	3312      	adds	r3, #18
 801e8f8:	881b      	ldrh	r3, [r3, #0]
 801e8fa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801e8fe:	d321      	bcc.n	801e944 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801e900:	79fa      	ldrb	r2, [r7, #7]
 801e902:	4613      	mov	r3, r2
 801e904:	005b      	lsls	r3, r3, #1
 801e906:	4413      	add	r3, r2
 801e908:	00db      	lsls	r3, r3, #3
 801e90a:	4a1b      	ldr	r2, [pc, #108]	; (801e978 <etharp_output_to_arp_index+0x124>)
 801e90c:	4413      	add	r3, r2
 801e90e:	1d19      	adds	r1, r3, #4
 801e910:	79fa      	ldrb	r2, [r7, #7]
 801e912:	4613      	mov	r3, r2
 801e914:	005b      	lsls	r3, r3, #1
 801e916:	4413      	add	r3, r2
 801e918:	00db      	lsls	r3, r3, #3
 801e91a:	3308      	adds	r3, #8
 801e91c:	4a16      	ldr	r2, [pc, #88]	; (801e978 <etharp_output_to_arp_index+0x124>)
 801e91e:	4413      	add	r3, r2
 801e920:	3304      	adds	r3, #4
 801e922:	461a      	mov	r2, r3
 801e924:	68f8      	ldr	r0, [r7, #12]
 801e926:	f000 fafb 	bl	801ef20 <etharp_request_dst>
 801e92a:	4603      	mov	r3, r0
 801e92c:	2b00      	cmp	r3, #0
 801e92e:	d109      	bne.n	801e944 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801e930:	79fa      	ldrb	r2, [r7, #7]
 801e932:	4911      	ldr	r1, [pc, #68]	; (801e978 <etharp_output_to_arp_index+0x124>)
 801e934:	4613      	mov	r3, r2
 801e936:	005b      	lsls	r3, r3, #1
 801e938:	4413      	add	r3, r2
 801e93a:	00db      	lsls	r3, r3, #3
 801e93c:	440b      	add	r3, r1
 801e93e:	3314      	adds	r3, #20
 801e940:	2203      	movs	r2, #3
 801e942:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801e944:	68fb      	ldr	r3, [r7, #12]
 801e946:	f103 012e 	add.w	r1, r3, #46	; 0x2e
 801e94a:	79fa      	ldrb	r2, [r7, #7]
 801e94c:	4613      	mov	r3, r2
 801e94e:	005b      	lsls	r3, r3, #1
 801e950:	4413      	add	r3, r2
 801e952:	00db      	lsls	r3, r3, #3
 801e954:	3308      	adds	r3, #8
 801e956:	4a08      	ldr	r2, [pc, #32]	; (801e978 <etharp_output_to_arp_index+0x124>)
 801e958:	4413      	add	r3, r2
 801e95a:	1d1a      	adds	r2, r3, #4
 801e95c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e960:	9300      	str	r3, [sp, #0]
 801e962:	4613      	mov	r3, r2
 801e964:	460a      	mov	r2, r1
 801e966:	68b9      	ldr	r1, [r7, #8]
 801e968:	68f8      	ldr	r0, [r7, #12]
 801e96a:	f001 fee3 	bl	8020734 <ethernet_output>
 801e96e:	4603      	mov	r3, r0
}
 801e970:	4618      	mov	r0, r3
 801e972:	3710      	adds	r7, #16
 801e974:	46bd      	mov	sp, r7
 801e976:	bd80      	pop	{r7, pc}
 801e978:	2000900c 	.word	0x2000900c
 801e97c:	08024cfc 	.word	0x08024cfc
 801e980:	08024e6c 	.word	0x08024e6c
 801e984:	08024d74 	.word	0x08024d74

0801e988 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801e988:	b580      	push	{r7, lr}
 801e98a:	b08a      	sub	sp, #40	; 0x28
 801e98c:	af02      	add	r7, sp, #8
 801e98e:	60f8      	str	r0, [r7, #12]
 801e990:	60b9      	str	r1, [r7, #8]
 801e992:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801e998:	68fb      	ldr	r3, [r7, #12]
 801e99a:	2b00      	cmp	r3, #0
 801e99c:	d106      	bne.n	801e9ac <etharp_output+0x24>
 801e99e:	4b73      	ldr	r3, [pc, #460]	; (801eb6c <etharp_output+0x1e4>)
 801e9a0:	f240 321e 	movw	r2, #798	; 0x31e
 801e9a4:	4972      	ldr	r1, [pc, #456]	; (801eb70 <etharp_output+0x1e8>)
 801e9a6:	4873      	ldr	r0, [pc, #460]	; (801eb74 <etharp_output+0x1ec>)
 801e9a8:	f002 fe24 	bl	80215f4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801e9ac:	68bb      	ldr	r3, [r7, #8]
 801e9ae:	2b00      	cmp	r3, #0
 801e9b0:	d106      	bne.n	801e9c0 <etharp_output+0x38>
 801e9b2:	4b6e      	ldr	r3, [pc, #440]	; (801eb6c <etharp_output+0x1e4>)
 801e9b4:	f240 321f 	movw	r2, #799	; 0x31f
 801e9b8:	496f      	ldr	r1, [pc, #444]	; (801eb78 <etharp_output+0x1f0>)
 801e9ba:	486e      	ldr	r0, [pc, #440]	; (801eb74 <etharp_output+0x1ec>)
 801e9bc:	f002 fe1a 	bl	80215f4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801e9c0:	687b      	ldr	r3, [r7, #4]
 801e9c2:	2b00      	cmp	r3, #0
 801e9c4:	d106      	bne.n	801e9d4 <etharp_output+0x4c>
 801e9c6:	4b69      	ldr	r3, [pc, #420]	; (801eb6c <etharp_output+0x1e4>)
 801e9c8:	f44f 7248 	mov.w	r2, #800	; 0x320
 801e9cc:	496b      	ldr	r1, [pc, #428]	; (801eb7c <etharp_output+0x1f4>)
 801e9ce:	4869      	ldr	r0, [pc, #420]	; (801eb74 <etharp_output+0x1ec>)
 801e9d0:	f002 fe10 	bl	80215f4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801e9d4:	687b      	ldr	r3, [r7, #4]
 801e9d6:	681b      	ldr	r3, [r3, #0]
 801e9d8:	68f9      	ldr	r1, [r7, #12]
 801e9da:	4618      	mov	r0, r3
 801e9dc:	f000 ff14 	bl	801f808 <ip4_addr_isbroadcast_u32>
 801e9e0:	4603      	mov	r3, r0
 801e9e2:	2b00      	cmp	r3, #0
 801e9e4:	d002      	beq.n	801e9ec <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801e9e6:	4b66      	ldr	r3, [pc, #408]	; (801eb80 <etharp_output+0x1f8>)
 801e9e8:	61fb      	str	r3, [r7, #28]
 801e9ea:	e0af      	b.n	801eb4c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	681b      	ldr	r3, [r3, #0]
 801e9f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e9f4:	2be0      	cmp	r3, #224	; 0xe0
 801e9f6:	d118      	bne.n	801ea2a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801e9f8:	2301      	movs	r3, #1
 801e9fa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801e9fc:	2300      	movs	r3, #0
 801e9fe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801ea00:	235e      	movs	r3, #94	; 0x5e
 801ea02:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801ea04:	687b      	ldr	r3, [r7, #4]
 801ea06:	3301      	adds	r3, #1
 801ea08:	781b      	ldrb	r3, [r3, #0]
 801ea0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ea0e:	b2db      	uxtb	r3, r3
 801ea10:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801ea12:	687b      	ldr	r3, [r7, #4]
 801ea14:	3302      	adds	r3, #2
 801ea16:	781b      	ldrb	r3, [r3, #0]
 801ea18:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801ea1a:	687b      	ldr	r3, [r7, #4]
 801ea1c:	3303      	adds	r3, #3
 801ea1e:	781b      	ldrb	r3, [r3, #0]
 801ea20:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801ea22:	f107 0310 	add.w	r3, r7, #16
 801ea26:	61fb      	str	r3, [r7, #28]
 801ea28:	e090      	b.n	801eb4c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ea2a:	687b      	ldr	r3, [r7, #4]
 801ea2c:	681a      	ldr	r2, [r3, #0]
 801ea2e:	68fb      	ldr	r3, [r7, #12]
 801ea30:	3304      	adds	r3, #4
 801ea32:	681b      	ldr	r3, [r3, #0]
 801ea34:	405a      	eors	r2, r3
 801ea36:	68fb      	ldr	r3, [r7, #12]
 801ea38:	3308      	adds	r3, #8
 801ea3a:	681b      	ldr	r3, [r3, #0]
 801ea3c:	4013      	ands	r3, r2
 801ea3e:	2b00      	cmp	r3, #0
 801ea40:	d012      	beq.n	801ea68 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801ea42:	687b      	ldr	r3, [r7, #4]
 801ea44:	681b      	ldr	r3, [r3, #0]
 801ea46:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ea48:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801ea4c:	4293      	cmp	r3, r2
 801ea4e:	d00b      	beq.n	801ea68 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801ea50:	68fb      	ldr	r3, [r7, #12]
 801ea52:	330c      	adds	r3, #12
 801ea54:	681b      	ldr	r3, [r3, #0]
 801ea56:	2b00      	cmp	r3, #0
 801ea58:	d003      	beq.n	801ea62 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801ea5a:	68fb      	ldr	r3, [r7, #12]
 801ea5c:	330c      	adds	r3, #12
 801ea5e:	61bb      	str	r3, [r7, #24]
 801ea60:	e002      	b.n	801ea68 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801ea62:	f06f 0303 	mvn.w	r3, #3
 801ea66:	e07d      	b.n	801eb64 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ea68:	4b46      	ldr	r3, [pc, #280]	; (801eb84 <etharp_output+0x1fc>)
 801ea6a:	781b      	ldrb	r3, [r3, #0]
 801ea6c:	4619      	mov	r1, r3
 801ea6e:	4a46      	ldr	r2, [pc, #280]	; (801eb88 <etharp_output+0x200>)
 801ea70:	460b      	mov	r3, r1
 801ea72:	005b      	lsls	r3, r3, #1
 801ea74:	440b      	add	r3, r1
 801ea76:	00db      	lsls	r3, r3, #3
 801ea78:	4413      	add	r3, r2
 801ea7a:	3314      	adds	r3, #20
 801ea7c:	781b      	ldrb	r3, [r3, #0]
 801ea7e:	2b01      	cmp	r3, #1
 801ea80:	d925      	bls.n	801eace <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ea82:	4b40      	ldr	r3, [pc, #256]	; (801eb84 <etharp_output+0x1fc>)
 801ea84:	781b      	ldrb	r3, [r3, #0]
 801ea86:	4619      	mov	r1, r3
 801ea88:	4a3f      	ldr	r2, [pc, #252]	; (801eb88 <etharp_output+0x200>)
 801ea8a:	460b      	mov	r3, r1
 801ea8c:	005b      	lsls	r3, r3, #1
 801ea8e:	440b      	add	r3, r1
 801ea90:	00db      	lsls	r3, r3, #3
 801ea92:	4413      	add	r3, r2
 801ea94:	3308      	adds	r3, #8
 801ea96:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ea98:	68fa      	ldr	r2, [r7, #12]
 801ea9a:	429a      	cmp	r2, r3
 801ea9c:	d117      	bne.n	801eace <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801ea9e:	69bb      	ldr	r3, [r7, #24]
 801eaa0:	681a      	ldr	r2, [r3, #0]
 801eaa2:	4b38      	ldr	r3, [pc, #224]	; (801eb84 <etharp_output+0x1fc>)
 801eaa4:	781b      	ldrb	r3, [r3, #0]
 801eaa6:	4618      	mov	r0, r3
 801eaa8:	4937      	ldr	r1, [pc, #220]	; (801eb88 <etharp_output+0x200>)
 801eaaa:	4603      	mov	r3, r0
 801eaac:	005b      	lsls	r3, r3, #1
 801eaae:	4403      	add	r3, r0
 801eab0:	00db      	lsls	r3, r3, #3
 801eab2:	440b      	add	r3, r1
 801eab4:	3304      	adds	r3, #4
 801eab6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801eab8:	429a      	cmp	r2, r3
 801eaba:	d108      	bne.n	801eace <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801eabc:	4b31      	ldr	r3, [pc, #196]	; (801eb84 <etharp_output+0x1fc>)
 801eabe:	781b      	ldrb	r3, [r3, #0]
 801eac0:	461a      	mov	r2, r3
 801eac2:	68b9      	ldr	r1, [r7, #8]
 801eac4:	68f8      	ldr	r0, [r7, #12]
 801eac6:	f7ff fec5 	bl	801e854 <etharp_output_to_arp_index>
 801eaca:	4603      	mov	r3, r0
 801eacc:	e04a      	b.n	801eb64 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801eace:	2300      	movs	r3, #0
 801ead0:	75fb      	strb	r3, [r7, #23]
 801ead2:	e031      	b.n	801eb38 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ead4:	7dfa      	ldrb	r2, [r7, #23]
 801ead6:	492c      	ldr	r1, [pc, #176]	; (801eb88 <etharp_output+0x200>)
 801ead8:	4613      	mov	r3, r2
 801eada:	005b      	lsls	r3, r3, #1
 801eadc:	4413      	add	r3, r2
 801eade:	00db      	lsls	r3, r3, #3
 801eae0:	440b      	add	r3, r1
 801eae2:	3314      	adds	r3, #20
 801eae4:	781b      	ldrb	r3, [r3, #0]
 801eae6:	2b01      	cmp	r3, #1
 801eae8:	d923      	bls.n	801eb32 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801eaea:	7dfa      	ldrb	r2, [r7, #23]
 801eaec:	4926      	ldr	r1, [pc, #152]	; (801eb88 <etharp_output+0x200>)
 801eaee:	4613      	mov	r3, r2
 801eaf0:	005b      	lsls	r3, r3, #1
 801eaf2:	4413      	add	r3, r2
 801eaf4:	00db      	lsls	r3, r3, #3
 801eaf6:	440b      	add	r3, r1
 801eaf8:	3308      	adds	r3, #8
 801eafa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801eafc:	68fa      	ldr	r2, [r7, #12]
 801eafe:	429a      	cmp	r2, r3
 801eb00:	d117      	bne.n	801eb32 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801eb02:	69bb      	ldr	r3, [r7, #24]
 801eb04:	6819      	ldr	r1, [r3, #0]
 801eb06:	7dfa      	ldrb	r2, [r7, #23]
 801eb08:	481f      	ldr	r0, [pc, #124]	; (801eb88 <etharp_output+0x200>)
 801eb0a:	4613      	mov	r3, r2
 801eb0c:	005b      	lsls	r3, r3, #1
 801eb0e:	4413      	add	r3, r2
 801eb10:	00db      	lsls	r3, r3, #3
 801eb12:	4403      	add	r3, r0
 801eb14:	3304      	adds	r3, #4
 801eb16:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801eb18:	4299      	cmp	r1, r3
 801eb1a:	d10a      	bne.n	801eb32 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801eb1c:	4a19      	ldr	r2, [pc, #100]	; (801eb84 <etharp_output+0x1fc>)
 801eb1e:	7dfb      	ldrb	r3, [r7, #23]
 801eb20:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801eb22:	7dfb      	ldrb	r3, [r7, #23]
 801eb24:	461a      	mov	r2, r3
 801eb26:	68b9      	ldr	r1, [r7, #8]
 801eb28:	68f8      	ldr	r0, [r7, #12]
 801eb2a:	f7ff fe93 	bl	801e854 <etharp_output_to_arp_index>
 801eb2e:	4603      	mov	r3, r0
 801eb30:	e018      	b.n	801eb64 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801eb32:	7dfb      	ldrb	r3, [r7, #23]
 801eb34:	3301      	adds	r3, #1
 801eb36:	75fb      	strb	r3, [r7, #23]
 801eb38:	7dfb      	ldrb	r3, [r7, #23]
 801eb3a:	2b09      	cmp	r3, #9
 801eb3c:	d9ca      	bls.n	801ead4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801eb3e:	68ba      	ldr	r2, [r7, #8]
 801eb40:	69b9      	ldr	r1, [r7, #24]
 801eb42:	68f8      	ldr	r0, [r7, #12]
 801eb44:	f000 f822 	bl	801eb8c <etharp_query>
 801eb48:	4603      	mov	r3, r0
 801eb4a:	e00b      	b.n	801eb64 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801eb4c:	68fb      	ldr	r3, [r7, #12]
 801eb4e:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 801eb52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801eb56:	9300      	str	r3, [sp, #0]
 801eb58:	69fb      	ldr	r3, [r7, #28]
 801eb5a:	68b9      	ldr	r1, [r7, #8]
 801eb5c:	68f8      	ldr	r0, [r7, #12]
 801eb5e:	f001 fde9 	bl	8020734 <ethernet_output>
 801eb62:	4603      	mov	r3, r0
}
 801eb64:	4618      	mov	r0, r3
 801eb66:	3720      	adds	r7, #32
 801eb68:	46bd      	mov	sp, r7
 801eb6a:	bd80      	pop	{r7, pc}
 801eb6c:	08024cfc 	.word	0x08024cfc
 801eb70:	08024e4c 	.word	0x08024e4c
 801eb74:	08024d74 	.word	0x08024d74
 801eb78:	08024e9c 	.word	0x08024e9c
 801eb7c:	08024e3c 	.word	0x08024e3c
 801eb80:	08025550 	.word	0x08025550
 801eb84:	200090fc 	.word	0x200090fc
 801eb88:	2000900c 	.word	0x2000900c

0801eb8c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801eb8c:	b580      	push	{r7, lr}
 801eb8e:	b08c      	sub	sp, #48	; 0x30
 801eb90:	af02      	add	r7, sp, #8
 801eb92:	60f8      	str	r0, [r7, #12]
 801eb94:	60b9      	str	r1, [r7, #8]
 801eb96:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801eb98:	68fb      	ldr	r3, [r7, #12]
 801eb9a:	332e      	adds	r3, #46	; 0x2e
 801eb9c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801eb9e:	23ff      	movs	r3, #255	; 0xff
 801eba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801eba4:	2300      	movs	r3, #0
 801eba6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801eba8:	68bb      	ldr	r3, [r7, #8]
 801ebaa:	681b      	ldr	r3, [r3, #0]
 801ebac:	68f9      	ldr	r1, [r7, #12]
 801ebae:	4618      	mov	r0, r3
 801ebb0:	f000 fe2a 	bl	801f808 <ip4_addr_isbroadcast_u32>
 801ebb4:	4603      	mov	r3, r0
 801ebb6:	2b00      	cmp	r3, #0
 801ebb8:	d10c      	bne.n	801ebd4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ebba:	68bb      	ldr	r3, [r7, #8]
 801ebbc:	681b      	ldr	r3, [r3, #0]
 801ebbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ebc2:	2be0      	cmp	r3, #224	; 0xe0
 801ebc4:	d006      	beq.n	801ebd4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ebc6:	68bb      	ldr	r3, [r7, #8]
 801ebc8:	2b00      	cmp	r3, #0
 801ebca:	d003      	beq.n	801ebd4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801ebcc:	68bb      	ldr	r3, [r7, #8]
 801ebce:	681b      	ldr	r3, [r3, #0]
 801ebd0:	2b00      	cmp	r3, #0
 801ebd2:	d102      	bne.n	801ebda <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ebd4:	f06f 030f 	mvn.w	r3, #15
 801ebd8:	e102      	b.n	801ede0 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801ebda:	68fa      	ldr	r2, [r7, #12]
 801ebdc:	2101      	movs	r1, #1
 801ebde:	68b8      	ldr	r0, [r7, #8]
 801ebe0:	f7ff fb5c 	bl	801e29c <etharp_find_entry>
 801ebe4:	4603      	mov	r3, r0
 801ebe6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801ebe8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ebec:	2b00      	cmp	r3, #0
 801ebee:	da02      	bge.n	801ebf6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801ebf0:	8a7b      	ldrh	r3, [r7, #18]
 801ebf2:	b25b      	sxtb	r3, r3
 801ebf4:	e0f4      	b.n	801ede0 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801ebf6:	8a7b      	ldrh	r3, [r7, #18]
 801ebf8:	2b7e      	cmp	r3, #126	; 0x7e
 801ebfa:	d906      	bls.n	801ec0a <etharp_query+0x7e>
 801ebfc:	4b7a      	ldr	r3, [pc, #488]	; (801ede8 <etharp_query+0x25c>)
 801ebfe:	f240 32c1 	movw	r2, #961	; 0x3c1
 801ec02:	497a      	ldr	r1, [pc, #488]	; (801edec <etharp_query+0x260>)
 801ec04:	487a      	ldr	r0, [pc, #488]	; (801edf0 <etharp_query+0x264>)
 801ec06:	f002 fcf5 	bl	80215f4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801ec0a:	8a7b      	ldrh	r3, [r7, #18]
 801ec0c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801ec0e:	7c7a      	ldrb	r2, [r7, #17]
 801ec10:	4978      	ldr	r1, [pc, #480]	; (801edf4 <etharp_query+0x268>)
 801ec12:	4613      	mov	r3, r2
 801ec14:	005b      	lsls	r3, r3, #1
 801ec16:	4413      	add	r3, r2
 801ec18:	00db      	lsls	r3, r3, #3
 801ec1a:	440b      	add	r3, r1
 801ec1c:	3314      	adds	r3, #20
 801ec1e:	781b      	ldrb	r3, [r3, #0]
 801ec20:	2b00      	cmp	r3, #0
 801ec22:	d115      	bne.n	801ec50 <etharp_query+0xc4>
    is_new_entry = 1;
 801ec24:	2301      	movs	r3, #1
 801ec26:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ec28:	7c7a      	ldrb	r2, [r7, #17]
 801ec2a:	4972      	ldr	r1, [pc, #456]	; (801edf4 <etharp_query+0x268>)
 801ec2c:	4613      	mov	r3, r2
 801ec2e:	005b      	lsls	r3, r3, #1
 801ec30:	4413      	add	r3, r2
 801ec32:	00db      	lsls	r3, r3, #3
 801ec34:	440b      	add	r3, r1
 801ec36:	3314      	adds	r3, #20
 801ec38:	2201      	movs	r2, #1
 801ec3a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ec3c:	7c7a      	ldrb	r2, [r7, #17]
 801ec3e:	496d      	ldr	r1, [pc, #436]	; (801edf4 <etharp_query+0x268>)
 801ec40:	4613      	mov	r3, r2
 801ec42:	005b      	lsls	r3, r3, #1
 801ec44:	4413      	add	r3, r2
 801ec46:	00db      	lsls	r3, r3, #3
 801ec48:	440b      	add	r3, r1
 801ec4a:	3308      	adds	r3, #8
 801ec4c:	68fa      	ldr	r2, [r7, #12]
 801ec4e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ec50:	7c7a      	ldrb	r2, [r7, #17]
 801ec52:	4968      	ldr	r1, [pc, #416]	; (801edf4 <etharp_query+0x268>)
 801ec54:	4613      	mov	r3, r2
 801ec56:	005b      	lsls	r3, r3, #1
 801ec58:	4413      	add	r3, r2
 801ec5a:	00db      	lsls	r3, r3, #3
 801ec5c:	440b      	add	r3, r1
 801ec5e:	3314      	adds	r3, #20
 801ec60:	781b      	ldrb	r3, [r3, #0]
 801ec62:	2b01      	cmp	r3, #1
 801ec64:	d011      	beq.n	801ec8a <etharp_query+0xfe>
 801ec66:	7c7a      	ldrb	r2, [r7, #17]
 801ec68:	4962      	ldr	r1, [pc, #392]	; (801edf4 <etharp_query+0x268>)
 801ec6a:	4613      	mov	r3, r2
 801ec6c:	005b      	lsls	r3, r3, #1
 801ec6e:	4413      	add	r3, r2
 801ec70:	00db      	lsls	r3, r3, #3
 801ec72:	440b      	add	r3, r1
 801ec74:	3314      	adds	r3, #20
 801ec76:	781b      	ldrb	r3, [r3, #0]
 801ec78:	2b01      	cmp	r3, #1
 801ec7a:	d806      	bhi.n	801ec8a <etharp_query+0xfe>
 801ec7c:	4b5a      	ldr	r3, [pc, #360]	; (801ede8 <etharp_query+0x25c>)
 801ec7e:	f240 32cf 	movw	r2, #975	; 0x3cf
 801ec82:	495d      	ldr	r1, [pc, #372]	; (801edf8 <etharp_query+0x26c>)
 801ec84:	485a      	ldr	r0, [pc, #360]	; (801edf0 <etharp_query+0x264>)
 801ec86:	f002 fcb5 	bl	80215f4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801ec8a:	6a3b      	ldr	r3, [r7, #32]
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	d102      	bne.n	801ec96 <etharp_query+0x10a>
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	d10c      	bne.n	801ecb0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801ec96:	68b9      	ldr	r1, [r7, #8]
 801ec98:	68f8      	ldr	r0, [r7, #12]
 801ec9a:	f000 f963 	bl	801ef64 <etharp_request>
 801ec9e:	4603      	mov	r3, r0
 801eca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801eca4:	687b      	ldr	r3, [r7, #4]
 801eca6:	2b00      	cmp	r3, #0
 801eca8:	d102      	bne.n	801ecb0 <etharp_query+0x124>
      return result;
 801ecaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801ecae:	e097      	b.n	801ede0 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801ecb0:	687b      	ldr	r3, [r7, #4]
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	d106      	bne.n	801ecc4 <etharp_query+0x138>
 801ecb6:	4b4c      	ldr	r3, [pc, #304]	; (801ede8 <etharp_query+0x25c>)
 801ecb8:	f240 32e1 	movw	r2, #993	; 0x3e1
 801ecbc:	494f      	ldr	r1, [pc, #316]	; (801edfc <etharp_query+0x270>)
 801ecbe:	484c      	ldr	r0, [pc, #304]	; (801edf0 <etharp_query+0x264>)
 801ecc0:	f002 fc98 	bl	80215f4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801ecc4:	7c7a      	ldrb	r2, [r7, #17]
 801ecc6:	494b      	ldr	r1, [pc, #300]	; (801edf4 <etharp_query+0x268>)
 801ecc8:	4613      	mov	r3, r2
 801ecca:	005b      	lsls	r3, r3, #1
 801eccc:	4413      	add	r3, r2
 801ecce:	00db      	lsls	r3, r3, #3
 801ecd0:	440b      	add	r3, r1
 801ecd2:	3314      	adds	r3, #20
 801ecd4:	781b      	ldrb	r3, [r3, #0]
 801ecd6:	2b01      	cmp	r3, #1
 801ecd8:	d918      	bls.n	801ed0c <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801ecda:	4a49      	ldr	r2, [pc, #292]	; (801ee00 <etharp_query+0x274>)
 801ecdc:	7c7b      	ldrb	r3, [r7, #17]
 801ecde:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ece0:	7c7a      	ldrb	r2, [r7, #17]
 801ece2:	4613      	mov	r3, r2
 801ece4:	005b      	lsls	r3, r3, #1
 801ece6:	4413      	add	r3, r2
 801ece8:	00db      	lsls	r3, r3, #3
 801ecea:	3308      	adds	r3, #8
 801ecec:	4a41      	ldr	r2, [pc, #260]	; (801edf4 <etharp_query+0x268>)
 801ecee:	4413      	add	r3, r2
 801ecf0:	1d1a      	adds	r2, r3, #4
 801ecf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ecf6:	9300      	str	r3, [sp, #0]
 801ecf8:	4613      	mov	r3, r2
 801ecfa:	697a      	ldr	r2, [r7, #20]
 801ecfc:	6879      	ldr	r1, [r7, #4]
 801ecfe:	68f8      	ldr	r0, [r7, #12]
 801ed00:	f001 fd18 	bl	8020734 <ethernet_output>
 801ed04:	4603      	mov	r3, r0
 801ed06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ed0a:	e067      	b.n	801eddc <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ed0c:	7c7a      	ldrb	r2, [r7, #17]
 801ed0e:	4939      	ldr	r1, [pc, #228]	; (801edf4 <etharp_query+0x268>)
 801ed10:	4613      	mov	r3, r2
 801ed12:	005b      	lsls	r3, r3, #1
 801ed14:	4413      	add	r3, r2
 801ed16:	00db      	lsls	r3, r3, #3
 801ed18:	440b      	add	r3, r1
 801ed1a:	3314      	adds	r3, #20
 801ed1c:	781b      	ldrb	r3, [r3, #0]
 801ed1e:	2b01      	cmp	r3, #1
 801ed20:	d15c      	bne.n	801eddc <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801ed22:	2300      	movs	r3, #0
 801ed24:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801ed26:	687b      	ldr	r3, [r7, #4]
 801ed28:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ed2a:	e01c      	b.n	801ed66 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801ed2c:	69fb      	ldr	r3, [r7, #28]
 801ed2e:	895a      	ldrh	r2, [r3, #10]
 801ed30:	69fb      	ldr	r3, [r7, #28]
 801ed32:	891b      	ldrh	r3, [r3, #8]
 801ed34:	429a      	cmp	r2, r3
 801ed36:	d10a      	bne.n	801ed4e <etharp_query+0x1c2>
 801ed38:	69fb      	ldr	r3, [r7, #28]
 801ed3a:	681b      	ldr	r3, [r3, #0]
 801ed3c:	2b00      	cmp	r3, #0
 801ed3e:	d006      	beq.n	801ed4e <etharp_query+0x1c2>
 801ed40:	4b29      	ldr	r3, [pc, #164]	; (801ede8 <etharp_query+0x25c>)
 801ed42:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801ed46:	492f      	ldr	r1, [pc, #188]	; (801ee04 <etharp_query+0x278>)
 801ed48:	4829      	ldr	r0, [pc, #164]	; (801edf0 <etharp_query+0x264>)
 801ed4a:	f002 fc53 	bl	80215f4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801ed4e:	69fb      	ldr	r3, [r7, #28]
 801ed50:	7b1b      	ldrb	r3, [r3, #12]
 801ed52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ed56:	2b00      	cmp	r3, #0
 801ed58:	d002      	beq.n	801ed60 <etharp_query+0x1d4>
        copy_needed = 1;
 801ed5a:	2301      	movs	r3, #1
 801ed5c:	61bb      	str	r3, [r7, #24]
        break;
 801ed5e:	e005      	b.n	801ed6c <etharp_query+0x1e0>
      }
      p = p->next;
 801ed60:	69fb      	ldr	r3, [r7, #28]
 801ed62:	681b      	ldr	r3, [r3, #0]
 801ed64:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ed66:	69fb      	ldr	r3, [r7, #28]
 801ed68:	2b00      	cmp	r3, #0
 801ed6a:	d1df      	bne.n	801ed2c <etharp_query+0x1a0>
    }
    if (copy_needed) {
 801ed6c:	69bb      	ldr	r3, [r7, #24]
 801ed6e:	2b00      	cmp	r3, #0
 801ed70:	d007      	beq.n	801ed82 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801ed72:	687a      	ldr	r2, [r7, #4]
 801ed74:	f44f 7120 	mov.w	r1, #640	; 0x280
 801ed78:	200e      	movs	r0, #14
 801ed7a:	f7f7 fb4f 	bl	801641c <pbuf_clone>
 801ed7e:	61f8      	str	r0, [r7, #28]
 801ed80:	e004      	b.n	801ed8c <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801ed82:	687b      	ldr	r3, [r7, #4]
 801ed84:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801ed86:	69f8      	ldr	r0, [r7, #28]
 801ed88:	f7f7 f976 	bl	8016078 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801ed8c:	69fb      	ldr	r3, [r7, #28]
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	d021      	beq.n	801edd6 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801ed92:	7c7a      	ldrb	r2, [r7, #17]
 801ed94:	4917      	ldr	r1, [pc, #92]	; (801edf4 <etharp_query+0x268>)
 801ed96:	4613      	mov	r3, r2
 801ed98:	005b      	lsls	r3, r3, #1
 801ed9a:	4413      	add	r3, r2
 801ed9c:	00db      	lsls	r3, r3, #3
 801ed9e:	440b      	add	r3, r1
 801eda0:	681b      	ldr	r3, [r3, #0]
 801eda2:	2b00      	cmp	r3, #0
 801eda4:	d00a      	beq.n	801edbc <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801eda6:	7c7a      	ldrb	r2, [r7, #17]
 801eda8:	4912      	ldr	r1, [pc, #72]	; (801edf4 <etharp_query+0x268>)
 801edaa:	4613      	mov	r3, r2
 801edac:	005b      	lsls	r3, r3, #1
 801edae:	4413      	add	r3, r2
 801edb0:	00db      	lsls	r3, r3, #3
 801edb2:	440b      	add	r3, r1
 801edb4:	681b      	ldr	r3, [r3, #0]
 801edb6:	4618      	mov	r0, r3
 801edb8:	f7f7 f8b8 	bl	8015f2c <pbuf_free>
      }
      arp_table[i].q = p;
 801edbc:	7c7a      	ldrb	r2, [r7, #17]
 801edbe:	490d      	ldr	r1, [pc, #52]	; (801edf4 <etharp_query+0x268>)
 801edc0:	4613      	mov	r3, r2
 801edc2:	005b      	lsls	r3, r3, #1
 801edc4:	4413      	add	r3, r2
 801edc6:	00db      	lsls	r3, r3, #3
 801edc8:	440b      	add	r3, r1
 801edca:	69fa      	ldr	r2, [r7, #28]
 801edcc:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801edce:	2300      	movs	r3, #0
 801edd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801edd4:	e002      	b.n	801eddc <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801edd6:	23ff      	movs	r3, #255	; 0xff
 801edd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801eddc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801ede0:	4618      	mov	r0, r3
 801ede2:	3728      	adds	r7, #40	; 0x28
 801ede4:	46bd      	mov	sp, r7
 801ede6:	bd80      	pop	{r7, pc}
 801ede8:	08024cfc 	.word	0x08024cfc
 801edec:	08024ea8 	.word	0x08024ea8
 801edf0:	08024d74 	.word	0x08024d74
 801edf4:	2000900c 	.word	0x2000900c
 801edf8:	08024eb8 	.word	0x08024eb8
 801edfc:	08024e9c 	.word	0x08024e9c
 801ee00:	200090fc 	.word	0x200090fc
 801ee04:	08024ee0 	.word	0x08024ee0

0801ee08 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ee08:	b580      	push	{r7, lr}
 801ee0a:	b08a      	sub	sp, #40	; 0x28
 801ee0c:	af02      	add	r7, sp, #8
 801ee0e:	60f8      	str	r0, [r7, #12]
 801ee10:	60b9      	str	r1, [r7, #8]
 801ee12:	607a      	str	r2, [r7, #4]
 801ee14:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801ee16:	2300      	movs	r3, #0
 801ee18:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ee1a:	68fb      	ldr	r3, [r7, #12]
 801ee1c:	2b00      	cmp	r3, #0
 801ee1e:	d106      	bne.n	801ee2e <etharp_raw+0x26>
 801ee20:	4b3a      	ldr	r3, [pc, #232]	; (801ef0c <etharp_raw+0x104>)
 801ee22:	f240 4257 	movw	r2, #1111	; 0x457
 801ee26:	493a      	ldr	r1, [pc, #232]	; (801ef10 <etharp_raw+0x108>)
 801ee28:	483a      	ldr	r0, [pc, #232]	; (801ef14 <etharp_raw+0x10c>)
 801ee2a:	f002 fbe3 	bl	80215f4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ee2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ee32:	211c      	movs	r1, #28
 801ee34:	200e      	movs	r0, #14
 801ee36:	f7f6 fd99 	bl	801596c <pbuf_alloc>
 801ee3a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801ee3c:	69bb      	ldr	r3, [r7, #24]
 801ee3e:	2b00      	cmp	r3, #0
 801ee40:	d102      	bne.n	801ee48 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801ee42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ee46:	e05d      	b.n	801ef04 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801ee48:	69bb      	ldr	r3, [r7, #24]
 801ee4a:	895b      	ldrh	r3, [r3, #10]
 801ee4c:	2b1b      	cmp	r3, #27
 801ee4e:	d806      	bhi.n	801ee5e <etharp_raw+0x56>
 801ee50:	4b2e      	ldr	r3, [pc, #184]	; (801ef0c <etharp_raw+0x104>)
 801ee52:	f240 4263 	movw	r2, #1123	; 0x463
 801ee56:	4930      	ldr	r1, [pc, #192]	; (801ef18 <etharp_raw+0x110>)
 801ee58:	482e      	ldr	r0, [pc, #184]	; (801ef14 <etharp_raw+0x10c>)
 801ee5a:	f002 fbcb 	bl	80215f4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801ee5e:	69bb      	ldr	r3, [r7, #24]
 801ee60:	685b      	ldr	r3, [r3, #4]
 801ee62:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801ee64:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801ee66:	4618      	mov	r0, r3
 801ee68:	f7f5 fc92 	bl	8014790 <lwip_htons>
 801ee6c:	4603      	mov	r3, r0
 801ee6e:	461a      	mov	r2, r3
 801ee70:	697b      	ldr	r3, [r7, #20]
 801ee72:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801ee74:	68fb      	ldr	r3, [r7, #12]
 801ee76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801ee7a:	2b06      	cmp	r3, #6
 801ee7c:	d006      	beq.n	801ee8c <etharp_raw+0x84>
 801ee7e:	4b23      	ldr	r3, [pc, #140]	; (801ef0c <etharp_raw+0x104>)
 801ee80:	f240 426a 	movw	r2, #1130	; 0x46a
 801ee84:	4925      	ldr	r1, [pc, #148]	; (801ef1c <etharp_raw+0x114>)
 801ee86:	4823      	ldr	r0, [pc, #140]	; (801ef14 <etharp_raw+0x10c>)
 801ee88:	f002 fbb4 	bl	80215f4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801ee8c:	697b      	ldr	r3, [r7, #20]
 801ee8e:	3308      	adds	r3, #8
 801ee90:	2206      	movs	r2, #6
 801ee92:	6839      	ldr	r1, [r7, #0]
 801ee94:	4618      	mov	r0, r3
 801ee96:	f002 faf2 	bl	802147e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801ee9a:	697b      	ldr	r3, [r7, #20]
 801ee9c:	3312      	adds	r3, #18
 801ee9e:	2206      	movs	r2, #6
 801eea0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801eea2:	4618      	mov	r0, r3
 801eea4:	f002 faeb 	bl	802147e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801eea8:	697b      	ldr	r3, [r7, #20]
 801eeaa:	330e      	adds	r3, #14
 801eeac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801eeae:	6812      	ldr	r2, [r2, #0]
 801eeb0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801eeb2:	697b      	ldr	r3, [r7, #20]
 801eeb4:	3318      	adds	r3, #24
 801eeb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801eeb8:	6812      	ldr	r2, [r2, #0]
 801eeba:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801eebc:	697b      	ldr	r3, [r7, #20]
 801eebe:	2200      	movs	r2, #0
 801eec0:	701a      	strb	r2, [r3, #0]
 801eec2:	2200      	movs	r2, #0
 801eec4:	f042 0201 	orr.w	r2, r2, #1
 801eec8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801eeca:	697b      	ldr	r3, [r7, #20]
 801eecc:	2200      	movs	r2, #0
 801eece:	f042 0208 	orr.w	r2, r2, #8
 801eed2:	709a      	strb	r2, [r3, #2]
 801eed4:	2200      	movs	r2, #0
 801eed6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801eed8:	697b      	ldr	r3, [r7, #20]
 801eeda:	2206      	movs	r2, #6
 801eedc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801eede:	697b      	ldr	r3, [r7, #20]
 801eee0:	2204      	movs	r2, #4
 801eee2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801eee4:	f640 0306 	movw	r3, #2054	; 0x806
 801eee8:	9300      	str	r3, [sp, #0]
 801eeea:	687b      	ldr	r3, [r7, #4]
 801eeec:	68ba      	ldr	r2, [r7, #8]
 801eeee:	69b9      	ldr	r1, [r7, #24]
 801eef0:	68f8      	ldr	r0, [r7, #12]
 801eef2:	f001 fc1f 	bl	8020734 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801eef6:	69b8      	ldr	r0, [r7, #24]
 801eef8:	f7f7 f818 	bl	8015f2c <pbuf_free>
  p = NULL;
 801eefc:	2300      	movs	r3, #0
 801eefe:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801ef00:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ef04:	4618      	mov	r0, r3
 801ef06:	3720      	adds	r7, #32
 801ef08:	46bd      	mov	sp, r7
 801ef0a:	bd80      	pop	{r7, pc}
 801ef0c:	08024cfc 	.word	0x08024cfc
 801ef10:	08024e4c 	.word	0x08024e4c
 801ef14:	08024d74 	.word	0x08024d74
 801ef18:	08024efc 	.word	0x08024efc
 801ef1c:	08024f30 	.word	0x08024f30

0801ef20 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801ef20:	b580      	push	{r7, lr}
 801ef22:	b088      	sub	sp, #32
 801ef24:	af04      	add	r7, sp, #16
 801ef26:	60f8      	str	r0, [r7, #12]
 801ef28:	60b9      	str	r1, [r7, #8]
 801ef2a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ef2c:	68fb      	ldr	r3, [r7, #12]
 801ef2e:	f103 012e 	add.w	r1, r3, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ef32:	68fb      	ldr	r3, [r7, #12]
 801ef34:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 801ef38:	68fb      	ldr	r3, [r7, #12]
 801ef3a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ef3c:	2201      	movs	r2, #1
 801ef3e:	9203      	str	r2, [sp, #12]
 801ef40:	68ba      	ldr	r2, [r7, #8]
 801ef42:	9202      	str	r2, [sp, #8]
 801ef44:	4a06      	ldr	r2, [pc, #24]	; (801ef60 <etharp_request_dst+0x40>)
 801ef46:	9201      	str	r2, [sp, #4]
 801ef48:	9300      	str	r3, [sp, #0]
 801ef4a:	4603      	mov	r3, r0
 801ef4c:	687a      	ldr	r2, [r7, #4]
 801ef4e:	68f8      	ldr	r0, [r7, #12]
 801ef50:	f7ff ff5a 	bl	801ee08 <etharp_raw>
 801ef54:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801ef56:	4618      	mov	r0, r3
 801ef58:	3710      	adds	r7, #16
 801ef5a:	46bd      	mov	sp, r7
 801ef5c:	bd80      	pop	{r7, pc}
 801ef5e:	bf00      	nop
 801ef60:	08025558 	.word	0x08025558

0801ef64 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801ef64:	b580      	push	{r7, lr}
 801ef66:	b082      	sub	sp, #8
 801ef68:	af00      	add	r7, sp, #0
 801ef6a:	6078      	str	r0, [r7, #4]
 801ef6c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801ef6e:	4a05      	ldr	r2, [pc, #20]	; (801ef84 <etharp_request+0x20>)
 801ef70:	6839      	ldr	r1, [r7, #0]
 801ef72:	6878      	ldr	r0, [r7, #4]
 801ef74:	f7ff ffd4 	bl	801ef20 <etharp_request_dst>
 801ef78:	4603      	mov	r3, r0
}
 801ef7a:	4618      	mov	r0, r3
 801ef7c:	3708      	adds	r7, #8
 801ef7e:	46bd      	mov	sp, r7
 801ef80:	bd80      	pop	{r7, pc}
 801ef82:	bf00      	nop
 801ef84:	08025550 	.word	0x08025550

0801ef88 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801ef88:	b580      	push	{r7, lr}
 801ef8a:	b08e      	sub	sp, #56	; 0x38
 801ef8c:	af04      	add	r7, sp, #16
 801ef8e:	6078      	str	r0, [r7, #4]
 801ef90:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801ef92:	4b79      	ldr	r3, [pc, #484]	; (801f178 <icmp_input+0x1f0>)
 801ef94:	689b      	ldr	r3, [r3, #8]
 801ef96:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801ef98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef9a:	781b      	ldrb	r3, [r3, #0]
 801ef9c:	f003 030f 	and.w	r3, r3, #15
 801efa0:	b2db      	uxtb	r3, r3
 801efa2:	009b      	lsls	r3, r3, #2
 801efa4:	b2db      	uxtb	r3, r3
 801efa6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801efa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801efaa:	2b13      	cmp	r3, #19
 801efac:	f240 80cd 	bls.w	801f14a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801efb0:	687b      	ldr	r3, [r7, #4]
 801efb2:	895b      	ldrh	r3, [r3, #10]
 801efb4:	2b03      	cmp	r3, #3
 801efb6:	f240 80ca 	bls.w	801f14e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801efba:	687b      	ldr	r3, [r7, #4]
 801efbc:	685b      	ldr	r3, [r3, #4]
 801efbe:	781b      	ldrb	r3, [r3, #0]
 801efc0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801efc4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801efc8:	2b00      	cmp	r3, #0
 801efca:	f000 80b7 	beq.w	801f13c <icmp_input+0x1b4>
 801efce:	2b08      	cmp	r3, #8
 801efd0:	f040 80b7 	bne.w	801f142 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801efd4:	4b69      	ldr	r3, [pc, #420]	; (801f17c <icmp_input+0x1f4>)
 801efd6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801efd8:	4b67      	ldr	r3, [pc, #412]	; (801f178 <icmp_input+0x1f0>)
 801efda:	695b      	ldr	r3, [r3, #20]
 801efdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801efe0:	2be0      	cmp	r3, #224	; 0xe0
 801efe2:	f000 80bb 	beq.w	801f15c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801efe6:	4b64      	ldr	r3, [pc, #400]	; (801f178 <icmp_input+0x1f0>)
 801efe8:	695a      	ldr	r2, [r3, #20]
 801efea:	4b63      	ldr	r3, [pc, #396]	; (801f178 <icmp_input+0x1f0>)
 801efec:	681b      	ldr	r3, [r3, #0]
 801efee:	4619      	mov	r1, r3
 801eff0:	4610      	mov	r0, r2
 801eff2:	f000 fc09 	bl	801f808 <ip4_addr_isbroadcast_u32>
 801eff6:	4603      	mov	r3, r0
 801eff8:	2b00      	cmp	r3, #0
 801effa:	f040 80b1 	bne.w	801f160 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801effe:	687b      	ldr	r3, [r7, #4]
 801f000:	891b      	ldrh	r3, [r3, #8]
 801f002:	2b07      	cmp	r3, #7
 801f004:	f240 80a5 	bls.w	801f152 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801f008:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f00a:	330e      	adds	r3, #14
 801f00c:	4619      	mov	r1, r3
 801f00e:	6878      	ldr	r0, [r7, #4]
 801f010:	f7f6 fef6 	bl	8015e00 <pbuf_add_header>
 801f014:	4603      	mov	r3, r0
 801f016:	2b00      	cmp	r3, #0
 801f018:	d04b      	beq.n	801f0b2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801f01a:	687b      	ldr	r3, [r7, #4]
 801f01c:	891a      	ldrh	r2, [r3, #8]
 801f01e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f020:	4413      	add	r3, r2
 801f022:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801f024:	687b      	ldr	r3, [r7, #4]
 801f026:	891b      	ldrh	r3, [r3, #8]
 801f028:	8b7a      	ldrh	r2, [r7, #26]
 801f02a:	429a      	cmp	r2, r3
 801f02c:	f0c0 809a 	bcc.w	801f164 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801f030:	8b7b      	ldrh	r3, [r7, #26]
 801f032:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f036:	4619      	mov	r1, r3
 801f038:	200e      	movs	r0, #14
 801f03a:	f7f6 fc97 	bl	801596c <pbuf_alloc>
 801f03e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801f040:	697b      	ldr	r3, [r7, #20]
 801f042:	2b00      	cmp	r3, #0
 801f044:	f000 8090 	beq.w	801f168 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801f048:	697b      	ldr	r3, [r7, #20]
 801f04a:	895b      	ldrh	r3, [r3, #10]
 801f04c:	461a      	mov	r2, r3
 801f04e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f050:	3308      	adds	r3, #8
 801f052:	429a      	cmp	r2, r3
 801f054:	d203      	bcs.n	801f05e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801f056:	6978      	ldr	r0, [r7, #20]
 801f058:	f7f6 ff68 	bl	8015f2c <pbuf_free>
          goto icmperr;
 801f05c:	e085      	b.n	801f16a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801f05e:	697b      	ldr	r3, [r7, #20]
 801f060:	685b      	ldr	r3, [r3, #4]
 801f062:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801f064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f066:	4618      	mov	r0, r3
 801f068:	f002 fa09 	bl	802147e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801f06c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f06e:	4619      	mov	r1, r3
 801f070:	6978      	ldr	r0, [r7, #20]
 801f072:	f7f6 fed5 	bl	8015e20 <pbuf_remove_header>
 801f076:	4603      	mov	r3, r0
 801f078:	2b00      	cmp	r3, #0
 801f07a:	d009      	beq.n	801f090 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801f07c:	4b40      	ldr	r3, [pc, #256]	; (801f180 <icmp_input+0x1f8>)
 801f07e:	22b6      	movs	r2, #182	; 0xb6
 801f080:	4940      	ldr	r1, [pc, #256]	; (801f184 <icmp_input+0x1fc>)
 801f082:	4841      	ldr	r0, [pc, #260]	; (801f188 <icmp_input+0x200>)
 801f084:	f002 fab6 	bl	80215f4 <iprintf>
          pbuf_free(r);
 801f088:	6978      	ldr	r0, [r7, #20]
 801f08a:	f7f6 ff4f 	bl	8015f2c <pbuf_free>
          goto icmperr;
 801f08e:	e06c      	b.n	801f16a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801f090:	6879      	ldr	r1, [r7, #4]
 801f092:	6978      	ldr	r0, [r7, #20]
 801f094:	f7f7 f87e 	bl	8016194 <pbuf_copy>
 801f098:	4603      	mov	r3, r0
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d003      	beq.n	801f0a6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801f09e:	6978      	ldr	r0, [r7, #20]
 801f0a0:	f7f6 ff44 	bl	8015f2c <pbuf_free>
          goto icmperr;
 801f0a4:	e061      	b.n	801f16a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801f0a6:	6878      	ldr	r0, [r7, #4]
 801f0a8:	f7f6 ff40 	bl	8015f2c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801f0ac:	697b      	ldr	r3, [r7, #20]
 801f0ae:	607b      	str	r3, [r7, #4]
 801f0b0:	e00f      	b.n	801f0d2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801f0b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f0b4:	330e      	adds	r3, #14
 801f0b6:	4619      	mov	r1, r3
 801f0b8:	6878      	ldr	r0, [r7, #4]
 801f0ba:	f7f6 feb1 	bl	8015e20 <pbuf_remove_header>
 801f0be:	4603      	mov	r3, r0
 801f0c0:	2b00      	cmp	r3, #0
 801f0c2:	d006      	beq.n	801f0d2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801f0c4:	4b2e      	ldr	r3, [pc, #184]	; (801f180 <icmp_input+0x1f8>)
 801f0c6:	22c7      	movs	r2, #199	; 0xc7
 801f0c8:	4930      	ldr	r1, [pc, #192]	; (801f18c <icmp_input+0x204>)
 801f0ca:	482f      	ldr	r0, [pc, #188]	; (801f188 <icmp_input+0x200>)
 801f0cc:	f002 fa92 	bl	80215f4 <iprintf>
          goto icmperr;
 801f0d0:	e04b      	b.n	801f16a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801f0d2:	687b      	ldr	r3, [r7, #4]
 801f0d4:	685b      	ldr	r3, [r3, #4]
 801f0d6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801f0d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f0da:	4619      	mov	r1, r3
 801f0dc:	6878      	ldr	r0, [r7, #4]
 801f0de:	f7f6 fe8f 	bl	8015e00 <pbuf_add_header>
 801f0e2:	4603      	mov	r3, r0
 801f0e4:	2b00      	cmp	r3, #0
 801f0e6:	d12b      	bne.n	801f140 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801f0e8:	687b      	ldr	r3, [r7, #4]
 801f0ea:	685b      	ldr	r3, [r3, #4]
 801f0ec:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801f0ee:	69fb      	ldr	r3, [r7, #28]
 801f0f0:	681a      	ldr	r2, [r3, #0]
 801f0f2:	68fb      	ldr	r3, [r7, #12]
 801f0f4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801f0f6:	4b20      	ldr	r3, [pc, #128]	; (801f178 <icmp_input+0x1f0>)
 801f0f8:	691a      	ldr	r2, [r3, #16]
 801f0fa:	68fb      	ldr	r3, [r7, #12]
 801f0fc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801f0fe:	693b      	ldr	r3, [r7, #16]
 801f100:	2200      	movs	r2, #0
 801f102:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801f104:	693b      	ldr	r3, [r7, #16]
 801f106:	2200      	movs	r2, #0
 801f108:	709a      	strb	r2, [r3, #2]
 801f10a:	2200      	movs	r2, #0
 801f10c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801f10e:	68fb      	ldr	r3, [r7, #12]
 801f110:	22ff      	movs	r2, #255	; 0xff
 801f112:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801f114:	68fb      	ldr	r3, [r7, #12]
 801f116:	2200      	movs	r2, #0
 801f118:	729a      	strb	r2, [r3, #10]
 801f11a:	2200      	movs	r2, #0
 801f11c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801f11e:	683b      	ldr	r3, [r7, #0]
 801f120:	9302      	str	r3, [sp, #8]
 801f122:	2301      	movs	r3, #1
 801f124:	9301      	str	r3, [sp, #4]
 801f126:	2300      	movs	r3, #0
 801f128:	9300      	str	r3, [sp, #0]
 801f12a:	23ff      	movs	r3, #255	; 0xff
 801f12c:	2200      	movs	r2, #0
 801f12e:	69f9      	ldr	r1, [r7, #28]
 801f130:	6878      	ldr	r0, [r7, #4]
 801f132:	f000 fa91 	bl	801f658 <ip4_output_if>
 801f136:	4603      	mov	r3, r0
 801f138:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801f13a:	e001      	b.n	801f140 <icmp_input+0x1b8>
      break;
 801f13c:	bf00      	nop
 801f13e:	e000      	b.n	801f142 <icmp_input+0x1ba>
      break;
 801f140:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801f142:	6878      	ldr	r0, [r7, #4]
 801f144:	f7f6 fef2 	bl	8015f2c <pbuf_free>
  return;
 801f148:	e013      	b.n	801f172 <icmp_input+0x1ea>
    goto lenerr;
 801f14a:	bf00      	nop
 801f14c:	e002      	b.n	801f154 <icmp_input+0x1cc>
    goto lenerr;
 801f14e:	bf00      	nop
 801f150:	e000      	b.n	801f154 <icmp_input+0x1cc>
        goto lenerr;
 801f152:	bf00      	nop
lenerr:
  pbuf_free(p);
 801f154:	6878      	ldr	r0, [r7, #4]
 801f156:	f7f6 fee9 	bl	8015f2c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801f15a:	e00a      	b.n	801f172 <icmp_input+0x1ea>
        goto icmperr;
 801f15c:	bf00      	nop
 801f15e:	e004      	b.n	801f16a <icmp_input+0x1e2>
        goto icmperr;
 801f160:	bf00      	nop
 801f162:	e002      	b.n	801f16a <icmp_input+0x1e2>
          goto icmperr;
 801f164:	bf00      	nop
 801f166:	e000      	b.n	801f16a <icmp_input+0x1e2>
          goto icmperr;
 801f168:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801f16a:	6878      	ldr	r0, [r7, #4]
 801f16c:	f7f6 fede 	bl	8015f2c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801f170:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801f172:	3728      	adds	r7, #40	; 0x28
 801f174:	46bd      	mov	sp, r7
 801f176:	bd80      	pop	{r7, pc}
 801f178:	2000cc24 	.word	0x2000cc24
 801f17c:	2000cc38 	.word	0x2000cc38
 801f180:	08024f74 	.word	0x08024f74
 801f184:	08024fac 	.word	0x08024fac
 801f188:	08024fe4 	.word	0x08024fe4
 801f18c:	0802500c 	.word	0x0802500c

0801f190 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801f190:	b580      	push	{r7, lr}
 801f192:	b082      	sub	sp, #8
 801f194:	af00      	add	r7, sp, #0
 801f196:	6078      	str	r0, [r7, #4]
 801f198:	460b      	mov	r3, r1
 801f19a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801f19c:	78fb      	ldrb	r3, [r7, #3]
 801f19e:	461a      	mov	r2, r3
 801f1a0:	2103      	movs	r1, #3
 801f1a2:	6878      	ldr	r0, [r7, #4]
 801f1a4:	f000 f814 	bl	801f1d0 <icmp_send_response>
}
 801f1a8:	bf00      	nop
 801f1aa:	3708      	adds	r7, #8
 801f1ac:	46bd      	mov	sp, r7
 801f1ae:	bd80      	pop	{r7, pc}

0801f1b0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801f1b0:	b580      	push	{r7, lr}
 801f1b2:	b082      	sub	sp, #8
 801f1b4:	af00      	add	r7, sp, #0
 801f1b6:	6078      	str	r0, [r7, #4]
 801f1b8:	460b      	mov	r3, r1
 801f1ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801f1bc:	78fb      	ldrb	r3, [r7, #3]
 801f1be:	461a      	mov	r2, r3
 801f1c0:	210b      	movs	r1, #11
 801f1c2:	6878      	ldr	r0, [r7, #4]
 801f1c4:	f000 f804 	bl	801f1d0 <icmp_send_response>
}
 801f1c8:	bf00      	nop
 801f1ca:	3708      	adds	r7, #8
 801f1cc:	46bd      	mov	sp, r7
 801f1ce:	bd80      	pop	{r7, pc}

0801f1d0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801f1d0:	b580      	push	{r7, lr}
 801f1d2:	b08c      	sub	sp, #48	; 0x30
 801f1d4:	af04      	add	r7, sp, #16
 801f1d6:	6078      	str	r0, [r7, #4]
 801f1d8:	460b      	mov	r3, r1
 801f1da:	70fb      	strb	r3, [r7, #3]
 801f1dc:	4613      	mov	r3, r2
 801f1de:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801f1e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f1e4:	2124      	movs	r1, #36	; 0x24
 801f1e6:	2022      	movs	r0, #34	; 0x22
 801f1e8:	f7f6 fbc0 	bl	801596c <pbuf_alloc>
 801f1ec:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801f1ee:	69fb      	ldr	r3, [r7, #28]
 801f1f0:	2b00      	cmp	r3, #0
 801f1f2:	d04c      	beq.n	801f28e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801f1f4:	69fb      	ldr	r3, [r7, #28]
 801f1f6:	895b      	ldrh	r3, [r3, #10]
 801f1f8:	2b23      	cmp	r3, #35	; 0x23
 801f1fa:	d806      	bhi.n	801f20a <icmp_send_response+0x3a>
 801f1fc:	4b26      	ldr	r3, [pc, #152]	; (801f298 <icmp_send_response+0xc8>)
 801f1fe:	f240 1269 	movw	r2, #361	; 0x169
 801f202:	4926      	ldr	r1, [pc, #152]	; (801f29c <icmp_send_response+0xcc>)
 801f204:	4826      	ldr	r0, [pc, #152]	; (801f2a0 <icmp_send_response+0xd0>)
 801f206:	f002 f9f5 	bl	80215f4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801f20a:	687b      	ldr	r3, [r7, #4]
 801f20c:	685b      	ldr	r3, [r3, #4]
 801f20e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801f210:	69fb      	ldr	r3, [r7, #28]
 801f212:	685b      	ldr	r3, [r3, #4]
 801f214:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801f216:	697b      	ldr	r3, [r7, #20]
 801f218:	78fa      	ldrb	r2, [r7, #3]
 801f21a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801f21c:	697b      	ldr	r3, [r7, #20]
 801f21e:	78ba      	ldrb	r2, [r7, #2]
 801f220:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801f222:	697b      	ldr	r3, [r7, #20]
 801f224:	2200      	movs	r2, #0
 801f226:	711a      	strb	r2, [r3, #4]
 801f228:	2200      	movs	r2, #0
 801f22a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801f22c:	697b      	ldr	r3, [r7, #20]
 801f22e:	2200      	movs	r2, #0
 801f230:	719a      	strb	r2, [r3, #6]
 801f232:	2200      	movs	r2, #0
 801f234:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801f236:	69fb      	ldr	r3, [r7, #28]
 801f238:	685b      	ldr	r3, [r3, #4]
 801f23a:	f103 0008 	add.w	r0, r3, #8
 801f23e:	687b      	ldr	r3, [r7, #4]
 801f240:	685b      	ldr	r3, [r3, #4]
 801f242:	221c      	movs	r2, #28
 801f244:	4619      	mov	r1, r3
 801f246:	f002 f91a 	bl	802147e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801f24a:	69bb      	ldr	r3, [r7, #24]
 801f24c:	68db      	ldr	r3, [r3, #12]
 801f24e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801f250:	f107 030c 	add.w	r3, r7, #12
 801f254:	4618      	mov	r0, r3
 801f256:	f000 f825 	bl	801f2a4 <ip4_route>
 801f25a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801f25c:	693b      	ldr	r3, [r7, #16]
 801f25e:	2b00      	cmp	r3, #0
 801f260:	d011      	beq.n	801f286 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801f262:	697b      	ldr	r3, [r7, #20]
 801f264:	2200      	movs	r2, #0
 801f266:	709a      	strb	r2, [r3, #2]
 801f268:	2200      	movs	r2, #0
 801f26a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801f26c:	f107 020c 	add.w	r2, r7, #12
 801f270:	693b      	ldr	r3, [r7, #16]
 801f272:	9302      	str	r3, [sp, #8]
 801f274:	2301      	movs	r3, #1
 801f276:	9301      	str	r3, [sp, #4]
 801f278:	2300      	movs	r3, #0
 801f27a:	9300      	str	r3, [sp, #0]
 801f27c:	23ff      	movs	r3, #255	; 0xff
 801f27e:	2100      	movs	r1, #0
 801f280:	69f8      	ldr	r0, [r7, #28]
 801f282:	f000 f9e9 	bl	801f658 <ip4_output_if>
  }
  pbuf_free(q);
 801f286:	69f8      	ldr	r0, [r7, #28]
 801f288:	f7f6 fe50 	bl	8015f2c <pbuf_free>
 801f28c:	e000      	b.n	801f290 <icmp_send_response+0xc0>
    return;
 801f28e:	bf00      	nop
}
 801f290:	3720      	adds	r7, #32
 801f292:	46bd      	mov	sp, r7
 801f294:	bd80      	pop	{r7, pc}
 801f296:	bf00      	nop
 801f298:	08024f74 	.word	0x08024f74
 801f29c:	08025040 	.word	0x08025040
 801f2a0:	08024fe4 	.word	0x08024fe4

0801f2a4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801f2a4:	b480      	push	{r7}
 801f2a6:	b085      	sub	sp, #20
 801f2a8:	af00      	add	r7, sp, #0
 801f2aa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801f2ac:	4b33      	ldr	r3, [pc, #204]	; (801f37c <ip4_route+0xd8>)
 801f2ae:	681b      	ldr	r3, [r3, #0]
 801f2b0:	60fb      	str	r3, [r7, #12]
 801f2b2:	e036      	b.n	801f322 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801f2b4:	68fb      	ldr	r3, [r7, #12]
 801f2b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f2ba:	f003 0301 	and.w	r3, r3, #1
 801f2be:	b2db      	uxtb	r3, r3
 801f2c0:	2b00      	cmp	r3, #0
 801f2c2:	d02b      	beq.n	801f31c <ip4_route+0x78>
 801f2c4:	68fb      	ldr	r3, [r7, #12]
 801f2c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f2ca:	089b      	lsrs	r3, r3, #2
 801f2cc:	f003 0301 	and.w	r3, r3, #1
 801f2d0:	b2db      	uxtb	r3, r3
 801f2d2:	2b00      	cmp	r3, #0
 801f2d4:	d022      	beq.n	801f31c <ip4_route+0x78>
 801f2d6:	68fb      	ldr	r3, [r7, #12]
 801f2d8:	3304      	adds	r3, #4
 801f2da:	681b      	ldr	r3, [r3, #0]
 801f2dc:	2b00      	cmp	r3, #0
 801f2de:	d01d      	beq.n	801f31c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801f2e0:	687b      	ldr	r3, [r7, #4]
 801f2e2:	681a      	ldr	r2, [r3, #0]
 801f2e4:	68fb      	ldr	r3, [r7, #12]
 801f2e6:	3304      	adds	r3, #4
 801f2e8:	681b      	ldr	r3, [r3, #0]
 801f2ea:	405a      	eors	r2, r3
 801f2ec:	68fb      	ldr	r3, [r7, #12]
 801f2ee:	3308      	adds	r3, #8
 801f2f0:	681b      	ldr	r3, [r3, #0]
 801f2f2:	4013      	ands	r3, r2
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	d101      	bne.n	801f2fc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801f2f8:	68fb      	ldr	r3, [r7, #12]
 801f2fa:	e038      	b.n	801f36e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801f2fc:	68fb      	ldr	r3, [r7, #12]
 801f2fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f302:	f003 0302 	and.w	r3, r3, #2
 801f306:	2b00      	cmp	r3, #0
 801f308:	d108      	bne.n	801f31c <ip4_route+0x78>
 801f30a:	687b      	ldr	r3, [r7, #4]
 801f30c:	681a      	ldr	r2, [r3, #0]
 801f30e:	68fb      	ldr	r3, [r7, #12]
 801f310:	330c      	adds	r3, #12
 801f312:	681b      	ldr	r3, [r3, #0]
 801f314:	429a      	cmp	r2, r3
 801f316:	d101      	bne.n	801f31c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801f318:	68fb      	ldr	r3, [r7, #12]
 801f31a:	e028      	b.n	801f36e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801f31c:	68fb      	ldr	r3, [r7, #12]
 801f31e:	681b      	ldr	r3, [r3, #0]
 801f320:	60fb      	str	r3, [r7, #12]
 801f322:	68fb      	ldr	r3, [r7, #12]
 801f324:	2b00      	cmp	r3, #0
 801f326:	d1c5      	bne.n	801f2b4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f328:	4b15      	ldr	r3, [pc, #84]	; (801f380 <ip4_route+0xdc>)
 801f32a:	681b      	ldr	r3, [r3, #0]
 801f32c:	2b00      	cmp	r3, #0
 801f32e:	d01a      	beq.n	801f366 <ip4_route+0xc2>
 801f330:	4b13      	ldr	r3, [pc, #76]	; (801f380 <ip4_route+0xdc>)
 801f332:	681b      	ldr	r3, [r3, #0]
 801f334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f338:	f003 0301 	and.w	r3, r3, #1
 801f33c:	2b00      	cmp	r3, #0
 801f33e:	d012      	beq.n	801f366 <ip4_route+0xc2>
 801f340:	4b0f      	ldr	r3, [pc, #60]	; (801f380 <ip4_route+0xdc>)
 801f342:	681b      	ldr	r3, [r3, #0]
 801f344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f348:	f003 0304 	and.w	r3, r3, #4
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	d00a      	beq.n	801f366 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801f350:	4b0b      	ldr	r3, [pc, #44]	; (801f380 <ip4_route+0xdc>)
 801f352:	681b      	ldr	r3, [r3, #0]
 801f354:	3304      	adds	r3, #4
 801f356:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f358:	2b00      	cmp	r3, #0
 801f35a:	d004      	beq.n	801f366 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801f35c:	687b      	ldr	r3, [r7, #4]
 801f35e:	681b      	ldr	r3, [r3, #0]
 801f360:	b2db      	uxtb	r3, r3
 801f362:	2b7f      	cmp	r3, #127	; 0x7f
 801f364:	d101      	bne.n	801f36a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801f366:	2300      	movs	r3, #0
 801f368:	e001      	b.n	801f36e <ip4_route+0xca>
  }

  return netif_default;
 801f36a:	4b05      	ldr	r3, [pc, #20]	; (801f380 <ip4_route+0xdc>)
 801f36c:	681b      	ldr	r3, [r3, #0]
}
 801f36e:	4618      	mov	r0, r3
 801f370:	3714      	adds	r7, #20
 801f372:	46bd      	mov	sp, r7
 801f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f378:	4770      	bx	lr
 801f37a:	bf00      	nop
 801f37c:	20010348 	.word	0x20010348
 801f380:	2001034c 	.word	0x2001034c

0801f384 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801f384:	b580      	push	{r7, lr}
 801f386:	b082      	sub	sp, #8
 801f388:	af00      	add	r7, sp, #0
 801f38a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801f38c:	687b      	ldr	r3, [r7, #4]
 801f38e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f392:	f003 0301 	and.w	r3, r3, #1
 801f396:	b2db      	uxtb	r3, r3
 801f398:	2b00      	cmp	r3, #0
 801f39a:	d016      	beq.n	801f3ca <ip4_input_accept+0x46>
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	3304      	adds	r3, #4
 801f3a0:	681b      	ldr	r3, [r3, #0]
 801f3a2:	2b00      	cmp	r3, #0
 801f3a4:	d011      	beq.n	801f3ca <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f3a6:	4b0b      	ldr	r3, [pc, #44]	; (801f3d4 <ip4_input_accept+0x50>)
 801f3a8:	695a      	ldr	r2, [r3, #20]
 801f3aa:	687b      	ldr	r3, [r7, #4]
 801f3ac:	3304      	adds	r3, #4
 801f3ae:	681b      	ldr	r3, [r3, #0]
 801f3b0:	429a      	cmp	r2, r3
 801f3b2:	d008      	beq.n	801f3c6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801f3b4:	4b07      	ldr	r3, [pc, #28]	; (801f3d4 <ip4_input_accept+0x50>)
 801f3b6:	695b      	ldr	r3, [r3, #20]
 801f3b8:	6879      	ldr	r1, [r7, #4]
 801f3ba:	4618      	mov	r0, r3
 801f3bc:	f000 fa24 	bl	801f808 <ip4_addr_isbroadcast_u32>
 801f3c0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f3c2:	2b00      	cmp	r3, #0
 801f3c4:	d001      	beq.n	801f3ca <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801f3c6:	2301      	movs	r3, #1
 801f3c8:	e000      	b.n	801f3cc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801f3ca:	2300      	movs	r3, #0
}
 801f3cc:	4618      	mov	r0, r3
 801f3ce:	3708      	adds	r7, #8
 801f3d0:	46bd      	mov	sp, r7
 801f3d2:	bd80      	pop	{r7, pc}
 801f3d4:	2000cc24 	.word	0x2000cc24

0801f3d8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801f3d8:	b580      	push	{r7, lr}
 801f3da:	b088      	sub	sp, #32
 801f3dc:	af00      	add	r7, sp, #0
 801f3de:	6078      	str	r0, [r7, #4]
 801f3e0:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801f3e2:	2301      	movs	r3, #1
 801f3e4:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801f3e6:	687b      	ldr	r3, [r7, #4]
 801f3e8:	685b      	ldr	r3, [r3, #4]
 801f3ea:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801f3ec:	69fb      	ldr	r3, [r7, #28]
 801f3ee:	781b      	ldrb	r3, [r3, #0]
 801f3f0:	091b      	lsrs	r3, r3, #4
 801f3f2:	b2db      	uxtb	r3, r3
 801f3f4:	2b04      	cmp	r3, #4
 801f3f6:	d004      	beq.n	801f402 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801f3f8:	6878      	ldr	r0, [r7, #4]
 801f3fa:	f7f6 fd97 	bl	8015f2c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801f3fe:	2300      	movs	r3, #0
 801f400:	e121      	b.n	801f646 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801f402:	69fb      	ldr	r3, [r7, #28]
 801f404:	781b      	ldrb	r3, [r3, #0]
 801f406:	f003 030f 	and.w	r3, r3, #15
 801f40a:	b2db      	uxtb	r3, r3
 801f40c:	009b      	lsls	r3, r3, #2
 801f40e:	b2db      	uxtb	r3, r3
 801f410:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801f412:	69fb      	ldr	r3, [r7, #28]
 801f414:	885b      	ldrh	r3, [r3, #2]
 801f416:	b29b      	uxth	r3, r3
 801f418:	4618      	mov	r0, r3
 801f41a:	f7f5 f9b9 	bl	8014790 <lwip_htons>
 801f41e:	4603      	mov	r3, r0
 801f420:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801f422:	687b      	ldr	r3, [r7, #4]
 801f424:	891b      	ldrh	r3, [r3, #8]
 801f426:	8a3a      	ldrh	r2, [r7, #16]
 801f428:	429a      	cmp	r2, r3
 801f42a:	d204      	bcs.n	801f436 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801f42c:	8a3b      	ldrh	r3, [r7, #16]
 801f42e:	4619      	mov	r1, r3
 801f430:	6878      	ldr	r0, [r7, #4]
 801f432:	f7f6 fbf5 	bl	8015c20 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801f436:	687b      	ldr	r3, [r7, #4]
 801f438:	895b      	ldrh	r3, [r3, #10]
 801f43a:	8a7a      	ldrh	r2, [r7, #18]
 801f43c:	429a      	cmp	r2, r3
 801f43e:	d807      	bhi.n	801f450 <ip4_input+0x78>
 801f440:	687b      	ldr	r3, [r7, #4]
 801f442:	891b      	ldrh	r3, [r3, #8]
 801f444:	8a3a      	ldrh	r2, [r7, #16]
 801f446:	429a      	cmp	r2, r3
 801f448:	d802      	bhi.n	801f450 <ip4_input+0x78>
 801f44a:	8a7b      	ldrh	r3, [r7, #18]
 801f44c:	2b13      	cmp	r3, #19
 801f44e:	d804      	bhi.n	801f45a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801f450:	6878      	ldr	r0, [r7, #4]
 801f452:	f7f6 fd6b 	bl	8015f2c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801f456:	2300      	movs	r3, #0
 801f458:	e0f5      	b.n	801f646 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801f45a:	69fb      	ldr	r3, [r7, #28]
 801f45c:	691b      	ldr	r3, [r3, #16]
 801f45e:	4a7c      	ldr	r2, [pc, #496]	; (801f650 <ip4_input+0x278>)
 801f460:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801f462:	69fb      	ldr	r3, [r7, #28]
 801f464:	68db      	ldr	r3, [r3, #12]
 801f466:	4a7a      	ldr	r2, [pc, #488]	; (801f650 <ip4_input+0x278>)
 801f468:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f46a:	4b79      	ldr	r3, [pc, #484]	; (801f650 <ip4_input+0x278>)
 801f46c:	695b      	ldr	r3, [r3, #20]
 801f46e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f472:	2be0      	cmp	r3, #224	; 0xe0
 801f474:	d112      	bne.n	801f49c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801f476:	683b      	ldr	r3, [r7, #0]
 801f478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f47c:	f003 0301 	and.w	r3, r3, #1
 801f480:	b2db      	uxtb	r3, r3
 801f482:	2b00      	cmp	r3, #0
 801f484:	d007      	beq.n	801f496 <ip4_input+0xbe>
 801f486:	683b      	ldr	r3, [r7, #0]
 801f488:	3304      	adds	r3, #4
 801f48a:	681b      	ldr	r3, [r3, #0]
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	d002      	beq.n	801f496 <ip4_input+0xbe>
      netif = inp;
 801f490:	683b      	ldr	r3, [r7, #0]
 801f492:	61bb      	str	r3, [r7, #24]
 801f494:	e02a      	b.n	801f4ec <ip4_input+0x114>
    } else {
      netif = NULL;
 801f496:	2300      	movs	r3, #0
 801f498:	61bb      	str	r3, [r7, #24]
 801f49a:	e027      	b.n	801f4ec <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801f49c:	6838      	ldr	r0, [r7, #0]
 801f49e:	f7ff ff71 	bl	801f384 <ip4_input_accept>
 801f4a2:	4603      	mov	r3, r0
 801f4a4:	2b00      	cmp	r3, #0
 801f4a6:	d002      	beq.n	801f4ae <ip4_input+0xd6>
      netif = inp;
 801f4a8:	683b      	ldr	r3, [r7, #0]
 801f4aa:	61bb      	str	r3, [r7, #24]
 801f4ac:	e01e      	b.n	801f4ec <ip4_input+0x114>
    } else {
      netif = NULL;
 801f4ae:	2300      	movs	r3, #0
 801f4b0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801f4b2:	4b67      	ldr	r3, [pc, #412]	; (801f650 <ip4_input+0x278>)
 801f4b4:	695b      	ldr	r3, [r3, #20]
 801f4b6:	b2db      	uxtb	r3, r3
 801f4b8:	2b7f      	cmp	r3, #127	; 0x7f
 801f4ba:	d017      	beq.n	801f4ec <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801f4bc:	4b65      	ldr	r3, [pc, #404]	; (801f654 <ip4_input+0x27c>)
 801f4be:	681b      	ldr	r3, [r3, #0]
 801f4c0:	61bb      	str	r3, [r7, #24]
 801f4c2:	e00e      	b.n	801f4e2 <ip4_input+0x10a>
          if (netif == inp) {
 801f4c4:	69ba      	ldr	r2, [r7, #24]
 801f4c6:	683b      	ldr	r3, [r7, #0]
 801f4c8:	429a      	cmp	r2, r3
 801f4ca:	d006      	beq.n	801f4da <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801f4cc:	69b8      	ldr	r0, [r7, #24]
 801f4ce:	f7ff ff59 	bl	801f384 <ip4_input_accept>
 801f4d2:	4603      	mov	r3, r0
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	d108      	bne.n	801f4ea <ip4_input+0x112>
 801f4d8:	e000      	b.n	801f4dc <ip4_input+0x104>
            continue;
 801f4da:	bf00      	nop
        NETIF_FOREACH(netif) {
 801f4dc:	69bb      	ldr	r3, [r7, #24]
 801f4de:	681b      	ldr	r3, [r3, #0]
 801f4e0:	61bb      	str	r3, [r7, #24]
 801f4e2:	69bb      	ldr	r3, [r7, #24]
 801f4e4:	2b00      	cmp	r3, #0
 801f4e6:	d1ed      	bne.n	801f4c4 <ip4_input+0xec>
 801f4e8:	e000      	b.n	801f4ec <ip4_input+0x114>
            break;
 801f4ea:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801f4ec:	69bb      	ldr	r3, [r7, #24]
 801f4ee:	2b00      	cmp	r3, #0
 801f4f0:	d111      	bne.n	801f516 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801f4f2:	69fb      	ldr	r3, [r7, #28]
 801f4f4:	7a5b      	ldrb	r3, [r3, #9]
 801f4f6:	2b11      	cmp	r3, #17
 801f4f8:	d10d      	bne.n	801f516 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801f4fa:	8a7b      	ldrh	r3, [r7, #18]
 801f4fc:	69fa      	ldr	r2, [r7, #28]
 801f4fe:	4413      	add	r3, r2
 801f500:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801f502:	68fb      	ldr	r3, [r7, #12]
 801f504:	885b      	ldrh	r3, [r3, #2]
 801f506:	b29b      	uxth	r3, r3
 801f508:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801f50c:	d103      	bne.n	801f516 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801f50e:	683b      	ldr	r3, [r7, #0]
 801f510:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801f512:	2300      	movs	r3, #0
 801f514:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801f516:	697b      	ldr	r3, [r7, #20]
 801f518:	2b00      	cmp	r3, #0
 801f51a:	d017      	beq.n	801f54c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801f51c:	4b4c      	ldr	r3, [pc, #304]	; (801f650 <ip4_input+0x278>)
 801f51e:	691b      	ldr	r3, [r3, #16]
 801f520:	2b00      	cmp	r3, #0
 801f522:	d013      	beq.n	801f54c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f524:	4b4a      	ldr	r3, [pc, #296]	; (801f650 <ip4_input+0x278>)
 801f526:	691b      	ldr	r3, [r3, #16]
 801f528:	6839      	ldr	r1, [r7, #0]
 801f52a:	4618      	mov	r0, r3
 801f52c:	f000 f96c 	bl	801f808 <ip4_addr_isbroadcast_u32>
 801f530:	4603      	mov	r3, r0
 801f532:	2b00      	cmp	r3, #0
 801f534:	d105      	bne.n	801f542 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801f536:	4b46      	ldr	r3, [pc, #280]	; (801f650 <ip4_input+0x278>)
 801f538:	691b      	ldr	r3, [r3, #16]
 801f53a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f53e:	2be0      	cmp	r3, #224	; 0xe0
 801f540:	d104      	bne.n	801f54c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801f542:	6878      	ldr	r0, [r7, #4]
 801f544:	f7f6 fcf2 	bl	8015f2c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801f548:	2300      	movs	r3, #0
 801f54a:	e07c      	b.n	801f646 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801f54c:	69bb      	ldr	r3, [r7, #24]
 801f54e:	2b00      	cmp	r3, #0
 801f550:	d104      	bne.n	801f55c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801f552:	6878      	ldr	r0, [r7, #4]
 801f554:	f7f6 fcea 	bl	8015f2c <pbuf_free>
    return ERR_OK;
 801f558:	2300      	movs	r3, #0
 801f55a:	e074      	b.n	801f646 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801f55c:	69fb      	ldr	r3, [r7, #28]
 801f55e:	88db      	ldrh	r3, [r3, #6]
 801f560:	b29b      	uxth	r3, r3
 801f562:	461a      	mov	r2, r3
 801f564:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801f568:	4013      	ands	r3, r2
 801f56a:	2b00      	cmp	r3, #0
 801f56c:	d00b      	beq.n	801f586 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801f56e:	6878      	ldr	r0, [r7, #4]
 801f570:	f000 fd22 	bl	801ffb8 <ip4_reass>
 801f574:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801f576:	687b      	ldr	r3, [r7, #4]
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d101      	bne.n	801f580 <ip4_input+0x1a8>
      return ERR_OK;
 801f57c:	2300      	movs	r3, #0
 801f57e:	e062      	b.n	801f646 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801f580:	687b      	ldr	r3, [r7, #4]
 801f582:	685b      	ldr	r3, [r3, #4]
 801f584:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801f586:	4a32      	ldr	r2, [pc, #200]	; (801f650 <ip4_input+0x278>)
 801f588:	69bb      	ldr	r3, [r7, #24]
 801f58a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801f58c:	4a30      	ldr	r2, [pc, #192]	; (801f650 <ip4_input+0x278>)
 801f58e:	683b      	ldr	r3, [r7, #0]
 801f590:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801f592:	4a2f      	ldr	r2, [pc, #188]	; (801f650 <ip4_input+0x278>)
 801f594:	69fb      	ldr	r3, [r7, #28]
 801f596:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801f598:	69fb      	ldr	r3, [r7, #28]
 801f59a:	781b      	ldrb	r3, [r3, #0]
 801f59c:	f003 030f 	and.w	r3, r3, #15
 801f5a0:	b2db      	uxtb	r3, r3
 801f5a2:	009b      	lsls	r3, r3, #2
 801f5a4:	b2db      	uxtb	r3, r3
 801f5a6:	b29a      	uxth	r2, r3
 801f5a8:	4b29      	ldr	r3, [pc, #164]	; (801f650 <ip4_input+0x278>)
 801f5aa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801f5ac:	8a7b      	ldrh	r3, [r7, #18]
 801f5ae:	4619      	mov	r1, r3
 801f5b0:	6878      	ldr	r0, [r7, #4]
 801f5b2:	f7f6 fc35 	bl	8015e20 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801f5b6:	69fb      	ldr	r3, [r7, #28]
 801f5b8:	7a5b      	ldrb	r3, [r3, #9]
 801f5ba:	2b06      	cmp	r3, #6
 801f5bc:	d009      	beq.n	801f5d2 <ip4_input+0x1fa>
 801f5be:	2b11      	cmp	r3, #17
 801f5c0:	d002      	beq.n	801f5c8 <ip4_input+0x1f0>
 801f5c2:	2b01      	cmp	r3, #1
 801f5c4:	d00a      	beq.n	801f5dc <ip4_input+0x204>
 801f5c6:	e00e      	b.n	801f5e6 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801f5c8:	6839      	ldr	r1, [r7, #0]
 801f5ca:	6878      	ldr	r0, [r7, #4]
 801f5cc:	f7fc fada 	bl	801bb84 <udp_input>
        break;
 801f5d0:	e026      	b.n	801f620 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801f5d2:	6839      	ldr	r1, [r7, #0]
 801f5d4:	6878      	ldr	r0, [r7, #4]
 801f5d6:	f7f8 fae1 	bl	8017b9c <tcp_input>
        break;
 801f5da:	e021      	b.n	801f620 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801f5dc:	6839      	ldr	r1, [r7, #0]
 801f5de:	6878      	ldr	r0, [r7, #4]
 801f5e0:	f7ff fcd2 	bl	801ef88 <icmp_input>
        break;
 801f5e4:	e01c      	b.n	801f620 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f5e6:	4b1a      	ldr	r3, [pc, #104]	; (801f650 <ip4_input+0x278>)
 801f5e8:	695b      	ldr	r3, [r3, #20]
 801f5ea:	69b9      	ldr	r1, [r7, #24]
 801f5ec:	4618      	mov	r0, r3
 801f5ee:	f000 f90b 	bl	801f808 <ip4_addr_isbroadcast_u32>
 801f5f2:	4603      	mov	r3, r0
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	d10f      	bne.n	801f618 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f5f8:	4b15      	ldr	r3, [pc, #84]	; (801f650 <ip4_input+0x278>)
 801f5fa:	695b      	ldr	r3, [r3, #20]
 801f5fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f600:	2be0      	cmp	r3, #224	; 0xe0
 801f602:	d009      	beq.n	801f618 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801f604:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801f608:	4619      	mov	r1, r3
 801f60a:	6878      	ldr	r0, [r7, #4]
 801f60c:	f7f6 fc7b 	bl	8015f06 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801f610:	2102      	movs	r1, #2
 801f612:	6878      	ldr	r0, [r7, #4]
 801f614:	f7ff fdbc 	bl	801f190 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801f618:	6878      	ldr	r0, [r7, #4]
 801f61a:	f7f6 fc87 	bl	8015f2c <pbuf_free>
        break;
 801f61e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801f620:	4b0b      	ldr	r3, [pc, #44]	; (801f650 <ip4_input+0x278>)
 801f622:	2200      	movs	r2, #0
 801f624:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801f626:	4b0a      	ldr	r3, [pc, #40]	; (801f650 <ip4_input+0x278>)
 801f628:	2200      	movs	r2, #0
 801f62a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801f62c:	4b08      	ldr	r3, [pc, #32]	; (801f650 <ip4_input+0x278>)
 801f62e:	2200      	movs	r2, #0
 801f630:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801f632:	4b07      	ldr	r3, [pc, #28]	; (801f650 <ip4_input+0x278>)
 801f634:	2200      	movs	r2, #0
 801f636:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801f638:	4b05      	ldr	r3, [pc, #20]	; (801f650 <ip4_input+0x278>)
 801f63a:	2200      	movs	r2, #0
 801f63c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801f63e:	4b04      	ldr	r3, [pc, #16]	; (801f650 <ip4_input+0x278>)
 801f640:	2200      	movs	r2, #0
 801f642:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801f644:	2300      	movs	r3, #0
}
 801f646:	4618      	mov	r0, r3
 801f648:	3720      	adds	r7, #32
 801f64a:	46bd      	mov	sp, r7
 801f64c:	bd80      	pop	{r7, pc}
 801f64e:	bf00      	nop
 801f650:	2000cc24 	.word	0x2000cc24
 801f654:	20010348 	.word	0x20010348

0801f658 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801f658:	b580      	push	{r7, lr}
 801f65a:	b08a      	sub	sp, #40	; 0x28
 801f65c:	af04      	add	r7, sp, #16
 801f65e:	60f8      	str	r0, [r7, #12]
 801f660:	60b9      	str	r1, [r7, #8]
 801f662:	607a      	str	r2, [r7, #4]
 801f664:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801f666:	68bb      	ldr	r3, [r7, #8]
 801f668:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801f66a:	687b      	ldr	r3, [r7, #4]
 801f66c:	2b00      	cmp	r3, #0
 801f66e:	d009      	beq.n	801f684 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801f670:	68bb      	ldr	r3, [r7, #8]
 801f672:	2b00      	cmp	r3, #0
 801f674:	d003      	beq.n	801f67e <ip4_output_if+0x26>
 801f676:	68bb      	ldr	r3, [r7, #8]
 801f678:	681b      	ldr	r3, [r3, #0]
 801f67a:	2b00      	cmp	r3, #0
 801f67c:	d102      	bne.n	801f684 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801f67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f680:	3304      	adds	r3, #4
 801f682:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801f684:	78fa      	ldrb	r2, [r7, #3]
 801f686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f688:	9302      	str	r3, [sp, #8]
 801f68a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f68e:	9301      	str	r3, [sp, #4]
 801f690:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f694:	9300      	str	r3, [sp, #0]
 801f696:	4613      	mov	r3, r2
 801f698:	687a      	ldr	r2, [r7, #4]
 801f69a:	6979      	ldr	r1, [r7, #20]
 801f69c:	68f8      	ldr	r0, [r7, #12]
 801f69e:	f000 f805 	bl	801f6ac <ip4_output_if_src>
 801f6a2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801f6a4:	4618      	mov	r0, r3
 801f6a6:	3718      	adds	r7, #24
 801f6a8:	46bd      	mov	sp, r7
 801f6aa:	bd80      	pop	{r7, pc}

0801f6ac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801f6ac:	b580      	push	{r7, lr}
 801f6ae:	b088      	sub	sp, #32
 801f6b0:	af00      	add	r7, sp, #0
 801f6b2:	60f8      	str	r0, [r7, #12]
 801f6b4:	60b9      	str	r1, [r7, #8]
 801f6b6:	607a      	str	r2, [r7, #4]
 801f6b8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801f6ba:	68fb      	ldr	r3, [r7, #12]
 801f6bc:	7b9b      	ldrb	r3, [r3, #14]
 801f6be:	2b01      	cmp	r3, #1
 801f6c0:	d006      	beq.n	801f6d0 <ip4_output_if_src+0x24>
 801f6c2:	4b4b      	ldr	r3, [pc, #300]	; (801f7f0 <ip4_output_if_src+0x144>)
 801f6c4:	f44f 7255 	mov.w	r2, #852	; 0x354
 801f6c8:	494a      	ldr	r1, [pc, #296]	; (801f7f4 <ip4_output_if_src+0x148>)
 801f6ca:	484b      	ldr	r0, [pc, #300]	; (801f7f8 <ip4_output_if_src+0x14c>)
 801f6cc:	f001 ff92 	bl	80215f4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801f6d0:	687b      	ldr	r3, [r7, #4]
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	d060      	beq.n	801f798 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801f6d6:	2314      	movs	r3, #20
 801f6d8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801f6da:	2114      	movs	r1, #20
 801f6dc:	68f8      	ldr	r0, [r7, #12]
 801f6de:	f7f6 fb8f 	bl	8015e00 <pbuf_add_header>
 801f6e2:	4603      	mov	r3, r0
 801f6e4:	2b00      	cmp	r3, #0
 801f6e6:	d002      	beq.n	801f6ee <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801f6e8:	f06f 0301 	mvn.w	r3, #1
 801f6ec:	e07c      	b.n	801f7e8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801f6ee:	68fb      	ldr	r3, [r7, #12]
 801f6f0:	685b      	ldr	r3, [r3, #4]
 801f6f2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801f6f4:	68fb      	ldr	r3, [r7, #12]
 801f6f6:	895b      	ldrh	r3, [r3, #10]
 801f6f8:	2b13      	cmp	r3, #19
 801f6fa:	d806      	bhi.n	801f70a <ip4_output_if_src+0x5e>
 801f6fc:	4b3c      	ldr	r3, [pc, #240]	; (801f7f0 <ip4_output_if_src+0x144>)
 801f6fe:	f240 3289 	movw	r2, #905	; 0x389
 801f702:	493e      	ldr	r1, [pc, #248]	; (801f7fc <ip4_output_if_src+0x150>)
 801f704:	483c      	ldr	r0, [pc, #240]	; (801f7f8 <ip4_output_if_src+0x14c>)
 801f706:	f001 ff75 	bl	80215f4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801f70a:	69fb      	ldr	r3, [r7, #28]
 801f70c:	78fa      	ldrb	r2, [r7, #3]
 801f70e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801f710:	69fb      	ldr	r3, [r7, #28]
 801f712:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801f716:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801f718:	687b      	ldr	r3, [r7, #4]
 801f71a:	681a      	ldr	r2, [r3, #0]
 801f71c:	69fb      	ldr	r3, [r7, #28]
 801f71e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801f720:	8b7b      	ldrh	r3, [r7, #26]
 801f722:	089b      	lsrs	r3, r3, #2
 801f724:	b29b      	uxth	r3, r3
 801f726:	b2db      	uxtb	r3, r3
 801f728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f72c:	b2da      	uxtb	r2, r3
 801f72e:	69fb      	ldr	r3, [r7, #28]
 801f730:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801f732:	69fb      	ldr	r3, [r7, #28]
 801f734:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801f738:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801f73a:	68fb      	ldr	r3, [r7, #12]
 801f73c:	891b      	ldrh	r3, [r3, #8]
 801f73e:	4618      	mov	r0, r3
 801f740:	f7f5 f826 	bl	8014790 <lwip_htons>
 801f744:	4603      	mov	r3, r0
 801f746:	461a      	mov	r2, r3
 801f748:	69fb      	ldr	r3, [r7, #28]
 801f74a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801f74c:	69fb      	ldr	r3, [r7, #28]
 801f74e:	2200      	movs	r2, #0
 801f750:	719a      	strb	r2, [r3, #6]
 801f752:	2200      	movs	r2, #0
 801f754:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801f756:	4b2a      	ldr	r3, [pc, #168]	; (801f800 <ip4_output_if_src+0x154>)
 801f758:	881b      	ldrh	r3, [r3, #0]
 801f75a:	4618      	mov	r0, r3
 801f75c:	f7f5 f818 	bl	8014790 <lwip_htons>
 801f760:	4603      	mov	r3, r0
 801f762:	461a      	mov	r2, r3
 801f764:	69fb      	ldr	r3, [r7, #28]
 801f766:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801f768:	4b25      	ldr	r3, [pc, #148]	; (801f800 <ip4_output_if_src+0x154>)
 801f76a:	881b      	ldrh	r3, [r3, #0]
 801f76c:	3301      	adds	r3, #1
 801f76e:	b29a      	uxth	r2, r3
 801f770:	4b23      	ldr	r3, [pc, #140]	; (801f800 <ip4_output_if_src+0x154>)
 801f772:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801f774:	68bb      	ldr	r3, [r7, #8]
 801f776:	2b00      	cmp	r3, #0
 801f778:	d104      	bne.n	801f784 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801f77a:	4b22      	ldr	r3, [pc, #136]	; (801f804 <ip4_output_if_src+0x158>)
 801f77c:	681a      	ldr	r2, [r3, #0]
 801f77e:	69fb      	ldr	r3, [r7, #28]
 801f780:	60da      	str	r2, [r3, #12]
 801f782:	e003      	b.n	801f78c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801f784:	68bb      	ldr	r3, [r7, #8]
 801f786:	681a      	ldr	r2, [r3, #0]
 801f788:	69fb      	ldr	r3, [r7, #28]
 801f78a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801f78c:	69fb      	ldr	r3, [r7, #28]
 801f78e:	2200      	movs	r2, #0
 801f790:	729a      	strb	r2, [r3, #10]
 801f792:	2200      	movs	r2, #0
 801f794:	72da      	strb	r2, [r3, #11]
 801f796:	e00f      	b.n	801f7b8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801f798:	68fb      	ldr	r3, [r7, #12]
 801f79a:	895b      	ldrh	r3, [r3, #10]
 801f79c:	2b13      	cmp	r3, #19
 801f79e:	d802      	bhi.n	801f7a6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801f7a0:	f06f 0301 	mvn.w	r3, #1
 801f7a4:	e020      	b.n	801f7e8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801f7a6:	68fb      	ldr	r3, [r7, #12]
 801f7a8:	685b      	ldr	r3, [r3, #4]
 801f7aa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801f7ac:	69fb      	ldr	r3, [r7, #28]
 801f7ae:	691b      	ldr	r3, [r3, #16]
 801f7b0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801f7b2:	f107 0314 	add.w	r3, r7, #20
 801f7b6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801f7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f7ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801f7bc:	2b00      	cmp	r3, #0
 801f7be:	d00c      	beq.n	801f7da <ip4_output_if_src+0x12e>
 801f7c0:	68fb      	ldr	r3, [r7, #12]
 801f7c2:	891a      	ldrh	r2, [r3, #8]
 801f7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f7c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801f7c8:	429a      	cmp	r2, r3
 801f7ca:	d906      	bls.n	801f7da <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801f7cc:	687a      	ldr	r2, [r7, #4]
 801f7ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801f7d0:	68f8      	ldr	r0, [r7, #12]
 801f7d2:	f000 fddd 	bl	8020390 <ip4_frag>
 801f7d6:	4603      	mov	r3, r0
 801f7d8:	e006      	b.n	801f7e8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801f7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f7dc:	695b      	ldr	r3, [r3, #20]
 801f7de:	687a      	ldr	r2, [r7, #4]
 801f7e0:	68f9      	ldr	r1, [r7, #12]
 801f7e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f7e4:	4798      	blx	r3
 801f7e6:	4603      	mov	r3, r0
}
 801f7e8:	4618      	mov	r0, r3
 801f7ea:	3720      	adds	r7, #32
 801f7ec:	46bd      	mov	sp, r7
 801f7ee:	bd80      	pop	{r7, pc}
 801f7f0:	0802506c 	.word	0x0802506c
 801f7f4:	080250a0 	.word	0x080250a0
 801f7f8:	080250ac 	.word	0x080250ac
 801f7fc:	080250d4 	.word	0x080250d4
 801f800:	200090fe 	.word	0x200090fe
 801f804:	08025548 	.word	0x08025548

0801f808 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801f808:	b480      	push	{r7}
 801f80a:	b085      	sub	sp, #20
 801f80c:	af00      	add	r7, sp, #0
 801f80e:	6078      	str	r0, [r7, #4]
 801f810:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801f812:	687b      	ldr	r3, [r7, #4]
 801f814:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801f816:	687b      	ldr	r3, [r7, #4]
 801f818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f81c:	d002      	beq.n	801f824 <ip4_addr_isbroadcast_u32+0x1c>
 801f81e:	687b      	ldr	r3, [r7, #4]
 801f820:	2b00      	cmp	r3, #0
 801f822:	d101      	bne.n	801f828 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801f824:	2301      	movs	r3, #1
 801f826:	e02a      	b.n	801f87e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801f828:	683b      	ldr	r3, [r7, #0]
 801f82a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f82e:	f003 0302 	and.w	r3, r3, #2
 801f832:	2b00      	cmp	r3, #0
 801f834:	d101      	bne.n	801f83a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801f836:	2300      	movs	r3, #0
 801f838:	e021      	b.n	801f87e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801f83a:	683b      	ldr	r3, [r7, #0]
 801f83c:	3304      	adds	r3, #4
 801f83e:	681b      	ldr	r3, [r3, #0]
 801f840:	687a      	ldr	r2, [r7, #4]
 801f842:	429a      	cmp	r2, r3
 801f844:	d101      	bne.n	801f84a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801f846:	2300      	movs	r3, #0
 801f848:	e019      	b.n	801f87e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801f84a:	68fa      	ldr	r2, [r7, #12]
 801f84c:	683b      	ldr	r3, [r7, #0]
 801f84e:	3304      	adds	r3, #4
 801f850:	681b      	ldr	r3, [r3, #0]
 801f852:	405a      	eors	r2, r3
 801f854:	683b      	ldr	r3, [r7, #0]
 801f856:	3308      	adds	r3, #8
 801f858:	681b      	ldr	r3, [r3, #0]
 801f85a:	4013      	ands	r3, r2
 801f85c:	2b00      	cmp	r3, #0
 801f85e:	d10d      	bne.n	801f87c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801f860:	683b      	ldr	r3, [r7, #0]
 801f862:	3308      	adds	r3, #8
 801f864:	681b      	ldr	r3, [r3, #0]
 801f866:	43da      	mvns	r2, r3
 801f868:	687b      	ldr	r3, [r7, #4]
 801f86a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801f86c:	683b      	ldr	r3, [r7, #0]
 801f86e:	3308      	adds	r3, #8
 801f870:	681b      	ldr	r3, [r3, #0]
 801f872:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801f874:	429a      	cmp	r2, r3
 801f876:	d101      	bne.n	801f87c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801f878:	2301      	movs	r3, #1
 801f87a:	e000      	b.n	801f87e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801f87c:	2300      	movs	r3, #0
  }
}
 801f87e:	4618      	mov	r0, r3
 801f880:	3714      	adds	r7, #20
 801f882:	46bd      	mov	sp, r7
 801f884:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f888:	4770      	bx	lr
	...

0801f88c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801f88c:	b580      	push	{r7, lr}
 801f88e:	b082      	sub	sp, #8
 801f890:	af00      	add	r7, sp, #0
 801f892:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801f894:	2210      	movs	r2, #16
 801f896:	4904      	ldr	r1, [pc, #16]	; (801f8a8 <ip4addr_ntoa+0x1c>)
 801f898:	6878      	ldr	r0, [r7, #4]
 801f89a:	f000 f807 	bl	801f8ac <ip4addr_ntoa_r>
 801f89e:	4603      	mov	r3, r0
}
 801f8a0:	4618      	mov	r0, r3
 801f8a2:	3708      	adds	r7, #8
 801f8a4:	46bd      	mov	sp, r7
 801f8a6:	bd80      	pop	{r7, pc}
 801f8a8:	20009100 	.word	0x20009100

0801f8ac <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801f8ac:	b480      	push	{r7}
 801f8ae:	b08d      	sub	sp, #52	; 0x34
 801f8b0:	af00      	add	r7, sp, #0
 801f8b2:	60f8      	str	r0, [r7, #12]
 801f8b4:	60b9      	str	r1, [r7, #8]
 801f8b6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801f8b8:	2300      	movs	r3, #0
 801f8ba:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801f8bc:	68fb      	ldr	r3, [r7, #12]
 801f8be:	681b      	ldr	r3, [r3, #0]
 801f8c0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801f8c2:	68bb      	ldr	r3, [r7, #8]
 801f8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 801f8c6:	f107 0318 	add.w	r3, r7, #24
 801f8ca:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801f8cc:	2300      	movs	r3, #0
 801f8ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801f8d2:	e059      	b.n	801f988 <ip4addr_ntoa_r+0xdc>
    i = 0;
 801f8d4:	2300      	movs	r3, #0
 801f8d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801f8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8dc:	781a      	ldrb	r2, [r3, #0]
 801f8de:	4b33      	ldr	r3, [pc, #204]	; (801f9ac <ip4addr_ntoa_r+0x100>)
 801f8e0:	fba3 1302 	umull	r1, r3, r3, r2
 801f8e4:	08d9      	lsrs	r1, r3, #3
 801f8e6:	460b      	mov	r3, r1
 801f8e8:	009b      	lsls	r3, r3, #2
 801f8ea:	440b      	add	r3, r1
 801f8ec:	005b      	lsls	r3, r3, #1
 801f8ee:	1ad3      	subs	r3, r2, r3
 801f8f0:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801f8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8f4:	781b      	ldrb	r3, [r3, #0]
 801f8f6:	4a2d      	ldr	r2, [pc, #180]	; (801f9ac <ip4addr_ntoa_r+0x100>)
 801f8f8:	fba2 2303 	umull	r2, r3, r2, r3
 801f8fc:	08db      	lsrs	r3, r3, #3
 801f8fe:	b2da      	uxtb	r2, r3
 801f900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f902:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801f904:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f908:	1c5a      	adds	r2, r3, #1
 801f90a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801f90e:	4619      	mov	r1, r3
 801f910:	7ffb      	ldrb	r3, [r7, #31]
 801f912:	3330      	adds	r3, #48	; 0x30
 801f914:	b2da      	uxtb	r2, r3
 801f916:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f91a:	440b      	add	r3, r1
 801f91c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801f920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f922:	781b      	ldrb	r3, [r3, #0]
 801f924:	2b00      	cmp	r3, #0
 801f926:	d1d8      	bne.n	801f8da <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801f928:	e012      	b.n	801f950 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 801f92a:	6a3b      	ldr	r3, [r7, #32]
 801f92c:	1c5a      	adds	r2, r3, #1
 801f92e:	623a      	str	r2, [r7, #32]
 801f930:	687a      	ldr	r2, [r7, #4]
 801f932:	429a      	cmp	r2, r3
 801f934:	dc01      	bgt.n	801f93a <ip4addr_ntoa_r+0x8e>
        return NULL;
 801f936:	2300      	movs	r3, #0
 801f938:	e031      	b.n	801f99e <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 801f93a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801f93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f940:	1c59      	adds	r1, r3, #1
 801f942:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f944:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801f948:	440a      	add	r2, r1
 801f94a:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801f94e:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801f950:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f954:	1e5a      	subs	r2, r3, #1
 801f956:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801f95a:	2b00      	cmp	r3, #0
 801f95c:	d1e5      	bne.n	801f92a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801f95e:	6a3b      	ldr	r3, [r7, #32]
 801f960:	1c5a      	adds	r2, r3, #1
 801f962:	623a      	str	r2, [r7, #32]
 801f964:	687a      	ldr	r2, [r7, #4]
 801f966:	429a      	cmp	r2, r3
 801f968:	dc01      	bgt.n	801f96e <ip4addr_ntoa_r+0xc2>
      return NULL;
 801f96a:	2300      	movs	r3, #0
 801f96c:	e017      	b.n	801f99e <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 801f96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f970:	1c5a      	adds	r2, r3, #1
 801f972:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f974:	222e      	movs	r2, #46	; 0x2e
 801f976:	701a      	strb	r2, [r3, #0]
    ap++;
 801f978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f97a:	3301      	adds	r3, #1
 801f97c:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801f97e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f982:	3301      	adds	r3, #1
 801f984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801f988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f98c:	2b03      	cmp	r3, #3
 801f98e:	d9a1      	bls.n	801f8d4 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801f990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f992:	3b01      	subs	r3, #1
 801f994:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f998:	2200      	movs	r2, #0
 801f99a:	701a      	strb	r2, [r3, #0]
  return buf;
 801f99c:	68bb      	ldr	r3, [r7, #8]
}
 801f99e:	4618      	mov	r0, r3
 801f9a0:	3734      	adds	r7, #52	; 0x34
 801f9a2:	46bd      	mov	sp, r7
 801f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9a8:	4770      	bx	lr
 801f9aa:	bf00      	nop
 801f9ac:	cccccccd 	.word	0xcccccccd

0801f9b0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801f9b0:	b580      	push	{r7, lr}
 801f9b2:	b084      	sub	sp, #16
 801f9b4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801f9b6:	2300      	movs	r3, #0
 801f9b8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801f9ba:	4b12      	ldr	r3, [pc, #72]	; (801fa04 <ip_reass_tmr+0x54>)
 801f9bc:	681b      	ldr	r3, [r3, #0]
 801f9be:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801f9c0:	e018      	b.n	801f9f4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801f9c2:	68fb      	ldr	r3, [r7, #12]
 801f9c4:	7fdb      	ldrb	r3, [r3, #31]
 801f9c6:	2b00      	cmp	r3, #0
 801f9c8:	d00b      	beq.n	801f9e2 <ip_reass_tmr+0x32>
      r->timer--;
 801f9ca:	68fb      	ldr	r3, [r7, #12]
 801f9cc:	7fdb      	ldrb	r3, [r3, #31]
 801f9ce:	3b01      	subs	r3, #1
 801f9d0:	b2da      	uxtb	r2, r3
 801f9d2:	68fb      	ldr	r3, [r7, #12]
 801f9d4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801f9d6:	68fb      	ldr	r3, [r7, #12]
 801f9d8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801f9da:	68fb      	ldr	r3, [r7, #12]
 801f9dc:	681b      	ldr	r3, [r3, #0]
 801f9de:	60fb      	str	r3, [r7, #12]
 801f9e0:	e008      	b.n	801f9f4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801f9e2:	68fb      	ldr	r3, [r7, #12]
 801f9e4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801f9e6:	68fb      	ldr	r3, [r7, #12]
 801f9e8:	681b      	ldr	r3, [r3, #0]
 801f9ea:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801f9ec:	68b9      	ldr	r1, [r7, #8]
 801f9ee:	6878      	ldr	r0, [r7, #4]
 801f9f0:	f000 f80a 	bl	801fa08 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801f9f4:	68fb      	ldr	r3, [r7, #12]
 801f9f6:	2b00      	cmp	r3, #0
 801f9f8:	d1e3      	bne.n	801f9c2 <ip_reass_tmr+0x12>
    }
  }
}
 801f9fa:	bf00      	nop
 801f9fc:	3710      	adds	r7, #16
 801f9fe:	46bd      	mov	sp, r7
 801fa00:	bd80      	pop	{r7, pc}
 801fa02:	bf00      	nop
 801fa04:	20009110 	.word	0x20009110

0801fa08 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801fa08:	b580      	push	{r7, lr}
 801fa0a:	b088      	sub	sp, #32
 801fa0c:	af00      	add	r7, sp, #0
 801fa0e:	6078      	str	r0, [r7, #4]
 801fa10:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801fa12:	2300      	movs	r3, #0
 801fa14:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801fa16:	683a      	ldr	r2, [r7, #0]
 801fa18:	687b      	ldr	r3, [r7, #4]
 801fa1a:	429a      	cmp	r2, r3
 801fa1c:	d105      	bne.n	801fa2a <ip_reass_free_complete_datagram+0x22>
 801fa1e:	4b45      	ldr	r3, [pc, #276]	; (801fb34 <ip_reass_free_complete_datagram+0x12c>)
 801fa20:	22ab      	movs	r2, #171	; 0xab
 801fa22:	4945      	ldr	r1, [pc, #276]	; (801fb38 <ip_reass_free_complete_datagram+0x130>)
 801fa24:	4845      	ldr	r0, [pc, #276]	; (801fb3c <ip_reass_free_complete_datagram+0x134>)
 801fa26:	f001 fde5 	bl	80215f4 <iprintf>
  if (prev != NULL) {
 801fa2a:	683b      	ldr	r3, [r7, #0]
 801fa2c:	2b00      	cmp	r3, #0
 801fa2e:	d00a      	beq.n	801fa46 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801fa30:	683b      	ldr	r3, [r7, #0]
 801fa32:	681b      	ldr	r3, [r3, #0]
 801fa34:	687a      	ldr	r2, [r7, #4]
 801fa36:	429a      	cmp	r2, r3
 801fa38:	d005      	beq.n	801fa46 <ip_reass_free_complete_datagram+0x3e>
 801fa3a:	4b3e      	ldr	r3, [pc, #248]	; (801fb34 <ip_reass_free_complete_datagram+0x12c>)
 801fa3c:	22ad      	movs	r2, #173	; 0xad
 801fa3e:	4940      	ldr	r1, [pc, #256]	; (801fb40 <ip_reass_free_complete_datagram+0x138>)
 801fa40:	483e      	ldr	r0, [pc, #248]	; (801fb3c <ip_reass_free_complete_datagram+0x134>)
 801fa42:	f001 fdd7 	bl	80215f4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801fa46:	687b      	ldr	r3, [r7, #4]
 801fa48:	685b      	ldr	r3, [r3, #4]
 801fa4a:	685b      	ldr	r3, [r3, #4]
 801fa4c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801fa4e:	697b      	ldr	r3, [r7, #20]
 801fa50:	889b      	ldrh	r3, [r3, #4]
 801fa52:	b29b      	uxth	r3, r3
 801fa54:	2b00      	cmp	r3, #0
 801fa56:	d12a      	bne.n	801faae <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801fa58:	687b      	ldr	r3, [r7, #4]
 801fa5a:	685b      	ldr	r3, [r3, #4]
 801fa5c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801fa5e:	697b      	ldr	r3, [r7, #20]
 801fa60:	681a      	ldr	r2, [r3, #0]
 801fa62:	687b      	ldr	r3, [r7, #4]
 801fa64:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801fa66:	69bb      	ldr	r3, [r7, #24]
 801fa68:	6858      	ldr	r0, [r3, #4]
 801fa6a:	687b      	ldr	r3, [r7, #4]
 801fa6c:	3308      	adds	r3, #8
 801fa6e:	2214      	movs	r2, #20
 801fa70:	4619      	mov	r1, r3
 801fa72:	f001 fd04 	bl	802147e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801fa76:	2101      	movs	r1, #1
 801fa78:	69b8      	ldr	r0, [r7, #24]
 801fa7a:	f7ff fb99 	bl	801f1b0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801fa7e:	69b8      	ldr	r0, [r7, #24]
 801fa80:	f7f6 fae2 	bl	8016048 <pbuf_clen>
 801fa84:	4603      	mov	r3, r0
 801fa86:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801fa88:	8bfa      	ldrh	r2, [r7, #30]
 801fa8a:	8a7b      	ldrh	r3, [r7, #18]
 801fa8c:	4413      	add	r3, r2
 801fa8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fa92:	db05      	blt.n	801faa0 <ip_reass_free_complete_datagram+0x98>
 801fa94:	4b27      	ldr	r3, [pc, #156]	; (801fb34 <ip_reass_free_complete_datagram+0x12c>)
 801fa96:	22bc      	movs	r2, #188	; 0xbc
 801fa98:	492a      	ldr	r1, [pc, #168]	; (801fb44 <ip_reass_free_complete_datagram+0x13c>)
 801fa9a:	4828      	ldr	r0, [pc, #160]	; (801fb3c <ip_reass_free_complete_datagram+0x134>)
 801fa9c:	f001 fdaa 	bl	80215f4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801faa0:	8bfa      	ldrh	r2, [r7, #30]
 801faa2:	8a7b      	ldrh	r3, [r7, #18]
 801faa4:	4413      	add	r3, r2
 801faa6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801faa8:	69b8      	ldr	r0, [r7, #24]
 801faaa:	f7f6 fa3f 	bl	8015f2c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801faae:	687b      	ldr	r3, [r7, #4]
 801fab0:	685b      	ldr	r3, [r3, #4]
 801fab2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801fab4:	e01f      	b.n	801faf6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801fab6:	69bb      	ldr	r3, [r7, #24]
 801fab8:	685b      	ldr	r3, [r3, #4]
 801faba:	617b      	str	r3, [r7, #20]
    pcur = p;
 801fabc:	69bb      	ldr	r3, [r7, #24]
 801fabe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801fac0:	697b      	ldr	r3, [r7, #20]
 801fac2:	681b      	ldr	r3, [r3, #0]
 801fac4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801fac6:	68f8      	ldr	r0, [r7, #12]
 801fac8:	f7f6 fabe 	bl	8016048 <pbuf_clen>
 801facc:	4603      	mov	r3, r0
 801face:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801fad0:	8bfa      	ldrh	r2, [r7, #30]
 801fad2:	8a7b      	ldrh	r3, [r7, #18]
 801fad4:	4413      	add	r3, r2
 801fad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fada:	db05      	blt.n	801fae8 <ip_reass_free_complete_datagram+0xe0>
 801fadc:	4b15      	ldr	r3, [pc, #84]	; (801fb34 <ip_reass_free_complete_datagram+0x12c>)
 801fade:	22cc      	movs	r2, #204	; 0xcc
 801fae0:	4918      	ldr	r1, [pc, #96]	; (801fb44 <ip_reass_free_complete_datagram+0x13c>)
 801fae2:	4816      	ldr	r0, [pc, #88]	; (801fb3c <ip_reass_free_complete_datagram+0x134>)
 801fae4:	f001 fd86 	bl	80215f4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801fae8:	8bfa      	ldrh	r2, [r7, #30]
 801faea:	8a7b      	ldrh	r3, [r7, #18]
 801faec:	4413      	add	r3, r2
 801faee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801faf0:	68f8      	ldr	r0, [r7, #12]
 801faf2:	f7f6 fa1b 	bl	8015f2c <pbuf_free>
  while (p != NULL) {
 801faf6:	69bb      	ldr	r3, [r7, #24]
 801faf8:	2b00      	cmp	r3, #0
 801fafa:	d1dc      	bne.n	801fab6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801fafc:	6839      	ldr	r1, [r7, #0]
 801fafe:	6878      	ldr	r0, [r7, #4]
 801fb00:	f000 f8c2 	bl	801fc88 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801fb04:	4b10      	ldr	r3, [pc, #64]	; (801fb48 <ip_reass_free_complete_datagram+0x140>)
 801fb06:	881b      	ldrh	r3, [r3, #0]
 801fb08:	8bfa      	ldrh	r2, [r7, #30]
 801fb0a:	429a      	cmp	r2, r3
 801fb0c:	d905      	bls.n	801fb1a <ip_reass_free_complete_datagram+0x112>
 801fb0e:	4b09      	ldr	r3, [pc, #36]	; (801fb34 <ip_reass_free_complete_datagram+0x12c>)
 801fb10:	22d2      	movs	r2, #210	; 0xd2
 801fb12:	490e      	ldr	r1, [pc, #56]	; (801fb4c <ip_reass_free_complete_datagram+0x144>)
 801fb14:	4809      	ldr	r0, [pc, #36]	; (801fb3c <ip_reass_free_complete_datagram+0x134>)
 801fb16:	f001 fd6d 	bl	80215f4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801fb1a:	4b0b      	ldr	r3, [pc, #44]	; (801fb48 <ip_reass_free_complete_datagram+0x140>)
 801fb1c:	881a      	ldrh	r2, [r3, #0]
 801fb1e:	8bfb      	ldrh	r3, [r7, #30]
 801fb20:	1ad3      	subs	r3, r2, r3
 801fb22:	b29a      	uxth	r2, r3
 801fb24:	4b08      	ldr	r3, [pc, #32]	; (801fb48 <ip_reass_free_complete_datagram+0x140>)
 801fb26:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801fb28:	8bfb      	ldrh	r3, [r7, #30]
}
 801fb2a:	4618      	mov	r0, r3
 801fb2c:	3720      	adds	r7, #32
 801fb2e:	46bd      	mov	sp, r7
 801fb30:	bd80      	pop	{r7, pc}
 801fb32:	bf00      	nop
 801fb34:	08025104 	.word	0x08025104
 801fb38:	08025140 	.word	0x08025140
 801fb3c:	0802514c 	.word	0x0802514c
 801fb40:	08025174 	.word	0x08025174
 801fb44:	08025188 	.word	0x08025188
 801fb48:	20009114 	.word	0x20009114
 801fb4c:	080251a8 	.word	0x080251a8

0801fb50 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801fb50:	b580      	push	{r7, lr}
 801fb52:	b08a      	sub	sp, #40	; 0x28
 801fb54:	af00      	add	r7, sp, #0
 801fb56:	6078      	str	r0, [r7, #4]
 801fb58:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801fb5a:	2300      	movs	r3, #0
 801fb5c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801fb5e:	2300      	movs	r3, #0
 801fb60:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801fb62:	2300      	movs	r3, #0
 801fb64:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801fb66:	2300      	movs	r3, #0
 801fb68:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801fb6a:	2300      	movs	r3, #0
 801fb6c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801fb6e:	4b28      	ldr	r3, [pc, #160]	; (801fc10 <ip_reass_remove_oldest_datagram+0xc0>)
 801fb70:	681b      	ldr	r3, [r3, #0]
 801fb72:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801fb74:	e030      	b.n	801fbd8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801fb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb78:	695a      	ldr	r2, [r3, #20]
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	68db      	ldr	r3, [r3, #12]
 801fb7e:	429a      	cmp	r2, r3
 801fb80:	d10c      	bne.n	801fb9c <ip_reass_remove_oldest_datagram+0x4c>
 801fb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb84:	699a      	ldr	r2, [r3, #24]
 801fb86:	687b      	ldr	r3, [r7, #4]
 801fb88:	691b      	ldr	r3, [r3, #16]
 801fb8a:	429a      	cmp	r2, r3
 801fb8c:	d106      	bne.n	801fb9c <ip_reass_remove_oldest_datagram+0x4c>
 801fb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb90:	899a      	ldrh	r2, [r3, #12]
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	889b      	ldrh	r3, [r3, #4]
 801fb96:	b29b      	uxth	r3, r3
 801fb98:	429a      	cmp	r2, r3
 801fb9a:	d014      	beq.n	801fbc6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801fb9c:	693b      	ldr	r3, [r7, #16]
 801fb9e:	3301      	adds	r3, #1
 801fba0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801fba2:	6a3b      	ldr	r3, [r7, #32]
 801fba4:	2b00      	cmp	r3, #0
 801fba6:	d104      	bne.n	801fbb2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801fba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbaa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801fbac:	69fb      	ldr	r3, [r7, #28]
 801fbae:	61bb      	str	r3, [r7, #24]
 801fbb0:	e009      	b.n	801fbc6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801fbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbb4:	7fda      	ldrb	r2, [r3, #31]
 801fbb6:	6a3b      	ldr	r3, [r7, #32]
 801fbb8:	7fdb      	ldrb	r3, [r3, #31]
 801fbba:	429a      	cmp	r2, r3
 801fbbc:	d803      	bhi.n	801fbc6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801fbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbc0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801fbc2:	69fb      	ldr	r3, [r7, #28]
 801fbc4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801fbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbc8:	681b      	ldr	r3, [r3, #0]
 801fbca:	2b00      	cmp	r3, #0
 801fbcc:	d001      	beq.n	801fbd2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801fbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbd0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801fbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbd4:	681b      	ldr	r3, [r3, #0]
 801fbd6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801fbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbda:	2b00      	cmp	r3, #0
 801fbdc:	d1cb      	bne.n	801fb76 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801fbde:	6a3b      	ldr	r3, [r7, #32]
 801fbe0:	2b00      	cmp	r3, #0
 801fbe2:	d008      	beq.n	801fbf6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801fbe4:	69b9      	ldr	r1, [r7, #24]
 801fbe6:	6a38      	ldr	r0, [r7, #32]
 801fbe8:	f7ff ff0e 	bl	801fa08 <ip_reass_free_complete_datagram>
 801fbec:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801fbee:	697a      	ldr	r2, [r7, #20]
 801fbf0:	68fb      	ldr	r3, [r7, #12]
 801fbf2:	4413      	add	r3, r2
 801fbf4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801fbf6:	697a      	ldr	r2, [r7, #20]
 801fbf8:	683b      	ldr	r3, [r7, #0]
 801fbfa:	429a      	cmp	r2, r3
 801fbfc:	da02      	bge.n	801fc04 <ip_reass_remove_oldest_datagram+0xb4>
 801fbfe:	693b      	ldr	r3, [r7, #16]
 801fc00:	2b01      	cmp	r3, #1
 801fc02:	dcac      	bgt.n	801fb5e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801fc04:	697b      	ldr	r3, [r7, #20]
}
 801fc06:	4618      	mov	r0, r3
 801fc08:	3728      	adds	r7, #40	; 0x28
 801fc0a:	46bd      	mov	sp, r7
 801fc0c:	bd80      	pop	{r7, pc}
 801fc0e:	bf00      	nop
 801fc10:	20009110 	.word	0x20009110

0801fc14 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801fc14:	b580      	push	{r7, lr}
 801fc16:	b084      	sub	sp, #16
 801fc18:	af00      	add	r7, sp, #0
 801fc1a:	6078      	str	r0, [r7, #4]
 801fc1c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801fc1e:	2004      	movs	r0, #4
 801fc20:	f7f5 fa6c 	bl	80150fc <memp_malloc>
 801fc24:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801fc26:	68fb      	ldr	r3, [r7, #12]
 801fc28:	2b00      	cmp	r3, #0
 801fc2a:	d110      	bne.n	801fc4e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801fc2c:	6839      	ldr	r1, [r7, #0]
 801fc2e:	6878      	ldr	r0, [r7, #4]
 801fc30:	f7ff ff8e 	bl	801fb50 <ip_reass_remove_oldest_datagram>
 801fc34:	4602      	mov	r2, r0
 801fc36:	683b      	ldr	r3, [r7, #0]
 801fc38:	4293      	cmp	r3, r2
 801fc3a:	dc03      	bgt.n	801fc44 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801fc3c:	2004      	movs	r0, #4
 801fc3e:	f7f5 fa5d 	bl	80150fc <memp_malloc>
 801fc42:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801fc44:	68fb      	ldr	r3, [r7, #12]
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	d101      	bne.n	801fc4e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801fc4a:	2300      	movs	r3, #0
 801fc4c:	e016      	b.n	801fc7c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801fc4e:	2220      	movs	r2, #32
 801fc50:	2100      	movs	r1, #0
 801fc52:	68f8      	ldr	r0, [r7, #12]
 801fc54:	f001 fc1e 	bl	8021494 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801fc58:	68fb      	ldr	r3, [r7, #12]
 801fc5a:	220f      	movs	r2, #15
 801fc5c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801fc5e:	4b09      	ldr	r3, [pc, #36]	; (801fc84 <ip_reass_enqueue_new_datagram+0x70>)
 801fc60:	681a      	ldr	r2, [r3, #0]
 801fc62:	68fb      	ldr	r3, [r7, #12]
 801fc64:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801fc66:	4a07      	ldr	r2, [pc, #28]	; (801fc84 <ip_reass_enqueue_new_datagram+0x70>)
 801fc68:	68fb      	ldr	r3, [r7, #12]
 801fc6a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801fc6c:	68fb      	ldr	r3, [r7, #12]
 801fc6e:	3308      	adds	r3, #8
 801fc70:	2214      	movs	r2, #20
 801fc72:	6879      	ldr	r1, [r7, #4]
 801fc74:	4618      	mov	r0, r3
 801fc76:	f001 fc02 	bl	802147e <memcpy>
  return ipr;
 801fc7a:	68fb      	ldr	r3, [r7, #12]
}
 801fc7c:	4618      	mov	r0, r3
 801fc7e:	3710      	adds	r7, #16
 801fc80:	46bd      	mov	sp, r7
 801fc82:	bd80      	pop	{r7, pc}
 801fc84:	20009110 	.word	0x20009110

0801fc88 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801fc88:	b580      	push	{r7, lr}
 801fc8a:	b082      	sub	sp, #8
 801fc8c:	af00      	add	r7, sp, #0
 801fc8e:	6078      	str	r0, [r7, #4]
 801fc90:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801fc92:	4b10      	ldr	r3, [pc, #64]	; (801fcd4 <ip_reass_dequeue_datagram+0x4c>)
 801fc94:	681b      	ldr	r3, [r3, #0]
 801fc96:	687a      	ldr	r2, [r7, #4]
 801fc98:	429a      	cmp	r2, r3
 801fc9a:	d104      	bne.n	801fca6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801fc9c:	687b      	ldr	r3, [r7, #4]
 801fc9e:	681b      	ldr	r3, [r3, #0]
 801fca0:	4a0c      	ldr	r2, [pc, #48]	; (801fcd4 <ip_reass_dequeue_datagram+0x4c>)
 801fca2:	6013      	str	r3, [r2, #0]
 801fca4:	e00d      	b.n	801fcc2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801fca6:	683b      	ldr	r3, [r7, #0]
 801fca8:	2b00      	cmp	r3, #0
 801fcaa:	d106      	bne.n	801fcba <ip_reass_dequeue_datagram+0x32>
 801fcac:	4b0a      	ldr	r3, [pc, #40]	; (801fcd8 <ip_reass_dequeue_datagram+0x50>)
 801fcae:	f240 1245 	movw	r2, #325	; 0x145
 801fcb2:	490a      	ldr	r1, [pc, #40]	; (801fcdc <ip_reass_dequeue_datagram+0x54>)
 801fcb4:	480a      	ldr	r0, [pc, #40]	; (801fce0 <ip_reass_dequeue_datagram+0x58>)
 801fcb6:	f001 fc9d 	bl	80215f4 <iprintf>
    prev->next = ipr->next;
 801fcba:	687b      	ldr	r3, [r7, #4]
 801fcbc:	681a      	ldr	r2, [r3, #0]
 801fcbe:	683b      	ldr	r3, [r7, #0]
 801fcc0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801fcc2:	6879      	ldr	r1, [r7, #4]
 801fcc4:	2004      	movs	r0, #4
 801fcc6:	f7f5 fa6b 	bl	80151a0 <memp_free>
}
 801fcca:	bf00      	nop
 801fccc:	3708      	adds	r7, #8
 801fcce:	46bd      	mov	sp, r7
 801fcd0:	bd80      	pop	{r7, pc}
 801fcd2:	bf00      	nop
 801fcd4:	20009110 	.word	0x20009110
 801fcd8:	08025104 	.word	0x08025104
 801fcdc:	080251cc 	.word	0x080251cc
 801fce0:	0802514c 	.word	0x0802514c

0801fce4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801fce4:	b580      	push	{r7, lr}
 801fce6:	b08c      	sub	sp, #48	; 0x30
 801fce8:	af00      	add	r7, sp, #0
 801fcea:	60f8      	str	r0, [r7, #12]
 801fcec:	60b9      	str	r1, [r7, #8]
 801fcee:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801fcf0:	2300      	movs	r3, #0
 801fcf2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801fcf4:	2301      	movs	r3, #1
 801fcf6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801fcf8:	68bb      	ldr	r3, [r7, #8]
 801fcfa:	685b      	ldr	r3, [r3, #4]
 801fcfc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801fcfe:	69fb      	ldr	r3, [r7, #28]
 801fd00:	885b      	ldrh	r3, [r3, #2]
 801fd02:	b29b      	uxth	r3, r3
 801fd04:	4618      	mov	r0, r3
 801fd06:	f7f4 fd43 	bl	8014790 <lwip_htons>
 801fd0a:	4603      	mov	r3, r0
 801fd0c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801fd0e:	69fb      	ldr	r3, [r7, #28]
 801fd10:	781b      	ldrb	r3, [r3, #0]
 801fd12:	f003 030f 	and.w	r3, r3, #15
 801fd16:	b2db      	uxtb	r3, r3
 801fd18:	009b      	lsls	r3, r3, #2
 801fd1a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801fd1c:	7e7b      	ldrb	r3, [r7, #25]
 801fd1e:	b29b      	uxth	r3, r3
 801fd20:	8b7a      	ldrh	r2, [r7, #26]
 801fd22:	429a      	cmp	r2, r3
 801fd24:	d202      	bcs.n	801fd2c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fd26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fd2a:	e135      	b.n	801ff98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801fd2c:	7e7b      	ldrb	r3, [r7, #25]
 801fd2e:	b29b      	uxth	r3, r3
 801fd30:	8b7a      	ldrh	r2, [r7, #26]
 801fd32:	1ad3      	subs	r3, r2, r3
 801fd34:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801fd36:	69fb      	ldr	r3, [r7, #28]
 801fd38:	88db      	ldrh	r3, [r3, #6]
 801fd3a:	b29b      	uxth	r3, r3
 801fd3c:	4618      	mov	r0, r3
 801fd3e:	f7f4 fd27 	bl	8014790 <lwip_htons>
 801fd42:	4603      	mov	r3, r0
 801fd44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fd48:	b29b      	uxth	r3, r3
 801fd4a:	00db      	lsls	r3, r3, #3
 801fd4c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801fd4e:	68bb      	ldr	r3, [r7, #8]
 801fd50:	685b      	ldr	r3, [r3, #4]
 801fd52:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801fd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd56:	2200      	movs	r2, #0
 801fd58:	701a      	strb	r2, [r3, #0]
 801fd5a:	2200      	movs	r2, #0
 801fd5c:	705a      	strb	r2, [r3, #1]
 801fd5e:	2200      	movs	r2, #0
 801fd60:	709a      	strb	r2, [r3, #2]
 801fd62:	2200      	movs	r2, #0
 801fd64:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801fd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd68:	8afa      	ldrh	r2, [r7, #22]
 801fd6a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801fd6c:	8afa      	ldrh	r2, [r7, #22]
 801fd6e:	8b7b      	ldrh	r3, [r7, #26]
 801fd70:	4413      	add	r3, r2
 801fd72:	b29a      	uxth	r2, r3
 801fd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd76:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801fd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd7a:	88db      	ldrh	r3, [r3, #6]
 801fd7c:	b29b      	uxth	r3, r3
 801fd7e:	8afa      	ldrh	r2, [r7, #22]
 801fd80:	429a      	cmp	r2, r3
 801fd82:	d902      	bls.n	801fd8a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fd84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fd88:	e106      	b.n	801ff98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801fd8a:	68fb      	ldr	r3, [r7, #12]
 801fd8c:	685b      	ldr	r3, [r3, #4]
 801fd8e:	627b      	str	r3, [r7, #36]	; 0x24
 801fd90:	e068      	b.n	801fe64 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801fd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd94:	685b      	ldr	r3, [r3, #4]
 801fd96:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801fd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd9a:	889b      	ldrh	r3, [r3, #4]
 801fd9c:	b29a      	uxth	r2, r3
 801fd9e:	693b      	ldr	r3, [r7, #16]
 801fda0:	889b      	ldrh	r3, [r3, #4]
 801fda2:	b29b      	uxth	r3, r3
 801fda4:	429a      	cmp	r2, r3
 801fda6:	d235      	bcs.n	801fe14 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801fda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fdac:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801fdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fdb0:	2b00      	cmp	r3, #0
 801fdb2:	d020      	beq.n	801fdf6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801fdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdb6:	889b      	ldrh	r3, [r3, #4]
 801fdb8:	b29a      	uxth	r2, r3
 801fdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fdbc:	88db      	ldrh	r3, [r3, #6]
 801fdbe:	b29b      	uxth	r3, r3
 801fdc0:	429a      	cmp	r2, r3
 801fdc2:	d307      	bcc.n	801fdd4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801fdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdc6:	88db      	ldrh	r3, [r3, #6]
 801fdc8:	b29a      	uxth	r2, r3
 801fdca:	693b      	ldr	r3, [r7, #16]
 801fdcc:	889b      	ldrh	r3, [r3, #4]
 801fdce:	b29b      	uxth	r3, r3
 801fdd0:	429a      	cmp	r2, r3
 801fdd2:	d902      	bls.n	801fdda <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fdd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fdd8:	e0de      	b.n	801ff98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801fdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fddc:	68ba      	ldr	r2, [r7, #8]
 801fdde:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801fde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fde2:	88db      	ldrh	r3, [r3, #6]
 801fde4:	b29a      	uxth	r2, r3
 801fde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fde8:	889b      	ldrh	r3, [r3, #4]
 801fdea:	b29b      	uxth	r3, r3
 801fdec:	429a      	cmp	r2, r3
 801fdee:	d03d      	beq.n	801fe6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801fdf0:	2300      	movs	r3, #0
 801fdf2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801fdf4:	e03a      	b.n	801fe6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801fdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdf8:	88db      	ldrh	r3, [r3, #6]
 801fdfa:	b29a      	uxth	r2, r3
 801fdfc:	693b      	ldr	r3, [r7, #16]
 801fdfe:	889b      	ldrh	r3, [r3, #4]
 801fe00:	b29b      	uxth	r3, r3
 801fe02:	429a      	cmp	r2, r3
 801fe04:	d902      	bls.n	801fe0c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fe06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fe0a:	e0c5      	b.n	801ff98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801fe0c:	68fb      	ldr	r3, [r7, #12]
 801fe0e:	68ba      	ldr	r2, [r7, #8]
 801fe10:	605a      	str	r2, [r3, #4]
      break;
 801fe12:	e02b      	b.n	801fe6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801fe14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe16:	889b      	ldrh	r3, [r3, #4]
 801fe18:	b29a      	uxth	r2, r3
 801fe1a:	693b      	ldr	r3, [r7, #16]
 801fe1c:	889b      	ldrh	r3, [r3, #4]
 801fe1e:	b29b      	uxth	r3, r3
 801fe20:	429a      	cmp	r2, r3
 801fe22:	d102      	bne.n	801fe2a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fe24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fe28:	e0b6      	b.n	801ff98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801fe2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe2c:	889b      	ldrh	r3, [r3, #4]
 801fe2e:	b29a      	uxth	r2, r3
 801fe30:	693b      	ldr	r3, [r7, #16]
 801fe32:	88db      	ldrh	r3, [r3, #6]
 801fe34:	b29b      	uxth	r3, r3
 801fe36:	429a      	cmp	r2, r3
 801fe38:	d202      	bcs.n	801fe40 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fe3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fe3e:	e0ab      	b.n	801ff98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801fe40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe42:	2b00      	cmp	r3, #0
 801fe44:	d009      	beq.n	801fe5a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801fe46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe48:	88db      	ldrh	r3, [r3, #6]
 801fe4a:	b29a      	uxth	r2, r3
 801fe4c:	693b      	ldr	r3, [r7, #16]
 801fe4e:	889b      	ldrh	r3, [r3, #4]
 801fe50:	b29b      	uxth	r3, r3
 801fe52:	429a      	cmp	r2, r3
 801fe54:	d001      	beq.n	801fe5a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801fe56:	2300      	movs	r3, #0
 801fe58:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801fe5a:	693b      	ldr	r3, [r7, #16]
 801fe5c:	681b      	ldr	r3, [r3, #0]
 801fe5e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801fe60:	693b      	ldr	r3, [r7, #16]
 801fe62:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801fe64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe66:	2b00      	cmp	r3, #0
 801fe68:	d193      	bne.n	801fd92 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801fe6a:	e000      	b.n	801fe6e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801fe6c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801fe6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe70:	2b00      	cmp	r3, #0
 801fe72:	d12d      	bne.n	801fed0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801fe74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe76:	2b00      	cmp	r3, #0
 801fe78:	d01c      	beq.n	801feb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801fe7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe7c:	88db      	ldrh	r3, [r3, #6]
 801fe7e:	b29a      	uxth	r2, r3
 801fe80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe82:	889b      	ldrh	r3, [r3, #4]
 801fe84:	b29b      	uxth	r3, r3
 801fe86:	429a      	cmp	r2, r3
 801fe88:	d906      	bls.n	801fe98 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801fe8a:	4b45      	ldr	r3, [pc, #276]	; (801ffa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801fe8c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801fe90:	4944      	ldr	r1, [pc, #272]	; (801ffa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801fe92:	4845      	ldr	r0, [pc, #276]	; (801ffa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801fe94:	f001 fbae 	bl	80215f4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801fe98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe9a:	68ba      	ldr	r2, [r7, #8]
 801fe9c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801fe9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fea0:	88db      	ldrh	r3, [r3, #6]
 801fea2:	b29a      	uxth	r2, r3
 801fea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fea6:	889b      	ldrh	r3, [r3, #4]
 801fea8:	b29b      	uxth	r3, r3
 801feaa:	429a      	cmp	r2, r3
 801feac:	d010      	beq.n	801fed0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801feae:	2300      	movs	r3, #0
 801feb0:	623b      	str	r3, [r7, #32]
 801feb2:	e00d      	b.n	801fed0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801feb4:	68fb      	ldr	r3, [r7, #12]
 801feb6:	685b      	ldr	r3, [r3, #4]
 801feb8:	2b00      	cmp	r3, #0
 801feba:	d006      	beq.n	801feca <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801febc:	4b38      	ldr	r3, [pc, #224]	; (801ffa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801febe:	f240 12bf 	movw	r2, #447	; 0x1bf
 801fec2:	493a      	ldr	r1, [pc, #232]	; (801ffac <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801fec4:	4838      	ldr	r0, [pc, #224]	; (801ffa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801fec6:	f001 fb95 	bl	80215f4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801feca:	68fb      	ldr	r3, [r7, #12]
 801fecc:	68ba      	ldr	r2, [r7, #8]
 801fece:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801fed0:	687b      	ldr	r3, [r7, #4]
 801fed2:	2b00      	cmp	r3, #0
 801fed4:	d105      	bne.n	801fee2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801fed6:	68fb      	ldr	r3, [r7, #12]
 801fed8:	7f9b      	ldrb	r3, [r3, #30]
 801feda:	f003 0301 	and.w	r3, r3, #1
 801fede:	2b00      	cmp	r3, #0
 801fee0:	d059      	beq.n	801ff96 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801fee2:	6a3b      	ldr	r3, [r7, #32]
 801fee4:	2b00      	cmp	r3, #0
 801fee6:	d04f      	beq.n	801ff88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801fee8:	68fb      	ldr	r3, [r7, #12]
 801feea:	685b      	ldr	r3, [r3, #4]
 801feec:	2b00      	cmp	r3, #0
 801feee:	d006      	beq.n	801fefe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801fef0:	68fb      	ldr	r3, [r7, #12]
 801fef2:	685b      	ldr	r3, [r3, #4]
 801fef4:	685b      	ldr	r3, [r3, #4]
 801fef6:	889b      	ldrh	r3, [r3, #4]
 801fef8:	b29b      	uxth	r3, r3
 801fefa:	2b00      	cmp	r3, #0
 801fefc:	d002      	beq.n	801ff04 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801fefe:	2300      	movs	r3, #0
 801ff00:	623b      	str	r3, [r7, #32]
 801ff02:	e041      	b.n	801ff88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801ff04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff06:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801ff08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff0a:	681b      	ldr	r3, [r3, #0]
 801ff0c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ff0e:	e012      	b.n	801ff36 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801ff10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ff12:	685b      	ldr	r3, [r3, #4]
 801ff14:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801ff16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ff18:	88db      	ldrh	r3, [r3, #6]
 801ff1a:	b29a      	uxth	r2, r3
 801ff1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff1e:	889b      	ldrh	r3, [r3, #4]
 801ff20:	b29b      	uxth	r3, r3
 801ff22:	429a      	cmp	r2, r3
 801ff24:	d002      	beq.n	801ff2c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801ff26:	2300      	movs	r3, #0
 801ff28:	623b      	str	r3, [r7, #32]
            break;
 801ff2a:	e007      	b.n	801ff3c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801ff2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff2e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801ff30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff32:	681b      	ldr	r3, [r3, #0]
 801ff34:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ff36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ff38:	2b00      	cmp	r3, #0
 801ff3a:	d1e9      	bne.n	801ff10 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801ff3c:	6a3b      	ldr	r3, [r7, #32]
 801ff3e:	2b00      	cmp	r3, #0
 801ff40:	d022      	beq.n	801ff88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ff42:	68fb      	ldr	r3, [r7, #12]
 801ff44:	685b      	ldr	r3, [r3, #4]
 801ff46:	2b00      	cmp	r3, #0
 801ff48:	d106      	bne.n	801ff58 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ff4a:	4b15      	ldr	r3, [pc, #84]	; (801ffa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ff4c:	f240 12df 	movw	r2, #479	; 0x1df
 801ff50:	4917      	ldr	r1, [pc, #92]	; (801ffb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ff52:	4815      	ldr	r0, [pc, #84]	; (801ffa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ff54:	f001 fb4e 	bl	80215f4 <iprintf>
          LWIP_ASSERT("sanity check",
 801ff58:	68fb      	ldr	r3, [r7, #12]
 801ff5a:	685b      	ldr	r3, [r3, #4]
 801ff5c:	685b      	ldr	r3, [r3, #4]
 801ff5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ff60:	429a      	cmp	r2, r3
 801ff62:	d106      	bne.n	801ff72 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801ff64:	4b0e      	ldr	r3, [pc, #56]	; (801ffa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ff66:	f240 12e1 	movw	r2, #481	; 0x1e1
 801ff6a:	4911      	ldr	r1, [pc, #68]	; (801ffb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ff6c:	480e      	ldr	r0, [pc, #56]	; (801ffa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ff6e:	f001 fb41 	bl	80215f4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801ff72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff74:	681b      	ldr	r3, [r3, #0]
 801ff76:	2b00      	cmp	r3, #0
 801ff78:	d006      	beq.n	801ff88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801ff7a:	4b09      	ldr	r3, [pc, #36]	; (801ffa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ff7c:	f240 12e3 	movw	r2, #483	; 0x1e3
 801ff80:	490c      	ldr	r1, [pc, #48]	; (801ffb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801ff82:	4809      	ldr	r0, [pc, #36]	; (801ffa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ff84:	f001 fb36 	bl	80215f4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801ff88:	6a3b      	ldr	r3, [r7, #32]
 801ff8a:	2b00      	cmp	r3, #0
 801ff8c:	bf14      	ite	ne
 801ff8e:	2301      	movne	r3, #1
 801ff90:	2300      	moveq	r3, #0
 801ff92:	b2db      	uxtb	r3, r3
 801ff94:	e000      	b.n	801ff98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801ff96:	2300      	movs	r3, #0
}
 801ff98:	4618      	mov	r0, r3
 801ff9a:	3730      	adds	r7, #48	; 0x30
 801ff9c:	46bd      	mov	sp, r7
 801ff9e:	bd80      	pop	{r7, pc}
 801ffa0:	08025104 	.word	0x08025104
 801ffa4:	080251e8 	.word	0x080251e8
 801ffa8:	0802514c 	.word	0x0802514c
 801ffac:	08025208 	.word	0x08025208
 801ffb0:	08025240 	.word	0x08025240
 801ffb4:	08025250 	.word	0x08025250

0801ffb8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801ffb8:	b580      	push	{r7, lr}
 801ffba:	b08e      	sub	sp, #56	; 0x38
 801ffbc:	af00      	add	r7, sp, #0
 801ffbe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801ffc0:	687b      	ldr	r3, [r7, #4]
 801ffc2:	685b      	ldr	r3, [r3, #4]
 801ffc4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801ffc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ffc8:	781b      	ldrb	r3, [r3, #0]
 801ffca:	f003 030f 	and.w	r3, r3, #15
 801ffce:	b2db      	uxtb	r3, r3
 801ffd0:	009b      	lsls	r3, r3, #2
 801ffd2:	b2db      	uxtb	r3, r3
 801ffd4:	2b14      	cmp	r3, #20
 801ffd6:	f040 8167 	bne.w	80202a8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801ffda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ffdc:	88db      	ldrh	r3, [r3, #6]
 801ffde:	b29b      	uxth	r3, r3
 801ffe0:	4618      	mov	r0, r3
 801ffe2:	f7f4 fbd5 	bl	8014790 <lwip_htons>
 801ffe6:	4603      	mov	r3, r0
 801ffe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ffec:	b29b      	uxth	r3, r3
 801ffee:	00db      	lsls	r3, r3, #3
 801fff0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801fff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fff4:	885b      	ldrh	r3, [r3, #2]
 801fff6:	b29b      	uxth	r3, r3
 801fff8:	4618      	mov	r0, r3
 801fffa:	f7f4 fbc9 	bl	8014790 <lwip_htons>
 801fffe:	4603      	mov	r3, r0
 8020000:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8020002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020004:	781b      	ldrb	r3, [r3, #0]
 8020006:	f003 030f 	and.w	r3, r3, #15
 802000a:	b2db      	uxtb	r3, r3
 802000c:	009b      	lsls	r3, r3, #2
 802000e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8020012:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8020016:	b29b      	uxth	r3, r3
 8020018:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802001a:	429a      	cmp	r2, r3
 802001c:	f0c0 8146 	bcc.w	80202ac <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8020020:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8020024:	b29b      	uxth	r3, r3
 8020026:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8020028:	1ad3      	subs	r3, r2, r3
 802002a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 802002c:	6878      	ldr	r0, [r7, #4]
 802002e:	f7f6 f80b 	bl	8016048 <pbuf_clen>
 8020032:	4603      	mov	r3, r0
 8020034:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8020036:	4ba3      	ldr	r3, [pc, #652]	; (80202c4 <ip4_reass+0x30c>)
 8020038:	881b      	ldrh	r3, [r3, #0]
 802003a:	461a      	mov	r2, r3
 802003c:	8c3b      	ldrh	r3, [r7, #32]
 802003e:	4413      	add	r3, r2
 8020040:	2b0a      	cmp	r3, #10
 8020042:	dd10      	ble.n	8020066 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8020044:	8c3b      	ldrh	r3, [r7, #32]
 8020046:	4619      	mov	r1, r3
 8020048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802004a:	f7ff fd81 	bl	801fb50 <ip_reass_remove_oldest_datagram>
 802004e:	4603      	mov	r3, r0
 8020050:	2b00      	cmp	r3, #0
 8020052:	f000 812d 	beq.w	80202b0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8020056:	4b9b      	ldr	r3, [pc, #620]	; (80202c4 <ip4_reass+0x30c>)
 8020058:	881b      	ldrh	r3, [r3, #0]
 802005a:	461a      	mov	r2, r3
 802005c:	8c3b      	ldrh	r3, [r7, #32]
 802005e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8020060:	2b0a      	cmp	r3, #10
 8020062:	f300 8125 	bgt.w	80202b0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8020066:	4b98      	ldr	r3, [pc, #608]	; (80202c8 <ip4_reass+0x310>)
 8020068:	681b      	ldr	r3, [r3, #0]
 802006a:	633b      	str	r3, [r7, #48]	; 0x30
 802006c:	e015      	b.n	802009a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 802006e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020070:	695a      	ldr	r2, [r3, #20]
 8020072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020074:	68db      	ldr	r3, [r3, #12]
 8020076:	429a      	cmp	r2, r3
 8020078:	d10c      	bne.n	8020094 <ip4_reass+0xdc>
 802007a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802007c:	699a      	ldr	r2, [r3, #24]
 802007e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020080:	691b      	ldr	r3, [r3, #16]
 8020082:	429a      	cmp	r2, r3
 8020084:	d106      	bne.n	8020094 <ip4_reass+0xdc>
 8020086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020088:	899a      	ldrh	r2, [r3, #12]
 802008a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802008c:	889b      	ldrh	r3, [r3, #4]
 802008e:	b29b      	uxth	r3, r3
 8020090:	429a      	cmp	r2, r3
 8020092:	d006      	beq.n	80200a2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8020094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020096:	681b      	ldr	r3, [r3, #0]
 8020098:	633b      	str	r3, [r7, #48]	; 0x30
 802009a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802009c:	2b00      	cmp	r3, #0
 802009e:	d1e6      	bne.n	802006e <ip4_reass+0xb6>
 80200a0:	e000      	b.n	80200a4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80200a2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80200a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200a6:	2b00      	cmp	r3, #0
 80200a8:	d109      	bne.n	80200be <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80200aa:	8c3b      	ldrh	r3, [r7, #32]
 80200ac:	4619      	mov	r1, r3
 80200ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80200b0:	f7ff fdb0 	bl	801fc14 <ip_reass_enqueue_new_datagram>
 80200b4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80200b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200b8:	2b00      	cmp	r3, #0
 80200ba:	d11c      	bne.n	80200f6 <ip4_reass+0x13e>
      goto nullreturn;
 80200bc:	e0f9      	b.n	80202b2 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80200be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80200c0:	88db      	ldrh	r3, [r3, #6]
 80200c2:	b29b      	uxth	r3, r3
 80200c4:	4618      	mov	r0, r3
 80200c6:	f7f4 fb63 	bl	8014790 <lwip_htons>
 80200ca:	4603      	mov	r3, r0
 80200cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80200d0:	2b00      	cmp	r3, #0
 80200d2:	d110      	bne.n	80200f6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80200d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200d6:	89db      	ldrh	r3, [r3, #14]
 80200d8:	4618      	mov	r0, r3
 80200da:	f7f4 fb59 	bl	8014790 <lwip_htons>
 80200de:	4603      	mov	r3, r0
 80200e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80200e4:	2b00      	cmp	r3, #0
 80200e6:	d006      	beq.n	80200f6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80200e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200ea:	3308      	adds	r3, #8
 80200ec:	2214      	movs	r2, #20
 80200ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80200f0:	4618      	mov	r0, r3
 80200f2:	f001 f9c4 	bl	802147e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80200f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80200f8:	88db      	ldrh	r3, [r3, #6]
 80200fa:	b29b      	uxth	r3, r3
 80200fc:	f003 0320 	and.w	r3, r3, #32
 8020100:	2b00      	cmp	r3, #0
 8020102:	bf0c      	ite	eq
 8020104:	2301      	moveq	r3, #1
 8020106:	2300      	movne	r3, #0
 8020108:	b2db      	uxtb	r3, r3
 802010a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 802010c:	69fb      	ldr	r3, [r7, #28]
 802010e:	2b00      	cmp	r3, #0
 8020110:	d00e      	beq.n	8020130 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8020112:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8020114:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8020116:	4413      	add	r3, r2
 8020118:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 802011a:	8b7a      	ldrh	r2, [r7, #26]
 802011c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802011e:	429a      	cmp	r2, r3
 8020120:	f0c0 80a0 	bcc.w	8020264 <ip4_reass+0x2ac>
 8020124:	8b7b      	ldrh	r3, [r7, #26]
 8020126:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 802012a:	4293      	cmp	r3, r2
 802012c:	f200 809a 	bhi.w	8020264 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8020130:	69fa      	ldr	r2, [r7, #28]
 8020132:	6879      	ldr	r1, [r7, #4]
 8020134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020136:	f7ff fdd5 	bl	801fce4 <ip_reass_chain_frag_into_datagram_and_validate>
 802013a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 802013c:	697b      	ldr	r3, [r7, #20]
 802013e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020142:	f000 8091 	beq.w	8020268 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8020146:	4b5f      	ldr	r3, [pc, #380]	; (80202c4 <ip4_reass+0x30c>)
 8020148:	881a      	ldrh	r2, [r3, #0]
 802014a:	8c3b      	ldrh	r3, [r7, #32]
 802014c:	4413      	add	r3, r2
 802014e:	b29a      	uxth	r2, r3
 8020150:	4b5c      	ldr	r3, [pc, #368]	; (80202c4 <ip4_reass+0x30c>)
 8020152:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8020154:	69fb      	ldr	r3, [r7, #28]
 8020156:	2b00      	cmp	r3, #0
 8020158:	d00d      	beq.n	8020176 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 802015a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802015c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802015e:	4413      	add	r3, r2
 8020160:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8020162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020164:	8a7a      	ldrh	r2, [r7, #18]
 8020166:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8020168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802016a:	7f9b      	ldrb	r3, [r3, #30]
 802016c:	f043 0301 	orr.w	r3, r3, #1
 8020170:	b2da      	uxtb	r2, r3
 8020172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020174:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8020176:	697b      	ldr	r3, [r7, #20]
 8020178:	2b01      	cmp	r3, #1
 802017a:	d171      	bne.n	8020260 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 802017c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802017e:	8b9b      	ldrh	r3, [r3, #28]
 8020180:	3314      	adds	r3, #20
 8020182:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8020184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020186:	685b      	ldr	r3, [r3, #4]
 8020188:	685b      	ldr	r3, [r3, #4]
 802018a:	681b      	ldr	r3, [r3, #0]
 802018c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 802018e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020190:	685b      	ldr	r3, [r3, #4]
 8020192:	685b      	ldr	r3, [r3, #4]
 8020194:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8020196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020198:	3308      	adds	r3, #8
 802019a:	2214      	movs	r2, #20
 802019c:	4619      	mov	r1, r3
 802019e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80201a0:	f001 f96d 	bl	802147e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80201a4:	8a3b      	ldrh	r3, [r7, #16]
 80201a6:	4618      	mov	r0, r3
 80201a8:	f7f4 faf2 	bl	8014790 <lwip_htons>
 80201ac:	4603      	mov	r3, r0
 80201ae:	461a      	mov	r2, r3
 80201b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80201b2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80201b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80201b6:	2200      	movs	r2, #0
 80201b8:	719a      	strb	r2, [r3, #6]
 80201ba:	2200      	movs	r2, #0
 80201bc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80201be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80201c0:	2200      	movs	r2, #0
 80201c2:	729a      	strb	r2, [r3, #10]
 80201c4:	2200      	movs	r2, #0
 80201c6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80201c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201ca:	685b      	ldr	r3, [r3, #4]
 80201cc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80201ce:	e00d      	b.n	80201ec <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80201d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80201d2:	685b      	ldr	r3, [r3, #4]
 80201d4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80201d6:	2114      	movs	r1, #20
 80201d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80201da:	f7f5 fe21 	bl	8015e20 <pbuf_remove_header>
      pbuf_cat(p, r);
 80201de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80201e0:	6878      	ldr	r0, [r7, #4]
 80201e2:	f7f5 ff71 	bl	80160c8 <pbuf_cat>
      r = iprh->next_pbuf;
 80201e6:	68fb      	ldr	r3, [r7, #12]
 80201e8:	681b      	ldr	r3, [r3, #0]
 80201ea:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80201ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80201ee:	2b00      	cmp	r3, #0
 80201f0:	d1ee      	bne.n	80201d0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80201f2:	4b35      	ldr	r3, [pc, #212]	; (80202c8 <ip4_reass+0x310>)
 80201f4:	681b      	ldr	r3, [r3, #0]
 80201f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80201f8:	429a      	cmp	r2, r3
 80201fa:	d102      	bne.n	8020202 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80201fc:	2300      	movs	r3, #0
 80201fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020200:	e010      	b.n	8020224 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8020202:	4b31      	ldr	r3, [pc, #196]	; (80202c8 <ip4_reass+0x310>)
 8020204:	681b      	ldr	r3, [r3, #0]
 8020206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020208:	e007      	b.n	802021a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 802020a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802020c:	681b      	ldr	r3, [r3, #0]
 802020e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020210:	429a      	cmp	r2, r3
 8020212:	d006      	beq.n	8020222 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8020214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020216:	681b      	ldr	r3, [r3, #0]
 8020218:	62fb      	str	r3, [r7, #44]	; 0x2c
 802021a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802021c:	2b00      	cmp	r3, #0
 802021e:	d1f4      	bne.n	802020a <ip4_reass+0x252>
 8020220:	e000      	b.n	8020224 <ip4_reass+0x26c>
          break;
 8020222:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8020224:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020226:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020228:	f7ff fd2e 	bl	801fc88 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 802022c:	6878      	ldr	r0, [r7, #4]
 802022e:	f7f5 ff0b 	bl	8016048 <pbuf_clen>
 8020232:	4603      	mov	r3, r0
 8020234:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8020236:	4b23      	ldr	r3, [pc, #140]	; (80202c4 <ip4_reass+0x30c>)
 8020238:	881b      	ldrh	r3, [r3, #0]
 802023a:	8c3a      	ldrh	r2, [r7, #32]
 802023c:	429a      	cmp	r2, r3
 802023e:	d906      	bls.n	802024e <ip4_reass+0x296>
 8020240:	4b22      	ldr	r3, [pc, #136]	; (80202cc <ip4_reass+0x314>)
 8020242:	f240 229b 	movw	r2, #667	; 0x29b
 8020246:	4922      	ldr	r1, [pc, #136]	; (80202d0 <ip4_reass+0x318>)
 8020248:	4822      	ldr	r0, [pc, #136]	; (80202d4 <ip4_reass+0x31c>)
 802024a:	f001 f9d3 	bl	80215f4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 802024e:	4b1d      	ldr	r3, [pc, #116]	; (80202c4 <ip4_reass+0x30c>)
 8020250:	881a      	ldrh	r2, [r3, #0]
 8020252:	8c3b      	ldrh	r3, [r7, #32]
 8020254:	1ad3      	subs	r3, r2, r3
 8020256:	b29a      	uxth	r2, r3
 8020258:	4b1a      	ldr	r3, [pc, #104]	; (80202c4 <ip4_reass+0x30c>)
 802025a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 802025c:	687b      	ldr	r3, [r7, #4]
 802025e:	e02c      	b.n	80202ba <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8020260:	2300      	movs	r3, #0
 8020262:	e02a      	b.n	80202ba <ip4_reass+0x302>

nullreturn_ipr:
 8020264:	bf00      	nop
 8020266:	e000      	b.n	802026a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8020268:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 802026a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802026c:	2b00      	cmp	r3, #0
 802026e:	d106      	bne.n	802027e <ip4_reass+0x2c6>
 8020270:	4b16      	ldr	r3, [pc, #88]	; (80202cc <ip4_reass+0x314>)
 8020272:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8020276:	4918      	ldr	r1, [pc, #96]	; (80202d8 <ip4_reass+0x320>)
 8020278:	4816      	ldr	r0, [pc, #88]	; (80202d4 <ip4_reass+0x31c>)
 802027a:	f001 f9bb 	bl	80215f4 <iprintf>
  if (ipr->p == NULL) {
 802027e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020280:	685b      	ldr	r3, [r3, #4]
 8020282:	2b00      	cmp	r3, #0
 8020284:	d114      	bne.n	80202b0 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8020286:	4b10      	ldr	r3, [pc, #64]	; (80202c8 <ip4_reass+0x310>)
 8020288:	681b      	ldr	r3, [r3, #0]
 802028a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802028c:	429a      	cmp	r2, r3
 802028e:	d006      	beq.n	802029e <ip4_reass+0x2e6>
 8020290:	4b0e      	ldr	r3, [pc, #56]	; (80202cc <ip4_reass+0x314>)
 8020292:	f240 22ab 	movw	r2, #683	; 0x2ab
 8020296:	4911      	ldr	r1, [pc, #68]	; (80202dc <ip4_reass+0x324>)
 8020298:	480e      	ldr	r0, [pc, #56]	; (80202d4 <ip4_reass+0x31c>)
 802029a:	f001 f9ab 	bl	80215f4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 802029e:	2100      	movs	r1, #0
 80202a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80202a2:	f7ff fcf1 	bl	801fc88 <ip_reass_dequeue_datagram>
 80202a6:	e004      	b.n	80202b2 <ip4_reass+0x2fa>
    goto nullreturn;
 80202a8:	bf00      	nop
 80202aa:	e002      	b.n	80202b2 <ip4_reass+0x2fa>
    goto nullreturn;
 80202ac:	bf00      	nop
 80202ae:	e000      	b.n	80202b2 <ip4_reass+0x2fa>
  }

nullreturn:
 80202b0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80202b2:	6878      	ldr	r0, [r7, #4]
 80202b4:	f7f5 fe3a 	bl	8015f2c <pbuf_free>
  return NULL;
 80202b8:	2300      	movs	r3, #0
}
 80202ba:	4618      	mov	r0, r3
 80202bc:	3738      	adds	r7, #56	; 0x38
 80202be:	46bd      	mov	sp, r7
 80202c0:	bd80      	pop	{r7, pc}
 80202c2:	bf00      	nop
 80202c4:	20009114 	.word	0x20009114
 80202c8:	20009110 	.word	0x20009110
 80202cc:	08025104 	.word	0x08025104
 80202d0:	08025274 	.word	0x08025274
 80202d4:	0802514c 	.word	0x0802514c
 80202d8:	08025290 	.word	0x08025290
 80202dc:	0802529c 	.word	0x0802529c

080202e0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80202e0:	b580      	push	{r7, lr}
 80202e2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80202e4:	2005      	movs	r0, #5
 80202e6:	f7f4 ff09 	bl	80150fc <memp_malloc>
 80202ea:	4603      	mov	r3, r0
}
 80202ec:	4618      	mov	r0, r3
 80202ee:	bd80      	pop	{r7, pc}

080202f0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80202f0:	b580      	push	{r7, lr}
 80202f2:	b082      	sub	sp, #8
 80202f4:	af00      	add	r7, sp, #0
 80202f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80202f8:	687b      	ldr	r3, [r7, #4]
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	d106      	bne.n	802030c <ip_frag_free_pbuf_custom_ref+0x1c>
 80202fe:	4b07      	ldr	r3, [pc, #28]	; (802031c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8020300:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8020304:	4906      	ldr	r1, [pc, #24]	; (8020320 <ip_frag_free_pbuf_custom_ref+0x30>)
 8020306:	4807      	ldr	r0, [pc, #28]	; (8020324 <ip_frag_free_pbuf_custom_ref+0x34>)
 8020308:	f001 f974 	bl	80215f4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 802030c:	6879      	ldr	r1, [r7, #4]
 802030e:	2005      	movs	r0, #5
 8020310:	f7f4 ff46 	bl	80151a0 <memp_free>
}
 8020314:	bf00      	nop
 8020316:	3708      	adds	r7, #8
 8020318:	46bd      	mov	sp, r7
 802031a:	bd80      	pop	{r7, pc}
 802031c:	08025104 	.word	0x08025104
 8020320:	080252bc 	.word	0x080252bc
 8020324:	0802514c 	.word	0x0802514c

08020328 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8020328:	b580      	push	{r7, lr}
 802032a:	b084      	sub	sp, #16
 802032c:	af00      	add	r7, sp, #0
 802032e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8020330:	687b      	ldr	r3, [r7, #4]
 8020332:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8020334:	68fb      	ldr	r3, [r7, #12]
 8020336:	2b00      	cmp	r3, #0
 8020338:	d106      	bne.n	8020348 <ipfrag_free_pbuf_custom+0x20>
 802033a:	4b11      	ldr	r3, [pc, #68]	; (8020380 <ipfrag_free_pbuf_custom+0x58>)
 802033c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8020340:	4910      	ldr	r1, [pc, #64]	; (8020384 <ipfrag_free_pbuf_custom+0x5c>)
 8020342:	4811      	ldr	r0, [pc, #68]	; (8020388 <ipfrag_free_pbuf_custom+0x60>)
 8020344:	f001 f956 	bl	80215f4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8020348:	68fa      	ldr	r2, [r7, #12]
 802034a:	687b      	ldr	r3, [r7, #4]
 802034c:	429a      	cmp	r2, r3
 802034e:	d006      	beq.n	802035e <ipfrag_free_pbuf_custom+0x36>
 8020350:	4b0b      	ldr	r3, [pc, #44]	; (8020380 <ipfrag_free_pbuf_custom+0x58>)
 8020352:	f240 22cf 	movw	r2, #719	; 0x2cf
 8020356:	490d      	ldr	r1, [pc, #52]	; (802038c <ipfrag_free_pbuf_custom+0x64>)
 8020358:	480b      	ldr	r0, [pc, #44]	; (8020388 <ipfrag_free_pbuf_custom+0x60>)
 802035a:	f001 f94b 	bl	80215f4 <iprintf>
  if (pcr->original != NULL) {
 802035e:	68fb      	ldr	r3, [r7, #12]
 8020360:	695b      	ldr	r3, [r3, #20]
 8020362:	2b00      	cmp	r3, #0
 8020364:	d004      	beq.n	8020370 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8020366:	68fb      	ldr	r3, [r7, #12]
 8020368:	695b      	ldr	r3, [r3, #20]
 802036a:	4618      	mov	r0, r3
 802036c:	f7f5 fdde 	bl	8015f2c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8020370:	68f8      	ldr	r0, [r7, #12]
 8020372:	f7ff ffbd 	bl	80202f0 <ip_frag_free_pbuf_custom_ref>
}
 8020376:	bf00      	nop
 8020378:	3710      	adds	r7, #16
 802037a:	46bd      	mov	sp, r7
 802037c:	bd80      	pop	{r7, pc}
 802037e:	bf00      	nop
 8020380:	08025104 	.word	0x08025104
 8020384:	080252c8 	.word	0x080252c8
 8020388:	0802514c 	.word	0x0802514c
 802038c:	080252d4 	.word	0x080252d4

08020390 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8020390:	b580      	push	{r7, lr}
 8020392:	b094      	sub	sp, #80	; 0x50
 8020394:	af02      	add	r7, sp, #8
 8020396:	60f8      	str	r0, [r7, #12]
 8020398:	60b9      	str	r1, [r7, #8]
 802039a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 802039c:	2300      	movs	r3, #0
 802039e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80203a2:	68bb      	ldr	r3, [r7, #8]
 80203a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80203a6:	3b14      	subs	r3, #20
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	da00      	bge.n	80203ae <ip4_frag+0x1e>
 80203ac:	3307      	adds	r3, #7
 80203ae:	10db      	asrs	r3, r3, #3
 80203b0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80203b2:	2314      	movs	r3, #20
 80203b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80203b6:	68fb      	ldr	r3, [r7, #12]
 80203b8:	685b      	ldr	r3, [r3, #4]
 80203ba:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80203bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80203be:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80203c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203c2:	781b      	ldrb	r3, [r3, #0]
 80203c4:	f003 030f 	and.w	r3, r3, #15
 80203c8:	b2db      	uxtb	r3, r3
 80203ca:	009b      	lsls	r3, r3, #2
 80203cc:	b2db      	uxtb	r3, r3
 80203ce:	2b14      	cmp	r3, #20
 80203d0:	d002      	beq.n	80203d8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80203d2:	f06f 0305 	mvn.w	r3, #5
 80203d6:	e10f      	b.n	80205f8 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80203d8:	68fb      	ldr	r3, [r7, #12]
 80203da:	895b      	ldrh	r3, [r3, #10]
 80203dc:	2b13      	cmp	r3, #19
 80203de:	d809      	bhi.n	80203f4 <ip4_frag+0x64>
 80203e0:	4b87      	ldr	r3, [pc, #540]	; (8020600 <ip4_frag+0x270>)
 80203e2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80203e6:	4987      	ldr	r1, [pc, #540]	; (8020604 <ip4_frag+0x274>)
 80203e8:	4887      	ldr	r0, [pc, #540]	; (8020608 <ip4_frag+0x278>)
 80203ea:	f001 f903 	bl	80215f4 <iprintf>
 80203ee:	f06f 0305 	mvn.w	r3, #5
 80203f2:	e101      	b.n	80205f8 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80203f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203f6:	88db      	ldrh	r3, [r3, #6]
 80203f8:	b29b      	uxth	r3, r3
 80203fa:	4618      	mov	r0, r3
 80203fc:	f7f4 f9c8 	bl	8014790 <lwip_htons>
 8020400:	4603      	mov	r3, r0
 8020402:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8020404:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020406:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802040a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 802040e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8020414:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8020416:	68fb      	ldr	r3, [r7, #12]
 8020418:	891b      	ldrh	r3, [r3, #8]
 802041a:	3b14      	subs	r3, #20
 802041c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8020420:	e0e0      	b.n	80205e4 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8020422:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020424:	00db      	lsls	r3, r3, #3
 8020426:	b29b      	uxth	r3, r3
 8020428:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802042c:	4293      	cmp	r3, r2
 802042e:	bf28      	it	cs
 8020430:	4613      	movcs	r3, r2
 8020432:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8020434:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020438:	2114      	movs	r1, #20
 802043a:	200e      	movs	r0, #14
 802043c:	f7f5 fa96 	bl	801596c <pbuf_alloc>
 8020440:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8020442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020444:	2b00      	cmp	r3, #0
 8020446:	f000 80d4 	beq.w	80205f2 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802044a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802044c:	895b      	ldrh	r3, [r3, #10]
 802044e:	2b13      	cmp	r3, #19
 8020450:	d806      	bhi.n	8020460 <ip4_frag+0xd0>
 8020452:	4b6b      	ldr	r3, [pc, #428]	; (8020600 <ip4_frag+0x270>)
 8020454:	f240 3225 	movw	r2, #805	; 0x325
 8020458:	496c      	ldr	r1, [pc, #432]	; (802060c <ip4_frag+0x27c>)
 802045a:	486b      	ldr	r0, [pc, #428]	; (8020608 <ip4_frag+0x278>)
 802045c:	f001 f8ca 	bl	80215f4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8020460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020462:	685b      	ldr	r3, [r3, #4]
 8020464:	2214      	movs	r2, #20
 8020466:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8020468:	4618      	mov	r0, r3
 802046a:	f001 f808 	bl	802147e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 802046e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020470:	685b      	ldr	r3, [r3, #4]
 8020472:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8020474:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8020476:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 802047a:	e064      	b.n	8020546 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 802047c:	68fb      	ldr	r3, [r7, #12]
 802047e:	895a      	ldrh	r2, [r3, #10]
 8020480:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8020482:	1ad3      	subs	r3, r2, r3
 8020484:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8020486:	68fb      	ldr	r3, [r7, #12]
 8020488:	895b      	ldrh	r3, [r3, #10]
 802048a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 802048c:	429a      	cmp	r2, r3
 802048e:	d906      	bls.n	802049e <ip4_frag+0x10e>
 8020490:	4b5b      	ldr	r3, [pc, #364]	; (8020600 <ip4_frag+0x270>)
 8020492:	f240 322d 	movw	r2, #813	; 0x32d
 8020496:	495e      	ldr	r1, [pc, #376]	; (8020610 <ip4_frag+0x280>)
 8020498:	485b      	ldr	r0, [pc, #364]	; (8020608 <ip4_frag+0x278>)
 802049a:	f001 f8ab 	bl	80215f4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 802049e:	8bfa      	ldrh	r2, [r7, #30]
 80204a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80204a4:	4293      	cmp	r3, r2
 80204a6:	bf28      	it	cs
 80204a8:	4613      	movcs	r3, r2
 80204aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80204ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80204b2:	2b00      	cmp	r3, #0
 80204b4:	d105      	bne.n	80204c2 <ip4_frag+0x132>
        poff = 0;
 80204b6:	2300      	movs	r3, #0
 80204b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80204ba:	68fb      	ldr	r3, [r7, #12]
 80204bc:	681b      	ldr	r3, [r3, #0]
 80204be:	60fb      	str	r3, [r7, #12]
        continue;
 80204c0:	e041      	b.n	8020546 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80204c2:	f7ff ff0d 	bl	80202e0 <ip_frag_alloc_pbuf_custom_ref>
 80204c6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80204c8:	69bb      	ldr	r3, [r7, #24]
 80204ca:	2b00      	cmp	r3, #0
 80204cc:	d103      	bne.n	80204d6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80204ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80204d0:	f7f5 fd2c 	bl	8015f2c <pbuf_free>
        goto memerr;
 80204d4:	e08e      	b.n	80205f4 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80204d6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80204d8:	68fb      	ldr	r3, [r7, #12]
 80204da:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80204dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80204de:	4413      	add	r3, r2
 80204e0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80204e4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80204e8:	9201      	str	r2, [sp, #4]
 80204ea:	9300      	str	r3, [sp, #0]
 80204ec:	4603      	mov	r3, r0
 80204ee:	2241      	movs	r2, #65	; 0x41
 80204f0:	2000      	movs	r0, #0
 80204f2:	f7f5 fb61 	bl	8015bb8 <pbuf_alloced_custom>
 80204f6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80204f8:	697b      	ldr	r3, [r7, #20]
 80204fa:	2b00      	cmp	r3, #0
 80204fc:	d106      	bne.n	802050c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80204fe:	69b8      	ldr	r0, [r7, #24]
 8020500:	f7ff fef6 	bl	80202f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8020504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020506:	f7f5 fd11 	bl	8015f2c <pbuf_free>
        goto memerr;
 802050a:	e073      	b.n	80205f4 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 802050c:	68f8      	ldr	r0, [r7, #12]
 802050e:	f7f5 fdb3 	bl	8016078 <pbuf_ref>
      pcr->original = p;
 8020512:	69bb      	ldr	r3, [r7, #24]
 8020514:	68fa      	ldr	r2, [r7, #12]
 8020516:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8020518:	69bb      	ldr	r3, [r7, #24]
 802051a:	4a3e      	ldr	r2, [pc, #248]	; (8020614 <ip4_frag+0x284>)
 802051c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 802051e:	6979      	ldr	r1, [r7, #20]
 8020520:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020522:	f7f5 fdd1 	bl	80160c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8020526:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 802052a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802052e:	1ad3      	subs	r3, r2, r3
 8020530:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8020534:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8020538:	2b00      	cmp	r3, #0
 802053a:	d004      	beq.n	8020546 <ip4_frag+0x1b6>
        poff = 0;
 802053c:	2300      	movs	r3, #0
 802053e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8020540:	68fb      	ldr	r3, [r7, #12]
 8020542:	681b      	ldr	r3, [r3, #0]
 8020544:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8020546:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802054a:	2b00      	cmp	r3, #0
 802054c:	d196      	bne.n	802047c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 802054e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8020550:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8020554:	4413      	add	r3, r2
 8020556:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8020558:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802055c:	68bb      	ldr	r3, [r7, #8]
 802055e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8020560:	3b14      	subs	r3, #20
 8020562:	429a      	cmp	r2, r3
 8020564:	bfd4      	ite	le
 8020566:	2301      	movle	r3, #1
 8020568:	2300      	movgt	r3, #0
 802056a:	b2db      	uxtb	r3, r3
 802056c:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 802056e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8020572:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020576:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8020578:	6a3b      	ldr	r3, [r7, #32]
 802057a:	2b00      	cmp	r3, #0
 802057c:	d002      	beq.n	8020584 <ip4_frag+0x1f4>
 802057e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020580:	2b00      	cmp	r3, #0
 8020582:	d003      	beq.n	802058c <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8020584:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020586:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802058a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 802058c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802058e:	4618      	mov	r0, r3
 8020590:	f7f4 f8fe 	bl	8014790 <lwip_htons>
 8020594:	4603      	mov	r3, r0
 8020596:	461a      	mov	r2, r3
 8020598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802059a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802059c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802059e:	3314      	adds	r3, #20
 80205a0:	b29b      	uxth	r3, r3
 80205a2:	4618      	mov	r0, r3
 80205a4:	f7f4 f8f4 	bl	8014790 <lwip_htons>
 80205a8:	4603      	mov	r3, r0
 80205aa:	461a      	mov	r2, r3
 80205ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205ae:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80205b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205b2:	2200      	movs	r2, #0
 80205b4:	729a      	strb	r2, [r3, #10]
 80205b6:	2200      	movs	r2, #0
 80205b8:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80205ba:	68bb      	ldr	r3, [r7, #8]
 80205bc:	695b      	ldr	r3, [r3, #20]
 80205be:	687a      	ldr	r2, [r7, #4]
 80205c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80205c2:	68b8      	ldr	r0, [r7, #8]
 80205c4:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80205c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80205c8:	f7f5 fcb0 	bl	8015f2c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80205cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80205d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80205d2:	1ad3      	subs	r3, r2, r3
 80205d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80205d8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80205dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80205de:	4413      	add	r3, r2
 80205e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80205e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80205e8:	2b00      	cmp	r3, #0
 80205ea:	f47f af1a 	bne.w	8020422 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80205ee:	2300      	movs	r3, #0
 80205f0:	e002      	b.n	80205f8 <ip4_frag+0x268>
      goto memerr;
 80205f2:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80205f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80205f8:	4618      	mov	r0, r3
 80205fa:	3748      	adds	r7, #72	; 0x48
 80205fc:	46bd      	mov	sp, r7
 80205fe:	bd80      	pop	{r7, pc}
 8020600:	08025104 	.word	0x08025104
 8020604:	080252e0 	.word	0x080252e0
 8020608:	0802514c 	.word	0x0802514c
 802060c:	080252fc 	.word	0x080252fc
 8020610:	0802531c 	.word	0x0802531c
 8020614:	08020329 	.word	0x08020329

08020618 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8020618:	b580      	push	{r7, lr}
 802061a:	b086      	sub	sp, #24
 802061c:	af00      	add	r7, sp, #0
 802061e:	6078      	str	r0, [r7, #4]
 8020620:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8020622:	230e      	movs	r3, #14
 8020624:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8020626:	687b      	ldr	r3, [r7, #4]
 8020628:	895b      	ldrh	r3, [r3, #10]
 802062a:	2b0e      	cmp	r3, #14
 802062c:	d96e      	bls.n	802070c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 802062e:	687b      	ldr	r3, [r7, #4]
 8020630:	7bdb      	ldrb	r3, [r3, #15]
 8020632:	2b00      	cmp	r3, #0
 8020634:	d106      	bne.n	8020644 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8020636:	683b      	ldr	r3, [r7, #0]
 8020638:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 802063c:	3301      	adds	r3, #1
 802063e:	b2da      	uxtb	r2, r3
 8020640:	687b      	ldr	r3, [r7, #4]
 8020642:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8020644:	687b      	ldr	r3, [r7, #4]
 8020646:	685b      	ldr	r3, [r3, #4]
 8020648:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 802064a:	693b      	ldr	r3, [r7, #16]
 802064c:	7b1a      	ldrb	r2, [r3, #12]
 802064e:	7b5b      	ldrb	r3, [r3, #13]
 8020650:	021b      	lsls	r3, r3, #8
 8020652:	4313      	orrs	r3, r2
 8020654:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8020656:	693b      	ldr	r3, [r7, #16]
 8020658:	781b      	ldrb	r3, [r3, #0]
 802065a:	f003 0301 	and.w	r3, r3, #1
 802065e:	2b00      	cmp	r3, #0
 8020660:	d023      	beq.n	80206aa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8020662:	693b      	ldr	r3, [r7, #16]
 8020664:	781b      	ldrb	r3, [r3, #0]
 8020666:	2b01      	cmp	r3, #1
 8020668:	d10f      	bne.n	802068a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802066a:	693b      	ldr	r3, [r7, #16]
 802066c:	785b      	ldrb	r3, [r3, #1]
 802066e:	2b00      	cmp	r3, #0
 8020670:	d11b      	bne.n	80206aa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8020672:	693b      	ldr	r3, [r7, #16]
 8020674:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8020676:	2b5e      	cmp	r3, #94	; 0x5e
 8020678:	d117      	bne.n	80206aa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 802067a:	687b      	ldr	r3, [r7, #4]
 802067c:	7b5b      	ldrb	r3, [r3, #13]
 802067e:	f043 0310 	orr.w	r3, r3, #16
 8020682:	b2da      	uxtb	r2, r3
 8020684:	687b      	ldr	r3, [r7, #4]
 8020686:	735a      	strb	r2, [r3, #13]
 8020688:	e00f      	b.n	80206aa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 802068a:	693b      	ldr	r3, [r7, #16]
 802068c:	2206      	movs	r2, #6
 802068e:	4928      	ldr	r1, [pc, #160]	; (8020730 <ethernet_input+0x118>)
 8020690:	4618      	mov	r0, r3
 8020692:	f000 fee5 	bl	8021460 <memcmp>
 8020696:	4603      	mov	r3, r0
 8020698:	2b00      	cmp	r3, #0
 802069a:	d106      	bne.n	80206aa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 802069c:	687b      	ldr	r3, [r7, #4]
 802069e:	7b5b      	ldrb	r3, [r3, #13]
 80206a0:	f043 0308 	orr.w	r3, r3, #8
 80206a4:	b2da      	uxtb	r2, r3
 80206a6:	687b      	ldr	r3, [r7, #4]
 80206a8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80206aa:	89fb      	ldrh	r3, [r7, #14]
 80206ac:	2b08      	cmp	r3, #8
 80206ae:	d003      	beq.n	80206b8 <ethernet_input+0xa0>
 80206b0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80206b4:	d014      	beq.n	80206e0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80206b6:	e032      	b.n	802071e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80206b8:	683b      	ldr	r3, [r7, #0]
 80206ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80206be:	f003 0308 	and.w	r3, r3, #8
 80206c2:	2b00      	cmp	r3, #0
 80206c4:	d024      	beq.n	8020710 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80206c6:	8afb      	ldrh	r3, [r7, #22]
 80206c8:	4619      	mov	r1, r3
 80206ca:	6878      	ldr	r0, [r7, #4]
 80206cc:	f7f5 fba8 	bl	8015e20 <pbuf_remove_header>
 80206d0:	4603      	mov	r3, r0
 80206d2:	2b00      	cmp	r3, #0
 80206d4:	d11e      	bne.n	8020714 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80206d6:	6839      	ldr	r1, [r7, #0]
 80206d8:	6878      	ldr	r0, [r7, #4]
 80206da:	f7fe fe7d 	bl	801f3d8 <ip4_input>
      break;
 80206de:	e013      	b.n	8020708 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80206e0:	683b      	ldr	r3, [r7, #0]
 80206e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80206e6:	f003 0308 	and.w	r3, r3, #8
 80206ea:	2b00      	cmp	r3, #0
 80206ec:	d014      	beq.n	8020718 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80206ee:	8afb      	ldrh	r3, [r7, #22]
 80206f0:	4619      	mov	r1, r3
 80206f2:	6878      	ldr	r0, [r7, #4]
 80206f4:	f7f5 fb94 	bl	8015e20 <pbuf_remove_header>
 80206f8:	4603      	mov	r3, r0
 80206fa:	2b00      	cmp	r3, #0
 80206fc:	d10e      	bne.n	802071c <ethernet_input+0x104>
        etharp_input(p, netif);
 80206fe:	6839      	ldr	r1, [r7, #0]
 8020700:	6878      	ldr	r0, [r7, #4]
 8020702:	f7fe f819 	bl	801e738 <etharp_input>
      break;
 8020706:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8020708:	2300      	movs	r3, #0
 802070a:	e00c      	b.n	8020726 <ethernet_input+0x10e>
    goto free_and_return;
 802070c:	bf00      	nop
 802070e:	e006      	b.n	802071e <ethernet_input+0x106>
        goto free_and_return;
 8020710:	bf00      	nop
 8020712:	e004      	b.n	802071e <ethernet_input+0x106>
        goto free_and_return;
 8020714:	bf00      	nop
 8020716:	e002      	b.n	802071e <ethernet_input+0x106>
        goto free_and_return;
 8020718:	bf00      	nop
 802071a:	e000      	b.n	802071e <ethernet_input+0x106>
        goto free_and_return;
 802071c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 802071e:	6878      	ldr	r0, [r7, #4]
 8020720:	f7f5 fc04 	bl	8015f2c <pbuf_free>
  return ERR_OK;
 8020724:	2300      	movs	r3, #0
}
 8020726:	4618      	mov	r0, r3
 8020728:	3718      	adds	r7, #24
 802072a:	46bd      	mov	sp, r7
 802072c:	bd80      	pop	{r7, pc}
 802072e:	bf00      	nop
 8020730:	08025550 	.word	0x08025550

08020734 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8020734:	b580      	push	{r7, lr}
 8020736:	b086      	sub	sp, #24
 8020738:	af00      	add	r7, sp, #0
 802073a:	60f8      	str	r0, [r7, #12]
 802073c:	60b9      	str	r1, [r7, #8]
 802073e:	607a      	str	r2, [r7, #4]
 8020740:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8020742:	8c3b      	ldrh	r3, [r7, #32]
 8020744:	4618      	mov	r0, r3
 8020746:	f7f4 f823 	bl	8014790 <lwip_htons>
 802074a:	4603      	mov	r3, r0
 802074c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 802074e:	210e      	movs	r1, #14
 8020750:	68b8      	ldr	r0, [r7, #8]
 8020752:	f7f5 fb55 	bl	8015e00 <pbuf_add_header>
 8020756:	4603      	mov	r3, r0
 8020758:	2b00      	cmp	r3, #0
 802075a:	d125      	bne.n	80207a8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 802075c:	68bb      	ldr	r3, [r7, #8]
 802075e:	685b      	ldr	r3, [r3, #4]
 8020760:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8020762:	693b      	ldr	r3, [r7, #16]
 8020764:	8afa      	ldrh	r2, [r7, #22]
 8020766:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8020768:	693b      	ldr	r3, [r7, #16]
 802076a:	2206      	movs	r2, #6
 802076c:	6839      	ldr	r1, [r7, #0]
 802076e:	4618      	mov	r0, r3
 8020770:	f000 fe85 	bl	802147e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8020774:	693b      	ldr	r3, [r7, #16]
 8020776:	3306      	adds	r3, #6
 8020778:	2206      	movs	r2, #6
 802077a:	6879      	ldr	r1, [r7, #4]
 802077c:	4618      	mov	r0, r3
 802077e:	f000 fe7e 	bl	802147e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8020782:	68fb      	ldr	r3, [r7, #12]
 8020784:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8020788:	2b06      	cmp	r3, #6
 802078a:	d006      	beq.n	802079a <ethernet_output+0x66>
 802078c:	4b0a      	ldr	r3, [pc, #40]	; (80207b8 <ethernet_output+0x84>)
 802078e:	f240 1233 	movw	r2, #307	; 0x133
 8020792:	490a      	ldr	r1, [pc, #40]	; (80207bc <ethernet_output+0x88>)
 8020794:	480a      	ldr	r0, [pc, #40]	; (80207c0 <ethernet_output+0x8c>)
 8020796:	f000 ff2d 	bl	80215f4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 802079a:	68fb      	ldr	r3, [r7, #12]
 802079c:	699b      	ldr	r3, [r3, #24]
 802079e:	68b9      	ldr	r1, [r7, #8]
 80207a0:	68f8      	ldr	r0, [r7, #12]
 80207a2:	4798      	blx	r3
 80207a4:	4603      	mov	r3, r0
 80207a6:	e002      	b.n	80207ae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80207a8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80207aa:	f06f 0301 	mvn.w	r3, #1
}
 80207ae:	4618      	mov	r0, r3
 80207b0:	3718      	adds	r7, #24
 80207b2:	46bd      	mov	sp, r7
 80207b4:	bd80      	pop	{r7, pc}
 80207b6:	bf00      	nop
 80207b8:	0802532c 	.word	0x0802532c
 80207bc:	08025364 	.word	0x08025364
 80207c0:	08025398 	.word	0x08025398

080207c4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80207c4:	b580      	push	{r7, lr}
 80207c6:	b082      	sub	sp, #8
 80207c8:	af00      	add	r7, sp, #0
 80207ca:	6078      	str	r0, [r7, #4]
 80207cc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80207ce:	683b      	ldr	r3, [r7, #0]
 80207d0:	2200      	movs	r2, #0
 80207d2:	2104      	movs	r1, #4
 80207d4:	4618      	mov	r0, r3
 80207d6:	f7f0 fa5b 	bl	8010c90 <osMessageQueueNew>
 80207da:	4602      	mov	r2, r0
 80207dc:	687b      	ldr	r3, [r7, #4]
 80207de:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80207e0:	687b      	ldr	r3, [r7, #4]
 80207e2:	681b      	ldr	r3, [r3, #0]
 80207e4:	2b00      	cmp	r3, #0
 80207e6:	d102      	bne.n	80207ee <sys_mbox_new+0x2a>
    return ERR_MEM;
 80207e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80207ec:	e000      	b.n	80207f0 <sys_mbox_new+0x2c>

  return ERR_OK;
 80207ee:	2300      	movs	r3, #0
}
 80207f0:	4618      	mov	r0, r3
 80207f2:	3708      	adds	r7, #8
 80207f4:	46bd      	mov	sp, r7
 80207f6:	bd80      	pop	{r7, pc}

080207f8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80207f8:	b580      	push	{r7, lr}
 80207fa:	b084      	sub	sp, #16
 80207fc:	af00      	add	r7, sp, #0
 80207fe:	6078      	str	r0, [r7, #4]
 8020800:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8020802:	687b      	ldr	r3, [r7, #4]
 8020804:	6818      	ldr	r0, [r3, #0]
 8020806:	4639      	mov	r1, r7
 8020808:	2300      	movs	r3, #0
 802080a:	2200      	movs	r2, #0
 802080c:	f7f0 fac6 	bl	8010d9c <osMessageQueuePut>
 8020810:	4603      	mov	r3, r0
 8020812:	2b00      	cmp	r3, #0
 8020814:	d102      	bne.n	802081c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8020816:	2300      	movs	r3, #0
 8020818:	73fb      	strb	r3, [r7, #15]
 802081a:	e001      	b.n	8020820 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 802081c:	23ff      	movs	r3, #255	; 0xff
 802081e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8020820:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8020824:	4618      	mov	r0, r3
 8020826:	3710      	adds	r7, #16
 8020828:	46bd      	mov	sp, r7
 802082a:	bd80      	pop	{r7, pc}

0802082c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 802082c:	b580      	push	{r7, lr}
 802082e:	b086      	sub	sp, #24
 8020830:	af00      	add	r7, sp, #0
 8020832:	60f8      	str	r0, [r7, #12]
 8020834:	60b9      	str	r1, [r7, #8]
 8020836:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8020838:	f7ef fe4a 	bl	80104d0 <osKernelGetTickCount>
 802083c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 802083e:	687b      	ldr	r3, [r7, #4]
 8020840:	2b00      	cmp	r3, #0
 8020842:	d013      	beq.n	802086c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8020844:	68fb      	ldr	r3, [r7, #12]
 8020846:	6818      	ldr	r0, [r3, #0]
 8020848:	687b      	ldr	r3, [r7, #4]
 802084a:	2200      	movs	r2, #0
 802084c:	68b9      	ldr	r1, [r7, #8]
 802084e:	f7f0 fb19 	bl	8010e84 <osMessageQueueGet>
 8020852:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8020854:	693b      	ldr	r3, [r7, #16]
 8020856:	2b00      	cmp	r3, #0
 8020858:	d105      	bne.n	8020866 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 802085a:	f7ef fe39 	bl	80104d0 <osKernelGetTickCount>
 802085e:	4602      	mov	r2, r0
 8020860:	697b      	ldr	r3, [r7, #20]
 8020862:	1ad3      	subs	r3, r2, r3
 8020864:	e00f      	b.n	8020886 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8020866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802086a:	e00c      	b.n	8020886 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 802086c:	68fb      	ldr	r3, [r7, #12]
 802086e:	6818      	ldr	r0, [r3, #0]
 8020870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020874:	2200      	movs	r2, #0
 8020876:	68b9      	ldr	r1, [r7, #8]
 8020878:	f7f0 fb04 	bl	8010e84 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 802087c:	f7ef fe28 	bl	80104d0 <osKernelGetTickCount>
 8020880:	4602      	mov	r2, r0
 8020882:	697b      	ldr	r3, [r7, #20]
 8020884:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8020886:	4618      	mov	r0, r3
 8020888:	3718      	adds	r7, #24
 802088a:	46bd      	mov	sp, r7
 802088c:	bd80      	pop	{r7, pc}

0802088e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 802088e:	b480      	push	{r7}
 8020890:	b083      	sub	sp, #12
 8020892:	af00      	add	r7, sp, #0
 8020894:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8020896:	687b      	ldr	r3, [r7, #4]
 8020898:	681b      	ldr	r3, [r3, #0]
 802089a:	2b00      	cmp	r3, #0
 802089c:	d101      	bne.n	80208a2 <sys_mbox_valid+0x14>
    return 0;
 802089e:	2300      	movs	r3, #0
 80208a0:	e000      	b.n	80208a4 <sys_mbox_valid+0x16>
  else
    return 1;
 80208a2:	2301      	movs	r3, #1
}
 80208a4:	4618      	mov	r0, r3
 80208a6:	370c      	adds	r7, #12
 80208a8:	46bd      	mov	sp, r7
 80208aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208ae:	4770      	bx	lr

080208b0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80208b0:	b580      	push	{r7, lr}
 80208b2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80208b4:	2000      	movs	r0, #0
 80208b6:	f7ef ff47 	bl	8010748 <osMutexNew>
 80208ba:	4602      	mov	r2, r0
 80208bc:	4b01      	ldr	r3, [pc, #4]	; (80208c4 <sys_init+0x14>)
 80208be:	601a      	str	r2, [r3, #0]
#endif
}
 80208c0:	bf00      	nop
 80208c2:	bd80      	pop	{r7, pc}
 80208c4:	200103a0 	.word	0x200103a0

080208c8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80208c8:	b580      	push	{r7, lr}
 80208ca:	b082      	sub	sp, #8
 80208cc:	af00      	add	r7, sp, #0
 80208ce:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80208d0:	2000      	movs	r0, #0
 80208d2:	f7ef ff39 	bl	8010748 <osMutexNew>
 80208d6:	4602      	mov	r2, r0
 80208d8:	687b      	ldr	r3, [r7, #4]
 80208da:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80208dc:	687b      	ldr	r3, [r7, #4]
 80208de:	681b      	ldr	r3, [r3, #0]
 80208e0:	2b00      	cmp	r3, #0
 80208e2:	d102      	bne.n	80208ea <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80208e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80208e8:	e000      	b.n	80208ec <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80208ea:	2300      	movs	r3, #0
}
 80208ec:	4618      	mov	r0, r3
 80208ee:	3708      	adds	r7, #8
 80208f0:	46bd      	mov	sp, r7
 80208f2:	bd80      	pop	{r7, pc}

080208f4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80208f4:	b580      	push	{r7, lr}
 80208f6:	b082      	sub	sp, #8
 80208f8:	af00      	add	r7, sp, #0
 80208fa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80208fc:	687b      	ldr	r3, [r7, #4]
 80208fe:	681b      	ldr	r3, [r3, #0]
 8020900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020904:	4618      	mov	r0, r3
 8020906:	f7ef ffb9 	bl	801087c <osMutexAcquire>
#endif
}
 802090a:	bf00      	nop
 802090c:	3708      	adds	r7, #8
 802090e:	46bd      	mov	sp, r7
 8020910:	bd80      	pop	{r7, pc}

08020912 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8020912:	b580      	push	{r7, lr}
 8020914:	b082      	sub	sp, #8
 8020916:	af00      	add	r7, sp, #0
 8020918:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 802091a:	687b      	ldr	r3, [r7, #4]
 802091c:	681b      	ldr	r3, [r3, #0]
 802091e:	4618      	mov	r0, r3
 8020920:	f7f0 f80a 	bl	8010938 <osMutexRelease>
}
 8020924:	bf00      	nop
 8020926:	3708      	adds	r7, #8
 8020928:	46bd      	mov	sp, r7
 802092a:	bd80      	pop	{r7, pc}

0802092c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 802092c:	b580      	push	{r7, lr}
 802092e:	b08e      	sub	sp, #56	; 0x38
 8020930:	af00      	add	r7, sp, #0
 8020932:	60f8      	str	r0, [r7, #12]
 8020934:	60b9      	str	r1, [r7, #8]
 8020936:	607a      	str	r2, [r7, #4]
 8020938:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 802093a:	f107 0314 	add.w	r3, r7, #20
 802093e:	2224      	movs	r2, #36	; 0x24
 8020940:	2100      	movs	r1, #0
 8020942:	4618      	mov	r0, r3
 8020944:	f000 fda6 	bl	8021494 <memset>
 8020948:	68fb      	ldr	r3, [r7, #12]
 802094a:	617b      	str	r3, [r7, #20]
 802094c:	683b      	ldr	r3, [r7, #0]
 802094e:	62bb      	str	r3, [r7, #40]	; 0x28
 8020950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020952:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8020954:	f107 0314 	add.w	r3, r7, #20
 8020958:	461a      	mov	r2, r3
 802095a:	6879      	ldr	r1, [r7, #4]
 802095c:	68b8      	ldr	r0, [r7, #8]
 802095e:	f7ef fddf 	bl	8010520 <osThreadNew>
 8020962:	4603      	mov	r3, r0
#endif
}
 8020964:	4618      	mov	r0, r3
 8020966:	3738      	adds	r7, #56	; 0x38
 8020968:	46bd      	mov	sp, r7
 802096a:	bd80      	pop	{r7, pc}

0802096c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 802096c:	b580      	push	{r7, lr}
 802096e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8020970:	4b04      	ldr	r3, [pc, #16]	; (8020984 <sys_arch_protect+0x18>)
 8020972:	681b      	ldr	r3, [r3, #0]
 8020974:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020978:	4618      	mov	r0, r3
 802097a:	f7ef ff7f 	bl	801087c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 802097e:	2301      	movs	r3, #1
}
 8020980:	4618      	mov	r0, r3
 8020982:	bd80      	pop	{r7, pc}
 8020984:	200103a0 	.word	0x200103a0

08020988 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8020988:	b580      	push	{r7, lr}
 802098a:	b082      	sub	sp, #8
 802098c:	af00      	add	r7, sp, #0
 802098e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8020990:	4b04      	ldr	r3, [pc, #16]	; (80209a4 <sys_arch_unprotect+0x1c>)
 8020992:	681b      	ldr	r3, [r3, #0]
 8020994:	4618      	mov	r0, r3
 8020996:	f7ef ffcf 	bl	8010938 <osMutexRelease>
}
 802099a:	bf00      	nop
 802099c:	3708      	adds	r7, #8
 802099e:	46bd      	mov	sp, r7
 80209a0:	bd80      	pop	{r7, pc}
 80209a2:	bf00      	nop
 80209a4:	200103a0 	.word	0x200103a0

080209a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80209a8:	b580      	push	{r7, lr}
 80209aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80209ac:	2201      	movs	r2, #1
 80209ae:	490e      	ldr	r1, [pc, #56]	; (80209e8 <MX_USB_HOST_Init+0x40>)
 80209b0:	480e      	ldr	r0, [pc, #56]	; (80209ec <MX_USB_HOST_Init+0x44>)
 80209b2:	f7ed ff91 	bl	800e8d8 <USBH_Init>
 80209b6:	4603      	mov	r3, r0
 80209b8:	2b00      	cmp	r3, #0
 80209ba:	d001      	beq.n	80209c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80209bc:	f7e1 f802 	bl	80019c4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80209c0:	490b      	ldr	r1, [pc, #44]	; (80209f0 <MX_USB_HOST_Init+0x48>)
 80209c2:	480a      	ldr	r0, [pc, #40]	; (80209ec <MX_USB_HOST_Init+0x44>)
 80209c4:	f7ee f838 	bl	800ea38 <USBH_RegisterClass>
 80209c8:	4603      	mov	r3, r0
 80209ca:	2b00      	cmp	r3, #0
 80209cc:	d001      	beq.n	80209d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80209ce:	f7e0 fff9 	bl	80019c4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80209d2:	4806      	ldr	r0, [pc, #24]	; (80209ec <MX_USB_HOST_Init+0x44>)
 80209d4:	f7ee f8bc 	bl	800eb50 <USBH_Start>
 80209d8:	4603      	mov	r3, r0
 80209da:	2b00      	cmp	r3, #0
 80209dc:	d001      	beq.n	80209e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80209de:	f7e0 fff1 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80209e2:	bf00      	nop
 80209e4:	bd80      	pop	{r7, pc}
 80209e6:	bf00      	nop
 80209e8:	080209f5 	.word	0x080209f5
 80209ec:	200103a4 	.word	0x200103a4
 80209f0:	20000010 	.word	0x20000010

080209f4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80209f4:	b480      	push	{r7}
 80209f6:	b083      	sub	sp, #12
 80209f8:	af00      	add	r7, sp, #0
 80209fa:	6078      	str	r0, [r7, #4]
 80209fc:	460b      	mov	r3, r1
 80209fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8020a00:	78fb      	ldrb	r3, [r7, #3]
 8020a02:	3b01      	subs	r3, #1
 8020a04:	2b04      	cmp	r3, #4
 8020a06:	d819      	bhi.n	8020a3c <USBH_UserProcess+0x48>
 8020a08:	a201      	add	r2, pc, #4	; (adr r2, 8020a10 <USBH_UserProcess+0x1c>)
 8020a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020a0e:	bf00      	nop
 8020a10:	08020a3d 	.word	0x08020a3d
 8020a14:	08020a2d 	.word	0x08020a2d
 8020a18:	08020a3d 	.word	0x08020a3d
 8020a1c:	08020a35 	.word	0x08020a35
 8020a20:	08020a25 	.word	0x08020a25
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8020a24:	4b09      	ldr	r3, [pc, #36]	; (8020a4c <USBH_UserProcess+0x58>)
 8020a26:	2203      	movs	r2, #3
 8020a28:	701a      	strb	r2, [r3, #0]
  break;
 8020a2a:	e008      	b.n	8020a3e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8020a2c:	4b07      	ldr	r3, [pc, #28]	; (8020a4c <USBH_UserProcess+0x58>)
 8020a2e:	2202      	movs	r2, #2
 8020a30:	701a      	strb	r2, [r3, #0]
  break;
 8020a32:	e004      	b.n	8020a3e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8020a34:	4b05      	ldr	r3, [pc, #20]	; (8020a4c <USBH_UserProcess+0x58>)
 8020a36:	2201      	movs	r2, #1
 8020a38:	701a      	strb	r2, [r3, #0]
  break;
 8020a3a:	e000      	b.n	8020a3e <USBH_UserProcess+0x4a>

  default:
  break;
 8020a3c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8020a3e:	bf00      	nop
 8020a40:	370c      	adds	r7, #12
 8020a42:	46bd      	mov	sp, r7
 8020a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a48:	4770      	bx	lr
 8020a4a:	bf00      	nop
 8020a4c:	20009116 	.word	0x20009116

08020a50 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8020a50:	b580      	push	{r7, lr}
 8020a52:	b08a      	sub	sp, #40	; 0x28
 8020a54:	af00      	add	r7, sp, #0
 8020a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020a58:	f107 0314 	add.w	r3, r7, #20
 8020a5c:	2200      	movs	r2, #0
 8020a5e:	601a      	str	r2, [r3, #0]
 8020a60:	605a      	str	r2, [r3, #4]
 8020a62:	609a      	str	r2, [r3, #8]
 8020a64:	60da      	str	r2, [r3, #12]
 8020a66:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8020a68:	687b      	ldr	r3, [r7, #4]
 8020a6a:	681b      	ldr	r3, [r3, #0]
 8020a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8020a70:	d13c      	bne.n	8020aec <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020a72:	4b20      	ldr	r3, [pc, #128]	; (8020af4 <HAL_HCD_MspInit+0xa4>)
 8020a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a76:	4a1f      	ldr	r2, [pc, #124]	; (8020af4 <HAL_HCD_MspInit+0xa4>)
 8020a78:	f043 0301 	orr.w	r3, r3, #1
 8020a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8020a7e:	4b1d      	ldr	r3, [pc, #116]	; (8020af4 <HAL_HCD_MspInit+0xa4>)
 8020a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a82:	f003 0301 	and.w	r3, r3, #1
 8020a86:	613b      	str	r3, [r7, #16]
 8020a88:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8020a8a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8020a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020a90:	2302      	movs	r3, #2
 8020a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020a94:	2300      	movs	r3, #0
 8020a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020a98:	2303      	movs	r3, #3
 8020a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8020a9c:	230a      	movs	r3, #10
 8020a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020aa0:	f107 0314 	add.w	r3, r7, #20
 8020aa4:	4619      	mov	r1, r3
 8020aa6:	4814      	ldr	r0, [pc, #80]	; (8020af8 <HAL_HCD_MspInit+0xa8>)
 8020aa8:	f7e5 fb3a 	bl	8006120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8020aac:	4b11      	ldr	r3, [pc, #68]	; (8020af4 <HAL_HCD_MspInit+0xa4>)
 8020aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020ab0:	4a10      	ldr	r2, [pc, #64]	; (8020af4 <HAL_HCD_MspInit+0xa4>)
 8020ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020ab6:	6353      	str	r3, [r2, #52]	; 0x34
 8020ab8:	4b0e      	ldr	r3, [pc, #56]	; (8020af4 <HAL_HCD_MspInit+0xa4>)
 8020aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020ac0:	60fb      	str	r3, [r7, #12]
 8020ac2:	68fb      	ldr	r3, [r7, #12]
 8020ac4:	4b0b      	ldr	r3, [pc, #44]	; (8020af4 <HAL_HCD_MspInit+0xa4>)
 8020ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020ac8:	4a0a      	ldr	r2, [pc, #40]	; (8020af4 <HAL_HCD_MspInit+0xa4>)
 8020aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020ace:	6453      	str	r3, [r2, #68]	; 0x44
 8020ad0:	4b08      	ldr	r3, [pc, #32]	; (8020af4 <HAL_HCD_MspInit+0xa4>)
 8020ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020ad8:	60bb      	str	r3, [r7, #8]
 8020ada:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8020adc:	2200      	movs	r2, #0
 8020ade:	2105      	movs	r1, #5
 8020ae0:	2043      	movs	r0, #67	; 0x43
 8020ae2:	f7e3 fab1 	bl	8004048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8020ae6:	2043      	movs	r0, #67	; 0x43
 8020ae8:	f7e3 faca 	bl	8004080 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8020aec:	bf00      	nop
 8020aee:	3728      	adds	r7, #40	; 0x28
 8020af0:	46bd      	mov	sp, r7
 8020af2:	bd80      	pop	{r7, pc}
 8020af4:	40023800 	.word	0x40023800
 8020af8:	40020000 	.word	0x40020000

08020afc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8020afc:	b580      	push	{r7, lr}
 8020afe:	b082      	sub	sp, #8
 8020b00:	af00      	add	r7, sp, #0
 8020b02:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8020b04:	687b      	ldr	r3, [r7, #4]
 8020b06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020b0a:	4618      	mov	r0, r3
 8020b0c:	f7ee fccd 	bl	800f4aa <USBH_LL_IncTimer>
}
 8020b10:	bf00      	nop
 8020b12:	3708      	adds	r7, #8
 8020b14:	46bd      	mov	sp, r7
 8020b16:	bd80      	pop	{r7, pc}

08020b18 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8020b18:	b580      	push	{r7, lr}
 8020b1a:	b082      	sub	sp, #8
 8020b1c:	af00      	add	r7, sp, #0
 8020b1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8020b20:	687b      	ldr	r3, [r7, #4]
 8020b22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020b26:	4618      	mov	r0, r3
 8020b28:	f7ee fd11 	bl	800f54e <USBH_LL_Connect>
}
 8020b2c:	bf00      	nop
 8020b2e:	3708      	adds	r7, #8
 8020b30:	46bd      	mov	sp, r7
 8020b32:	bd80      	pop	{r7, pc}

08020b34 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8020b34:	b580      	push	{r7, lr}
 8020b36:	b082      	sub	sp, #8
 8020b38:	af00      	add	r7, sp, #0
 8020b3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8020b3c:	687b      	ldr	r3, [r7, #4]
 8020b3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020b42:	4618      	mov	r0, r3
 8020b44:	f7ee fd26 	bl	800f594 <USBH_LL_Disconnect>
}
 8020b48:	bf00      	nop
 8020b4a:	3708      	adds	r7, #8
 8020b4c:	46bd      	mov	sp, r7
 8020b4e:	bd80      	pop	{r7, pc}

08020b50 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8020b50:	b580      	push	{r7, lr}
 8020b52:	b082      	sub	sp, #8
 8020b54:	af00      	add	r7, sp, #0
 8020b56:	6078      	str	r0, [r7, #4]
 8020b58:	460b      	mov	r3, r1
 8020b5a:	70fb      	strb	r3, [r7, #3]
 8020b5c:	4613      	mov	r3, r2
 8020b5e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8020b60:	687b      	ldr	r3, [r7, #4]
 8020b62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020b66:	4618      	mov	r0, r3
 8020b68:	f7ee fd5d 	bl	800f626 <USBH_LL_NotifyURBChange>
#endif
}
 8020b6c:	bf00      	nop
 8020b6e:	3708      	adds	r7, #8
 8020b70:	46bd      	mov	sp, r7
 8020b72:	bd80      	pop	{r7, pc}

08020b74 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8020b74:	b580      	push	{r7, lr}
 8020b76:	b082      	sub	sp, #8
 8020b78:	af00      	add	r7, sp, #0
 8020b7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8020b7c:	687b      	ldr	r3, [r7, #4]
 8020b7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020b82:	4618      	mov	r0, r3
 8020b84:	f7ee fcbb 	bl	800f4fe <USBH_LL_PortEnabled>
}
 8020b88:	bf00      	nop
 8020b8a:	3708      	adds	r7, #8
 8020b8c:	46bd      	mov	sp, r7
 8020b8e:	bd80      	pop	{r7, pc}

08020b90 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8020b90:	b580      	push	{r7, lr}
 8020b92:	b082      	sub	sp, #8
 8020b94:	af00      	add	r7, sp, #0
 8020b96:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8020b98:	687b      	ldr	r3, [r7, #4]
 8020b9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020b9e:	4618      	mov	r0, r3
 8020ba0:	f7ee fcc7 	bl	800f532 <USBH_LL_PortDisabled>
}
 8020ba4:	bf00      	nop
 8020ba6:	3708      	adds	r7, #8
 8020ba8:	46bd      	mov	sp, r7
 8020baa:	bd80      	pop	{r7, pc}

08020bac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8020bac:	b580      	push	{r7, lr}
 8020bae:	b082      	sub	sp, #8
 8020bb0:	af00      	add	r7, sp, #0
 8020bb2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8020bb4:	687b      	ldr	r3, [r7, #4]
 8020bb6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8020bba:	2b01      	cmp	r3, #1
 8020bbc:	d12a      	bne.n	8020c14 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8020bbe:	4a18      	ldr	r2, [pc, #96]	; (8020c20 <USBH_LL_Init+0x74>)
 8020bc0:	687b      	ldr	r3, [r7, #4]
 8020bc2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8020bc6:	687b      	ldr	r3, [r7, #4]
 8020bc8:	4a15      	ldr	r2, [pc, #84]	; (8020c20 <USBH_LL_Init+0x74>)
 8020bca:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8020bce:	4b14      	ldr	r3, [pc, #80]	; (8020c20 <USBH_LL_Init+0x74>)
 8020bd0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8020bd4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8020bd6:	4b12      	ldr	r3, [pc, #72]	; (8020c20 <USBH_LL_Init+0x74>)
 8020bd8:	2208      	movs	r2, #8
 8020bda:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8020bdc:	4b10      	ldr	r3, [pc, #64]	; (8020c20 <USBH_LL_Init+0x74>)
 8020bde:	2201      	movs	r2, #1
 8020be0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8020be2:	4b0f      	ldr	r3, [pc, #60]	; (8020c20 <USBH_LL_Init+0x74>)
 8020be4:	2200      	movs	r2, #0
 8020be6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8020be8:	4b0d      	ldr	r3, [pc, #52]	; (8020c20 <USBH_LL_Init+0x74>)
 8020bea:	2202      	movs	r2, #2
 8020bec:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8020bee:	4b0c      	ldr	r3, [pc, #48]	; (8020c20 <USBH_LL_Init+0x74>)
 8020bf0:	2200      	movs	r2, #0
 8020bf2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8020bf4:	480a      	ldr	r0, [pc, #40]	; (8020c20 <USBH_LL_Init+0x74>)
 8020bf6:	f7e5 fc56 	bl	80064a6 <HAL_HCD_Init>
 8020bfa:	4603      	mov	r3, r0
 8020bfc:	2b00      	cmp	r3, #0
 8020bfe:	d001      	beq.n	8020c04 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8020c00:	f7e0 fee0 	bl	80019c4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8020c04:	4806      	ldr	r0, [pc, #24]	; (8020c20 <USBH_LL_Init+0x74>)
 8020c06:	f7e6 f833 	bl	8006c70 <HAL_HCD_GetCurrentFrame>
 8020c0a:	4603      	mov	r3, r0
 8020c0c:	4619      	mov	r1, r3
 8020c0e:	6878      	ldr	r0, [r7, #4]
 8020c10:	f7ee fc3c 	bl	800f48c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8020c14:	2300      	movs	r3, #0
}
 8020c16:	4618      	mov	r0, r3
 8020c18:	3708      	adds	r7, #8
 8020c1a:	46bd      	mov	sp, r7
 8020c1c:	bd80      	pop	{r7, pc}
 8020c1e:	bf00      	nop
 8020c20:	20010788 	.word	0x20010788

08020c24 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8020c24:	b580      	push	{r7, lr}
 8020c26:	b084      	sub	sp, #16
 8020c28:	af00      	add	r7, sp, #0
 8020c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020c2c:	2300      	movs	r3, #0
 8020c2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020c30:	2300      	movs	r3, #0
 8020c32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8020c34:	687b      	ldr	r3, [r7, #4]
 8020c36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020c3a:	4618      	mov	r0, r3
 8020c3c:	f7e5 ffa2 	bl	8006b84 <HAL_HCD_Start>
 8020c40:	4603      	mov	r3, r0
 8020c42:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8020c44:	7bfb      	ldrb	r3, [r7, #15]
 8020c46:	4618      	mov	r0, r3
 8020c48:	f000 f95a 	bl	8020f00 <USBH_Get_USB_Status>
 8020c4c:	4603      	mov	r3, r0
 8020c4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8020c52:	4618      	mov	r0, r3
 8020c54:	3710      	adds	r7, #16
 8020c56:	46bd      	mov	sp, r7
 8020c58:	bd80      	pop	{r7, pc}

08020c5a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8020c5a:	b580      	push	{r7, lr}
 8020c5c:	b084      	sub	sp, #16
 8020c5e:	af00      	add	r7, sp, #0
 8020c60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020c62:	2300      	movs	r3, #0
 8020c64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020c66:	2300      	movs	r3, #0
 8020c68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8020c6a:	687b      	ldr	r3, [r7, #4]
 8020c6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020c70:	4618      	mov	r0, r3
 8020c72:	f7e5 ffaa 	bl	8006bca <HAL_HCD_Stop>
 8020c76:	4603      	mov	r3, r0
 8020c78:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8020c7a:	7bfb      	ldrb	r3, [r7, #15]
 8020c7c:	4618      	mov	r0, r3
 8020c7e:	f000 f93f 	bl	8020f00 <USBH_Get_USB_Status>
 8020c82:	4603      	mov	r3, r0
 8020c84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020c86:	7bbb      	ldrb	r3, [r7, #14]
}
 8020c88:	4618      	mov	r0, r3
 8020c8a:	3710      	adds	r7, #16
 8020c8c:	46bd      	mov	sp, r7
 8020c8e:	bd80      	pop	{r7, pc}

08020c90 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8020c90:	b580      	push	{r7, lr}
 8020c92:	b084      	sub	sp, #16
 8020c94:	af00      	add	r7, sp, #0
 8020c96:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8020c98:	2301      	movs	r3, #1
 8020c9a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020ca2:	4618      	mov	r0, r3
 8020ca4:	f7e5 fff2 	bl	8006c8c <HAL_HCD_GetCurrentSpeed>
 8020ca8:	4603      	mov	r3, r0
 8020caa:	2b01      	cmp	r3, #1
 8020cac:	d007      	beq.n	8020cbe <USBH_LL_GetSpeed+0x2e>
 8020cae:	2b01      	cmp	r3, #1
 8020cb0:	d302      	bcc.n	8020cb8 <USBH_LL_GetSpeed+0x28>
 8020cb2:	2b02      	cmp	r3, #2
 8020cb4:	d006      	beq.n	8020cc4 <USBH_LL_GetSpeed+0x34>
 8020cb6:	e008      	b.n	8020cca <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8020cb8:	2300      	movs	r3, #0
 8020cba:	73fb      	strb	r3, [r7, #15]
    break;
 8020cbc:	e008      	b.n	8020cd0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8020cbe:	2301      	movs	r3, #1
 8020cc0:	73fb      	strb	r3, [r7, #15]
    break;
 8020cc2:	e005      	b.n	8020cd0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8020cc4:	2302      	movs	r3, #2
 8020cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8020cc8:	e002      	b.n	8020cd0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8020cca:	2301      	movs	r3, #1
 8020ccc:	73fb      	strb	r3, [r7, #15]
    break;
 8020cce:	bf00      	nop
  }
  return  speed;
 8020cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8020cd2:	4618      	mov	r0, r3
 8020cd4:	3710      	adds	r7, #16
 8020cd6:	46bd      	mov	sp, r7
 8020cd8:	bd80      	pop	{r7, pc}

08020cda <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8020cda:	b580      	push	{r7, lr}
 8020cdc:	b084      	sub	sp, #16
 8020cde:	af00      	add	r7, sp, #0
 8020ce0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020ce2:	2300      	movs	r3, #0
 8020ce4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020ce6:	2300      	movs	r3, #0
 8020ce8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8020cea:	687b      	ldr	r3, [r7, #4]
 8020cec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020cf0:	4618      	mov	r0, r3
 8020cf2:	f7e5 ff87 	bl	8006c04 <HAL_HCD_ResetPort>
 8020cf6:	4603      	mov	r3, r0
 8020cf8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8020cfa:	7bfb      	ldrb	r3, [r7, #15]
 8020cfc:	4618      	mov	r0, r3
 8020cfe:	f000 f8ff 	bl	8020f00 <USBH_Get_USB_Status>
 8020d02:	4603      	mov	r3, r0
 8020d04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020d06:	7bbb      	ldrb	r3, [r7, #14]
}
 8020d08:	4618      	mov	r0, r3
 8020d0a:	3710      	adds	r7, #16
 8020d0c:	46bd      	mov	sp, r7
 8020d0e:	bd80      	pop	{r7, pc}

08020d10 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8020d10:	b580      	push	{r7, lr}
 8020d12:	b082      	sub	sp, #8
 8020d14:	af00      	add	r7, sp, #0
 8020d16:	6078      	str	r0, [r7, #4]
 8020d18:	460b      	mov	r3, r1
 8020d1a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020d22:	78fa      	ldrb	r2, [r7, #3]
 8020d24:	4611      	mov	r1, r2
 8020d26:	4618      	mov	r0, r3
 8020d28:	f7e5 ff8e 	bl	8006c48 <HAL_HCD_HC_GetXferCount>
 8020d2c:	4603      	mov	r3, r0
}
 8020d2e:	4618      	mov	r0, r3
 8020d30:	3708      	adds	r7, #8
 8020d32:	46bd      	mov	sp, r7
 8020d34:	bd80      	pop	{r7, pc}

08020d36 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8020d36:	b590      	push	{r4, r7, lr}
 8020d38:	b089      	sub	sp, #36	; 0x24
 8020d3a:	af04      	add	r7, sp, #16
 8020d3c:	6078      	str	r0, [r7, #4]
 8020d3e:	4608      	mov	r0, r1
 8020d40:	4611      	mov	r1, r2
 8020d42:	461a      	mov	r2, r3
 8020d44:	4603      	mov	r3, r0
 8020d46:	70fb      	strb	r3, [r7, #3]
 8020d48:	460b      	mov	r3, r1
 8020d4a:	70bb      	strb	r3, [r7, #2]
 8020d4c:	4613      	mov	r3, r2
 8020d4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020d50:	2300      	movs	r3, #0
 8020d52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020d54:	2300      	movs	r3, #0
 8020d56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8020d58:	687b      	ldr	r3, [r7, #4]
 8020d5a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8020d5e:	787c      	ldrb	r4, [r7, #1]
 8020d60:	78ba      	ldrb	r2, [r7, #2]
 8020d62:	78f9      	ldrb	r1, [r7, #3]
 8020d64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8020d66:	9302      	str	r3, [sp, #8]
 8020d68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8020d6c:	9301      	str	r3, [sp, #4]
 8020d6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8020d72:	9300      	str	r3, [sp, #0]
 8020d74:	4623      	mov	r3, r4
 8020d76:	f7e5 fbf8 	bl	800656a <HAL_HCD_HC_Init>
 8020d7a:	4603      	mov	r3, r0
 8020d7c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8020d7e:	7bfb      	ldrb	r3, [r7, #15]
 8020d80:	4618      	mov	r0, r3
 8020d82:	f000 f8bd 	bl	8020f00 <USBH_Get_USB_Status>
 8020d86:	4603      	mov	r3, r0
 8020d88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020d8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8020d8c:	4618      	mov	r0, r3
 8020d8e:	3714      	adds	r7, #20
 8020d90:	46bd      	mov	sp, r7
 8020d92:	bd90      	pop	{r4, r7, pc}

08020d94 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8020d94:	b580      	push	{r7, lr}
 8020d96:	b084      	sub	sp, #16
 8020d98:	af00      	add	r7, sp, #0
 8020d9a:	6078      	str	r0, [r7, #4]
 8020d9c:	460b      	mov	r3, r1
 8020d9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020da0:	2300      	movs	r3, #0
 8020da2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020da4:	2300      	movs	r3, #0
 8020da6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8020da8:	687b      	ldr	r3, [r7, #4]
 8020daa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020dae:	78fa      	ldrb	r2, [r7, #3]
 8020db0:	4611      	mov	r1, r2
 8020db2:	4618      	mov	r0, r3
 8020db4:	f7e5 fc68 	bl	8006688 <HAL_HCD_HC_Halt>
 8020db8:	4603      	mov	r3, r0
 8020dba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8020dbc:	7bfb      	ldrb	r3, [r7, #15]
 8020dbe:	4618      	mov	r0, r3
 8020dc0:	f000 f89e 	bl	8020f00 <USBH_Get_USB_Status>
 8020dc4:	4603      	mov	r3, r0
 8020dc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020dc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8020dca:	4618      	mov	r0, r3
 8020dcc:	3710      	adds	r7, #16
 8020dce:	46bd      	mov	sp, r7
 8020dd0:	bd80      	pop	{r7, pc}

08020dd2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8020dd2:	b590      	push	{r4, r7, lr}
 8020dd4:	b089      	sub	sp, #36	; 0x24
 8020dd6:	af04      	add	r7, sp, #16
 8020dd8:	6078      	str	r0, [r7, #4]
 8020dda:	4608      	mov	r0, r1
 8020ddc:	4611      	mov	r1, r2
 8020dde:	461a      	mov	r2, r3
 8020de0:	4603      	mov	r3, r0
 8020de2:	70fb      	strb	r3, [r7, #3]
 8020de4:	460b      	mov	r3, r1
 8020de6:	70bb      	strb	r3, [r7, #2]
 8020de8:	4613      	mov	r3, r2
 8020dea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020dec:	2300      	movs	r3, #0
 8020dee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020df0:	2300      	movs	r3, #0
 8020df2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8020df4:	687b      	ldr	r3, [r7, #4]
 8020df6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8020dfa:	787c      	ldrb	r4, [r7, #1]
 8020dfc:	78ba      	ldrb	r2, [r7, #2]
 8020dfe:	78f9      	ldrb	r1, [r7, #3]
 8020e00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8020e04:	9303      	str	r3, [sp, #12]
 8020e06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8020e08:	9302      	str	r3, [sp, #8]
 8020e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e0c:	9301      	str	r3, [sp, #4]
 8020e0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8020e12:	9300      	str	r3, [sp, #0]
 8020e14:	4623      	mov	r3, r4
 8020e16:	f7e5 fc5b 	bl	80066d0 <HAL_HCD_HC_SubmitRequest>
 8020e1a:	4603      	mov	r3, r0
 8020e1c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8020e1e:	7bfb      	ldrb	r3, [r7, #15]
 8020e20:	4618      	mov	r0, r3
 8020e22:	f000 f86d 	bl	8020f00 <USBH_Get_USB_Status>
 8020e26:	4603      	mov	r3, r0
 8020e28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020e2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8020e2c:	4618      	mov	r0, r3
 8020e2e:	3714      	adds	r7, #20
 8020e30:	46bd      	mov	sp, r7
 8020e32:	bd90      	pop	{r4, r7, pc}

08020e34 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8020e34:	b580      	push	{r7, lr}
 8020e36:	b082      	sub	sp, #8
 8020e38:	af00      	add	r7, sp, #0
 8020e3a:	6078      	str	r0, [r7, #4]
 8020e3c:	460b      	mov	r3, r1
 8020e3e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8020e40:	687b      	ldr	r3, [r7, #4]
 8020e42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020e46:	78fa      	ldrb	r2, [r7, #3]
 8020e48:	4611      	mov	r1, r2
 8020e4a:	4618      	mov	r0, r3
 8020e4c:	f7e5 fee8 	bl	8006c20 <HAL_HCD_HC_GetURBState>
 8020e50:	4603      	mov	r3, r0
}
 8020e52:	4618      	mov	r0, r3
 8020e54:	3708      	adds	r7, #8
 8020e56:	46bd      	mov	sp, r7
 8020e58:	bd80      	pop	{r7, pc}

08020e5a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8020e5a:	b580      	push	{r7, lr}
 8020e5c:	b082      	sub	sp, #8
 8020e5e:	af00      	add	r7, sp, #0
 8020e60:	6078      	str	r0, [r7, #4]
 8020e62:	460b      	mov	r3, r1
 8020e64:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8020e6c:	2b01      	cmp	r3, #1
 8020e6e:	d103      	bne.n	8020e78 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8020e70:	78fb      	ldrb	r3, [r7, #3]
 8020e72:	4618      	mov	r0, r3
 8020e74:	f000 f870 	bl	8020f58 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8020e78:	20c8      	movs	r0, #200	; 0xc8
 8020e7a:	f7e2 fd83 	bl	8003984 <HAL_Delay>
  return USBH_OK;
 8020e7e:	2300      	movs	r3, #0
}
 8020e80:	4618      	mov	r0, r3
 8020e82:	3708      	adds	r7, #8
 8020e84:	46bd      	mov	sp, r7
 8020e86:	bd80      	pop	{r7, pc}

08020e88 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8020e88:	b480      	push	{r7}
 8020e8a:	b085      	sub	sp, #20
 8020e8c:	af00      	add	r7, sp, #0
 8020e8e:	6078      	str	r0, [r7, #4]
 8020e90:	460b      	mov	r3, r1
 8020e92:	70fb      	strb	r3, [r7, #3]
 8020e94:	4613      	mov	r3, r2
 8020e96:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8020e98:	687b      	ldr	r3, [r7, #4]
 8020e9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020e9e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8020ea0:	78fb      	ldrb	r3, [r7, #3]
 8020ea2:	68fa      	ldr	r2, [r7, #12]
 8020ea4:	212c      	movs	r1, #44	; 0x2c
 8020ea6:	fb01 f303 	mul.w	r3, r1, r3
 8020eaa:	4413      	add	r3, r2
 8020eac:	333b      	adds	r3, #59	; 0x3b
 8020eae:	781b      	ldrb	r3, [r3, #0]
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	d009      	beq.n	8020ec8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8020eb4:	78fb      	ldrb	r3, [r7, #3]
 8020eb6:	68fa      	ldr	r2, [r7, #12]
 8020eb8:	212c      	movs	r1, #44	; 0x2c
 8020eba:	fb01 f303 	mul.w	r3, r1, r3
 8020ebe:	4413      	add	r3, r2
 8020ec0:	3354      	adds	r3, #84	; 0x54
 8020ec2:	78ba      	ldrb	r2, [r7, #2]
 8020ec4:	701a      	strb	r2, [r3, #0]
 8020ec6:	e008      	b.n	8020eda <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8020ec8:	78fb      	ldrb	r3, [r7, #3]
 8020eca:	68fa      	ldr	r2, [r7, #12]
 8020ecc:	212c      	movs	r1, #44	; 0x2c
 8020ece:	fb01 f303 	mul.w	r3, r1, r3
 8020ed2:	4413      	add	r3, r2
 8020ed4:	3355      	adds	r3, #85	; 0x55
 8020ed6:	78ba      	ldrb	r2, [r7, #2]
 8020ed8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8020eda:	2300      	movs	r3, #0
}
 8020edc:	4618      	mov	r0, r3
 8020ede:	3714      	adds	r7, #20
 8020ee0:	46bd      	mov	sp, r7
 8020ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ee6:	4770      	bx	lr

08020ee8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8020ee8:	b580      	push	{r7, lr}
 8020eea:	b082      	sub	sp, #8
 8020eec:	af00      	add	r7, sp, #0
 8020eee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8020ef0:	6878      	ldr	r0, [r7, #4]
 8020ef2:	f7e2 fd47 	bl	8003984 <HAL_Delay>
}
 8020ef6:	bf00      	nop
 8020ef8:	3708      	adds	r7, #8
 8020efa:	46bd      	mov	sp, r7
 8020efc:	bd80      	pop	{r7, pc}
	...

08020f00 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8020f00:	b480      	push	{r7}
 8020f02:	b085      	sub	sp, #20
 8020f04:	af00      	add	r7, sp, #0
 8020f06:	4603      	mov	r3, r0
 8020f08:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020f0a:	2300      	movs	r3, #0
 8020f0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8020f0e:	79fb      	ldrb	r3, [r7, #7]
 8020f10:	2b03      	cmp	r3, #3
 8020f12:	d817      	bhi.n	8020f44 <USBH_Get_USB_Status+0x44>
 8020f14:	a201      	add	r2, pc, #4	; (adr r2, 8020f1c <USBH_Get_USB_Status+0x1c>)
 8020f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020f1a:	bf00      	nop
 8020f1c:	08020f2d 	.word	0x08020f2d
 8020f20:	08020f33 	.word	0x08020f33
 8020f24:	08020f39 	.word	0x08020f39
 8020f28:	08020f3f 	.word	0x08020f3f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8020f2c:	2300      	movs	r3, #0
 8020f2e:	73fb      	strb	r3, [r7, #15]
    break;
 8020f30:	e00b      	b.n	8020f4a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8020f32:	2302      	movs	r3, #2
 8020f34:	73fb      	strb	r3, [r7, #15]
    break;
 8020f36:	e008      	b.n	8020f4a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8020f38:	2301      	movs	r3, #1
 8020f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8020f3c:	e005      	b.n	8020f4a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8020f3e:	2302      	movs	r3, #2
 8020f40:	73fb      	strb	r3, [r7, #15]
    break;
 8020f42:	e002      	b.n	8020f4a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8020f44:	2302      	movs	r3, #2
 8020f46:	73fb      	strb	r3, [r7, #15]
    break;
 8020f48:	bf00      	nop
  }
  return usb_status;
 8020f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8020f4c:	4618      	mov	r0, r3
 8020f4e:	3714      	adds	r7, #20
 8020f50:	46bd      	mov	sp, r7
 8020f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f56:	4770      	bx	lr

08020f58 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8020f58:	b580      	push	{r7, lr}
 8020f5a:	b084      	sub	sp, #16
 8020f5c:	af00      	add	r7, sp, #0
 8020f5e:	4603      	mov	r3, r0
 8020f60:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8020f62:	79fb      	ldrb	r3, [r7, #7]
 8020f64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8020f66:	79fb      	ldrb	r3, [r7, #7]
 8020f68:	2b00      	cmp	r3, #0
 8020f6a:	d102      	bne.n	8020f72 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8020f6c:	2301      	movs	r3, #1
 8020f6e:	73fb      	strb	r3, [r7, #15]
 8020f70:	e001      	b.n	8020f76 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8020f72:	2300      	movs	r3, #0
 8020f74:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8020f76:	7bfb      	ldrb	r3, [r7, #15]
 8020f78:	461a      	mov	r2, r3
 8020f7a:	2120      	movs	r1, #32
 8020f7c:	4803      	ldr	r0, [pc, #12]	; (8020f8c <MX_DriverVbusFS+0x34>)
 8020f7e:	f7e5 fa79 	bl	8006474 <HAL_GPIO_WritePin>
}
 8020f82:	bf00      	nop
 8020f84:	3710      	adds	r7, #16
 8020f86:	46bd      	mov	sp, r7
 8020f88:	bd80      	pop	{r7, pc}
 8020f8a:	bf00      	nop
 8020f8c:	40020c00 	.word	0x40020c00

08020f90 <LCD_LOG_Init>:
  * @param  None
  * @retval None
  */

void LCD_LOG_Init ( void)
{
 8020f90:	b580      	push	{r7, lr}
 8020f92:	af00      	add	r7, sp, #0
  /* Deinit LCD cache */
  LCD_LOG_DeInit();
 8020f94:	f000 f806 	bl	8020fa4 <LCD_LOG_DeInit>
  
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 8020f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020f9c:	f7e1 ff0a 	bl	8002db4 <BSP_LCD_Clear>
}
 8020fa0:	bf00      	nop
 8020fa2:	bd80      	pop	{r7, pc}

08020fa4 <LCD_LOG_DeInit>:
  * @brief DeInitializes the LCD Log module. 
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
 8020fa4:	b480      	push	{r7}
 8020fa6:	af00      	add	r7, sp, #0
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8020fa8:	4b12      	ldr	r3, [pc, #72]	; (8020ff4 <LCD_LOG_DeInit+0x50>)
 8020faa:	4a13      	ldr	r2, [pc, #76]	; (8020ff8 <LCD_LOG_DeInit+0x54>)
 8020fac:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 8020fae:	4b13      	ldr	r3, [pc, #76]	; (8020ffc <LCD_LOG_DeInit+0x58>)
 8020fb0:	2200      	movs	r2, #0
 8020fb2:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_top = 0;
 8020fb4:	4b12      	ldr	r3, [pc, #72]	; (8021000 <LCD_LOG_DeInit+0x5c>)
 8020fb6:	2200      	movs	r2, #0
 8020fb8:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 8020fba:	4b12      	ldr	r3, [pc, #72]	; (8021004 <LCD_LOG_DeInit+0x60>)
 8020fbc:	2200      	movs	r2, #0
 8020fbe:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_top_bak = 0;
 8020fc0:	4b11      	ldr	r3, [pc, #68]	; (8021008 <LCD_LOG_DeInit+0x64>)
 8020fc2:	2200      	movs	r2, #0
 8020fc4:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 8020fc6:	4b11      	ldr	r3, [pc, #68]	; (802100c <LCD_LOG_DeInit+0x68>)
 8020fc8:	2200      	movs	r2, #0
 8020fca:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 8020fcc:	4b10      	ldr	r3, [pc, #64]	; (8021010 <LCD_LOG_DeInit+0x6c>)
 8020fce:	2201      	movs	r2, #1
 8020fd0:	701a      	strb	r2, [r3, #0]
  LCD_ScrollActive = DISABLE;
 8020fd2:	4b10      	ldr	r3, [pc, #64]	; (8021014 <LCD_LOG_DeInit+0x70>)
 8020fd4:	2200      	movs	r2, #0
 8020fd6:	701a      	strb	r2, [r3, #0]
  LCD_Lock = DISABLE;
 8020fd8:	4b0f      	ldr	r3, [pc, #60]	; (8021018 <LCD_LOG_DeInit+0x74>)
 8020fda:	2200      	movs	r2, #0
 8020fdc:	701a      	strb	r2, [r3, #0]
  LCD_Scrolled = DISABLE;
 8020fde:	4b0f      	ldr	r3, [pc, #60]	; (802101c <LCD_LOG_DeInit+0x78>)
 8020fe0:	2200      	movs	r2, #0
 8020fe2:	701a      	strb	r2, [r3, #0]
  LCD_ScrollBackStep = 0;
 8020fe4:	4b0e      	ldr	r3, [pc, #56]	; (8021020 <LCD_LOG_DeInit+0x7c>)
 8020fe6:	2200      	movs	r2, #0
 8020fe8:	801a      	strh	r2, [r3, #0]
}
 8020fea:	bf00      	nop
 8020fec:	46bd      	mov	sp, r7
 8020fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ff2:	4770      	bx	lr
 8020ff4:	200146f0 	.word	0x200146f0
 8020ff8:	ff000080 	.word	0xff000080
 8020ffc:	20010a92 	.word	0x20010a92
 8021000:	20010a98 	.word	0x20010a98
 8021004:	20010a90 	.word	0x20010a90
 8021008:	20010a8e 	.word	0x20010a8e
 802100c:	20010a8c 	.word	0x20010a8c
 8021010:	20010a94 	.word	0x20010a94
 8021014:	20010a9a 	.word	0x20010a9a
 8021018:	20010a95 	.word	0x20010a95
 802101c:	20010a96 	.word	0x20010a96
 8021020:	200146f4 	.word	0x200146f4

08021024 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 8021024:	b580      	push	{r7, lr}
 8021026:	b082      	sub	sp, #8
 8021028:	af00      	add	r7, sp, #0
 802102a:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 802102c:	4817      	ldr	r0, [pc, #92]	; (802108c <LCD_LOG_SetHeader+0x68>)
 802102e:	f7e1 fe91 	bl	8002d54 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8021032:	4817      	ldr	r0, [pc, #92]	; (8021090 <LCD_LOG_SetHeader+0x6c>)
 8021034:	f7e1 fe5c 	bl	8002cf0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 8021038:	f7e1 fdc2 	bl	8002bc0 <BSP_LCD_GetXSize>
 802103c:	4603      	mov	r3, r0
 802103e:	b29a      	uxth	r2, r3
 8021040:	4b12      	ldr	r3, [pc, #72]	; (802108c <LCD_LOG_SetHeader+0x68>)
 8021042:	88db      	ldrh	r3, [r3, #6]
 8021044:	4619      	mov	r1, r3
 8021046:	0049      	lsls	r1, r1, #1
 8021048:	440b      	add	r3, r1
 802104a:	b29b      	uxth	r3, r3
 802104c:	2100      	movs	r1, #0
 802104e:	2000      	movs	r0, #0
 8021050:	f7e2 f840 	bl	80030d4 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 8021054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021058:	f7e1 fe4a 	bl	8002cf0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 802105c:	480c      	ldr	r0, [pc, #48]	; (8021090 <LCD_LOG_SetHeader+0x6c>)
 802105e:	f7e1 fe5f 	bl	8002d20 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 8021062:	4b0a      	ldr	r3, [pc, #40]	; (802108c <LCD_LOG_SetHeader+0x68>)
 8021064:	88d9      	ldrh	r1, [r3, #6]
 8021066:	2301      	movs	r3, #1
 8021068:	687a      	ldr	r2, [r7, #4]
 802106a:	2000      	movs	r0, #0
 802106c:	f7e1 ff0e 	bl	8002e8c <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8021070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021074:	f7e1 fe54 	bl	8002d20 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8021078:	4806      	ldr	r0, [pc, #24]	; (8021094 <LCD_LOG_SetHeader+0x70>)
 802107a:	f7e1 fe39 	bl	8002cf0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 802107e:	4806      	ldr	r0, [pc, #24]	; (8021098 <LCD_LOG_SetHeader+0x74>)
 8021080:	f7e1 fe68 	bl	8002d54 <BSP_LCD_SetFont>
}
 8021084:	bf00      	nop
 8021086:	3708      	adds	r7, #8
 8021088:	46bd      	mov	sp, r7
 802108a:	bd80      	pop	{r7, pc}
 802108c:	2000004c 	.word	0x2000004c
 8021090:	ff0000ff 	.word	0xff0000ff
 8021094:	ff000080 	.word	0xff000080
 8021098:	20000044 	.word	0x20000044

0802109c <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 802109c:	b590      	push	{r4, r7, lr}
 802109e:	b083      	sub	sp, #12
 80210a0:	af00      	add	r7, sp, #0
 80210a2:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 80210a4:	481e      	ldr	r0, [pc, #120]	; (8021120 <LCD_LOG_SetFooter+0x84>)
 80210a6:	f7e1 fe55 	bl	8002d54 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80210aa:	481e      	ldr	r0, [pc, #120]	; (8021124 <LCD_LOG_SetFooter+0x88>)
 80210ac:	f7e1 fe20 	bl	8002cf0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 80210b0:	f7e1 fd9a 	bl	8002be8 <BSP_LCD_GetYSize>
 80210b4:	4603      	mov	r3, r0
 80210b6:	b29a      	uxth	r2, r3
 80210b8:	4b19      	ldr	r3, [pc, #100]	; (8021120 <LCD_LOG_SetFooter+0x84>)
 80210ba:	88db      	ldrh	r3, [r3, #6]
 80210bc:	1ad3      	subs	r3, r2, r3
 80210be:	b29b      	uxth	r3, r3
 80210c0:	3b04      	subs	r3, #4
 80210c2:	b29c      	uxth	r4, r3
 80210c4:	f7e1 fd7c 	bl	8002bc0 <BSP_LCD_GetXSize>
 80210c8:	4603      	mov	r3, r0
 80210ca:	b29a      	uxth	r2, r3
 80210cc:	4b14      	ldr	r3, [pc, #80]	; (8021120 <LCD_LOG_SetFooter+0x84>)
 80210ce:	88db      	ldrh	r3, [r3, #6]
 80210d0:	3304      	adds	r3, #4
 80210d2:	b29b      	uxth	r3, r3
 80210d4:	4621      	mov	r1, r4
 80210d6:	2000      	movs	r0, #0
 80210d8:	f7e1 fffc 	bl	80030d4 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 80210dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80210e0:	f7e1 fe06 	bl	8002cf0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80210e4:	480f      	ldr	r0, [pc, #60]	; (8021124 <LCD_LOG_SetFooter+0x88>)
 80210e6:	f7e1 fe1b 	bl	8002d20 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 80210ea:	f7e1 fd7d 	bl	8002be8 <BSP_LCD_GetYSize>
 80210ee:	4603      	mov	r3, r0
 80210f0:	b29a      	uxth	r2, r3
 80210f2:	4b0b      	ldr	r3, [pc, #44]	; (8021120 <LCD_LOG_SetFooter+0x84>)
 80210f4:	88db      	ldrh	r3, [r3, #6]
 80210f6:	1ad3      	subs	r3, r2, r3
 80210f8:	b299      	uxth	r1, r3
 80210fa:	2301      	movs	r3, #1
 80210fc:	687a      	ldr	r2, [r7, #4]
 80210fe:	2000      	movs	r0, #0
 8021100:	f7e1 fec4 	bl	8002e8c <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8021104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021108:	f7e1 fe0a 	bl	8002d20 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 802110c:	4806      	ldr	r0, [pc, #24]	; (8021128 <LCD_LOG_SetFooter+0x8c>)
 802110e:	f7e1 fdef 	bl	8002cf0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8021112:	4803      	ldr	r0, [pc, #12]	; (8021120 <LCD_LOG_SetFooter+0x84>)
 8021114:	f7e1 fe1e 	bl	8002d54 <BSP_LCD_SetFont>
}
 8021118:	bf00      	nop
 802111a:	370c      	adds	r7, #12
 802111c:	46bd      	mov	sp, r7
 802111e:	bd90      	pop	{r4, r7, pc}
 8021120:	20000044 	.word	0x20000044
 8021124:	ff0000ff 	.word	0xff0000ff
 8021128:	ff000080 	.word	0xff000080

0802112c <__io_putchar>:
  * @param  c: character to be displayed
  * @param  f: output file pointer
  * @retval None
 */
LCD_LOG_PUTCHAR
{
 802112c:	b590      	push	{r4, r7, lr}
 802112e:	b085      	sub	sp, #20
 8021130:	af00      	add	r7, sp, #0
 8021132:	6078      	str	r0, [r7, #4]
  
  sFONT *cFont = BSP_LCD_GetFont();
 8021134:	f7e1 fe28 	bl	8002d88 <BSP_LCD_GetFont>
 8021138:	60b8      	str	r0, [r7, #8]
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 802113a:	4b60      	ldr	r3, [pc, #384]	; (80212bc <__io_putchar+0x190>)
 802113c:	781b      	ldrb	r3, [r3, #0]
 802113e:	2b00      	cmp	r3, #0
 8021140:	f040 80b6 	bne.w	80212b0 <__io_putchar+0x184>
  {
    if(LCD_ScrollActive == ENABLE)
 8021144:	4b5e      	ldr	r3, [pc, #376]	; (80212c0 <__io_putchar+0x194>)
 8021146:	781b      	ldrb	r3, [r3, #0]
 8021148:	2b01      	cmp	r3, #1
 802114a:	d110      	bne.n	802116e <__io_putchar+0x42>
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 802114c:	4b5d      	ldr	r3, [pc, #372]	; (80212c4 <__io_putchar+0x198>)
 802114e:	881a      	ldrh	r2, [r3, #0]
 8021150:	4b5d      	ldr	r3, [pc, #372]	; (80212c8 <__io_putchar+0x19c>)
 8021152:	801a      	strh	r2, [r3, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8021154:	4b5d      	ldr	r3, [pc, #372]	; (80212cc <__io_putchar+0x1a0>)
 8021156:	881a      	ldrh	r2, [r3, #0]
 8021158:	4b5d      	ldr	r3, [pc, #372]	; (80212d0 <__io_putchar+0x1a4>)
 802115a:	801a      	strh	r2, [r3, #0]
      LCD_ScrollActive = DISABLE;
 802115c:	4b58      	ldr	r3, [pc, #352]	; (80212c0 <__io_putchar+0x194>)
 802115e:	2200      	movs	r2, #0
 8021160:	701a      	strb	r2, [r3, #0]
      LCD_Scrolled = DISABLE;
 8021162:	4b5c      	ldr	r3, [pc, #368]	; (80212d4 <__io_putchar+0x1a8>)
 8021164:	2200      	movs	r2, #0
 8021166:	701a      	strb	r2, [r3, #0]
      LCD_ScrollBackStep = 0;
 8021168:	4b5b      	ldr	r3, [pc, #364]	; (80212d8 <__io_putchar+0x1ac>)
 802116a:	2200      	movs	r2, #0
 802116c:	801a      	strh	r2, [r3, #0]
      
    }
    
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 802116e:	4b5b      	ldr	r3, [pc, #364]	; (80212dc <__io_putchar+0x1b0>)
 8021170:	881b      	ldrh	r3, [r3, #0]
 8021172:	461c      	mov	r4, r3
 8021174:	f7e1 fd24 	bl	8002bc0 <BSP_LCD_GetXSize>
 8021178:	4602      	mov	r2, r0
 802117a:	68bb      	ldr	r3, [r7, #8]
 802117c:	889b      	ldrh	r3, [r3, #4]
 802117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8021182:	429c      	cmp	r4, r3
 8021184:	d218      	bcs.n	80211b8 <__io_putchar+0x8c>
 8021186:	687b      	ldr	r3, [r7, #4]
 8021188:	2b0a      	cmp	r3, #10
 802118a:	d015      	beq.n	80211b8 <__io_putchar+0x8c>
    {
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 802118c:	4b4e      	ldr	r3, [pc, #312]	; (80212c8 <__io_putchar+0x19c>)
 802118e:	881b      	ldrh	r3, [r3, #0]
 8021190:	4619      	mov	r1, r3
 8021192:	4b52      	ldr	r3, [pc, #328]	; (80212dc <__io_putchar+0x1b0>)
 8021194:	881b      	ldrh	r3, [r3, #0]
 8021196:	1c5a      	adds	r2, r3, #1
 8021198:	b290      	uxth	r0, r2
 802119a:	4a50      	ldr	r2, [pc, #320]	; (80212dc <__io_putchar+0x1b0>)
 802119c:	8010      	strh	r0, [r2, #0]
 802119e:	461c      	mov	r4, r3
 80211a0:	687b      	ldr	r3, [r7, #4]
 80211a2:	b2d8      	uxtb	r0, r3
 80211a4:	4a4e      	ldr	r2, [pc, #312]	; (80212e0 <__io_putchar+0x1b4>)
 80211a6:	460b      	mov	r3, r1
 80211a8:	015b      	lsls	r3, r3, #5
 80211aa:	440b      	add	r3, r1
 80211ac:	009b      	lsls	r3, r3, #2
 80211ae:	4413      	add	r3, r2
 80211b0:	4423      	add	r3, r4
 80211b2:	4602      	mov	r2, r0
 80211b4:	701a      	strb	r2, [r3, #0]
 80211b6:	e07b      	b.n	80212b0 <__io_putchar+0x184>
    }   
    else 
    {
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 80211b8:	4b45      	ldr	r3, [pc, #276]	; (80212d0 <__io_putchar+0x1a4>)
 80211ba:	881a      	ldrh	r2, [r3, #0]
 80211bc:	4b42      	ldr	r3, [pc, #264]	; (80212c8 <__io_putchar+0x19c>)
 80211be:	881b      	ldrh	r3, [r3, #0]
 80211c0:	429a      	cmp	r2, r3
 80211c2:	d314      	bcc.n	80211ee <__io_putchar+0xc2>
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 80211c4:	4b47      	ldr	r3, [pc, #284]	; (80212e4 <__io_putchar+0x1b8>)
 80211c6:	781b      	ldrb	r3, [r3, #0]
 80211c8:	2b00      	cmp	r3, #0
 80211ca:	d10d      	bne.n	80211e8 <__io_putchar+0xbc>
        {
          LCD_CacheBuffer_yptr_top++;
 80211cc:	4b40      	ldr	r3, [pc, #256]	; (80212d0 <__io_putchar+0x1a4>)
 80211ce:	881b      	ldrh	r3, [r3, #0]
 80211d0:	3301      	adds	r3, #1
 80211d2:	b29a      	uxth	r2, r3
 80211d4:	4b3e      	ldr	r3, [pc, #248]	; (80212d0 <__io_putchar+0x1a4>)
 80211d6:	801a      	strh	r2, [r3, #0]
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 80211d8:	4b3d      	ldr	r3, [pc, #244]	; (80212d0 <__io_putchar+0x1a4>)
 80211da:	881b      	ldrh	r3, [r3, #0]
 80211dc:	2b75      	cmp	r3, #117	; 0x75
 80211de:	d106      	bne.n	80211ee <__io_putchar+0xc2>
          {
            LCD_CacheBuffer_yptr_top = 0;  
 80211e0:	4b3b      	ldr	r3, [pc, #236]	; (80212d0 <__io_putchar+0x1a4>)
 80211e2:	2200      	movs	r2, #0
 80211e4:	801a      	strh	r2, [r3, #0]
 80211e6:	e002      	b.n	80211ee <__io_putchar+0xc2>
          }
        }
        else
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
 80211e8:	4b3e      	ldr	r3, [pc, #248]	; (80212e4 <__io_putchar+0x1b8>)
 80211ea:	2200      	movs	r2, #0
 80211ec:	701a      	strb	r2, [r3, #0]
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80211ee:	4b3b      	ldr	r3, [pc, #236]	; (80212dc <__io_putchar+0x1b0>)
 80211f0:	881b      	ldrh	r3, [r3, #0]
 80211f2:	60fb      	str	r3, [r7, #12]
 80211f4:	e015      	b.n	8021222 <__io_putchar+0xf6>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 80211f6:	4b34      	ldr	r3, [pc, #208]	; (80212c8 <__io_putchar+0x19c>)
 80211f8:	881b      	ldrh	r3, [r3, #0]
 80211fa:	4619      	mov	r1, r3
 80211fc:	4b37      	ldr	r3, [pc, #220]	; (80212dc <__io_putchar+0x1b0>)
 80211fe:	881b      	ldrh	r3, [r3, #0]
 8021200:	1c5a      	adds	r2, r3, #1
 8021202:	b290      	uxth	r0, r2
 8021204:	4a35      	ldr	r2, [pc, #212]	; (80212dc <__io_putchar+0x1b0>)
 8021206:	8010      	strh	r0, [r2, #0]
 8021208:	4618      	mov	r0, r3
 802120a:	4a35      	ldr	r2, [pc, #212]	; (80212e0 <__io_putchar+0x1b4>)
 802120c:	460b      	mov	r3, r1
 802120e:	015b      	lsls	r3, r3, #5
 8021210:	440b      	add	r3, r1
 8021212:	009b      	lsls	r3, r3, #2
 8021214:	4413      	add	r3, r2
 8021216:	4403      	add	r3, r0
 8021218:	2220      	movs	r2, #32
 802121a:	701a      	strb	r2, [r3, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 802121c:	68fb      	ldr	r3, [r7, #12]
 802121e:	3301      	adds	r3, #1
 8021220:	60fb      	str	r3, [r7, #12]
 8021222:	f7e1 fccd 	bl	8002bc0 <BSP_LCD_GetXSize>
 8021226:	4602      	mov	r2, r0
 8021228:	68bb      	ldr	r3, [r7, #8]
 802122a:	889b      	ldrh	r3, [r3, #4]
 802122c:	fbb2 f3f3 	udiv	r3, r2, r3
 8021230:	68fa      	ldr	r2, [r7, #12]
 8021232:	429a      	cmp	r2, r3
 8021234:	d3df      	bcc.n	80211f6 <__io_putchar+0xca>
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8021236:	4b24      	ldr	r3, [pc, #144]	; (80212c8 <__io_putchar+0x19c>)
 8021238:	881b      	ldrh	r3, [r3, #0]
 802123a:	4618      	mov	r0, r3
 802123c:	4b2a      	ldr	r3, [pc, #168]	; (80212e8 <__io_putchar+0x1bc>)
 802123e:	681a      	ldr	r2, [r3, #0]
 8021240:	4927      	ldr	r1, [pc, #156]	; (80212e0 <__io_putchar+0x1b4>)
 8021242:	4603      	mov	r3, r0
 8021244:	015b      	lsls	r3, r3, #5
 8021246:	4403      	add	r3, r0
 8021248:	009b      	lsls	r3, r3, #2
 802124a:	440b      	add	r3, r1
 802124c:	3380      	adds	r3, #128	; 0x80
 802124e:	601a      	str	r2, [r3, #0]
      
      LCD_CacheBuffer_xptr = 0;
 8021250:	4b22      	ldr	r3, [pc, #136]	; (80212dc <__io_putchar+0x1b0>)
 8021252:	2200      	movs	r2, #0
 8021254:	801a      	strh	r2, [r3, #0]
      
      LCD_LOG_UpdateDisplay (); 
 8021256:	f000 f849 	bl	80212ec <LCD_LOG_UpdateDisplay>
      
      LCD_CacheBuffer_yptr_bottom ++; 
 802125a:	4b1b      	ldr	r3, [pc, #108]	; (80212c8 <__io_putchar+0x19c>)
 802125c:	881b      	ldrh	r3, [r3, #0]
 802125e:	3301      	adds	r3, #1
 8021260:	b29a      	uxth	r2, r3
 8021262:	4b19      	ldr	r3, [pc, #100]	; (80212c8 <__io_putchar+0x19c>)
 8021264:	801a      	strh	r2, [r3, #0]
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8021266:	4b18      	ldr	r3, [pc, #96]	; (80212c8 <__io_putchar+0x19c>)
 8021268:	881b      	ldrh	r3, [r3, #0]
 802126a:	2b75      	cmp	r3, #117	; 0x75
 802126c:	d108      	bne.n	8021280 <__io_putchar+0x154>
      {
        LCD_CacheBuffer_yptr_bottom = 0;
 802126e:	4b16      	ldr	r3, [pc, #88]	; (80212c8 <__io_putchar+0x19c>)
 8021270:	2200      	movs	r2, #0
 8021272:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 8021274:	4b16      	ldr	r3, [pc, #88]	; (80212d0 <__io_putchar+0x1a4>)
 8021276:	2201      	movs	r2, #1
 8021278:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 802127a:	4b1a      	ldr	r3, [pc, #104]	; (80212e4 <__io_putchar+0x1b8>)
 802127c:	2201      	movs	r2, #1
 802127e:	701a      	strb	r2, [r3, #0]
      }
      
      if( ch != '\n')
 8021280:	687b      	ldr	r3, [r7, #4]
 8021282:	2b0a      	cmp	r3, #10
 8021284:	d014      	beq.n	80212b0 <__io_putchar+0x184>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8021286:	4b10      	ldr	r3, [pc, #64]	; (80212c8 <__io_putchar+0x19c>)
 8021288:	881b      	ldrh	r3, [r3, #0]
 802128a:	4619      	mov	r1, r3
 802128c:	4b13      	ldr	r3, [pc, #76]	; (80212dc <__io_putchar+0x1b0>)
 802128e:	881b      	ldrh	r3, [r3, #0]
 8021290:	1c5a      	adds	r2, r3, #1
 8021292:	b290      	uxth	r0, r2
 8021294:	4a11      	ldr	r2, [pc, #68]	; (80212dc <__io_putchar+0x1b0>)
 8021296:	8010      	strh	r0, [r2, #0]
 8021298:	461c      	mov	r4, r3
 802129a:	687b      	ldr	r3, [r7, #4]
 802129c:	b2d8      	uxtb	r0, r3
 802129e:	4a10      	ldr	r2, [pc, #64]	; (80212e0 <__io_putchar+0x1b4>)
 80212a0:	460b      	mov	r3, r1
 80212a2:	015b      	lsls	r3, r3, #5
 80212a4:	440b      	add	r3, r1
 80212a6:	009b      	lsls	r3, r3, #2
 80212a8:	4413      	add	r3, r2
 80212aa:	4423      	add	r3, r4
 80212ac:	4602      	mov	r2, r0
 80212ae:	701a      	strb	r2, [r3, #0]
      }
      
    }
  }
  return ch;
 80212b0:	687b      	ldr	r3, [r7, #4]
}
 80212b2:	4618      	mov	r0, r3
 80212b4:	3714      	adds	r7, #20
 80212b6:	46bd      	mov	sp, r7
 80212b8:	bd90      	pop	{r4, r7, pc}
 80212ba:	bf00      	nop
 80212bc:	20010a95 	.word	0x20010a95
 80212c0:	20010a9a 	.word	0x20010a9a
 80212c4:	20010a8c 	.word	0x20010a8c
 80212c8:	20010a90 	.word	0x20010a90
 80212cc:	20010a8e 	.word	0x20010a8e
 80212d0:	20010a98 	.word	0x20010a98
 80212d4:	20010a96 	.word	0x20010a96
 80212d8:	200146f4 	.word	0x200146f4
 80212dc:	20010a92 	.word	0x20010a92
 80212e0:	20010a9c 	.word	0x20010a9c
 80212e4:	20010a94 	.word	0x20010a94
 80212e8:	200146f0 	.word	0x200146f0

080212ec <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 80212ec:	b580      	push	{r7, lr}
 80212ee:	b082      	sub	sp, #8
 80212f0:	af00      	add	r7, sp, #0
  uint8_t cnt = 0 ;
 80212f2:	2300      	movs	r3, #0
 80212f4:	71fb      	strb	r3, [r7, #7]
  uint16_t length = 0 ;
 80212f6:	2300      	movs	r3, #0
 80212f8:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = 0, index = 0;
 80212fa:	2300      	movs	r3, #0
 80212fc:	807b      	strh	r3, [r7, #2]
 80212fe:	2300      	movs	r3, #0
 8021300:	803b      	strh	r3, [r7, #0]
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8021302:	4b39      	ldr	r3, [pc, #228]	; (80213e8 <LCD_LOG_UpdateDisplay+0xfc>)
 8021304:	881b      	ldrh	r3, [r3, #0]
 8021306:	2b0f      	cmp	r3, #15
 8021308:	d826      	bhi.n	8021358 <LCD_LOG_UpdateDisplay+0x6c>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 802130a:	4b37      	ldr	r3, [pc, #220]	; (80213e8 <LCD_LOG_UpdateDisplay+0xfc>)
 802130c:	881a      	ldrh	r2, [r3, #0]
 802130e:	4b37      	ldr	r3, [pc, #220]	; (80213ec <LCD_LOG_UpdateDisplay+0x100>)
 8021310:	881b      	ldrh	r3, [r3, #0]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8021312:	429a      	cmp	r2, r3
 8021314:	d320      	bcc.n	8021358 <LCD_LOG_UpdateDisplay+0x6c>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 8021316:	79fb      	ldrb	r3, [r7, #7]
 8021318:	4a33      	ldr	r2, [pc, #204]	; (80213e8 <LCD_LOG_UpdateDisplay+0xfc>)
 802131a:	8812      	ldrh	r2, [r2, #0]
 802131c:	441a      	add	r2, r3
 802131e:	4934      	ldr	r1, [pc, #208]	; (80213f0 <LCD_LOG_UpdateDisplay+0x104>)
 8021320:	4613      	mov	r3, r2
 8021322:	015b      	lsls	r3, r3, #5
 8021324:	4413      	add	r3, r2
 8021326:	009b      	lsls	r3, r3, #2
 8021328:	440b      	add	r3, r1
 802132a:	3380      	adds	r3, #128	; 0x80
 802132c:	681b      	ldr	r3, [r3, #0]
 802132e:	4618      	mov	r0, r3
 8021330:	f7e1 fcde 	bl	8002cf0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8021334:	4b2c      	ldr	r3, [pc, #176]	; (80213e8 <LCD_LOG_UpdateDisplay+0xfc>)
 8021336:	881b      	ldrh	r3, [r3, #0]
 8021338:	3304      	adds	r3, #4
 802133a:	b298      	uxth	r0, r3
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
 802133c:	79fb      	ldrb	r3, [r7, #7]
 802133e:	4a2a      	ldr	r2, [pc, #168]	; (80213e8 <LCD_LOG_UpdateDisplay+0xfc>)
 8021340:	8812      	ldrh	r2, [r2, #0]
 8021342:	441a      	add	r2, r3
 8021344:	4613      	mov	r3, r2
 8021346:	015b      	lsls	r3, r3, #5
 8021348:	4413      	add	r3, r2
 802134a:	009b      	lsls	r3, r3, #2
 802134c:	4a28      	ldr	r2, [pc, #160]	; (80213f0 <LCD_LOG_UpdateDisplay+0x104>)
 802134e:	4413      	add	r3, r2
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8021350:	4619      	mov	r1, r3
 8021352:	f7e1 fe5f 	bl	8003014 <BSP_LCD_DisplayStringAtLine>
 8021356:	e043      	b.n	80213e0 <LCD_LOG_UpdateDisplay+0xf4>
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 8021358:	4b23      	ldr	r3, [pc, #140]	; (80213e8 <LCD_LOG_UpdateDisplay+0xfc>)
 802135a:	881a      	ldrh	r2, [r3, #0]
 802135c:	4b23      	ldr	r3, [pc, #140]	; (80213ec <LCD_LOG_UpdateDisplay+0x100>)
 802135e:	881b      	ldrh	r3, [r3, #0]
 8021360:	429a      	cmp	r2, r3
 8021362:	d204      	bcs.n	802136e <LCD_LOG_UpdateDisplay+0x82>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 8021364:	4b20      	ldr	r3, [pc, #128]	; (80213e8 <LCD_LOG_UpdateDisplay+0xfc>)
 8021366:	881b      	ldrh	r3, [r3, #0]
 8021368:	3375      	adds	r3, #117	; 0x75
 802136a:	80bb      	strh	r3, [r7, #4]
 802136c:	e002      	b.n	8021374 <LCD_LOG_UpdateDisplay+0x88>
    }
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
 802136e:	4b1e      	ldr	r3, [pc, #120]	; (80213e8 <LCD_LOG_UpdateDisplay+0xfc>)
 8021370:	881b      	ldrh	r3, [r3, #0]
 8021372:	80bb      	strh	r3, [r7, #4]
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 8021374:	88bb      	ldrh	r3, [r7, #4]
 8021376:	3b10      	subs	r3, #16
 8021378:	807b      	strh	r3, [r7, #2]
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 802137a:	2300      	movs	r3, #0
 802137c:	71fb      	strb	r3, [r7, #7]
 802137e:	e02c      	b.n	80213da <LCD_LOG_UpdateDisplay+0xee>
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8021380:	79fa      	ldrb	r2, [r7, #7]
 8021382:	887b      	ldrh	r3, [r7, #2]
 8021384:	4413      	add	r3, r2
 8021386:	4a1b      	ldr	r2, [pc, #108]	; (80213f4 <LCD_LOG_UpdateDisplay+0x108>)
 8021388:	fb82 1203 	smull	r1, r2, r2, r3
 802138c:	441a      	add	r2, r3
 802138e:	1191      	asrs	r1, r2, #6
 8021390:	17da      	asrs	r2, r3, #31
 8021392:	1a8a      	subs	r2, r1, r2
 8021394:	2175      	movs	r1, #117	; 0x75
 8021396:	fb01 f202 	mul.w	r2, r1, r2
 802139a:	1a9a      	subs	r2, r3, r2
 802139c:	4613      	mov	r3, r2
 802139e:	803b      	strh	r3, [r7, #0]
      
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 80213a0:	883a      	ldrh	r2, [r7, #0]
 80213a2:	4913      	ldr	r1, [pc, #76]	; (80213f0 <LCD_LOG_UpdateDisplay+0x104>)
 80213a4:	4613      	mov	r3, r2
 80213a6:	015b      	lsls	r3, r3, #5
 80213a8:	4413      	add	r3, r2
 80213aa:	009b      	lsls	r3, r3, #2
 80213ac:	440b      	add	r3, r1
 80213ae:	3380      	adds	r3, #128	; 0x80
 80213b0:	681b      	ldr	r3, [r3, #0]
 80213b2:	4618      	mov	r0, r3
 80213b4:	f7e1 fc9c 	bl	8002cf0 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 80213b8:	79fb      	ldrb	r3, [r7, #7]
 80213ba:	b29b      	uxth	r3, r3
 80213bc:	3304      	adds	r3, #4
 80213be:	b298      	uxth	r0, r3
                             (uint8_t *)(LCD_CacheBuffer[index].line));
 80213c0:	883a      	ldrh	r2, [r7, #0]
 80213c2:	4613      	mov	r3, r2
 80213c4:	015b      	lsls	r3, r3, #5
 80213c6:	4413      	add	r3, r2
 80213c8:	009b      	lsls	r3, r3, #2
 80213ca:	4a09      	ldr	r2, [pc, #36]	; (80213f0 <LCD_LOG_UpdateDisplay+0x104>)
 80213cc:	4413      	add	r3, r2
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 80213ce:	4619      	mov	r1, r3
 80213d0:	f7e1 fe20 	bl	8003014 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 80213d4:	79fb      	ldrb	r3, [r7, #7]
 80213d6:	3301      	adds	r3, #1
 80213d8:	71fb      	strb	r3, [r7, #7]
 80213da:	79fb      	ldrb	r3, [r7, #7]
 80213dc:	2b10      	cmp	r3, #16
 80213de:	d9cf      	bls.n	8021380 <LCD_LOG_UpdateDisplay+0x94>
      
    }
  }
  
}
 80213e0:	bf00      	nop
 80213e2:	3708      	adds	r7, #8
 80213e4:	46bd      	mov	sp, r7
 80213e6:	bd80      	pop	{r7, pc}
 80213e8:	20010a90 	.word	0x20010a90
 80213ec:	20010a98 	.word	0x20010a98
 80213f0:	20010a9c 	.word	0x20010a9c
 80213f4:	8c08c08d 	.word	0x8c08c08d

080213f8 <__libc_init_array>:
 80213f8:	b570      	push	{r4, r5, r6, lr}
 80213fa:	4e0d      	ldr	r6, [pc, #52]	; (8021430 <__libc_init_array+0x38>)
 80213fc:	4c0d      	ldr	r4, [pc, #52]	; (8021434 <__libc_init_array+0x3c>)
 80213fe:	1ba4      	subs	r4, r4, r6
 8021400:	10a4      	asrs	r4, r4, #2
 8021402:	2500      	movs	r5, #0
 8021404:	42a5      	cmp	r5, r4
 8021406:	d109      	bne.n	802141c <__libc_init_array+0x24>
 8021408:	4e0b      	ldr	r6, [pc, #44]	; (8021438 <__libc_init_array+0x40>)
 802140a:	4c0c      	ldr	r4, [pc, #48]	; (802143c <__libc_init_array+0x44>)
 802140c:	f000 ffce 	bl	80223ac <_init>
 8021410:	1ba4      	subs	r4, r4, r6
 8021412:	10a4      	asrs	r4, r4, #2
 8021414:	2500      	movs	r5, #0
 8021416:	42a5      	cmp	r5, r4
 8021418:	d105      	bne.n	8021426 <__libc_init_array+0x2e>
 802141a:	bd70      	pop	{r4, r5, r6, pc}
 802141c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021420:	4798      	blx	r3
 8021422:	3501      	adds	r5, #1
 8021424:	e7ee      	b.n	8021404 <__libc_init_array+0xc>
 8021426:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802142a:	4798      	blx	r3
 802142c:	3501      	adds	r5, #1
 802142e:	e7f2      	b.n	8021416 <__libc_init_array+0x1e>
 8021430:	0802810c 	.word	0x0802810c
 8021434:	0802810c 	.word	0x0802810c
 8021438:	0802810c 	.word	0x0802810c
 802143c:	08028110 	.word	0x08028110

08021440 <malloc>:
 8021440:	4b02      	ldr	r3, [pc, #8]	; (802144c <malloc+0xc>)
 8021442:	4601      	mov	r1, r0
 8021444:	6818      	ldr	r0, [r3, #0]
 8021446:	f000 b87b 	b.w	8021540 <_malloc_r>
 802144a:	bf00      	nop
 802144c:	2000005c 	.word	0x2000005c

08021450 <free>:
 8021450:	4b02      	ldr	r3, [pc, #8]	; (802145c <free+0xc>)
 8021452:	4601      	mov	r1, r0
 8021454:	6818      	ldr	r0, [r3, #0]
 8021456:	f000 b825 	b.w	80214a4 <_free_r>
 802145a:	bf00      	nop
 802145c:	2000005c 	.word	0x2000005c

08021460 <memcmp>:
 8021460:	b530      	push	{r4, r5, lr}
 8021462:	2400      	movs	r4, #0
 8021464:	42a2      	cmp	r2, r4
 8021466:	d101      	bne.n	802146c <memcmp+0xc>
 8021468:	2000      	movs	r0, #0
 802146a:	e007      	b.n	802147c <memcmp+0x1c>
 802146c:	5d03      	ldrb	r3, [r0, r4]
 802146e:	3401      	adds	r4, #1
 8021470:	190d      	adds	r5, r1, r4
 8021472:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8021476:	42ab      	cmp	r3, r5
 8021478:	d0f4      	beq.n	8021464 <memcmp+0x4>
 802147a:	1b58      	subs	r0, r3, r5
 802147c:	bd30      	pop	{r4, r5, pc}

0802147e <memcpy>:
 802147e:	b510      	push	{r4, lr}
 8021480:	1e43      	subs	r3, r0, #1
 8021482:	440a      	add	r2, r1
 8021484:	4291      	cmp	r1, r2
 8021486:	d100      	bne.n	802148a <memcpy+0xc>
 8021488:	bd10      	pop	{r4, pc}
 802148a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802148e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021492:	e7f7      	b.n	8021484 <memcpy+0x6>

08021494 <memset>:
 8021494:	4402      	add	r2, r0
 8021496:	4603      	mov	r3, r0
 8021498:	4293      	cmp	r3, r2
 802149a:	d100      	bne.n	802149e <memset+0xa>
 802149c:	4770      	bx	lr
 802149e:	f803 1b01 	strb.w	r1, [r3], #1
 80214a2:	e7f9      	b.n	8021498 <memset+0x4>

080214a4 <_free_r>:
 80214a4:	b538      	push	{r3, r4, r5, lr}
 80214a6:	4605      	mov	r5, r0
 80214a8:	2900      	cmp	r1, #0
 80214aa:	d045      	beq.n	8021538 <_free_r+0x94>
 80214ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80214b0:	1f0c      	subs	r4, r1, #4
 80214b2:	2b00      	cmp	r3, #0
 80214b4:	bfb8      	it	lt
 80214b6:	18e4      	addlt	r4, r4, r3
 80214b8:	f000 fc02 	bl	8021cc0 <__malloc_lock>
 80214bc:	4a1f      	ldr	r2, [pc, #124]	; (802153c <_free_r+0x98>)
 80214be:	6813      	ldr	r3, [r2, #0]
 80214c0:	4610      	mov	r0, r2
 80214c2:	b933      	cbnz	r3, 80214d2 <_free_r+0x2e>
 80214c4:	6063      	str	r3, [r4, #4]
 80214c6:	6014      	str	r4, [r2, #0]
 80214c8:	4628      	mov	r0, r5
 80214ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80214ce:	f000 bbf8 	b.w	8021cc2 <__malloc_unlock>
 80214d2:	42a3      	cmp	r3, r4
 80214d4:	d90c      	bls.n	80214f0 <_free_r+0x4c>
 80214d6:	6821      	ldr	r1, [r4, #0]
 80214d8:	1862      	adds	r2, r4, r1
 80214da:	4293      	cmp	r3, r2
 80214dc:	bf04      	itt	eq
 80214de:	681a      	ldreq	r2, [r3, #0]
 80214e0:	685b      	ldreq	r3, [r3, #4]
 80214e2:	6063      	str	r3, [r4, #4]
 80214e4:	bf04      	itt	eq
 80214e6:	1852      	addeq	r2, r2, r1
 80214e8:	6022      	streq	r2, [r4, #0]
 80214ea:	6004      	str	r4, [r0, #0]
 80214ec:	e7ec      	b.n	80214c8 <_free_r+0x24>
 80214ee:	4613      	mov	r3, r2
 80214f0:	685a      	ldr	r2, [r3, #4]
 80214f2:	b10a      	cbz	r2, 80214f8 <_free_r+0x54>
 80214f4:	42a2      	cmp	r2, r4
 80214f6:	d9fa      	bls.n	80214ee <_free_r+0x4a>
 80214f8:	6819      	ldr	r1, [r3, #0]
 80214fa:	1858      	adds	r0, r3, r1
 80214fc:	42a0      	cmp	r0, r4
 80214fe:	d10b      	bne.n	8021518 <_free_r+0x74>
 8021500:	6820      	ldr	r0, [r4, #0]
 8021502:	4401      	add	r1, r0
 8021504:	1858      	adds	r0, r3, r1
 8021506:	4282      	cmp	r2, r0
 8021508:	6019      	str	r1, [r3, #0]
 802150a:	d1dd      	bne.n	80214c8 <_free_r+0x24>
 802150c:	6810      	ldr	r0, [r2, #0]
 802150e:	6852      	ldr	r2, [r2, #4]
 8021510:	605a      	str	r2, [r3, #4]
 8021512:	4401      	add	r1, r0
 8021514:	6019      	str	r1, [r3, #0]
 8021516:	e7d7      	b.n	80214c8 <_free_r+0x24>
 8021518:	d902      	bls.n	8021520 <_free_r+0x7c>
 802151a:	230c      	movs	r3, #12
 802151c:	602b      	str	r3, [r5, #0]
 802151e:	e7d3      	b.n	80214c8 <_free_r+0x24>
 8021520:	6820      	ldr	r0, [r4, #0]
 8021522:	1821      	adds	r1, r4, r0
 8021524:	428a      	cmp	r2, r1
 8021526:	bf04      	itt	eq
 8021528:	6811      	ldreq	r1, [r2, #0]
 802152a:	6852      	ldreq	r2, [r2, #4]
 802152c:	6062      	str	r2, [r4, #4]
 802152e:	bf04      	itt	eq
 8021530:	1809      	addeq	r1, r1, r0
 8021532:	6021      	streq	r1, [r4, #0]
 8021534:	605c      	str	r4, [r3, #4]
 8021536:	e7c7      	b.n	80214c8 <_free_r+0x24>
 8021538:	bd38      	pop	{r3, r4, r5, pc}
 802153a:	bf00      	nop
 802153c:	20009118 	.word	0x20009118

08021540 <_malloc_r>:
 8021540:	b570      	push	{r4, r5, r6, lr}
 8021542:	1ccd      	adds	r5, r1, #3
 8021544:	f025 0503 	bic.w	r5, r5, #3
 8021548:	3508      	adds	r5, #8
 802154a:	2d0c      	cmp	r5, #12
 802154c:	bf38      	it	cc
 802154e:	250c      	movcc	r5, #12
 8021550:	2d00      	cmp	r5, #0
 8021552:	4606      	mov	r6, r0
 8021554:	db01      	blt.n	802155a <_malloc_r+0x1a>
 8021556:	42a9      	cmp	r1, r5
 8021558:	d903      	bls.n	8021562 <_malloc_r+0x22>
 802155a:	230c      	movs	r3, #12
 802155c:	6033      	str	r3, [r6, #0]
 802155e:	2000      	movs	r0, #0
 8021560:	bd70      	pop	{r4, r5, r6, pc}
 8021562:	f000 fbad 	bl	8021cc0 <__malloc_lock>
 8021566:	4a21      	ldr	r2, [pc, #132]	; (80215ec <_malloc_r+0xac>)
 8021568:	6814      	ldr	r4, [r2, #0]
 802156a:	4621      	mov	r1, r4
 802156c:	b991      	cbnz	r1, 8021594 <_malloc_r+0x54>
 802156e:	4c20      	ldr	r4, [pc, #128]	; (80215f0 <_malloc_r+0xb0>)
 8021570:	6823      	ldr	r3, [r4, #0]
 8021572:	b91b      	cbnz	r3, 802157c <_malloc_r+0x3c>
 8021574:	4630      	mov	r0, r6
 8021576:	f000 f8ed 	bl	8021754 <_sbrk_r>
 802157a:	6020      	str	r0, [r4, #0]
 802157c:	4629      	mov	r1, r5
 802157e:	4630      	mov	r0, r6
 8021580:	f000 f8e8 	bl	8021754 <_sbrk_r>
 8021584:	1c43      	adds	r3, r0, #1
 8021586:	d124      	bne.n	80215d2 <_malloc_r+0x92>
 8021588:	230c      	movs	r3, #12
 802158a:	6033      	str	r3, [r6, #0]
 802158c:	4630      	mov	r0, r6
 802158e:	f000 fb98 	bl	8021cc2 <__malloc_unlock>
 8021592:	e7e4      	b.n	802155e <_malloc_r+0x1e>
 8021594:	680b      	ldr	r3, [r1, #0]
 8021596:	1b5b      	subs	r3, r3, r5
 8021598:	d418      	bmi.n	80215cc <_malloc_r+0x8c>
 802159a:	2b0b      	cmp	r3, #11
 802159c:	d90f      	bls.n	80215be <_malloc_r+0x7e>
 802159e:	600b      	str	r3, [r1, #0]
 80215a0:	50cd      	str	r5, [r1, r3]
 80215a2:	18cc      	adds	r4, r1, r3
 80215a4:	4630      	mov	r0, r6
 80215a6:	f000 fb8c 	bl	8021cc2 <__malloc_unlock>
 80215aa:	f104 000b 	add.w	r0, r4, #11
 80215ae:	1d23      	adds	r3, r4, #4
 80215b0:	f020 0007 	bic.w	r0, r0, #7
 80215b4:	1ac3      	subs	r3, r0, r3
 80215b6:	d0d3      	beq.n	8021560 <_malloc_r+0x20>
 80215b8:	425a      	negs	r2, r3
 80215ba:	50e2      	str	r2, [r4, r3]
 80215bc:	e7d0      	b.n	8021560 <_malloc_r+0x20>
 80215be:	428c      	cmp	r4, r1
 80215c0:	684b      	ldr	r3, [r1, #4]
 80215c2:	bf16      	itet	ne
 80215c4:	6063      	strne	r3, [r4, #4]
 80215c6:	6013      	streq	r3, [r2, #0]
 80215c8:	460c      	movne	r4, r1
 80215ca:	e7eb      	b.n	80215a4 <_malloc_r+0x64>
 80215cc:	460c      	mov	r4, r1
 80215ce:	6849      	ldr	r1, [r1, #4]
 80215d0:	e7cc      	b.n	802156c <_malloc_r+0x2c>
 80215d2:	1cc4      	adds	r4, r0, #3
 80215d4:	f024 0403 	bic.w	r4, r4, #3
 80215d8:	42a0      	cmp	r0, r4
 80215da:	d005      	beq.n	80215e8 <_malloc_r+0xa8>
 80215dc:	1a21      	subs	r1, r4, r0
 80215de:	4630      	mov	r0, r6
 80215e0:	f000 f8b8 	bl	8021754 <_sbrk_r>
 80215e4:	3001      	adds	r0, #1
 80215e6:	d0cf      	beq.n	8021588 <_malloc_r+0x48>
 80215e8:	6025      	str	r5, [r4, #0]
 80215ea:	e7db      	b.n	80215a4 <_malloc_r+0x64>
 80215ec:	20009118 	.word	0x20009118
 80215f0:	2000911c 	.word	0x2000911c

080215f4 <iprintf>:
 80215f4:	b40f      	push	{r0, r1, r2, r3}
 80215f6:	4b0a      	ldr	r3, [pc, #40]	; (8021620 <iprintf+0x2c>)
 80215f8:	b513      	push	{r0, r1, r4, lr}
 80215fa:	681c      	ldr	r4, [r3, #0]
 80215fc:	b124      	cbz	r4, 8021608 <iprintf+0x14>
 80215fe:	69a3      	ldr	r3, [r4, #24]
 8021600:	b913      	cbnz	r3, 8021608 <iprintf+0x14>
 8021602:	4620      	mov	r0, r4
 8021604:	f000 fa6e 	bl	8021ae4 <__sinit>
 8021608:	ab05      	add	r3, sp, #20
 802160a:	9a04      	ldr	r2, [sp, #16]
 802160c:	68a1      	ldr	r1, [r4, #8]
 802160e:	9301      	str	r3, [sp, #4]
 8021610:	4620      	mov	r0, r4
 8021612:	f000 fb81 	bl	8021d18 <_vfiprintf_r>
 8021616:	b002      	add	sp, #8
 8021618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802161c:	b004      	add	sp, #16
 802161e:	4770      	bx	lr
 8021620:	2000005c 	.word	0x2000005c

08021624 <_puts_r>:
 8021624:	b570      	push	{r4, r5, r6, lr}
 8021626:	460e      	mov	r6, r1
 8021628:	4605      	mov	r5, r0
 802162a:	b118      	cbz	r0, 8021634 <_puts_r+0x10>
 802162c:	6983      	ldr	r3, [r0, #24]
 802162e:	b90b      	cbnz	r3, 8021634 <_puts_r+0x10>
 8021630:	f000 fa58 	bl	8021ae4 <__sinit>
 8021634:	69ab      	ldr	r3, [r5, #24]
 8021636:	68ac      	ldr	r4, [r5, #8]
 8021638:	b913      	cbnz	r3, 8021640 <_puts_r+0x1c>
 802163a:	4628      	mov	r0, r5
 802163c:	f000 fa52 	bl	8021ae4 <__sinit>
 8021640:	4b23      	ldr	r3, [pc, #140]	; (80216d0 <_puts_r+0xac>)
 8021642:	429c      	cmp	r4, r3
 8021644:	d117      	bne.n	8021676 <_puts_r+0x52>
 8021646:	686c      	ldr	r4, [r5, #4]
 8021648:	89a3      	ldrh	r3, [r4, #12]
 802164a:	071b      	lsls	r3, r3, #28
 802164c:	d51d      	bpl.n	802168a <_puts_r+0x66>
 802164e:	6923      	ldr	r3, [r4, #16]
 8021650:	b1db      	cbz	r3, 802168a <_puts_r+0x66>
 8021652:	3e01      	subs	r6, #1
 8021654:	68a3      	ldr	r3, [r4, #8]
 8021656:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802165a:	3b01      	subs	r3, #1
 802165c:	60a3      	str	r3, [r4, #8]
 802165e:	b9e9      	cbnz	r1, 802169c <_puts_r+0x78>
 8021660:	2b00      	cmp	r3, #0
 8021662:	da2e      	bge.n	80216c2 <_puts_r+0x9e>
 8021664:	4622      	mov	r2, r4
 8021666:	210a      	movs	r1, #10
 8021668:	4628      	mov	r0, r5
 802166a:	f000 f88b 	bl	8021784 <__swbuf_r>
 802166e:	3001      	adds	r0, #1
 8021670:	d011      	beq.n	8021696 <_puts_r+0x72>
 8021672:	200a      	movs	r0, #10
 8021674:	e011      	b.n	802169a <_puts_r+0x76>
 8021676:	4b17      	ldr	r3, [pc, #92]	; (80216d4 <_puts_r+0xb0>)
 8021678:	429c      	cmp	r4, r3
 802167a:	d101      	bne.n	8021680 <_puts_r+0x5c>
 802167c:	68ac      	ldr	r4, [r5, #8]
 802167e:	e7e3      	b.n	8021648 <_puts_r+0x24>
 8021680:	4b15      	ldr	r3, [pc, #84]	; (80216d8 <_puts_r+0xb4>)
 8021682:	429c      	cmp	r4, r3
 8021684:	bf08      	it	eq
 8021686:	68ec      	ldreq	r4, [r5, #12]
 8021688:	e7de      	b.n	8021648 <_puts_r+0x24>
 802168a:	4621      	mov	r1, r4
 802168c:	4628      	mov	r0, r5
 802168e:	f000 f8cb 	bl	8021828 <__swsetup_r>
 8021692:	2800      	cmp	r0, #0
 8021694:	d0dd      	beq.n	8021652 <_puts_r+0x2e>
 8021696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802169a:	bd70      	pop	{r4, r5, r6, pc}
 802169c:	2b00      	cmp	r3, #0
 802169e:	da04      	bge.n	80216aa <_puts_r+0x86>
 80216a0:	69a2      	ldr	r2, [r4, #24]
 80216a2:	429a      	cmp	r2, r3
 80216a4:	dc06      	bgt.n	80216b4 <_puts_r+0x90>
 80216a6:	290a      	cmp	r1, #10
 80216a8:	d004      	beq.n	80216b4 <_puts_r+0x90>
 80216aa:	6823      	ldr	r3, [r4, #0]
 80216ac:	1c5a      	adds	r2, r3, #1
 80216ae:	6022      	str	r2, [r4, #0]
 80216b0:	7019      	strb	r1, [r3, #0]
 80216b2:	e7cf      	b.n	8021654 <_puts_r+0x30>
 80216b4:	4622      	mov	r2, r4
 80216b6:	4628      	mov	r0, r5
 80216b8:	f000 f864 	bl	8021784 <__swbuf_r>
 80216bc:	3001      	adds	r0, #1
 80216be:	d1c9      	bne.n	8021654 <_puts_r+0x30>
 80216c0:	e7e9      	b.n	8021696 <_puts_r+0x72>
 80216c2:	6823      	ldr	r3, [r4, #0]
 80216c4:	200a      	movs	r0, #10
 80216c6:	1c5a      	adds	r2, r3, #1
 80216c8:	6022      	str	r2, [r4, #0]
 80216ca:	7018      	strb	r0, [r3, #0]
 80216cc:	e7e5      	b.n	802169a <_puts_r+0x76>
 80216ce:	bf00      	nop
 80216d0:	08028090 	.word	0x08028090
 80216d4:	080280b0 	.word	0x080280b0
 80216d8:	08028070 	.word	0x08028070

080216dc <puts>:
 80216dc:	4b02      	ldr	r3, [pc, #8]	; (80216e8 <puts+0xc>)
 80216de:	4601      	mov	r1, r0
 80216e0:	6818      	ldr	r0, [r3, #0]
 80216e2:	f7ff bf9f 	b.w	8021624 <_puts_r>
 80216e6:	bf00      	nop
 80216e8:	2000005c 	.word	0x2000005c

080216ec <rand>:
 80216ec:	b538      	push	{r3, r4, r5, lr}
 80216ee:	4b13      	ldr	r3, [pc, #76]	; (802173c <rand+0x50>)
 80216f0:	681c      	ldr	r4, [r3, #0]
 80216f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80216f4:	b97b      	cbnz	r3, 8021716 <rand+0x2a>
 80216f6:	2018      	movs	r0, #24
 80216f8:	f7ff fea2 	bl	8021440 <malloc>
 80216fc:	4a10      	ldr	r2, [pc, #64]	; (8021740 <rand+0x54>)
 80216fe:	4b11      	ldr	r3, [pc, #68]	; (8021744 <rand+0x58>)
 8021700:	63a0      	str	r0, [r4, #56]	; 0x38
 8021702:	e9c0 2300 	strd	r2, r3, [r0]
 8021706:	4b10      	ldr	r3, [pc, #64]	; (8021748 <rand+0x5c>)
 8021708:	6083      	str	r3, [r0, #8]
 802170a:	230b      	movs	r3, #11
 802170c:	8183      	strh	r3, [r0, #12]
 802170e:	2201      	movs	r2, #1
 8021710:	2300      	movs	r3, #0
 8021712:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8021716:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021718:	480c      	ldr	r0, [pc, #48]	; (802174c <rand+0x60>)
 802171a:	690a      	ldr	r2, [r1, #16]
 802171c:	694b      	ldr	r3, [r1, #20]
 802171e:	4c0c      	ldr	r4, [pc, #48]	; (8021750 <rand+0x64>)
 8021720:	4350      	muls	r0, r2
 8021722:	fb04 0003 	mla	r0, r4, r3, r0
 8021726:	fba2 2304 	umull	r2, r3, r2, r4
 802172a:	4403      	add	r3, r0
 802172c:	1c54      	adds	r4, r2, #1
 802172e:	f143 0500 	adc.w	r5, r3, #0
 8021732:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8021736:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 802173a:	bd38      	pop	{r3, r4, r5, pc}
 802173c:	2000005c 	.word	0x2000005c
 8021740:	abcd330e 	.word	0xabcd330e
 8021744:	e66d1234 	.word	0xe66d1234
 8021748:	0005deec 	.word	0x0005deec
 802174c:	5851f42d 	.word	0x5851f42d
 8021750:	4c957f2d 	.word	0x4c957f2d

08021754 <_sbrk_r>:
 8021754:	b538      	push	{r3, r4, r5, lr}
 8021756:	4c06      	ldr	r4, [pc, #24]	; (8021770 <_sbrk_r+0x1c>)
 8021758:	2300      	movs	r3, #0
 802175a:	4605      	mov	r5, r0
 802175c:	4608      	mov	r0, r1
 802175e:	6023      	str	r3, [r4, #0]
 8021760:	f7e1 f94a 	bl	80029f8 <_sbrk>
 8021764:	1c43      	adds	r3, r0, #1
 8021766:	d102      	bne.n	802176e <_sbrk_r+0x1a>
 8021768:	6823      	ldr	r3, [r4, #0]
 802176a:	b103      	cbz	r3, 802176e <_sbrk_r+0x1a>
 802176c:	602b      	str	r3, [r5, #0]
 802176e:	bd38      	pop	{r3, r4, r5, pc}
 8021770:	2001039c 	.word	0x2001039c

08021774 <strcpy>:
 8021774:	4603      	mov	r3, r0
 8021776:	f811 2b01 	ldrb.w	r2, [r1], #1
 802177a:	f803 2b01 	strb.w	r2, [r3], #1
 802177e:	2a00      	cmp	r2, #0
 8021780:	d1f9      	bne.n	8021776 <strcpy+0x2>
 8021782:	4770      	bx	lr

08021784 <__swbuf_r>:
 8021784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021786:	460e      	mov	r6, r1
 8021788:	4614      	mov	r4, r2
 802178a:	4605      	mov	r5, r0
 802178c:	b118      	cbz	r0, 8021796 <__swbuf_r+0x12>
 802178e:	6983      	ldr	r3, [r0, #24]
 8021790:	b90b      	cbnz	r3, 8021796 <__swbuf_r+0x12>
 8021792:	f000 f9a7 	bl	8021ae4 <__sinit>
 8021796:	4b21      	ldr	r3, [pc, #132]	; (802181c <__swbuf_r+0x98>)
 8021798:	429c      	cmp	r4, r3
 802179a:	d12a      	bne.n	80217f2 <__swbuf_r+0x6e>
 802179c:	686c      	ldr	r4, [r5, #4]
 802179e:	69a3      	ldr	r3, [r4, #24]
 80217a0:	60a3      	str	r3, [r4, #8]
 80217a2:	89a3      	ldrh	r3, [r4, #12]
 80217a4:	071a      	lsls	r2, r3, #28
 80217a6:	d52e      	bpl.n	8021806 <__swbuf_r+0x82>
 80217a8:	6923      	ldr	r3, [r4, #16]
 80217aa:	b363      	cbz	r3, 8021806 <__swbuf_r+0x82>
 80217ac:	6923      	ldr	r3, [r4, #16]
 80217ae:	6820      	ldr	r0, [r4, #0]
 80217b0:	1ac0      	subs	r0, r0, r3
 80217b2:	6963      	ldr	r3, [r4, #20]
 80217b4:	b2f6      	uxtb	r6, r6
 80217b6:	4283      	cmp	r3, r0
 80217b8:	4637      	mov	r7, r6
 80217ba:	dc04      	bgt.n	80217c6 <__swbuf_r+0x42>
 80217bc:	4621      	mov	r1, r4
 80217be:	4628      	mov	r0, r5
 80217c0:	f000 f926 	bl	8021a10 <_fflush_r>
 80217c4:	bb28      	cbnz	r0, 8021812 <__swbuf_r+0x8e>
 80217c6:	68a3      	ldr	r3, [r4, #8]
 80217c8:	3b01      	subs	r3, #1
 80217ca:	60a3      	str	r3, [r4, #8]
 80217cc:	6823      	ldr	r3, [r4, #0]
 80217ce:	1c5a      	adds	r2, r3, #1
 80217d0:	6022      	str	r2, [r4, #0]
 80217d2:	701e      	strb	r6, [r3, #0]
 80217d4:	6963      	ldr	r3, [r4, #20]
 80217d6:	3001      	adds	r0, #1
 80217d8:	4283      	cmp	r3, r0
 80217da:	d004      	beq.n	80217e6 <__swbuf_r+0x62>
 80217dc:	89a3      	ldrh	r3, [r4, #12]
 80217de:	07db      	lsls	r3, r3, #31
 80217e0:	d519      	bpl.n	8021816 <__swbuf_r+0x92>
 80217e2:	2e0a      	cmp	r6, #10
 80217e4:	d117      	bne.n	8021816 <__swbuf_r+0x92>
 80217e6:	4621      	mov	r1, r4
 80217e8:	4628      	mov	r0, r5
 80217ea:	f000 f911 	bl	8021a10 <_fflush_r>
 80217ee:	b190      	cbz	r0, 8021816 <__swbuf_r+0x92>
 80217f0:	e00f      	b.n	8021812 <__swbuf_r+0x8e>
 80217f2:	4b0b      	ldr	r3, [pc, #44]	; (8021820 <__swbuf_r+0x9c>)
 80217f4:	429c      	cmp	r4, r3
 80217f6:	d101      	bne.n	80217fc <__swbuf_r+0x78>
 80217f8:	68ac      	ldr	r4, [r5, #8]
 80217fa:	e7d0      	b.n	802179e <__swbuf_r+0x1a>
 80217fc:	4b09      	ldr	r3, [pc, #36]	; (8021824 <__swbuf_r+0xa0>)
 80217fe:	429c      	cmp	r4, r3
 8021800:	bf08      	it	eq
 8021802:	68ec      	ldreq	r4, [r5, #12]
 8021804:	e7cb      	b.n	802179e <__swbuf_r+0x1a>
 8021806:	4621      	mov	r1, r4
 8021808:	4628      	mov	r0, r5
 802180a:	f000 f80d 	bl	8021828 <__swsetup_r>
 802180e:	2800      	cmp	r0, #0
 8021810:	d0cc      	beq.n	80217ac <__swbuf_r+0x28>
 8021812:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8021816:	4638      	mov	r0, r7
 8021818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802181a:	bf00      	nop
 802181c:	08028090 	.word	0x08028090
 8021820:	080280b0 	.word	0x080280b0
 8021824:	08028070 	.word	0x08028070

08021828 <__swsetup_r>:
 8021828:	4b32      	ldr	r3, [pc, #200]	; (80218f4 <__swsetup_r+0xcc>)
 802182a:	b570      	push	{r4, r5, r6, lr}
 802182c:	681d      	ldr	r5, [r3, #0]
 802182e:	4606      	mov	r6, r0
 8021830:	460c      	mov	r4, r1
 8021832:	b125      	cbz	r5, 802183e <__swsetup_r+0x16>
 8021834:	69ab      	ldr	r3, [r5, #24]
 8021836:	b913      	cbnz	r3, 802183e <__swsetup_r+0x16>
 8021838:	4628      	mov	r0, r5
 802183a:	f000 f953 	bl	8021ae4 <__sinit>
 802183e:	4b2e      	ldr	r3, [pc, #184]	; (80218f8 <__swsetup_r+0xd0>)
 8021840:	429c      	cmp	r4, r3
 8021842:	d10f      	bne.n	8021864 <__swsetup_r+0x3c>
 8021844:	686c      	ldr	r4, [r5, #4]
 8021846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802184a:	b29a      	uxth	r2, r3
 802184c:	0715      	lsls	r5, r2, #28
 802184e:	d42c      	bmi.n	80218aa <__swsetup_r+0x82>
 8021850:	06d0      	lsls	r0, r2, #27
 8021852:	d411      	bmi.n	8021878 <__swsetup_r+0x50>
 8021854:	2209      	movs	r2, #9
 8021856:	6032      	str	r2, [r6, #0]
 8021858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802185c:	81a3      	strh	r3, [r4, #12]
 802185e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021862:	e03e      	b.n	80218e2 <__swsetup_r+0xba>
 8021864:	4b25      	ldr	r3, [pc, #148]	; (80218fc <__swsetup_r+0xd4>)
 8021866:	429c      	cmp	r4, r3
 8021868:	d101      	bne.n	802186e <__swsetup_r+0x46>
 802186a:	68ac      	ldr	r4, [r5, #8]
 802186c:	e7eb      	b.n	8021846 <__swsetup_r+0x1e>
 802186e:	4b24      	ldr	r3, [pc, #144]	; (8021900 <__swsetup_r+0xd8>)
 8021870:	429c      	cmp	r4, r3
 8021872:	bf08      	it	eq
 8021874:	68ec      	ldreq	r4, [r5, #12]
 8021876:	e7e6      	b.n	8021846 <__swsetup_r+0x1e>
 8021878:	0751      	lsls	r1, r2, #29
 802187a:	d512      	bpl.n	80218a2 <__swsetup_r+0x7a>
 802187c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802187e:	b141      	cbz	r1, 8021892 <__swsetup_r+0x6a>
 8021880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021884:	4299      	cmp	r1, r3
 8021886:	d002      	beq.n	802188e <__swsetup_r+0x66>
 8021888:	4630      	mov	r0, r6
 802188a:	f7ff fe0b 	bl	80214a4 <_free_r>
 802188e:	2300      	movs	r3, #0
 8021890:	6363      	str	r3, [r4, #52]	; 0x34
 8021892:	89a3      	ldrh	r3, [r4, #12]
 8021894:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021898:	81a3      	strh	r3, [r4, #12]
 802189a:	2300      	movs	r3, #0
 802189c:	6063      	str	r3, [r4, #4]
 802189e:	6923      	ldr	r3, [r4, #16]
 80218a0:	6023      	str	r3, [r4, #0]
 80218a2:	89a3      	ldrh	r3, [r4, #12]
 80218a4:	f043 0308 	orr.w	r3, r3, #8
 80218a8:	81a3      	strh	r3, [r4, #12]
 80218aa:	6923      	ldr	r3, [r4, #16]
 80218ac:	b94b      	cbnz	r3, 80218c2 <__swsetup_r+0x9a>
 80218ae:	89a3      	ldrh	r3, [r4, #12]
 80218b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80218b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80218b8:	d003      	beq.n	80218c2 <__swsetup_r+0x9a>
 80218ba:	4621      	mov	r1, r4
 80218bc:	4630      	mov	r0, r6
 80218be:	f000 f9bf 	bl	8021c40 <__smakebuf_r>
 80218c2:	89a2      	ldrh	r2, [r4, #12]
 80218c4:	f012 0301 	ands.w	r3, r2, #1
 80218c8:	d00c      	beq.n	80218e4 <__swsetup_r+0xbc>
 80218ca:	2300      	movs	r3, #0
 80218cc:	60a3      	str	r3, [r4, #8]
 80218ce:	6963      	ldr	r3, [r4, #20]
 80218d0:	425b      	negs	r3, r3
 80218d2:	61a3      	str	r3, [r4, #24]
 80218d4:	6923      	ldr	r3, [r4, #16]
 80218d6:	b953      	cbnz	r3, 80218ee <__swsetup_r+0xc6>
 80218d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80218dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80218e0:	d1ba      	bne.n	8021858 <__swsetup_r+0x30>
 80218e2:	bd70      	pop	{r4, r5, r6, pc}
 80218e4:	0792      	lsls	r2, r2, #30
 80218e6:	bf58      	it	pl
 80218e8:	6963      	ldrpl	r3, [r4, #20]
 80218ea:	60a3      	str	r3, [r4, #8]
 80218ec:	e7f2      	b.n	80218d4 <__swsetup_r+0xac>
 80218ee:	2000      	movs	r0, #0
 80218f0:	e7f7      	b.n	80218e2 <__swsetup_r+0xba>
 80218f2:	bf00      	nop
 80218f4:	2000005c 	.word	0x2000005c
 80218f8:	08028090 	.word	0x08028090
 80218fc:	080280b0 	.word	0x080280b0
 8021900:	08028070 	.word	0x08028070

08021904 <__sflush_r>:
 8021904:	898a      	ldrh	r2, [r1, #12]
 8021906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802190a:	4605      	mov	r5, r0
 802190c:	0710      	lsls	r0, r2, #28
 802190e:	460c      	mov	r4, r1
 8021910:	d458      	bmi.n	80219c4 <__sflush_r+0xc0>
 8021912:	684b      	ldr	r3, [r1, #4]
 8021914:	2b00      	cmp	r3, #0
 8021916:	dc05      	bgt.n	8021924 <__sflush_r+0x20>
 8021918:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802191a:	2b00      	cmp	r3, #0
 802191c:	dc02      	bgt.n	8021924 <__sflush_r+0x20>
 802191e:	2000      	movs	r0, #0
 8021920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021926:	2e00      	cmp	r6, #0
 8021928:	d0f9      	beq.n	802191e <__sflush_r+0x1a>
 802192a:	2300      	movs	r3, #0
 802192c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021930:	682f      	ldr	r7, [r5, #0]
 8021932:	6a21      	ldr	r1, [r4, #32]
 8021934:	602b      	str	r3, [r5, #0]
 8021936:	d032      	beq.n	802199e <__sflush_r+0x9a>
 8021938:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802193a:	89a3      	ldrh	r3, [r4, #12]
 802193c:	075a      	lsls	r2, r3, #29
 802193e:	d505      	bpl.n	802194c <__sflush_r+0x48>
 8021940:	6863      	ldr	r3, [r4, #4]
 8021942:	1ac0      	subs	r0, r0, r3
 8021944:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021946:	b10b      	cbz	r3, 802194c <__sflush_r+0x48>
 8021948:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802194a:	1ac0      	subs	r0, r0, r3
 802194c:	2300      	movs	r3, #0
 802194e:	4602      	mov	r2, r0
 8021950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021952:	6a21      	ldr	r1, [r4, #32]
 8021954:	4628      	mov	r0, r5
 8021956:	47b0      	blx	r6
 8021958:	1c43      	adds	r3, r0, #1
 802195a:	89a3      	ldrh	r3, [r4, #12]
 802195c:	d106      	bne.n	802196c <__sflush_r+0x68>
 802195e:	6829      	ldr	r1, [r5, #0]
 8021960:	291d      	cmp	r1, #29
 8021962:	d848      	bhi.n	80219f6 <__sflush_r+0xf2>
 8021964:	4a29      	ldr	r2, [pc, #164]	; (8021a0c <__sflush_r+0x108>)
 8021966:	40ca      	lsrs	r2, r1
 8021968:	07d6      	lsls	r6, r2, #31
 802196a:	d544      	bpl.n	80219f6 <__sflush_r+0xf2>
 802196c:	2200      	movs	r2, #0
 802196e:	6062      	str	r2, [r4, #4]
 8021970:	04d9      	lsls	r1, r3, #19
 8021972:	6922      	ldr	r2, [r4, #16]
 8021974:	6022      	str	r2, [r4, #0]
 8021976:	d504      	bpl.n	8021982 <__sflush_r+0x7e>
 8021978:	1c42      	adds	r2, r0, #1
 802197a:	d101      	bne.n	8021980 <__sflush_r+0x7c>
 802197c:	682b      	ldr	r3, [r5, #0]
 802197e:	b903      	cbnz	r3, 8021982 <__sflush_r+0x7e>
 8021980:	6560      	str	r0, [r4, #84]	; 0x54
 8021982:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021984:	602f      	str	r7, [r5, #0]
 8021986:	2900      	cmp	r1, #0
 8021988:	d0c9      	beq.n	802191e <__sflush_r+0x1a>
 802198a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802198e:	4299      	cmp	r1, r3
 8021990:	d002      	beq.n	8021998 <__sflush_r+0x94>
 8021992:	4628      	mov	r0, r5
 8021994:	f7ff fd86 	bl	80214a4 <_free_r>
 8021998:	2000      	movs	r0, #0
 802199a:	6360      	str	r0, [r4, #52]	; 0x34
 802199c:	e7c0      	b.n	8021920 <__sflush_r+0x1c>
 802199e:	2301      	movs	r3, #1
 80219a0:	4628      	mov	r0, r5
 80219a2:	47b0      	blx	r6
 80219a4:	1c41      	adds	r1, r0, #1
 80219a6:	d1c8      	bne.n	802193a <__sflush_r+0x36>
 80219a8:	682b      	ldr	r3, [r5, #0]
 80219aa:	2b00      	cmp	r3, #0
 80219ac:	d0c5      	beq.n	802193a <__sflush_r+0x36>
 80219ae:	2b1d      	cmp	r3, #29
 80219b0:	d001      	beq.n	80219b6 <__sflush_r+0xb2>
 80219b2:	2b16      	cmp	r3, #22
 80219b4:	d101      	bne.n	80219ba <__sflush_r+0xb6>
 80219b6:	602f      	str	r7, [r5, #0]
 80219b8:	e7b1      	b.n	802191e <__sflush_r+0x1a>
 80219ba:	89a3      	ldrh	r3, [r4, #12]
 80219bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80219c0:	81a3      	strh	r3, [r4, #12]
 80219c2:	e7ad      	b.n	8021920 <__sflush_r+0x1c>
 80219c4:	690f      	ldr	r7, [r1, #16]
 80219c6:	2f00      	cmp	r7, #0
 80219c8:	d0a9      	beq.n	802191e <__sflush_r+0x1a>
 80219ca:	0793      	lsls	r3, r2, #30
 80219cc:	680e      	ldr	r6, [r1, #0]
 80219ce:	bf08      	it	eq
 80219d0:	694b      	ldreq	r3, [r1, #20]
 80219d2:	600f      	str	r7, [r1, #0]
 80219d4:	bf18      	it	ne
 80219d6:	2300      	movne	r3, #0
 80219d8:	eba6 0807 	sub.w	r8, r6, r7
 80219dc:	608b      	str	r3, [r1, #8]
 80219de:	f1b8 0f00 	cmp.w	r8, #0
 80219e2:	dd9c      	ble.n	802191e <__sflush_r+0x1a>
 80219e4:	4643      	mov	r3, r8
 80219e6:	463a      	mov	r2, r7
 80219e8:	6a21      	ldr	r1, [r4, #32]
 80219ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80219ec:	4628      	mov	r0, r5
 80219ee:	47b0      	blx	r6
 80219f0:	2800      	cmp	r0, #0
 80219f2:	dc06      	bgt.n	8021a02 <__sflush_r+0xfe>
 80219f4:	89a3      	ldrh	r3, [r4, #12]
 80219f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80219fa:	81a3      	strh	r3, [r4, #12]
 80219fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021a00:	e78e      	b.n	8021920 <__sflush_r+0x1c>
 8021a02:	4407      	add	r7, r0
 8021a04:	eba8 0800 	sub.w	r8, r8, r0
 8021a08:	e7e9      	b.n	80219de <__sflush_r+0xda>
 8021a0a:	bf00      	nop
 8021a0c:	20400001 	.word	0x20400001

08021a10 <_fflush_r>:
 8021a10:	b538      	push	{r3, r4, r5, lr}
 8021a12:	690b      	ldr	r3, [r1, #16]
 8021a14:	4605      	mov	r5, r0
 8021a16:	460c      	mov	r4, r1
 8021a18:	b1db      	cbz	r3, 8021a52 <_fflush_r+0x42>
 8021a1a:	b118      	cbz	r0, 8021a24 <_fflush_r+0x14>
 8021a1c:	6983      	ldr	r3, [r0, #24]
 8021a1e:	b90b      	cbnz	r3, 8021a24 <_fflush_r+0x14>
 8021a20:	f000 f860 	bl	8021ae4 <__sinit>
 8021a24:	4b0c      	ldr	r3, [pc, #48]	; (8021a58 <_fflush_r+0x48>)
 8021a26:	429c      	cmp	r4, r3
 8021a28:	d109      	bne.n	8021a3e <_fflush_r+0x2e>
 8021a2a:	686c      	ldr	r4, [r5, #4]
 8021a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021a30:	b17b      	cbz	r3, 8021a52 <_fflush_r+0x42>
 8021a32:	4621      	mov	r1, r4
 8021a34:	4628      	mov	r0, r5
 8021a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021a3a:	f7ff bf63 	b.w	8021904 <__sflush_r>
 8021a3e:	4b07      	ldr	r3, [pc, #28]	; (8021a5c <_fflush_r+0x4c>)
 8021a40:	429c      	cmp	r4, r3
 8021a42:	d101      	bne.n	8021a48 <_fflush_r+0x38>
 8021a44:	68ac      	ldr	r4, [r5, #8]
 8021a46:	e7f1      	b.n	8021a2c <_fflush_r+0x1c>
 8021a48:	4b05      	ldr	r3, [pc, #20]	; (8021a60 <_fflush_r+0x50>)
 8021a4a:	429c      	cmp	r4, r3
 8021a4c:	bf08      	it	eq
 8021a4e:	68ec      	ldreq	r4, [r5, #12]
 8021a50:	e7ec      	b.n	8021a2c <_fflush_r+0x1c>
 8021a52:	2000      	movs	r0, #0
 8021a54:	bd38      	pop	{r3, r4, r5, pc}
 8021a56:	bf00      	nop
 8021a58:	08028090 	.word	0x08028090
 8021a5c:	080280b0 	.word	0x080280b0
 8021a60:	08028070 	.word	0x08028070

08021a64 <std>:
 8021a64:	2300      	movs	r3, #0
 8021a66:	b510      	push	{r4, lr}
 8021a68:	4604      	mov	r4, r0
 8021a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8021a6e:	6083      	str	r3, [r0, #8]
 8021a70:	8181      	strh	r1, [r0, #12]
 8021a72:	6643      	str	r3, [r0, #100]	; 0x64
 8021a74:	81c2      	strh	r2, [r0, #14]
 8021a76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021a7a:	6183      	str	r3, [r0, #24]
 8021a7c:	4619      	mov	r1, r3
 8021a7e:	2208      	movs	r2, #8
 8021a80:	305c      	adds	r0, #92	; 0x5c
 8021a82:	f7ff fd07 	bl	8021494 <memset>
 8021a86:	4b05      	ldr	r3, [pc, #20]	; (8021a9c <std+0x38>)
 8021a88:	6263      	str	r3, [r4, #36]	; 0x24
 8021a8a:	4b05      	ldr	r3, [pc, #20]	; (8021aa0 <std+0x3c>)
 8021a8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8021a8e:	4b05      	ldr	r3, [pc, #20]	; (8021aa4 <std+0x40>)
 8021a90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021a92:	4b05      	ldr	r3, [pc, #20]	; (8021aa8 <std+0x44>)
 8021a94:	6224      	str	r4, [r4, #32]
 8021a96:	6323      	str	r3, [r4, #48]	; 0x30
 8021a98:	bd10      	pop	{r4, pc}
 8021a9a:	bf00      	nop
 8021a9c:	08022255 	.word	0x08022255
 8021aa0:	08022277 	.word	0x08022277
 8021aa4:	080222af 	.word	0x080222af
 8021aa8:	080222d3 	.word	0x080222d3

08021aac <_cleanup_r>:
 8021aac:	4901      	ldr	r1, [pc, #4]	; (8021ab4 <_cleanup_r+0x8>)
 8021aae:	f000 b885 	b.w	8021bbc <_fwalk_reent>
 8021ab2:	bf00      	nop
 8021ab4:	08021a11 	.word	0x08021a11

08021ab8 <__sfmoreglue>:
 8021ab8:	b570      	push	{r4, r5, r6, lr}
 8021aba:	1e4a      	subs	r2, r1, #1
 8021abc:	2568      	movs	r5, #104	; 0x68
 8021abe:	4355      	muls	r5, r2
 8021ac0:	460e      	mov	r6, r1
 8021ac2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021ac6:	f7ff fd3b 	bl	8021540 <_malloc_r>
 8021aca:	4604      	mov	r4, r0
 8021acc:	b140      	cbz	r0, 8021ae0 <__sfmoreglue+0x28>
 8021ace:	2100      	movs	r1, #0
 8021ad0:	e9c0 1600 	strd	r1, r6, [r0]
 8021ad4:	300c      	adds	r0, #12
 8021ad6:	60a0      	str	r0, [r4, #8]
 8021ad8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021adc:	f7ff fcda 	bl	8021494 <memset>
 8021ae0:	4620      	mov	r0, r4
 8021ae2:	bd70      	pop	{r4, r5, r6, pc}

08021ae4 <__sinit>:
 8021ae4:	6983      	ldr	r3, [r0, #24]
 8021ae6:	b510      	push	{r4, lr}
 8021ae8:	4604      	mov	r4, r0
 8021aea:	bb33      	cbnz	r3, 8021b3a <__sinit+0x56>
 8021aec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8021af0:	6503      	str	r3, [r0, #80]	; 0x50
 8021af2:	4b12      	ldr	r3, [pc, #72]	; (8021b3c <__sinit+0x58>)
 8021af4:	4a12      	ldr	r2, [pc, #72]	; (8021b40 <__sinit+0x5c>)
 8021af6:	681b      	ldr	r3, [r3, #0]
 8021af8:	6282      	str	r2, [r0, #40]	; 0x28
 8021afa:	4298      	cmp	r0, r3
 8021afc:	bf04      	itt	eq
 8021afe:	2301      	moveq	r3, #1
 8021b00:	6183      	streq	r3, [r0, #24]
 8021b02:	f000 f81f 	bl	8021b44 <__sfp>
 8021b06:	6060      	str	r0, [r4, #4]
 8021b08:	4620      	mov	r0, r4
 8021b0a:	f000 f81b 	bl	8021b44 <__sfp>
 8021b0e:	60a0      	str	r0, [r4, #8]
 8021b10:	4620      	mov	r0, r4
 8021b12:	f000 f817 	bl	8021b44 <__sfp>
 8021b16:	2200      	movs	r2, #0
 8021b18:	60e0      	str	r0, [r4, #12]
 8021b1a:	2104      	movs	r1, #4
 8021b1c:	6860      	ldr	r0, [r4, #4]
 8021b1e:	f7ff ffa1 	bl	8021a64 <std>
 8021b22:	2201      	movs	r2, #1
 8021b24:	2109      	movs	r1, #9
 8021b26:	68a0      	ldr	r0, [r4, #8]
 8021b28:	f7ff ff9c 	bl	8021a64 <std>
 8021b2c:	2202      	movs	r2, #2
 8021b2e:	2112      	movs	r1, #18
 8021b30:	68e0      	ldr	r0, [r4, #12]
 8021b32:	f7ff ff97 	bl	8021a64 <std>
 8021b36:	2301      	movs	r3, #1
 8021b38:	61a3      	str	r3, [r4, #24]
 8021b3a:	bd10      	pop	{r4, pc}
 8021b3c:	0802806c 	.word	0x0802806c
 8021b40:	08021aad 	.word	0x08021aad

08021b44 <__sfp>:
 8021b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021b46:	4b1b      	ldr	r3, [pc, #108]	; (8021bb4 <__sfp+0x70>)
 8021b48:	681e      	ldr	r6, [r3, #0]
 8021b4a:	69b3      	ldr	r3, [r6, #24]
 8021b4c:	4607      	mov	r7, r0
 8021b4e:	b913      	cbnz	r3, 8021b56 <__sfp+0x12>
 8021b50:	4630      	mov	r0, r6
 8021b52:	f7ff ffc7 	bl	8021ae4 <__sinit>
 8021b56:	3648      	adds	r6, #72	; 0x48
 8021b58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021b5c:	3b01      	subs	r3, #1
 8021b5e:	d503      	bpl.n	8021b68 <__sfp+0x24>
 8021b60:	6833      	ldr	r3, [r6, #0]
 8021b62:	b133      	cbz	r3, 8021b72 <__sfp+0x2e>
 8021b64:	6836      	ldr	r6, [r6, #0]
 8021b66:	e7f7      	b.n	8021b58 <__sfp+0x14>
 8021b68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021b6c:	b16d      	cbz	r5, 8021b8a <__sfp+0x46>
 8021b6e:	3468      	adds	r4, #104	; 0x68
 8021b70:	e7f4      	b.n	8021b5c <__sfp+0x18>
 8021b72:	2104      	movs	r1, #4
 8021b74:	4638      	mov	r0, r7
 8021b76:	f7ff ff9f 	bl	8021ab8 <__sfmoreglue>
 8021b7a:	6030      	str	r0, [r6, #0]
 8021b7c:	2800      	cmp	r0, #0
 8021b7e:	d1f1      	bne.n	8021b64 <__sfp+0x20>
 8021b80:	230c      	movs	r3, #12
 8021b82:	603b      	str	r3, [r7, #0]
 8021b84:	4604      	mov	r4, r0
 8021b86:	4620      	mov	r0, r4
 8021b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021b8a:	4b0b      	ldr	r3, [pc, #44]	; (8021bb8 <__sfp+0x74>)
 8021b8c:	6665      	str	r5, [r4, #100]	; 0x64
 8021b8e:	e9c4 5500 	strd	r5, r5, [r4]
 8021b92:	60a5      	str	r5, [r4, #8]
 8021b94:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8021b98:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8021b9c:	2208      	movs	r2, #8
 8021b9e:	4629      	mov	r1, r5
 8021ba0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021ba4:	f7ff fc76 	bl	8021494 <memset>
 8021ba8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021bac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021bb0:	e7e9      	b.n	8021b86 <__sfp+0x42>
 8021bb2:	bf00      	nop
 8021bb4:	0802806c 	.word	0x0802806c
 8021bb8:	ffff0001 	.word	0xffff0001

08021bbc <_fwalk_reent>:
 8021bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021bc0:	4680      	mov	r8, r0
 8021bc2:	4689      	mov	r9, r1
 8021bc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021bc8:	2600      	movs	r6, #0
 8021bca:	b914      	cbnz	r4, 8021bd2 <_fwalk_reent+0x16>
 8021bcc:	4630      	mov	r0, r6
 8021bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021bd2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8021bd6:	3f01      	subs	r7, #1
 8021bd8:	d501      	bpl.n	8021bde <_fwalk_reent+0x22>
 8021bda:	6824      	ldr	r4, [r4, #0]
 8021bdc:	e7f5      	b.n	8021bca <_fwalk_reent+0xe>
 8021bde:	89ab      	ldrh	r3, [r5, #12]
 8021be0:	2b01      	cmp	r3, #1
 8021be2:	d907      	bls.n	8021bf4 <_fwalk_reent+0x38>
 8021be4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021be8:	3301      	adds	r3, #1
 8021bea:	d003      	beq.n	8021bf4 <_fwalk_reent+0x38>
 8021bec:	4629      	mov	r1, r5
 8021bee:	4640      	mov	r0, r8
 8021bf0:	47c8      	blx	r9
 8021bf2:	4306      	orrs	r6, r0
 8021bf4:	3568      	adds	r5, #104	; 0x68
 8021bf6:	e7ee      	b.n	8021bd6 <_fwalk_reent+0x1a>

08021bf8 <__swhatbuf_r>:
 8021bf8:	b570      	push	{r4, r5, r6, lr}
 8021bfa:	460e      	mov	r6, r1
 8021bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021c00:	2900      	cmp	r1, #0
 8021c02:	b096      	sub	sp, #88	; 0x58
 8021c04:	4614      	mov	r4, r2
 8021c06:	461d      	mov	r5, r3
 8021c08:	da07      	bge.n	8021c1a <__swhatbuf_r+0x22>
 8021c0a:	2300      	movs	r3, #0
 8021c0c:	602b      	str	r3, [r5, #0]
 8021c0e:	89b3      	ldrh	r3, [r6, #12]
 8021c10:	061a      	lsls	r2, r3, #24
 8021c12:	d410      	bmi.n	8021c36 <__swhatbuf_r+0x3e>
 8021c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021c18:	e00e      	b.n	8021c38 <__swhatbuf_r+0x40>
 8021c1a:	466a      	mov	r2, sp
 8021c1c:	f000 fb80 	bl	8022320 <_fstat_r>
 8021c20:	2800      	cmp	r0, #0
 8021c22:	dbf2      	blt.n	8021c0a <__swhatbuf_r+0x12>
 8021c24:	9a01      	ldr	r2, [sp, #4]
 8021c26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021c2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021c2e:	425a      	negs	r2, r3
 8021c30:	415a      	adcs	r2, r3
 8021c32:	602a      	str	r2, [r5, #0]
 8021c34:	e7ee      	b.n	8021c14 <__swhatbuf_r+0x1c>
 8021c36:	2340      	movs	r3, #64	; 0x40
 8021c38:	2000      	movs	r0, #0
 8021c3a:	6023      	str	r3, [r4, #0]
 8021c3c:	b016      	add	sp, #88	; 0x58
 8021c3e:	bd70      	pop	{r4, r5, r6, pc}

08021c40 <__smakebuf_r>:
 8021c40:	898b      	ldrh	r3, [r1, #12]
 8021c42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021c44:	079d      	lsls	r5, r3, #30
 8021c46:	4606      	mov	r6, r0
 8021c48:	460c      	mov	r4, r1
 8021c4a:	d507      	bpl.n	8021c5c <__smakebuf_r+0x1c>
 8021c4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021c50:	6023      	str	r3, [r4, #0]
 8021c52:	6123      	str	r3, [r4, #16]
 8021c54:	2301      	movs	r3, #1
 8021c56:	6163      	str	r3, [r4, #20]
 8021c58:	b002      	add	sp, #8
 8021c5a:	bd70      	pop	{r4, r5, r6, pc}
 8021c5c:	ab01      	add	r3, sp, #4
 8021c5e:	466a      	mov	r2, sp
 8021c60:	f7ff ffca 	bl	8021bf8 <__swhatbuf_r>
 8021c64:	9900      	ldr	r1, [sp, #0]
 8021c66:	4605      	mov	r5, r0
 8021c68:	4630      	mov	r0, r6
 8021c6a:	f7ff fc69 	bl	8021540 <_malloc_r>
 8021c6e:	b948      	cbnz	r0, 8021c84 <__smakebuf_r+0x44>
 8021c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021c74:	059a      	lsls	r2, r3, #22
 8021c76:	d4ef      	bmi.n	8021c58 <__smakebuf_r+0x18>
 8021c78:	f023 0303 	bic.w	r3, r3, #3
 8021c7c:	f043 0302 	orr.w	r3, r3, #2
 8021c80:	81a3      	strh	r3, [r4, #12]
 8021c82:	e7e3      	b.n	8021c4c <__smakebuf_r+0xc>
 8021c84:	4b0d      	ldr	r3, [pc, #52]	; (8021cbc <__smakebuf_r+0x7c>)
 8021c86:	62b3      	str	r3, [r6, #40]	; 0x28
 8021c88:	89a3      	ldrh	r3, [r4, #12]
 8021c8a:	6020      	str	r0, [r4, #0]
 8021c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021c90:	81a3      	strh	r3, [r4, #12]
 8021c92:	9b00      	ldr	r3, [sp, #0]
 8021c94:	6163      	str	r3, [r4, #20]
 8021c96:	9b01      	ldr	r3, [sp, #4]
 8021c98:	6120      	str	r0, [r4, #16]
 8021c9a:	b15b      	cbz	r3, 8021cb4 <__smakebuf_r+0x74>
 8021c9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021ca0:	4630      	mov	r0, r6
 8021ca2:	f000 fb4f 	bl	8022344 <_isatty_r>
 8021ca6:	b128      	cbz	r0, 8021cb4 <__smakebuf_r+0x74>
 8021ca8:	89a3      	ldrh	r3, [r4, #12]
 8021caa:	f023 0303 	bic.w	r3, r3, #3
 8021cae:	f043 0301 	orr.w	r3, r3, #1
 8021cb2:	81a3      	strh	r3, [r4, #12]
 8021cb4:	89a3      	ldrh	r3, [r4, #12]
 8021cb6:	431d      	orrs	r5, r3
 8021cb8:	81a5      	strh	r5, [r4, #12]
 8021cba:	e7cd      	b.n	8021c58 <__smakebuf_r+0x18>
 8021cbc:	08021aad 	.word	0x08021aad

08021cc0 <__malloc_lock>:
 8021cc0:	4770      	bx	lr

08021cc2 <__malloc_unlock>:
 8021cc2:	4770      	bx	lr

08021cc4 <__sfputc_r>:
 8021cc4:	6893      	ldr	r3, [r2, #8]
 8021cc6:	3b01      	subs	r3, #1
 8021cc8:	2b00      	cmp	r3, #0
 8021cca:	b410      	push	{r4}
 8021ccc:	6093      	str	r3, [r2, #8]
 8021cce:	da08      	bge.n	8021ce2 <__sfputc_r+0x1e>
 8021cd0:	6994      	ldr	r4, [r2, #24]
 8021cd2:	42a3      	cmp	r3, r4
 8021cd4:	db01      	blt.n	8021cda <__sfputc_r+0x16>
 8021cd6:	290a      	cmp	r1, #10
 8021cd8:	d103      	bne.n	8021ce2 <__sfputc_r+0x1e>
 8021cda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021cde:	f7ff bd51 	b.w	8021784 <__swbuf_r>
 8021ce2:	6813      	ldr	r3, [r2, #0]
 8021ce4:	1c58      	adds	r0, r3, #1
 8021ce6:	6010      	str	r0, [r2, #0]
 8021ce8:	7019      	strb	r1, [r3, #0]
 8021cea:	4608      	mov	r0, r1
 8021cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021cf0:	4770      	bx	lr

08021cf2 <__sfputs_r>:
 8021cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021cf4:	4606      	mov	r6, r0
 8021cf6:	460f      	mov	r7, r1
 8021cf8:	4614      	mov	r4, r2
 8021cfa:	18d5      	adds	r5, r2, r3
 8021cfc:	42ac      	cmp	r4, r5
 8021cfe:	d101      	bne.n	8021d04 <__sfputs_r+0x12>
 8021d00:	2000      	movs	r0, #0
 8021d02:	e007      	b.n	8021d14 <__sfputs_r+0x22>
 8021d04:	463a      	mov	r2, r7
 8021d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021d0a:	4630      	mov	r0, r6
 8021d0c:	f7ff ffda 	bl	8021cc4 <__sfputc_r>
 8021d10:	1c43      	adds	r3, r0, #1
 8021d12:	d1f3      	bne.n	8021cfc <__sfputs_r+0xa>
 8021d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021d18 <_vfiprintf_r>:
 8021d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d1c:	460c      	mov	r4, r1
 8021d1e:	b09d      	sub	sp, #116	; 0x74
 8021d20:	4617      	mov	r7, r2
 8021d22:	461d      	mov	r5, r3
 8021d24:	4606      	mov	r6, r0
 8021d26:	b118      	cbz	r0, 8021d30 <_vfiprintf_r+0x18>
 8021d28:	6983      	ldr	r3, [r0, #24]
 8021d2a:	b90b      	cbnz	r3, 8021d30 <_vfiprintf_r+0x18>
 8021d2c:	f7ff feda 	bl	8021ae4 <__sinit>
 8021d30:	4b7c      	ldr	r3, [pc, #496]	; (8021f24 <_vfiprintf_r+0x20c>)
 8021d32:	429c      	cmp	r4, r3
 8021d34:	d158      	bne.n	8021de8 <_vfiprintf_r+0xd0>
 8021d36:	6874      	ldr	r4, [r6, #4]
 8021d38:	89a3      	ldrh	r3, [r4, #12]
 8021d3a:	0718      	lsls	r0, r3, #28
 8021d3c:	d55e      	bpl.n	8021dfc <_vfiprintf_r+0xe4>
 8021d3e:	6923      	ldr	r3, [r4, #16]
 8021d40:	2b00      	cmp	r3, #0
 8021d42:	d05b      	beq.n	8021dfc <_vfiprintf_r+0xe4>
 8021d44:	2300      	movs	r3, #0
 8021d46:	9309      	str	r3, [sp, #36]	; 0x24
 8021d48:	2320      	movs	r3, #32
 8021d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021d4e:	2330      	movs	r3, #48	; 0x30
 8021d50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021d54:	9503      	str	r5, [sp, #12]
 8021d56:	f04f 0b01 	mov.w	fp, #1
 8021d5a:	46b8      	mov	r8, r7
 8021d5c:	4645      	mov	r5, r8
 8021d5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8021d62:	b10b      	cbz	r3, 8021d68 <_vfiprintf_r+0x50>
 8021d64:	2b25      	cmp	r3, #37	; 0x25
 8021d66:	d154      	bne.n	8021e12 <_vfiprintf_r+0xfa>
 8021d68:	ebb8 0a07 	subs.w	sl, r8, r7
 8021d6c:	d00b      	beq.n	8021d86 <_vfiprintf_r+0x6e>
 8021d6e:	4653      	mov	r3, sl
 8021d70:	463a      	mov	r2, r7
 8021d72:	4621      	mov	r1, r4
 8021d74:	4630      	mov	r0, r6
 8021d76:	f7ff ffbc 	bl	8021cf2 <__sfputs_r>
 8021d7a:	3001      	adds	r0, #1
 8021d7c:	f000 80c2 	beq.w	8021f04 <_vfiprintf_r+0x1ec>
 8021d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d82:	4453      	add	r3, sl
 8021d84:	9309      	str	r3, [sp, #36]	; 0x24
 8021d86:	f898 3000 	ldrb.w	r3, [r8]
 8021d8a:	2b00      	cmp	r3, #0
 8021d8c:	f000 80ba 	beq.w	8021f04 <_vfiprintf_r+0x1ec>
 8021d90:	2300      	movs	r3, #0
 8021d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021d96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021d9a:	9304      	str	r3, [sp, #16]
 8021d9c:	9307      	str	r3, [sp, #28]
 8021d9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021da2:	931a      	str	r3, [sp, #104]	; 0x68
 8021da4:	46a8      	mov	r8, r5
 8021da6:	2205      	movs	r2, #5
 8021da8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8021dac:	485e      	ldr	r0, [pc, #376]	; (8021f28 <_vfiprintf_r+0x210>)
 8021dae:	f7de fa2f 	bl	8000210 <memchr>
 8021db2:	9b04      	ldr	r3, [sp, #16]
 8021db4:	bb78      	cbnz	r0, 8021e16 <_vfiprintf_r+0xfe>
 8021db6:	06d9      	lsls	r1, r3, #27
 8021db8:	bf44      	itt	mi
 8021dba:	2220      	movmi	r2, #32
 8021dbc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8021dc0:	071a      	lsls	r2, r3, #28
 8021dc2:	bf44      	itt	mi
 8021dc4:	222b      	movmi	r2, #43	; 0x2b
 8021dc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8021dca:	782a      	ldrb	r2, [r5, #0]
 8021dcc:	2a2a      	cmp	r2, #42	; 0x2a
 8021dce:	d02a      	beq.n	8021e26 <_vfiprintf_r+0x10e>
 8021dd0:	9a07      	ldr	r2, [sp, #28]
 8021dd2:	46a8      	mov	r8, r5
 8021dd4:	2000      	movs	r0, #0
 8021dd6:	250a      	movs	r5, #10
 8021dd8:	4641      	mov	r1, r8
 8021dda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021dde:	3b30      	subs	r3, #48	; 0x30
 8021de0:	2b09      	cmp	r3, #9
 8021de2:	d969      	bls.n	8021eb8 <_vfiprintf_r+0x1a0>
 8021de4:	b360      	cbz	r0, 8021e40 <_vfiprintf_r+0x128>
 8021de6:	e024      	b.n	8021e32 <_vfiprintf_r+0x11a>
 8021de8:	4b50      	ldr	r3, [pc, #320]	; (8021f2c <_vfiprintf_r+0x214>)
 8021dea:	429c      	cmp	r4, r3
 8021dec:	d101      	bne.n	8021df2 <_vfiprintf_r+0xda>
 8021dee:	68b4      	ldr	r4, [r6, #8]
 8021df0:	e7a2      	b.n	8021d38 <_vfiprintf_r+0x20>
 8021df2:	4b4f      	ldr	r3, [pc, #316]	; (8021f30 <_vfiprintf_r+0x218>)
 8021df4:	429c      	cmp	r4, r3
 8021df6:	bf08      	it	eq
 8021df8:	68f4      	ldreq	r4, [r6, #12]
 8021dfa:	e79d      	b.n	8021d38 <_vfiprintf_r+0x20>
 8021dfc:	4621      	mov	r1, r4
 8021dfe:	4630      	mov	r0, r6
 8021e00:	f7ff fd12 	bl	8021828 <__swsetup_r>
 8021e04:	2800      	cmp	r0, #0
 8021e06:	d09d      	beq.n	8021d44 <_vfiprintf_r+0x2c>
 8021e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021e0c:	b01d      	add	sp, #116	; 0x74
 8021e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e12:	46a8      	mov	r8, r5
 8021e14:	e7a2      	b.n	8021d5c <_vfiprintf_r+0x44>
 8021e16:	4a44      	ldr	r2, [pc, #272]	; (8021f28 <_vfiprintf_r+0x210>)
 8021e18:	1a80      	subs	r0, r0, r2
 8021e1a:	fa0b f000 	lsl.w	r0, fp, r0
 8021e1e:	4318      	orrs	r0, r3
 8021e20:	9004      	str	r0, [sp, #16]
 8021e22:	4645      	mov	r5, r8
 8021e24:	e7be      	b.n	8021da4 <_vfiprintf_r+0x8c>
 8021e26:	9a03      	ldr	r2, [sp, #12]
 8021e28:	1d11      	adds	r1, r2, #4
 8021e2a:	6812      	ldr	r2, [r2, #0]
 8021e2c:	9103      	str	r1, [sp, #12]
 8021e2e:	2a00      	cmp	r2, #0
 8021e30:	db01      	blt.n	8021e36 <_vfiprintf_r+0x11e>
 8021e32:	9207      	str	r2, [sp, #28]
 8021e34:	e004      	b.n	8021e40 <_vfiprintf_r+0x128>
 8021e36:	4252      	negs	r2, r2
 8021e38:	f043 0302 	orr.w	r3, r3, #2
 8021e3c:	9207      	str	r2, [sp, #28]
 8021e3e:	9304      	str	r3, [sp, #16]
 8021e40:	f898 3000 	ldrb.w	r3, [r8]
 8021e44:	2b2e      	cmp	r3, #46	; 0x2e
 8021e46:	d10e      	bne.n	8021e66 <_vfiprintf_r+0x14e>
 8021e48:	f898 3001 	ldrb.w	r3, [r8, #1]
 8021e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8021e4e:	d138      	bne.n	8021ec2 <_vfiprintf_r+0x1aa>
 8021e50:	9b03      	ldr	r3, [sp, #12]
 8021e52:	1d1a      	adds	r2, r3, #4
 8021e54:	681b      	ldr	r3, [r3, #0]
 8021e56:	9203      	str	r2, [sp, #12]
 8021e58:	2b00      	cmp	r3, #0
 8021e5a:	bfb8      	it	lt
 8021e5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8021e60:	f108 0802 	add.w	r8, r8, #2
 8021e64:	9305      	str	r3, [sp, #20]
 8021e66:	4d33      	ldr	r5, [pc, #204]	; (8021f34 <_vfiprintf_r+0x21c>)
 8021e68:	f898 1000 	ldrb.w	r1, [r8]
 8021e6c:	2203      	movs	r2, #3
 8021e6e:	4628      	mov	r0, r5
 8021e70:	f7de f9ce 	bl	8000210 <memchr>
 8021e74:	b140      	cbz	r0, 8021e88 <_vfiprintf_r+0x170>
 8021e76:	2340      	movs	r3, #64	; 0x40
 8021e78:	1b40      	subs	r0, r0, r5
 8021e7a:	fa03 f000 	lsl.w	r0, r3, r0
 8021e7e:	9b04      	ldr	r3, [sp, #16]
 8021e80:	4303      	orrs	r3, r0
 8021e82:	f108 0801 	add.w	r8, r8, #1
 8021e86:	9304      	str	r3, [sp, #16]
 8021e88:	f898 1000 	ldrb.w	r1, [r8]
 8021e8c:	482a      	ldr	r0, [pc, #168]	; (8021f38 <_vfiprintf_r+0x220>)
 8021e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021e92:	2206      	movs	r2, #6
 8021e94:	f108 0701 	add.w	r7, r8, #1
 8021e98:	f7de f9ba 	bl	8000210 <memchr>
 8021e9c:	2800      	cmp	r0, #0
 8021e9e:	d037      	beq.n	8021f10 <_vfiprintf_r+0x1f8>
 8021ea0:	4b26      	ldr	r3, [pc, #152]	; (8021f3c <_vfiprintf_r+0x224>)
 8021ea2:	bb1b      	cbnz	r3, 8021eec <_vfiprintf_r+0x1d4>
 8021ea4:	9b03      	ldr	r3, [sp, #12]
 8021ea6:	3307      	adds	r3, #7
 8021ea8:	f023 0307 	bic.w	r3, r3, #7
 8021eac:	3308      	adds	r3, #8
 8021eae:	9303      	str	r3, [sp, #12]
 8021eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021eb2:	444b      	add	r3, r9
 8021eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8021eb6:	e750      	b.n	8021d5a <_vfiprintf_r+0x42>
 8021eb8:	fb05 3202 	mla	r2, r5, r2, r3
 8021ebc:	2001      	movs	r0, #1
 8021ebe:	4688      	mov	r8, r1
 8021ec0:	e78a      	b.n	8021dd8 <_vfiprintf_r+0xc0>
 8021ec2:	2300      	movs	r3, #0
 8021ec4:	f108 0801 	add.w	r8, r8, #1
 8021ec8:	9305      	str	r3, [sp, #20]
 8021eca:	4619      	mov	r1, r3
 8021ecc:	250a      	movs	r5, #10
 8021ece:	4640      	mov	r0, r8
 8021ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021ed4:	3a30      	subs	r2, #48	; 0x30
 8021ed6:	2a09      	cmp	r2, #9
 8021ed8:	d903      	bls.n	8021ee2 <_vfiprintf_r+0x1ca>
 8021eda:	2b00      	cmp	r3, #0
 8021edc:	d0c3      	beq.n	8021e66 <_vfiprintf_r+0x14e>
 8021ede:	9105      	str	r1, [sp, #20]
 8021ee0:	e7c1      	b.n	8021e66 <_vfiprintf_r+0x14e>
 8021ee2:	fb05 2101 	mla	r1, r5, r1, r2
 8021ee6:	2301      	movs	r3, #1
 8021ee8:	4680      	mov	r8, r0
 8021eea:	e7f0      	b.n	8021ece <_vfiprintf_r+0x1b6>
 8021eec:	ab03      	add	r3, sp, #12
 8021eee:	9300      	str	r3, [sp, #0]
 8021ef0:	4622      	mov	r2, r4
 8021ef2:	4b13      	ldr	r3, [pc, #76]	; (8021f40 <_vfiprintf_r+0x228>)
 8021ef4:	a904      	add	r1, sp, #16
 8021ef6:	4630      	mov	r0, r6
 8021ef8:	f3af 8000 	nop.w
 8021efc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8021f00:	4681      	mov	r9, r0
 8021f02:	d1d5      	bne.n	8021eb0 <_vfiprintf_r+0x198>
 8021f04:	89a3      	ldrh	r3, [r4, #12]
 8021f06:	065b      	lsls	r3, r3, #25
 8021f08:	f53f af7e 	bmi.w	8021e08 <_vfiprintf_r+0xf0>
 8021f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021f0e:	e77d      	b.n	8021e0c <_vfiprintf_r+0xf4>
 8021f10:	ab03      	add	r3, sp, #12
 8021f12:	9300      	str	r3, [sp, #0]
 8021f14:	4622      	mov	r2, r4
 8021f16:	4b0a      	ldr	r3, [pc, #40]	; (8021f40 <_vfiprintf_r+0x228>)
 8021f18:	a904      	add	r1, sp, #16
 8021f1a:	4630      	mov	r0, r6
 8021f1c:	f000 f888 	bl	8022030 <_printf_i>
 8021f20:	e7ec      	b.n	8021efc <_vfiprintf_r+0x1e4>
 8021f22:	bf00      	nop
 8021f24:	08028090 	.word	0x08028090
 8021f28:	080280d0 	.word	0x080280d0
 8021f2c:	080280b0 	.word	0x080280b0
 8021f30:	08028070 	.word	0x08028070
 8021f34:	080280d6 	.word	0x080280d6
 8021f38:	080280da 	.word	0x080280da
 8021f3c:	00000000 	.word	0x00000000
 8021f40:	08021cf3 	.word	0x08021cf3

08021f44 <_printf_common>:
 8021f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021f48:	4691      	mov	r9, r2
 8021f4a:	461f      	mov	r7, r3
 8021f4c:	688a      	ldr	r2, [r1, #8]
 8021f4e:	690b      	ldr	r3, [r1, #16]
 8021f50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021f54:	4293      	cmp	r3, r2
 8021f56:	bfb8      	it	lt
 8021f58:	4613      	movlt	r3, r2
 8021f5a:	f8c9 3000 	str.w	r3, [r9]
 8021f5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021f62:	4606      	mov	r6, r0
 8021f64:	460c      	mov	r4, r1
 8021f66:	b112      	cbz	r2, 8021f6e <_printf_common+0x2a>
 8021f68:	3301      	adds	r3, #1
 8021f6a:	f8c9 3000 	str.w	r3, [r9]
 8021f6e:	6823      	ldr	r3, [r4, #0]
 8021f70:	0699      	lsls	r1, r3, #26
 8021f72:	bf42      	ittt	mi
 8021f74:	f8d9 3000 	ldrmi.w	r3, [r9]
 8021f78:	3302      	addmi	r3, #2
 8021f7a:	f8c9 3000 	strmi.w	r3, [r9]
 8021f7e:	6825      	ldr	r5, [r4, #0]
 8021f80:	f015 0506 	ands.w	r5, r5, #6
 8021f84:	d107      	bne.n	8021f96 <_printf_common+0x52>
 8021f86:	f104 0a19 	add.w	sl, r4, #25
 8021f8a:	68e3      	ldr	r3, [r4, #12]
 8021f8c:	f8d9 2000 	ldr.w	r2, [r9]
 8021f90:	1a9b      	subs	r3, r3, r2
 8021f92:	42ab      	cmp	r3, r5
 8021f94:	dc28      	bgt.n	8021fe8 <_printf_common+0xa4>
 8021f96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8021f9a:	6822      	ldr	r2, [r4, #0]
 8021f9c:	3300      	adds	r3, #0
 8021f9e:	bf18      	it	ne
 8021fa0:	2301      	movne	r3, #1
 8021fa2:	0692      	lsls	r2, r2, #26
 8021fa4:	d42d      	bmi.n	8022002 <_printf_common+0xbe>
 8021fa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021faa:	4639      	mov	r1, r7
 8021fac:	4630      	mov	r0, r6
 8021fae:	47c0      	blx	r8
 8021fb0:	3001      	adds	r0, #1
 8021fb2:	d020      	beq.n	8021ff6 <_printf_common+0xb2>
 8021fb4:	6823      	ldr	r3, [r4, #0]
 8021fb6:	68e5      	ldr	r5, [r4, #12]
 8021fb8:	f8d9 2000 	ldr.w	r2, [r9]
 8021fbc:	f003 0306 	and.w	r3, r3, #6
 8021fc0:	2b04      	cmp	r3, #4
 8021fc2:	bf08      	it	eq
 8021fc4:	1aad      	subeq	r5, r5, r2
 8021fc6:	68a3      	ldr	r3, [r4, #8]
 8021fc8:	6922      	ldr	r2, [r4, #16]
 8021fca:	bf0c      	ite	eq
 8021fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021fd0:	2500      	movne	r5, #0
 8021fd2:	4293      	cmp	r3, r2
 8021fd4:	bfc4      	itt	gt
 8021fd6:	1a9b      	subgt	r3, r3, r2
 8021fd8:	18ed      	addgt	r5, r5, r3
 8021fda:	f04f 0900 	mov.w	r9, #0
 8021fde:	341a      	adds	r4, #26
 8021fe0:	454d      	cmp	r5, r9
 8021fe2:	d11a      	bne.n	802201a <_printf_common+0xd6>
 8021fe4:	2000      	movs	r0, #0
 8021fe6:	e008      	b.n	8021ffa <_printf_common+0xb6>
 8021fe8:	2301      	movs	r3, #1
 8021fea:	4652      	mov	r2, sl
 8021fec:	4639      	mov	r1, r7
 8021fee:	4630      	mov	r0, r6
 8021ff0:	47c0      	blx	r8
 8021ff2:	3001      	adds	r0, #1
 8021ff4:	d103      	bne.n	8021ffe <_printf_common+0xba>
 8021ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ffe:	3501      	adds	r5, #1
 8022000:	e7c3      	b.n	8021f8a <_printf_common+0x46>
 8022002:	18e1      	adds	r1, r4, r3
 8022004:	1c5a      	adds	r2, r3, #1
 8022006:	2030      	movs	r0, #48	; 0x30
 8022008:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802200c:	4422      	add	r2, r4
 802200e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022012:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022016:	3302      	adds	r3, #2
 8022018:	e7c5      	b.n	8021fa6 <_printf_common+0x62>
 802201a:	2301      	movs	r3, #1
 802201c:	4622      	mov	r2, r4
 802201e:	4639      	mov	r1, r7
 8022020:	4630      	mov	r0, r6
 8022022:	47c0      	blx	r8
 8022024:	3001      	adds	r0, #1
 8022026:	d0e6      	beq.n	8021ff6 <_printf_common+0xb2>
 8022028:	f109 0901 	add.w	r9, r9, #1
 802202c:	e7d8      	b.n	8021fe0 <_printf_common+0x9c>
	...

08022030 <_printf_i>:
 8022030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022034:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8022038:	460c      	mov	r4, r1
 802203a:	7e09      	ldrb	r1, [r1, #24]
 802203c:	b085      	sub	sp, #20
 802203e:	296e      	cmp	r1, #110	; 0x6e
 8022040:	4617      	mov	r7, r2
 8022042:	4606      	mov	r6, r0
 8022044:	4698      	mov	r8, r3
 8022046:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022048:	f000 80b3 	beq.w	80221b2 <_printf_i+0x182>
 802204c:	d822      	bhi.n	8022094 <_printf_i+0x64>
 802204e:	2963      	cmp	r1, #99	; 0x63
 8022050:	d036      	beq.n	80220c0 <_printf_i+0x90>
 8022052:	d80a      	bhi.n	802206a <_printf_i+0x3a>
 8022054:	2900      	cmp	r1, #0
 8022056:	f000 80b9 	beq.w	80221cc <_printf_i+0x19c>
 802205a:	2958      	cmp	r1, #88	; 0x58
 802205c:	f000 8083 	beq.w	8022166 <_printf_i+0x136>
 8022060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022064:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8022068:	e032      	b.n	80220d0 <_printf_i+0xa0>
 802206a:	2964      	cmp	r1, #100	; 0x64
 802206c:	d001      	beq.n	8022072 <_printf_i+0x42>
 802206e:	2969      	cmp	r1, #105	; 0x69
 8022070:	d1f6      	bne.n	8022060 <_printf_i+0x30>
 8022072:	6820      	ldr	r0, [r4, #0]
 8022074:	6813      	ldr	r3, [r2, #0]
 8022076:	0605      	lsls	r5, r0, #24
 8022078:	f103 0104 	add.w	r1, r3, #4
 802207c:	d52a      	bpl.n	80220d4 <_printf_i+0xa4>
 802207e:	681b      	ldr	r3, [r3, #0]
 8022080:	6011      	str	r1, [r2, #0]
 8022082:	2b00      	cmp	r3, #0
 8022084:	da03      	bge.n	802208e <_printf_i+0x5e>
 8022086:	222d      	movs	r2, #45	; 0x2d
 8022088:	425b      	negs	r3, r3
 802208a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802208e:	486f      	ldr	r0, [pc, #444]	; (802224c <_printf_i+0x21c>)
 8022090:	220a      	movs	r2, #10
 8022092:	e039      	b.n	8022108 <_printf_i+0xd8>
 8022094:	2973      	cmp	r1, #115	; 0x73
 8022096:	f000 809d 	beq.w	80221d4 <_printf_i+0x1a4>
 802209a:	d808      	bhi.n	80220ae <_printf_i+0x7e>
 802209c:	296f      	cmp	r1, #111	; 0x6f
 802209e:	d020      	beq.n	80220e2 <_printf_i+0xb2>
 80220a0:	2970      	cmp	r1, #112	; 0x70
 80220a2:	d1dd      	bne.n	8022060 <_printf_i+0x30>
 80220a4:	6823      	ldr	r3, [r4, #0]
 80220a6:	f043 0320 	orr.w	r3, r3, #32
 80220aa:	6023      	str	r3, [r4, #0]
 80220ac:	e003      	b.n	80220b6 <_printf_i+0x86>
 80220ae:	2975      	cmp	r1, #117	; 0x75
 80220b0:	d017      	beq.n	80220e2 <_printf_i+0xb2>
 80220b2:	2978      	cmp	r1, #120	; 0x78
 80220b4:	d1d4      	bne.n	8022060 <_printf_i+0x30>
 80220b6:	2378      	movs	r3, #120	; 0x78
 80220b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80220bc:	4864      	ldr	r0, [pc, #400]	; (8022250 <_printf_i+0x220>)
 80220be:	e055      	b.n	802216c <_printf_i+0x13c>
 80220c0:	6813      	ldr	r3, [r2, #0]
 80220c2:	1d19      	adds	r1, r3, #4
 80220c4:	681b      	ldr	r3, [r3, #0]
 80220c6:	6011      	str	r1, [r2, #0]
 80220c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80220cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80220d0:	2301      	movs	r3, #1
 80220d2:	e08c      	b.n	80221ee <_printf_i+0x1be>
 80220d4:	681b      	ldr	r3, [r3, #0]
 80220d6:	6011      	str	r1, [r2, #0]
 80220d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80220dc:	bf18      	it	ne
 80220de:	b21b      	sxthne	r3, r3
 80220e0:	e7cf      	b.n	8022082 <_printf_i+0x52>
 80220e2:	6813      	ldr	r3, [r2, #0]
 80220e4:	6825      	ldr	r5, [r4, #0]
 80220e6:	1d18      	adds	r0, r3, #4
 80220e8:	6010      	str	r0, [r2, #0]
 80220ea:	0628      	lsls	r0, r5, #24
 80220ec:	d501      	bpl.n	80220f2 <_printf_i+0xc2>
 80220ee:	681b      	ldr	r3, [r3, #0]
 80220f0:	e002      	b.n	80220f8 <_printf_i+0xc8>
 80220f2:	0668      	lsls	r0, r5, #25
 80220f4:	d5fb      	bpl.n	80220ee <_printf_i+0xbe>
 80220f6:	881b      	ldrh	r3, [r3, #0]
 80220f8:	4854      	ldr	r0, [pc, #336]	; (802224c <_printf_i+0x21c>)
 80220fa:	296f      	cmp	r1, #111	; 0x6f
 80220fc:	bf14      	ite	ne
 80220fe:	220a      	movne	r2, #10
 8022100:	2208      	moveq	r2, #8
 8022102:	2100      	movs	r1, #0
 8022104:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022108:	6865      	ldr	r5, [r4, #4]
 802210a:	60a5      	str	r5, [r4, #8]
 802210c:	2d00      	cmp	r5, #0
 802210e:	f2c0 8095 	blt.w	802223c <_printf_i+0x20c>
 8022112:	6821      	ldr	r1, [r4, #0]
 8022114:	f021 0104 	bic.w	r1, r1, #4
 8022118:	6021      	str	r1, [r4, #0]
 802211a:	2b00      	cmp	r3, #0
 802211c:	d13d      	bne.n	802219a <_printf_i+0x16a>
 802211e:	2d00      	cmp	r5, #0
 8022120:	f040 808e 	bne.w	8022240 <_printf_i+0x210>
 8022124:	4665      	mov	r5, ip
 8022126:	2a08      	cmp	r2, #8
 8022128:	d10b      	bne.n	8022142 <_printf_i+0x112>
 802212a:	6823      	ldr	r3, [r4, #0]
 802212c:	07db      	lsls	r3, r3, #31
 802212e:	d508      	bpl.n	8022142 <_printf_i+0x112>
 8022130:	6923      	ldr	r3, [r4, #16]
 8022132:	6862      	ldr	r2, [r4, #4]
 8022134:	429a      	cmp	r2, r3
 8022136:	bfde      	ittt	le
 8022138:	2330      	movle	r3, #48	; 0x30
 802213a:	f805 3c01 	strble.w	r3, [r5, #-1]
 802213e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8022142:	ebac 0305 	sub.w	r3, ip, r5
 8022146:	6123      	str	r3, [r4, #16]
 8022148:	f8cd 8000 	str.w	r8, [sp]
 802214c:	463b      	mov	r3, r7
 802214e:	aa03      	add	r2, sp, #12
 8022150:	4621      	mov	r1, r4
 8022152:	4630      	mov	r0, r6
 8022154:	f7ff fef6 	bl	8021f44 <_printf_common>
 8022158:	3001      	adds	r0, #1
 802215a:	d14d      	bne.n	80221f8 <_printf_i+0x1c8>
 802215c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022160:	b005      	add	sp, #20
 8022162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022166:	4839      	ldr	r0, [pc, #228]	; (802224c <_printf_i+0x21c>)
 8022168:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802216c:	6813      	ldr	r3, [r2, #0]
 802216e:	6821      	ldr	r1, [r4, #0]
 8022170:	1d1d      	adds	r5, r3, #4
 8022172:	681b      	ldr	r3, [r3, #0]
 8022174:	6015      	str	r5, [r2, #0]
 8022176:	060a      	lsls	r2, r1, #24
 8022178:	d50b      	bpl.n	8022192 <_printf_i+0x162>
 802217a:	07ca      	lsls	r2, r1, #31
 802217c:	bf44      	itt	mi
 802217e:	f041 0120 	orrmi.w	r1, r1, #32
 8022182:	6021      	strmi	r1, [r4, #0]
 8022184:	b91b      	cbnz	r3, 802218e <_printf_i+0x15e>
 8022186:	6822      	ldr	r2, [r4, #0]
 8022188:	f022 0220 	bic.w	r2, r2, #32
 802218c:	6022      	str	r2, [r4, #0]
 802218e:	2210      	movs	r2, #16
 8022190:	e7b7      	b.n	8022102 <_printf_i+0xd2>
 8022192:	064d      	lsls	r5, r1, #25
 8022194:	bf48      	it	mi
 8022196:	b29b      	uxthmi	r3, r3
 8022198:	e7ef      	b.n	802217a <_printf_i+0x14a>
 802219a:	4665      	mov	r5, ip
 802219c:	fbb3 f1f2 	udiv	r1, r3, r2
 80221a0:	fb02 3311 	mls	r3, r2, r1, r3
 80221a4:	5cc3      	ldrb	r3, [r0, r3]
 80221a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80221aa:	460b      	mov	r3, r1
 80221ac:	2900      	cmp	r1, #0
 80221ae:	d1f5      	bne.n	802219c <_printf_i+0x16c>
 80221b0:	e7b9      	b.n	8022126 <_printf_i+0xf6>
 80221b2:	6813      	ldr	r3, [r2, #0]
 80221b4:	6825      	ldr	r5, [r4, #0]
 80221b6:	6961      	ldr	r1, [r4, #20]
 80221b8:	1d18      	adds	r0, r3, #4
 80221ba:	6010      	str	r0, [r2, #0]
 80221bc:	0628      	lsls	r0, r5, #24
 80221be:	681b      	ldr	r3, [r3, #0]
 80221c0:	d501      	bpl.n	80221c6 <_printf_i+0x196>
 80221c2:	6019      	str	r1, [r3, #0]
 80221c4:	e002      	b.n	80221cc <_printf_i+0x19c>
 80221c6:	066a      	lsls	r2, r5, #25
 80221c8:	d5fb      	bpl.n	80221c2 <_printf_i+0x192>
 80221ca:	8019      	strh	r1, [r3, #0]
 80221cc:	2300      	movs	r3, #0
 80221ce:	6123      	str	r3, [r4, #16]
 80221d0:	4665      	mov	r5, ip
 80221d2:	e7b9      	b.n	8022148 <_printf_i+0x118>
 80221d4:	6813      	ldr	r3, [r2, #0]
 80221d6:	1d19      	adds	r1, r3, #4
 80221d8:	6011      	str	r1, [r2, #0]
 80221da:	681d      	ldr	r5, [r3, #0]
 80221dc:	6862      	ldr	r2, [r4, #4]
 80221de:	2100      	movs	r1, #0
 80221e0:	4628      	mov	r0, r5
 80221e2:	f7de f815 	bl	8000210 <memchr>
 80221e6:	b108      	cbz	r0, 80221ec <_printf_i+0x1bc>
 80221e8:	1b40      	subs	r0, r0, r5
 80221ea:	6060      	str	r0, [r4, #4]
 80221ec:	6863      	ldr	r3, [r4, #4]
 80221ee:	6123      	str	r3, [r4, #16]
 80221f0:	2300      	movs	r3, #0
 80221f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80221f6:	e7a7      	b.n	8022148 <_printf_i+0x118>
 80221f8:	6923      	ldr	r3, [r4, #16]
 80221fa:	462a      	mov	r2, r5
 80221fc:	4639      	mov	r1, r7
 80221fe:	4630      	mov	r0, r6
 8022200:	47c0      	blx	r8
 8022202:	3001      	adds	r0, #1
 8022204:	d0aa      	beq.n	802215c <_printf_i+0x12c>
 8022206:	6823      	ldr	r3, [r4, #0]
 8022208:	079b      	lsls	r3, r3, #30
 802220a:	d413      	bmi.n	8022234 <_printf_i+0x204>
 802220c:	68e0      	ldr	r0, [r4, #12]
 802220e:	9b03      	ldr	r3, [sp, #12]
 8022210:	4298      	cmp	r0, r3
 8022212:	bfb8      	it	lt
 8022214:	4618      	movlt	r0, r3
 8022216:	e7a3      	b.n	8022160 <_printf_i+0x130>
 8022218:	2301      	movs	r3, #1
 802221a:	464a      	mov	r2, r9
 802221c:	4639      	mov	r1, r7
 802221e:	4630      	mov	r0, r6
 8022220:	47c0      	blx	r8
 8022222:	3001      	adds	r0, #1
 8022224:	d09a      	beq.n	802215c <_printf_i+0x12c>
 8022226:	3501      	adds	r5, #1
 8022228:	68e3      	ldr	r3, [r4, #12]
 802222a:	9a03      	ldr	r2, [sp, #12]
 802222c:	1a9b      	subs	r3, r3, r2
 802222e:	42ab      	cmp	r3, r5
 8022230:	dcf2      	bgt.n	8022218 <_printf_i+0x1e8>
 8022232:	e7eb      	b.n	802220c <_printf_i+0x1dc>
 8022234:	2500      	movs	r5, #0
 8022236:	f104 0919 	add.w	r9, r4, #25
 802223a:	e7f5      	b.n	8022228 <_printf_i+0x1f8>
 802223c:	2b00      	cmp	r3, #0
 802223e:	d1ac      	bne.n	802219a <_printf_i+0x16a>
 8022240:	7803      	ldrb	r3, [r0, #0]
 8022242:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022246:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802224a:	e76c      	b.n	8022126 <_printf_i+0xf6>
 802224c:	080280e1 	.word	0x080280e1
 8022250:	080280f2 	.word	0x080280f2

08022254 <__sread>:
 8022254:	b510      	push	{r4, lr}
 8022256:	460c      	mov	r4, r1
 8022258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802225c:	f000 f894 	bl	8022388 <_read_r>
 8022260:	2800      	cmp	r0, #0
 8022262:	bfab      	itete	ge
 8022264:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022266:	89a3      	ldrhlt	r3, [r4, #12]
 8022268:	181b      	addge	r3, r3, r0
 802226a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802226e:	bfac      	ite	ge
 8022270:	6563      	strge	r3, [r4, #84]	; 0x54
 8022272:	81a3      	strhlt	r3, [r4, #12]
 8022274:	bd10      	pop	{r4, pc}

08022276 <__swrite>:
 8022276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802227a:	461f      	mov	r7, r3
 802227c:	898b      	ldrh	r3, [r1, #12]
 802227e:	05db      	lsls	r3, r3, #23
 8022280:	4605      	mov	r5, r0
 8022282:	460c      	mov	r4, r1
 8022284:	4616      	mov	r6, r2
 8022286:	d505      	bpl.n	8022294 <__swrite+0x1e>
 8022288:	2302      	movs	r3, #2
 802228a:	2200      	movs	r2, #0
 802228c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022290:	f000 f868 	bl	8022364 <_lseek_r>
 8022294:	89a3      	ldrh	r3, [r4, #12]
 8022296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802229a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802229e:	81a3      	strh	r3, [r4, #12]
 80222a0:	4632      	mov	r2, r6
 80222a2:	463b      	mov	r3, r7
 80222a4:	4628      	mov	r0, r5
 80222a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80222aa:	f000 b817 	b.w	80222dc <_write_r>

080222ae <__sseek>:
 80222ae:	b510      	push	{r4, lr}
 80222b0:	460c      	mov	r4, r1
 80222b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80222b6:	f000 f855 	bl	8022364 <_lseek_r>
 80222ba:	1c43      	adds	r3, r0, #1
 80222bc:	89a3      	ldrh	r3, [r4, #12]
 80222be:	bf15      	itete	ne
 80222c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80222c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80222c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80222ca:	81a3      	strheq	r3, [r4, #12]
 80222cc:	bf18      	it	ne
 80222ce:	81a3      	strhne	r3, [r4, #12]
 80222d0:	bd10      	pop	{r4, pc}

080222d2 <__sclose>:
 80222d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80222d6:	f000 b813 	b.w	8022300 <_close_r>
	...

080222dc <_write_r>:
 80222dc:	b538      	push	{r3, r4, r5, lr}
 80222de:	4c07      	ldr	r4, [pc, #28]	; (80222fc <_write_r+0x20>)
 80222e0:	4605      	mov	r5, r0
 80222e2:	4608      	mov	r0, r1
 80222e4:	4611      	mov	r1, r2
 80222e6:	2200      	movs	r2, #0
 80222e8:	6022      	str	r2, [r4, #0]
 80222ea:	461a      	mov	r2, r3
 80222ec:	f7e0 fb33 	bl	8002956 <_write>
 80222f0:	1c43      	adds	r3, r0, #1
 80222f2:	d102      	bne.n	80222fa <_write_r+0x1e>
 80222f4:	6823      	ldr	r3, [r4, #0]
 80222f6:	b103      	cbz	r3, 80222fa <_write_r+0x1e>
 80222f8:	602b      	str	r3, [r5, #0]
 80222fa:	bd38      	pop	{r3, r4, r5, pc}
 80222fc:	2001039c 	.word	0x2001039c

08022300 <_close_r>:
 8022300:	b538      	push	{r3, r4, r5, lr}
 8022302:	4c06      	ldr	r4, [pc, #24]	; (802231c <_close_r+0x1c>)
 8022304:	2300      	movs	r3, #0
 8022306:	4605      	mov	r5, r0
 8022308:	4608      	mov	r0, r1
 802230a:	6023      	str	r3, [r4, #0]
 802230c:	f7e0 fb3f 	bl	800298e <_close>
 8022310:	1c43      	adds	r3, r0, #1
 8022312:	d102      	bne.n	802231a <_close_r+0x1a>
 8022314:	6823      	ldr	r3, [r4, #0]
 8022316:	b103      	cbz	r3, 802231a <_close_r+0x1a>
 8022318:	602b      	str	r3, [r5, #0]
 802231a:	bd38      	pop	{r3, r4, r5, pc}
 802231c:	2001039c 	.word	0x2001039c

08022320 <_fstat_r>:
 8022320:	b538      	push	{r3, r4, r5, lr}
 8022322:	4c07      	ldr	r4, [pc, #28]	; (8022340 <_fstat_r+0x20>)
 8022324:	2300      	movs	r3, #0
 8022326:	4605      	mov	r5, r0
 8022328:	4608      	mov	r0, r1
 802232a:	4611      	mov	r1, r2
 802232c:	6023      	str	r3, [r4, #0]
 802232e:	f7e0 fb3a 	bl	80029a6 <_fstat>
 8022332:	1c43      	adds	r3, r0, #1
 8022334:	d102      	bne.n	802233c <_fstat_r+0x1c>
 8022336:	6823      	ldr	r3, [r4, #0]
 8022338:	b103      	cbz	r3, 802233c <_fstat_r+0x1c>
 802233a:	602b      	str	r3, [r5, #0]
 802233c:	bd38      	pop	{r3, r4, r5, pc}
 802233e:	bf00      	nop
 8022340:	2001039c 	.word	0x2001039c

08022344 <_isatty_r>:
 8022344:	b538      	push	{r3, r4, r5, lr}
 8022346:	4c06      	ldr	r4, [pc, #24]	; (8022360 <_isatty_r+0x1c>)
 8022348:	2300      	movs	r3, #0
 802234a:	4605      	mov	r5, r0
 802234c:	4608      	mov	r0, r1
 802234e:	6023      	str	r3, [r4, #0]
 8022350:	f7e0 fb39 	bl	80029c6 <_isatty>
 8022354:	1c43      	adds	r3, r0, #1
 8022356:	d102      	bne.n	802235e <_isatty_r+0x1a>
 8022358:	6823      	ldr	r3, [r4, #0]
 802235a:	b103      	cbz	r3, 802235e <_isatty_r+0x1a>
 802235c:	602b      	str	r3, [r5, #0]
 802235e:	bd38      	pop	{r3, r4, r5, pc}
 8022360:	2001039c 	.word	0x2001039c

08022364 <_lseek_r>:
 8022364:	b538      	push	{r3, r4, r5, lr}
 8022366:	4c07      	ldr	r4, [pc, #28]	; (8022384 <_lseek_r+0x20>)
 8022368:	4605      	mov	r5, r0
 802236a:	4608      	mov	r0, r1
 802236c:	4611      	mov	r1, r2
 802236e:	2200      	movs	r2, #0
 8022370:	6022      	str	r2, [r4, #0]
 8022372:	461a      	mov	r2, r3
 8022374:	f7e0 fb32 	bl	80029dc <_lseek>
 8022378:	1c43      	adds	r3, r0, #1
 802237a:	d102      	bne.n	8022382 <_lseek_r+0x1e>
 802237c:	6823      	ldr	r3, [r4, #0]
 802237e:	b103      	cbz	r3, 8022382 <_lseek_r+0x1e>
 8022380:	602b      	str	r3, [r5, #0]
 8022382:	bd38      	pop	{r3, r4, r5, pc}
 8022384:	2001039c 	.word	0x2001039c

08022388 <_read_r>:
 8022388:	b538      	push	{r3, r4, r5, lr}
 802238a:	4c07      	ldr	r4, [pc, #28]	; (80223a8 <_read_r+0x20>)
 802238c:	4605      	mov	r5, r0
 802238e:	4608      	mov	r0, r1
 8022390:	4611      	mov	r1, r2
 8022392:	2200      	movs	r2, #0
 8022394:	6022      	str	r2, [r4, #0]
 8022396:	461a      	mov	r2, r3
 8022398:	f7e0 fac0 	bl	800291c <_read>
 802239c:	1c43      	adds	r3, r0, #1
 802239e:	d102      	bne.n	80223a6 <_read_r+0x1e>
 80223a0:	6823      	ldr	r3, [r4, #0]
 80223a2:	b103      	cbz	r3, 80223a6 <_read_r+0x1e>
 80223a4:	602b      	str	r3, [r5, #0]
 80223a6:	bd38      	pop	{r3, r4, r5, pc}
 80223a8:	2001039c 	.word	0x2001039c

080223ac <_init>:
 80223ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80223ae:	bf00      	nop
 80223b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80223b2:	bc08      	pop	{r3}
 80223b4:	469e      	mov	lr, r3
 80223b6:	4770      	bx	lr

080223b8 <_fini>:
 80223b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80223ba:	bf00      	nop
 80223bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80223be:	bc08      	pop	{r3}
 80223c0:	469e      	mov	lr, r3
 80223c2:	4770      	bx	lr
